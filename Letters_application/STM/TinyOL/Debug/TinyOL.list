
TinyOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005ba40  0800af60  0800af60  0001af60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080669a0  080669a0  000810a4  2**0
                  CONTENTS
  4 .ARM          00000008  080669a0  080669a0  000769a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080669a8  080669a8  000810a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080669a8  080669a8  000769a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080669ac  080669ac  000769ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010a4  20000000  080669b0  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b50  200010a4  08067a54  000810a4  2**2
                  ALLOC
 10 ._user_heap_stack 00001204  20002bf4  08067a54  00082bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000810a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013847  00000000  00000000  000810d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f19  00000000  00000000  0009491b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00097838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00098670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019adb  00000000  00000000  00099348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001381a  00000000  00000000  000b2e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d17  00000000  00000000  000c663d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0015e354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e0c  00000000  00000000  0015e424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00163230  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001632fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200010a4 	.word	0x200010a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af3c 	.word	0x0800af3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200010a8 	.word	0x200010a8
 80001dc:	0800af3c 	.word	0x0800af3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <OL_allocateMemory>:
//      FUNCTIONS RELATED TO MEMORY ALLOCATION
// #############################################


/*  Allocates all the matrices and arrays needed for the bare minimum functions.  */
void OL_allocateMemory(OL_LAYER_STRUCT * layer){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

	layer->weights = calloc(layer->WIDTH*layer->HEIGHT, sizeof(float));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6912      	ldr	r2, [r2, #16]
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	2104      	movs	r1, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f006 fc54 	bl	8007814 <calloc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
	if(layer->weights==NULL){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d103      	bne.n	8000f84 <OL_allocateMemory+0x34>
		  layer->OL_ERROR = CALLOC_WEIGHTS;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->biases = calloc(layer->WIDTH, sizeof(float));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 fc42 	bl	8007814 <calloc>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	61da      	str	r2, [r3, #28]
	if(layer->biases==NULL){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d103      	bne.n	8000fa8 <OL_allocateMemory+0x58>
	  layer->OL_ERROR = CALLOC_BIASES;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->label = calloc(layer->WIDTH, sizeof(char));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2101      	movs	r1, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f006 fc30 	bl	8007814 <calloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	615a      	str	r2, [r3, #20]
	if(layer->label==NULL){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <OL_allocateMemory+0x7c>
	  layer->OL_ERROR = CALLOC_LABEL;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->y_pred = calloc(layer->WIDTH, sizeof(float));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 fc1e 	bl	8007814 <calloc>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	621a      	str	r2, [r3, #32]
	if(layer->y_pred==NULL){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d103      	bne.n	8000ff0 <OL_allocateMemory+0xa0>
	  layer->OL_ERROR = CALLOC_Y_PRED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2203      	movs	r2, #3
 8000fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->y_true = calloc(layer->WIDTH, sizeof(float));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fc0c 	bl	8007814 <calloc>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
	if(layer->y_true== NULL){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2b00      	cmp	r3, #0
 800100a:	d103      	bne.n	8001014 <OL_allocateMemory+0xc4>
	  layer->OL_ERROR = CALLOC_Y_TRUE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2207      	movs	r2, #7
 8001010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}


	if( layer->ALGORITHM!=MODE_OL && layer->ALGORITHM!=MODE_OL_V2){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001018:	2b00      	cmp	r3, #0
 800101a:	d05b      	beq.n	80010d4 <OL_allocateMemory+0x184>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001020:	2b01      	cmp	r3, #1
 8001022:	d057      	beq.n	80010d4 <OL_allocateMemory+0x184>

		layer->weights_2 = calloc(layer->WIDTH*layer->HEIGHT, sizeof(float));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6912      	ldr	r2, [r2, #16]
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	2104      	movs	r1, #4
 8001032:	4618      	mov	r0, r3
 8001034:	f006 fbee 	bl	8007814 <calloc>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
		if(layer->weights_2==NULL){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	2b00      	cmp	r3, #0
 8001046:	d103      	bne.n	8001050 <OL_allocateMemory+0x100>
			layer->OL_ERROR = CALLOC_WEIGHTS_2;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2204      	movs	r2, #4
 800104c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}

		layer->biases_2 = calloc(layer->WIDTH, sizeof(float));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2104      	movs	r1, #4
 8001056:	4618      	mov	r0, r3
 8001058:	f006 fbdc 	bl	8007814 <calloc>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
		if(layer->biases_2==NULL){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <OL_allocateMemory+0x124>
			layer->OL_ERROR = CALLOC_BIASES_2;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2205      	movs	r2, #5
 8001070:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}

		if(layer->ALGORITHM == MODE_CWR){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001078:	2b02      	cmp	r3, #2
 800107a:	d111      	bne.n	80010a0 <OL_allocateMemory+0x150>
			layer->found_lett = calloc(layer->WIDTH, sizeof(uint8_t));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2101      	movs	r1, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f006 fbc6 	bl	8007814 <calloc>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	635a      	str	r2, [r3, #52]	; 0x34
			if(layer->found_lett==NULL){
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	2b00      	cmp	r3, #0
 8001096:	d103      	bne.n	80010a0 <OL_allocateMemory+0x150>
				layer->OL_ERROR = CALLOC_FOUND_LETT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2206      	movs	r2, #6
 800109c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			}
		}

		if(layer->ALGORITHM != MODE_OL_batch && layer->ALGORITHM != MODE_OL_V2_batch){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d015      	beq.n	80010d4 <OL_allocateMemory+0x184>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d011      	beq.n	80010d4 <OL_allocateMemory+0x184>
			layer->y_pred_2 = calloc(layer->WIDTH, sizeof(float));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2104      	movs	r1, #4
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 fbac 	bl	8007814 <calloc>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38
			if(layer->y_pred_2==NULL){
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d103      	bne.n	80010d4 <OL_allocateMemory+0x184>
				layer->OL_ERROR = CALLOC_Y_PRED_2;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2208      	movs	r2, #8
 80010d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			}
		}
	}

}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <OL_increaseWeightDim>:


/* Use realloc to increase the amount of memory dedicated to the weights  */
void OL_increaseWeightDim(OL_LAYER_STRUCT * layer){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	int h = layer->HEIGHT;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	60fb      	str	r3, [r7, #12]
	int w = layer->WIDTH;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	60bb      	str	r3, [r7, #8]

	layer->weights = realloc(layer->weights, h*w*sizeof(float));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6998      	ldr	r0, [r3, #24]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4619      	mov	r1, r3
 8001100:	f007 f992 	bl	8008428 <realloc>
 8001104:	4602      	mov	r2, r0
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	619a      	str	r2, [r3, #24]
	if(layer->weights== NULL){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <OL_increaseWeightDim+0x3e>
		layer->OL_ERROR = REALLOC_WEIGHTS;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	220a      	movs	r2, #10
 8001116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	// set to 0 only the new weights
	for(int i=h*(w-1); i<h*w; i++){
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e00a      	b.n	800113e <OL_increaseWeightDim+0x62>
		layer->weights[i] = 0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699a      	ldr	r2, [r3, #24]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
	for(int i=h*(w-1); i<h*w; i++){
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbed      	blt.n	8001128 <OL_increaseWeightDim+0x4c>
	}

	if(layer->ALGORITHM != MODE_OL && layer->ALGORITHM != MODE_OL_V2){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001150:	2b00      	cmp	r3, #0
 8001152:	d031      	beq.n	80011b8 <OL_increaseWeightDim+0xdc>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001158:	2b01      	cmp	r3, #1
 800115a:	d02d      	beq.n	80011b8 <OL_increaseWeightDim+0xdc>

		layer->weights_2 = realloc(layer->weights_2, h*w*sizeof(float));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4619      	mov	r1, r3
 800116c:	f007 f95c 	bl	8008428 <realloc>
 8001170:	4602      	mov	r2, r0
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
		if(layer->weights_2== NULL){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117a:	2b00      	cmp	r3, #0
 800117c:	d103      	bne.n	8001186 <OL_increaseWeightDim+0xaa>
			layer->OL_ERROR = REALLOC_WEIGHTS_2;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	220b      	movs	r2, #11
 8001182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}

		// set to 0 new weights
		for(int i=h*(w-1); i<h*w; i++){
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e00a      	b.n	80011aa <OL_increaseWeightDim+0xce>
			layer->weights_2[i] = 0;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
		for(int i=h*(w-1); i<h*w; i++){
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	3301      	adds	r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbed      	blt.n	8001194 <OL_increaseWeightDim+0xb8>
	}

#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <OL_increaseBiasDim>:


/* Use realloc to increase the amount of memory dedicated to the biases  */
void OL_increaseBiasDim(OL_LAYER_STRUCT * layer){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

	int w = layer->WIDTH;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60fb      	str	r3, [r7, #12]

	layer->biases = realloc(layer->biases, w*sizeof(float));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69da      	ldr	r2, [r3, #28]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4619      	mov	r1, r3
 80011d8:	4610      	mov	r0, r2
 80011da:	f007 f925 	bl	8008428 <realloc>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	61da      	str	r2, [r3, #28]
	if(layer->biases==NULL){
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <OL_increaseBiasDim+0x34>
		layer->OL_ERROR = REALLOC_BIASES;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	220c      	movs	r2, #12
 80011f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->biases[w-1] = 0;				// set to 0 new biases
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69da      	ldr	r2, [r3, #28]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011fe:	3b01      	subs	r3, #1
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

	if(layer->ALGORITHM!=MODE_OL && layer->ALGORITHM!=MODE_OL_V2){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120e:	2b00      	cmp	r3, #0
 8001210:	d021      	beq.n	8001256 <OL_increaseBiasDim+0x96>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001216:	2b01      	cmp	r3, #1
 8001218:	d01d      	beq.n	8001256 <OL_increaseBiasDim+0x96>

		layer->biases_2 = realloc(layer->biases_2, w*sizeof(float));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4619      	mov	r1, r3
 8001224:	4610      	mov	r0, r2
 8001226:	f007 f8ff 	bl	8008428 <realloc>
 800122a:	4602      	mov	r2, r0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
		if(layer->biases_2==NULL){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	2b00      	cmp	r3, #0
 8001236:	d103      	bne.n	8001240 <OL_increaseBiasDim+0x80>
			layer->OL_ERROR = REALLOC_BIASES_2;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	220d      	movs	r2, #13
 800123c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}
		layer->biases_2[w-1] = 0;		// set to 0 new biases
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800124a:	3b01      	subs	r3, #1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
	}

#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <OL_increaseYtrueDim>:


/* Use realloc to increase the amount of memory dedicated to y_true  */
void OL_increaseYtrueDim(OL_LAYER_STRUCT * layer){
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]

	layer->y_true = realloc(layer->y_true, layer->WIDTH*sizeof(float));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4619      	mov	r1, r3
 8001272:	4610      	mov	r0, r2
 8001274:	f007 f8d8 	bl	8008428 <realloc>
 8001278:	4602      	mov	r2, r0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
	if(layer->y_true==NULL){
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	2b00      	cmp	r3, #0
 8001284:	d103      	bne.n	800128e <OL_increaseYtrueDim+0x30>
		layer->OL_ERROR = REALLOC_Y_TRUE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2211      	movs	r2, #17
 800128a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <OL_increaseLabel>:

/* Use realloc to increase the amount of memory dedicated to the labels  */
void OL_increaseLabel(OL_LAYER_STRUCT * layer, char new_letter){
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	70fb      	strb	r3, [r7, #3]

	int w = layer->WIDTH;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	60fb      	str	r3, [r7, #12]

	layer->label = realloc(layer->label, w*sizeof(char));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f007 f8b9 	bl	8008428 <realloc>
 80012b6:	4602      	mov	r2, r0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	615a      	str	r2, [r3, #20]
	if(layer->label==NULL){
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <OL_increaseLabel+0x36>
		layer->OL_ERROR = REALLOC_LABEL;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	220e      	movs	r2, #14
 80012c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
	layer->label[w-1] = new_letter;		// save in labels the new letter
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	701a      	strb	r2, [r3, #0]
	OL_updateRAMcounter(layer);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f001 fca4 	bl	8002c28 <OL_updateRAMcounter>

};
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <OL_increaseYpredDim>:


/* Use realloc to increase the amount of memory dedicated to the y prediction arrays  */
void OL_increaseYpredDim(OL_LAYER_STRUCT * layer){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

	layer->y_pred = realloc(layer->y_pred, layer->WIDTH*sizeof(float));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1a      	ldr	r2, [r3, #32]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4619      	mov	r1, r3
 80012fc:	4610      	mov	r0, r2
 80012fe:	f007 f893 	bl	8008428 <realloc>
 8001302:	4602      	mov	r2, r0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	621a      	str	r2, [r3, #32]
	if(layer->y_pred==NULL){
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <OL_increaseYpredDim+0x30>
		layer->OL_ERROR = REALLOC_Y_PRED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	220f      	movs	r2, #15
 8001314:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	if(layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_LWF_batch || layer->ALGORITHM == MODE_CWR ||
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131c:	2b03      	cmp	r3, #3
 800131e:	d00b      	beq.n	8001338 <OL_increaseYpredDim+0x50>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001324:	2b06      	cmp	r3, #6
 8001326:	d007      	beq.n	8001338 <OL_increaseYpredDim+0x50>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132c:	2b02      	cmp	r3, #2
 800132e:	d003      	beq.n	8001338 <OL_increaseYpredDim+0x50>
	   layer->ALGORITHM == MODE_MY_ALG)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_LWF_batch || layer->ALGORITHM == MODE_CWR ||
 8001334:	2b07      	cmp	r3, #7
 8001336:	d113      	bne.n	8001360 <OL_increaseYpredDim+0x78>
	{
		layer->y_pred_2 = realloc(layer->y_pred_2, layer->WIDTH*sizeof(float));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f007 f86f 	bl	8008428 <realloc>
 800134a:	4602      	mov	r2, r0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	639a      	str	r2, [r3, #56]	; 0x38
		if(layer->y_pred_2==NULL){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001354:	2b00      	cmp	r3, #0
 8001356:	d103      	bne.n	8001360 <OL_increaseYpredDim+0x78>
			layer->OL_ERROR = REALLOC_Y_PRED_2;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2210      	movs	r2, #16
 800135c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <OL_resetInfo>:




/* Resets the values that are stored in the struct as 'info parameters'  */
void OL_resetInfo(OL_LAYER_STRUCT * layer){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

	layer->prediction_correct = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	layer->new_class = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	layer->vowel_guess = 'Q';		// Q is a letter that is not in the dataset, is considered the NULL option
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2251      	movs	r2, #81	; 0x51
 8001384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <OL_lettToSoft>:


/* Transforms a letter in an array of 0 and 1. This is used for computing the error committed
 * from the moel since the last layer is a softmax.  */
void OL_lettToSoft(OL_LAYER_STRUCT * layer, char *lett){
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]

	// Check in the label array letter by letter, if the letter is the same put a 1 in the correct position
	for(int i=0; i<layer->WIDTH; i++){
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	e01c      	b.n	80013de <OL_lettToSoft+0x4a>
		if(lett[0] == layer->label[i]){
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6959      	ldr	r1, [r3, #20]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	440b      	add	r3, r1
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d108      	bne.n	80013c8 <OL_lettToSoft+0x34>
			layer->y_true[i] = 1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e007      	b.n	80013d8 <OL_lettToSoft+0x44>
		}else{
			layer->y_true[i] = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbdd      	blt.n	80013a4 <OL_lettToSoft+0x10>
		}
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <OL_feedForward>:


/* Performs the feed forward operation. It's just a product of matrices  and a sum with an array  */
void OL_feedForward(OL_LAYER_STRUCT * layer, float * weights, float * input, float * bias, float * y_pred){
 80013f6:	b480      	push	{r7}
 80013f8:	b08b      	sub	sp, #44	; 0x2c
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]

	int h = layer->HEIGHT;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	61bb      	str	r3, [r7, #24]
	int w = layer->WIDTH;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	617b      	str	r3, [r7, #20]

	// Reset the prediction
	for(int i=0; i<layer->WIDTH; i++){
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
 8001414:	e009      	b.n	800142a <OL_feedForward+0x34>
		y_pred[i]=0;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800141c:	4413      	add	r3, r2
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	3301      	adds	r3, #1
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <OL_feedForward+0x20>
	}

	// Perform the feed forward
	for(int i=0; i<w; i++){
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
 8001438:	e041      	b.n	80014be <OL_feedForward+0xc8>
		for(int j=0; j< h; j++){
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	e023      	b.n	8001488 <OL_feedForward+0x92>
			y_pred[i] += weights[h*i+j]*input[j];
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001446:	4413      	add	r3, r2
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6a3a      	ldr	r2, [r7, #32]
 8001450:	fb02 f203 	mul.w	r2, r2, r3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	edd3 6a00 	vldr	s13, [r3]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001478:	4413      	add	r3, r2
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j< h; j++){
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	429a      	cmp	r2, r3
 800148e:	dbd7      	blt.n	8001440 <OL_feedForward+0x4a>
		}
		y_pred[i] += bias[i];
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001496:	4413      	add	r3, r2
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ae:	4413      	add	r3, r2
 80014b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b4:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<w; i++){
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	3301      	adds	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
 80014be:	6a3a      	ldr	r2, [r7, #32]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbb9      	blt.n	800143a <OL_feedForward+0x44>
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	372c      	adds	r7, #44	; 0x2c
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <OL_softmax>:


/*Takes a array in input and computes the softmax operation on that array  */
void OL_softmax(OL_LAYER_STRUCT * layer, float * y_pred){
 80014d4:	b5b0      	push	{r4, r5, r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]

	// Softmax function taken from web

	int size = layer->WIDTH;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
    float m, sum, constant;

	  if(((layer->counter-1) % 10 == 0) && (layer->counter >= 100)){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	1e59      	subs	r1, r3, #1
 80014ea:	4b58      	ldr	r3, [pc, #352]	; (800164c <OL_softmax+0x178>)
 80014ec:	fb83 2301 	smull	r2, r3, r3, r1
 80014f0:	109a      	asrs	r2, r3, #2
 80014f2:	17cb      	asrs	r3, r1, #31
 80014f4:	1ad2      	subs	r2, r2, r3
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	1aca      	subs	r2, r1, r3
 8001500:	2a00      	cmp	r2, #0
 8001502:	d106      	bne.n	8001512 <OL_softmax+0x3e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b63      	cmp	r3, #99	; 0x63
 800150a:	dd02      	ble.n	8001512 <OL_softmax+0x3e>
		  layer->batch_size = 8;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2208      	movs	r2, #8
 8001510:	809a      	strh	r2, [r3, #4]
	  }

    m = y_pred[0];
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i =0; i<size; i++){
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	e015      	b.n	800154a <OL_softmax+0x76>
    	if(m<y_pred[i]){
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	4413      	add	r3, r2
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800152e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001536:	d505      	bpl.n	8001544 <OL_softmax+0x70>
    		m = y_pred[i];
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i =0; i<size; i++){
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	3301      	adds	r3, #1
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbe5      	blt.n	800151e <OL_softmax+0x4a>
    	}
    }

    sum = 0;
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
    for (int i=0; i<size; i++){
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	e029      	b.n	80015b2 <OL_softmax+0xde>
    	sum += exp(y_pred[i] - m);
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800156e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001572:	ee17 0a90 	vmov	r0, s15
 8001576:	f7fe ffef 	bl	8000558 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	ec43 2b10 	vmov	d0, r2, r3
 8001582:	f009 f8b5 	bl	800a6f0 <exp>
 8001586:	ec55 4b10 	vmov	r4, r5, d0
 800158a:	6a38      	ldr	r0, [r7, #32]
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_f2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4620      	mov	r0, r4
 8001596:	4629      	mov	r1, r5
 8001598:	f7fe fe80 	bl	800029c <__adddf3>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff fb08 	bl	8000bb8 <__aeabi_d2f>
 80015a8:	4603      	mov	r3, r0
 80015aa:	623b      	str	r3, [r7, #32]
    for (int i=0; i<size; i++){
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbd1      	blt.n	800155e <OL_softmax+0x8a>
    }

    constant = m + log(sum);
 80015ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015bc:	f7fe ffcc 	bl	8000558 <__aeabi_f2d>
 80015c0:	4604      	mov	r4, r0
 80015c2:	460d      	mov	r5, r1
 80015c4:	6a38      	ldr	r0, [r7, #32]
 80015c6:	f7fe ffc7 	bl	8000558 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	ec43 2b10 	vmov	d0, r2, r3
 80015d2:	f009 f8dd 	bl	800a790 <log>
 80015d6:	ec53 2b10 	vmov	r2, r3, d0
 80015da:	4620      	mov	r0, r4
 80015dc:	4629      	mov	r1, r5
 80015de:	f7fe fe5d 	bl	800029c <__adddf3>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fae5 	bl	8000bb8 <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<size; i++){
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e020      	b.n	800163a <OL_softmax+0x166>
    	y_pred[i] = exp(y_pred[i] - constant);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	ed93 7a00 	vldr	s14, [r3]
 8001604:	edd7 7a03 	vldr	s15, [r7, #12]
 8001608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160c:	ee17 0a90 	vmov	r0, s15
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	ec43 2b10 	vmov	d0, r2, r3
 800161c:	f009 f868 	bl	800a6f0 <exp>
 8001620:	ec51 0b10 	vmov	r0, r1, d0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	18d4      	adds	r4, r2, r3
 800162c:	f7ff fac4 	bl	8000bb8 <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	6023      	str	r3, [r4, #0]
    for(int i=0; i<size; i++){
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	429a      	cmp	r2, r3
 8001640:	dbda      	blt.n	80015f8 <OL_softmax+0x124>
    }
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bdb0      	pop	{r4, r5, r7, pc}
 800164c:	66666667 	.word	0x66666667

08001650 <OL_checkNewClass>:




/* Check if the letter just received is already known. If not increase dimensions of the layer.  */
void OL_checkNewClass(OL_LAYER_STRUCT * layer, char *letter){
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]

	int found = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<layer->WIDTH; i++){
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	e00d      	b.n	8001680 <OL_checkNewClass+0x30>
		if(letter[0] == layer->label[i]){
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6959      	ldr	r1, [r3, #20]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	440b      	add	r3, r1
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d101      	bne.n	800167a <OL_checkNewClass+0x2a>
			found = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<layer->WIDTH; i++){
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3301      	adds	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	429a      	cmp	r2, r3
 8001688:	dbec      	blt.n	8001664 <OL_checkNewClass+0x14>
		}
	}

	// If the letter has not been found
	if(found==0){
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d11a      	bne.n	80016c6 <OL_checkNewClass+0x76>
		// Update info
		layer->new_class = 1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		layer->WIDTH = layer->WIDTH+1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60da      	str	r2, [r3, #12]
		// Update dimensions
		OL_increaseLabel(layer, letter[0]);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fdf4 	bl	8001296 <OL_increaseLabel>
		OL_increaseBiasDim(layer);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fd86 	bl	80011c0 <OL_increaseBiasDim>
		OL_increaseYpredDim(layer);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fe17 	bl	80012e8 <OL_increaseYpredDim>
		OL_increaseYtrueDim(layer);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fdcf 	bl	800125e <OL_increaseYtrueDim>
		OL_increaseWeightDim(layer);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fd0b 	bl	80010dc <OL_increaseWeightDim>
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <OL_compareLabels>:



/* Compare the prediction and the true label. If the max values of both arrays are in the
 * same positition in the array the prediction is correct.  */
void OL_compareLabels(OL_LAYER_STRUCT * layer){
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]

	uint8_t max_pred = 0;	// Used for saving the maximum value
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
	uint8_t max_true = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	73bb      	strb	r3, [r7, #14]
	uint8_t max_j_pred;		// Used for saving the position where the max value is
	uint8_t max_j_true;

	// Find max of both prediction and true label
	for(int j=0; j<layer->WIDTH; j++){
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	e04a      	b.n	800177a <OL_compareLabels+0xac>
		if(max_true < layer->y_true[j]){
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	d50e      	bpl.n	8001724 <OL_compareLabels+0x56>
			max_j_true = j;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	733b      	strb	r3, [r7, #12]
			max_true = layer->y_true[j];
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800171c:	edc7 7a00 	vstr	s15, [r7]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	73bb      	strb	r3, [r7, #14]
		}
		if(max_pred < layer->y_pred[j]){
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1a      	ldr	r2, [r3, #32]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	d516      	bpl.n	8001774 <OL_compareLabels+0xa6>
			max_j_pred = j;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	737b      	strb	r3, [r7, #13]
			max_pred = layer->y_pred[j];
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800175c:	edc7 7a00 	vstr	s15, [r7]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	73fb      	strb	r3, [r7, #15]
			layer->vowel_guess = layer->label[j];
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4413      	add	r3, r2
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for(int j=0; j<layer->WIDTH; j++){
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	3301      	adds	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbaf      	blt.n	80016e4 <OL_compareLabels+0x16>
		}
	}

	// If the maximum values are in different position of the array -> prediction is WRONG
	if(max_j_true != max_j_pred){
 8001784:	7b3a      	ldrb	r2, [r7, #12]
 8001786:	7b7b      	ldrb	r3, [r7, #13]
 8001788:	429a      	cmp	r2, r3
 800178a:	d004      	beq.n	8001796 <OL_compareLabels+0xc8>
		layer->prediction_correct = 1;				// wrong
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001794:	e003      	b.n	800179e <OL_compareLabels+0xd0>
	}else{
		layer->prediction_correct = 2;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2202      	movs	r2, #2
 800179a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}

	// Used from the CWR algorithm
	if(layer->ALGORITHM == MODE_CWR){
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d10b      	bne.n	80017be <OL_compareLabels+0xf0>
		layer->found_lett[max_j_true] += 1;		// Update the found_lett array
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	4413      	add	r3, r2
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b4:	7b3b      	ldrb	r3, [r7, #12]
 80017b6:	440b      	add	r3, r1
 80017b8:	3201      	adds	r2, #1
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <OL_train>:
// #############################################


/* This function is the most important part of the TinyOL script. Inside here an IF decides which algorithm
 * to apply, thus changing the update of the weights.  */
void OL_train(OL_LAYER_STRUCT * layer, float * input){
 80017ca:	b5b0      	push	{r4, r5, r7, lr}
 80017cc:	b0ba      	sub	sp, #232	; 0xe8
 80017ce:	af02      	add	r7, sp, #8
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]

	// Values in common between all algorithms
	int w = layer->WIDTH;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	667b      	str	r3, [r7, #100]	; 0x64
	int h = layer->HEIGHT;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	663b      	str	r3, [r7, #96]	; 0x60
	layer->vowel_guess = 0;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42


	// ***************************************************************
	//     ***** OL ALGORITHM      |      ***** OL_V2 ALGORITHM
	if(layer->ALGORITHM == MODE_OL || layer->ALGORITHM == MODE_OL_V2){
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <OL_train+0x30>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	f040 80cd 	bne.w	8001994 <OL_train+0x1ca>
 80017fa:	466b      	mov	r3, sp
 80017fc:	461d      	mov	r5, r3

		float cost[w];
 80017fe:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8001800:	1e63      	subs	r3, r4, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	4623      	mov	r3, r4
 8001806:	4618      	mov	r0, r3
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	014b      	lsls	r3, r1, #5
 8001816:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800181a:	0142      	lsls	r2, r0, #5
 800181c:	4623      	mov	r3, r4
 800181e:	4618      	mov	r0, r3
 8001820:	f04f 0100 	mov.w	r1, #0
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	014b      	lsls	r3, r1, #5
 800182e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001832:	0142      	lsls	r2, r0, #5
 8001834:	4623      	mov	r3, r4
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	3307      	adds	r3, #7
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	ebad 0d03 	sub.w	sp, sp, r3
 8001842:	ab02      	add	r3, sp, #8
 8001844:	3303      	adds	r3, #3
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]

		// Inference with current weights
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6999      	ldr	r1, [r3, #24]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4613      	mov	r3, r2
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff fdc9 	bl	80013f6 <OL_feedForward>
		for(int k=0; k<8; k++){
			sendPreSoftmaxUART(layer, k, k*4, msgPreSoftmax);
		}
#endif

		OL_softmax(layer, layer->y_pred);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4619      	mov	r1, r3
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff fe32 	bl	80014d4 <OL_softmax>

		int j_start = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	66bb      	str	r3, [r7, #104]	; 0x68
		// If algorithms is OL_V2, don't update the vowels
		if(layer->ALGORITHM == MODE_OL_V2){
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <OL_train+0xb6>
			j_start = 5;
 800187c:	2305      	movs	r3, #5
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		for(int j=j_start; j<w; j++){
 8001880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001884:	e077      	b.n	8001976 <OL_train+0x1ac>
			cost[j] = layer->y_pred[j]-layer->y_true[j];			    // Compute the cost
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a1a      	ldr	r2, [r3, #32]
 800188a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	edc3 7a00 	vstr	s15, [r3]
			if (cost[j]==0) continue;									// If nothing to update skip loop
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	d052      	beq.n	800196e <OL_train+0x1a4>

			for(int i=0; i<h; i++){
 80018c8:	2300      	movs	r3, #0
 80018ca:	673b      	str	r3, [r7, #112]	; 0x70
 80018cc:	e02f      	b.n	800192e <OL_train+0x164>
				layer->weights[j*h+i] -= cost[j]*input[i]*layer->l_rate;	// Update the weights
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018d6:	fb01 f103 	mul.w	r1, r1, r3
 80018da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018dc:	440b      	add	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	ed93 7a00 	vldr	s14, [r3]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	edd3 6a00 	vldr	s13, [r3]
 80018f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4413      	add	r3, r2
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001912:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001914:	fb01 f103 	mul.w	r1, r1, r3
 8001918:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800191a:	440b      	add	r3, r1
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001924:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8001928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800192a:	3301      	adds	r3, #1
 800192c:	673b      	str	r3, [r7, #112]	; 0x70
 800192e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001932:	429a      	cmp	r2, r3
 8001934:	dbcb      	blt.n	80018ce <OL_train+0x104>
			}
			layer->biases[j] -= cost[j]*layer->l_rate;					// Update the biases
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	edd3 6a00 	vldr	s13, [r3]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001968:	edc3 7a00 	vstr	s15, [r3]
 800196c:	e000      	b.n	8001970 <OL_train+0x1a6>
			if (cost[j]==0) continue;									// If nothing to update skip loop
 800196e:	bf00      	nop
		for(int j=j_start; j<w; j++){
 8001970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001972:	3301      	adds	r3, #1
 8001974:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001976:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800197a:	429a      	cmp	r2, r3
 800197c:	db83      	blt.n	8001886 <OL_train+0xbc>
		}

		OL_compareLabels(layer);										// Check if prediction is correct
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7ff fea5 	bl	80016ce <OL_compareLabels>

		layer->counter +=1;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	46ad      	mov	sp, r5
	if(layer->ALGORITHM == MODE_OL || layer->ALGORITHM == MODE_OL_V2){
 8001990:	f001 b946 	b.w	8002c20 <OL_train+0x1456>
		OL_updateRAMcounter(layer);
#endif

	// ***************************************************************
	//     ***** OL ALGORITHM BATCH            |      ***** OL_V2 ALGORITHM BATCH
	}else if(layer->ALGORITHM == MODE_OL_batch || layer->ALGORITHM == MODE_OL_V2_batch){
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001998:	2b04      	cmp	r3, #4
 800199a:	d004      	beq.n	80019a6 <OL_train+0x1dc>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	f040 8174 	bne.w	8001c8e <OL_train+0x4c4>
 80019a6:	466b      	mov	r3, sp
 80019a8:	461d      	mov	r5, r3

		float cost[w];
 80019aa:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80019ac:	1e63      	subs	r3, r4, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	4623      	mov	r3, r4
 80019b2:	4618      	mov	r0, r3
 80019b4:	f04f 0100 	mov.w	r1, #0
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	014b      	lsls	r3, r1, #5
 80019c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019c6:	0142      	lsls	r2, r0, #5
 80019c8:	4623      	mov	r3, r4
 80019ca:	4618      	mov	r0, r3
 80019cc:	f04f 0100 	mov.w	r1, #0
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	014b      	lsls	r3, r1, #5
 80019da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019de:	0142      	lsls	r2, r0, #5
 80019e0:	4623      	mov	r3, r4
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	3307      	adds	r3, #7
 80019e6:	08db      	lsrs	r3, r3, #3
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	ebad 0d03 	sub.w	sp, sp, r3
 80019ee:	ab02      	add	r3, sp, #8
 80019f0:	3303      	adds	r3, #3
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]

		// Inference with current weights
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6999      	ldr	r1, [r3, #24]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7ff fcf3 	bl	80013f6 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4619      	mov	r1, r3
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff fd5c 	bl	80014d4 <OL_softmax>

		int j_start = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	677b      	str	r3, [r7, #116]	; 0x74
		// If algorithms is OL_V2, don't update the vowels
		if(layer->ALGORITHM == MODE_OL_V2_batch){
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d101      	bne.n	8001a2c <OL_train+0x262>
			j_start = 5;
 8001a28:	2305      	movs	r3, #5
 8001a2a:	677b      	str	r3, [r7, #116]	; 0x74
		}

		for(int j=j_start; j<w; j++){
 8001a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a30:	e06d      	b.n	8001b0e <OL_train+0x344>
			cost[j] = layer->y_pred[j]-layer->y_true[j];			// Compute the cost
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	d048      	beq.n	8001b06 <OL_train+0x33c>

			for(int i=0; i<h; i++){
 8001a74:	2300      	movs	r3, #0
 8001a76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a78:	e02a      	b.n	8001ad0 <OL_train+0x306>
				layer->weights_2[j*h+i] += cost[j]*input[i];	// Update weights
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a82:	fb01 f103 	mul.w	r1, r1, r3
 8001a86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a88:	440b      	add	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	ed93 7a00 	vldr	s14, [r3]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	edd3 6a00 	vldr	s13, [r3]
 8001a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ab4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001ab6:	fb01 f103 	mul.w	r1, r1, r3
 8001aba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001abc:	440b      	add	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8001aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001acc:	3301      	adds	r3, #1
 8001ace:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ad0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbd0      	blt.n	8001a7a <OL_train+0x2b0>
			}
			layer->biases_2[j] += cost[j];					// Update biases
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	ed93 7a00 	vldr	s14, [r3]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b00:	edc3 7a00 	vstr	s15, [r3]
 8001b04:	e000      	b.n	8001b08 <OL_train+0x33e>
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001b06:	bf00      	nop
		for(int j=j_start; j<w; j++){
 8001b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b12:	429a      	cmp	r2, r3
 8001b14:	db8d      	blt.n	8001a32 <OL_train+0x268>
		}

		OL_compareLabels(layer);					// Check if prediction is correct or not
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff fdd9 	bl	80016ce <OL_compareLabels>

		// When reached the end of a batch
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size)==0) ){
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80ac 	beq.w	8001c7e <OL_train+0x4b4>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	8892      	ldrh	r2, [r2, #4]
 8001b2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b32:	fb02 f201 	mul.w	r2, r2, r1
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 80a0 	bne.w	8001c7e <OL_train+0x4b4>

			int j_start = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			// If algorithms is OL_V2, don't update the vowels
			if(layer->ALGORITHM == MODE_OL_V2_batch){
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d102      	bne.n	8001b52 <OL_train+0x388>
				j_start=5;
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			}

			for(int j=j_start; j<w; j++){
 8001b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b5a:	e08a      	b.n	8001c72 <OL_train+0x4a8>
				for(int i=0; i<h; i++){
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b62:	e04c      	b.n	8001bfe <OL_train+0x434>
					layer->weights[j*h+i] -= layer->weights_2[j*h+i]/layer->batch_size*layer->l_rate;	// Update weights
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b6e:	fb01 f103 	mul.w	r1, r1, r3
 8001b72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b76:	440b      	add	r3, r1
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	ed93 7a00 	vldr	s14, [r3]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b8a:	fb01 f103 	mul.w	r1, r1, r3
 8001b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b92:	440b      	add	r3, r1
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	ed93 6a00 	vldr	s12, [r3]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	889b      	ldrh	r3, [r3, #4]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bbe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001bc0:	fb01 f103 	mul.w	r1, r1, r3
 8001bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bc8:	440b      	add	r3, r1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd2:	edc3 7a00 	vstr	s15, [r3]
					layer->weights_2[j*h+i] = 0;														// Reset
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bde:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001be0:	fb01 f103 	mul.w	r1, r1, r3
 8001be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001be8:	440b      	add	r3, r1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8001bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001bfe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbad      	blt.n	8001b64 <OL_train+0x39a>
				}
				layer->biases[j] -= layer->biases_2[j]/layer->batch_size*layer->l_rate;				// Update biases
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	69da      	ldr	r2, [r3, #28]
 8001c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	ed93 7a00 	vldr	s14, [r3]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	ed93 6a00 	vldr	s12, [r3]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	889b      	ldrh	r3, [r3, #4]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c52:	edc3 7a00 	vstr	s15, [r3]
				layer->biases_2[j] = 0;																	// Reset
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
			for(int j=j_start; j<w; j++){
 8001c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c72:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f6ff af6f 	blt.w	8001b5c <OL_train+0x392>
			}
		}

		layer->counter +=1;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	46ad      	mov	sp, r5
	}else if(layer->ALGORITHM == MODE_OL_batch || layer->ALGORITHM == MODE_OL_V2_batch){
 8001c8a:	f000 bfc9 	b.w	8002c20 <OL_train+0x1456>
		OL_updateRAMcounter(layer);
#endif

	// *************************************
	// ***** CWR ALGORITHM
	}else if (layer->ALGORITHM == MODE_CWR){
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	f040 8220 	bne.w	80020d8 <OL_train+0x90e>
 8001c98:	466b      	mov	r3, sp
 8001c9a:	461d      	mov	r5, r3

		float cost[w];
 8001c9c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8001c9e:	1e63      	subs	r3, r4, #1
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca2:	4623      	mov	r3, r4
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	014b      	lsls	r3, r1, #5
 8001cb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cb8:	0142      	lsls	r2, r0, #5
 8001cba:	4623      	mov	r3, r4
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f04f 0100 	mov.w	r1, #0
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	014b      	lsls	r3, r1, #5
 8001ccc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cd0:	0142      	lsls	r2, r0, #5
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	ebad 0d03 	sub.w	sp, sp, r3
 8001ce0:	ab02      	add	r3, sp, #8
 8001ce2:	3303      	adds	r3, #3
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	623b      	str	r3, [r7, #32]

		// Prediction
		if(layer->counter < layer->end_training){
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	da12      	bge.n	8001d1c <OL_train+0x552>
			OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7ff fb74 	bl	80013f6 <OL_feedForward>
			OL_softmax(layer, layer->y_pred);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4619      	mov	r1, r3
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fbdd 	bl	80014d4 <OL_softmax>
 8001d1a:	e023      	b.n	8001d64 <OL_train+0x59a>
		}else{
			// Prediction of training weights
			OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff fb61 	bl	80013f6 <OL_feedForward>
			OL_softmax(layer, layer->y_pred_2);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	4619      	mov	r1, r3
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff fbca 	bl	80014d4 <OL_softmax>
			// Prediction of consolidated weights
			OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6999      	ldr	r1, [r3, #24]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	69da      	ldr	r2, [r3, #28]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7ff fb4f 	bl	80013f6 <OL_feedForward>
			OL_softmax(layer, layer->y_pred);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7ff fbb8 	bl	80014d4 <OL_softmax>
		}


		for(int j=0; j<w; j++){
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d6a:	e0aa      	b.n	8001ec2 <OL_train+0x6f8>

			if(layer->counter < layer->end_training){
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	429a      	cmp	r2, r3
 8001d76:	da19      	bge.n	8001dac <OL_train+0x5e2>
				cost[j] = layer->y_pred[j]-layer->y_true[j];		  	// Cost computation
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9c:	6a3a      	ldr	r2, [r7, #32]
 8001d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	edc3 7a00 	vstr	s15, [r3]
 8001daa:	e018      	b.n	8001dde <OL_train+0x614>
			}else{
				cost[j] = layer->y_pred_2[j]-layer->y_true[j];		  	// Cost computation
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	ed93 7a00 	vldr	s14, [r3]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd0:	6a3a      	ldr	r2, [r7, #32]
 8001dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	edc3 7a00 	vstr	s15, [r3]
			}

			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001dde:	6a3a      	ldr	r2, [r7, #32]
 8001de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	d05f      	beq.n	8001eb6 <OL_train+0x6ec>

			// Back propagation on TW
			for(int i=0; i<h; i++){
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001dfc:	e037      	b.n	8001e6e <OL_train+0x6a4>
				layer->weights_2[j*h+i] -= cost[j]*input[i]*layer->l_rate;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e08:	fb01 f103 	mul.w	r1, r1, r3
 8001e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e10:	440b      	add	r3, r1
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	ed93 7a00 	vldr	s14, [r3]
 8001e1a:	6a3a      	ldr	r2, [r7, #32]
 8001e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	edd3 6a00 	vldr	s13, [r3]
 8001e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	4413      	add	r3, r2
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e4e:	fb01 f103 	mul.w	r1, r1, r3
 8001e52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e56:	440b      	add	r3, r1
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e60:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8001e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbc2      	blt.n	8001dfe <OL_train+0x634>
			}
			layer->biases_2[j] -= cost[j]*layer->l_rate;  // Back propagation on TB
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	ed93 7a00 	vldr	s14, [r3]
 8001e88:	6a3a      	ldr	r2, [r7, #32]
 8001e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	edd3 6a00 	vldr	s13, [r3]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	edc3 7a00 	vstr	s15, [r3]
 8001eb4:	e000      	b.n	8001eb8 <OL_train+0x6ee>
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001eb6:	bf00      	nop
		for(int j=0; j<w; j++){
 8001eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ec2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f6ff af4f 	blt.w	8001d6c <OL_train+0x5a2>
		}

		OL_compareLabels(layer);			// Check if prediction is correct or not
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff fbfd 	bl	80016ce <OL_compareLabels>


		// When batch ends
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size) == 0) ){
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80f5 	beq.w	80020c8 <OL_train+0x8fe>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	8892      	ldrh	r2, [r2, #4]
 8001ee6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001eea:	fb02 f201 	mul.w	r2, r2, r1
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 80e9 	bne.w	80020c8 <OL_train+0x8fe>

			// Update CW
			for(int j=0; j<w; j++){
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001efc:	e093      	b.n	8002026 <OL_train+0x85c>
				if(layer->found_lett[j] != 0){
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8086 	beq.w	800201c <OL_train+0x852>
					for(int i=0; i<h; i++){
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f16:	e049      	b.n	8001fac <OL_train+0x7e2>
						layer->weights[j*h+i] = ((layer->weights[j*h+i]*layer->found_lett[j])+layer->weights_2[j*h+i])/(layer->found_lett[j]+1);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f22:	fb01 f103 	mul.w	r1, r1, r3
 8001f26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f2a:	440b      	add	r3, r1
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	ed93 7a00 	vldr	s14, [r3]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f3c:	4413      	add	r3, r2
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f54:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f56:	fb01 f103 	mul.w	r1, r1, r3
 8001f5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f5e:	440b      	add	r3, r1
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f8c:	fb01 f103 	mul.w	r1, r1, r3
 8001f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f94:	440b      	add	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f9e:	edc3 7a00 	vstr	s15, [r3]
					for(int i=0; i<h; i++){
 8001fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	dbb0      	blt.n	8001f18 <OL_train+0x74e>
					}
					layer->biases[j] = ((layer->biases[j]*layer->found_lett[j])+layer->biases_2[j])/(layer->found_lett[j]+1);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	ed93 7a00 	vldr	s14, [r3]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ffa:	4413      	add	r3, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002018:	edc3 7a00 	vstr	s15, [r3]
			for(int j=0; j<w; j++){
 800201c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002020:	3301      	adds	r3, #1
 8002022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800202a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800202c:	429a      	cmp	r2, r3
 800202e:	f6ff af66 	blt.w	8001efe <OL_train+0x734>
				}
			}

			// Reset TW
			for(int j=0; j<w; j++){
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002038:	e041      	b.n	80020be <OL_train+0x8f4>
				for(int i=0; i<h; i++){
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002040:	e01e      	b.n	8002080 <OL_train+0x8b6>
					layer->weights_2[j*h+i] = layer->weights[j*h+i];	// reset
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800204a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800204c:	fb01 f103 	mul.w	r1, r1, r3
 8002050:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002054:	440b      	add	r3, r1
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	441a      	add	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800205e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002062:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002064:	fb00 f003 	mul.w	r0, r0, r3
 8002068:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800206c:	4403      	add	r3, r0
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8002076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800207a:	3301      	adds	r3, #1
 800207c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002080:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002086:	429a      	cmp	r2, r3
 8002088:	dbdb      	blt.n	8002042 <OL_train+0x878>
				}
				layer->biases_2[j] = layer->biases[j];					// reset
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	69da      	ldr	r2, [r3, #28]
 800208e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	441a      	add	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	601a      	str	r2, [r3, #0]
				layer->found_lett[j] = 0;								// reset
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020ae:	4413      	add	r3, r2
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<w; j++){
 80020b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b8:	3301      	adds	r3, #1
 80020ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020be:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80020c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbb8      	blt.n	800203a <OL_train+0x870>
			}
		}

		layer->counter +=1;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	46ad      	mov	sp, r5

#if READ_FREE_RAM==1
		OL_updateRAMcounter(layer);
#endif
	}
};
 80020d4:	f000 bda4 	b.w	8002c20 <OL_train+0x1456>
	}else if(layer->ALGORITHM == MODE_LWF){
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	2b03      	cmp	r3, #3
 80020de:	f040 8158 	bne.w	8002392 <OL_train+0xbc8>
 80020e2:	466b      	mov	r3, sp
 80020e4:	461d      	mov	r5, r3
		float cost_norm[w];
 80020e6:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80020e8:	1e63      	subs	r3, r4, #1
 80020ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ec:	4623      	mov	r3, r4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f04f 0100 	mov.w	r1, #0
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	014b      	lsls	r3, r1, #5
 80020fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002102:	0142      	lsls	r2, r0, #5
 8002104:	4623      	mov	r3, r4
 8002106:	4618      	mov	r0, r3
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	014b      	lsls	r3, r1, #5
 8002116:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800211a:	0142      	lsls	r2, r0, #5
 800211c:	4623      	mov	r3, r4
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	3307      	adds	r3, #7
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	ebad 0d03 	sub.w	sp, sp, r3
 800212a:	ab02      	add	r3, sp, #8
 800212c:	3303      	adds	r3, #3
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
		float cost_LWF[w];
 8002134:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8002136:	1e63      	subs	r3, r4, #1
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
 800213a:	4623      	mov	r3, r4
 800213c:	4618      	mov	r0, r3
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	014b      	lsls	r3, r1, #5
 800214c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002150:	0142      	lsls	r2, r0, #5
 8002152:	4623      	mov	r3, r4
 8002154:	4618      	mov	r0, r3
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	014b      	lsls	r3, r1, #5
 8002164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002168:	0142      	lsls	r2, r0, #5
 800216a:	4623      	mov	r3, r4
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3307      	adds	r3, #7
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	ebad 0d03 	sub.w	sp, sp, r3
 8002178:	ab02      	add	r3, sp, #8
 800217a:	3303      	adds	r3, #3
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
		float lambda=0;
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6999      	ldr	r1, [r3, #24]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	4613      	mov	r3, r2
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7ff f92b 	bl	80013f6 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4619      	mov	r1, r3
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff f994 	bl	80014d4 <OL_softmax>
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4613      	mov	r3, r2
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff f919 	bl	80013f6 <OL_feedForward>
		OL_softmax(layer, layer->y_pred_2);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c8:	4619      	mov	r1, r3
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f7ff f982 	bl	80014d4 <OL_softmax>
		lambda = 100/(100+layer->counter);					// Update lambda
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	3364      	adds	r3, #100	; 0x64
 80021d6:	2264      	movs	r2, #100	; 0x64
 80021d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		for(int j=0; j<w; j++){
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80021ee:	e0bf      	b.n	8002370 <OL_train+0xba6>
			cost_norm[j] = layer->y_pred[j]-layer->y_true[j];	// Compute normal cost
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a1a      	ldr	r2, [r3, #32]
 80021f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	ed93 7a00 	vldr	s14, [r3]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002204:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	edc3 7a00 	vstr	s15, [r3]
			cost_LWF[j]  = layer->y_pred[j]-layer->y_pred_2[j];	// Compute LWF cost
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	ed93 7a00 	vldr	s14, [r3]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002248:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800225a:	e04c      	b.n	80022f6 <OL_train+0xb2c>
				layer->weights[j*h+i] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate*input[i];	// Update weights
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002264:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002266:	fb01 f103 	mul.w	r1, r1, r3
 800226a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800226e:	440b      	add	r3, r1
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	ed93 7a00 	vldr	s14, [r3]
 8002278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800227a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	edd3 6a00 	vldr	s13, [r3]
 8002286:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800228a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800228e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002292:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002298:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	ed93 6a00 	vldr	s12, [r3]
 80022a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	4413      	add	r3, r2
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022d6:	fb01 f103 	mul.w	r1, r1, r3
 80022da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022de:	440b      	add	r3, r1
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e8:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 80022ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022f0:	3301      	adds	r3, #1
 80022f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbad      	blt.n	800225c <OL_train+0xa92>
			layer->biases[j] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate;					// Update biases
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	ed93 7a00 	vldr	s14, [r3]
 8002310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	edd3 6a00 	vldr	s13, [r3]
 800231e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002322:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002326:	ee76 7a67 	vsub.f32	s15, s12, s15
 800232a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800232e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002330:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	ed93 6a00 	vldr	s12, [r3]
 800233c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002340:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002344:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002362:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 8002366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800236a:	3301      	adds	r3, #1
 800236c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002370:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002376:	429a      	cmp	r2, r3
 8002378:	f6ff af3a 	blt.w	80021f0 <OL_train+0xa26>
		OL_compareLabels(layer);																	// Check if prediction is correct or not
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f7ff f9a6 	bl	80016ce <OL_compareLabels>
		layer->counter +=1;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	46ad      	mov	sp, r5
};
 800238e:	f000 bc47 	b.w	8002c20 <OL_train+0x1456>
	}else if(layer->ALGORITHM == MODE_LWF_batch){
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	2b06      	cmp	r3, #6
 8002398:	f040 81b3 	bne.w	8002702 <OL_train+0xf38>
 800239c:	466b      	mov	r3, sp
 800239e:	461d      	mov	r5, r3
		float cost_norm[w];
 80023a0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80023a2:	1e63      	subs	r3, r4, #1
 80023a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80023a6:	4623      	mov	r3, r4
 80023a8:	4618      	mov	r0, r3
 80023aa:	f04f 0100 	mov.w	r1, #0
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	014b      	lsls	r3, r1, #5
 80023b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023bc:	0142      	lsls	r2, r0, #5
 80023be:	4623      	mov	r3, r4
 80023c0:	4618      	mov	r0, r3
 80023c2:	f04f 0100 	mov.w	r1, #0
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	014b      	lsls	r3, r1, #5
 80023d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023d4:	0142      	lsls	r2, r0, #5
 80023d6:	4623      	mov	r3, r4
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	3307      	adds	r3, #7
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	ebad 0d03 	sub.w	sp, sp, r3
 80023e4:	ab02      	add	r3, sp, #8
 80023e6:	3303      	adds	r3, #3
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	647b      	str	r3, [r7, #68]	; 0x44
		float cost_LWF[w];
 80023ee:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80023f0:	1e63      	subs	r3, r4, #1
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
 80023f4:	4623      	mov	r3, r4
 80023f6:	4618      	mov	r0, r3
 80023f8:	f04f 0100 	mov.w	r1, #0
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	014b      	lsls	r3, r1, #5
 8002406:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800240a:	0142      	lsls	r2, r0, #5
 800240c:	4623      	mov	r3, r4
 800240e:	4618      	mov	r0, r3
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	014b      	lsls	r3, r1, #5
 800241e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002422:	0142      	lsls	r2, r0, #5
 8002424:	4623      	mov	r3, r4
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	3307      	adds	r3, #7
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	ebad 0d03 	sub.w	sp, sp, r3
 8002432:	ab02      	add	r3, sp, #8
 8002434:	3303      	adds	r3, #3
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6999      	ldr	r1, [r3, #24]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7fe ffd1 	bl	80013f6 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4619      	mov	r1, r3
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff f83a 	bl	80014d4 <OL_softmax>
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7fe ffbf 	bl	80013f6 <OL_feedForward>
		OL_softmax(layer, layer->y_pred_2);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	4619      	mov	r1, r3
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff f828 	bl	80014d4 <OL_softmax>
        if(layer->counter<layer->batch_size){
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	8892      	ldrh	r2, [r2, #4]
 800248c:	4293      	cmp	r3, r2
 800248e:	da04      	bge.n	800249a <OL_train+0xcd0>
        	lambda = 1;
 8002490:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002498:	e00c      	b.n	80024b4 <OL_train+0xcea>
        	lambda = layer->batch_size/layer->counter;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	889b      	ldrh	r3, [r3, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		for(int j=0; j<w; j++){
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024ba:	e0bf      	b.n	800263c <OL_train+0xe72>
			cost_norm[j] = layer->y_pred[j]-layer->y_true[j];	// compute normal cost
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	edc3 7a00 	vstr	s15, [r3]
			cost_LWF[j]  = layer->y_pred[j]-layer->y_pred_2[j];	// compute LWF cost
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	ed93 7a00 	vldr	s14, [r3]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002502:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002526:	e04c      	b.n	80025c2 <OL_train+0xdf8>
				layer->weights[j*h+i] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate*input[i];	// Update weights
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002530:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002532:	fb01 f103 	mul.w	r1, r1, r3
 8002536:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800253a:	440b      	add	r3, r1
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	ed93 7a00 	vldr	s14, [r3]
 8002544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	edd3 6a00 	vldr	s13, [r3]
 8002552:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002556:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800255a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800255e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	ed93 6a00 	vldr	s12, [r3]
 8002570:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002574:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002578:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	4413      	add	r3, r2
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80025a2:	fb01 f103 	mul.w	r1, r1, r3
 80025a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025aa:	440b      	add	r3, r1
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b4:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 80025b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025bc:	3301      	adds	r3, #1
 80025be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbad      	blt.n	8002528 <OL_train+0xd5e>
			layer->biases[j] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate;					// Update biases
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	ed93 7a00 	vldr	s14, [r3]
 80025dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	edd3 6a00 	vldr	s13, [r3]
 80025ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80025ee:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80025f2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80025f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	ed93 6a00 	vldr	s12, [r3]
 8002608:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800260c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002610:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262e:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 8002632:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002636:	3301      	adds	r3, #1
 8002638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800263c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002642:	429a      	cmp	r2, r3
 8002644:	f6ff af3a 	blt.w	80024bc <OL_train+0xcf2>
		OL_compareLabels(layer);																	// Check if prediction is correct or not
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff f840 	bl	80016ce <OL_compareLabels>
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size) == 0) ){
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d04e      	beq.n	80026f4 <OL_train+0xf2a>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	8892      	ldrh	r2, [r2, #4]
 800265e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002662:	fb02 f201 	mul.w	r2, r2, r1
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d143      	bne.n	80026f4 <OL_train+0xf2a>
			for(int j=0; j<w; j++){
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002672:	e03a      	b.n	80026ea <OL_train+0xf20>
				for(int i=0; i<h; i++){
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800267a:	e01e      	b.n	80026ba <OL_train+0xef0>
					layer->weights_2[j*h+i] = layer->weights[j*h+i];	// Reset
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002684:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002686:	fb01 f103 	mul.w	r1, r1, r3
 800268a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800268e:	440b      	add	r3, r1
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	441a      	add	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800269c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800269e:	fb00 f003 	mul.w	r0, r0, r3
 80026a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026a6:	4403      	add	r3, r0
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 80026b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026b4:	3301      	adds	r3, #1
 80026b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80026ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dbdb      	blt.n	800267c <OL_train+0xeb2>
				layer->biases_2[j] = layer->biases[j];					// Reset
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	601a      	str	r2, [r3, #0]
			for(int j=0; j<w; j++){
 80026e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026e4:	3301      	adds	r3, #1
 80026e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dbbf      	blt.n	8002674 <OL_train+0xeaa>
		layer->counter +=1;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	46ad      	mov	sp, r5
};
 8002700:	e28e      	b.n	8002c20 <OL_train+0x1456>
	}else if(layer->ALGORITHM == MODE_MY_ALG){
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	2b07      	cmp	r3, #7
 8002708:	f040 828a 	bne.w	8002c20 <OL_train+0x1456>
 800270c:	466b      	mov	r3, sp
 800270e:	461d      	mov	r5, r3
		float cost_tl[w];
 8002710:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8002712:	1e63      	subs	r3, r4, #1
 8002714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002716:	4623      	mov	r3, r4
 8002718:	4618      	mov	r0, r3
 800271a:	f04f 0100 	mov.w	r1, #0
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	014b      	lsls	r3, r1, #5
 8002728:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800272c:	0142      	lsls	r2, r0, #5
 800272e:	4623      	mov	r3, r4
 8002730:	4618      	mov	r0, r3
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	014b      	lsls	r3, r1, #5
 8002740:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002744:	0142      	lsls	r2, r0, #5
 8002746:	4623      	mov	r3, r4
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	3307      	adds	r3, #7
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	ebad 0d03 	sub.w	sp, sp, r3
 8002754:	ab02      	add	r3, sp, #8
 8002756:	3303      	adds	r3, #3
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	65bb      	str	r3, [r7, #88]	; 0x58
		float cost_cl[w];
 800275e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8002760:	1e63      	subs	r3, r4, #1
 8002762:	657b      	str	r3, [r7, #84]	; 0x54
 8002764:	4623      	mov	r3, r4
 8002766:	4618      	mov	r0, r3
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	014b      	lsls	r3, r1, #5
 8002776:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800277a:	0142      	lsls	r2, r0, #5
 800277c:	4623      	mov	r3, r4
 800277e:	4618      	mov	r0, r3
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	014b      	lsls	r3, r1, #5
 800278e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002792:	0142      	lsls	r2, r0, #5
 8002794:	4623      	mov	r3, r4
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	3307      	adds	r3, #7
 800279a:	08db      	lsrs	r3, r3, #3
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	ebad 0d03 	sub.w	sp, sp, r3
 80027a2:	ab02      	add	r3, sp, #8
 80027a4:	3303      	adds	r3, #3
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	653b      	str	r3, [r7, #80]	; 0x50
		uint8_t true_label_max = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
		for(int j=0; j<w; j++){
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027b8:	e02a      	b.n	8002810 <OL_train+0x1046>
			if(true_label_max < layer->y_true[j]){
 80027ba:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027de:	d512      	bpl.n	8002806 <OL_train+0x103c>
				true_label_index = j;
 80027e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e4:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
				true_label_max = layer->y_true[j];
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8002800:	793b      	ldrb	r3, [r7, #4]
 8002802:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
		for(int j=0; j<w; j++){
 8002806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800280a:	3301      	adds	r3, #1
 800280c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002810:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002816:	429a      	cmp	r2, r3
 8002818:	dbcf      	blt.n	80027ba <OL_train+0xff0>
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6999      	ldr	r1, [r3, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7fe fde2 	bl	80013f6 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4619      	mov	r1, r3
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7fe fe4b 	bl	80014d4 <OL_softmax>
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7fe fdd0 	bl	80013f6 <OL_feedForward>
		OL_softmax(layer, layer->y_pred_2);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	4619      	mov	r1, r3
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7fe fe39 	bl	80014d4 <OL_softmax>
		for(int j=0; j<w; j++){
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002868:	e0ee      	b.n	8002a48 <OL_train+0x127e>
			cost_tl[j] = layer->y_pred[j]  -layer->y_true[j];	// compute cost of TL layer
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	ed93 7a00 	vldr	s14, [r3]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	edc3 7a00 	vstr	s15, [r3]
			cost_cl[j] = layer->y_pred_2[j]-layer->y_true[j];	// compute cost of CL layer
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	ed93 7a00 	vldr	s14, [r3]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028d4:	e06e      	b.n	80029b4 <OL_train+0x11ea>
				layer->weights[j*h+i] -= layer->l_rate*input[i]*cost_tl[j];	// Update weights TL
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80028e0:	fb01 f103 	mul.w	r1, r1, r3
 80028e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028e8:	440b      	add	r3, r1
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	edd3 6a00 	vldr	s13, [r3]
 80028f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	4413      	add	r3, r2
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800290a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800290c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002924:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002926:	fb01 f103 	mul.w	r1, r1, r3
 800292a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800292e:	440b      	add	r3, r1
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002938:	edc3 7a00 	vstr	s15, [r3]
				if(true_label_index < 5){
 800293c:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8002940:	2b04      	cmp	r3, #4
 8002942:	d832      	bhi.n	80029aa <OL_train+0x11e0>
					layer->weights_2[j*h+i] -= layer->l_rate*input[i]*cost_cl[j];	// Update weights CL
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800294c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800294e:	fb01 f103 	mul.w	r1, r1, r3
 8002952:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002956:	440b      	add	r3, r1
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	edd3 6a00 	vldr	s13, [r3]
 8002966:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	4413      	add	r3, r2
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002978:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800297a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800298e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002992:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002994:	fb01 f103 	mul.w	r1, r1, r3
 8002998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800299c:	440b      	add	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a6:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 80029aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029ae:	3301      	adds	r3, #1
 80029b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029b4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80029b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ba:	429a      	cmp	r2, r3
 80029bc:	db8b      	blt.n	80028d6 <OL_train+0x110c>
			layer->biases[j] -= layer->l_rate*cost_tl[j];					// Update biases TL
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	ed93 7a00 	vldr	s14, [r3]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	edd3 6a00 	vldr	s13, [r3]
 80029d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f6:	edc3 7a00 	vstr	s15, [r3]
			if(true_label_index < 5){
 80029fa:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d81d      	bhi.n	8002a3e <OL_train+0x1274>
				layer->biases_2[j] -= layer->l_rate*cost_tl[j];					// Update biases CL
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	ed93 7a00 	vldr	s14, [r3]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	edd3 6a00 	vldr	s13, [r3]
 8002a18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3a:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 8002a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a42:	3301      	adds	r3, #1
 8002a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a48:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	f6ff af0b 	blt.w	800286a <OL_train+0x10a0>
		OL_compareLabels(layer);			// Check if prediction is correct or not
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7fe fe3a 	bl	80016ce <OL_compareLabels>
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size) == 0) ){
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80d7 	beq.w	8002c12 <OL_train+0x1448>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	8892      	ldrh	r2, [r2, #4]
 8002a6c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002a70:	fb02 f201 	mul.w	r2, r2, r1
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 80cb 	bne.w	8002c12 <OL_train+0x1448>
			float lambda = layer->batch_size / layer->counter;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	889b      	ldrh	r3, [r3, #4]
 8002a80:	461a      	mov	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a92:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			for(int j=0; j<w; j++){
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a9c:	e070      	b.n	8002b80 <OL_train+0x13b6>
				for(int i=0; i<h; i++){
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002aa4:	e03c      	b.n	8002b20 <OL_train+0x1356>
					layer->weights[j*h+i] = layer->weights_2[j*h+i]*lambda + layer->weights[j*h+i]*(1-lambda);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002aae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ab0:	fb01 f103 	mul.w	r1, r1, r3
 8002ab4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ab8:	440b      	add	r3, r1
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	ed93 7a00 	vldr	s14, [r3]
 8002ac2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ad2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ad4:	fb01 f103 	mul.w	r1, r1, r3
 8002ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002adc:	440b      	add	r3, r1
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	edd3 6a00 	vldr	s13, [r3]
 8002ae6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002aea:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002aee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002afe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b00:	fb01 f103 	mul.w	r1, r1, r3
 8002b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b08:	440b      	add	r3, r1
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b12:	edc3 7a00 	vstr	s15, [r3]
				for(int i=0; i<h; i++){
 8002b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b20:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b26:	429a      	cmp	r2, r3
 8002b28:	dbbd      	blt.n	8002aa6 <OL_train+0x12dc>
				layer->biases[j] = layer->biases_2[j]*lambda + layer->biases[j]*(1-lambda);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	ed93 7a00 	vldr	s14, [r3]
 8002b3a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	edd3 6a00 	vldr	s13, [r3]
 8002b52:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b56:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002b5a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b72:	edc3 7a00 	vstr	s15, [r3]
			for(int j=0; j<w; j++){
 8002b76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b80:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b86:	429a      	cmp	r2, r3
 8002b88:	db89      	blt.n	8002a9e <OL_train+0x12d4>
			for(int j=0; j<w; j++){
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b90:	e03a      	b.n	8002c08 <OL_train+0x143e>
				for(int i=0; i<h; i++){
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b98:	e01e      	b.n	8002bd8 <OL_train+0x140e>
					layer->weights_2[j*h+i] = layer->weights[j*h+i];	// reset
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ba2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ba4:	fb01 f103 	mul.w	r1, r1, r3
 8002ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bac:	440b      	add	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	441a      	add	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002bb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002bbc:	fb00 f003 	mul.w	r0, r0, r3
 8002bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bc4:	4403      	add	r3, r0
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8002bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002bd8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bde:	429a      	cmp	r2, r3
 8002be0:	dbdb      	blt.n	8002b9a <OL_train+0x13d0>
				layer->biases_2[j] = layer->biases[j];					// reset
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	601a      	str	r2, [r3, #0]
			for(int j=0; j<w; j++){
 8002bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c02:	3301      	adds	r3, #1
 8002c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c08:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dbbf      	blt.n	8002b92 <OL_train+0x13c8>
		layer->counter +=1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	46ad      	mov	sp, r5
};
 8002c1e:	e7ff      	b.n	8002c20 <OL_train+0x1456>
 8002c20:	bf00      	nop
 8002c22:	37e0      	adds	r7, #224	; 0xe0
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bdb0      	pop	{r4, r5, r7, pc}

08002c28 <OL_updateRAMcounter>:





void OL_updateRAMcounter(OL_LAYER_STRUCT * layer){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

	if( (layer->counter>100) && (layer->counter%5==0) ){
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b64      	cmp	r3, #100	; 0x64
 8002c36:	dd18      	ble.n	8002c6a <OL_updateRAMcounter+0x42>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6899      	ldr	r1, [r3, #8]
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <OL_updateRAMcounter+0x4c>)
 8002c3e:	fb83 2301 	smull	r2, r3, r3, r1
 8002c42:	105a      	asrs	r2, r3, #1
 8002c44:	17cb      	asrs	r3, r1, #31
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	1aca      	subs	r2, r1, r3
 8002c50:	2a00      	cmp	r2, #0
 8002c52:	d10a      	bne.n	8002c6a <OL_updateRAMcounter+0x42>
		int tmp = FreeMem();
 8002c54:	f000 f810 	bl	8002c78 <FreeMem>
 8002c58:	60f8      	str	r0, [r7, #12]
		if(tmp < layer->freeRAMbytes){
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	da02      	bge.n	8002c6a <OL_updateRAMcounter+0x42>
			layer->freeRAMbytes = tmp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	66666667 	.word	0x66666667

08002c78 <FreeMem>:
    struct elem *next;
    char dummy[FREEMEM_CELL-2];
};


int FreeMem(void) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
    int counter;
    struct elem *head, *current, *nextone;
    current = head = (struct elem*) malloc(sizeof(struct elem));
 8002c7e:	2068      	movs	r0, #104	; 0x68
 8002c80:	f004 fdfa 	bl	8007878 <malloc>
 8002c84:	4603      	mov	r3, r0
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60bb      	str	r3, [r7, #8]
    if (head == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <FreeMem+0x1e>
        return 0;      /*No memory available.*/
 8002c92:	2300      	movs	r3, #0
 8002c94:	e022      	b.n	8002cdc <FreeMem+0x64>
    counter = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
   // __disable_irq();
    do {
        counter++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
        current->next = (struct elem*) malloc(sizeof(struct elem));
 8002ca0:	2068      	movs	r0, #104	; 0x68
 8002ca2:	f004 fde9 	bl	8007878 <malloc>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	601a      	str	r2, [r3, #0]
        current = current->next;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60bb      	str	r3, [r7, #8]
    } while (current != NULL);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ef      	bne.n	8002c9a <FreeMem+0x22>
    /* Now counter holds the number of type elem
       structures we were able to allocate. We
       must free them all before returning. */
    current = head;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60bb      	str	r3, [r7, #8]
    do {
        nextone = current->next;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	603b      	str	r3, [r7, #0]
        free(current);
 8002cc4:	68b8      	ldr	r0, [r7, #8]
 8002cc6:	f004 fddf 	bl	8007888 <free>
        current = nextone;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	60bb      	str	r3, [r7, #8]
    } while (nextone != NULL);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f4      	bne.n	8002cbe <FreeMem+0x46>
   // __enable_irq();

    return counter*FREEMEM_CELL;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2264      	movs	r2, #100	; 0x64
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_CRC_Init+0x20>)
 8002cea:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <MX_CRC_Init+0x24>)
 8002cec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_CRC_Init+0x20>)
 8002cf0:	f000 feff 	bl	8003af2 <HAL_CRC_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002cfa:	f000 fb9d 	bl	8003438 <Error_Handler>
  }

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20001ff4 	.word	0x20001ff4
 8002d08:	40023000 	.word	0x40023000

08002d0c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <HAL_CRC_MspInit+0x3c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10d      	bne.n	8002d3a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_CRC_MspInit+0x40>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <HAL_CRC_MspInit+0x40>)
 8002d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_CRC_MspInit+0x40>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40023000 	.word	0x40023000
 8002d4c:	40023800 	.word	0x40023800

08002d50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4b45      	ldr	r3, [pc, #276]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a44      	ldr	r2, [pc, #272]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b42      	ldr	r3, [pc, #264]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a3d      	ldr	r2, [pc, #244]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <MX_GPIO_Init+0x130>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2120      	movs	r1, #32
 8002dda:	482a      	ldr	r0, [pc, #168]	; (8002e84 <MX_GPIO_Init+0x134>)
 8002ddc:	f001 f84c 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002de6:	4828      	ldr	r0, [pc, #160]	; (8002e88 <MX_GPIO_Init+0x138>)
 8002de8:	f001 f846 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <MX_GPIO_Init+0x13c>)
 8002df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4823      	ldr	r0, [pc, #140]	; (8002e90 <MX_GPIO_Init+0x140>)
 8002e02:	f000 feb5 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e06:	2320      	movs	r3, #32
 8002e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4819      	ldr	r0, [pc, #100]	; (8002e84 <MX_GPIO_Init+0x134>)
 8002e1e:	f000 fea7 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4813      	ldr	r0, [pc, #76]	; (8002e88 <MX_GPIO_Init+0x138>)
 8002e3c:	f000 fe98 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e40:	2320      	movs	r3, #32
 8002e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <MX_GPIO_Init+0x144>)
 8002e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4619      	mov	r1, r3
 8002e52:	480d      	ldr	r0, [pc, #52]	; (8002e88 <MX_GPIO_Init+0x138>)
 8002e54:	f000 fe8c 	bl	8003b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2017      	movs	r0, #23
 8002e5e:	f000 fe12 	bl	8003a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e62:	2017      	movs	r0, #23
 8002e64:	f000 fe2b 	bl	8003abe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2028      	movs	r0, #40	; 0x28
 8002e6e:	f000 fe0a 	bl	8003a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e72:	2028      	movs	r0, #40	; 0x28
 8002e74:	f000 fe23 	bl	8003abe <HAL_NVIC_EnableIRQ>

}
 8002e78:	bf00      	nop
 8002e7a:	3728      	adds	r7, #40	; 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020000 	.word	0x40020000
 8002e88:	40020400 	.word	0x40020400
 8002e8c:	10210000 	.word	0x10210000
 8002e90:	40020800 	.word	0x40020800
 8002e94:	10110000 	.word	0x10110000

08002e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b09a      	sub	sp, #104	; 0x68
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e9e:	f000 fc81 	bl	80037a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ea2:	f000 f9c9 	bl	8003238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ea6:	f7ff ff53 	bl	8002d50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002eaa:	f000 fbd7 	bl	800365c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002eae:	f7ff ff19 	bl	8002ce4 <MX_CRC_Init>
  MX_TIM10_Init();
 8002eb2:	f000 fb89 	bl	80035c8 <MX_TIM10_Init>
  MX_X_CUBE_AI_Init();
 8002eb6:	f002 ff41 	bl	8005d3c <MX_X_CUBE_AI_Init>
  //    MODE_LWF
  //	MODE_OL_batch
  //	MODE_OL_V2_batch
  //	MODE_LWF_batch
  // 	MODE_MY_ALG
  OL_layer.ALGORITHM = MODE_MY_ALG;
 8002eba:	2307      	movs	r3, #7
 8002ebc:	643b      	str	r3, [r7, #64]	; 0x40

  OL_layer.batch_size = 16;
 8002ebe:	2310      	movs	r3, #16
 8002ec0:	813b      	strh	r3, [r7, #8]

  // Define the learn rate depending on the algorithm
  if(OL_layer.ALGORITHM       == MODE_OL){
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <main+0x36>
	  OL_layer.l_rate = 0.001;
 8002ec8:	4b71      	ldr	r3, [pc, #452]	; (8003090 <main+0x1f8>)
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	e02b      	b.n	8002f26 <main+0x8e>
  }else if(OL_layer.ALGORITHM == MODE_OL_batch){
 8002ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d102      	bne.n	8002eda <main+0x42>
	  OL_layer.l_rate = 0.0001;
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <main+0x1fc>)
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	e025      	b.n	8002f26 <main+0x8e>
  }else if(OL_layer.ALGORITHM == MODE_OL_V2){
 8002eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d102      	bne.n	8002ee6 <main+0x4e>
	  OL_layer.l_rate = 0.001;
 8002ee0:	4b6b      	ldr	r3, [pc, #428]	; (8003090 <main+0x1f8>)
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e01f      	b.n	8002f26 <main+0x8e>
  }else if(OL_layer.ALGORITHM == MODE_OL_V2_batch){
 8002ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d102      	bne.n	8002ef2 <main+0x5a>
	  OL_layer.l_rate = 0.001;
 8002eec:	4b68      	ldr	r3, [pc, #416]	; (8003090 <main+0x1f8>)
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	e019      	b.n	8002f26 <main+0x8e>
  }else if(OL_layer.ALGORITHM == MODE_CWR){
 8002ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d105      	bne.n	8002f04 <main+0x6c>
	  OL_layer.l_rate = 0.0005;
 8002ef8:	4b67      	ldr	r3, [pc, #412]	; (8003098 <main+0x200>)
 8002efa:	607b      	str	r3, [r7, #4]
	  OL_layer.end_training = 3476;
 8002efc:	f640 5394 	movw	r3, #3476	; 0xd94
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
 8002f02:	e010      	b.n	8002f26 <main+0x8e>
  }else if(OL_layer.ALGORITHM == MODE_LWF){
 8002f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d102      	bne.n	8002f10 <main+0x78>
	  OL_layer.l_rate = 0.001;
 8002f0a:	4b61      	ldr	r3, [pc, #388]	; (8003090 <main+0x1f8>)
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	e00a      	b.n	8002f26 <main+0x8e>
  }else if(OL_layer.ALGORITHM == MODE_LWF_batch){
 8002f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d102      	bne.n	8002f1c <main+0x84>
	  OL_layer.l_rate = 0.0007;
 8002f16:	4b61      	ldr	r3, [pc, #388]	; (800309c <main+0x204>)
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	e004      	b.n	8002f26 <main+0x8e>
  }else if(OL_layer.ALGORITHM == MODE_MY_ALG){
 8002f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1e:	2b07      	cmp	r3, #7
 8002f20:	d101      	bne.n	8002f26 <main+0x8e>
	  OL_layer.l_rate = 0.005;
 8002f22:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <main+0x208>)
 8002f24:	607b      	str	r3, [r7, #4]
  }


  // Initialize all the other values in the struct
  // The values below should always stay the same
  OL_layer.WIDTH    	= 5;
 8002f26:	2305      	movs	r3, #5
 8002f28:	613b      	str	r3, [r7, #16]
  OL_layer.HEIGHT   	= AI_NETWORK_OUT_1_SIZE;
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	617b      	str	r3, [r7, #20]
  OL_layer.counter  	= 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
  OL_layer.OL_ERROR 	= 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  OL_layer.freeRAMbytes = 100000000;
 8002f38:	4b5a      	ldr	r3, [pc, #360]	; (80030a4 <main+0x20c>)
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c


  // Allocate all the necessary matrices/arrays
  OL_allocateMemory(&OL_layer);
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f806 	bl	8000f50 <OL_allocateMemory>


  // Fill up labels
  OL_layer.label[0] = 'A';
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2241      	movs	r2, #65	; 0x41
 8002f48:	701a      	strb	r2, [r3, #0]
  OL_layer.label[1] = 'E';
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	2245      	movs	r2, #69	; 0x45
 8002f50:	701a      	strb	r2, [r3, #0]
  OL_layer.label[2] = 'I';
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	3302      	adds	r3, #2
 8002f56:	2249      	movs	r2, #73	; 0x49
 8002f58:	701a      	strb	r2, [r3, #0]
  OL_layer.label[3] = 'O';
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3303      	adds	r3, #3
 8002f5e:	224f      	movs	r2, #79	; 0x4f
 8002f60:	701a      	strb	r2, [r3, #0]
  OL_layer.label[4] = 'U';
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2255      	movs	r2, #85	; 0x55
 8002f68:	701a      	strb	r2, [r3, #0]

  // Fill up the weight matrix with the weights from the Keras model
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002f6e:	e00c      	b.n	8002f8a <main+0xf2>
  	  OL_layer.weights[i] = saved_weights[i];
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	494b      	ldr	r1, [pc, #300]	; (80030a8 <main+0x210>)
 8002f7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f7c:	0092      	lsls	r2, r2, #2
 8002f7e:	440a      	add	r2, r1
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f86:	3301      	adds	r3, #1
 8002f88:	667b      	str	r3, [r7, #100]	; 0x64
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f94:	429a      	cmp	r2, r3
 8002f96:	dbeb      	blt.n	8002f70 <main+0xd8>
  }
  // Fill up the biases array with the weights from the Keras model
  for(int i=0; i<OL_layer.WIDTH; i++){
 8002f98:	2300      	movs	r3, #0
 8002f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f9c:	e00c      	b.n	8002fb8 <main+0x120>
	  OL_layer.biases[i] = saved_biases[i];
 8002f9e:	6a3a      	ldr	r2, [r7, #32]
 8002fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	4941      	ldr	r1, [pc, #260]	; (80030ac <main+0x214>)
 8002fa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	440a      	add	r2, r1
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH; i++){
 8002fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbee      	blt.n	8002f9e <main+0x106>
  }

  // Fill up weights2 and biases2 only in the case of LWF or MY_ALG
  if(OL_layer.ALGORITHM == MODE_LWF || OL_layer.ALGORITHM == MODE_LWF_batch || OL_layer.ALGORITHM == MODE_MY_ALG){
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d005      	beq.n	8002fd2 <main+0x13a>
 8002fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d002      	beq.n	8002fd2 <main+0x13a>
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fce:	2b07      	cmp	r3, #7
 8002fd0:	d12a      	bne.n	8003028 <main+0x190>
	  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fd6:	e00c      	b.n	8002ff2 <main+0x15a>
	  	  OL_layer.weights_2[i] = saved_weights[i];
 8002fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	4931      	ldr	r1, [pc, #196]	; (80030a8 <main+0x210>)
 8002fe2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fe4:	0092      	lsls	r2, r2, #2
 8002fe6:	440a      	add	r2, r1
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fee:	3301      	adds	r3, #1
 8002ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	dbeb      	blt.n	8002fd8 <main+0x140>
	  }
	  for(int i=0; i<OL_layer.WIDTH; i++){
 8003000:	2300      	movs	r3, #0
 8003002:	65bb      	str	r3, [r7, #88]	; 0x58
 8003004:	e00c      	b.n	8003020 <main+0x188>
		  OL_layer.biases_2[i] = saved_biases[i];
 8003006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	4927      	ldr	r1, [pc, #156]	; (80030ac <main+0x214>)
 8003010:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	440a      	add	r2, r1
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<OL_layer.WIDTH; i++){
 800301a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800301c:	3301      	adds	r3, #1
 800301e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003024:	429a      	cmp	r2, r3
 8003026:	dbee      	blt.n	8003006 <main+0x16e>
	  }
  }

  HAL_TIM_Base_Start_IT(&htim10);	// Start the timer for counting inference time (1 timer increment = 10 micro sec)
 8003028:	4821      	ldr	r0, [pc, #132]	; (80030b0 <main+0x218>)
 800302a:	f001 fc08 	bl	800483e <HAL_TIM_Base_Start_IT>
  {


	  // ENABLE_INFERENCE flag is raised at the end of the data communication between pc-STM
	  // (see interrupt callbacks at the end of the main)
	  if(ENABLE_INFERENCE == 1){
 800302e:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <main+0x21c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	f040 80d0 	bne.w	80031d8 <main+0x340>

		  // *************************
		  //                   DATA IN
		  // *************************
		  // Reset the info carried from the OL struct
		  OL_resetInfo(&OL_layer);
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe f994 	bl	8001368 <OL_resetInfo>

		  // Decode the message received from the UART communication
		  // The message sent from the PC is specifically encoded in a way that allows
		  // to recognize negative values easily -> explained in the readme file
		  uint8_t tmp;
		  for(int k=0; k<600; k++){
 8003040:	2300      	movs	r3, #0
 8003042:	657b      	str	r3, [r7, #84]	; 0x54
 8003044:	e054      	b.n	80030f0 <main+0x258>
			  tmp = msgRxData[k*2];
 8003046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <main+0x220>)
 800304c:	5cd3      	ldrb	r3, [r2, r3]
 800304e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			  if((tmp&128) == 128){
 8003052:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003056:	2b00      	cmp	r3, #0
 8003058:	da32      	bge.n	80030c0 <main+0x228>
				  tmp = tmp & 127;
 800305a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800305e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003062:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				  in_data[k] = -((tmp << 8) | (msgRxData[(k*2)+1]));
 8003066:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800306e:	0052      	lsls	r2, r2, #1
 8003070:	3201      	adds	r2, #1
 8003072:	4911      	ldr	r1, [pc, #68]	; (80030b8 <main+0x220>)
 8003074:	5c8a      	ldrb	r2, [r1, r2]
 8003076:	4313      	orrs	r3, r2
 8003078:	425b      	negs	r3, r3
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003082:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <main+0x224>)
 8003084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	edc3 7a00 	vstr	s15, [r3]
 800308e:	e02c      	b.n	80030ea <main+0x252>
 8003090:	3a83126f 	.word	0x3a83126f
 8003094:	38d1b717 	.word	0x38d1b717
 8003098:	3a03126f 	.word	0x3a03126f
 800309c:	3a378034 	.word	0x3a378034
 80030a0:	3ba3d70a 	.word	0x3ba3d70a
 80030a4:	05f5e100 	.word	0x05f5e100
 80030a8:	20000000 	.word	0x20000000
 80030ac:	20000a00 	.word	0x20000a00
 80030b0:	20002b60 	.word	0x20002b60
 80030b4:	200010c0 	.word	0x200010c0
 80030b8:	20001940 	.word	0x20001940
 80030bc:	20002000 	.word	0x20002000
			  }else{
				  in_data[k] = (msgRxData[(k*2)] << 8) | (msgRxData[(k*2)+1]);
 80030c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4a4e      	ldr	r2, [pc, #312]	; (8003200 <main+0x368>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030cc:	0052      	lsls	r2, r2, #1
 80030ce:	3201      	adds	r2, #1
 80030d0:	494b      	ldr	r1, [pc, #300]	; (8003200 <main+0x368>)
 80030d2:	5c8a      	ldrb	r2, [r1, r2]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030de:	4a49      	ldr	r2, [pc, #292]	; (8003204 <main+0x36c>)
 80030e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	edc3 7a00 	vstr	s15, [r3]
		  for(int k=0; k<600; k++){
 80030ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ec:	3301      	adds	r3, #1
 80030ee:	657b      	str	r3, [r7, #84]	; 0x54
 80030f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80030f6:	dba6      	blt.n	8003046 <main+0x1ae>


		  // *************************
		  //                 INFERENCE
		  // *************************
		  timer_counter = 0;										// Reset time
 80030f8:	4b43      	ldr	r3, [pc, #268]	; (8003208 <main+0x370>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

		  ai_run_v2(&in_data, &out_data);							// Perform inference from frozen model
 80030fe:	4943      	ldr	r1, [pc, #268]	; (800320c <main+0x374>)
 8003100:	4840      	ldr	r0, [pc, #256]	; (8003204 <main+0x36c>)
 8003102:	f002 fddd 	bl	8005cc0 <ai_run_v2>

		  inferenceTime_frozen = timer_counter;						// Measure frozen model inference time
 8003106:	4b40      	ldr	r3, [pc, #256]	; (8003208 <main+0x370>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a41      	ldr	r2, [pc, #260]	; (8003210 <main+0x378>)
 800310c:	6013      	str	r3, [r2, #0]

		  OL_checkNewClass(&OL_layer, letter);						// Check if the letter is known, otherwise increase dimensions of weight and biases
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	4940      	ldr	r1, [pc, #256]	; (8003214 <main+0x37c>)
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fa9c 	bl	8001650 <OL_checkNewClass>
		  OL_lettToSoft(&OL_layer, letter);							// Transform the letter char into a hot one encoded softmax array
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	493e      	ldr	r1, [pc, #248]	; (8003214 <main+0x37c>)
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f939 	bl	8001394 <OL_lettToSoft>

		  OL_train(&OL_layer, out_data);							// Perform training on last captured sample
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	4939      	ldr	r1, [pc, #228]	; (800320c <main+0x374>)
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fb4f 	bl	80017ca <OL_train>

		  inferenceTime_OL = timer_counter-inferenceTime_frozen;	// Measure OL time
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <main+0x370>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <main+0x378>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	4a38      	ldr	r2, [pc, #224]	; (8003218 <main+0x380>)
 8003138:	6013      	str	r3, [r2, #0]

		  // *************************
		  //                  DATA OUT
		  // *************************
		  // Send info data to pc
		  msgInfo[0] = OL_layer.ALGORITHM;									// int
 800313a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <main+0x384>)
 8003140:	701a      	strb	r2, [r3, #0]
		  msgInfo[1] = OL_layer.counter;									// int
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4b35      	ldr	r3, [pc, #212]	; (800321c <main+0x384>)
 8003148:	705a      	strb	r2, [r3, #1]
		  msgInfo[2] = (uint8_t)(inferenceTime_frozen & LOW_BYTE); 	 		// int - low byte
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <main+0x378>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <main+0x384>)
 8003152:	709a      	strb	r2, [r3, #2]
		  msgInfo[3] = (uint8_t)((inferenceTime_frozen>>8) & LOW_BYTE); 	// int - high byte
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <main+0x378>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	b2da      	uxtb	r2, r3
 800315c:	4b2f      	ldr	r3, [pc, #188]	; (800321c <main+0x384>)
 800315e:	70da      	strb	r2, [r3, #3]
		  msgInfo[4] = (uint8_t)(inferenceTime_OL & LOW_BYTE);				// int - low byte
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <main+0x380>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <main+0x384>)
 8003168:	711a      	strb	r2, [r3, #4]
		  msgInfo[5] = (uint8_t)((inferenceTime_OL>>8) & LOW_BYTE);			// int - high byte
 800316a:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <main+0x380>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <main+0x384>)
 8003174:	715a      	strb	r2, [r3, #5]
		  msgInfo[6] = OL_layer.new_class;									// 0 or 1
 8003176:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800317a:	4b28      	ldr	r3, [pc, #160]	; (800321c <main+0x384>)
 800317c:	719a      	strb	r2, [r3, #6]
		  msgInfo[7] = OL_layer.prediction_correct;							// 0, 1, 2
 800317e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8003182:	4b26      	ldr	r3, [pc, #152]	; (800321c <main+0x384>)
 8003184:	71da      	strb	r2, [r3, #7]
		  msgInfo[8] = OL_layer.WIDTH;										// int
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <main+0x384>)
 800318c:	721a      	strb	r2, [r3, #8]
		  msgInfo[9] = OL_layer.vowel_guess;								// char
 800318e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8003192:	4b22      	ldr	r3, [pc, #136]	; (800321c <main+0x384>)
 8003194:	725a      	strb	r2, [r3, #9]

		  HAL_UART_Transmit(&huart2, (uint8_t*)msgInfo, INFO_LEN, 100);		// Send message
 8003196:	2364      	movs	r3, #100	; 0x64
 8003198:	220a      	movs	r2, #10
 800319a:	4920      	ldr	r1, [pc, #128]	; (800321c <main+0x384>)
 800319c:	4820      	ldr	r0, [pc, #128]	; (8003220 <main+0x388>)
 800319e:	f001 fd84 	bl	8004caa <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgSoftmax, 8*4, 100);
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgPreSoftmax, 8*4, 100);
		  }
#endif

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// LED toggle
 80031a2:	2120      	movs	r1, #32
 80031a4:	481f      	ldr	r0, [pc, #124]	; (8003224 <main+0x38c>)
 80031a6:	f000 fe80 	bl	8003eaa <HAL_GPIO_TogglePin>
		  ENABLE_INFERENCE = 0;						// Reset inference flag
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <main+0x390>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

		  if(((OL_layer.counter-1) % 10 == 0) && (OL_layer.counter >= 100)){
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1e59      	subs	r1, r3, #1
 80031b4:	4b1d      	ldr	r3, [pc, #116]	; (800322c <main+0x394>)
 80031b6:	fb83 2301 	smull	r2, r3, r3, r1
 80031ba:	109a      	asrs	r2, r3, #2
 80031bc:	17cb      	asrs	r3, r1, #31
 80031be:	1ad2      	subs	r2, r2, r3
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	1aca      	subs	r2, r1, r3
 80031ca:	2a00      	cmp	r2, #0
 80031cc:	d104      	bne.n	80031d8 <main+0x340>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b63      	cmp	r3, #99	; 0x63
 80031d2:	dd01      	ble.n	80031d8 <main+0x340>
			  OL_layer.batch_size = 8;
 80031d4:	2308      	movs	r3, #8
 80031d6:	813b      	strh	r3, [r7, #8]
		  }
	  }

	  HAL_Delay(5); 			// Helps the code to not get stuck
 80031d8:	2005      	movs	r0, #5
 80031da:	f000 fb55 	bl	8003888 <HAL_Delay>

	  // If the blue button has been pressed and the cycle inference cycle is finished enable again the interrupt for the infinite cycle
	  if(BlueButton == 1 && ENABLE_INFERENCE == 0){
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <main+0x398>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f47f af23 	bne.w	800302e <main+0x196>
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <main+0x390>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f47f af1e 	bne.w	800302e <main+0x196>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	// Set high the value for interrupt for infinity cycle
 80031f2:	2201      	movs	r2, #1
 80031f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031f8:	480e      	ldr	r0, [pc, #56]	; (8003234 <main+0x39c>)
 80031fa:	f000 fe3d 	bl	8003e78 <HAL_GPIO_WritePin>
	  if(ENABLE_INFERENCE == 1){
 80031fe:	e716      	b.n	800302e <main+0x196>
 8003200:	20001940 	.word	0x20001940
 8003204:	20002000 	.word	0x20002000
 8003208:	200010c8 	.word	0x200010c8
 800320c:	20002960 	.word	0x20002960
 8003210:	200010cc 	.word	0x200010cc
 8003214:	20001ffc 	.word	0x20001ffc
 8003218:	200010d0 	.word	0x200010d0
 800321c:	20001714 	.word	0x20001714
 8003220:	20002ba0 	.word	0x20002ba0
 8003224:	40020000 	.word	0x40020000
 8003228:	200010c0 	.word	0x200010c0
 800322c:	66666667 	.word	0x66666667
 8003230:	200010c4 	.word	0x200010c4
 8003234:	40020400 	.word	0x40020400

08003238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b094      	sub	sp, #80	; 0x50
 800323c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800323e:	f107 0320 	add.w	r3, r7, #32
 8003242:	2230      	movs	r2, #48	; 0x30
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f004 fb34 	bl	80078b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <SystemClock_Config+0xd0>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	4a28      	ldr	r2, [pc, #160]	; (8003308 <SystemClock_Config+0xd0>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6413      	str	r3, [r2, #64]	; 0x40
 800326c:	4b26      	ldr	r3, [pc, #152]	; (8003308 <SystemClock_Config+0xd0>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003278:	2300      	movs	r3, #0
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <SystemClock_Config+0xd4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003284:	4a21      	ldr	r2, [pc, #132]	; (800330c <SystemClock_Config+0xd4>)
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b1f      	ldr	r3, [pc, #124]	; (800330c <SystemClock_Config+0xd4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003298:	2302      	movs	r3, #2
 800329a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800329c:	2301      	movs	r3, #1
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032a0:	2310      	movs	r3, #16
 80032a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032a4:	2302      	movs	r3, #2
 80032a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032a8:	2300      	movs	r3, #0
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80032ac:	2310      	movs	r3, #16
 80032ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80032b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80032b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80032b6:	2304      	movs	r3, #4
 80032b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80032ba:	2307      	movs	r3, #7
 80032bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032be:	f107 0320 	add.w	r3, r7, #32
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fe24 	bl	8003f10 <HAL_RCC_OscConfig>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80032ce:	f000 f8b3 	bl	8003438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032d2:	230f      	movs	r3, #15
 80032d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032d6:	2302      	movs	r3, #2
 80032d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032e8:	f107 030c 	add.w	r3, r7, #12
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 f87e 	bl	80043f0 <HAL_RCC_ClockConfig>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80032fa:	f000 f89d 	bl	8003438 <Error_Handler>
  }
}
 80032fe:	bf00      	nop
 8003300:	3750      	adds	r7, #80	; 0x50
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	40007000 	.word	0x40007000

08003310 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



// INTERRUPTS
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]


	if(BlueButton == 0){ 		// Avoid double clicks
 800331a:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <HAL_GPIO_EXTI_Callback+0xd8>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d12d      	bne.n	800337e <HAL_GPIO_EXTI_Callback+0x6e>

		// When the blue button is pressed the first time it enables the STM to receive the first input message. Then
		// the STM automatically continues to recive messages from the PC.

		if(GPIO_Pin == B1_Pin){													// If interrupt is blue button
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003328:	d129      	bne.n	800337e <HAL_GPIO_EXTI_Callback+0x6e>

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);								// Toggle LED
 800332a:	2120      	movs	r1, #32
 800332c:	482f      	ldr	r0, [pc, #188]	; (80033ec <HAL_GPIO_EXTI_Callback+0xdc>)
 800332e:	f000 fdbc 	bl	8003eaa <HAL_GPIO_TogglePin>

			BlueButton = 1;														// Raise blue button flag
 8003332:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]

			msgLen = sprintf(msgDebug, "OK");
 8003338:	492d      	ldr	r1, [pc, #180]	; (80033f0 <HAL_GPIO_EXTI_Callback+0xe0>)
 800333a:	482e      	ldr	r0, [pc, #184]	; (80033f4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800333c:	f005 f88c 	bl	8008458 <siprintf>
 8003340:	4603      	mov	r3, r0
 8003342:	4a2d      	ldr	r2, [pc, #180]	; (80033f8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003344:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc message in order to sync, the pc is waiting a msg long 2
 8003346:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	b29a      	uxth	r2, r3
 800334c:	2364      	movs	r3, #100	; 0x64
 800334e:	4929      	ldr	r1, [pc, #164]	; (80033f4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003350:	482a      	ldr	r0, [pc, #168]	; (80033fc <HAL_GPIO_EXTI_Callback+0xec>)
 8003352:	f001 fcaa 	bl	8004caa <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive the array data from the pc - array is long 600
 8003356:	2364      	movs	r3, #100	; 0x64
 8003358:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800335c:	4928      	ldr	r1, [pc, #160]	; (8003400 <HAL_GPIO_EXTI_Callback+0xf0>)
 800335e:	4827      	ldr	r0, [pc, #156]	; (80033fc <HAL_GPIO_EXTI_Callback+0xec>)
 8003360:	f001 fd3c 	bl	8004ddc <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);	// Receive the label char from the pc - label is long 1
 8003364:	2364      	movs	r3, #100	; 0x64
 8003366:	2201      	movs	r2, #1
 8003368:	4926      	ldr	r1, [pc, #152]	; (8003404 <HAL_GPIO_EXTI_Callback+0xf4>)
 800336a:	4824      	ldr	r0, [pc, #144]	; (80033fc <HAL_GPIO_EXTI_Callback+0xec>)
 800336c:	f001 fd36 	bl	8004ddc <HAL_UART_Receive>

			letter[0] = msgRxLett[0];											// Store the received message in the label container
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003376:	701a      	strb	r2, [r3, #0]

			ENABLE_INFERENCE = 1;												// Raise the flag that enables the inference at the next cyle in the while
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_GPIO_EXTI_Callback+0xfc>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]
	// to have a signal that notices when the STM finishes an inference.This is done by short cuircuiting 2 GPIOs. In
	// this case I use an output GPIO (B10) and an input interrupt GPIO (B5) for doing this. The output is raised high when
	// the inference in the while loop is finished, the other is an interrupt that is triggered when it reads this signal high.
	// Once the interrupt is triggered the code enters here and it syncs with the PC reading the message through he UART

	if(BlueButton == 1){	// If the blue button has been pressed once
 800337e:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d12b      	bne.n	80033de <HAL_GPIO_EXTI_Callback+0xce>

		if(GPIO_Pin == GPIO_PIN_5){	// If the interrupt is the GPIO pin
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	2b20      	cmp	r3, #32
 800338a:	d128      	bne.n	80033de <HAL_GPIO_EXTI_Callback+0xce>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);				// Set low the GPIO pin that signals the end of a cycle
 800338c:	2200      	movs	r2, #0
 800338e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003392:	481f      	ldr	r0, [pc, #124]	; (8003410 <HAL_GPIO_EXTI_Callback+0x100>)
 8003394:	f000 fd70 	bl	8003e78 <HAL_GPIO_WritePin>

			msgLen = sprintf(msgDebug, "OK");
 8003398:	4915      	ldr	r1, [pc, #84]	; (80033f0 <HAL_GPIO_EXTI_Callback+0xe0>)
 800339a:	4816      	ldr	r0, [pc, #88]	; (80033f4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800339c:	f005 f85c 	bl	8008458 <siprintf>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <HAL_GPIO_EXTI_Callback+0xe8>)
 80033a4:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc sync msg, the pc is waiting a msg long 2, no need to be exactly 'OK'
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <HAL_GPIO_EXTI_Callback+0xe8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	2364      	movs	r3, #100	; 0x64
 80033ae:	4911      	ldr	r1, [pc, #68]	; (80033f4 <HAL_GPIO_EXTI_Callback+0xe4>)
 80033b0:	4812      	ldr	r0, [pc, #72]	; (80033fc <HAL_GPIO_EXTI_Callback+0xec>)
 80033b2:	f001 fc7a 	bl	8004caa <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive the array data from the pc - array is long 600
 80033b6:	2364      	movs	r3, #100	; 0x64
 80033b8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80033bc:	4910      	ldr	r1, [pc, #64]	; (8003400 <HAL_GPIO_EXTI_Callback+0xf0>)
 80033be:	480f      	ldr	r0, [pc, #60]	; (80033fc <HAL_GPIO_EXTI_Callback+0xec>)
 80033c0:	f001 fd0c 	bl	8004ddc <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);	// Receive the label char from the pc - label is long 1
 80033c4:	2364      	movs	r3, #100	; 0x64
 80033c6:	2201      	movs	r2, #1
 80033c8:	490e      	ldr	r1, [pc, #56]	; (8003404 <HAL_GPIO_EXTI_Callback+0xf4>)
 80033ca:	480c      	ldr	r0, [pc, #48]	; (80033fc <HAL_GPIO_EXTI_Callback+0xec>)
 80033cc:	f001 fd06 	bl	8004ddc <HAL_UART_Receive>

			letter[0] = msgRxLett[0];											// Store the received message in the label container
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_GPIO_EXTI_Callback+0xf4>)
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_GPIO_EXTI_Callback+0xf8>)
 80033d6:	701a      	strb	r2, [r3, #0]

			ENABLE_INFERENCE = 1;												// Raise the flag that enables the inference at the next cyle in the while
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <HAL_GPIO_EXTI_Callback+0xfc>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
		}
	}
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200010c4 	.word	0x200010c4
 80033ec:	40020000 	.word	0x40020000
 80033f0:	0800af60 	.word	0x0800af60
 80033f4:	20001df0 	.word	0x20001df0
 80033f8:	20001e90 	.word	0x20001e90
 80033fc:	20002ba0 	.word	0x20002ba0
 8003400:	20001940 	.word	0x20001940
 8003404:	200015d0 	.word	0x200015d0
 8003408:	20001ffc 	.word	0x20001ffc
 800340c:	200010c0 	.word	0x200010c0
 8003410:	40020400 	.word	0x40020400

08003414 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim){
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	timer_counter += 1;	// 10 micro sec has passed
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	4a04      	ldr	r2, [pc, #16]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003424:	6013      	str	r3, [r2, #0]



	// Use this if cycle just for debugging and see how much memory is used after 100 input samples
	//OL_updateFreeRAM();
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	200010c8 	.word	0x200010c8

08003438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800343c:	b672      	cpsid	i
}
 800343e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003440:	e7fe      	b.n	8003440 <Error_Handler+0x8>
	...

08003444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_MspInit+0x4c>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	4a0f      	ldr	r2, [pc, #60]	; (8003490 <HAL_MspInit+0x4c>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003458:	6453      	str	r3, [r2, #68]	; 0x44
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_MspInit+0x4c>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_MspInit+0x4c>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <HAL_MspInit+0x4c>)
 8003470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_MspInit+0x4c>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003482:	2007      	movs	r0, #7
 8003484:	f000 faf4 	bl	8003a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800

08003494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003498:	e7fe      	b.n	8003498 <NMI_Handler+0x4>

0800349a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800349e:	e7fe      	b.n	800349e <HardFault_Handler+0x4>

080034a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a4:	e7fe      	b.n	80034a4 <MemManage_Handler+0x4>

080034a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034a6:	b480      	push	{r7}
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034aa:	e7fe      	b.n	80034aa <BusFault_Handler+0x4>

080034ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <UsageFault_Handler+0x4>

080034b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034e0:	f000 f9b2 	bl	8003848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80034ec:	2020      	movs	r0, #32
 80034ee:	f000 fcf7 	bl	8003ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80034fc:	4802      	ldr	r0, [pc, #8]	; (8003508 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80034fe:	f001 f9c2 	bl	8004886 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20002b60 	.word	0x20002b60

0800350c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <USART2_IRQHandler+0x10>)
 8003512:	f001 fd09 	bl	8004f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20002ba0 	.word	0x20002ba0

08003520 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003524:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003528:	f000 fcda 	bl	8003ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800352c:	bf00      	nop
 800352e:	bd80      	pop	{r7, pc}

08003530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <_sbrk+0x5c>)
 800353a:	4b15      	ldr	r3, [pc, #84]	; (8003590 <_sbrk+0x60>)
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003544:	4b13      	ldr	r3, [pc, #76]	; (8003594 <_sbrk+0x64>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <_sbrk+0x64>)
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <_sbrk+0x68>)
 8003550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <_sbrk+0x64>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d207      	bcs.n	8003570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003560:	f004 f960 	bl	8007824 <__errno>
 8003564:	4603      	mov	r3, r0
 8003566:	220c      	movs	r2, #12
 8003568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	e009      	b.n	8003584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <_sbrk+0x64>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <_sbrk+0x64>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	4a05      	ldr	r2, [pc, #20]	; (8003594 <_sbrk+0x64>)
 8003580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003582:	68fb      	ldr	r3, [r7, #12]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20018000 	.word	0x20018000
 8003590:	00001000 	.word	0x00001000
 8003594:	200010d4 	.word	0x200010d4
 8003598:	20002bf8 	.word	0x20002bf8

0800359c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <SystemInit+0x28>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <SystemInit+0x28>)
 80035a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <SystemInit+0x28>)
 80035b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035b6:	609a      	str	r2, [r3, #8]
#endif
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 80035cc:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <MX_TIM10_Init+0x3c>)
 80035ce:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <MX_TIM10_Init+0x40>)
 80035d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21-1;
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <MX_TIM10_Init+0x3c>)
 80035d4:	2214      	movs	r2, #20
 80035d6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <MX_TIM10_Init+0x3c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 40-1;
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <MX_TIM10_Init+0x3c>)
 80035e0:	2227      	movs	r2, #39	; 0x27
 80035e2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <MX_TIM10_Init+0x3c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <MX_TIM10_Init+0x3c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80035f0:	4804      	ldr	r0, [pc, #16]	; (8003604 <MX_TIM10_Init+0x3c>)
 80035f2:	f001 f8f9 	bl	80047e8 <HAL_TIM_Base_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80035fc:	f7ff ff1c 	bl	8003438 <Error_Handler>
  }

}
 8003600:	bf00      	nop
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20002b60 	.word	0x20002b60
 8003608:	40014400 	.word	0x40014400

0800360c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <HAL_TIM_Base_MspInit+0x48>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d115      	bne.n	800364a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_TIM_Base_MspInit+0x4c>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	4a0c      	ldr	r2, [pc, #48]	; (8003658 <HAL_TIM_Base_MspInit+0x4c>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362c:	6453      	str	r3, [r2, #68]	; 0x44
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <HAL_TIM_Base_MspInit+0x4c>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	2019      	movs	r0, #25
 8003640:	f000 fa21 	bl	8003a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003644:	2019      	movs	r0, #25
 8003646:	f000 fa3a 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40014400 	.word	0x40014400
 8003658:	40023800 	.word	0x40023800

0800365c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <MX_USART2_UART_Init+0x4c>)
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <MX_USART2_UART_Init+0x50>)
 8003664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <MX_USART2_UART_Init+0x4c>)
 8003668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800366c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800366e:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <MX_USART2_UART_Init+0x4c>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <MX_USART2_UART_Init+0x4c>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <MX_USART2_UART_Init+0x4c>)
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <MX_USART2_UART_Init+0x4c>)
 8003682:	220c      	movs	r2, #12
 8003684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <MX_USART2_UART_Init+0x4c>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <MX_USART2_UART_Init+0x4c>)
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <MX_USART2_UART_Init+0x4c>)
 8003694:	f001 fabc 	bl	8004c10 <HAL_UART_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800369e:	f7ff fecb 	bl	8003438 <Error_Handler>
  }

}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20002ba0 	.word	0x20002ba0
 80036ac:	40004400 	.word	0x40004400

080036b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <HAL_UART_MspInit+0x94>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d133      	bne.n	800373a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <HAL_UART_MspInit+0x98>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <HAL_UART_MspInit+0x98>)
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_UART_MspInit+0x98>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_UART_MspInit+0x98>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_UART_MspInit+0x98>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_UART_MspInit+0x98>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800370a:	230c      	movs	r3, #12
 800370c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800371a:	2307      	movs	r3, #7
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	4619      	mov	r1, r3
 8003724:	4809      	ldr	r0, [pc, #36]	; (800374c <HAL_UART_MspInit+0x9c>)
 8003726:	f000 fa23 	bl	8003b70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800372a:	2200      	movs	r2, #0
 800372c:	2100      	movs	r1, #0
 800372e:	2026      	movs	r0, #38	; 0x26
 8003730:	f000 f9a9 	bl	8003a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003734:	2026      	movs	r0, #38	; 0x26
 8003736:	f000 f9c2 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800373a:	bf00      	nop
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40004400 	.word	0x40004400
 8003748:	40023800 	.word	0x40023800
 800374c:	40020000 	.word	0x40020000

08003750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003788 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003754:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003756:	e003      	b.n	8003760 <LoopCopyDataInit>

08003758 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800375a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800375c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800375e:	3104      	adds	r1, #4

08003760 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003760:	480b      	ldr	r0, [pc, #44]	; (8003790 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003764:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003766:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003768:	d3f6      	bcc.n	8003758 <CopyDataInit>
  ldr  r2, =_sbss
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800376c:	e002      	b.n	8003774 <LoopFillZerobss>

0800376e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800376e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003770:	f842 3b04 	str.w	r3, [r2], #4

08003774 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003776:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003778:	d3f9      	bcc.n	800376e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800377a:	f7ff ff0f 	bl	800359c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377e:	f004 f857 	bl	8007830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003782:	f7ff fb89 	bl	8002e98 <main>
  bx  lr    
 8003786:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003788:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800378c:	080669b0 	.word	0x080669b0
  ldr  r0, =_sdata
 8003790:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003794:	200010a4 	.word	0x200010a4
  ldr  r2, =_sbss
 8003798:	200010a4 	.word	0x200010a4
  ldr  r3, = _ebss
 800379c:	20002bf4 	.word	0x20002bf4

080037a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a0:	e7fe      	b.n	80037a0 <ADC_IRQHandler>
	...

080037a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <HAL_Init+0x40>)
 80037ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_Init+0x40>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_Init+0x40>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_Init+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <HAL_Init+0x40>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037cc:	2003      	movs	r0, #3
 80037ce:	f000 f94f 	bl	8003a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f000 f808 	bl	80037e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7ff fe34 	bl	8003444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_InitTick+0x54>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_InitTick+0x58>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f967 	bl	8003ada <HAL_SYSTICK_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00e      	b.n	8003834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d80a      	bhi.n	8003832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381c:	2200      	movs	r2, #0
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	f000 f92f 	bl	8003a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003828:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_InitTick+0x5c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000a14 	.word	0x20000a14
 8003840:	20000a1c 	.word	0x20000a1c
 8003844:	20000a18 	.word	0x20000a18

08003848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x24>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_IncTick+0x24>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000a1c 	.word	0x20000a1c
 800386c:	20002be0 	.word	0x20002be0

08003870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20002be0 	.word	0x20002be0

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff ffee 	bl	8003870 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_Delay+0x44>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffde 	bl	8003870 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000a1c 	.word	0x20000a1c

080038d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003902:	4a04      	ldr	r2, [pc, #16]	; (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	60d3      	str	r3, [r2, #12]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <__NVIC_GetPriorityGrouping+0x18>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 0307 	and.w	r3, r3, #7
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db0b      	blt.n	800395e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <__NVIC_EnableIRQ+0x38>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2001      	movs	r0, #1
 8003956:	fa00 f202 	lsl.w	r2, r0, r2
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000e100 	.word	0xe000e100

08003970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	2b00      	cmp	r3, #0
 8003982:	db0a      	blt.n	800399a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	490c      	ldr	r1, [pc, #48]	; (80039bc <__NVIC_SetPriority+0x4c>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	440b      	add	r3, r1
 8003994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003998:	e00a      	b.n	80039b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4908      	ldr	r1, [pc, #32]	; (80039c0 <__NVIC_SetPriority+0x50>)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3b04      	subs	r3, #4
 80039a8:	0112      	lsls	r2, r2, #4
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	440b      	add	r3, r1
 80039ae:	761a      	strb	r2, [r3, #24]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	; 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	2b04      	cmp	r3, #4
 80039e0:	bf28      	it	cs
 80039e2:	2304      	movcs	r3, #4
 80039e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d902      	bls.n	80039f4 <NVIC_EncodePriority+0x30>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3b03      	subs	r3, #3
 80039f2:	e000      	b.n	80039f6 <NVIC_EncodePriority+0x32>
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	401a      	ands	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	43d9      	mvns	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	4313      	orrs	r3, r2
         );
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	; 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a3c:	d301      	bcc.n	8003a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00f      	b.n	8003a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <SysTick_Config+0x40>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4a:	210f      	movs	r1, #15
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	f7ff ff8e 	bl	8003970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <SysTick_Config+0x40>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5a:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <SysTick_Config+0x40>)
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	e000e010 	.word	0xe000e010

08003a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff29 	bl	80038d0 <__NVIC_SetPriorityGrouping>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a98:	f7ff ff3e 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8003a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	6978      	ldr	r0, [r7, #20]
 8003aa4:	f7ff ff8e 	bl	80039c4 <NVIC_EncodePriority>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff5d 	bl	8003970 <__NVIC_SetPriority>
}
 8003ab6:	bf00      	nop
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff31 	bl	8003934 <__NVIC_EnableIRQ>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ffa2 	bl	8003a2c <SysTick_Config>
 8003ae8:	4603      	mov	r3, r0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e00e      	b.n	8003b22 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	795b      	ldrb	r3, [r3, #5]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff f8f9 	bl	8002d0c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d004      	beq.n	8003b48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2280      	movs	r2, #128	; 0x80
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e00c      	b.n	8003b62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2205      	movs	r2, #5
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	e159      	b.n	8003e40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	f040 8148 	bne.w	8003e3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d00b      	beq.n	8003bca <HAL_GPIO_Init+0x5a>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d007      	beq.n	8003bca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bbe:	2b11      	cmp	r3, #17
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b12      	cmp	r3, #18
 8003bc8:	d130      	bne.n	8003c2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c00:	2201      	movs	r2, #1
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 0201 	and.w	r2, r3, #1
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0xfc>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b12      	cmp	r3, #18
 8003c6a:	d123      	bne.n	8003cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	08da      	lsrs	r2, r3, #3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3208      	adds	r2, #8
 8003c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	220f      	movs	r2, #15
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	08da      	lsrs	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3208      	adds	r2, #8
 8003cae:	69b9      	ldr	r1, [r7, #24]
 8003cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0203 	and.w	r2, r3, #3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80a2 	beq.w	8003e3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <HAL_GPIO_Init+0x2e8>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	4a56      	ldr	r2, [pc, #344]	; (8003e58 <HAL_GPIO_Init+0x2e8>)
 8003d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d04:	6453      	str	r3, [r2, #68]	; 0x44
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <HAL_GPIO_Init+0x2e8>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d12:	4a52      	ldr	r2, [pc, #328]	; (8003e5c <HAL_GPIO_Init+0x2ec>)
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	3302      	adds	r3, #2
 8003d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	220f      	movs	r2, #15
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a49      	ldr	r2, [pc, #292]	; (8003e60 <HAL_GPIO_Init+0x2f0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d019      	beq.n	8003d72 <HAL_GPIO_Init+0x202>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a48      	ldr	r2, [pc, #288]	; (8003e64 <HAL_GPIO_Init+0x2f4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_GPIO_Init+0x1fe>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a47      	ldr	r2, [pc, #284]	; (8003e68 <HAL_GPIO_Init+0x2f8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00d      	beq.n	8003d6a <HAL_GPIO_Init+0x1fa>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a46      	ldr	r2, [pc, #280]	; (8003e6c <HAL_GPIO_Init+0x2fc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <HAL_GPIO_Init+0x1f6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a45      	ldr	r2, [pc, #276]	; (8003e70 <HAL_GPIO_Init+0x300>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d101      	bne.n	8003d62 <HAL_GPIO_Init+0x1f2>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e008      	b.n	8003d74 <HAL_GPIO_Init+0x204>
 8003d62:	2307      	movs	r3, #7
 8003d64:	e006      	b.n	8003d74 <HAL_GPIO_Init+0x204>
 8003d66:	2303      	movs	r3, #3
 8003d68:	e004      	b.n	8003d74 <HAL_GPIO_Init+0x204>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e002      	b.n	8003d74 <HAL_GPIO_Init+0x204>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_GPIO_Init+0x204>
 8003d72:	2300      	movs	r3, #0
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	f002 0203 	and.w	r2, r2, #3
 8003d7a:	0092      	lsls	r2, r2, #2
 8003d7c:	4093      	lsls	r3, r2
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d84:	4935      	ldr	r1, [pc, #212]	; (8003e5c <HAL_GPIO_Init+0x2ec>)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d92:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <HAL_GPIO_Init+0x304>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db6:	4a2f      	ldr	r2, [pc, #188]	; (8003e74 <HAL_GPIO_Init+0x304>)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003dbc:	4b2d      	ldr	r3, [pc, #180]	; (8003e74 <HAL_GPIO_Init+0x304>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003de0:	4a24      	ldr	r2, [pc, #144]	; (8003e74 <HAL_GPIO_Init+0x304>)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de6:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <HAL_GPIO_Init+0x304>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <HAL_GPIO_Init+0x304>)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e10:	4b18      	ldr	r3, [pc, #96]	; (8003e74 <HAL_GPIO_Init+0x304>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e34:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <HAL_GPIO_Init+0x304>)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	f67f aea2 	bls.w	8003b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	3724      	adds	r7, #36	; 0x24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40013800 	.word	0x40013800
 8003e60:	40020000 	.word	0x40020000
 8003e64:	40020400 	.word	0x40020400
 8003e68:	40020800 	.word	0x40020800
 8003e6c:	40020c00 	.word	0x40020c00
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40013c00 	.word	0x40013c00

08003e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
 8003e84:	4613      	mov	r3, r2
 8003e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e88:	787b      	ldrb	r3, [r7, #1]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e94:	e003      	b.n	8003e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e96:	887b      	ldrh	r3, [r7, #2]
 8003e98:	041a      	lsls	r2, r3, #16
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	619a      	str	r2, [r3, #24]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	887b      	ldrh	r3, [r7, #2]
 8003ebc:	401a      	ands	r2, r3
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d104      	bne.n	8003ece <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	041a      	lsls	r2, r3, #16
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003ecc:	e002      	b.n	8003ed4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	619a      	str	r2, [r3, #24]
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fa06 	bl	8003310 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40013c00 	.word	0x40013c00

08003f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e25b      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d075      	beq.n	800401a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2e:	4ba3      	ldr	r3, [pc, #652]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d00c      	beq.n	8003f54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3a:	4ba0      	ldr	r3, [pc, #640]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d112      	bne.n	8003f6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f46:	4b9d      	ldr	r3, [pc, #628]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f52:	d10b      	bne.n	8003f6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f54:	4b99      	ldr	r3, [pc, #612]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d05b      	beq.n	8004018 <HAL_RCC_OscConfig+0x108>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d157      	bne.n	8004018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e236      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f74:	d106      	bne.n	8003f84 <HAL_RCC_OscConfig+0x74>
 8003f76:	4b91      	ldr	r3, [pc, #580]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a90      	ldr	r2, [pc, #576]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e01d      	b.n	8003fc0 <HAL_RCC_OscConfig+0xb0>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x98>
 8003f8e:	4b8b      	ldr	r3, [pc, #556]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a8a      	ldr	r2, [pc, #552]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b88      	ldr	r3, [pc, #544]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a87      	ldr	r2, [pc, #540]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e00b      	b.n	8003fc0 <HAL_RCC_OscConfig+0xb0>
 8003fa8:	4b84      	ldr	r3, [pc, #528]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a83      	ldr	r2, [pc, #524]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b81      	ldr	r3, [pc, #516]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a80      	ldr	r2, [pc, #512]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d013      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7ff fc52 	bl	8003870 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7ff fc4e 	bl	8003870 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e1fb      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe2:	4b76      	ldr	r3, [pc, #472]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xc0>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7ff fc3e 	bl	8003870 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7ff fc3a 	bl	8003870 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e1e7      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400a:	4b6c      	ldr	r3, [pc, #432]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0xe8>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d063      	beq.n	80040ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004026:	4b65      	ldr	r3, [pc, #404]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004032:	4b62      	ldr	r3, [pc, #392]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800403a:	2b08      	cmp	r3, #8
 800403c:	d11c      	bne.n	8004078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403e:	4b5f      	ldr	r3, [pc, #380]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d116      	bne.n	8004078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404a:	4b5c      	ldr	r3, [pc, #368]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_RCC_OscConfig+0x152>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d001      	beq.n	8004062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e1bb      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004062:	4b56      	ldr	r3, [pc, #344]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4952      	ldr	r1, [pc, #328]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004076:	e03a      	b.n	80040ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d020      	beq.n	80040c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004080:	4b4f      	ldr	r3, [pc, #316]	; (80041c0 <HAL_RCC_OscConfig+0x2b0>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7ff fbf3 	bl	8003870 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800408e:	f7ff fbef 	bl	8003870 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e19c      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a0:	4b46      	ldr	r3, [pc, #280]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ac:	4b43      	ldr	r3, [pc, #268]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4940      	ldr	r1, [pc, #256]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	600b      	str	r3, [r1, #0]
 80040c0:	e015      	b.n	80040ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c2:	4b3f      	ldr	r3, [pc, #252]	; (80041c0 <HAL_RCC_OscConfig+0x2b0>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7ff fbd2 	bl	8003870 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d0:	f7ff fbce 	bl	8003870 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e17b      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e2:	4b36      	ldr	r3, [pc, #216]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d030      	beq.n	800415c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004102:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <HAL_RCC_OscConfig+0x2b4>)
 8004104:	2201      	movs	r2, #1
 8004106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7ff fbb2 	bl	8003870 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004110:	f7ff fbae 	bl	8003870 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e15b      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004122:	4b26      	ldr	r3, [pc, #152]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x200>
 800412e:	e015      	b.n	800415c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004130:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_OscConfig+0x2b4>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004136:	f7ff fb9b 	bl	8003870 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413e:	f7ff fb97 	bl	8003870 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e144      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f0      	bne.n	800413e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a0 	beq.w	80042aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCC_OscConfig+0x2ac>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_OscConfig+0x2b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d121      	bne.n	80041ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <HAL_RCC_OscConfig+0x2b8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <HAL_RCC_OscConfig+0x2b8>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b2:	f7ff fb5d 	bl	8003870 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	e011      	b.n	80041de <HAL_RCC_OscConfig+0x2ce>
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	42470000 	.word	0x42470000
 80041c4:	42470e80 	.word	0x42470e80
 80041c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7ff fb50 	bl	8003870 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e0fd      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041de:	4b81      	ldr	r3, [pc, #516]	; (80043e4 <HAL_RCC_OscConfig+0x4d4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d106      	bne.n	8004200 <HAL_RCC_OscConfig+0x2f0>
 80041f2:	4b7d      	ldr	r3, [pc, #500]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	4a7c      	ldr	r2, [pc, #496]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6713      	str	r3, [r2, #112]	; 0x70
 80041fe:	e01c      	b.n	800423a <HAL_RCC_OscConfig+0x32a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b05      	cmp	r3, #5
 8004206:	d10c      	bne.n	8004222 <HAL_RCC_OscConfig+0x312>
 8004208:	4b77      	ldr	r3, [pc, #476]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	4a76      	ldr	r2, [pc, #472]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	6713      	str	r3, [r2, #112]	; 0x70
 8004214:	4b74      	ldr	r3, [pc, #464]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a73      	ldr	r2, [pc, #460]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	e00b      	b.n	800423a <HAL_RCC_OscConfig+0x32a>
 8004222:	4b71      	ldr	r3, [pc, #452]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	4a70      	ldr	r2, [pc, #448]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6713      	str	r3, [r2, #112]	; 0x70
 800422e:	4b6e      	ldr	r3, [pc, #440]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a6d      	ldr	r2, [pc, #436]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 8004234:	f023 0304 	bic.w	r3, r3, #4
 8004238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d015      	beq.n	800426e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7ff fb15 	bl	8003870 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7ff fb11 	bl	8003870 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0bc      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004260:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ee      	beq.n	800424a <HAL_RCC_OscConfig+0x33a>
 800426c:	e014      	b.n	8004298 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7ff faff 	bl	8003870 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004274:	e00a      	b.n	800428c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7ff fafb 	bl	8003870 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0a6      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428c:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ee      	bne.n	8004276 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429e:	4b52      	ldr	r3, [pc, #328]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	4a51      	ldr	r2, [pc, #324]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 80042a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8092 	beq.w	80043d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b4:	4b4c      	ldr	r3, [pc, #304]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d05c      	beq.n	800437a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d141      	bne.n	800434c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c8:	4b48      	ldr	r3, [pc, #288]	; (80043ec <HAL_RCC_OscConfig+0x4dc>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ce:	f7ff facf 	bl	8003870 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d6:	f7ff facb 	bl	8003870 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e078      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e8:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f0      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	019b      	lsls	r3, r3, #6
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	3b01      	subs	r3, #1
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	061b      	lsls	r3, r3, #24
 8004318:	4933      	ldr	r1, [pc, #204]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431e:	4b33      	ldr	r3, [pc, #204]	; (80043ec <HAL_RCC_OscConfig+0x4dc>)
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7ff faa4 	bl	8003870 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432c:	f7ff faa0 	bl	8003870 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e04d      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433e:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x41c>
 800434a:	e045      	b.n	80043d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434c:	4b27      	ldr	r3, [pc, #156]	; (80043ec <HAL_RCC_OscConfig+0x4dc>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004352:	f7ff fa8d 	bl	8003870 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435a:	f7ff fa89 	bl	8003870 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e036      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x44a>
 8004378:	e02e      	b.n	80043d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e029      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <HAL_RCC_OscConfig+0x4d8>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	429a      	cmp	r2, r3
 8004398:	d11c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d115      	bne.n	80043d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043ae:	4013      	ands	r3, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d10d      	bne.n	80043d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d106      	bne.n	80043d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40007000 	.word	0x40007000
 80043e8:	40023800 	.word	0x40023800
 80043ec:	42470060 	.word	0x42470060

080043f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0cc      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004404:	4b68      	ldr	r3, [pc, #416]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d90c      	bls.n	800442c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004412:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	4b63      	ldr	r3, [pc, #396]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0b8      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004444:	4b59      	ldr	r3, [pc, #356]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a58      	ldr	r2, [pc, #352]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800444e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a52      	ldr	r2, [pc, #328]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004468:	4b50      	ldr	r3, [pc, #320]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	494d      	ldr	r1, [pc, #308]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d044      	beq.n	8004510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	4b47      	ldr	r3, [pc, #284]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d119      	bne.n	80044ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e07f      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d003      	beq.n	80044ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ae:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e06f      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044be:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e067      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ce:	4b37      	ldr	r3, [pc, #220]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f023 0203 	bic.w	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4934      	ldr	r1, [pc, #208]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e0:	f7ff f9c6 	bl	8003870 <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e8:	f7ff f9c2 	bl	8003870 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e04f      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 020c 	and.w	r2, r3, #12
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	429a      	cmp	r2, r3
 800450e:	d1eb      	bne.n	80044e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d20c      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e032      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4916      	ldr	r1, [pc, #88]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	490e      	ldr	r1, [pc, #56]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004576:	f000 f821 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800457a:	4602      	mov	r2, r0
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	490a      	ldr	r1, [pc, #40]	; (80045b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	5ccb      	ldrb	r3, [r1, r3]
 800458a:	fa22 f303 	lsr.w	r3, r2, r3
 800458e:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff f926 	bl	80037e8 <HAL_InitTick>

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40023c00 	.word	0x40023c00
 80045ac:	40023800 	.word	0x40023800
 80045b0:	0800b138 	.word	0x0800b138
 80045b4:	20000a14 	.word	0x20000a14
 80045b8:	20000a18 	.word	0x20000a18

080045bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	2300      	movs	r3, #0
 80045ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d4:	4b67      	ldr	r3, [pc, #412]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d00d      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x40>
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	f200 80bd 	bhi.w	8004760 <HAL_RCC_GetSysClockFreq+0x1a4>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ee:	e0b7      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f0:	4b61      	ldr	r3, [pc, #388]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045f2:	60bb      	str	r3, [r7, #8]
       break;
 80045f4:	e0b7      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f6:	4b61      	ldr	r3, [pc, #388]	; (800477c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80045f8:	60bb      	str	r3, [r7, #8]
      break;
 80045fa:	e0b4      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045fc:	4b5d      	ldr	r3, [pc, #372]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004604:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004606:	4b5b      	ldr	r3, [pc, #364]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d04d      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004612:	4b58      	ldr	r3, [pc, #352]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	461a      	mov	r2, r3
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	ea02 0800 	and.w	r8, r2, r0
 800462a:	ea03 0901 	and.w	r9, r3, r1
 800462e:	4640      	mov	r0, r8
 8004630:	4649      	mov	r1, r9
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	014b      	lsls	r3, r1, #5
 800463c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004640:	0142      	lsls	r2, r0, #5
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	ebb0 0008 	subs.w	r0, r0, r8
 800464a:	eb61 0109 	sbc.w	r1, r1, r9
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	018b      	lsls	r3, r1, #6
 8004658:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800465c:	0182      	lsls	r2, r0, #6
 800465e:	1a12      	subs	r2, r2, r0
 8004660:	eb63 0301 	sbc.w	r3, r3, r1
 8004664:	f04f 0000 	mov.w	r0, #0
 8004668:	f04f 0100 	mov.w	r1, #0
 800466c:	00d9      	lsls	r1, r3, #3
 800466e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004672:	00d0      	lsls	r0, r2, #3
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	eb12 0208 	adds.w	r2, r2, r8
 800467c:	eb43 0309 	adc.w	r3, r3, r9
 8004680:	f04f 0000 	mov.w	r0, #0
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	0259      	lsls	r1, r3, #9
 800468a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800468e:	0250      	lsls	r0, r2, #9
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	f7fc fada 	bl	8000c58 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4613      	mov	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	e04a      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	461a      	mov	r2, r3
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	ea02 0400 	and.w	r4, r2, r0
 80046c6:	ea03 0501 	and.w	r5, r3, r1
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	014b      	lsls	r3, r1, #5
 80046d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046dc:	0142      	lsls	r2, r0, #5
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	1b00      	subs	r0, r0, r4
 80046e4:	eb61 0105 	sbc.w	r1, r1, r5
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	018b      	lsls	r3, r1, #6
 80046f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046f6:	0182      	lsls	r2, r0, #6
 80046f8:	1a12      	subs	r2, r2, r0
 80046fa:	eb63 0301 	sbc.w	r3, r3, r1
 80046fe:	f04f 0000 	mov.w	r0, #0
 8004702:	f04f 0100 	mov.w	r1, #0
 8004706:	00d9      	lsls	r1, r3, #3
 8004708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800470c:	00d0      	lsls	r0, r2, #3
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	1912      	adds	r2, r2, r4
 8004714:	eb45 0303 	adc.w	r3, r5, r3
 8004718:	f04f 0000 	mov.w	r0, #0
 800471c:	f04f 0100 	mov.w	r1, #0
 8004720:	0299      	lsls	r1, r3, #10
 8004722:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004726:	0290      	lsls	r0, r2, #10
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	461a      	mov	r2, r3
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	f7fc fa8e 	bl	8000c58 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4613      	mov	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	60bb      	str	r3, [r7, #8]
      break;
 800475e:	e002      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004762:	60bb      	str	r3, [r7, #8]
      break;
 8004764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004766:	68bb      	ldr	r3, [r7, #8]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
 8004778:	00f42400 	.word	0x00f42400
 800477c:	007a1200 	.word	0x007a1200

08004780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <HAL_RCC_GetHCLKFreq+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000a14 	.word	0x20000a14

08004798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800479c:	f7ff fff0 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	4903      	ldr	r1, [pc, #12]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40023800 	.word	0x40023800
 80047bc:	0800b148 	.word	0x0800b148

080047c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047c4:	f7ff ffdc 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0b5b      	lsrs	r3, r3, #13
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4903      	ldr	r1, [pc, #12]	; (80047e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	0800b148 	.word	0x0800b148

080047e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e01d      	b.n	8004836 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fe fefc 	bl	800360c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f000 f95e 	bl	8004ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b06      	cmp	r3, #6
 8004866:	d007      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d122      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d11b      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f06f 0202 	mvn.w	r2, #2
 80048b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f8ee 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 80048ce:	e005      	b.n	80048dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8e0 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8f1 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d122      	bne.n	8004936 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d11b      	bne.n	8004936 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f06f 0204 	mvn.w	r2, #4
 8004906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8c4 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 8004922:	e005      	b.n	8004930 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8b6 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f8c7 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d122      	bne.n	800498a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b08      	cmp	r3, #8
 8004950:	d11b      	bne.n	800498a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f06f 0208 	mvn.w	r2, #8
 800495a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2204      	movs	r2, #4
 8004960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f89a 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 8004976:	e005      	b.n	8004984 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f88c 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f89d 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b10      	cmp	r3, #16
 8004996:	d122      	bne.n	80049de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d11b      	bne.n	80049de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f06f 0210 	mvn.w	r2, #16
 80049ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2208      	movs	r2, #8
 80049b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f870 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 80049ca:	e005      	b.n	80049d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f862 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f873 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d10e      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f06f 0201 	mvn.w	r2, #1
 8004a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fe fd05 	bl	8003414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a14:	2b80      	cmp	r3, #128	; 0x80
 8004a16:	d10e      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a22:	2b80      	cmp	r3, #128	; 0x80
 8004a24:	d107      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f8e3 	bl	8004bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d10e      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b40      	cmp	r3, #64	; 0x40
 8004a50:	d107      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f838 	bl	8004ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d10e      	bne.n	8004a8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d107      	bne.n	8004a8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f06f 0220 	mvn.w	r2, #32
 8004a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f8ad 	bl	8004be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a34      	ldr	r2, [pc, #208]	; (8004bcc <TIM_Base_SetConfig+0xe4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00f      	beq.n	8004b20 <TIM_Base_SetConfig+0x38>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b06:	d00b      	beq.n	8004b20 <TIM_Base_SetConfig+0x38>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a31      	ldr	r2, [pc, #196]	; (8004bd0 <TIM_Base_SetConfig+0xe8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <TIM_Base_SetConfig+0x38>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a30      	ldr	r2, [pc, #192]	; (8004bd4 <TIM_Base_SetConfig+0xec>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0x38>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <TIM_Base_SetConfig+0xf0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d108      	bne.n	8004b32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a25      	ldr	r2, [pc, #148]	; (8004bcc <TIM_Base_SetConfig+0xe4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01b      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b40:	d017      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a22      	ldr	r2, [pc, #136]	; (8004bd0 <TIM_Base_SetConfig+0xe8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <TIM_Base_SetConfig+0xec>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00f      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a20      	ldr	r2, [pc, #128]	; (8004bd8 <TIM_Base_SetConfig+0xf0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00b      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1f      	ldr	r2, [pc, #124]	; (8004bdc <TIM_Base_SetConfig+0xf4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <TIM_Base_SetConfig+0xf8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <TIM_Base_SetConfig+0xfc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d108      	bne.n	8004b84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <TIM_Base_SetConfig+0xe4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d103      	bne.n	8004bb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	615a      	str	r2, [r3, #20]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	40000c00 	.word	0x40000c00
 8004bdc:	40014000 	.word	0x40014000
 8004be0:	40014400 	.word	0x40014400
 8004be4:	40014800 	.word	0x40014800

08004be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e03f      	b.n	8004ca2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fe fd3a 	bl	80036b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fbf1 	bl	800543c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b088      	sub	sp, #32
 8004cae:	af02      	add	r7, sp, #8
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	f040 8083 	bne.w	8004dd2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_UART_Transmit+0x2e>
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e07b      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Transmit+0x40>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e074      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2221      	movs	r2, #33	; 0x21
 8004cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d00:	f7fe fdb6 	bl	8003870 <HAL_GetTick>
 8004d04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d1a:	e042      	b.n	8004da2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d32:	d122      	bne.n	8004d7a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fa10 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e042      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d60:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	e017      	b.n	8004da2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	3301      	adds	r3, #1
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	e013      	b.n	8004da2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2200      	movs	r2, #0
 8004d82:	2180      	movs	r1, #128	; 0x80
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f9ed 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e01f      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	60ba      	str	r2, [r7, #8]
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b7      	bne.n	8004d1c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2200      	movs	r2, #0
 8004db4:	2140      	movs	r1, #64	; 0x40
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f9d4 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e006      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	f040 8090 	bne.w	8004f1e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_UART_Receive+0x2e>
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e088      	b.n	8004f20 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_UART_Receive+0x40>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e081      	b.n	8004f20 <HAL_UART_Receive+0x144>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2222      	movs	r2, #34	; 0x22
 8004e2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e32:	f7fe fd1d 	bl	8003870 <HAL_GetTick>
 8004e36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	88fa      	ldrh	r2, [r7, #6]
 8004e42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e4c:	e05c      	b.n	8004f08 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e64:	d12b      	bne.n	8004ebe <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2120      	movs	r1, #32
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f977 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e04f      	b.n	8004f20 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10c      	bne.n	8004ea6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	e030      	b.n	8004f08 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	e024      	b.n	8004f08 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2120      	movs	r1, #32
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f94b 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e023      	b.n	8004f20 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	60ba      	str	r2, [r7, #8]
 8004eec:	b2ca      	uxtb	r2, r1
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e00a      	b.n	8004f08 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d19d      	bne.n	8004e4e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
  }
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_UART_IRQHandler+0x52>
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f9e0 	bl	8005338 <UART_Receive_IT>
      return;
 8004f78:	e0d0      	b.n	800511c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80b0 	beq.w	80050e2 <HAL_UART_IRQHandler+0x1ba>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_UART_IRQHandler+0x70>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 80a5 	beq.w	80050e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x90>
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_UART_IRQHandler+0xb0>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	f043 0202 	orr.w	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xd0>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	f043 0204 	orr.w	r2, r3, #4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00f      	beq.n	8005022 <HAL_UART_IRQHandler+0xfa>
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_UART_IRQHandler+0xee>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	f043 0208 	orr.w	r2, r3, #8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d077      	beq.n	800511a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_UART_IRQHandler+0x11c>
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f97a 	bl	8005338 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <HAL_UART_IRQHandler+0x144>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d031      	beq.n	80050d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8c3 	bl	80051f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d123      	bne.n	80050c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	2b00      	cmp	r3, #0
 8005096:	d013      	beq.n	80050c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	4a21      	ldr	r2, [pc, #132]	; (8005124 <HAL_UART_IRQHandler+0x1fc>)
 800509e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe fd40 	bl	8003b2a <HAL_DMA_Abort_IT>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d016      	beq.n	80050de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050ba:	4610      	mov	r0, r2
 80050bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050be:	e00e      	b.n	80050de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f845 	bl	8005150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c6:	e00a      	b.n	80050de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f841 	bl	8005150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ce:	e006      	b.n	80050de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f83d 	bl	8005150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80050dc:	e01d      	b.n	800511a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050de:	bf00      	nop
    return;
 80050e0:	e01b      	b.n	800511a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_UART_IRQHandler+0x1d6>
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8b0 	bl	800525c <UART_Transmit_IT>
    return;
 80050fc:	e00e      	b.n	800511c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d009      	beq.n	800511c <HAL_UART_IRQHandler+0x1f4>
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8f8 	bl	8005308 <UART_EndTransmit_IT>
    return;
 8005118:	e000      	b.n	800511c <HAL_UART_IRQHandler+0x1f4>
    return;
 800511a:	bf00      	nop
  }
}
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	08005235 	.word	0x08005235

08005128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005174:	e02c      	b.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d028      	beq.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <UART_WaitOnFlagUntilTimeout+0x30>
 8005184:	f7fe fb74 	bl	8003870 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	429a      	cmp	r2, r3
 8005192:	d21d      	bcs.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e00f      	b.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4013      	ands	r3, r2
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	429a      	cmp	r2, r3
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d0c3      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800520e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff ff7e 	bl	8005150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b21      	cmp	r3, #33	; 0x21
 800526e:	d144      	bne.n	80052fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d11a      	bne.n	80052b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800528e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	1c9a      	adds	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]
 80052a2:	e00e      	b.n	80052c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	621a      	str	r2, [r3, #32]
 80052ae:	e008      	b.n	80052c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	1c59      	adds	r1, r3, #1
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6211      	str	r1, [r2, #32]
 80052ba:	781a      	ldrb	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4619      	mov	r1, r3
 80052d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10f      	bne.n	80052f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e000      	b.n	80052fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
  }
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff fefd 	bl	8005128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b22      	cmp	r3, #34	; 0x22
 800534a:	d171      	bne.n	8005430 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005354:	d123      	bne.n	800539e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10e      	bne.n	8005382 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	1c9a      	adds	r2, r3, #2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	629a      	str	r2, [r3, #40]	; 0x28
 8005380:	e029      	b.n	80053d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	b29b      	uxth	r3, r3
 800538a:	b2db      	uxtb	r3, r3
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	629a      	str	r2, [r3, #40]	; 0x28
 800539c:	e01b      	b.n	80053d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6858      	ldr	r0, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	1c59      	adds	r1, r3, #1
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6291      	str	r1, [r2, #40]	; 0x28
 80053b6:	b2c2      	uxtb	r2, r0
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e00c      	b.n	80053d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	1c58      	adds	r0, r3, #1
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	6288      	str	r0, [r1, #40]	; 0x28
 80053ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29b      	uxth	r3, r3
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	4619      	mov	r1, r3
 80053e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d120      	bne.n	800542c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0220 	bic.w	r2, r2, #32
 80053f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fe8a 	bl	800513c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e002      	b.n	8005432 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	e000      	b.n	8005432 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	b0bd      	sub	sp, #244	; 0xf4
 8005442:	af00      	add	r7, sp, #0
 8005444:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005458:	68d9      	ldr	r1, [r3, #12]
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	ea40 0301 	orr.w	r3, r0, r1
 8005464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	431a      	orrs	r2, r3
 8005474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	431a      	orrs	r2, r3
 800547c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005494:	f021 010c 	bic.w	r1, r1, #12
 8005498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054a2:	430b      	orrs	r3, r1
 80054a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	6999      	ldr	r1, [r3, #24]
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	ea40 0301 	orr.w	r3, r0, r1
 80054c2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ce:	f040 81a5 	bne.w	800581c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4bcd      	ldr	r3, [pc, #820]	; (8005810 <UART_SetConfig+0x3d4>)
 80054da:	429a      	cmp	r2, r3
 80054dc:	d006      	beq.n	80054ec <UART_SetConfig+0xb0>
 80054de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4bcb      	ldr	r3, [pc, #812]	; (8005814 <UART_SetConfig+0x3d8>)
 80054e6:	429a      	cmp	r2, r3
 80054e8:	f040 80cb 	bne.w	8005682 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054ec:	f7ff f968 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 80054f0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054f8:	461c      	mov	r4, r3
 80054fa:	f04f 0500 	mov.w	r5, #0
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	1891      	adds	r1, r2, r2
 8005504:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005508:	415b      	adcs	r3, r3
 800550a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800550e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005512:	1912      	adds	r2, r2, r4
 8005514:	eb45 0303 	adc.w	r3, r5, r3
 8005518:	f04f 0000 	mov.w	r0, #0
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	00d9      	lsls	r1, r3, #3
 8005522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005526:	00d0      	lsls	r0, r2, #3
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	1911      	adds	r1, r2, r4
 800552e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005532:	416b      	adcs	r3, r5
 8005534:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	461a      	mov	r2, r3
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	1891      	adds	r1, r2, r2
 8005546:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800554a:	415b      	adcs	r3, r3
 800554c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005550:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005554:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005558:	f7fb fb7e 	bl	8000c58 <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4bad      	ldr	r3, [pc, #692]	; (8005818 <UART_SetConfig+0x3dc>)
 8005562:	fba3 2302 	umull	r2, r3, r3, r2
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	011e      	lsls	r6, r3, #4
 800556a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800556e:	461c      	mov	r4, r3
 8005570:	f04f 0500 	mov.w	r5, #0
 8005574:	4622      	mov	r2, r4
 8005576:	462b      	mov	r3, r5
 8005578:	1891      	adds	r1, r2, r2
 800557a:	67b9      	str	r1, [r7, #120]	; 0x78
 800557c:	415b      	adcs	r3, r3
 800557e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005580:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005584:	1912      	adds	r2, r2, r4
 8005586:	eb45 0303 	adc.w	r3, r5, r3
 800558a:	f04f 0000 	mov.w	r0, #0
 800558e:	f04f 0100 	mov.w	r1, #0
 8005592:	00d9      	lsls	r1, r3, #3
 8005594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005598:	00d0      	lsls	r0, r2, #3
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	1911      	adds	r1, r2, r4
 80055a0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80055a4:	416b      	adcs	r3, r5
 80055a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	461a      	mov	r2, r3
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	1891      	adds	r1, r2, r2
 80055b8:	6739      	str	r1, [r7, #112]	; 0x70
 80055ba:	415b      	adcs	r3, r3
 80055bc:	677b      	str	r3, [r7, #116]	; 0x74
 80055be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80055c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80055c6:	f7fb fb47 	bl	8000c58 <__aeabi_uldivmod>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4b92      	ldr	r3, [pc, #584]	; (8005818 <UART_SetConfig+0x3dc>)
 80055d0:	fba3 1302 	umull	r1, r3, r3, r2
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	2164      	movs	r1, #100	; 0x64
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	3332      	adds	r3, #50	; 0x32
 80055e2:	4a8d      	ldr	r2, [pc, #564]	; (8005818 <UART_SetConfig+0x3dc>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055f0:	441e      	add	r6, r3
 80055f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055f6:	4618      	mov	r0, r3
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	1894      	adds	r4, r2, r2
 8005602:	66bc      	str	r4, [r7, #104]	; 0x68
 8005604:	415b      	adcs	r3, r3
 8005606:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005608:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800560c:	1812      	adds	r2, r2, r0
 800560e:	eb41 0303 	adc.w	r3, r1, r3
 8005612:	f04f 0400 	mov.w	r4, #0
 8005616:	f04f 0500 	mov.w	r5, #0
 800561a:	00dd      	lsls	r5, r3, #3
 800561c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005620:	00d4      	lsls	r4, r2, #3
 8005622:	4622      	mov	r2, r4
 8005624:	462b      	mov	r3, r5
 8005626:	1814      	adds	r4, r2, r0
 8005628:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800562c:	414b      	adcs	r3, r1
 800562e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	461a      	mov	r2, r3
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	1891      	adds	r1, r2, r2
 8005640:	6639      	str	r1, [r7, #96]	; 0x60
 8005642:	415b      	adcs	r3, r3
 8005644:	667b      	str	r3, [r7, #100]	; 0x64
 8005646:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800564a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800564e:	f7fb fb03 	bl	8000c58 <__aeabi_uldivmod>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4b70      	ldr	r3, [pc, #448]	; (8005818 <UART_SetConfig+0x3dc>)
 8005658:	fba3 1302 	umull	r1, r3, r3, r2
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	2164      	movs	r1, #100	; 0x64
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	3332      	adds	r3, #50	; 0x32
 800566a:	4a6b      	ldr	r2, [pc, #428]	; (8005818 <UART_SetConfig+0x3dc>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	f003 0207 	and.w	r2, r3, #7
 8005676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4432      	add	r2, r6
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	e26d      	b.n	8005b5e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005682:	f7ff f889 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8005686:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800568a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800568e:	461c      	mov	r4, r3
 8005690:	f04f 0500 	mov.w	r5, #0
 8005694:	4622      	mov	r2, r4
 8005696:	462b      	mov	r3, r5
 8005698:	1891      	adds	r1, r2, r2
 800569a:	65b9      	str	r1, [r7, #88]	; 0x58
 800569c:	415b      	adcs	r3, r3
 800569e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056a4:	1912      	adds	r2, r2, r4
 80056a6:	eb45 0303 	adc.w	r3, r5, r3
 80056aa:	f04f 0000 	mov.w	r0, #0
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	00d9      	lsls	r1, r3, #3
 80056b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056b8:	00d0      	lsls	r0, r2, #3
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	1911      	adds	r1, r2, r4
 80056c0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80056c4:	416b      	adcs	r3, r5
 80056c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	461a      	mov	r2, r3
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	1891      	adds	r1, r2, r2
 80056d8:	6539      	str	r1, [r7, #80]	; 0x50
 80056da:	415b      	adcs	r3, r3
 80056dc:	657b      	str	r3, [r7, #84]	; 0x54
 80056de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80056e6:	f7fb fab7 	bl	8000c58 <__aeabi_uldivmod>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4b4a      	ldr	r3, [pc, #296]	; (8005818 <UART_SetConfig+0x3dc>)
 80056f0:	fba3 2302 	umull	r2, r3, r3, r2
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	011e      	lsls	r6, r3, #4
 80056f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056fc:	461c      	mov	r4, r3
 80056fe:	f04f 0500 	mov.w	r5, #0
 8005702:	4622      	mov	r2, r4
 8005704:	462b      	mov	r3, r5
 8005706:	1891      	adds	r1, r2, r2
 8005708:	64b9      	str	r1, [r7, #72]	; 0x48
 800570a:	415b      	adcs	r3, r3
 800570c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800570e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005712:	1912      	adds	r2, r2, r4
 8005714:	eb45 0303 	adc.w	r3, r5, r3
 8005718:	f04f 0000 	mov.w	r0, #0
 800571c:	f04f 0100 	mov.w	r1, #0
 8005720:	00d9      	lsls	r1, r3, #3
 8005722:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005726:	00d0      	lsls	r0, r2, #3
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	1911      	adds	r1, r2, r4
 800572e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005732:	416b      	adcs	r3, r5
 8005734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	461a      	mov	r2, r3
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	1891      	adds	r1, r2, r2
 8005746:	6439      	str	r1, [r7, #64]	; 0x40
 8005748:	415b      	adcs	r3, r3
 800574a:	647b      	str	r3, [r7, #68]	; 0x44
 800574c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005750:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005754:	f7fb fa80 	bl	8000c58 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <UART_SetConfig+0x3dc>)
 800575e:	fba3 1302 	umull	r1, r3, r3, r2
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	2164      	movs	r1, #100	; 0x64
 8005766:	fb01 f303 	mul.w	r3, r1, r3
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	3332      	adds	r3, #50	; 0x32
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <UART_SetConfig+0x3dc>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800577e:	441e      	add	r6, r3
 8005780:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005784:	4618      	mov	r0, r3
 8005786:	f04f 0100 	mov.w	r1, #0
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	1894      	adds	r4, r2, r2
 8005790:	63bc      	str	r4, [r7, #56]	; 0x38
 8005792:	415b      	adcs	r3, r3
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005796:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800579a:	1812      	adds	r2, r2, r0
 800579c:	eb41 0303 	adc.w	r3, r1, r3
 80057a0:	f04f 0400 	mov.w	r4, #0
 80057a4:	f04f 0500 	mov.w	r5, #0
 80057a8:	00dd      	lsls	r5, r3, #3
 80057aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057ae:	00d4      	lsls	r4, r2, #3
 80057b0:	4622      	mov	r2, r4
 80057b2:	462b      	mov	r3, r5
 80057b4:	1814      	adds	r4, r2, r0
 80057b6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80057ba:	414b      	adcs	r3, r1
 80057bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	6339      	str	r1, [r7, #48]	; 0x30
 80057d0:	415b      	adcs	r3, r3
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
 80057d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057dc:	f7fb fa3c 	bl	8000c58 <__aeabi_uldivmod>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <UART_SetConfig+0x3dc>)
 80057e6:	fba3 1302 	umull	r1, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2164      	movs	r1, #100	; 0x64
 80057ee:	fb01 f303 	mul.w	r3, r1, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	3332      	adds	r3, #50	; 0x32
 80057f8:	4a07      	ldr	r2, [pc, #28]	; (8005818 <UART_SetConfig+0x3dc>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	f003 0207 	and.w	r2, r3, #7
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4432      	add	r2, r6
 800580c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800580e:	e1a6      	b.n	8005b5e <UART_SetConfig+0x722>
 8005810:	40011000 	.word	0x40011000
 8005814:	40011400 	.word	0x40011400
 8005818:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800581c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4bd1      	ldr	r3, [pc, #836]	; (8005b68 <UART_SetConfig+0x72c>)
 8005824:	429a      	cmp	r2, r3
 8005826:	d006      	beq.n	8005836 <UART_SetConfig+0x3fa>
 8005828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4bcf      	ldr	r3, [pc, #828]	; (8005b6c <UART_SetConfig+0x730>)
 8005830:	429a      	cmp	r2, r3
 8005832:	f040 80ca 	bne.w	80059ca <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005836:	f7fe ffc3 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 800583a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800583e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005842:	461c      	mov	r4, r3
 8005844:	f04f 0500 	mov.w	r5, #0
 8005848:	4622      	mov	r2, r4
 800584a:	462b      	mov	r3, r5
 800584c:	1891      	adds	r1, r2, r2
 800584e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005850:	415b      	adcs	r3, r3
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005858:	1912      	adds	r2, r2, r4
 800585a:	eb45 0303 	adc.w	r3, r5, r3
 800585e:	f04f 0000 	mov.w	r0, #0
 8005862:	f04f 0100 	mov.w	r1, #0
 8005866:	00d9      	lsls	r1, r3, #3
 8005868:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800586c:	00d0      	lsls	r0, r2, #3
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	eb12 0a04 	adds.w	sl, r2, r4
 8005876:	eb43 0b05 	adc.w	fp, r3, r5
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	f04f 0100 	mov.w	r1, #0
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	008b      	lsls	r3, r1, #2
 8005890:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005894:	0082      	lsls	r2, r0, #2
 8005896:	4650      	mov	r0, sl
 8005898:	4659      	mov	r1, fp
 800589a:	f7fb f9dd 	bl	8000c58 <__aeabi_uldivmod>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4bb3      	ldr	r3, [pc, #716]	; (8005b70 <UART_SetConfig+0x734>)
 80058a4:	fba3 2302 	umull	r2, r3, r3, r2
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	011e      	lsls	r6, r3, #4
 80058ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058b0:	4618      	mov	r0, r3
 80058b2:	f04f 0100 	mov.w	r1, #0
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	1894      	adds	r4, r2, r2
 80058bc:	623c      	str	r4, [r7, #32]
 80058be:	415b      	adcs	r3, r3
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
 80058c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058c6:	1812      	adds	r2, r2, r0
 80058c8:	eb41 0303 	adc.w	r3, r1, r3
 80058cc:	f04f 0400 	mov.w	r4, #0
 80058d0:	f04f 0500 	mov.w	r5, #0
 80058d4:	00dd      	lsls	r5, r3, #3
 80058d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058da:	00d4      	lsls	r4, r2, #3
 80058dc:	4622      	mov	r2, r4
 80058de:	462b      	mov	r3, r5
 80058e0:	1814      	adds	r4, r2, r0
 80058e2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80058e6:	414b      	adcs	r3, r1
 80058e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f04f 0100 	mov.w	r1, #0
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	008b      	lsls	r3, r1, #2
 8005902:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005906:	0082      	lsls	r2, r0, #2
 8005908:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800590c:	f7fb f9a4 	bl	8000c58 <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4b96      	ldr	r3, [pc, #600]	; (8005b70 <UART_SetConfig+0x734>)
 8005916:	fba3 1302 	umull	r1, r3, r3, r2
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	2164      	movs	r1, #100	; 0x64
 800591e:	fb01 f303 	mul.w	r3, r1, r3
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	3332      	adds	r3, #50	; 0x32
 8005928:	4a91      	ldr	r2, [pc, #580]	; (8005b70 <UART_SetConfig+0x734>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005934:	441e      	add	r6, r3
 8005936:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800593a:	4618      	mov	r0, r3
 800593c:	f04f 0100 	mov.w	r1, #0
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	1894      	adds	r4, r2, r2
 8005946:	61bc      	str	r4, [r7, #24]
 8005948:	415b      	adcs	r3, r3
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005950:	1812      	adds	r2, r2, r0
 8005952:	eb41 0303 	adc.w	r3, r1, r3
 8005956:	f04f 0400 	mov.w	r4, #0
 800595a:	f04f 0500 	mov.w	r5, #0
 800595e:	00dd      	lsls	r5, r3, #3
 8005960:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005964:	00d4      	lsls	r4, r2, #3
 8005966:	4622      	mov	r2, r4
 8005968:	462b      	mov	r3, r5
 800596a:	1814      	adds	r4, r2, r0
 800596c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005970:	414b      	adcs	r3, r1
 8005972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4618      	mov	r0, r3
 800597e:	f04f 0100 	mov.w	r1, #0
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	008b      	lsls	r3, r1, #2
 800598c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005990:	0082      	lsls	r2, r0, #2
 8005992:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005996:	f7fb f95f 	bl	8000c58 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4b74      	ldr	r3, [pc, #464]	; (8005b70 <UART_SetConfig+0x734>)
 80059a0:	fba3 1302 	umull	r1, r3, r3, r2
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	2164      	movs	r1, #100	; 0x64
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	3332      	adds	r3, #50	; 0x32
 80059b2:	4a6f      	ldr	r2, [pc, #444]	; (8005b70 <UART_SetConfig+0x734>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4432      	add	r2, r6
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	e0c9      	b.n	8005b5e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80059ca:	f7fe fee5 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 80059ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059d6:	461c      	mov	r4, r3
 80059d8:	f04f 0500 	mov.w	r5, #0
 80059dc:	4622      	mov	r2, r4
 80059de:	462b      	mov	r3, r5
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	6139      	str	r1, [r7, #16]
 80059e4:	415b      	adcs	r3, r3
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059ec:	1912      	adds	r2, r2, r4
 80059ee:	eb45 0303 	adc.w	r3, r5, r3
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f04f 0100 	mov.w	r1, #0
 80059fa:	00d9      	lsls	r1, r3, #3
 80059fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a00:	00d0      	lsls	r0, r2, #3
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	eb12 0804 	adds.w	r8, r2, r4
 8005a0a:	eb43 0905 	adc.w	r9, r3, r5
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f04f 0100 	mov.w	r1, #0
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	008b      	lsls	r3, r1, #2
 8005a24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a28:	0082      	lsls	r2, r0, #2
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	f7fb f913 	bl	8000c58 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4b4e      	ldr	r3, [pc, #312]	; (8005b70 <UART_SetConfig+0x734>)
 8005a38:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	011e      	lsls	r6, r3, #4
 8005a40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a44:	4618      	mov	r0, r3
 8005a46:	f04f 0100 	mov.w	r1, #0
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	1894      	adds	r4, r2, r2
 8005a50:	60bc      	str	r4, [r7, #8]
 8005a52:	415b      	adcs	r3, r3
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a5a:	1812      	adds	r2, r2, r0
 8005a5c:	eb41 0303 	adc.w	r3, r1, r3
 8005a60:	f04f 0400 	mov.w	r4, #0
 8005a64:	f04f 0500 	mov.w	r5, #0
 8005a68:	00dd      	lsls	r5, r3, #3
 8005a6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a6e:	00d4      	lsls	r4, r2, #3
 8005a70:	4622      	mov	r2, r4
 8005a72:	462b      	mov	r3, r5
 8005a74:	1814      	adds	r4, r2, r0
 8005a76:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005a7a:	414b      	adcs	r3, r1
 8005a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f04f 0100 	mov.w	r1, #0
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	008b      	lsls	r3, r1, #2
 8005a96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a9a:	0082      	lsls	r2, r0, #2
 8005a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005aa0:	f7fb f8da 	bl	8000c58 <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4b31      	ldr	r3, [pc, #196]	; (8005b70 <UART_SetConfig+0x734>)
 8005aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	2164      	movs	r1, #100	; 0x64
 8005ab2:	fb01 f303 	mul.w	r3, r1, r3
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	3332      	adds	r3, #50	; 0x32
 8005abc:	4a2c      	ldr	r2, [pc, #176]	; (8005b70 <UART_SetConfig+0x734>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ac8:	441e      	add	r6, r3
 8005aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f04f 0100 	mov.w	r1, #0
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	1894      	adds	r4, r2, r2
 8005ada:	603c      	str	r4, [r7, #0]
 8005adc:	415b      	adcs	r3, r3
 8005ade:	607b      	str	r3, [r7, #4]
 8005ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae4:	1812      	adds	r2, r2, r0
 8005ae6:	eb41 0303 	adc.w	r3, r1, r3
 8005aea:	f04f 0400 	mov.w	r4, #0
 8005aee:	f04f 0500 	mov.w	r5, #0
 8005af2:	00dd      	lsls	r5, r3, #3
 8005af4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005af8:	00d4      	lsls	r4, r2, #3
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	1814      	adds	r4, r2, r0
 8005b00:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005b04:	414b      	adcs	r3, r1
 8005b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	008b      	lsls	r3, r1, #2
 8005b20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b24:	0082      	lsls	r2, r0, #2
 8005b26:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005b2a:	f7fb f895 	bl	8000c58 <__aeabi_uldivmod>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <UART_SetConfig+0x734>)
 8005b34:	fba3 1302 	umull	r1, r3, r3, r2
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	2164      	movs	r1, #100	; 0x64
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	3332      	adds	r3, #50	; 0x32
 8005b46:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <UART_SetConfig+0x734>)
 8005b48:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	f003 020f 	and.w	r2, r3, #15
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4432      	add	r2, r6
 8005b5a:	609a      	str	r2, [r3, #8]
}
 8005b5c:	e7ff      	b.n	8005b5e <UART_SetConfig+0x722>
 8005b5e:	bf00      	nop
 8005b60:	37f4      	adds	r7, #244	; 0xf4
 8005b62:	46bd      	mov	sp, r7
 8005b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b68:	40011000 	.word	0x40011000
 8005b6c:	40011400 	.word	0x40011400
 8005b70:	51eb851f 	.word	0x51eb851f

08005b74 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8005b84:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005b86:	461a      	mov	r2, r3
        err.type, err.code);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	4806      	ldr	r0, [pc, #24]	; (8005bac <ai_log_err+0x38>)
 8005b92:	f002 fbbb 	bl	800830c <iprintf>
 8005b96:	e008      	b.n	8005baa <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8005b98:	793b      	ldrb	r3, [r7, #4]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4802      	ldr	r0, [pc, #8]	; (8005bb0 <ai_log_err+0x3c>)
 8005ba6:	f002 fbb1 	bl	800830c <iprintf>

  do {} while (1);
 8005baa:	e7fe      	b.n	8005baa <ai_log_err+0x36>
 8005bac:	0800af64 	.word	0x0800af64
 8005bb0:	0800af98 	.word	0x0800af98

08005bb4 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b090      	sub	sp, #64	; 0x40
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4837      	ldr	r0, [pc, #220]	; (8005ca0 <ai_boostrap+0xec>)
 8005bc2:	f000 f9d1 	bl	8005f68 <ai_network_create>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 8005bca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d006      	beq.n	8005be0 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 8005bd2:	4934      	ldr	r1, [pc, #208]	; (8005ca4 <ai_boostrap+0xf0>)
 8005bd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005bd6:	f7ff ffcd 	bl	8005b74 <ai_log_err>
    return -1;
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295
 8005bde:	e05b      	b.n	8005c98 <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8005be0:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <ai_boostrap+0xf4>)
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	2301      	movs	r3, #1
 8005be6:	823b      	strh	r3, [r7, #16]
 8005be8:	2301      	movs	r3, #1
 8005bea:	827b      	strh	r3, [r7, #18]
 8005bec:	2301      	movs	r3, #1
 8005bee:	82bb      	strh	r3, [r7, #20]
 8005bf0:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <ai_boostrap+0xf8>)
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	623b      	str	r3, [r7, #32]
 8005bfc:	4b2c      	ldr	r3, [pc, #176]	; (8005cb0 <ai_boostrap+0xfc>)
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005c00:	2301      	movs	r3, #1
 8005c02:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c04:	2301      	movs	r3, #1
 8005c06:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005c08:	2301      	movs	r3, #1
 8005c0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c10:	633b      	str	r3, [r7, #48]	; 0x30
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	2300      	movs	r3, #0
 8005c18:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 8005c1a:	4b21      	ldr	r3, [pc, #132]	; (8005ca0 <ai_boostrap+0xec>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f107 020c 	add.w	r2, r7, #12
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 f9c1 	bl	8005fac <ai_network_init>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f083 0301 	eor.w	r3, r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 8005c36:	4b1a      	ldr	r3, [pc, #104]	; (8005ca0 <ai_boostrap+0xec>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f988 	bl	8005f50 <ai_network_get_error>
 8005c40:	4603      	mov	r3, r0
 8005c42:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 8005c44:	491b      	ldr	r1, [pc, #108]	; (8005cb4 <ai_boostrap+0x100>)
 8005c46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005c48:	f7ff ff94 	bl	8005b74 <ai_log_err>
      return -1;
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c50:	e022      	b.n	8005c98 <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8005c52:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <ai_boostrap+0xec>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4918      	ldr	r1, [pc, #96]	; (8005cb8 <ai_boostrap+0x104>)
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 f91b 	bl	8005e94 <ai_network_get_info>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f083 0301 	eor.w	r3, r3, #1
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d015      	beq.n	8005c96 <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <ai_boostrap+0xec>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f96e 	bl	8005f50 <ai_network_get_error>
 8005c74:	4603      	mov	r3, r0
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 8005c78:	4910      	ldr	r1, [pc, #64]	; (8005cbc <ai_boostrap+0x108>)
 8005c7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005c7c:	f7ff ff7a 	bl	8005b74 <ai_log_err>
    ai_network_destroy(network);
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <ai_boostrap+0xec>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f985 	bl	8005f94 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 8005c8a:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <ai_boostrap+0xec>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
    return -3;
 8005c90:	f06f 0302 	mvn.w	r3, #2
 8005c94:	e000      	b.n	8005c98 <ai_boostrap+0xe4>
  }

  return 0;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3740      	adds	r7, #64	; 0x40
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	200010d8 	.word	0x200010d8
 8005ca4:	0800afc8 	.word	0x0800afc8
 8005ca8:	40040440 	.word	0x40040440
 8005cac:	0005b400 	.word	0x0005b400
 8005cb0:	00040440 	.word	0x00040440
 8005cb4:	0800afdc 	.word	0x0800afdc
 8005cb8:	200010dc 	.word	0x200010dc
 8005cbc:	0800afec 	.word	0x0800afec

08005cc0 <ai_run_v2>:

  return 0;
}

/* USER CODE BEGIN 2 */
int ai_run_v2(void *in_data, void *out_data){
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
	ai_i32 nbatch;
	ai_error err;

	/* Parameters checking */
	if (!in_data || !out_data || !network)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d006      	beq.n	8005cde <ai_run_v2+0x1e>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <ai_run_v2+0x1e>
 8005cd6:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <ai_run_v2+0x74>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d102      	bne.n	8005ce4 <ai_run_v2+0x24>
		return -1;
 8005cde:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce2:	e022      	b.n	8005d2a <ai_run_v2+0x6a>

	ai_buffer *ai_input = network_info.inputs;
 8005ce4:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <ai_run_v2+0x78>)
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	617b      	str	r3, [r7, #20]
	ai_buffer *ai_output = network_info.outputs;
 8005cea:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <ai_run_v2+0x78>)
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	613b      	str	r3, [r7, #16]

	/* Initialize input/output buffer handlers */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	611a      	str	r2, [r3, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	611a      	str	r2, [r3, #16]

	/* 2 - Perform the inference */
	nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <ai_run_v2+0x74>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f990 	bl	800602a <ai_network_run>
 8005d0a:	60f8      	str	r0, [r7, #12]
	if (nbatch != 1) {
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d00a      	beq.n	8005d28 <ai_run_v2+0x68>
		err = ai_network_get_error(network);
 8005d12:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <ai_run_v2+0x74>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f91a 	bl	8005f50 <ai_network_get_error>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	60bb      	str	r3, [r7, #8]
		// ...
		return err.code;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005d26:	e000      	b.n	8005d2a <ai_run_v2+0x6a>
	}


  return 0;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200010d8 	.word	0x200010d8
 8005d38:	200010dc 	.word	0x200010dc

08005d3c <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005d40:	4805      	ldr	r0, [pc, #20]	; (8005d58 <MX_X_CUBE_AI_Init+0x1c>)
 8005d42:	f002 fb69 	bl	8008418 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 8005d46:	f000 f981 	bl	800604c <ai_network_data_weights_get>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4903      	ldr	r1, [pc, #12]	; (8005d5c <MX_X_CUBE_AI_Init+0x20>)
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff ff30 	bl	8005bb4 <ai_boostrap>
    /* USER CODE END 5 */
}
 8005d54:	bf00      	nop
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	0800b014 	.word	0x0800b014
 8005d5c:	20001150 	.word	0x20001150

08005d60 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	3303      	adds	r3, #3
 8005d70:	f023 0303 	bic.w	r3, r3, #3
 8005d74:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <network_configure_activations+0x68>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8005d7c:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <network_configure_activations+0x68>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	60da      	str	r2, [r3, #12]
    input_layer_output_array.data = AI_PTR(activations + 0);
 8005d82:	4a12      	ldr	r2, [pc, #72]	; (8005dcc <network_configure_activations+0x6c>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6093      	str	r3, [r2, #8]
    input_layer_output_array.data_start = AI_PTR(activations + 0);
 8005d88:	4a10      	ldr	r2, [pc, #64]	; (8005dcc <network_configure_activations+0x6c>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	60d3      	str	r3, [r2, #12]
    input_layer_nl_output_array.data = AI_PTR(activations + 0);
 8005d8e:	4a10      	ldr	r2, [pc, #64]	; (8005dd0 <network_configure_activations+0x70>)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6093      	str	r3, [r2, #8]
    input_layer_nl_output_array.data_start = AI_PTR(activations + 0);
 8005d94:	4a0e      	ldr	r2, [pc, #56]	; (8005dd0 <network_configure_activations+0x70>)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	60d3      	str	r3, [r2, #12]
    hidden1_output_array.data = AI_PTR(activations + 512);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005da0:	4a0c      	ldr	r2, [pc, #48]	; (8005dd4 <network_configure_activations+0x74>)
 8005da2:	6093      	str	r3, [r2, #8]
    hidden1_output_array.data_start = AI_PTR(activations + 512);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005daa:	4a0a      	ldr	r2, [pc, #40]	; (8005dd4 <network_configure_activations+0x74>)
 8005dac:	60d3      	str	r3, [r2, #12]
    hidden1_nl_output_array.data = AI_PTR(NULL);
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <network_configure_activations+0x78>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	609a      	str	r2, [r3, #8]
    hidden1_nl_output_array.data_start = AI_PTR(NULL);
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <network_configure_activations+0x78>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8005dba:	2301      	movs	r3, #1
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	20000a84 	.word	0x20000a84
 8005dcc:	20000a94 	.word	0x20000a94
 8005dd0:	20000aa4 	.word	0x20000aa4
 8005dd4:	20000ab4 	.word	0x20000ab4
 8005dd8:	20000ac4 	.word	0x20000ac4

08005ddc <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    input_layer_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dec:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <network_configure_weights+0xa8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df4:	4a23      	ldr	r2, [pc, #140]	; (8005e84 <network_configure_weights+0xa8>)
 8005df6:	6013      	str	r3, [r2, #0]
    input_layer_weights_array.data = AI_PTR(weights + 0);
 8005df8:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <network_configure_weights+0xa8>)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6093      	str	r3, [r2, #8]
    input_layer_weights_array.data_start = AI_PTR(weights + 0);
 8005dfe:	4a21      	ldr	r2, [pc, #132]	; (8005e84 <network_configure_weights+0xa8>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	60d3      	str	r3, [r2, #12]
    input_layer_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e04:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <network_configure_weights+0xac>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <network_configure_weights+0xac>)
 8005e0e:	6013      	str	r3, [r2, #0]
    input_layer_bias_array.data = AI_PTR(weights + 307200);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005e16:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <network_configure_weights+0xac>)
 8005e18:	6093      	str	r3, [r2, #8]
    input_layer_bias_array.data_start = AI_PTR(weights + 307200);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <network_configure_weights+0xac>)
 8005e22:	60d3      	str	r3, [r2, #12]
    hidden1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <network_configure_weights+0xb0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e2c:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <network_configure_weights+0xb0>)
 8005e2e:	6013      	str	r3, [r2, #0]
    hidden1_weights_array.data = AI_PTR(weights + 307712);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005e36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005e3a:	4a14      	ldr	r2, [pc, #80]	; (8005e8c <network_configure_weights+0xb0>)
 8005e3c:	6093      	str	r3, [r2, #8]
    hidden1_weights_array.data_start = AI_PTR(weights + 307712);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005e44:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005e48:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <network_configure_weights+0xb0>)
 8005e4a:	60d3      	str	r3, [r2, #12]
    hidden1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e4c:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <network_configure_weights+0xb4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e54:	4a0e      	ldr	r2, [pc, #56]	; (8005e90 <network_configure_weights+0xb4>)
 8005e56:	6013      	str	r3, [r2, #0]
    hidden1_bias_array.data = AI_PTR(weights + 373248);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 8005e5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005e62:	4a0b      	ldr	r2, [pc, #44]	; (8005e90 <network_configure_weights+0xb4>)
 8005e64:	6093      	str	r3, [r2, #8]
    hidden1_bias_array.data_start = AI_PTR(weights + 373248);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 8005e6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005e70:	4a07      	ldr	r2, [pc, #28]	; (8005e90 <network_configure_weights+0xb4>)
 8005e72:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8005e74:	2301      	movs	r3, #1
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000ad4 	.word	0x20000ad4
 8005e88:	20000ae4 	.word	0x20000ae4
 8005e8c:	20000af4 	.word	0x20000af4
 8005e90:	20000b04 	.word	0x20000b04

08005e94 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b0a0      	sub	sp, #128	; 0x80
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f9f8 	bl	8006294 <ai_platform_context_acquire>
 8005ea4:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d041      	beq.n	8005f30 <ai_network_get_info+0x9c>
 8005eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d03e      	beq.n	8005f30 <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 8005eb2:	f107 0308 	add.w	r3, r7, #8
 8005eb6:	2274      	movs	r2, #116	; 0x74
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 fcfa 	bl	80078b4 <memset>
 8005ec0:	4b1e      	ldr	r3, [pc, #120]	; (8005f3c <ai_network_get_info+0xa8>)
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	4b1e      	ldr	r3, [pc, #120]	; (8005f40 <ai_network_get_info+0xac>)
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <ai_network_get_info+0xb0>)
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	4b1e      	ldr	r3, [pc, #120]	; (8005f48 <ai_network_get_info+0xb4>)
 8005ece:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005ed0:	f000 f934 	bl	800613c <ai_platform_runtime_get_revision>
 8005ed4:	4603      	mov	r3, r0
    ai_network_report r = {
 8005ed6:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005ed8:	f000 f952 	bl	8006180 <ai_platform_runtime_get_version>
 8005edc:	4603      	mov	r3, r0
 8005ede:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <ai_network_get_info+0xb8>)
 8005ee2:	623b      	str	r3, [r7, #32]
 8005ee4:	2306      	movs	r3, #6
 8005ee6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8005eea:	f000 f96b 	bl	80061c4 <ai_platform_api_get_version>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005ef2:	f000 f99b 	bl	800622c <ai_platform_interface_api_get_version>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 8005efa:	f44f 33b7 	mov.w	r3, #93696	; 0x16e00
 8005efe:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005f00:	f107 0308 	add.w	r3, r7, #8
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa20 	bl	800634c <ai_platform_api_get_network_report>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f083 0301 	eor.w	r3, r3, #1
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <ai_network_get_info+0x88>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e00a      	b.n	8005f32 <ai_network_get_info+0x9e>

    *report = r;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f107 0308 	add.w	r3, r7, #8
 8005f24:	2274      	movs	r2, #116	; 0x74
 8005f26:	4619      	mov	r1, r3
 8005f28:	f001 fcb6 	bl	8007898 <memcpy>
    return true;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <ai_network_get_info+0x9e>
  }

  return false;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3780      	adds	r7, #128	; 0x80
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	0800b0d0 	.word	0x0800b0d0
 8005f40:	0800b0d8 	.word	0x0800b0d8
 8005f44:	0800b0fc 	.word	0x0800b0fc
 8005f48:	0800b118 	.word	0x0800b118
 8005f4c:	0800b130 	.word	0x0800b130

08005f50 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f9c5 	bl	80062e8 <ai_platform_network_get_error>
 8005f5e:	4603      	mov	r3, r0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005f72:	2300      	movs	r3, #0
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	2304      	movs	r3, #4
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <ai_network_create+0x28>)
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fad9 	bl	8006538 <ai_platform_network_create>
 8005f86:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000a20 	.word	0x20000a20

08005f94 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fb3d 	bl	800661c <ai_platform_network_destroy>
 8005fa2:	4603      	mov	r3, r0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fb61 	bl	8006680 <ai_platform_network_init>
 8005fbe:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <ai_network_init+0x1e>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e02b      	b.n	8006022 <ai_network_init+0x76>

  ai_bool ok = true;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff ff02 	bl	8005ddc <network_configure_weights>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	7afb      	ldrb	r3, [r7, #11]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	3318      	adds	r3, #24
 8005fee:	4619      	mov	r1, r3
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff feb5 	bl	8005d60 <network_configure_activations>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bf14      	ite	ne
 8006002:	2301      	movne	r3, #1
 8006004:	2300      	moveq	r3, #0
 8006006:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fbab 	bl	8006764 <ai_platform_network_post_init>
 800600e:	4603      	mov	r3, r0
 8006010:	461a      	mov	r2, r3
 8006012:	7afb      	ldrb	r3, [r7, #11]
 8006014:	4013      	ands	r3, r2
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf14      	ite	ne
 800601a:	2301      	movne	r3, #1
 800601c:	2300      	moveq	r3, #0
 800601e:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006020:	7afb      	ldrb	r3, [r7, #11]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fbde 	bl	80067fc <ai_platform_network_process>
 8006040:	4603      	mov	r3, r0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
    0x87, 0xbb, 0xce, 0x35, 0x0d, 0xbc, 0x0f, 0x8a, 0x4e, 0x3b,
    0xc5, 0x2a, 0xe4, 0x3b, 0x8d, 0xcc, 0x7a, 0xbb, 0x97, 0x90,
    0x25, 0xbc, 0x11, 0x2e, 0x42, 0x3b, 0x49, 0x0b, 0x4d, 0xba,
    0x59, 0x09, 0x9b, 0xbb, 0xef, 0xb7, 0x8c, 0x3b, 0x0e, 0x67,
    0x90, 0xbc, 0x24, 0x06, 0xab, 0x3a, 0x10, 0xe4, 0x17, 0xbc  };
  return AI_HANDLE_PTR(s_network_weights);
 8006050:	4b02      	ldr	r3, [pc, #8]	; (800605c <ai_network_data_weights_get+0x10>)
}
 8006052:	4618      	mov	r0, r3
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	0800b180 	.word	0x0800b180

08006060 <_ai_platform_get_io_buffers_info>:
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	2400      	movs	r4, #0
 8006066:	b083      	sub	sp, #12
 8006068:	4606      	mov	r6, r0
 800606a:	4688      	mov	r8, r1
 800606c:	46a3      	mov	fp, r4
 800606e:	f04f 0a18 	mov.w	sl, #24
 8006072:	f04f 0901 	mov.w	r9, #1
 8006076:	b2a0      	uxth	r0, r4
 8006078:	b936      	cbnz	r6, 8006088 <_ai_platform_get_io_buffers_info+0x28>
 800607a:	2800      	cmp	r0, #0
 800607c:	d03b      	beq.n	80060f6 <_ai_platform_get_io_buffers_info+0x96>
 800607e:	68b3      	ldr	r3, [r6, #8]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f8c8 3000 	str.w	r3, [r8]
 8006086:	e036      	b.n	80060f6 <_ai_platform_get_io_buffers_info+0x96>
 8006088:	8833      	ldrh	r3, [r6, #0]
 800608a:	429c      	cmp	r4, r3
 800608c:	d2f5      	bcs.n	800607a <_ai_platform_get_io_buffers_info+0x1a>
 800608e:	6873      	ldr	r3, [r6, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f2      	beq.n	800607a <_ai_platform_get_io_buffers_info+0x1a>
 8006094:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8006098:	2d00      	cmp	r5, #0
 800609a:	d0ee      	beq.n	800607a <_ai_platform_get_io_buffers_info+0x1a>
 800609c:	68b3      	ldr	r3, [r6, #8]
 800609e:	69aa      	ldr	r2, [r5, #24]
 80060a0:	6859      	ldr	r1, [r3, #4]
 80060a2:	6810      	ldr	r0, [r2, #0]
 80060a4:	689f      	ldr	r7, [r3, #8]
 80060a6:	9101      	str	r1, [sp, #4]
 80060a8:	f001 fb46 	bl	8007738 <ai_array_to_buffer_fmt>
 80060ac:	9901      	ldr	r1, [sp, #4]
 80060ae:	fb0a f304 	mul.w	r3, sl, r4
 80060b2:	18ca      	adds	r2, r1, r3
 80060b4:	50c8      	str	r0, [r1, r3]
 80060b6:	f8a2 9004 	strh.w	r9, [r2, #4]
 80060ba:	68eb      	ldr	r3, [r5, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	80d3      	strh	r3, [r2, #6]
 80060c0:	68eb      	ldr	r3, [r5, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	8113      	strh	r3, [r2, #8]
 80060c6:	68eb      	ldr	r3, [r5, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	60d3      	str	r3, [r2, #12]
 80060cc:	69ab      	ldr	r3, [r5, #24]
 80060ce:	00e1      	lsls	r1, r4, #3
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	6113      	str	r3, [r2, #16]
 80060d4:	1878      	adds	r0, r7, r1
 80060d6:	b150      	cbz	r0, 80060ee <_ai_platform_get_io_buffers_info+0x8e>
 80060d8:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	6043      	str	r3, [r0, #4]
 80060e0:	b11b      	cbz	r3, 80060ea <_ai_platform_get_io_buffers_info+0x8a>
 80060e2:	885b      	ldrh	r3, [r3, #2]
 80060e4:	3300      	adds	r3, #0
 80060e6:	bf18      	it	ne
 80060e8:	2301      	movne	r3, #1
 80060ea:	507b      	str	r3, [r7, r1]
 80060ec:	b903      	cbnz	r3, 80060f0 <_ai_platform_get_io_buffers_info+0x90>
 80060ee:	2000      	movs	r0, #0
 80060f0:	6150      	str	r0, [r2, #20]
 80060f2:	3401      	adds	r4, #1
 80060f4:	e7bf      	b.n	8006076 <_ai_platform_get_io_buffers_info+0x16>
 80060f6:	b003      	add	sp, #12
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060fc <_platform_network_state_setup.isra.1>:
 80060fc:	b430      	push	{r4, r5}
 80060fe:	68dd      	ldr	r5, [r3, #12]
 8006100:	695c      	ldr	r4, [r3, #20]
 8006102:	68ed      	ldr	r5, [r5, #12]
 8006104:	68e4      	ldr	r4, [r4, #12]
 8006106:	fb04 f405 	mul.w	r4, r4, r5
 800610a:	6084      	str	r4, [r0, #8]
 800610c:	8809      	ldrh	r1, [r1, #0]
 800610e:	fb04 f401 	mul.w	r4, r4, r1
 8006112:	60c4      	str	r4, [r0, #12]
 8006114:	6811      	ldr	r1, [r2, #0]
 8006116:	6041      	str	r1, [r0, #4]
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	4414      	add	r4, r2
 800611c:	6004      	str	r4, [r0, #0]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	6814      	ldr	r4, [r2, #0]
 8006122:	00a4      	lsls	r4, r4, #2
 8006124:	d407      	bmi.n	8006136 <_platform_network_state_setup.isra.1+0x3a>
 8006126:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800612a:	1b64      	subs	r4, r4, r5
 800612c:	4421      	add	r1, r4
 800612e:	6091      	str	r1, [r2, #8]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	6842      	ldr	r2, [r0, #4]
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	bc30      	pop	{r4, r5}
 8006138:	4770      	bx	lr
	...

0800613c <ai_platform_runtime_get_revision>:
 800613c:	490a      	ldr	r1, [pc, #40]	; (8006168 <ai_platform_runtime_get_revision+0x2c>)
 800613e:	4a0b      	ldr	r2, [pc, #44]	; (800616c <ai_platform_runtime_get_revision+0x30>)
 8006140:	680b      	ldr	r3, [r1, #0]
 8006142:	2001      	movs	r0, #1
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	600b      	str	r3, [r1, #0]
 800614a:	4613      	mov	r3, r2
 800614c:	6010      	str	r0, [r2, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	2a00      	cmp	r2, #0
 8006152:	d1fc      	bne.n	800614e <ai_platform_runtime_get_revision+0x12>
 8006154:	4b06      	ldr	r3, [pc, #24]	; (8006170 <ai_platform_runtime_get_revision+0x34>)
 8006156:	4a07      	ldr	r2, [pc, #28]	; (8006174 <ai_platform_runtime_get_revision+0x38>)
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <ai_platform_runtime_get_revision+0x3c>)
 800615e:	429a      	cmp	r2, r3
 8006160:	d000      	beq.n	8006164 <ai_platform_runtime_get_revision+0x28>
 8006162:	e7fe      	b.n	8006162 <ai_platform_runtime_get_revision+0x26>
 8006164:	4805      	ldr	r0, [pc, #20]	; (800617c <ai_platform_runtime_get_revision+0x40>)
 8006166:	4770      	bx	lr
 8006168:	e0002000 	.word	0xe0002000
 800616c:	40023008 	.word	0x40023008
 8006170:	40023000 	.word	0x40023000
 8006174:	f407a5c2 	.word	0xf407a5c2
 8006178:	b5e8b5cd 	.word	0xb5e8b5cd
 800617c:	08066580 	.word	0x08066580

08006180 <ai_platform_runtime_get_version>:
 8006180:	490b      	ldr	r1, [pc, #44]	; (80061b0 <ai_platform_runtime_get_version+0x30>)
 8006182:	4a0c      	ldr	r2, [pc, #48]	; (80061b4 <ai_platform_runtime_get_version+0x34>)
 8006184:	680b      	ldr	r3, [r1, #0]
 8006186:	2001      	movs	r0, #1
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	600b      	str	r3, [r1, #0]
 800618e:	b082      	sub	sp, #8
 8006190:	4613      	mov	r3, r2
 8006192:	6010      	str	r0, [r2, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	2a00      	cmp	r2, #0
 8006198:	d1fc      	bne.n	8006194 <ai_platform_runtime_get_version+0x14>
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <ai_platform_runtime_get_version+0x38>)
 800619c:	4a07      	ldr	r2, [pc, #28]	; (80061bc <ai_platform_runtime_get_version+0x3c>)
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <ai_platform_runtime_get_version+0x40>)
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d000      	beq.n	80061aa <ai_platform_runtime_get_version+0x2a>
 80061a8:	e7fe      	b.n	80061a8 <ai_platform_runtime_get_version+0x28>
 80061aa:	2006      	movs	r0, #6
 80061ac:	b002      	add	sp, #8
 80061ae:	4770      	bx	lr
 80061b0:	e0002000 	.word	0xe0002000
 80061b4:	40023008 	.word	0x40023008
 80061b8:	40023000 	.word	0x40023000
 80061bc:	f407a5c2 	.word	0xf407a5c2
 80061c0:	b5e8b5cd 	.word	0xb5e8b5cd

080061c4 <ai_platform_api_get_version>:
 80061c4:	4913      	ldr	r1, [pc, #76]	; (8006214 <ai_platform_api_get_version+0x50>)
 80061c6:	4a14      	ldr	r2, [pc, #80]	; (8006218 <ai_platform_api_get_version+0x54>)
 80061c8:	680b      	ldr	r3, [r1, #0]
 80061ca:	2001      	movs	r0, #1
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	600b      	str	r3, [r1, #0]
 80061d2:	b082      	sub	sp, #8
 80061d4:	4613      	mov	r3, r2
 80061d6:	6010      	str	r0, [r2, #0]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	2800      	cmp	r0, #0
 80061dc:	d1fc      	bne.n	80061d8 <ai_platform_api_get_version+0x14>
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <ai_platform_api_get_version+0x58>)
 80061e0:	4a0f      	ldr	r2, [pc, #60]	; (8006220 <ai_platform_api_get_version+0x5c>)
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <ai_platform_api_get_version+0x60>)
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d000      	beq.n	80061ee <ai_platform_api_get_version+0x2a>
 80061ec:	e7fe      	b.n	80061ec <ai_platform_api_get_version+0x28>
 80061ee:	4b0e      	ldr	r3, [pc, #56]	; (8006228 <ai_platform_api_get_version+0x64>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	f362 0007 	bfi	r0, r2, #0, #8
 80061f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80061fc:	f362 200f 	bfi	r0, r2, #8, #8
 8006200:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006204:	f362 4017 	bfi	r0, r2, #16, #8
 8006208:	0e1b      	lsrs	r3, r3, #24
 800620a:	f363 601f 	bfi	r0, r3, #24, #8
 800620e:	b002      	add	sp, #8
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	e0002000 	.word	0xe0002000
 8006218:	40023008 	.word	0x40023008
 800621c:	40023000 	.word	0x40023000
 8006220:	f407a5c2 	.word	0xf407a5c2
 8006224:	b5e8b5cd 	.word	0xb5e8b5cd
 8006228:	08066584 	.word	0x08066584

0800622c <ai_platform_interface_api_get_version>:
 800622c:	4913      	ldr	r1, [pc, #76]	; (800627c <ai_platform_interface_api_get_version+0x50>)
 800622e:	4a14      	ldr	r2, [pc, #80]	; (8006280 <ai_platform_interface_api_get_version+0x54>)
 8006230:	680b      	ldr	r3, [r1, #0]
 8006232:	2001      	movs	r0, #1
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	600b      	str	r3, [r1, #0]
 800623a:	b082      	sub	sp, #8
 800623c:	4613      	mov	r3, r2
 800623e:	6010      	str	r0, [r2, #0]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	2800      	cmp	r0, #0
 8006244:	d1fc      	bne.n	8006240 <ai_platform_interface_api_get_version+0x14>
 8006246:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <ai_platform_interface_api_get_version+0x58>)
 8006248:	4a0f      	ldr	r2, [pc, #60]	; (8006288 <ai_platform_interface_api_get_version+0x5c>)
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b0f      	ldr	r3, [pc, #60]	; (800628c <ai_platform_interface_api_get_version+0x60>)
 8006250:	429a      	cmp	r2, r3
 8006252:	d000      	beq.n	8006256 <ai_platform_interface_api_get_version+0x2a>
 8006254:	e7fe      	b.n	8006254 <ai_platform_interface_api_get_version+0x28>
 8006256:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <ai_platform_interface_api_get_version+0x64>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	f362 0007 	bfi	r0, r2, #0, #8
 8006260:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006264:	f362 200f 	bfi	r0, r2, #8, #8
 8006268:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800626c:	f362 4017 	bfi	r0, r2, #16, #8
 8006270:	0e1b      	lsrs	r3, r3, #24
 8006272:	f363 601f 	bfi	r0, r3, #24, #8
 8006276:	b002      	add	sp, #8
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	e0002000 	.word	0xe0002000
 8006280:	40023008 	.word	0x40023008
 8006284:	40023000 	.word	0x40023000
 8006288:	f407a5c2 	.word	0xf407a5c2
 800628c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006290:	08066588 	.word	0x08066588

08006294 <ai_platform_context_acquire>:
 8006294:	b410      	push	{r4}
 8006296:	b120      	cbz	r0, 80062a2 <ai_platform_context_acquire+0xe>
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <ai_platform_context_acquire+0x3c>)
 800629a:	6802      	ldr	r2, [r0, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	bf18      	it	ne
 80062a0:	2000      	movne	r0, #0
 80062a2:	490c      	ldr	r1, [pc, #48]	; (80062d4 <ai_platform_context_acquire+0x40>)
 80062a4:	4a0c      	ldr	r2, [pc, #48]	; (80062d8 <ai_platform_context_acquire+0x44>)
 80062a6:	680b      	ldr	r3, [r1, #0]
 80062a8:	2401      	movs	r4, #1
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	600b      	str	r3, [r1, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	6014      	str	r4, [r2, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	d1fc      	bne.n	80062b4 <ai_platform_context_acquire+0x20>
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <ai_platform_context_acquire+0x48>)
 80062bc:	4a08      	ldr	r2, [pc, #32]	; (80062e0 <ai_platform_context_acquire+0x4c>)
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <ai_platform_context_acquire+0x50>)
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d000      	beq.n	80062ca <ai_platform_context_acquire+0x36>
 80062c8:	e7fe      	b.n	80062c8 <ai_platform_context_acquire+0x34>
 80062ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	a1c00100 	.word	0xa1c00100
 80062d4:	e0002000 	.word	0xe0002000
 80062d8:	40023008 	.word	0x40023008
 80062dc:	40023000 	.word	0x40023000
 80062e0:	f407a5c2 	.word	0xf407a5c2
 80062e4:	b5e8b5cd 	.word	0xb5e8b5cd

080062e8 <ai_platform_network_get_error>:
 80062e8:	b410      	push	{r4}
 80062ea:	b120      	cbz	r0, 80062f6 <ai_platform_network_get_error+0xe>
 80062ec:	4b11      	ldr	r3, [pc, #68]	; (8006334 <ai_platform_network_get_error+0x4c>)
 80062ee:	6802      	ldr	r2, [r0, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	bf18      	it	ne
 80062f4:	2000      	movne	r0, #0
 80062f6:	4910      	ldr	r1, [pc, #64]	; (8006338 <ai_platform_network_get_error+0x50>)
 80062f8:	4a10      	ldr	r2, [pc, #64]	; (800633c <ai_platform_network_get_error+0x54>)
 80062fa:	680b      	ldr	r3, [r1, #0]
 80062fc:	2401      	movs	r4, #1
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	600b      	str	r3, [r1, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	6014      	str	r4, [r2, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	2a00      	cmp	r2, #0
 800630c:	d1fc      	bne.n	8006308 <ai_platform_network_get_error+0x20>
 800630e:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <ai_platform_network_get_error+0x58>)
 8006310:	4a0c      	ldr	r2, [pc, #48]	; (8006344 <ai_platform_network_get_error+0x5c>)
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <ai_platform_network_get_error+0x60>)
 8006318:	429a      	cmp	r2, r3
 800631a:	d000      	beq.n	800631e <ai_platform_network_get_error+0x36>
 800631c:	e7fe      	b.n	800631c <ai_platform_network_get_error+0x34>
 800631e:	b120      	cbz	r0, 800632a <ai_platform_network_get_error+0x42>
 8006320:	3010      	adds	r0, #16
 8006322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006326:	f000 bc75 	b.w	8006c14 <core_get_error>
 800632a:	f241 0010 	movw	r0, #4112	; 0x1010
 800632e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	a1c00100 	.word	0xa1c00100
 8006338:	e0002000 	.word	0xe0002000
 800633c:	40023008 	.word	0x40023008
 8006340:	40023000 	.word	0x40023000
 8006344:	f407a5c2 	.word	0xf407a5c2
 8006348:	b5e8b5cd 	.word	0xb5e8b5cd

0800634c <ai_platform_api_get_network_report>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	460c      	mov	r4, r1
 8006350:	4605      	mov	r5, r0
 8006352:	b120      	cbz	r0, 800635e <ai_platform_api_get_network_report+0x12>
 8006354:	4b71      	ldr	r3, [pc, #452]	; (800651c <ai_platform_api_get_network_report+0x1d0>)
 8006356:	6802      	ldr	r2, [r0, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	bf18      	it	ne
 800635c:	2500      	movne	r5, #0
 800635e:	4970      	ldr	r1, [pc, #448]	; (8006520 <ai_platform_api_get_network_report+0x1d4>)
 8006360:	4a70      	ldr	r2, [pc, #448]	; (8006524 <ai_platform_api_get_network_report+0x1d8>)
 8006362:	680b      	ldr	r3, [r1, #0]
 8006364:	2001      	movs	r0, #1
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	600b      	str	r3, [r1, #0]
 800636c:	4611      	mov	r1, r2
 800636e:	6010      	str	r0, [r2, #0]
 8006370:	680b      	ldr	r3, [r1, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1fc      	bne.n	8006370 <ai_platform_api_get_network_report+0x24>
 8006376:	4a6c      	ldr	r2, [pc, #432]	; (8006528 <ai_platform_api_get_network_report+0x1dc>)
 8006378:	496c      	ldr	r1, [pc, #432]	; (800652c <ai_platform_api_get_network_report+0x1e0>)
 800637a:	6011      	str	r1, [r2, #0]
 800637c:	6811      	ldr	r1, [r2, #0]
 800637e:	4a6c      	ldr	r2, [pc, #432]	; (8006530 <ai_platform_api_get_network_report+0x1e4>)
 8006380:	4291      	cmp	r1, r2
 8006382:	d000      	beq.n	8006386 <ai_platform_api_get_network_report+0x3a>
 8006384:	e7fe      	b.n	8006384 <ai_platform_api_get_network_report+0x38>
 8006386:	2d00      	cmp	r5, #0
 8006388:	d062      	beq.n	8006450 <ai_platform_api_get_network_report+0x104>
 800638a:	2c00      	cmp	r4, #0
 800638c:	d062      	beq.n	8006454 <ai_platform_api_get_network_report+0x108>
 800638e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006390:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006392:	2a00      	cmp	r2, #0
 8006394:	d056      	beq.n	8006444 <ai_platform_api_get_network_report+0xf8>
 8006396:	2301      	movs	r3, #1
 8006398:	66e3      	str	r3, [r4, #108]	; 0x6c
 800639a:	6913      	ldr	r3, [r2, #16]
 800639c:	429a      	cmp	r2, r3
 800639e:	d00c      	beq.n	80063ba <ai_platform_api_get_network_report+0x6e>
 80063a0:	b15b      	cbz	r3, 80063ba <ai_platform_api_get_network_report+0x6e>
 80063a2:	2202      	movs	r2, #2
 80063a4:	e003      	b.n	80063ae <ai_platform_api_get_network_report+0x62>
 80063a6:	1c50      	adds	r0, r2, #1
 80063a8:	460b      	mov	r3, r1
 80063aa:	b121      	cbz	r1, 80063b6 <ai_platform_api_get_network_report+0x6a>
 80063ac:	4602      	mov	r2, r0
 80063ae:	66e2      	str	r2, [r4, #108]	; 0x6c
 80063b0:	6919      	ldr	r1, [r3, #16]
 80063b2:	4299      	cmp	r1, r3
 80063b4:	d1f7      	bne.n	80063a6 <ai_platform_api_get_network_report+0x5a>
 80063b6:	2a00      	cmp	r2, #0
 80063b8:	d044      	beq.n	8006444 <ai_platform_api_get_network_report+0xf8>
 80063ba:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 80063be:	b100      	cbz	r0, 80063c2 <ai_platform_api_get_network_report+0x76>
 80063c0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80063c2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80063c6:	f7ff fe4b 	bl	8006060 <_ai_platform_get_io_buffers_info>
 80063ca:	4606      	mov	r6, r0
 80063cc:	8620      	strh	r0, [r4, #48]	; 0x30
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d05f      	beq.n	8006492 <ai_platform_api_get_network_report+0x146>
 80063d2:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	bf8a      	itet	hi
 80063da:	6ce8      	ldrhi	r0, [r5, #76]	; 0x4c
 80063dc:	2000      	movls	r0, #0
 80063de:	300c      	addhi	r0, #12
 80063e0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80063e4:	f7ff fe3c 	bl	8006060 <_ai_platform_get_io_buffers_info>
 80063e8:	4606      	mov	r6, r0
 80063ea:	8660      	strh	r0, [r4, #50]	; 0x32
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d048      	beq.n	8006482 <ai_platform_api_get_network_report+0x136>
 80063f0:	686b      	ldr	r3, [r5, #4]
 80063f2:	6723      	str	r3, [r4, #112]	; 0x70
 80063f4:	f105 0730 	add.w	r7, r5, #48	; 0x30
 80063f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80063fa:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80063fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006400:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006404:	e886 0003 	stmia.w	r6, {r0, r1}
 8006408:	f105 0718 	add.w	r7, r5, #24
 800640c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800640e:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8006412:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006414:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006418:	e886 0003 	stmia.w	r6, {r0, r1}
 800641c:	4a40      	ldr	r2, [pc, #256]	; (8006520 <ai_platform_api_get_network_report+0x1d4>)
 800641e:	4941      	ldr	r1, [pc, #260]	; (8006524 <ai_platform_api_get_network_report+0x1d8>)
 8006420:	6813      	ldr	r3, [r2, #0]
 8006422:	2001      	movs	r0, #1
 8006424:	f023 0301 	bic.w	r3, r3, #1
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	460a      	mov	r2, r1
 800642c:	6008      	str	r0, [r1, #0]
 800642e:	6813      	ldr	r3, [r2, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1fc      	bne.n	800642e <ai_platform_api_get_network_report+0xe2>
 8006434:	4b3c      	ldr	r3, [pc, #240]	; (8006528 <ai_platform_api_get_network_report+0x1dc>)
 8006436:	493d      	ldr	r1, [pc, #244]	; (800652c <ai_platform_api_get_network_report+0x1e0>)
 8006438:	6019      	str	r1, [r3, #0]
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	4b3c      	ldr	r3, [pc, #240]	; (8006530 <ai_platform_api_get_network_report+0x1e4>)
 800643e:	4299      	cmp	r1, r3
 8006440:	d00a      	beq.n	8006458 <ai_platform_api_get_network_report+0x10c>
 8006442:	e7fe      	b.n	8006442 <ai_platform_api_get_network_report+0xf6>
 8006444:	f105 0010 	add.w	r0, r5, #16
 8006448:	2218      	movs	r2, #24
 800644a:	2111      	movs	r1, #17
 800644c:	f000 fbe8 	bl	8006c20 <core_set_error>
 8006450:	2000      	movs	r0, #0
 8006452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006454:	4620      	mov	r0, r4
 8006456:	e7fc      	b.n	8006452 <ai_platform_api_get_network_report+0x106>
 8006458:	4b36      	ldr	r3, [pc, #216]	; (8006534 <ai_platform_api_get_network_report+0x1e8>)
 800645a:	4831      	ldr	r0, [pc, #196]	; (8006520 <ai_platform_api_get_network_report+0x1d4>)
 800645c:	6123      	str	r3, [r4, #16]
 800645e:	6803      	ldr	r3, [r0, #0]
 8006460:	4930      	ldr	r1, [pc, #192]	; (8006524 <ai_platform_api_get_network_report+0x1d8>)
 8006462:	f023 0301 	bic.w	r3, r3, #1
 8006466:	6003      	str	r3, [r0, #0]
 8006468:	2301      	movs	r3, #1
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	680b      	ldr	r3, [r1, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1fc      	bne.n	800646c <ai_platform_api_get_network_report+0x120>
 8006472:	4b2d      	ldr	r3, [pc, #180]	; (8006528 <ai_platform_api_get_network_report+0x1dc>)
 8006474:	4a2d      	ldr	r2, [pc, #180]	; (800652c <ai_platform_api_get_network_report+0x1e0>)
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b2d      	ldr	r3, [pc, #180]	; (8006530 <ai_platform_api_get_network_report+0x1e4>)
 800647c:	429a      	cmp	r2, r3
 800647e:	d010      	beq.n	80064a2 <ai_platform_api_get_network_report+0x156>
 8006480:	e7fe      	b.n	8006480 <ai_platform_api_get_network_report+0x134>
 8006482:	f105 0010 	add.w	r0, r5, #16
 8006486:	2218      	movs	r2, #24
 8006488:	2113      	movs	r1, #19
 800648a:	f000 fbc9 	bl	8006c20 <core_set_error>
 800648e:	4630      	mov	r0, r6
 8006490:	e7df      	b.n	8006452 <ai_platform_api_get_network_report+0x106>
 8006492:	f105 0010 	add.w	r0, r5, #16
 8006496:	2218      	movs	r2, #24
 8006498:	2112      	movs	r1, #18
 800649a:	f000 fbc1 	bl	8006c20 <core_set_error>
 800649e:	4630      	mov	r0, r6
 80064a0:	e7d7      	b.n	8006452 <ai_platform_api_get_network_report+0x106>
 80064a2:	2306      	movs	r3, #6
 80064a4:	481e      	ldr	r0, [pc, #120]	; (8006520 <ai_platform_api_get_network_report+0x1d4>)
 80064a6:	6163      	str	r3, [r4, #20]
 80064a8:	6803      	ldr	r3, [r0, #0]
 80064aa:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <ai_platform_api_get_network_report+0x1d8>)
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	6003      	str	r3, [r0, #0]
 80064b2:	2301      	movs	r3, #1
 80064b4:	600b      	str	r3, [r1, #0]
 80064b6:	6813      	ldr	r3, [r2, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1fc      	bne.n	80064b6 <ai_platform_api_get_network_report+0x16a>
 80064bc:	4b1a      	ldr	r3, [pc, #104]	; (8006528 <ai_platform_api_get_network_report+0x1dc>)
 80064be:	491b      	ldr	r1, [pc, #108]	; (800652c <ai_platform_api_get_network_report+0x1e0>)
 80064c0:	6019      	str	r1, [r3, #0]
 80064c2:	6819      	ldr	r1, [r3, #0]
 80064c4:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <ai_platform_api_get_network_report+0x1e4>)
 80064c6:	4299      	cmp	r1, r3
 80064c8:	d000      	beq.n	80064cc <ai_platform_api_get_network_report+0x180>
 80064ca:	e7fe      	b.n	80064ca <ai_platform_api_get_network_report+0x17e>
 80064cc:	f240 1301 	movw	r3, #257	; 0x101
 80064d0:	4913      	ldr	r1, [pc, #76]	; (8006520 <ai_platform_api_get_network_report+0x1d4>)
 80064d2:	6263      	str	r3, [r4, #36]	; 0x24
 80064d4:	680b      	ldr	r3, [r1, #0]
 80064d6:	4813      	ldr	r0, [pc, #76]	; (8006524 <ai_platform_api_get_network_report+0x1d8>)
 80064d8:	f023 0301 	bic.w	r3, r3, #1
 80064dc:	600b      	str	r3, [r1, #0]
 80064de:	2301      	movs	r3, #1
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	6802      	ldr	r2, [r0, #0]
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	d1fc      	bne.n	80064e2 <ai_platform_api_get_network_report+0x196>
 80064e8:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <ai_platform_api_get_network_report+0x1dc>)
 80064ea:	4910      	ldr	r1, [pc, #64]	; (800652c <ai_platform_api_get_network_report+0x1e0>)
 80064ec:	6019      	str	r1, [r3, #0]
 80064ee:	6819      	ldr	r1, [r3, #0]
 80064f0:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <ai_platform_api_get_network_report+0x1e4>)
 80064f2:	4299      	cmp	r1, r3
 80064f4:	d000      	beq.n	80064f8 <ai_platform_api_get_network_report+0x1ac>
 80064f6:	e7fe      	b.n	80064f6 <ai_platform_api_get_network_report+0x1aa>
 80064f8:	f240 4301 	movw	r3, #1025	; 0x401
 80064fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80064fe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8006500:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8006504:	0e19      	lsrs	r1, r3, #24
 8006506:	0c1a      	lsrs	r2, r3, #16
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	f884 1020 	strb.w	r1, [r4, #32]
 800650e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8006512:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8006516:	2001      	movs	r0, #1
 8006518:	e79b      	b.n	8006452 <ai_platform_api_get_network_report+0x106>
 800651a:	bf00      	nop
 800651c:	a1c00100 	.word	0xa1c00100
 8006520:	e0002000 	.word	0xe0002000
 8006524:	40023008 	.word	0x40023008
 8006528:	40023000 	.word	0x40023000
 800652c:	f407a5c2 	.word	0xf407a5c2
 8006530:	b5e8b5cd 	.word	0xb5e8b5cd
 8006534:	08066580 	.word	0x08066580

08006538 <ai_platform_network_create>:
 8006538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800653c:	4f30      	ldr	r7, [pc, #192]	; (8006600 <ai_platform_network_create+0xc8>)
 800653e:	4e31      	ldr	r6, [pc, #196]	; (8006604 <ai_platform_network_create+0xcc>)
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	b083      	sub	sp, #12
 8006544:	f021 0101 	bic.w	r1, r1, #1
 8006548:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 800654c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8006550:	6039      	str	r1, [r7, #0]
 8006552:	2101      	movs	r1, #1
 8006554:	6031      	str	r1, [r6, #0]
 8006556:	6831      	ldr	r1, [r6, #0]
 8006558:	2900      	cmp	r1, #0
 800655a:	d1fc      	bne.n	8006556 <ai_platform_network_create+0x1e>
 800655c:	492a      	ldr	r1, [pc, #168]	; (8006608 <ai_platform_network_create+0xd0>)
 800655e:	4d2b      	ldr	r5, [pc, #172]	; (800660c <ai_platform_network_create+0xd4>)
 8006560:	600d      	str	r5, [r1, #0]
 8006562:	680d      	ldr	r5, [r1, #0]
 8006564:	492a      	ldr	r1, [pc, #168]	; (8006610 <ai_platform_network_create+0xd8>)
 8006566:	428d      	cmp	r5, r1
 8006568:	d000      	beq.n	800656c <ai_platform_network_create+0x34>
 800656a:	e7fe      	b.n	800656a <ai_platform_network_create+0x32>
 800656c:	b1e0      	cbz	r0, 80065a8 <ai_platform_network_create+0x70>
 800656e:	4680      	mov	r8, r0
 8006570:	461d      	mov	r5, r3
 8006572:	4b28      	ldr	r3, [pc, #160]	; (8006614 <ai_platform_network_create+0xdc>)
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	f8c8 2000 	str.w	r2, [r8]
 800657a:	4617      	mov	r7, r2
 800657c:	f000 fb48 	bl	8006c10 <core_init>
 8006580:	b1b8      	cbz	r0, 80065b2 <ai_platform_network_create+0x7a>
 8006582:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <ai_platform_network_create+0xc8>)
 8006584:	491f      	ldr	r1, [pc, #124]	; (8006604 <ai_platform_network_create+0xcc>)
 8006586:	6813      	ldr	r3, [r2, #0]
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	2301      	movs	r3, #1
 8006590:	6033      	str	r3, [r6, #0]
 8006592:	680e      	ldr	r6, [r1, #0]
 8006594:	2e00      	cmp	r6, #0
 8006596:	d1fc      	bne.n	8006592 <ai_platform_network_create+0x5a>
 8006598:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <ai_platform_network_create+0xd0>)
 800659a:	4a1c      	ldr	r2, [pc, #112]	; (800660c <ai_platform_network_create+0xd4>)
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <ai_platform_network_create+0xd8>)
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d016      	beq.n	80065d4 <ai_platform_network_create+0x9c>
 80065a6:	e7fe      	b.n	80065a6 <ai_platform_network_create+0x6e>
 80065a8:	f241 0010 	movw	r0, #4112	; 0x1010
 80065ac:	b003      	add	sp, #12
 80065ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065b2:	062d      	lsls	r5, r5, #24
 80065b4:	0424      	lsls	r4, r4, #16
 80065b6:	2130      	movs	r1, #48	; 0x30
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c8 3000 	str.w	r3, [r8]
 80065be:	2210      	movs	r2, #16
 80065c0:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 80065c4:	2000      	movs	r0, #0
 80065c6:	432b      	orrs	r3, r5
 80065c8:	f361 0007 	bfi	r0, r1, #0, #8
 80065cc:	663b      	str	r3, [r7, #96]	; 0x60
 80065ce:	f362 201f 	bfi	r0, r2, #8, #24
 80065d2:	e7eb      	b.n	80065ac <ai_platform_network_create+0x74>
 80065d4:	062d      	lsls	r5, r5, #24
 80065d6:	0424      	lsls	r4, r4, #16
 80065d8:	ea45 0304 	orr.w	r3, r5, r4
 80065dc:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80065e0:	d001      	beq.n	80065e6 <ai_platform_network_create+0xae>
 80065e2:	2101      	movs	r1, #1
 80065e4:	e7e8      	b.n	80065b8 <ai_platform_network_create+0x80>
 80065e6:	a802      	add	r0, sp, #8
 80065e8:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <ai_platform_network_create+0xe0>)
 80065ea:	f840 3d04 	str.w	r3, [r0, #-4]!
 80065ee:	f000 ffe7 	bl	80075c0 <ai_check_custom_types>
 80065f2:	b110      	cbz	r0, 80065fa <ai_platform_network_create+0xc2>
 80065f4:	4632      	mov	r2, r6
 80065f6:	4631      	mov	r1, r6
 80065f8:	e7e2      	b.n	80065c0 <ai_platform_network_create+0x88>
 80065fa:	2102      	movs	r1, #2
 80065fc:	e7dc      	b.n	80065b8 <ai_platform_network_create+0x80>
 80065fe:	bf00      	nop
 8006600:	e0002000 	.word	0xe0002000
 8006604:	40023008 	.word	0x40023008
 8006608:	40023000 	.word	0x40023000
 800660c:	f407a5c2 	.word	0xf407a5c2
 8006610:	b5e8b5cd 	.word	0xb5e8b5cd
 8006614:	a1c00100 	.word	0xa1c00100
 8006618:	84048403 	.word	0x84048403

0800661c <ai_platform_network_destroy>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	b1d8      	cbz	r0, 8006658 <ai_platform_network_destroy+0x3c>
 8006620:	4a11      	ldr	r2, [pc, #68]	; (8006668 <ai_platform_network_destroy+0x4c>)
 8006622:	6803      	ldr	r3, [r0, #0]
 8006624:	4293      	cmp	r3, r2
 8006626:	bf0c      	ite	eq
 8006628:	4603      	moveq	r3, r0
 800662a:	2300      	movne	r3, #0
 800662c:	4c0f      	ldr	r4, [pc, #60]	; (800666c <ai_platform_network_destroy+0x50>)
 800662e:	4910      	ldr	r1, [pc, #64]	; (8006670 <ai_platform_network_destroy+0x54>)
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	2501      	movs	r5, #1
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	6022      	str	r2, [r4, #0]
 800663a:	460a      	mov	r2, r1
 800663c:	600d      	str	r5, [r1, #0]
 800663e:	6814      	ldr	r4, [r2, #0]
 8006640:	2c00      	cmp	r4, #0
 8006642:	d1fc      	bne.n	800663e <ai_platform_network_destroy+0x22>
 8006644:	4a0b      	ldr	r2, [pc, #44]	; (8006674 <ai_platform_network_destroy+0x58>)
 8006646:	490c      	ldr	r1, [pc, #48]	; (8006678 <ai_platform_network_destroy+0x5c>)
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	6811      	ldr	r1, [r2, #0]
 800664c:	4a0b      	ldr	r2, [pc, #44]	; (800667c <ai_platform_network_destroy+0x60>)
 800664e:	4291      	cmp	r1, r2
 8006650:	d000      	beq.n	8006654 <ai_platform_network_destroy+0x38>
 8006652:	e7fe      	b.n	8006652 <ai_platform_network_destroy+0x36>
 8006654:	b913      	cbnz	r3, 800665c <ai_platform_network_destroy+0x40>
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	4603      	mov	r3, r0
 800665a:	e7e7      	b.n	800662c <ai_platform_network_destroy+0x10>
 800665c:	4618      	mov	r0, r3
 800665e:	f001 f853 	bl	8007708 <ai_layers_destroy_all>
 8006662:	4620      	mov	r0, r4
 8006664:	bd38      	pop	{r3, r4, r5, pc}
 8006666:	bf00      	nop
 8006668:	a1c00100 	.word	0xa1c00100
 800666c:	e0002000 	.word	0xe0002000
 8006670:	40023008 	.word	0x40023008
 8006674:	40023000 	.word	0x40023000
 8006678:	f407a5c2 	.word	0xf407a5c2
 800667c:	b5e8b5cd 	.word	0xb5e8b5cd

08006680 <ai_platform_network_init>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	460c      	mov	r4, r1
 8006684:	4605      	mov	r5, r0
 8006686:	b120      	cbz	r0, 8006692 <ai_platform_network_init+0x12>
 8006688:	4b30      	ldr	r3, [pc, #192]	; (800674c <ai_platform_network_init+0xcc>)
 800668a:	6802      	ldr	r2, [r0, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	bf18      	it	ne
 8006690:	2500      	movne	r5, #0
 8006692:	492f      	ldr	r1, [pc, #188]	; (8006750 <ai_platform_network_init+0xd0>)
 8006694:	4a2f      	ldr	r2, [pc, #188]	; (8006754 <ai_platform_network_init+0xd4>)
 8006696:	680b      	ldr	r3, [r1, #0]
 8006698:	2001      	movs	r0, #1
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	600b      	str	r3, [r1, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	6010      	str	r0, [r2, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	2a00      	cmp	r2, #0
 80066a8:	d1fc      	bne.n	80066a4 <ai_platform_network_init+0x24>
 80066aa:	4b2b      	ldr	r3, [pc, #172]	; (8006758 <ai_platform_network_init+0xd8>)
 80066ac:	4a2b      	ldr	r2, [pc, #172]	; (800675c <ai_platform_network_init+0xdc>)
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b2b      	ldr	r3, [pc, #172]	; (8006760 <ai_platform_network_init+0xe0>)
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d000      	beq.n	80066ba <ai_platform_network_init+0x3a>
 80066b8:	e7fe      	b.n	80066b8 <ai_platform_network_init+0x38>
 80066ba:	b1dd      	cbz	r5, 80066f4 <ai_platform_network_init+0x74>
 80066bc:	b1e4      	cbz	r4, 80066f8 <ai_platform_network_init+0x78>
 80066be:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80066c0:	6926      	ldr	r6, [r4, #16]
 80066c2:	b30f      	cbz	r7, 8006708 <ai_platform_network_init+0x88>
 80066c4:	b38e      	cbz	r6, 800672a <ai_platform_network_init+0xaa>
 80066c6:	4627      	mov	r7, r4
 80066c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80066ca:	f105 0618 	add.w	r6, r5, #24
 80066ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80066d0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80066d4:	e886 0003 	stmia.w	r6, {r0, r1}
 80066d8:	3418      	adds	r4, #24
 80066da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066dc:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80066e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80066e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066e6:	2303      	movs	r3, #3
 80066e8:	e886 0003 	stmia.w	r6, {r0, r1}
 80066ec:	60eb      	str	r3, [r5, #12]
 80066ee:	4628      	mov	r0, r5
 80066f0:	f000 ff90 	bl	8007614 <ai_layers_init_all>
 80066f4:	4628      	mov	r0, r5
 80066f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066f8:	f105 0010 	add.w	r0, r5, #16
 80066fc:	2211      	movs	r2, #17
 80066fe:	2110      	movs	r1, #16
 8006700:	4625      	mov	r5, r4
 8006702:	f000 fa8d 	bl	8006c20 <core_set_error>
 8006706:	e7f5      	b.n	80066f4 <ai_platform_network_init+0x74>
 8006708:	8c21      	ldrh	r1, [r4, #32]
 800670a:	8be2      	ldrh	r2, [r4, #30]
 800670c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800670e:	fb02 f201 	mul.w	r2, r2, r1
 8006712:	fb03 f302 	mul.w	r3, r3, r2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0d4      	beq.n	80066c4 <ai_platform_network_init+0x44>
 800671a:	f105 0010 	add.w	r0, r5, #16
 800671e:	2213      	movs	r2, #19
 8006720:	2110      	movs	r1, #16
 8006722:	463d      	mov	r5, r7
 8006724:	f000 fa7c 	bl	8006c20 <core_set_error>
 8006728:	e7e4      	b.n	80066f4 <ai_platform_network_init+0x74>
 800672a:	8921      	ldrh	r1, [r4, #8]
 800672c:	88e2      	ldrh	r2, [r4, #6]
 800672e:	68e3      	ldr	r3, [r4, #12]
 8006730:	fb02 f201 	mul.w	r2, r2, r1
 8006734:	fb03 f302 	mul.w	r3, r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0c4      	beq.n	80066c6 <ai_platform_network_init+0x46>
 800673c:	f105 0010 	add.w	r0, r5, #16
 8006740:	2212      	movs	r2, #18
 8006742:	2110      	movs	r1, #16
 8006744:	4635      	mov	r5, r6
 8006746:	f000 fa6b 	bl	8006c20 <core_set_error>
 800674a:	e7d3      	b.n	80066f4 <ai_platform_network_init+0x74>
 800674c:	a1c00100 	.word	0xa1c00100
 8006750:	e0002000 	.word	0xe0002000
 8006754:	40023008 	.word	0x40023008
 8006758:	40023000 	.word	0x40023000
 800675c:	f407a5c2 	.word	0xf407a5c2
 8006760:	b5e8b5cd 	.word	0xb5e8b5cd

08006764 <ai_platform_network_post_init>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4604      	mov	r4, r0
 8006768:	b120      	cbz	r0, 8006774 <ai_platform_network_post_init+0x10>
 800676a:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <ai_platform_network_post_init+0x80>)
 800676c:	6802      	ldr	r2, [r0, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	bf18      	it	ne
 8006772:	2400      	movne	r4, #0
 8006774:	491c      	ldr	r1, [pc, #112]	; (80067e8 <ai_platform_network_post_init+0x84>)
 8006776:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <ai_platform_network_post_init+0x88>)
 8006778:	680b      	ldr	r3, [r1, #0]
 800677a:	2001      	movs	r0, #1
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	600b      	str	r3, [r1, #0]
 8006782:	4613      	mov	r3, r2
 8006784:	6010      	str	r0, [r2, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	2a00      	cmp	r2, #0
 800678a:	d1fc      	bne.n	8006786 <ai_platform_network_post_init+0x22>
 800678c:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <ai_platform_network_post_init+0x8c>)
 800678e:	4a19      	ldr	r2, [pc, #100]	; (80067f4 <ai_platform_network_post_init+0x90>)
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <ai_platform_network_post_init+0x94>)
 8006796:	429a      	cmp	r2, r3
 8006798:	d000      	beq.n	800679c <ai_platform_network_post_init+0x38>
 800679a:	e7fe      	b.n	800679a <ai_platform_network_post_init+0x36>
 800679c:	b1bc      	cbz	r4, 80067ce <ai_platform_network_post_init+0x6a>
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	f013 0502 	ands.w	r5, r3, #2
 80067a4:	d015      	beq.n	80067d2 <ai_platform_network_post_init+0x6e>
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 ff48 	bl	800763c <ai_layers_post_init_all>
 80067ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ae:	b163      	cbz	r3, 80067ca <ai_platform_network_post_init+0x66>
 80067b0:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80067b2:	b91d      	cbnz	r5, 80067bc <ai_platform_network_post_init+0x58>
 80067b4:	e009      	b.n	80067ca <ai_platform_network_post_init+0x66>
 80067b6:	461d      	mov	r5, r3
 80067b8:	b13b      	cbz	r3, 80067ca <ai_platform_network_post_init+0x66>
 80067ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067bc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80067be:	4629      	mov	r1, r5
 80067c0:	2000      	movs	r0, #0
 80067c2:	4798      	blx	r3
 80067c4:	692b      	ldr	r3, [r5, #16]
 80067c6:	42ab      	cmp	r3, r5
 80067c8:	d1f5      	bne.n	80067b6 <ai_platform_network_post_init+0x52>
 80067ca:	2001      	movs	r0, #1
 80067cc:	bd38      	pop	{r3, r4, r5, pc}
 80067ce:	4620      	mov	r0, r4
 80067d0:	bd38      	pop	{r3, r4, r5, pc}
 80067d2:	f104 0010 	add.w	r0, r4, #16
 80067d6:	2210      	movs	r2, #16
 80067d8:	2111      	movs	r1, #17
 80067da:	f000 fa21 	bl	8006c20 <core_set_error>
 80067de:	4628      	mov	r0, r5
 80067e0:	bd38      	pop	{r3, r4, r5, pc}
 80067e2:	bf00      	nop
 80067e4:	a1c00100 	.word	0xa1c00100
 80067e8:	e0002000 	.word	0xe0002000
 80067ec:	40023008 	.word	0x40023008
 80067f0:	40023000 	.word	0x40023000
 80067f4:	f407a5c2 	.word	0xf407a5c2
 80067f8:	b5e8b5cd 	.word	0xb5e8b5cd

080067fc <ai_platform_network_process>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	b083      	sub	sp, #12
 8006802:	4604      	mov	r4, r0
 8006804:	9201      	str	r2, [sp, #4]
 8006806:	b120      	cbz	r0, 8006812 <ai_platform_network_process+0x16>
 8006808:	4ba5      	ldr	r3, [pc, #660]	; (8006aa0 <ai_platform_network_process+0x2a4>)
 800680a:	6802      	ldr	r2, [r0, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	bf18      	it	ne
 8006810:	2400      	movne	r4, #0
 8006812:	48a4      	ldr	r0, [pc, #656]	; (8006aa4 <ai_platform_network_process+0x2a8>)
 8006814:	4ba4      	ldr	r3, [pc, #656]	; (8006aa8 <ai_platform_network_process+0x2ac>)
 8006816:	6802      	ldr	r2, [r0, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	6002      	str	r2, [r0, #0]
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	2a00      	cmp	r2, #0
 8006826:	d1fc      	bne.n	8006822 <ai_platform_network_process+0x26>
 8006828:	4ba0      	ldr	r3, [pc, #640]	; (8006aac <ai_platform_network_process+0x2b0>)
 800682a:	4aa1      	ldr	r2, [pc, #644]	; (8006ab0 <ai_platform_network_process+0x2b4>)
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	4ba0      	ldr	r3, [pc, #640]	; (8006ab4 <ai_platform_network_process+0x2b8>)
 8006832:	429a      	cmp	r2, r3
 8006834:	d000      	beq.n	8006838 <ai_platform_network_process+0x3c>
 8006836:	e7fe      	b.n	8006836 <ai_platform_network_process+0x3a>
 8006838:	2c00      	cmp	r4, #0
 800683a:	d066      	beq.n	800690a <ai_platform_network_process+0x10e>
 800683c:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8006840:	b107      	cbz	r7, 8006844 <ai_platform_network_process+0x48>
 8006842:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8006844:	68e3      	ldr	r3, [r4, #12]
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	2600      	movs	r6, #0
 800684c:	2b03      	cmp	r3, #3
 800684e:	6166      	str	r6, [r4, #20]
 8006850:	f040 80fe 	bne.w	8006a50 <ai_platform_network_process+0x254>
 8006854:	2900      	cmp	r1, #0
 8006856:	d07f      	beq.n	8006958 <ai_platform_network_process+0x15c>
 8006858:	2f00      	cmp	r7, #0
 800685a:	d07d      	beq.n	8006958 <ai_platform_network_process+0x15c>
 800685c:	883b      	ldrh	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d07a      	beq.n	8006958 <ai_platform_network_process+0x15c>
 8006862:	460d      	mov	r5, r1
 8006864:	46a0      	mov	r8, r4
 8006866:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800686a:	429e      	cmp	r6, r3
 800686c:	d27d      	bcs.n	800696a <ai_platform_network_process+0x16e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d07a      	beq.n	800696a <ai_platform_network_process+0x16e>
 8006874:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8006878:	2c00      	cmp	r4, #0
 800687a:	d076      	beq.n	800696a <ai_platform_network_process+0x16e>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8006884:	d067      	beq.n	8006956 <ai_platform_network_process+0x15a>
 8006886:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800688a:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800688e:	69a0      	ldr	r0, [r4, #24]
 8006890:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8006894:	6841      	ldr	r1, [r0, #4]
 8006896:	fb0b f30e 	mul.w	r3, fp, lr
 800689a:	fb0c f303 	mul.w	r3, ip, r3
 800689e:	4299      	cmp	r1, r3
 80068a0:	d350      	bcc.n	8006944 <ai_platform_network_process+0x148>
 80068a2:	68e3      	ldr	r3, [r4, #12]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	455a      	cmp	r2, fp
 80068a8:	d14c      	bne.n	8006944 <ai_platform_network_process+0x148>
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	4572      	cmp	r2, lr
 80068ae:	d149      	bne.n	8006944 <ai_platform_network_process+0x148>
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	459c      	cmp	ip, r3
 80068b4:	d146      	bne.n	8006944 <ai_platform_network_process+0x148>
 80068b6:	6800      	ldr	r0, [r0, #0]
 80068b8:	f000 ff8a 	bl	80077d0 <ai_array_get_byte_size>
 80068bc:	68e2      	ldr	r2, [r4, #12]
 80068be:	6963      	ldr	r3, [r4, #20]
 80068c0:	68d2      	ldr	r2, [r2, #12]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	fb03 f302 	mul.w	r3, r3, r2
 80068c8:	4298      	cmp	r0, r3
 80068ca:	d33b      	bcc.n	8006944 <ai_platform_network_process+0x148>
 80068cc:	69a3      	ldr	r3, [r4, #24]
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	f000 ff32 	bl	8007738 <ai_array_to_buffer_fmt>
 80068d4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80068d8:	4043      	eors	r3, r0
 80068da:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80068de:	d128      	bne.n	8006932 <ai_platform_network_process+0x136>
 80068e0:	68eb      	ldr	r3, [r5, #12]
 80068e2:	b1f3      	cbz	r3, 8006922 <ai_platform_network_process+0x126>
 80068e4:	f8b5 b000 	ldrh.w	fp, [r5]
 80068e8:	f1bb 0f00 	cmp.w	fp, #0
 80068ec:	d012      	beq.n	8006914 <ai_platform_network_process+0x118>
 80068ee:	4623      	mov	r3, r4
 80068f0:	f105 020c 	add.w	r2, r5, #12
 80068f4:	4629      	mov	r1, r5
 80068f6:	4650      	mov	r0, sl
 80068f8:	f7ff fc00 	bl	80060fc <_platform_network_state_setup.isra.1>
 80068fc:	45d9      	cmp	r9, fp
 80068fe:	883b      	ldrh	r3, [r7, #0]
 8006900:	bf38      	it	cc
 8006902:	46d9      	movcc	r9, fp
 8006904:	3601      	adds	r6, #1
 8006906:	3518      	adds	r5, #24
 8006908:	e7af      	b.n	800686a <ai_platform_network_process+0x6e>
 800690a:	46a3      	mov	fp, r4
 800690c:	4658      	mov	r0, fp
 800690e:	b003      	add	sp, #12
 8006910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006914:	f108 0010 	add.w	r0, r8, #16
 8006918:	2221      	movs	r2, #33	; 0x21
 800691a:	2112      	movs	r1, #18
 800691c:	f000 f980 	bl	8006c20 <core_set_error>
 8006920:	e7f4      	b.n	800690c <ai_platform_network_process+0x110>
 8006922:	f108 0010 	add.w	r0, r8, #16
 8006926:	2217      	movs	r2, #23
 8006928:	2112      	movs	r1, #18
 800692a:	469b      	mov	fp, r3
 800692c:	f000 f978 	bl	8006c20 <core_set_error>
 8006930:	e7ec      	b.n	800690c <ai_platform_network_process+0x110>
 8006932:	f108 0010 	add.w	r0, r8, #16
 8006936:	2219      	movs	r2, #25
 8006938:	2112      	movs	r1, #18
 800693a:	f000 f971 	bl	8006c20 <core_set_error>
 800693e:	f04f 0b00 	mov.w	fp, #0
 8006942:	e7e3      	b.n	800690c <ai_platform_network_process+0x110>
 8006944:	f108 0010 	add.w	r0, r8, #16
 8006948:	2218      	movs	r2, #24
 800694a:	2112      	movs	r1, #18
 800694c:	f000 f968 	bl	8006c20 <core_set_error>
 8006950:	f04f 0b00 	mov.w	fp, #0
 8006954:	e7da      	b.n	800690c <ai_platform_network_process+0x110>
 8006956:	4644      	mov	r4, r8
 8006958:	f104 0010 	add.w	r0, r4, #16
 800695c:	2217      	movs	r2, #23
 800695e:	2112      	movs	r1, #18
 8006960:	f000 f95e 	bl	8006c20 <core_set_error>
 8006964:	f04f 0b00 	mov.w	fp, #0
 8006968:	e7d0      	b.n	800690c <ai_platform_network_process+0x110>
 800696a:	9a01      	ldr	r2, [sp, #4]
 800696c:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8006970:	4644      	mov	r4, r8
 8006972:	2a00      	cmp	r2, #0
 8006974:	f000 80a2 	beq.w	8006abc <ai_platform_network_process+0x2c0>
 8006978:	2b01      	cmp	r3, #1
 800697a:	f240 8140 	bls.w	8006bfe <ai_platform_network_process+0x402>
 800697e:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8006982:	f118 0f0c 	cmn.w	r8, #12
 8006986:	f000 813a 	beq.w	8006bfe <ai_platform_network_process+0x402>
 800698a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8135 	beq.w	8006bfe <ai_platform_network_process+0x402>
 8006994:	9d01      	ldr	r5, [sp, #4]
 8006996:	2700      	movs	r7, #0
 8006998:	3504      	adds	r5, #4
 800699a:	429f      	cmp	r7, r3
 800699c:	f080 808c 	bcs.w	8006ab8 <ai_platform_network_process+0x2bc>
 80069a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8087 	beq.w	8006ab8 <ai_platform_network_process+0x2bc>
 80069aa:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	f000 8082 	beq.w	8006ab8 <ai_platform_network_process+0x2bc>
 80069b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80069be:	d067      	beq.n	8006a90 <ai_platform_network_process+0x294>
 80069c0:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80069c4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80069c8:	69b0      	ldr	r0, [r6, #24]
 80069ca:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80069ce:	6841      	ldr	r1, [r0, #4]
 80069d0:	fb0b f30e 	mul.w	r3, fp, lr
 80069d4:	fb0c f303 	mul.w	r3, ip, r3
 80069d8:	4299      	cmp	r1, r3
 80069da:	f0c0 8110 	bcc.w	8006bfe <ai_platform_network_process+0x402>
 80069de:	68f3      	ldr	r3, [r6, #12]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	455a      	cmp	r2, fp
 80069e4:	f040 810b 	bne.w	8006bfe <ai_platform_network_process+0x402>
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	4572      	cmp	r2, lr
 80069ec:	f040 8107 	bne.w	8006bfe <ai_platform_network_process+0x402>
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	459c      	cmp	ip, r3
 80069f4:	f040 8103 	bne.w	8006bfe <ai_platform_network_process+0x402>
 80069f8:	6800      	ldr	r0, [r0, #0]
 80069fa:	f000 fee9 	bl	80077d0 <ai_array_get_byte_size>
 80069fe:	68f2      	ldr	r2, [r6, #12]
 8006a00:	6973      	ldr	r3, [r6, #20]
 8006a02:	68d2      	ldr	r2, [r2, #12]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	fb03 f302 	mul.w	r3, r3, r2
 8006a0a:	4298      	cmp	r0, r3
 8006a0c:	f0c0 80f7 	bcc.w	8006bfe <ai_platform_network_process+0x402>
 8006a10:	69b3      	ldr	r3, [r6, #24]
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	f000 fe90 	bl	8007738 <ai_array_to_buffer_fmt>
 8006a18:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8006a1c:	4043      	eors	r3, r0
 8006a1e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006a22:	d12c      	bne.n	8006a7e <ai_platform_network_process+0x282>
 8006a24:	68eb      	ldr	r3, [r5, #12]
 8006a26:	b313      	cbz	r3, 8006a6e <ai_platform_network_process+0x272>
 8006a28:	f8b5 b000 	ldrh.w	fp, [r5]
 8006a2c:	f1bb 0f00 	cmp.w	fp, #0
 8006a30:	d016      	beq.n	8006a60 <ai_platform_network_process+0x264>
 8006a32:	4633      	mov	r3, r6
 8006a34:	f105 020c 	add.w	r2, r5, #12
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	f7ff fb5e 	bl	80060fc <_platform_network_state_setup.isra.1>
 8006a40:	45d9      	cmp	r9, fp
 8006a42:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006a46:	bf38      	it	cc
 8006a48:	46d9      	movcc	r9, fp
 8006a4a:	3701      	adds	r7, #1
 8006a4c:	3518      	adds	r5, #24
 8006a4e:	e7a4      	b.n	800699a <ai_platform_network_process+0x19e>
 8006a50:	f104 0010 	add.w	r0, r4, #16
 8006a54:	2230      	movs	r2, #48	; 0x30
 8006a56:	2111      	movs	r1, #17
 8006a58:	f000 f8e2 	bl	8006c20 <core_set_error>
 8006a5c:	46b3      	mov	fp, r6
 8006a5e:	e755      	b.n	800690c <ai_platform_network_process+0x110>
 8006a60:	f104 0010 	add.w	r0, r4, #16
 8006a64:	2221      	movs	r2, #33	; 0x21
 8006a66:	2113      	movs	r1, #19
 8006a68:	f000 f8da 	bl	8006c20 <core_set_error>
 8006a6c:	e74e      	b.n	800690c <ai_platform_network_process+0x110>
 8006a6e:	f104 0010 	add.w	r0, r4, #16
 8006a72:	2217      	movs	r2, #23
 8006a74:	2113      	movs	r1, #19
 8006a76:	469b      	mov	fp, r3
 8006a78:	f000 f8d2 	bl	8006c20 <core_set_error>
 8006a7c:	e746      	b.n	800690c <ai_platform_network_process+0x110>
 8006a7e:	f104 0010 	add.w	r0, r4, #16
 8006a82:	2219      	movs	r2, #25
 8006a84:	2113      	movs	r1, #19
 8006a86:	f000 f8cb 	bl	8006c20 <core_set_error>
 8006a8a:	f04f 0b00 	mov.w	fp, #0
 8006a8e:	e73d      	b.n	800690c <ai_platform_network_process+0x110>
 8006a90:	f104 0010 	add.w	r0, r4, #16
 8006a94:	2217      	movs	r2, #23
 8006a96:	2113      	movs	r1, #19
 8006a98:	f000 f8c2 	bl	8006c20 <core_set_error>
 8006a9c:	46d3      	mov	fp, sl
 8006a9e:	e735      	b.n	800690c <ai_platform_network_process+0x110>
 8006aa0:	a1c00100 	.word	0xa1c00100
 8006aa4:	e0002000 	.word	0xe0002000
 8006aa8:	40023008 	.word	0x40023008
 8006aac:	40023000 	.word	0x40023000
 8006ab0:	f407a5c2 	.word	0xf407a5c2
 8006ab4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ab8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8006abc:	f8a4 9014 	strh.w	r9, [r4, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8099 	beq.w	8006bf8 <ai_platform_network_process+0x3fc>
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006aca:	f240 8093 	bls.w	8006bf4 <ai_platform_network_process+0x3f8>
 8006ace:	f105 070c 	add.w	r7, r5, #12
 8006ad2:	8ae0      	ldrh	r0, [r4, #22]
 8006ad4:	8aa3      	ldrh	r3, [r4, #20]
 8006ad6:	4283      	cmp	r3, r0
 8006ad8:	d977      	bls.n	8006bca <ai_platform_network_process+0x3ce>
 8006ada:	46a3      	mov	fp, r4
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	d032      	beq.n	8006b46 <ai_platform_network_process+0x34a>
 8006ae0:	882b      	ldrh	r3, [r5, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d02f      	beq.n	8006b46 <ai_platform_network_process+0x34a>
 8006ae6:	686b      	ldr	r3, [r5, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d02c      	beq.n	8006b46 <ai_platform_network_process+0x34a>
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f04f 0800 	mov.w	r8, #0
 8006af2:	b343      	cbz	r3, 8006b46 <ai_platform_network_process+0x34a>
 8006af4:	68a9      	ldr	r1, [r5, #8]
 8006af6:	699a      	ldr	r2, [r3, #24]
 8006af8:	f8d1 a000 	ldr.w	sl, [r1]
 8006afc:	6814      	ldr	r4, [r2, #0]
 8006afe:	6890      	ldr	r0, [r2, #8]
 8006b00:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8006b04:	eb0a 0609 	add.w	r6, sl, r9
 8006b08:	00a4      	lsls	r4, r4, #2
 8006b0a:	6871      	ldr	r1, [r6, #4]
 8006b0c:	d45f      	bmi.n	8006bce <ai_platform_network_process+0x3d2>
 8006b0e:	68d4      	ldr	r4, [r2, #12]
 8006b10:	1b00      	subs	r0, r0, r4
 8006b12:	4401      	add	r1, r0
 8006b14:	6091      	str	r1, [r2, #8]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	6872      	ldr	r2, [r6, #4]
 8006b1a:	60da      	str	r2, [r3, #12]
 8006b1c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8006b20:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006b24:	440b      	add	r3, r1
 8006b26:	4293      	cmp	r3, r2
 8006b28:	bf24      	itt	cs
 8006b2a:	68f3      	ldrcs	r3, [r6, #12]
 8006b2c:	1ad3      	subcs	r3, r2, r3
 8006b2e:	6073      	str	r3, [r6, #4]
 8006b30:	882b      	ldrh	r3, [r5, #0]
 8006b32:	f108 0801 	add.w	r8, r8, #1
 8006b36:	4598      	cmp	r8, r3
 8006b38:	d205      	bcs.n	8006b46 <ai_platform_network_process+0x34a>
 8006b3a:	686b      	ldr	r3, [r5, #4]
 8006b3c:	b11b      	cbz	r3, 8006b46 <ai_platform_network_process+0x34a>
 8006b3e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1d6      	bne.n	8006af4 <ai_platform_network_process+0x2f8>
 8006b46:	4658      	mov	r0, fp
 8006b48:	f000 fd90 	bl	800766c <ai_layers_forward_all>
 8006b4c:	2f00      	cmp	r7, #0
 8006b4e:	d032      	beq.n	8006bb6 <ai_platform_network_process+0x3ba>
 8006b50:	883b      	ldrh	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d02f      	beq.n	8006bb6 <ai_platform_network_process+0x3ba>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	b36b      	cbz	r3, 8006bb6 <ai_platform_network_process+0x3ba>
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	b358      	cbz	r0, 8006bb6 <ai_platform_network_process+0x3ba>
 8006b5e:	f04f 0800 	mov.w	r8, #0
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6981      	ldr	r1, [r0, #24]
 8006b66:	f8d3 a000 	ldr.w	sl, [r3]
 8006b6a:	680c      	ldr	r4, [r1, #0]
 8006b6c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8006b70:	eb0a 0609 	add.w	r6, sl, r9
 8006b74:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8006b78:	00a4      	lsls	r4, r4, #2
 8006b7a:	eb0c 0302 	add.w	r3, ip, r2
 8006b7e:	d42a      	bmi.n	8006bd6 <ai_platform_network_process+0x3da>
 8006b80:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006b84:	4293      	cmp	r3, r2
 8006b86:	bf24      	itt	cs
 8006b88:	68f3      	ldrcs	r3, [r6, #12]
 8006b8a:	1ad3      	subcs	r3, r2, r3
 8006b8c:	6073      	str	r3, [r6, #4]
 8006b8e:	6981      	ldr	r1, [r0, #24]
 8006b90:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8006b94:	1b12      	subs	r2, r2, r4
 8006b96:	4413      	add	r3, r2
 8006b98:	608b      	str	r3, [r1, #8]
 8006b9a:	6983      	ldr	r3, [r0, #24]
 8006b9c:	6872      	ldr	r2, [r6, #4]
 8006b9e:	60da      	str	r2, [r3, #12]
 8006ba0:	883b      	ldrh	r3, [r7, #0]
 8006ba2:	f108 0801 	add.w	r8, r8, #1
 8006ba6:	4598      	cmp	r8, r3
 8006ba8:	d205      	bcs.n	8006bb6 <ai_platform_network_process+0x3ba>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	b11b      	cbz	r3, 8006bb6 <ai_platform_network_process+0x3ba>
 8006bae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d1d5      	bne.n	8006b62 <ai_platform_network_process+0x366>
 8006bb6:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8006bba:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	b280      	uxth	r0, r0
 8006bc2:	4283      	cmp	r3, r0
 8006bc4:	f8ab 0016 	strh.w	r0, [fp, #22]
 8006bc8:	d888      	bhi.n	8006adc <ai_platform_network_process+0x2e0>
 8006bca:	4683      	mov	fp, r0
 8006bcc:	e69e      	b.n	800690c <ai_platform_network_process+0x110>
 8006bce:	68b2      	ldr	r2, [r6, #8]
 8006bd0:	f000 fe62 	bl	8007898 <memcpy>
 8006bd4:	e7a2      	b.n	8006b1c <ai_platform_network_process+0x320>
 8006bd6:	6889      	ldr	r1, [r1, #8]
 8006bd8:	4660      	mov	r0, ip
 8006bda:	f000 fe5d 	bl	8007898 <memcpy>
 8006bde:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8006be2:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006be6:	440b      	add	r3, r1
 8006be8:	4293      	cmp	r3, r2
 8006bea:	bf24      	itt	cs
 8006bec:	68f3      	ldrcs	r3, [r6, #12]
 8006bee:	1ad3      	subcs	r3, r2, r3
 8006bf0:	6073      	str	r3, [r6, #4]
 8006bf2:	e7d5      	b.n	8006ba0 <ai_platform_network_process+0x3a4>
 8006bf4:	2700      	movs	r7, #0
 8006bf6:	e76c      	b.n	8006ad2 <ai_platform_network_process+0x2d6>
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	461f      	mov	r7, r3
 8006bfc:	e769      	b.n	8006ad2 <ai_platform_network_process+0x2d6>
 8006bfe:	f104 0010 	add.w	r0, r4, #16
 8006c02:	2218      	movs	r2, #24
 8006c04:	2113      	movs	r1, #19
 8006c06:	f000 f80b 	bl	8006c20 <core_set_error>
 8006c0a:	f04f 0b00 	mov.w	fp, #0
 8006c0e:	e67d      	b.n	800690c <ai_platform_network_process+0x110>

08006c10 <core_init>:
 8006c10:	2001      	movs	r0, #1
 8006c12:	4770      	bx	lr

08006c14 <core_get_error>:
 8006c14:	4603      	mov	r3, r0
 8006c16:	2200      	movs	r2, #0
 8006c18:	6800      	ldr	r0, [r0, #0]
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop

08006c20 <core_set_error>:
 8006c20:	7803      	ldrb	r3, [r0, #0]
 8006c22:	b933      	cbnz	r3, 8006c32 <core_set_error+0x12>
 8006c24:	7001      	strb	r1, [r0, #0]
 8006c26:	6803      	ldr	r3, [r0, #0]
 8006c28:	f362 231f 	bfi	r3, r2, #8, #24
 8006c2c:	6003      	str	r3, [r0, #0]
 8006c2e:	2001      	movs	r0, #1
 8006c30:	4770      	bx	lr
 8006c32:	2000      	movs	r0, #0
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop

08006c38 <ai_dict8_dot_array_f32>:
 8006c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c3c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006c40:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8006c44:	f000 80c0 	beq.w	8006dc8 <ai_dict8_dot_array_f32+0x190>
 8006c48:	f101 0408 	add.w	r4, r1, #8
 8006c4c:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006c50:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8006dd0 <ai_dict8_dot_array_f32+0x198>
 8006c54:	eb04 0e09 	add.w	lr, r4, r9
 8006c58:	f103 0520 	add.w	r5, r3, #32
 8006c5c:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8006c60:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8006c64:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8006c68:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8006c6c:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8006c70:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8006c74:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8006c78:	ed55 3a04 	vldr	s7, [r5, #-16]
 8006c7c:	ed55 4a03 	vldr	s9, [r5, #-12]
 8006c80:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006c84:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006c88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006c8c:	edd6 7a00 	vldr	s15, [r6]
 8006c90:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8006c94:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006c98:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006c9c:	ed9a 3a00 	vldr	s6, [sl]
 8006ca0:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8006ca4:	eee3 7a05 	vfma.f32	s15, s6, s10
 8006ca8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006cac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006cb0:	ed97 3a00 	vldr	s6, [r7]
 8006cb4:	ed96 5a00 	vldr	s10, [r6]
 8006cb8:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8006cbc:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8006cc0:	eee3 7a04 	vfma.f32	s15, s6, s8
 8006cc4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006cc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006ccc:	ed9a 3a00 	vldr	s6, [sl]
 8006cd0:	ed96 4a00 	vldr	s8, [r6]
 8006cd4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8006cd8:	eee5 7a06 	vfma.f32	s15, s10, s12
 8006cdc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006ce0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006ce4:	ed97 5a00 	vldr	s10, [r7]
 8006ce8:	ed96 6a00 	vldr	s12, [r6]
 8006cec:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006cf0:	3408      	adds	r4, #8
 8006cf2:	45a6      	cmp	lr, r4
 8006cf4:	f105 0520 	add.w	r5, r5, #32
 8006cf8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006cfc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006d00:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d08:	d1a8      	bne.n	8006c5c <ai_dict8_dot_array_f32+0x24>
 8006d0a:	4449      	add	r1, r9
 8006d0c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8006d10:	f01c 0c07 	ands.w	ip, ip, #7
 8006d14:	d050      	beq.n	8006db8 <ai_dict8_dot_array_f32+0x180>
 8006d16:	780c      	ldrb	r4, [r1, #0]
 8006d18:	edd3 6a00 	vldr	s13, [r3]
 8006d1c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006d20:	edd4 7a00 	vldr	s15, [r4]
 8006d24:	f1bc 0f01 	cmp.w	ip, #1
 8006d28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d2c:	d044      	beq.n	8006db8 <ai_dict8_dot_array_f32+0x180>
 8006d2e:	784c      	ldrb	r4, [r1, #1]
 8006d30:	edd3 6a01 	vldr	s13, [r3, #4]
 8006d34:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006d38:	edd4 7a00 	vldr	s15, [r4]
 8006d3c:	f1bc 0f02 	cmp.w	ip, #2
 8006d40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d44:	d038      	beq.n	8006db8 <ai_dict8_dot_array_f32+0x180>
 8006d46:	788c      	ldrb	r4, [r1, #2]
 8006d48:	edd3 6a02 	vldr	s13, [r3, #8]
 8006d4c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006d50:	edd4 7a00 	vldr	s15, [r4]
 8006d54:	f1bc 0f03 	cmp.w	ip, #3
 8006d58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d5c:	d02c      	beq.n	8006db8 <ai_dict8_dot_array_f32+0x180>
 8006d5e:	78cc      	ldrb	r4, [r1, #3]
 8006d60:	edd3 6a03 	vldr	s13, [r3, #12]
 8006d64:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006d68:	edd4 7a00 	vldr	s15, [r4]
 8006d6c:	f1bc 0f04 	cmp.w	ip, #4
 8006d70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d74:	d020      	beq.n	8006db8 <ai_dict8_dot_array_f32+0x180>
 8006d76:	790c      	ldrb	r4, [r1, #4]
 8006d78:	edd3 6a04 	vldr	s13, [r3, #16]
 8006d7c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006d80:	edd4 7a00 	vldr	s15, [r4]
 8006d84:	f1bc 0f05 	cmp.w	ip, #5
 8006d88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d8c:	d014      	beq.n	8006db8 <ai_dict8_dot_array_f32+0x180>
 8006d8e:	794c      	ldrb	r4, [r1, #5]
 8006d90:	edd3 6a05 	vldr	s13, [r3, #20]
 8006d94:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006d98:	edd4 7a00 	vldr	s15, [r4]
 8006d9c:	f1bc 0f06 	cmp.w	ip, #6
 8006da0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006da4:	d008      	beq.n	8006db8 <ai_dict8_dot_array_f32+0x180>
 8006da6:	7989      	ldrb	r1, [r1, #6]
 8006da8:	edd3 7a06 	vldr	s15, [r3, #24]
 8006dac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006db0:	edd2 6a00 	vldr	s13, [r2]
 8006db4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006db8:	edd0 7a00 	vldr	s15, [r0]
 8006dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dc0:	ed80 7a00 	vstr	s14, [r0]
 8006dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc8:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8006dd0 <ai_dict8_dot_array_f32+0x198>
 8006dcc:	e7a0      	b.n	8006d10 <ai_dict8_dot_array_f32+0xd8>
 8006dce:	bf00      	nop
 8006dd0:	00000000 	.word	0x00000000

08006dd4 <ai_dict4_dot_array_f32>:
 8006dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006dda:	f027 0c01 	bic.w	ip, r7, #1
 8006dde:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8006de2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8006de6:	f000 80ae 	beq.w	8006f46 <ai_dict4_dot_array_f32+0x172>
 8006dea:	1d0d      	adds	r5, r1, #4
 8006dec:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8006df0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006f4c <ai_dict4_dot_array_f32+0x178>
 8006df4:	eb05 0e09 	add.w	lr, r5, r9
 8006df8:	f103 0420 	add.w	r4, r3, #32
 8006dfc:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8006e00:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8006e04:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8006e08:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8006e0c:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8006e10:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8006e14:	ed14 5a04 	vldr	s10, [r4, #-16]
 8006e18:	ed54 5a03 	vldr	s11, [r4, #-12]
 8006e1c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006e20:	ed54 6a01 	vldr	s13, [r4, #-4]
 8006e24:	f006 0a0f 	and.w	sl, r6, #15
 8006e28:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006e2c:	edda 7a00 	vldr	s15, [sl]
 8006e30:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8006e34:	0936      	lsrs	r6, r6, #4
 8006e36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e3a:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006e3e:	ed96 3a00 	vldr	s6, [r6]
 8006e42:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8006e46:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006e4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e4e:	f00b 0b0f 	and.w	fp, fp, #15
 8006e52:	edd6 3a00 	vldr	s7, [r6]
 8006e56:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8006e5a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006e5e:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8006e62:	3504      	adds	r5, #4
 8006e64:	ed9b 4a00 	vldr	s8, [fp]
 8006e68:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8006e6c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006e70:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8006e74:	f00a 0a0f 	and.w	sl, sl, #15
 8006e78:	eddb 4a00 	vldr	s9, [fp]
 8006e7c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006e80:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006e84:	45ae      	cmp	lr, r5
 8006e86:	ed9a 5a00 	vldr	s10, [sl]
 8006e8a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8006e8e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006e92:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006e96:	f006 060f 	and.w	r6, r6, #15
 8006e9a:	edda 5a00 	vldr	s11, [sl]
 8006e9e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006ea2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006ea6:	f104 0420 	add.w	r4, r4, #32
 8006eaa:	ed96 6a00 	vldr	s12, [r6]
 8006eae:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006eb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006eb6:	d1a1      	bne.n	8006dfc <ai_dict4_dot_array_f32+0x28>
 8006eb8:	4449      	add	r1, r9
 8006eba:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8006ebe:	459c      	cmp	ip, r3
 8006ec0:	d92d      	bls.n	8006f1e <ai_dict4_dot_array_f32+0x14a>
 8006ec2:	f10c 0c07 	add.w	ip, ip, #7
 8006ec6:	f103 0508 	add.w	r5, r3, #8
 8006eca:	ebac 0c05 	sub.w	ip, ip, r5
 8006ece:	f02c 0407 	bic.w	r4, ip, #7
 8006ed2:	f103 0810 	add.w	r8, r3, #16
 8006ed6:	44a0      	add	r8, r4
 8006ed8:	f101 3eff 	add.w	lr, r1, #4294967295
 8006edc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8006ee0:	ed15 6a01 	vldr	s12, [r5, #-4]
 8006ee4:	ed55 6a02 	vldr	s13, [r5, #-8]
 8006ee8:	f004 060f 	and.w	r6, r4, #15
 8006eec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006ef0:	0924      	lsrs	r4, r4, #4
 8006ef2:	edd6 7a00 	vldr	s15, [r6]
 8006ef6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006efa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006efe:	ed94 6a00 	vldr	s12, [r4]
 8006f02:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006f06:	3508      	adds	r5, #8
 8006f08:	45a8      	cmp	r8, r5
 8006f0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f0e:	d1e5      	bne.n	8006edc <ai_dict4_dot_array_f32+0x108>
 8006f10:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8006f14:	f10c 0c01 	add.w	ip, ip, #1
 8006f18:	4461      	add	r1, ip
 8006f1a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8006f1e:	07fc      	lsls	r4, r7, #31
 8006f20:	d509      	bpl.n	8006f36 <ai_dict4_dot_array_f32+0x162>
 8006f22:	7809      	ldrb	r1, [r1, #0]
 8006f24:	edd3 7a00 	vldr	s15, [r3]
 8006f28:	090b      	lsrs	r3, r1, #4
 8006f2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006f2e:	edd2 6a00 	vldr	s13, [r2]
 8006f32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006f36:	edd0 7a00 	vldr	s15, [r0]
 8006f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f3e:	ed80 7a00 	vstr	s14, [r0]
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8006f4c <ai_dict4_dot_array_f32+0x178>
 8006f4a:	e7b8      	b.n	8006ebe <ai_dict4_dot_array_f32+0xea>
 8006f4c:	00000000 	.word	0x00000000

08006f50 <forward_dense>:
 8006f50:	6982      	ldr	r2, [r0, #24]
 8006f52:	8813      	ldrh	r3, [r2, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 81ca 	beq.w	80072ee <forward_dense+0x39e>
 8006f5a:	6852      	ldr	r2, [r2, #4]
 8006f5c:	6850      	ldr	r0, [r2, #4]
 8006f5e:	b100      	cbz	r0, 8006f62 <forward_dense+0x12>
 8006f60:	6800      	ldr	r0, [r0, #0]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	f240 81c0 	bls.w	80072e8 <forward_dense+0x398>
 8006f68:	6911      	ldr	r1, [r2, #16]
 8006f6a:	b101      	cbz	r1, 8006f6e <forward_dense+0x1e>
 8006f6c:	6809      	ldr	r1, [r1, #0]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	f000 81bf 	beq.w	80072f2 <forward_dense+0x3a2>
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	ed2d 8b10 	vpush	{d8-d15}
 8006f7c:	69d3      	ldr	r3, [r2, #28]
 8006f7e:	b091      	sub	sp, #68	; 0x44
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 820b 	beq.w	800739c <forward_dense+0x44c>
 8006f86:	681c      	ldr	r4, [r3, #0]
 8006f88:	9408      	str	r4, [sp, #32]
 8006f8a:	f112 0418 	adds.w	r4, r2, #24
 8006f8e:	f000 81df 	beq.w	8007350 <forward_dense+0x400>
 8006f92:	8b12      	ldrh	r2, [r2, #24]
 8006f94:	2a01      	cmp	r2, #1
 8006f96:	f240 81fe 	bls.w	8007396 <forward_dense+0x446>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 81da 	beq.w	8007354 <forward_dense+0x404>
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	9306      	str	r3, [sp, #24]
 8006fa4:	9b08      	ldr	r3, [sp, #32]
 8006fa6:	68cc      	ldr	r4, [r1, #12]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	68c5      	ldr	r5, [r0, #12]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006fb2:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006fb6:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8006fba:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8006fbe:	fa4c f505 	asr.w	r5, ip, r5
 8006fc2:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8006fc6:	950b      	str	r5, [sp, #44]	; 0x2c
 8006fc8:	2a04      	cmp	r2, #4
 8006fca:	fb07 f506 	mul.w	r5, r7, r6
 8006fce:	6864      	ldr	r4, [r4, #4]
 8006fd0:	9507      	str	r5, [sp, #28]
 8006fd2:	f000 81dd 	beq.w	8007390 <forward_dense+0x440>
 8006fd6:	2a08      	cmp	r2, #8
 8006fd8:	f000 81da 	beq.w	8007390 <forward_dense+0x440>
 8006fdc:	f04f 0a00 	mov.w	sl, #0
 8006fe0:	698a      	ldr	r2, [r1, #24]
 8006fe2:	6981      	ldr	r1, [r0, #24]
 8006fe4:	6890      	ldr	r0, [r2, #8]
 8006fe6:	9a08      	ldr	r2, [sp, #32]
 8006fe8:	9004      	str	r0, [sp, #16]
 8006fea:	6952      	ldr	r2, [r2, #20]
 8006fec:	688f      	ldr	r7, [r1, #8]
 8006fee:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006ff2:	00a2      	lsls	r2, r4, #2
 8006ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ff6:	1886      	adds	r6, r0, r2
 8006ff8:	9a07      	ldr	r2, [sp, #28]
 8006ffa:	2a00      	cmp	r2, #0
 8006ffc:	f000 81c3 	beq.w	8007386 <forward_dense+0x436>
 8007000:	f1a8 0210 	sub.w	r2, r8, #16
 8007004:	0912      	lsrs	r2, r2, #4
 8007006:	3201      	adds	r2, #1
 8007008:	0192      	lsls	r2, r2, #6
 800700a:	920c      	str	r2, [sp, #48]	; 0x30
 800700c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8007010:	920a      	str	r2, [sp, #40]	; 0x28
 8007012:	689d      	ldr	r5, [r3, #8]
 8007014:	9b06      	ldr	r3, [sp, #24]
 8007016:	eddf aad0 	vldr	s21, [pc, #832]	; 8007358 <forward_dense+0x408>
 800701a:	2200      	movs	r2, #0
 800701c:	9205      	str	r2, [sp, #20]
 800701e:	f008 020f 	and.w	r2, r8, #15
 8007022:	920d      	str	r2, [sp, #52]	; 0x34
 8007024:	2b00      	cmp	r3, #0
 8007026:	d043      	beq.n	80070b0 <forward_dense+0x160>
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	689c      	ldr	r4, [r3, #8]
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	f1ba 0f00 	cmp.w	sl, #0
 8007032:	d042      	beq.n	80070ba <forward_dense+0x16a>
 8007034:	42b3      	cmp	r3, r6
 8007036:	d22a      	bcs.n	800708e <forward_dense+0x13e>
 8007038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800703a:	469b      	mov	fp, r3
 800703c:	ab0f      	add	r3, sp, #60	; 0x3c
 800703e:	9303      	str	r3, [sp, #12]
 8007040:	2a04      	cmp	r2, #4
 8007042:	4633      	mov	r3, r6
 8007044:	4646      	mov	r6, r8
 8007046:	4698      	mov	r8, r3
 8007048:	f000 8156 	beq.w	80072f8 <forward_dense+0x3a8>
 800704c:	2c00      	cmp	r4, #0
 800704e:	f000 8185 	beq.w	800735c <forward_dense+0x40c>
 8007052:	f8d4 c000 	ldr.w	ip, [r4]
 8007056:	9803      	ldr	r0, [sp, #12]
 8007058:	9600      	str	r6, [sp, #0]
 800705a:	463b      	mov	r3, r7
 800705c:	4629      	mov	r1, r5
 800705e:	4652      	mov	r2, sl
 8007060:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8007064:	f7ff fde8 	bl	8006c38 <ai_dict8_dot_array_f32>
 8007068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800706a:	f84b 3b04 	str.w	r3, [fp], #4
 800706e:	45c3      	cmp	fp, r8
 8007070:	f104 0404 	add.w	r4, r4, #4
 8007074:	444d      	add	r5, r9
 8007076:	d3e9      	bcc.n	800704c <forward_dense+0xfc>
 8007078:	4643      	mov	r3, r8
 800707a:	46b0      	mov	r8, r6
 800707c:	461e      	mov	r6, r3
 800707e:	9a04      	ldr	r2, [sp, #16]
 8007080:	43d3      	mvns	r3, r2
 8007082:	4433      	add	r3, r6
 8007084:	f023 0303 	bic.w	r3, r3, #3
 8007088:	3304      	adds	r3, #4
 800708a:	18d3      	adds	r3, r2, r3
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007090:	9b05      	ldr	r3, [sp, #20]
 8007092:	4417      	add	r7, r2
 8007094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007096:	4416      	add	r6, r2
 8007098:	9a07      	ldr	r2, [sp, #28]
 800709a:	3301      	adds	r3, #1
 800709c:	4293      	cmp	r3, r2
 800709e:	9305      	str	r3, [sp, #20]
 80070a0:	f000 8171 	beq.w	8007386 <forward_dense+0x436>
 80070a4:	9b08      	ldr	r3, [sp, #32]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	689d      	ldr	r5, [r3, #8]
 80070aa:	9b06      	ldr	r3, [sp, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1bb      	bne.n	8007028 <forward_dense+0xd8>
 80070b0:	461c      	mov	r4, r3
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	f1ba 0f00 	cmp.w	sl, #0
 80070b8:	d1bc      	bne.n	8007034 <forward_dense+0xe4>
 80070ba:	42b3      	cmp	r3, r6
 80070bc:	d2e7      	bcs.n	800708e <forward_dense+0x13e>
 80070be:	4618      	mov	r0, r3
 80070c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070c2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80070c6:	eb07 0c03 	add.w	ip, r7, r3
 80070ca:	469e      	mov	lr, r3
 80070cc:	2c00      	cmp	r4, #0
 80070ce:	f000 80ff 	beq.w	80072d0 <forward_dense+0x380>
 80070d2:	f1b8 0f0f 	cmp.w	r8, #15
 80070d6:	edd4 fa00 	vldr	s31, [r4]
 80070da:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8007358 <forward_dense+0x408>
 80070de:	f104 0404 	add.w	r4, r4, #4
 80070e2:	f240 80fd 	bls.w	80072e0 <forward_dense+0x390>
 80070e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80070ea:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80070ee:	4641      	mov	r1, r8
 80070f0:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80070f4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80070f8:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 80070fc:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8007100:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8007104:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8007108:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800710c:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8007110:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8007114:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8007118:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800711c:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8007120:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8007124:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8007128:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800712c:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8007130:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8007134:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8007138:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800713c:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8007140:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8007144:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8007148:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800714c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8007150:	ed52 4a04 	vldr	s9, [r2, #-16]
 8007154:	ed12 5a03 	vldr	s10, [r2, #-12]
 8007158:	ed53 5a03 	vldr	s11, [r3, #-12]
 800715c:	ed12 6a02 	vldr	s12, [r2, #-8]
 8007160:	ed13 7a02 	vldr	s14, [r3, #-8]
 8007164:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8007168:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800716c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8007170:	3910      	subs	r1, #16
 8007172:	290f      	cmp	r1, #15
 8007174:	ed53 ea01 	vldr	s29, [r3, #-4]
 8007178:	ed12 ea01 	vldr	s28, [r2, #-4]
 800717c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8007180:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007184:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007188:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800718c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8007190:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8007194:	eee9 7a89 	vfma.f32	s15, s19, s18
 8007198:	eee8 7a88 	vfma.f32	s15, s17, s16
 800719c:	eee0 7a20 	vfma.f32	s15, s0, s1
 80071a0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80071a4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80071a8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80071ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 80071b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80071b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80071b8:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80071bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80071c0:	d896      	bhi.n	80070f0 <forward_dense+0x1a0>
 80071c2:	eb05 010e 	add.w	r1, r5, lr
 80071c6:	465b      	mov	r3, fp
 80071c8:	4662      	mov	r2, ip
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d075      	beq.n	80072ba <forward_dense+0x36a>
 80071ce:	ed91 7a00 	vldr	s14, [r1]
 80071d2:	edd2 7a00 	vldr	s15, [r2]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80071dc:	d06d      	beq.n	80072ba <forward_dense+0x36a>
 80071de:	ed91 7a01 	vldr	s14, [r1, #4]
 80071e2:	edd2 7a01 	vldr	s15, [r2, #4]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80071ec:	d065      	beq.n	80072ba <forward_dense+0x36a>
 80071ee:	ed91 7a02 	vldr	s14, [r1, #8]
 80071f2:	edd2 7a02 	vldr	s15, [r2, #8]
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80071fc:	d05d      	beq.n	80072ba <forward_dense+0x36a>
 80071fe:	ed91 7a03 	vldr	s14, [r1, #12]
 8007202:	edd2 7a03 	vldr	s15, [r2, #12]
 8007206:	2b04      	cmp	r3, #4
 8007208:	eee7 6a27 	vfma.f32	s13, s14, s15
 800720c:	d055      	beq.n	80072ba <forward_dense+0x36a>
 800720e:	ed91 7a04 	vldr	s14, [r1, #16]
 8007212:	edd2 7a04 	vldr	s15, [r2, #16]
 8007216:	2b05      	cmp	r3, #5
 8007218:	eee7 6a27 	vfma.f32	s13, s14, s15
 800721c:	d04d      	beq.n	80072ba <forward_dense+0x36a>
 800721e:	ed91 7a05 	vldr	s14, [r1, #20]
 8007222:	edd2 7a05 	vldr	s15, [r2, #20]
 8007226:	2b06      	cmp	r3, #6
 8007228:	eee7 6a27 	vfma.f32	s13, s14, s15
 800722c:	d045      	beq.n	80072ba <forward_dense+0x36a>
 800722e:	ed91 7a06 	vldr	s14, [r1, #24]
 8007232:	edd2 7a06 	vldr	s15, [r2, #24]
 8007236:	2b07      	cmp	r3, #7
 8007238:	eee7 6a27 	vfma.f32	s13, s14, s15
 800723c:	d03d      	beq.n	80072ba <forward_dense+0x36a>
 800723e:	ed91 7a07 	vldr	s14, [r1, #28]
 8007242:	edd2 7a07 	vldr	s15, [r2, #28]
 8007246:	2b08      	cmp	r3, #8
 8007248:	eee7 6a27 	vfma.f32	s13, s14, s15
 800724c:	d035      	beq.n	80072ba <forward_dense+0x36a>
 800724e:	ed91 7a08 	vldr	s14, [r1, #32]
 8007252:	edd2 7a08 	vldr	s15, [r2, #32]
 8007256:	2b09      	cmp	r3, #9
 8007258:	eee7 6a27 	vfma.f32	s13, s14, s15
 800725c:	d02d      	beq.n	80072ba <forward_dense+0x36a>
 800725e:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8007262:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007266:	2b0a      	cmp	r3, #10
 8007268:	eee7 6a27 	vfma.f32	s13, s14, s15
 800726c:	d025      	beq.n	80072ba <forward_dense+0x36a>
 800726e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8007272:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007276:	2b0b      	cmp	r3, #11
 8007278:	eee7 6a27 	vfma.f32	s13, s14, s15
 800727c:	d01d      	beq.n	80072ba <forward_dense+0x36a>
 800727e:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8007282:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007286:	2b0c      	cmp	r3, #12
 8007288:	eee7 6a27 	vfma.f32	s13, s14, s15
 800728c:	d015      	beq.n	80072ba <forward_dense+0x36a>
 800728e:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8007292:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007296:	2b0d      	cmp	r3, #13
 8007298:	eee7 6a27 	vfma.f32	s13, s14, s15
 800729c:	d00d      	beq.n	80072ba <forward_dense+0x36a>
 800729e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80072a2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80072a6:	2b0e      	cmp	r3, #14
 80072a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80072ac:	d005      	beq.n	80072ba <forward_dense+0x36a>
 80072ae:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80072b2:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80072b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80072ba:	444d      	add	r5, r9
 80072bc:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80072c0:	ece0 6a01 	vstmia	r0!, {s13}
 80072c4:	42b0      	cmp	r0, r6
 80072c6:	f4bf aeda 	bcs.w	800707e <forward_dense+0x12e>
 80072ca:	2c00      	cmp	r4, #0
 80072cc:	f47f af01 	bne.w	80070d2 <forward_dense+0x182>
 80072d0:	f1b8 0f0f 	cmp.w	r8, #15
 80072d4:	eef0 fa6a 	vmov.f32	s31, s21
 80072d8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007358 <forward_dense+0x408>
 80072dc:	f63f af03 	bhi.w	80070e6 <forward_dense+0x196>
 80072e0:	4643      	mov	r3, r8
 80072e2:	4629      	mov	r1, r5
 80072e4:	463a      	mov	r2, r7
 80072e6:	e770      	b.n	80071ca <forward_dense+0x27a>
 80072e8:	2300      	movs	r3, #0
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	deff      	udf	#255	; 0xff
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	deff      	udf	#255	; 0xff
 80072f2:	2300      	movs	r3, #0
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	deff      	udf	#255	; 0xff
 80072f8:	b1ac      	cbz	r4, 8007326 <forward_dense+0x3d6>
 80072fa:	f8d4 c000 	ldr.w	ip, [r4]
 80072fe:	9803      	ldr	r0, [sp, #12]
 8007300:	9600      	str	r6, [sp, #0]
 8007302:	463b      	mov	r3, r7
 8007304:	4629      	mov	r1, r5
 8007306:	4652      	mov	r2, sl
 8007308:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800730c:	f7ff fd62 	bl	8006dd4 <ai_dict4_dot_array_f32>
 8007310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007312:	f84b 3b04 	str.w	r3, [fp], #4
 8007316:	45c3      	cmp	fp, r8
 8007318:	f104 0404 	add.w	r4, r4, #4
 800731c:	444d      	add	r5, r9
 800731e:	f4bf aeab 	bcs.w	8007078 <forward_dense+0x128>
 8007322:	2c00      	cmp	r4, #0
 8007324:	d1e9      	bne.n	80072fa <forward_dense+0x3aa>
 8007326:	4634      	mov	r4, r6
 8007328:	4646      	mov	r6, r8
 800732a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800732e:	9400      	str	r4, [sp, #0]
 8007330:	463b      	mov	r3, r7
 8007332:	4629      	mov	r1, r5
 8007334:	4652      	mov	r2, sl
 8007336:	4640      	mov	r0, r8
 8007338:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800733c:	f7ff fd4a 	bl	8006dd4 <ai_dict4_dot_array_f32>
 8007340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007342:	f84b 3b04 	str.w	r3, [fp], #4
 8007346:	45b3      	cmp	fp, r6
 8007348:	444d      	add	r5, r9
 800734a:	d3f0      	bcc.n	800732e <forward_dense+0x3de>
 800734c:	46a0      	mov	r8, r4
 800734e:	e696      	b.n	800707e <forward_dense+0x12e>
 8007350:	9406      	str	r4, [sp, #24]
 8007352:	e627      	b.n	8006fa4 <forward_dense+0x54>
 8007354:	9306      	str	r3, [sp, #24]
 8007356:	e625      	b.n	8006fa4 <forward_dense+0x54>
 8007358:	00000000 	.word	0x00000000
 800735c:	4634      	mov	r4, r6
 800735e:	4646      	mov	r6, r8
 8007360:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007364:	9400      	str	r4, [sp, #0]
 8007366:	463b      	mov	r3, r7
 8007368:	4629      	mov	r1, r5
 800736a:	4652      	mov	r2, sl
 800736c:	4640      	mov	r0, r8
 800736e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8007372:	f7ff fc61 	bl	8006c38 <ai_dict8_dot_array_f32>
 8007376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007378:	f84b 3b04 	str.w	r3, [fp], #4
 800737c:	45b3      	cmp	fp, r6
 800737e:	444d      	add	r5, r9
 8007380:	d3f0      	bcc.n	8007364 <forward_dense+0x414>
 8007382:	46a0      	mov	r8, r4
 8007384:	e67b      	b.n	800707e <forward_dense+0x12e>
 8007386:	b011      	add	sp, #68	; 0x44
 8007388:	ecbd 8b10 	vpop	{d8-d15}
 800738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007390:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8007394:	e624      	b.n	8006fe0 <forward_dense+0x90>
 8007396:	2300      	movs	r3, #0
 8007398:	9306      	str	r3, [sp, #24]
 800739a:	e603      	b.n	8006fa4 <forward_dense+0x54>
 800739c:	9308      	str	r3, [sp, #32]
 800739e:	e5f4      	b.n	8006f8a <forward_dense+0x3a>

080073a0 <nl_func_relu_generic_array_f32>:
 80073a0:	b430      	push	{r4, r5}
 80073a2:	6989      	ldr	r1, [r1, #24]
 80073a4:	6980      	ldr	r0, [r0, #24]
 80073a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80073aa:	688c      	ldr	r4, [r1, #8]
 80073ac:	6880      	ldr	r0, [r0, #8]
 80073ae:	ed93 7a00 	vldr	s14, [r3]
 80073b2:	ed93 6a01 	vldr	s12, [r3, #4]
 80073b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80073ba:	3a01      	subs	r2, #1
 80073bc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80073c0:	0092      	lsls	r2, r2, #2
 80073c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c6:	4410      	add	r0, r2
 80073c8:	4422      	add	r2, r4
 80073ca:	d421      	bmi.n	8007410 <nl_func_relu_generic_array_f32+0x70>
 80073cc:	4294      	cmp	r4, r2
 80073ce:	d83d      	bhi.n	800744c <nl_func_relu_generic_array_f32+0xac>
 80073d0:	1d13      	adds	r3, r2, #4
 80073d2:	1d02      	adds	r2, r0, #4
 80073d4:	e010      	b.n	80073f8 <nl_func_relu_generic_array_f32+0x58>
 80073d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073de:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80073e2:	d501      	bpl.n	80073e8 <nl_func_relu_generic_array_f32+0x48>
 80073e4:	ee65 7a86 	vmul.f32	s15, s11, s12
 80073e8:	ed62 7a01 	vstmdb	r2!, {s15}
 80073ec:	6888      	ldr	r0, [r1, #8]
 80073ee:	f1a3 0408 	sub.w	r4, r3, #8
 80073f2:	4284      	cmp	r4, r0
 80073f4:	462b      	mov	r3, r5
 80073f6:	d329      	bcc.n	800744c <nl_func_relu_generic_array_f32+0xac>
 80073f8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80073fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007404:	f1a3 0504 	sub.w	r5, r3, #4
 8007408:	d4e5      	bmi.n	80073d6 <nl_func_relu_generic_array_f32+0x36>
 800740a:	eef0 7a66 	vmov.f32	s15, s13
 800740e:	e7eb      	b.n	80073e8 <nl_func_relu_generic_array_f32+0x48>
 8007410:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007418:	d01a      	beq.n	8007450 <nl_func_relu_generic_array_f32+0xb0>
 800741a:	4294      	cmp	r4, r2
 800741c:	d816      	bhi.n	800744c <nl_func_relu_generic_array_f32+0xac>
 800741e:	1d13      	adds	r3, r2, #4
 8007420:	1d02      	adds	r2, r0, #4
 8007422:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007426:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800742a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800742e:	f1a3 0408 	sub.w	r4, r3, #8
 8007432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007436:	f1a3 0004 	sub.w	r0, r3, #4
 800743a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800743e:	4623      	mov	r3, r4
 8007440:	d51e      	bpl.n	8007480 <nl_func_relu_generic_array_f32+0xe0>
 8007442:	ed62 6a01 	vstmdb	r2!, {s13}
 8007446:	688b      	ldr	r3, [r1, #8]
 8007448:	42a3      	cmp	r3, r4
 800744a:	d91e      	bls.n	800748a <nl_func_relu_generic_array_f32+0xea>
 800744c:	bc30      	pop	{r4, r5}
 800744e:	4770      	bx	lr
 8007450:	4294      	cmp	r4, r2
 8007452:	d8fb      	bhi.n	800744c <nl_func_relu_generic_array_f32+0xac>
 8007454:	1d13      	adds	r3, r2, #4
 8007456:	2500      	movs	r5, #0
 8007458:	1d02      	adds	r2, r0, #4
 800745a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800745e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007462:	f1a3 0408 	sub.w	r4, r3, #8
 8007466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746a:	f1a3 0004 	sub.w	r0, r3, #4
 800746e:	4623      	mov	r3, r4
 8007470:	db0d      	blt.n	800748e <nl_func_relu_generic_array_f32+0xee>
 8007472:	ed62 7a01 	vstmdb	r2!, {s15}
 8007476:	688b      	ldr	r3, [r1, #8]
 8007478:	42a3      	cmp	r3, r4
 800747a:	d8e7      	bhi.n	800744c <nl_func_relu_generic_array_f32+0xac>
 800747c:	4603      	mov	r3, r0
 800747e:	e7ec      	b.n	800745a <nl_func_relu_generic_array_f32+0xba>
 8007480:	ed62 7a01 	vstmdb	r2!, {s15}
 8007484:	688c      	ldr	r4, [r1, #8]
 8007486:	429c      	cmp	r4, r3
 8007488:	d8e0      	bhi.n	800744c <nl_func_relu_generic_array_f32+0xac>
 800748a:	4603      	mov	r3, r0
 800748c:	e7c9      	b.n	8007422 <nl_func_relu_generic_array_f32+0x82>
 800748e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007492:	688c      	ldr	r4, [r1, #8]
 8007494:	429c      	cmp	r4, r3
 8007496:	d8d9      	bhi.n	800744c <nl_func_relu_generic_array_f32+0xac>
 8007498:	4603      	mov	r3, r0
 800749a:	e7de      	b.n	800745a <nl_func_relu_generic_array_f32+0xba>

0800749c <forward_relu>:
 800749c:	6982      	ldr	r2, [r0, #24]
 800749e:	8813      	ldrh	r3, [r2, #0]
 80074a0:	b333      	cbz	r3, 80074f0 <forward_relu+0x54>
 80074a2:	6852      	ldr	r2, [r2, #4]
 80074a4:	6851      	ldr	r1, [r2, #4]
 80074a6:	b101      	cbz	r1, 80074aa <forward_relu+0xe>
 80074a8:	6809      	ldr	r1, [r1, #0]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d91d      	bls.n	80074ea <forward_relu+0x4e>
 80074ae:	b4f0      	push	{r4, r5, r6, r7}
 80074b0:	6917      	ldr	r7, [r2, #16]
 80074b2:	b107      	cbz	r7, 80074b6 <forward_relu+0x1a>
 80074b4:	683f      	ldr	r7, [r7, #0]
 80074b6:	688c      	ldr	r4, [r1, #8]
 80074b8:	69c3      	ldr	r3, [r0, #28]
 80074ba:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d044      	beq.n	800754c <forward_relu+0xb0>
 80074c2:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80074c6:	2d01      	cmp	r5, #1
 80074c8:	d014      	beq.n	80074f4 <forward_relu+0x58>
 80074ca:	2c00      	cmp	r4, #0
 80074cc:	d074      	beq.n	80075b8 <forward_relu+0x11c>
 80074ce:	68ce      	ldr	r6, [r1, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80074d6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074da:	42a6      	cmp	r6, r4
 80074dc:	fb05 f202 	mul.w	r2, r5, r2
 80074e0:	d1f9      	bne.n	80074d6 <forward_relu+0x3a>
 80074e2:	4638      	mov	r0, r7
 80074e4:	bcf0      	pop	{r4, r5, r6, r7}
 80074e6:	f7ff bf5b 	b.w	80073a0 <nl_func_relu_generic_array_f32>
 80074ea:	2300      	movs	r3, #0
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	deff      	udf	#255	; 0xff
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	deff      	udf	#255	; 0xff
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	6988      	ldr	r0, [r1, #24]
 80074f8:	6896      	ldr	r6, [r2, #8]
 80074fa:	ed93 7a00 	vldr	s14, [r3]
 80074fe:	6882      	ldr	r2, [r0, #8]
 8007500:	b184      	cbz	r4, 8007524 <forward_relu+0x88>
 8007502:	68cf      	ldr	r7, [r1, #12]
 8007504:	462b      	mov	r3, r5
 8007506:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800750a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800750e:	42a7      	cmp	r7, r4
 8007510:	fb01 f303 	mul.w	r3, r1, r3
 8007514:	d1f9      	bne.n	800750a <forward_relu+0x6e>
 8007516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800751a:	3b01      	subs	r3, #1
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	18d2      	adds	r2, r2, r3
 8007520:	441e      	add	r6, r3
 8007522:	d23f      	bcs.n	80075a4 <forward_relu+0x108>
 8007524:	1d13      	adds	r3, r2, #4
 8007526:	2500      	movs	r5, #0
 8007528:	1d32      	adds	r2, r6, #4
 800752a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800752e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007536:	f1a3 0104 	sub.w	r1, r3, #4
 800753a:	d835      	bhi.n	80075a8 <forward_relu+0x10c>
 800753c:	ed62 7a01 	vstmdb	r2!, {s15}
 8007540:	6884      	ldr	r4, [r0, #8]
 8007542:	3b08      	subs	r3, #8
 8007544:	429c      	cmp	r4, r3
 8007546:	d82d      	bhi.n	80075a4 <forward_relu+0x108>
 8007548:	460b      	mov	r3, r1
 800754a:	e7ee      	b.n	800752a <forward_relu+0x8e>
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	698d      	ldr	r5, [r1, #24]
 8007550:	6898      	ldr	r0, [r3, #8]
 8007552:	68ab      	ldr	r3, [r5, #8]
 8007554:	b184      	cbz	r4, 8007578 <forward_relu+0xdc>
 8007556:	68ce      	ldr	r6, [r1, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800755e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8007562:	42a6      	cmp	r6, r4
 8007564:	fb01 f202 	mul.w	r2, r1, r2
 8007568:	d1f9      	bne.n	800755e <forward_relu+0xc2>
 800756a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800756e:	3a01      	subs	r2, #1
 8007570:	0092      	lsls	r2, r2, #2
 8007572:	189b      	adds	r3, r3, r2
 8007574:	4410      	add	r0, r2
 8007576:	d215      	bcs.n	80075a4 <forward_relu+0x108>
 8007578:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80075bc <forward_relu+0x120>
 800757c:	3304      	adds	r3, #4
 800757e:	1d01      	adds	r1, r0, #4
 8007580:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758c:	bfb8      	it	lt
 800758e:	eef0 7a47 	vmovlt.f32	s15, s14
 8007592:	ed61 7a01 	vstmdb	r1!, {s15}
 8007596:	68a8      	ldr	r0, [r5, #8]
 8007598:	f1a3 0208 	sub.w	r2, r3, #8
 800759c:	4290      	cmp	r0, r2
 800759e:	f1a3 0304 	sub.w	r3, r3, #4
 80075a2:	d9ed      	bls.n	8007580 <forward_relu+0xe4>
 80075a4:	bcf0      	pop	{r4, r5, r6, r7}
 80075a6:	4770      	bx	lr
 80075a8:	f842 5d04 	str.w	r5, [r2, #-4]!
 80075ac:	6884      	ldr	r4, [r0, #8]
 80075ae:	3b08      	subs	r3, #8
 80075b0:	429c      	cmp	r4, r3
 80075b2:	d8f7      	bhi.n	80075a4 <forward_relu+0x108>
 80075b4:	460b      	mov	r3, r1
 80075b6:	e7b8      	b.n	800752a <forward_relu+0x8e>
 80075b8:	2201      	movs	r2, #1
 80075ba:	e792      	b.n	80074e2 <forward_relu+0x46>
 80075bc:	00000000 	.word	0x00000000

080075c0 <ai_check_custom_types>:
 80075c0:	4b13      	ldr	r3, [pc, #76]	; (8007610 <ai_check_custom_types+0x50>)
 80075c2:	b082      	sub	sp, #8
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	b118      	cbz	r0, 80075d2 <ai_check_custom_types+0x12>
 80075ca:	7803      	ldrb	r3, [r0, #0]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d002      	beq.n	80075d6 <ai_check_custom_types+0x16>
 80075d0:	2000      	movs	r0, #0
 80075d2:	b002      	add	sp, #8
 80075d4:	4770      	bx	lr
 80075d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80075da:	4293      	cmp	r3, r2
 80075dc:	d004      	beq.n	80075e8 <ai_check_custom_types+0x28>
 80075de:	2001      	movs	r0, #1
 80075e0:	f080 0001 	eor.w	r0, r0, #1
 80075e4:	b002      	add	sp, #8
 80075e6:	4770      	bx	lr
 80075e8:	7842      	ldrb	r2, [r0, #1]
 80075ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	f100 0001 	add.w	r0, r0, #1
 80075f4:	d1f3      	bne.n	80075de <ai_check_custom_types+0x1e>
 80075f6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80075fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d1ed      	bne.n	80075de <ai_check_custom_types+0x1e>
 8007602:	7842      	ldrb	r2, [r0, #1]
 8007604:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007608:	429a      	cmp	r2, r3
 800760a:	d1e8      	bne.n	80075de <ai_check_custom_types+0x1e>
 800760c:	2000      	movs	r0, #0
 800760e:	e7e7      	b.n	80075e0 <ai_check_custom_types+0x20>
 8007610:	0800b134 	.word	0x0800b134

08007614 <ai_layers_init_all>:
 8007614:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007616:	b17a      	cbz	r2, 8007638 <ai_layers_init_all+0x24>
 8007618:	6913      	ldr	r3, [r2, #16]
 800761a:	60d0      	str	r0, [r2, #12]
 800761c:	429a      	cmp	r2, r3
 800761e:	f04f 0201 	mov.w	r2, #1
 8007622:	d009      	beq.n	8007638 <ai_layers_init_all+0x24>
 8007624:	b143      	cbz	r3, 8007638 <ai_layers_init_all+0x24>
 8007626:	6919      	ldr	r1, [r3, #16]
 8007628:	60d8      	str	r0, [r3, #12]
 800762a:	4299      	cmp	r1, r3
 800762c:	f102 0201 	add.w	r2, r2, #1
 8007630:	d002      	beq.n	8007638 <ai_layers_init_all+0x24>
 8007632:	460b      	mov	r3, r1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f6      	bne.n	8007626 <ai_layers_init_all+0x12>
 8007638:	4610      	mov	r0, r2
 800763a:	4770      	bx	lr

0800763c <ai_layers_post_init_all>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8007640:	b18c      	cbz	r4, 8007666 <ai_layers_post_init_all+0x2a>
 8007642:	2500      	movs	r5, #0
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	f013 0f01 	tst.w	r3, #1
 800764a:	4620      	mov	r0, r4
 800764c:	d003      	beq.n	8007656 <ai_layers_post_init_all+0x1a>
 800764e:	6a23      	ldr	r3, [r4, #32]
 8007650:	b10b      	cbz	r3, 8007656 <ai_layers_post_init_all+0x1a>
 8007652:	4798      	blx	r3
 8007654:	3501      	adds	r5, #1
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	42a3      	cmp	r3, r4
 800765a:	d002      	beq.n	8007662 <ai_layers_post_init_all+0x26>
 800765c:	461c      	mov	r4, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f0      	bne.n	8007644 <ai_layers_post_init_all+0x8>
 8007662:	4628      	mov	r0, r5
 8007664:	bd38      	pop	{r3, r4, r5, pc}
 8007666:	4625      	mov	r5, r4
 8007668:	e7fb      	b.n	8007662 <ai_layers_post_init_all+0x26>
 800766a:	bf00      	nop

0800766c <ai_layers_forward_all>:
 800766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007670:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8007672:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8007674:	4604      	mov	r4, r0
 8007676:	2f00      	cmp	r7, #0
 8007678:	d02c      	beq.n	80076d4 <ai_layers_forward_all+0x68>
 800767a:	2d00      	cmp	r5, #0
 800767c:	d03f      	beq.n	80076fe <ai_layers_forward_all+0x92>
 800767e:	6545      	str	r5, [r0, #84]	; 0x54
 8007680:	4629      	mov	r1, r5
 8007682:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007684:	2001      	movs	r0, #1
 8007686:	47b8      	blx	r7
 8007688:	2600      	movs	r6, #0
 800768a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800768c:	46b0      	mov	r8, r6
 800768e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007690:	2002      	movs	r0, #2
 8007692:	47b8      	blx	r7
 8007694:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8007696:	696b      	ldr	r3, [r5, #20]
 8007698:	4628      	mov	r0, r5
 800769a:	4798      	blx	r3
 800769c:	692b      	ldr	r3, [r5, #16]
 800769e:	429d      	cmp	r5, r3
 80076a0:	f04f 0003 	mov.w	r0, #3
 80076a4:	4619      	mov	r1, r3
 80076a6:	d009      	beq.n	80076bc <ai_layers_forward_all+0x50>
 80076a8:	6563      	str	r3, [r4, #84]	; 0x54
 80076aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80076ac:	47b8      	blx	r7
 80076ae:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80076b0:	3601      	adds	r6, #1
 80076b2:	2900      	cmp	r1, #0
 80076b4:	d1eb      	bne.n	800768e <ai_layers_forward_all+0x22>
 80076b6:	4630      	mov	r0, r6
 80076b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076bc:	2100      	movs	r1, #0
 80076be:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 80076c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80076c4:	47b8      	blx	r7
 80076c6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80076c8:	3601      	adds	r6, #1
 80076ca:	2900      	cmp	r1, #0
 80076cc:	d1df      	bne.n	800768e <ai_layers_forward_all+0x22>
 80076ce:	4630      	mov	r0, r6
 80076d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076d4:	b19d      	cbz	r5, 80076fe <ai_layers_forward_all+0x92>
 80076d6:	6545      	str	r5, [r0, #84]	; 0x54
 80076d8:	463e      	mov	r6, r7
 80076da:	696b      	ldr	r3, [r5, #20]
 80076dc:	4628      	mov	r0, r5
 80076de:	4798      	blx	r3
 80076e0:	692b      	ldr	r3, [r5, #16]
 80076e2:	42ab      	cmp	r3, r5
 80076e4:	f106 0601 	add.w	r6, r6, #1
 80076e8:	d004      	beq.n	80076f4 <ai_layers_forward_all+0x88>
 80076ea:	6563      	str	r3, [r4, #84]	; 0x54
 80076ec:	461d      	mov	r5, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f3      	bne.n	80076da <ai_layers_forward_all+0x6e>
 80076f2:	e7e0      	b.n	80076b6 <ai_layers_forward_all+0x4a>
 80076f4:	2300      	movs	r3, #0
 80076f6:	6563      	str	r3, [r4, #84]	; 0x54
 80076f8:	4630      	mov	r0, r6
 80076fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076fe:	462e      	mov	r6, r5
 8007700:	4630      	mov	r0, r6
 8007702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007706:	bf00      	nop

08007708 <ai_layers_destroy_all>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800770c:	b18c      	cbz	r4, 8007732 <ai_layers_destroy_all+0x2a>
 800770e:	2500      	movs	r5, #0
 8007710:	6863      	ldr	r3, [r4, #4]
 8007712:	f013 0f04 	tst.w	r3, #4
 8007716:	4620      	mov	r0, r4
 8007718:	d003      	beq.n	8007722 <ai_layers_destroy_all+0x1a>
 800771a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800771c:	b10b      	cbz	r3, 8007722 <ai_layers_destroy_all+0x1a>
 800771e:	4798      	blx	r3
 8007720:	3501      	adds	r5, #1
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	42a3      	cmp	r3, r4
 8007726:	d002      	beq.n	800772e <ai_layers_destroy_all+0x26>
 8007728:	461c      	mov	r4, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1f0      	bne.n	8007710 <ai_layers_destroy_all+0x8>
 800772e:	4628      	mov	r0, r5
 8007730:	bd38      	pop	{r3, r4, r5, pc}
 8007732:	4625      	mov	r5, r4
 8007734:	e7fb      	b.n	800772e <ai_layers_destroy_all+0x26>
 8007736:	bf00      	nop

08007738 <ai_array_to_buffer_fmt>:
 8007738:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800773c:	2b02      	cmp	r3, #2
 800773e:	d02e      	beq.n	800779e <ai_array_to_buffer_fmt+0x66>
 8007740:	4a1b      	ldr	r2, [pc, #108]	; (80077b0 <ai_array_to_buffer_fmt+0x78>)
 8007742:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8007746:	4293      	cmp	r3, r2
 8007748:	d00e      	beq.n	8007768 <ai_array_to_buffer_fmt+0x30>
 800774a:	dd11      	ble.n	8007770 <ai_array_to_buffer_fmt+0x38>
 800774c:	4a19      	ldr	r2, [pc, #100]	; (80077b4 <ai_array_to_buffer_fmt+0x7c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00a      	beq.n	8007768 <ai_array_to_buffer_fmt+0x30>
 8007752:	dd18      	ble.n	8007786 <ai_array_to_buffer_fmt+0x4e>
 8007754:	4a18      	ldr	r2, [pc, #96]	; (80077b8 <ai_array_to_buffer_fmt+0x80>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d006      	beq.n	8007768 <ai_array_to_buffer_fmt+0x30>
 800775a:	4a18      	ldr	r2, [pc, #96]	; (80077bc <ai_array_to_buffer_fmt+0x84>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <ai_array_to_buffer_fmt+0x30>
 8007760:	4a17      	ldr	r2, [pc, #92]	; (80077c0 <ai_array_to_buffer_fmt+0x88>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d000      	beq.n	8007768 <ai_array_to_buffer_fmt+0x30>
 8007766:	2340      	movs	r3, #64	; 0x40
 8007768:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800776c:	4318      	orrs	r0, r3
 800776e:	4770      	bx	lr
 8007770:	4a14      	ldr	r2, [pc, #80]	; (80077c4 <ai_array_to_buffer_fmt+0x8c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d0f8      	beq.n	8007768 <ai_array_to_buffer_fmt+0x30>
 8007776:	dd06      	ble.n	8007786 <ai_array_to_buffer_fmt+0x4e>
 8007778:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <ai_array_to_buffer_fmt+0x90>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d0f4      	beq.n	8007768 <ai_array_to_buffer_fmt+0x30>
 800777e:	320f      	adds	r2, #15
 8007780:	4293      	cmp	r3, r2
 8007782:	d0f1      	beq.n	8007768 <ai_array_to_buffer_fmt+0x30>
 8007784:	e7ef      	b.n	8007766 <ai_array_to_buffer_fmt+0x2e>
 8007786:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800778a:	4293      	cmp	r3, r2
 800778c:	d0ec      	beq.n	8007768 <ai_array_to_buffer_fmt+0x30>
 800778e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007792:	4293      	cmp	r3, r2
 8007794:	d1e7      	bne.n	8007766 <ai_array_to_buffer_fmt+0x2e>
 8007796:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800779a:	4318      	orrs	r0, r3
 800779c:	4770      	bx	lr
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <ai_array_to_buffer_fmt+0x94>)
 80077a0:	4003      	ands	r3, r0
 80077a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077a6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80077aa:	4318      	orrs	r0, r3
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	00060440 	.word	0x00060440
 80077b4:	00840447 	.word	0x00840447
 80077b8:	0084084f 	.word	0x0084084f
 80077bc:	01821040 	.word	0x01821040
 80077c0:	00840840 	.word	0x00840840
 80077c4:	00040447 	.word	0x00040447
 80077c8:	00040840 	.word	0x00040840
 80077cc:	00803fff 	.word	0x00803fff

080077d0 <ai_array_get_byte_size>:
 80077d0:	b1c1      	cbz	r1, 8007804 <ai_array_get_byte_size+0x34>
 80077d2:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80077d6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80077da:	4413      	add	r3, r2
 80077dc:	fb01 f103 	mul.w	r1, r1, r3
 80077e0:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80077e4:	3107      	adds	r1, #7
 80077e6:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80077ea:	f021 0107 	bic.w	r1, r1, #7
 80077ee:	2804      	cmp	r0, #4
 80077f0:	fa21 f102 	lsr.w	r1, r1, r2
 80077f4:	d008      	beq.n	8007808 <ai_array_get_byte_size+0x38>
 80077f6:	2808      	cmp	r0, #8
 80077f8:	d101      	bne.n	80077fe <ai_array_get_byte_size+0x2e>
 80077fa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80077fe:	3107      	adds	r1, #7
 8007800:	08c8      	lsrs	r0, r1, #3
 8007802:	4770      	bx	lr
 8007804:	4608      	mov	r0, r1
 8007806:	4770      	bx	lr
 8007808:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800780c:	3107      	adds	r1, #7
 800780e:	08c8      	lsrs	r0, r1, #3
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop

08007814 <calloc>:
 8007814:	4b02      	ldr	r3, [pc, #8]	; (8007820 <calloc+0xc>)
 8007816:	460a      	mov	r2, r1
 8007818:	4601      	mov	r1, r0
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	f000 b852 	b.w	80078c4 <_calloc_r>
 8007820:	20000ed0 	.word	0x20000ed0

08007824 <__errno>:
 8007824:	4b01      	ldr	r3, [pc, #4]	; (800782c <__errno+0x8>)
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	20000ed0 	.word	0x20000ed0

08007830 <__libc_init_array>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4d0d      	ldr	r5, [pc, #52]	; (8007868 <__libc_init_array+0x38>)
 8007834:	4c0d      	ldr	r4, [pc, #52]	; (800786c <__libc_init_array+0x3c>)
 8007836:	1b64      	subs	r4, r4, r5
 8007838:	10a4      	asrs	r4, r4, #2
 800783a:	2600      	movs	r6, #0
 800783c:	42a6      	cmp	r6, r4
 800783e:	d109      	bne.n	8007854 <__libc_init_array+0x24>
 8007840:	4d0b      	ldr	r5, [pc, #44]	; (8007870 <__libc_init_array+0x40>)
 8007842:	4c0c      	ldr	r4, [pc, #48]	; (8007874 <__libc_init_array+0x44>)
 8007844:	f003 fb7a 	bl	800af3c <_init>
 8007848:	1b64      	subs	r4, r4, r5
 800784a:	10a4      	asrs	r4, r4, #2
 800784c:	2600      	movs	r6, #0
 800784e:	42a6      	cmp	r6, r4
 8007850:	d105      	bne.n	800785e <__libc_init_array+0x2e>
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	f855 3b04 	ldr.w	r3, [r5], #4
 8007858:	4798      	blx	r3
 800785a:	3601      	adds	r6, #1
 800785c:	e7ee      	b.n	800783c <__libc_init_array+0xc>
 800785e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007862:	4798      	blx	r3
 8007864:	3601      	adds	r6, #1
 8007866:	e7f2      	b.n	800784e <__libc_init_array+0x1e>
 8007868:	080669a8 	.word	0x080669a8
 800786c:	080669a8 	.word	0x080669a8
 8007870:	080669a8 	.word	0x080669a8
 8007874:	080669ac 	.word	0x080669ac

08007878 <malloc>:
 8007878:	4b02      	ldr	r3, [pc, #8]	; (8007884 <malloc+0xc>)
 800787a:	4601      	mov	r1, r0
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	f000 b881 	b.w	8007984 <_malloc_r>
 8007882:	bf00      	nop
 8007884:	20000ed0 	.word	0x20000ed0

08007888 <free>:
 8007888:	4b02      	ldr	r3, [pc, #8]	; (8007894 <free+0xc>)
 800788a:	4601      	mov	r1, r0
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	f000 b829 	b.w	80078e4 <_free_r>
 8007892:	bf00      	nop
 8007894:	20000ed0 	.word	0x20000ed0

08007898 <memcpy>:
 8007898:	440a      	add	r2, r1
 800789a:	4291      	cmp	r1, r2
 800789c:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a0:	d100      	bne.n	80078a4 <memcpy+0xc>
 80078a2:	4770      	bx	lr
 80078a4:	b510      	push	{r4, lr}
 80078a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ae:	4291      	cmp	r1, r2
 80078b0:	d1f9      	bne.n	80078a6 <memcpy+0xe>
 80078b2:	bd10      	pop	{r4, pc}

080078b4 <memset>:
 80078b4:	4402      	add	r2, r0
 80078b6:	4603      	mov	r3, r0
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d100      	bne.n	80078be <memset+0xa>
 80078bc:	4770      	bx	lr
 80078be:	f803 1b01 	strb.w	r1, [r3], #1
 80078c2:	e7f9      	b.n	80078b8 <memset+0x4>

080078c4 <_calloc_r>:
 80078c4:	b513      	push	{r0, r1, r4, lr}
 80078c6:	434a      	muls	r2, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	9201      	str	r2, [sp, #4]
 80078cc:	f000 f85a 	bl	8007984 <_malloc_r>
 80078d0:	4604      	mov	r4, r0
 80078d2:	b118      	cbz	r0, 80078dc <_calloc_r+0x18>
 80078d4:	9a01      	ldr	r2, [sp, #4]
 80078d6:	2100      	movs	r1, #0
 80078d8:	f7ff ffec 	bl	80078b4 <memset>
 80078dc:	4620      	mov	r0, r4
 80078de:	b002      	add	sp, #8
 80078e0:	bd10      	pop	{r4, pc}
	...

080078e4 <_free_r>:
 80078e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078e6:	2900      	cmp	r1, #0
 80078e8:	d048      	beq.n	800797c <_free_r+0x98>
 80078ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ee:	9001      	str	r0, [sp, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f1a1 0404 	sub.w	r4, r1, #4
 80078f6:	bfb8      	it	lt
 80078f8:	18e4      	addlt	r4, r4, r3
 80078fa:	f001 ff29 	bl	8009750 <__malloc_lock>
 80078fe:	4a20      	ldr	r2, [pc, #128]	; (8007980 <_free_r+0x9c>)
 8007900:	9801      	ldr	r0, [sp, #4]
 8007902:	6813      	ldr	r3, [r2, #0]
 8007904:	4615      	mov	r5, r2
 8007906:	b933      	cbnz	r3, 8007916 <_free_r+0x32>
 8007908:	6063      	str	r3, [r4, #4]
 800790a:	6014      	str	r4, [r2, #0]
 800790c:	b003      	add	sp, #12
 800790e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007912:	f001 bf23 	b.w	800975c <__malloc_unlock>
 8007916:	42a3      	cmp	r3, r4
 8007918:	d90b      	bls.n	8007932 <_free_r+0x4e>
 800791a:	6821      	ldr	r1, [r4, #0]
 800791c:	1862      	adds	r2, r4, r1
 800791e:	4293      	cmp	r3, r2
 8007920:	bf04      	itt	eq
 8007922:	681a      	ldreq	r2, [r3, #0]
 8007924:	685b      	ldreq	r3, [r3, #4]
 8007926:	6063      	str	r3, [r4, #4]
 8007928:	bf04      	itt	eq
 800792a:	1852      	addeq	r2, r2, r1
 800792c:	6022      	streq	r2, [r4, #0]
 800792e:	602c      	str	r4, [r5, #0]
 8007930:	e7ec      	b.n	800790c <_free_r+0x28>
 8007932:	461a      	mov	r2, r3
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	b10b      	cbz	r3, 800793c <_free_r+0x58>
 8007938:	42a3      	cmp	r3, r4
 800793a:	d9fa      	bls.n	8007932 <_free_r+0x4e>
 800793c:	6811      	ldr	r1, [r2, #0]
 800793e:	1855      	adds	r5, r2, r1
 8007940:	42a5      	cmp	r5, r4
 8007942:	d10b      	bne.n	800795c <_free_r+0x78>
 8007944:	6824      	ldr	r4, [r4, #0]
 8007946:	4421      	add	r1, r4
 8007948:	1854      	adds	r4, r2, r1
 800794a:	42a3      	cmp	r3, r4
 800794c:	6011      	str	r1, [r2, #0]
 800794e:	d1dd      	bne.n	800790c <_free_r+0x28>
 8007950:	681c      	ldr	r4, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	6053      	str	r3, [r2, #4]
 8007956:	4421      	add	r1, r4
 8007958:	6011      	str	r1, [r2, #0]
 800795a:	e7d7      	b.n	800790c <_free_r+0x28>
 800795c:	d902      	bls.n	8007964 <_free_r+0x80>
 800795e:	230c      	movs	r3, #12
 8007960:	6003      	str	r3, [r0, #0]
 8007962:	e7d3      	b.n	800790c <_free_r+0x28>
 8007964:	6825      	ldr	r5, [r4, #0]
 8007966:	1961      	adds	r1, r4, r5
 8007968:	428b      	cmp	r3, r1
 800796a:	bf04      	itt	eq
 800796c:	6819      	ldreq	r1, [r3, #0]
 800796e:	685b      	ldreq	r3, [r3, #4]
 8007970:	6063      	str	r3, [r4, #4]
 8007972:	bf04      	itt	eq
 8007974:	1949      	addeq	r1, r1, r5
 8007976:	6021      	streq	r1, [r4, #0]
 8007978:	6054      	str	r4, [r2, #4]
 800797a:	e7c7      	b.n	800790c <_free_r+0x28>
 800797c:	b003      	add	sp, #12
 800797e:	bd30      	pop	{r4, r5, pc}
 8007980:	200015c8 	.word	0x200015c8

08007984 <_malloc_r>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	1ccd      	adds	r5, r1, #3
 8007988:	f025 0503 	bic.w	r5, r5, #3
 800798c:	3508      	adds	r5, #8
 800798e:	2d0c      	cmp	r5, #12
 8007990:	bf38      	it	cc
 8007992:	250c      	movcc	r5, #12
 8007994:	2d00      	cmp	r5, #0
 8007996:	4606      	mov	r6, r0
 8007998:	db01      	blt.n	800799e <_malloc_r+0x1a>
 800799a:	42a9      	cmp	r1, r5
 800799c:	d903      	bls.n	80079a6 <_malloc_r+0x22>
 800799e:	230c      	movs	r3, #12
 80079a0:	6033      	str	r3, [r6, #0]
 80079a2:	2000      	movs	r0, #0
 80079a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a6:	f001 fed3 	bl	8009750 <__malloc_lock>
 80079aa:	4921      	ldr	r1, [pc, #132]	; (8007a30 <_malloc_r+0xac>)
 80079ac:	680a      	ldr	r2, [r1, #0]
 80079ae:	4614      	mov	r4, r2
 80079b0:	b99c      	cbnz	r4, 80079da <_malloc_r+0x56>
 80079b2:	4f20      	ldr	r7, [pc, #128]	; (8007a34 <_malloc_r+0xb0>)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	b923      	cbnz	r3, 80079c2 <_malloc_r+0x3e>
 80079b8:	4621      	mov	r1, r4
 80079ba:	4630      	mov	r0, r6
 80079bc:	f000 fd3c 	bl	8008438 <_sbrk_r>
 80079c0:	6038      	str	r0, [r7, #0]
 80079c2:	4629      	mov	r1, r5
 80079c4:	4630      	mov	r0, r6
 80079c6:	f000 fd37 	bl	8008438 <_sbrk_r>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	d123      	bne.n	8007a16 <_malloc_r+0x92>
 80079ce:	230c      	movs	r3, #12
 80079d0:	6033      	str	r3, [r6, #0]
 80079d2:	4630      	mov	r0, r6
 80079d4:	f001 fec2 	bl	800975c <__malloc_unlock>
 80079d8:	e7e3      	b.n	80079a2 <_malloc_r+0x1e>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	1b5b      	subs	r3, r3, r5
 80079de:	d417      	bmi.n	8007a10 <_malloc_r+0x8c>
 80079e0:	2b0b      	cmp	r3, #11
 80079e2:	d903      	bls.n	80079ec <_malloc_r+0x68>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	441c      	add	r4, r3
 80079e8:	6025      	str	r5, [r4, #0]
 80079ea:	e004      	b.n	80079f6 <_malloc_r+0x72>
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	42a2      	cmp	r2, r4
 80079f0:	bf0c      	ite	eq
 80079f2:	600b      	streq	r3, [r1, #0]
 80079f4:	6053      	strne	r3, [r2, #4]
 80079f6:	4630      	mov	r0, r6
 80079f8:	f001 feb0 	bl	800975c <__malloc_unlock>
 80079fc:	f104 000b 	add.w	r0, r4, #11
 8007a00:	1d23      	adds	r3, r4, #4
 8007a02:	f020 0007 	bic.w	r0, r0, #7
 8007a06:	1ac2      	subs	r2, r0, r3
 8007a08:	d0cc      	beq.n	80079a4 <_malloc_r+0x20>
 8007a0a:	1a1b      	subs	r3, r3, r0
 8007a0c:	50a3      	str	r3, [r4, r2]
 8007a0e:	e7c9      	b.n	80079a4 <_malloc_r+0x20>
 8007a10:	4622      	mov	r2, r4
 8007a12:	6864      	ldr	r4, [r4, #4]
 8007a14:	e7cc      	b.n	80079b0 <_malloc_r+0x2c>
 8007a16:	1cc4      	adds	r4, r0, #3
 8007a18:	f024 0403 	bic.w	r4, r4, #3
 8007a1c:	42a0      	cmp	r0, r4
 8007a1e:	d0e3      	beq.n	80079e8 <_malloc_r+0x64>
 8007a20:	1a21      	subs	r1, r4, r0
 8007a22:	4630      	mov	r0, r6
 8007a24:	f000 fd08 	bl	8008438 <_sbrk_r>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d1dd      	bne.n	80079e8 <_malloc_r+0x64>
 8007a2c:	e7cf      	b.n	80079ce <_malloc_r+0x4a>
 8007a2e:	bf00      	nop
 8007a30:	200015c8 	.word	0x200015c8
 8007a34:	200015cc 	.word	0x200015cc

08007a38 <__cvt>:
 8007a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3c:	ec55 4b10 	vmov	r4, r5, d0
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	460e      	mov	r6, r1
 8007a44:	4619      	mov	r1, r3
 8007a46:	462b      	mov	r3, r5
 8007a48:	bfbb      	ittet	lt
 8007a4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a4e:	461d      	movlt	r5, r3
 8007a50:	2300      	movge	r3, #0
 8007a52:	232d      	movlt	r3, #45	; 0x2d
 8007a54:	700b      	strb	r3, [r1, #0]
 8007a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a5c:	4691      	mov	r9, r2
 8007a5e:	f023 0820 	bic.w	r8, r3, #32
 8007a62:	bfbc      	itt	lt
 8007a64:	4622      	movlt	r2, r4
 8007a66:	4614      	movlt	r4, r2
 8007a68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a6c:	d005      	beq.n	8007a7a <__cvt+0x42>
 8007a6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a72:	d100      	bne.n	8007a76 <__cvt+0x3e>
 8007a74:	3601      	adds	r6, #1
 8007a76:	2102      	movs	r1, #2
 8007a78:	e000      	b.n	8007a7c <__cvt+0x44>
 8007a7a:	2103      	movs	r1, #3
 8007a7c:	ab03      	add	r3, sp, #12
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	ab02      	add	r3, sp, #8
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	ec45 4b10 	vmov	d0, r4, r5
 8007a88:	4653      	mov	r3, sl
 8007a8a:	4632      	mov	r2, r6
 8007a8c:	f000 fe50 	bl	8008730 <_dtoa_r>
 8007a90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a94:	4607      	mov	r7, r0
 8007a96:	d102      	bne.n	8007a9e <__cvt+0x66>
 8007a98:	f019 0f01 	tst.w	r9, #1
 8007a9c:	d022      	beq.n	8007ae4 <__cvt+0xac>
 8007a9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007aa2:	eb07 0906 	add.w	r9, r7, r6
 8007aa6:	d110      	bne.n	8007aca <__cvt+0x92>
 8007aa8:	783b      	ldrb	r3, [r7, #0]
 8007aaa:	2b30      	cmp	r3, #48	; 0x30
 8007aac:	d10a      	bne.n	8007ac4 <__cvt+0x8c>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	f7f9 f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aba:	b918      	cbnz	r0, 8007ac4 <__cvt+0x8c>
 8007abc:	f1c6 0601 	rsb	r6, r6, #1
 8007ac0:	f8ca 6000 	str.w	r6, [sl]
 8007ac4:	f8da 3000 	ldr.w	r3, [sl]
 8007ac8:	4499      	add	r9, r3
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f9 f801 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ad6:	b108      	cbz	r0, 8007adc <__cvt+0xa4>
 8007ad8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007adc:	2230      	movs	r2, #48	; 0x30
 8007ade:	9b03      	ldr	r3, [sp, #12]
 8007ae0:	454b      	cmp	r3, r9
 8007ae2:	d307      	bcc.n	8007af4 <__cvt+0xbc>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ae8:	1bdb      	subs	r3, r3, r7
 8007aea:	4638      	mov	r0, r7
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	b004      	add	sp, #16
 8007af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af4:	1c59      	adds	r1, r3, #1
 8007af6:	9103      	str	r1, [sp, #12]
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	e7f0      	b.n	8007ade <__cvt+0xa6>

08007afc <__exponent>:
 8007afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007afe:	4603      	mov	r3, r0
 8007b00:	2900      	cmp	r1, #0
 8007b02:	bfb8      	it	lt
 8007b04:	4249      	neglt	r1, r1
 8007b06:	f803 2b02 	strb.w	r2, [r3], #2
 8007b0a:	bfb4      	ite	lt
 8007b0c:	222d      	movlt	r2, #45	; 0x2d
 8007b0e:	222b      	movge	r2, #43	; 0x2b
 8007b10:	2909      	cmp	r1, #9
 8007b12:	7042      	strb	r2, [r0, #1]
 8007b14:	dd2a      	ble.n	8007b6c <__exponent+0x70>
 8007b16:	f10d 0407 	add.w	r4, sp, #7
 8007b1a:	46a4      	mov	ip, r4
 8007b1c:	270a      	movs	r7, #10
 8007b1e:	46a6      	mov	lr, r4
 8007b20:	460a      	mov	r2, r1
 8007b22:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b26:	fb07 1516 	mls	r5, r7, r6, r1
 8007b2a:	3530      	adds	r5, #48	; 0x30
 8007b2c:	2a63      	cmp	r2, #99	; 0x63
 8007b2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b36:	4631      	mov	r1, r6
 8007b38:	dcf1      	bgt.n	8007b1e <__exponent+0x22>
 8007b3a:	3130      	adds	r1, #48	; 0x30
 8007b3c:	f1ae 0502 	sub.w	r5, lr, #2
 8007b40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b44:	1c44      	adds	r4, r0, #1
 8007b46:	4629      	mov	r1, r5
 8007b48:	4561      	cmp	r1, ip
 8007b4a:	d30a      	bcc.n	8007b62 <__exponent+0x66>
 8007b4c:	f10d 0209 	add.w	r2, sp, #9
 8007b50:	eba2 020e 	sub.w	r2, r2, lr
 8007b54:	4565      	cmp	r5, ip
 8007b56:	bf88      	it	hi
 8007b58:	2200      	movhi	r2, #0
 8007b5a:	4413      	add	r3, r2
 8007b5c:	1a18      	subs	r0, r3, r0
 8007b5e:	b003      	add	sp, #12
 8007b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b6a:	e7ed      	b.n	8007b48 <__exponent+0x4c>
 8007b6c:	2330      	movs	r3, #48	; 0x30
 8007b6e:	3130      	adds	r1, #48	; 0x30
 8007b70:	7083      	strb	r3, [r0, #2]
 8007b72:	70c1      	strb	r1, [r0, #3]
 8007b74:	1d03      	adds	r3, r0, #4
 8007b76:	e7f1      	b.n	8007b5c <__exponent+0x60>

08007b78 <_printf_float>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	ed2d 8b02 	vpush	{d8}
 8007b80:	b08d      	sub	sp, #52	; 0x34
 8007b82:	460c      	mov	r4, r1
 8007b84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b88:	4616      	mov	r6, r2
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	f001 fd73 	bl	8009678 <_localeconv_r>
 8007b92:	f8d0 a000 	ldr.w	sl, [r0]
 8007b96:	4650      	mov	r0, sl
 8007b98:	f7f8 fb22 	bl	80001e0 <strlen>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	9305      	str	r3, [sp, #20]
 8007ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ba8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007bac:	3307      	adds	r3, #7
 8007bae:	f023 0307 	bic.w	r3, r3, #7
 8007bb2:	f103 0208 	add.w	r2, r3, #8
 8007bb6:	f8c8 2000 	str.w	r2, [r8]
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bc2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007bc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bca:	9307      	str	r3, [sp, #28]
 8007bcc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bd0:	ee08 0a10 	vmov	s16, r0
 8007bd4:	4b9f      	ldr	r3, [pc, #636]	; (8007e54 <_printf_float+0x2dc>)
 8007bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bda:	f04f 32ff 	mov.w	r2, #4294967295
 8007bde:	f7f8 ffad 	bl	8000b3c <__aeabi_dcmpun>
 8007be2:	bb88      	cbnz	r0, 8007c48 <_printf_float+0xd0>
 8007be4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007be8:	4b9a      	ldr	r3, [pc, #616]	; (8007e54 <_printf_float+0x2dc>)
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295
 8007bee:	f7f8 ff87 	bl	8000b00 <__aeabi_dcmple>
 8007bf2:	bb48      	cbnz	r0, 8007c48 <_printf_float+0xd0>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	f7f8 ff76 	bl	8000aec <__aeabi_dcmplt>
 8007c00:	b110      	cbz	r0, 8007c08 <_printf_float+0x90>
 8007c02:	232d      	movs	r3, #45	; 0x2d
 8007c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c08:	4b93      	ldr	r3, [pc, #588]	; (8007e58 <_printf_float+0x2e0>)
 8007c0a:	4894      	ldr	r0, [pc, #592]	; (8007e5c <_printf_float+0x2e4>)
 8007c0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c10:	bf94      	ite	ls
 8007c12:	4698      	movls	r8, r3
 8007c14:	4680      	movhi	r8, r0
 8007c16:	2303      	movs	r3, #3
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	9b05      	ldr	r3, [sp, #20]
 8007c1c:	f023 0204 	bic.w	r2, r3, #4
 8007c20:	6022      	str	r2, [r4, #0]
 8007c22:	f04f 0900 	mov.w	r9, #0
 8007c26:	9700      	str	r7, [sp, #0]
 8007c28:	4633      	mov	r3, r6
 8007c2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f000 f9d8 	bl	8007fe4 <_printf_common>
 8007c34:	3001      	adds	r0, #1
 8007c36:	f040 8090 	bne.w	8007d5a <_printf_float+0x1e2>
 8007c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3e:	b00d      	add	sp, #52	; 0x34
 8007c40:	ecbd 8b02 	vpop	{d8}
 8007c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c48:	4642      	mov	r2, r8
 8007c4a:	464b      	mov	r3, r9
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	4649      	mov	r1, r9
 8007c50:	f7f8 ff74 	bl	8000b3c <__aeabi_dcmpun>
 8007c54:	b140      	cbz	r0, 8007c68 <_printf_float+0xf0>
 8007c56:	464b      	mov	r3, r9
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bfbc      	itt	lt
 8007c5c:	232d      	movlt	r3, #45	; 0x2d
 8007c5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c62:	487f      	ldr	r0, [pc, #508]	; (8007e60 <_printf_float+0x2e8>)
 8007c64:	4b7f      	ldr	r3, [pc, #508]	; (8007e64 <_printf_float+0x2ec>)
 8007c66:	e7d1      	b.n	8007c0c <_printf_float+0x94>
 8007c68:	6863      	ldr	r3, [r4, #4]
 8007c6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c6e:	9206      	str	r2, [sp, #24]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	d13f      	bne.n	8007cf4 <_printf_float+0x17c>
 8007c74:	2306      	movs	r3, #6
 8007c76:	6063      	str	r3, [r4, #4]
 8007c78:	9b05      	ldr	r3, [sp, #20]
 8007c7a:	6861      	ldr	r1, [r4, #4]
 8007c7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c80:	2300      	movs	r3, #0
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	ab0a      	add	r3, sp, #40	; 0x28
 8007c86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c8a:	ab09      	add	r3, sp, #36	; 0x24
 8007c8c:	ec49 8b10 	vmov	d0, r8, r9
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	6022      	str	r2, [r4, #0]
 8007c94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f7ff fecd 	bl	8007a38 <__cvt>
 8007c9e:	9b06      	ldr	r3, [sp, #24]
 8007ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ca2:	2b47      	cmp	r3, #71	; 0x47
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	d108      	bne.n	8007cba <_printf_float+0x142>
 8007ca8:	1cc8      	adds	r0, r1, #3
 8007caa:	db02      	blt.n	8007cb2 <_printf_float+0x13a>
 8007cac:	6863      	ldr	r3, [r4, #4]
 8007cae:	4299      	cmp	r1, r3
 8007cb0:	dd41      	ble.n	8007d36 <_printf_float+0x1be>
 8007cb2:	f1ab 0b02 	sub.w	fp, fp, #2
 8007cb6:	fa5f fb8b 	uxtb.w	fp, fp
 8007cba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cbe:	d820      	bhi.n	8007d02 <_printf_float+0x18a>
 8007cc0:	3901      	subs	r1, #1
 8007cc2:	465a      	mov	r2, fp
 8007cc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cc8:	9109      	str	r1, [sp, #36]	; 0x24
 8007cca:	f7ff ff17 	bl	8007afc <__exponent>
 8007cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cd0:	1813      	adds	r3, r2, r0
 8007cd2:	2a01      	cmp	r2, #1
 8007cd4:	4681      	mov	r9, r0
 8007cd6:	6123      	str	r3, [r4, #16]
 8007cd8:	dc02      	bgt.n	8007ce0 <_printf_float+0x168>
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	07d2      	lsls	r2, r2, #31
 8007cde:	d501      	bpl.n	8007ce4 <_printf_float+0x16c>
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d09c      	beq.n	8007c26 <_printf_float+0xae>
 8007cec:	232d      	movs	r3, #45	; 0x2d
 8007cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf2:	e798      	b.n	8007c26 <_printf_float+0xae>
 8007cf4:	9a06      	ldr	r2, [sp, #24]
 8007cf6:	2a47      	cmp	r2, #71	; 0x47
 8007cf8:	d1be      	bne.n	8007c78 <_printf_float+0x100>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1bc      	bne.n	8007c78 <_printf_float+0x100>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e7b9      	b.n	8007c76 <_printf_float+0xfe>
 8007d02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d06:	d118      	bne.n	8007d3a <_printf_float+0x1c2>
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	6863      	ldr	r3, [r4, #4]
 8007d0c:	dd0b      	ble.n	8007d26 <_printf_float+0x1ae>
 8007d0e:	6121      	str	r1, [r4, #16]
 8007d10:	b913      	cbnz	r3, 8007d18 <_printf_float+0x1a0>
 8007d12:	6822      	ldr	r2, [r4, #0]
 8007d14:	07d0      	lsls	r0, r2, #31
 8007d16:	d502      	bpl.n	8007d1e <_printf_float+0x1a6>
 8007d18:	3301      	adds	r3, #1
 8007d1a:	440b      	add	r3, r1
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d20:	f04f 0900 	mov.w	r9, #0
 8007d24:	e7de      	b.n	8007ce4 <_printf_float+0x16c>
 8007d26:	b913      	cbnz	r3, 8007d2e <_printf_float+0x1b6>
 8007d28:	6822      	ldr	r2, [r4, #0]
 8007d2a:	07d2      	lsls	r2, r2, #31
 8007d2c:	d501      	bpl.n	8007d32 <_printf_float+0x1ba>
 8007d2e:	3302      	adds	r3, #2
 8007d30:	e7f4      	b.n	8007d1c <_printf_float+0x1a4>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e7f2      	b.n	8007d1c <_printf_float+0x1a4>
 8007d36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3c:	4299      	cmp	r1, r3
 8007d3e:	db05      	blt.n	8007d4c <_printf_float+0x1d4>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	6121      	str	r1, [r4, #16]
 8007d44:	07d8      	lsls	r0, r3, #31
 8007d46:	d5ea      	bpl.n	8007d1e <_printf_float+0x1a6>
 8007d48:	1c4b      	adds	r3, r1, #1
 8007d4a:	e7e7      	b.n	8007d1c <_printf_float+0x1a4>
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	bfd4      	ite	le
 8007d50:	f1c1 0202 	rsble	r2, r1, #2
 8007d54:	2201      	movgt	r2, #1
 8007d56:	4413      	add	r3, r2
 8007d58:	e7e0      	b.n	8007d1c <_printf_float+0x1a4>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	055a      	lsls	r2, r3, #21
 8007d5e:	d407      	bmi.n	8007d70 <_printf_float+0x1f8>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	4642      	mov	r2, r8
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d12c      	bne.n	8007dc8 <_printf_float+0x250>
 8007d6e:	e764      	b.n	8007c3a <_printf_float+0xc2>
 8007d70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d74:	f240 80e0 	bls.w	8007f38 <_printf_float+0x3c0>
 8007d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f7f8 feaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d034      	beq.n	8007df2 <_printf_float+0x27a>
 8007d88:	4a37      	ldr	r2, [pc, #220]	; (8007e68 <_printf_float+0x2f0>)
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	f43f af51 	beq.w	8007c3a <_printf_float+0xc2>
 8007d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	db02      	blt.n	8007da6 <_printf_float+0x22e>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	07d8      	lsls	r0, r3, #31
 8007da4:	d510      	bpl.n	8007dc8 <_printf_float+0x250>
 8007da6:	ee18 3a10 	vmov	r3, s16
 8007daa:	4652      	mov	r2, sl
 8007dac:	4631      	mov	r1, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	f43f af41 	beq.w	8007c3a <_printf_float+0xc2>
 8007db8:	f04f 0800 	mov.w	r8, #0
 8007dbc:	f104 091a 	add.w	r9, r4, #26
 8007dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	4543      	cmp	r3, r8
 8007dc6:	dc09      	bgt.n	8007ddc <_printf_float+0x264>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	079b      	lsls	r3, r3, #30
 8007dcc:	f100 8105 	bmi.w	8007fda <_printf_float+0x462>
 8007dd0:	68e0      	ldr	r0, [r4, #12]
 8007dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd4:	4298      	cmp	r0, r3
 8007dd6:	bfb8      	it	lt
 8007dd8:	4618      	movlt	r0, r3
 8007dda:	e730      	b.n	8007c3e <_printf_float+0xc6>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	464a      	mov	r2, r9
 8007de0:	4631      	mov	r1, r6
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b8      	blx	r7
 8007de6:	3001      	adds	r0, #1
 8007de8:	f43f af27 	beq.w	8007c3a <_printf_float+0xc2>
 8007dec:	f108 0801 	add.w	r8, r8, #1
 8007df0:	e7e6      	b.n	8007dc0 <_printf_float+0x248>
 8007df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dc39      	bgt.n	8007e6c <_printf_float+0x2f4>
 8007df8:	4a1b      	ldr	r2, [pc, #108]	; (8007e68 <_printf_float+0x2f0>)
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	4628      	mov	r0, r5
 8007e00:	47b8      	blx	r7
 8007e02:	3001      	adds	r0, #1
 8007e04:	f43f af19 	beq.w	8007c3a <_printf_float+0xc2>
 8007e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	d102      	bne.n	8007e16 <_printf_float+0x29e>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07d9      	lsls	r1, r3, #31
 8007e14:	d5d8      	bpl.n	8007dc8 <_printf_float+0x250>
 8007e16:	ee18 3a10 	vmov	r3, s16
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47b8      	blx	r7
 8007e22:	3001      	adds	r0, #1
 8007e24:	f43f af09 	beq.w	8007c3a <_printf_float+0xc2>
 8007e28:	f04f 0900 	mov.w	r9, #0
 8007e2c:	f104 0a1a 	add.w	sl, r4, #26
 8007e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e32:	425b      	negs	r3, r3
 8007e34:	454b      	cmp	r3, r9
 8007e36:	dc01      	bgt.n	8007e3c <_printf_float+0x2c4>
 8007e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3a:	e792      	b.n	8007d62 <_printf_float+0x1ea>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	4652      	mov	r2, sl
 8007e40:	4631      	mov	r1, r6
 8007e42:	4628      	mov	r0, r5
 8007e44:	47b8      	blx	r7
 8007e46:	3001      	adds	r0, #1
 8007e48:	f43f aef7 	beq.w	8007c3a <_printf_float+0xc2>
 8007e4c:	f109 0901 	add.w	r9, r9, #1
 8007e50:	e7ee      	b.n	8007e30 <_printf_float+0x2b8>
 8007e52:	bf00      	nop
 8007e54:	7fefffff 	.word	0x7fefffff
 8007e58:	08066590 	.word	0x08066590
 8007e5c:	08066594 	.word	0x08066594
 8007e60:	0806659c 	.word	0x0806659c
 8007e64:	08066598 	.word	0x08066598
 8007e68:	080665a0 	.word	0x080665a0
 8007e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e70:	429a      	cmp	r2, r3
 8007e72:	bfa8      	it	ge
 8007e74:	461a      	movge	r2, r3
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	4691      	mov	r9, r2
 8007e7a:	dc37      	bgt.n	8007eec <_printf_float+0x374>
 8007e7c:	f04f 0b00 	mov.w	fp, #0
 8007e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e84:	f104 021a 	add.w	r2, r4, #26
 8007e88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	eba3 0309 	sub.w	r3, r3, r9
 8007e90:	455b      	cmp	r3, fp
 8007e92:	dc33      	bgt.n	8007efc <_printf_float+0x384>
 8007e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	db3b      	blt.n	8007f14 <_printf_float+0x39c>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	07da      	lsls	r2, r3, #31
 8007ea0:	d438      	bmi.n	8007f14 <_printf_float+0x39c>
 8007ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ea4:	9b05      	ldr	r3, [sp, #20]
 8007ea6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	eba2 0901 	sub.w	r9, r2, r1
 8007eae:	4599      	cmp	r9, r3
 8007eb0:	bfa8      	it	ge
 8007eb2:	4699      	movge	r9, r3
 8007eb4:	f1b9 0f00 	cmp.w	r9, #0
 8007eb8:	dc35      	bgt.n	8007f26 <_printf_float+0x3ae>
 8007eba:	f04f 0800 	mov.w	r8, #0
 8007ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ec2:	f104 0a1a 	add.w	sl, r4, #26
 8007ec6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	eba3 0309 	sub.w	r3, r3, r9
 8007ed0:	4543      	cmp	r3, r8
 8007ed2:	f77f af79 	ble.w	8007dc8 <_printf_float+0x250>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4652      	mov	r2, sl
 8007eda:	4631      	mov	r1, r6
 8007edc:	4628      	mov	r0, r5
 8007ede:	47b8      	blx	r7
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	f43f aeaa 	beq.w	8007c3a <_printf_float+0xc2>
 8007ee6:	f108 0801 	add.w	r8, r8, #1
 8007eea:	e7ec      	b.n	8007ec6 <_printf_float+0x34e>
 8007eec:	4613      	mov	r3, r2
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b8      	blx	r7
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	d1c0      	bne.n	8007e7c <_printf_float+0x304>
 8007efa:	e69e      	b.n	8007c3a <_printf_float+0xc2>
 8007efc:	2301      	movs	r3, #1
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	9205      	str	r2, [sp, #20]
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	f43f ae97 	beq.w	8007c3a <_printf_float+0xc2>
 8007f0c:	9a05      	ldr	r2, [sp, #20]
 8007f0e:	f10b 0b01 	add.w	fp, fp, #1
 8007f12:	e7b9      	b.n	8007e88 <_printf_float+0x310>
 8007f14:	ee18 3a10 	vmov	r3, s16
 8007f18:	4652      	mov	r2, sl
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	47b8      	blx	r7
 8007f20:	3001      	adds	r0, #1
 8007f22:	d1be      	bne.n	8007ea2 <_printf_float+0x32a>
 8007f24:	e689      	b.n	8007c3a <_printf_float+0xc2>
 8007f26:	9a05      	ldr	r2, [sp, #20]
 8007f28:	464b      	mov	r3, r9
 8007f2a:	4442      	add	r2, r8
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b8      	blx	r7
 8007f32:	3001      	adds	r0, #1
 8007f34:	d1c1      	bne.n	8007eba <_printf_float+0x342>
 8007f36:	e680      	b.n	8007c3a <_printf_float+0xc2>
 8007f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f3a:	2a01      	cmp	r2, #1
 8007f3c:	dc01      	bgt.n	8007f42 <_printf_float+0x3ca>
 8007f3e:	07db      	lsls	r3, r3, #31
 8007f40:	d538      	bpl.n	8007fb4 <_printf_float+0x43c>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4642      	mov	r2, r8
 8007f46:	4631      	mov	r1, r6
 8007f48:	4628      	mov	r0, r5
 8007f4a:	47b8      	blx	r7
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	f43f ae74 	beq.w	8007c3a <_printf_float+0xc2>
 8007f52:	ee18 3a10 	vmov	r3, s16
 8007f56:	4652      	mov	r2, sl
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b8      	blx	r7
 8007f5e:	3001      	adds	r0, #1
 8007f60:	f43f ae6b 	beq.w	8007c3a <_printf_float+0xc2>
 8007f64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f7f8 fdb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f70:	b9d8      	cbnz	r0, 8007faa <_printf_float+0x432>
 8007f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f74:	f108 0201 	add.w	r2, r8, #1
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b8      	blx	r7
 8007f80:	3001      	adds	r0, #1
 8007f82:	d10e      	bne.n	8007fa2 <_printf_float+0x42a>
 8007f84:	e659      	b.n	8007c3a <_printf_float+0xc2>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4652      	mov	r2, sl
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	47b8      	blx	r7
 8007f90:	3001      	adds	r0, #1
 8007f92:	f43f ae52 	beq.w	8007c3a <_printf_float+0xc2>
 8007f96:	f108 0801 	add.w	r8, r8, #1
 8007f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	4543      	cmp	r3, r8
 8007fa0:	dcf1      	bgt.n	8007f86 <_printf_float+0x40e>
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fa8:	e6dc      	b.n	8007d64 <_printf_float+0x1ec>
 8007faa:	f04f 0800 	mov.w	r8, #0
 8007fae:	f104 0a1a 	add.w	sl, r4, #26
 8007fb2:	e7f2      	b.n	8007f9a <_printf_float+0x422>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	4642      	mov	r2, r8
 8007fb8:	e7df      	b.n	8007f7a <_printf_float+0x402>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	464a      	mov	r2, r9
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b8      	blx	r7
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f43f ae38 	beq.w	8007c3a <_printf_float+0xc2>
 8007fca:	f108 0801 	add.w	r8, r8, #1
 8007fce:	68e3      	ldr	r3, [r4, #12]
 8007fd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fd2:	1a5b      	subs	r3, r3, r1
 8007fd4:	4543      	cmp	r3, r8
 8007fd6:	dcf0      	bgt.n	8007fba <_printf_float+0x442>
 8007fd8:	e6fa      	b.n	8007dd0 <_printf_float+0x258>
 8007fda:	f04f 0800 	mov.w	r8, #0
 8007fde:	f104 0919 	add.w	r9, r4, #25
 8007fe2:	e7f4      	b.n	8007fce <_printf_float+0x456>

08007fe4 <_printf_common>:
 8007fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	4616      	mov	r6, r2
 8007fea:	4699      	mov	r9, r3
 8007fec:	688a      	ldr	r2, [r1, #8]
 8007fee:	690b      	ldr	r3, [r1, #16]
 8007ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	bfb8      	it	lt
 8007ff8:	4613      	movlt	r3, r2
 8007ffa:	6033      	str	r3, [r6, #0]
 8007ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008000:	4607      	mov	r7, r0
 8008002:	460c      	mov	r4, r1
 8008004:	b10a      	cbz	r2, 800800a <_printf_common+0x26>
 8008006:	3301      	adds	r3, #1
 8008008:	6033      	str	r3, [r6, #0]
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	0699      	lsls	r1, r3, #26
 800800e:	bf42      	ittt	mi
 8008010:	6833      	ldrmi	r3, [r6, #0]
 8008012:	3302      	addmi	r3, #2
 8008014:	6033      	strmi	r3, [r6, #0]
 8008016:	6825      	ldr	r5, [r4, #0]
 8008018:	f015 0506 	ands.w	r5, r5, #6
 800801c:	d106      	bne.n	800802c <_printf_common+0x48>
 800801e:	f104 0a19 	add.w	sl, r4, #25
 8008022:	68e3      	ldr	r3, [r4, #12]
 8008024:	6832      	ldr	r2, [r6, #0]
 8008026:	1a9b      	subs	r3, r3, r2
 8008028:	42ab      	cmp	r3, r5
 800802a:	dc26      	bgt.n	800807a <_printf_common+0x96>
 800802c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008030:	1e13      	subs	r3, r2, #0
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	bf18      	it	ne
 8008036:	2301      	movne	r3, #1
 8008038:	0692      	lsls	r2, r2, #26
 800803a:	d42b      	bmi.n	8008094 <_printf_common+0xb0>
 800803c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008040:	4649      	mov	r1, r9
 8008042:	4638      	mov	r0, r7
 8008044:	47c0      	blx	r8
 8008046:	3001      	adds	r0, #1
 8008048:	d01e      	beq.n	8008088 <_printf_common+0xa4>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	68e5      	ldr	r5, [r4, #12]
 800804e:	6832      	ldr	r2, [r6, #0]
 8008050:	f003 0306 	and.w	r3, r3, #6
 8008054:	2b04      	cmp	r3, #4
 8008056:	bf08      	it	eq
 8008058:	1aad      	subeq	r5, r5, r2
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	6922      	ldr	r2, [r4, #16]
 800805e:	bf0c      	ite	eq
 8008060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008064:	2500      	movne	r5, #0
 8008066:	4293      	cmp	r3, r2
 8008068:	bfc4      	itt	gt
 800806a:	1a9b      	subgt	r3, r3, r2
 800806c:	18ed      	addgt	r5, r5, r3
 800806e:	2600      	movs	r6, #0
 8008070:	341a      	adds	r4, #26
 8008072:	42b5      	cmp	r5, r6
 8008074:	d11a      	bne.n	80080ac <_printf_common+0xc8>
 8008076:	2000      	movs	r0, #0
 8008078:	e008      	b.n	800808c <_printf_common+0xa8>
 800807a:	2301      	movs	r3, #1
 800807c:	4652      	mov	r2, sl
 800807e:	4649      	mov	r1, r9
 8008080:	4638      	mov	r0, r7
 8008082:	47c0      	blx	r8
 8008084:	3001      	adds	r0, #1
 8008086:	d103      	bne.n	8008090 <_printf_common+0xac>
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008090:	3501      	adds	r5, #1
 8008092:	e7c6      	b.n	8008022 <_printf_common+0x3e>
 8008094:	18e1      	adds	r1, r4, r3
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	2030      	movs	r0, #48	; 0x30
 800809a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800809e:	4422      	add	r2, r4
 80080a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080a8:	3302      	adds	r3, #2
 80080aa:	e7c7      	b.n	800803c <_printf_common+0x58>
 80080ac:	2301      	movs	r3, #1
 80080ae:	4622      	mov	r2, r4
 80080b0:	4649      	mov	r1, r9
 80080b2:	4638      	mov	r0, r7
 80080b4:	47c0      	blx	r8
 80080b6:	3001      	adds	r0, #1
 80080b8:	d0e6      	beq.n	8008088 <_printf_common+0xa4>
 80080ba:	3601      	adds	r6, #1
 80080bc:	e7d9      	b.n	8008072 <_printf_common+0x8e>
	...

080080c0 <_printf_i>:
 80080c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080c4:	460c      	mov	r4, r1
 80080c6:	4691      	mov	r9, r2
 80080c8:	7e27      	ldrb	r7, [r4, #24]
 80080ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080cc:	2f78      	cmp	r7, #120	; 0x78
 80080ce:	4680      	mov	r8, r0
 80080d0:	469a      	mov	sl, r3
 80080d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080d6:	d807      	bhi.n	80080e8 <_printf_i+0x28>
 80080d8:	2f62      	cmp	r7, #98	; 0x62
 80080da:	d80a      	bhi.n	80080f2 <_printf_i+0x32>
 80080dc:	2f00      	cmp	r7, #0
 80080de:	f000 80d8 	beq.w	8008292 <_printf_i+0x1d2>
 80080e2:	2f58      	cmp	r7, #88	; 0x58
 80080e4:	f000 80a3 	beq.w	800822e <_printf_i+0x16e>
 80080e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080f0:	e03a      	b.n	8008168 <_printf_i+0xa8>
 80080f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080f6:	2b15      	cmp	r3, #21
 80080f8:	d8f6      	bhi.n	80080e8 <_printf_i+0x28>
 80080fa:	a001      	add	r0, pc, #4	; (adr r0, 8008100 <_printf_i+0x40>)
 80080fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008100:	08008159 	.word	0x08008159
 8008104:	0800816d 	.word	0x0800816d
 8008108:	080080e9 	.word	0x080080e9
 800810c:	080080e9 	.word	0x080080e9
 8008110:	080080e9 	.word	0x080080e9
 8008114:	080080e9 	.word	0x080080e9
 8008118:	0800816d 	.word	0x0800816d
 800811c:	080080e9 	.word	0x080080e9
 8008120:	080080e9 	.word	0x080080e9
 8008124:	080080e9 	.word	0x080080e9
 8008128:	080080e9 	.word	0x080080e9
 800812c:	08008279 	.word	0x08008279
 8008130:	0800819d 	.word	0x0800819d
 8008134:	0800825b 	.word	0x0800825b
 8008138:	080080e9 	.word	0x080080e9
 800813c:	080080e9 	.word	0x080080e9
 8008140:	0800829b 	.word	0x0800829b
 8008144:	080080e9 	.word	0x080080e9
 8008148:	0800819d 	.word	0x0800819d
 800814c:	080080e9 	.word	0x080080e9
 8008150:	080080e9 	.word	0x080080e9
 8008154:	08008263 	.word	0x08008263
 8008158:	680b      	ldr	r3, [r1, #0]
 800815a:	1d1a      	adds	r2, r3, #4
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	600a      	str	r2, [r1, #0]
 8008160:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008168:	2301      	movs	r3, #1
 800816a:	e0a3      	b.n	80082b4 <_printf_i+0x1f4>
 800816c:	6825      	ldr	r5, [r4, #0]
 800816e:	6808      	ldr	r0, [r1, #0]
 8008170:	062e      	lsls	r6, r5, #24
 8008172:	f100 0304 	add.w	r3, r0, #4
 8008176:	d50a      	bpl.n	800818e <_printf_i+0xce>
 8008178:	6805      	ldr	r5, [r0, #0]
 800817a:	600b      	str	r3, [r1, #0]
 800817c:	2d00      	cmp	r5, #0
 800817e:	da03      	bge.n	8008188 <_printf_i+0xc8>
 8008180:	232d      	movs	r3, #45	; 0x2d
 8008182:	426d      	negs	r5, r5
 8008184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008188:	485e      	ldr	r0, [pc, #376]	; (8008304 <_printf_i+0x244>)
 800818a:	230a      	movs	r3, #10
 800818c:	e019      	b.n	80081c2 <_printf_i+0x102>
 800818e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008192:	6805      	ldr	r5, [r0, #0]
 8008194:	600b      	str	r3, [r1, #0]
 8008196:	bf18      	it	ne
 8008198:	b22d      	sxthne	r5, r5
 800819a:	e7ef      	b.n	800817c <_printf_i+0xbc>
 800819c:	680b      	ldr	r3, [r1, #0]
 800819e:	6825      	ldr	r5, [r4, #0]
 80081a0:	1d18      	adds	r0, r3, #4
 80081a2:	6008      	str	r0, [r1, #0]
 80081a4:	0628      	lsls	r0, r5, #24
 80081a6:	d501      	bpl.n	80081ac <_printf_i+0xec>
 80081a8:	681d      	ldr	r5, [r3, #0]
 80081aa:	e002      	b.n	80081b2 <_printf_i+0xf2>
 80081ac:	0669      	lsls	r1, r5, #25
 80081ae:	d5fb      	bpl.n	80081a8 <_printf_i+0xe8>
 80081b0:	881d      	ldrh	r5, [r3, #0]
 80081b2:	4854      	ldr	r0, [pc, #336]	; (8008304 <_printf_i+0x244>)
 80081b4:	2f6f      	cmp	r7, #111	; 0x6f
 80081b6:	bf0c      	ite	eq
 80081b8:	2308      	moveq	r3, #8
 80081ba:	230a      	movne	r3, #10
 80081bc:	2100      	movs	r1, #0
 80081be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081c2:	6866      	ldr	r6, [r4, #4]
 80081c4:	60a6      	str	r6, [r4, #8]
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	bfa2      	ittt	ge
 80081ca:	6821      	ldrge	r1, [r4, #0]
 80081cc:	f021 0104 	bicge.w	r1, r1, #4
 80081d0:	6021      	strge	r1, [r4, #0]
 80081d2:	b90d      	cbnz	r5, 80081d8 <_printf_i+0x118>
 80081d4:	2e00      	cmp	r6, #0
 80081d6:	d04d      	beq.n	8008274 <_printf_i+0x1b4>
 80081d8:	4616      	mov	r6, r2
 80081da:	fbb5 f1f3 	udiv	r1, r5, r3
 80081de:	fb03 5711 	mls	r7, r3, r1, r5
 80081e2:	5dc7      	ldrb	r7, [r0, r7]
 80081e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081e8:	462f      	mov	r7, r5
 80081ea:	42bb      	cmp	r3, r7
 80081ec:	460d      	mov	r5, r1
 80081ee:	d9f4      	bls.n	80081da <_printf_i+0x11a>
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d10b      	bne.n	800820c <_printf_i+0x14c>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	07df      	lsls	r7, r3, #31
 80081f8:	d508      	bpl.n	800820c <_printf_i+0x14c>
 80081fa:	6923      	ldr	r3, [r4, #16]
 80081fc:	6861      	ldr	r1, [r4, #4]
 80081fe:	4299      	cmp	r1, r3
 8008200:	bfde      	ittt	le
 8008202:	2330      	movle	r3, #48	; 0x30
 8008204:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008208:	f106 36ff 	addle.w	r6, r6, #4294967295
 800820c:	1b92      	subs	r2, r2, r6
 800820e:	6122      	str	r2, [r4, #16]
 8008210:	f8cd a000 	str.w	sl, [sp]
 8008214:	464b      	mov	r3, r9
 8008216:	aa03      	add	r2, sp, #12
 8008218:	4621      	mov	r1, r4
 800821a:	4640      	mov	r0, r8
 800821c:	f7ff fee2 	bl	8007fe4 <_printf_common>
 8008220:	3001      	adds	r0, #1
 8008222:	d14c      	bne.n	80082be <_printf_i+0x1fe>
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	b004      	add	sp, #16
 800822a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822e:	4835      	ldr	r0, [pc, #212]	; (8008304 <_printf_i+0x244>)
 8008230:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	680e      	ldr	r6, [r1, #0]
 8008238:	061f      	lsls	r7, r3, #24
 800823a:	f856 5b04 	ldr.w	r5, [r6], #4
 800823e:	600e      	str	r6, [r1, #0]
 8008240:	d514      	bpl.n	800826c <_printf_i+0x1ac>
 8008242:	07d9      	lsls	r1, r3, #31
 8008244:	bf44      	itt	mi
 8008246:	f043 0320 	orrmi.w	r3, r3, #32
 800824a:	6023      	strmi	r3, [r4, #0]
 800824c:	b91d      	cbnz	r5, 8008256 <_printf_i+0x196>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	f023 0320 	bic.w	r3, r3, #32
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	2310      	movs	r3, #16
 8008258:	e7b0      	b.n	80081bc <_printf_i+0xfc>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	f043 0320 	orr.w	r3, r3, #32
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	2378      	movs	r3, #120	; 0x78
 8008264:	4828      	ldr	r0, [pc, #160]	; (8008308 <_printf_i+0x248>)
 8008266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800826a:	e7e3      	b.n	8008234 <_printf_i+0x174>
 800826c:	065e      	lsls	r6, r3, #25
 800826e:	bf48      	it	mi
 8008270:	b2ad      	uxthmi	r5, r5
 8008272:	e7e6      	b.n	8008242 <_printf_i+0x182>
 8008274:	4616      	mov	r6, r2
 8008276:	e7bb      	b.n	80081f0 <_printf_i+0x130>
 8008278:	680b      	ldr	r3, [r1, #0]
 800827a:	6826      	ldr	r6, [r4, #0]
 800827c:	6960      	ldr	r0, [r4, #20]
 800827e:	1d1d      	adds	r5, r3, #4
 8008280:	600d      	str	r5, [r1, #0]
 8008282:	0635      	lsls	r5, r6, #24
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	d501      	bpl.n	800828c <_printf_i+0x1cc>
 8008288:	6018      	str	r0, [r3, #0]
 800828a:	e002      	b.n	8008292 <_printf_i+0x1d2>
 800828c:	0671      	lsls	r1, r6, #25
 800828e:	d5fb      	bpl.n	8008288 <_printf_i+0x1c8>
 8008290:	8018      	strh	r0, [r3, #0]
 8008292:	2300      	movs	r3, #0
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	4616      	mov	r6, r2
 8008298:	e7ba      	b.n	8008210 <_printf_i+0x150>
 800829a:	680b      	ldr	r3, [r1, #0]
 800829c:	1d1a      	adds	r2, r3, #4
 800829e:	600a      	str	r2, [r1, #0]
 80082a0:	681e      	ldr	r6, [r3, #0]
 80082a2:	6862      	ldr	r2, [r4, #4]
 80082a4:	2100      	movs	r1, #0
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7f7 ffa2 	bl	80001f0 <memchr>
 80082ac:	b108      	cbz	r0, 80082b2 <_printf_i+0x1f2>
 80082ae:	1b80      	subs	r0, r0, r6
 80082b0:	6060      	str	r0, [r4, #4]
 80082b2:	6863      	ldr	r3, [r4, #4]
 80082b4:	6123      	str	r3, [r4, #16]
 80082b6:	2300      	movs	r3, #0
 80082b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082bc:	e7a8      	b.n	8008210 <_printf_i+0x150>
 80082be:	6923      	ldr	r3, [r4, #16]
 80082c0:	4632      	mov	r2, r6
 80082c2:	4649      	mov	r1, r9
 80082c4:	4640      	mov	r0, r8
 80082c6:	47d0      	blx	sl
 80082c8:	3001      	adds	r0, #1
 80082ca:	d0ab      	beq.n	8008224 <_printf_i+0x164>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	079b      	lsls	r3, r3, #30
 80082d0:	d413      	bmi.n	80082fa <_printf_i+0x23a>
 80082d2:	68e0      	ldr	r0, [r4, #12]
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	4298      	cmp	r0, r3
 80082d8:	bfb8      	it	lt
 80082da:	4618      	movlt	r0, r3
 80082dc:	e7a4      	b.n	8008228 <_printf_i+0x168>
 80082de:	2301      	movs	r3, #1
 80082e0:	4632      	mov	r2, r6
 80082e2:	4649      	mov	r1, r9
 80082e4:	4640      	mov	r0, r8
 80082e6:	47d0      	blx	sl
 80082e8:	3001      	adds	r0, #1
 80082ea:	d09b      	beq.n	8008224 <_printf_i+0x164>
 80082ec:	3501      	adds	r5, #1
 80082ee:	68e3      	ldr	r3, [r4, #12]
 80082f0:	9903      	ldr	r1, [sp, #12]
 80082f2:	1a5b      	subs	r3, r3, r1
 80082f4:	42ab      	cmp	r3, r5
 80082f6:	dcf2      	bgt.n	80082de <_printf_i+0x21e>
 80082f8:	e7eb      	b.n	80082d2 <_printf_i+0x212>
 80082fa:	2500      	movs	r5, #0
 80082fc:	f104 0619 	add.w	r6, r4, #25
 8008300:	e7f5      	b.n	80082ee <_printf_i+0x22e>
 8008302:	bf00      	nop
 8008304:	080665a2 	.word	0x080665a2
 8008308:	080665b3 	.word	0x080665b3

0800830c <iprintf>:
 800830c:	b40f      	push	{r0, r1, r2, r3}
 800830e:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <iprintf+0x2c>)
 8008310:	b513      	push	{r0, r1, r4, lr}
 8008312:	681c      	ldr	r4, [r3, #0]
 8008314:	b124      	cbz	r4, 8008320 <iprintf+0x14>
 8008316:	69a3      	ldr	r3, [r4, #24]
 8008318:	b913      	cbnz	r3, 8008320 <iprintf+0x14>
 800831a:	4620      	mov	r0, r4
 800831c:	f001 f90e 	bl	800953c <__sinit>
 8008320:	ab05      	add	r3, sp, #20
 8008322:	9a04      	ldr	r2, [sp, #16]
 8008324:	68a1      	ldr	r1, [r4, #8]
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	4620      	mov	r0, r4
 800832a:	f001 ff47 	bl	800a1bc <_vfiprintf_r>
 800832e:	b002      	add	sp, #8
 8008330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008334:	b004      	add	sp, #16
 8008336:	4770      	bx	lr
 8008338:	20000ed0 	.word	0x20000ed0

0800833c <_puts_r>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	460e      	mov	r6, r1
 8008340:	4605      	mov	r5, r0
 8008342:	b118      	cbz	r0, 800834c <_puts_r+0x10>
 8008344:	6983      	ldr	r3, [r0, #24]
 8008346:	b90b      	cbnz	r3, 800834c <_puts_r+0x10>
 8008348:	f001 f8f8 	bl	800953c <__sinit>
 800834c:	69ab      	ldr	r3, [r5, #24]
 800834e:	68ac      	ldr	r4, [r5, #8]
 8008350:	b913      	cbnz	r3, 8008358 <_puts_r+0x1c>
 8008352:	4628      	mov	r0, r5
 8008354:	f001 f8f2 	bl	800953c <__sinit>
 8008358:	4b2c      	ldr	r3, [pc, #176]	; (800840c <_puts_r+0xd0>)
 800835a:	429c      	cmp	r4, r3
 800835c:	d120      	bne.n	80083a0 <_puts_r+0x64>
 800835e:	686c      	ldr	r4, [r5, #4]
 8008360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008362:	07db      	lsls	r3, r3, #31
 8008364:	d405      	bmi.n	8008372 <_puts_r+0x36>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	0598      	lsls	r0, r3, #22
 800836a:	d402      	bmi.n	8008372 <_puts_r+0x36>
 800836c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836e:	f001 f988 	bl	8009682 <__retarget_lock_acquire_recursive>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	0719      	lsls	r1, r3, #28
 8008376:	d51d      	bpl.n	80083b4 <_puts_r+0x78>
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	b1db      	cbz	r3, 80083b4 <_puts_r+0x78>
 800837c:	3e01      	subs	r6, #1
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008384:	3b01      	subs	r3, #1
 8008386:	60a3      	str	r3, [r4, #8]
 8008388:	bb39      	cbnz	r1, 80083da <_puts_r+0x9e>
 800838a:	2b00      	cmp	r3, #0
 800838c:	da38      	bge.n	8008400 <_puts_r+0xc4>
 800838e:	4622      	mov	r2, r4
 8008390:	210a      	movs	r1, #10
 8008392:	4628      	mov	r0, r5
 8008394:	f000 f880 	bl	8008498 <__swbuf_r>
 8008398:	3001      	adds	r0, #1
 800839a:	d011      	beq.n	80083c0 <_puts_r+0x84>
 800839c:	250a      	movs	r5, #10
 800839e:	e011      	b.n	80083c4 <_puts_r+0x88>
 80083a0:	4b1b      	ldr	r3, [pc, #108]	; (8008410 <_puts_r+0xd4>)
 80083a2:	429c      	cmp	r4, r3
 80083a4:	d101      	bne.n	80083aa <_puts_r+0x6e>
 80083a6:	68ac      	ldr	r4, [r5, #8]
 80083a8:	e7da      	b.n	8008360 <_puts_r+0x24>
 80083aa:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <_puts_r+0xd8>)
 80083ac:	429c      	cmp	r4, r3
 80083ae:	bf08      	it	eq
 80083b0:	68ec      	ldreq	r4, [r5, #12]
 80083b2:	e7d5      	b.n	8008360 <_puts_r+0x24>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4628      	mov	r0, r5
 80083b8:	f000 f8c0 	bl	800853c <__swsetup_r>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d0dd      	beq.n	800837c <_puts_r+0x40>
 80083c0:	f04f 35ff 	mov.w	r5, #4294967295
 80083c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083c6:	07da      	lsls	r2, r3, #31
 80083c8:	d405      	bmi.n	80083d6 <_puts_r+0x9a>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	059b      	lsls	r3, r3, #22
 80083ce:	d402      	bmi.n	80083d6 <_puts_r+0x9a>
 80083d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083d2:	f001 f957 	bl	8009684 <__retarget_lock_release_recursive>
 80083d6:	4628      	mov	r0, r5
 80083d8:	bd70      	pop	{r4, r5, r6, pc}
 80083da:	2b00      	cmp	r3, #0
 80083dc:	da04      	bge.n	80083e8 <_puts_r+0xac>
 80083de:	69a2      	ldr	r2, [r4, #24]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	dc06      	bgt.n	80083f2 <_puts_r+0xb6>
 80083e4:	290a      	cmp	r1, #10
 80083e6:	d004      	beq.n	80083f2 <_puts_r+0xb6>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	6022      	str	r2, [r4, #0]
 80083ee:	7019      	strb	r1, [r3, #0]
 80083f0:	e7c5      	b.n	800837e <_puts_r+0x42>
 80083f2:	4622      	mov	r2, r4
 80083f4:	4628      	mov	r0, r5
 80083f6:	f000 f84f 	bl	8008498 <__swbuf_r>
 80083fa:	3001      	adds	r0, #1
 80083fc:	d1bf      	bne.n	800837e <_puts_r+0x42>
 80083fe:	e7df      	b.n	80083c0 <_puts_r+0x84>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	250a      	movs	r5, #10
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	701d      	strb	r5, [r3, #0]
 800840a:	e7db      	b.n	80083c4 <_puts_r+0x88>
 800840c:	08066678 	.word	0x08066678
 8008410:	08066698 	.word	0x08066698
 8008414:	08066658 	.word	0x08066658

08008418 <puts>:
 8008418:	4b02      	ldr	r3, [pc, #8]	; (8008424 <puts+0xc>)
 800841a:	4601      	mov	r1, r0
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	f7ff bf8d 	b.w	800833c <_puts_r>
 8008422:	bf00      	nop
 8008424:	20000ed0 	.word	0x20000ed0

08008428 <realloc>:
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <realloc+0xc>)
 800842a:	460a      	mov	r2, r1
 800842c:	4601      	mov	r1, r0
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	f001 bd18 	b.w	8009e64 <_realloc_r>
 8008434:	20000ed0 	.word	0x20000ed0

08008438 <_sbrk_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d06      	ldr	r5, [pc, #24]	; (8008454 <_sbrk_r+0x1c>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	f7fb f874 	bl	8003530 <_sbrk>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_sbrk_r+0x1a>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_sbrk_r+0x1a>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	20002bf0 	.word	0x20002bf0

08008458 <siprintf>:
 8008458:	b40e      	push	{r1, r2, r3}
 800845a:	b500      	push	{lr}
 800845c:	b09c      	sub	sp, #112	; 0x70
 800845e:	ab1d      	add	r3, sp, #116	; 0x74
 8008460:	9002      	str	r0, [sp, #8]
 8008462:	9006      	str	r0, [sp, #24]
 8008464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008468:	4809      	ldr	r0, [pc, #36]	; (8008490 <siprintf+0x38>)
 800846a:	9107      	str	r1, [sp, #28]
 800846c:	9104      	str	r1, [sp, #16]
 800846e:	4909      	ldr	r1, [pc, #36]	; (8008494 <siprintf+0x3c>)
 8008470:	f853 2b04 	ldr.w	r2, [r3], #4
 8008474:	9105      	str	r1, [sp, #20]
 8008476:	6800      	ldr	r0, [r0, #0]
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	a902      	add	r1, sp, #8
 800847c:	f001 fd74 	bl	8009f68 <_svfiprintf_r>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	b01c      	add	sp, #112	; 0x70
 8008488:	f85d eb04 	ldr.w	lr, [sp], #4
 800848c:	b003      	add	sp, #12
 800848e:	4770      	bx	lr
 8008490:	20000ed0 	.word	0x20000ed0
 8008494:	ffff0208 	.word	0xffff0208

08008498 <__swbuf_r>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	460e      	mov	r6, r1
 800849c:	4614      	mov	r4, r2
 800849e:	4605      	mov	r5, r0
 80084a0:	b118      	cbz	r0, 80084aa <__swbuf_r+0x12>
 80084a2:	6983      	ldr	r3, [r0, #24]
 80084a4:	b90b      	cbnz	r3, 80084aa <__swbuf_r+0x12>
 80084a6:	f001 f849 	bl	800953c <__sinit>
 80084aa:	4b21      	ldr	r3, [pc, #132]	; (8008530 <__swbuf_r+0x98>)
 80084ac:	429c      	cmp	r4, r3
 80084ae:	d12b      	bne.n	8008508 <__swbuf_r+0x70>
 80084b0:	686c      	ldr	r4, [r5, #4]
 80084b2:	69a3      	ldr	r3, [r4, #24]
 80084b4:	60a3      	str	r3, [r4, #8]
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	071a      	lsls	r2, r3, #28
 80084ba:	d52f      	bpl.n	800851c <__swbuf_r+0x84>
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	b36b      	cbz	r3, 800851c <__swbuf_r+0x84>
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	6820      	ldr	r0, [r4, #0]
 80084c4:	1ac0      	subs	r0, r0, r3
 80084c6:	6963      	ldr	r3, [r4, #20]
 80084c8:	b2f6      	uxtb	r6, r6
 80084ca:	4283      	cmp	r3, r0
 80084cc:	4637      	mov	r7, r6
 80084ce:	dc04      	bgt.n	80084da <__swbuf_r+0x42>
 80084d0:	4621      	mov	r1, r4
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 ff9e 	bl	8009414 <_fflush_r>
 80084d8:	bb30      	cbnz	r0, 8008528 <__swbuf_r+0x90>
 80084da:	68a3      	ldr	r3, [r4, #8]
 80084dc:	3b01      	subs	r3, #1
 80084de:	60a3      	str	r3, [r4, #8]
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	6022      	str	r2, [r4, #0]
 80084e6:	701e      	strb	r6, [r3, #0]
 80084e8:	6963      	ldr	r3, [r4, #20]
 80084ea:	3001      	adds	r0, #1
 80084ec:	4283      	cmp	r3, r0
 80084ee:	d004      	beq.n	80084fa <__swbuf_r+0x62>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	07db      	lsls	r3, r3, #31
 80084f4:	d506      	bpl.n	8008504 <__swbuf_r+0x6c>
 80084f6:	2e0a      	cmp	r6, #10
 80084f8:	d104      	bne.n	8008504 <__swbuf_r+0x6c>
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 ff89 	bl	8009414 <_fflush_r>
 8008502:	b988      	cbnz	r0, 8008528 <__swbuf_r+0x90>
 8008504:	4638      	mov	r0, r7
 8008506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <__swbuf_r+0x9c>)
 800850a:	429c      	cmp	r4, r3
 800850c:	d101      	bne.n	8008512 <__swbuf_r+0x7a>
 800850e:	68ac      	ldr	r4, [r5, #8]
 8008510:	e7cf      	b.n	80084b2 <__swbuf_r+0x1a>
 8008512:	4b09      	ldr	r3, [pc, #36]	; (8008538 <__swbuf_r+0xa0>)
 8008514:	429c      	cmp	r4, r3
 8008516:	bf08      	it	eq
 8008518:	68ec      	ldreq	r4, [r5, #12]
 800851a:	e7ca      	b.n	80084b2 <__swbuf_r+0x1a>
 800851c:	4621      	mov	r1, r4
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f80c 	bl	800853c <__swsetup_r>
 8008524:	2800      	cmp	r0, #0
 8008526:	d0cb      	beq.n	80084c0 <__swbuf_r+0x28>
 8008528:	f04f 37ff 	mov.w	r7, #4294967295
 800852c:	e7ea      	b.n	8008504 <__swbuf_r+0x6c>
 800852e:	bf00      	nop
 8008530:	08066678 	.word	0x08066678
 8008534:	08066698 	.word	0x08066698
 8008538:	08066658 	.word	0x08066658

0800853c <__swsetup_r>:
 800853c:	4b32      	ldr	r3, [pc, #200]	; (8008608 <__swsetup_r+0xcc>)
 800853e:	b570      	push	{r4, r5, r6, lr}
 8008540:	681d      	ldr	r5, [r3, #0]
 8008542:	4606      	mov	r6, r0
 8008544:	460c      	mov	r4, r1
 8008546:	b125      	cbz	r5, 8008552 <__swsetup_r+0x16>
 8008548:	69ab      	ldr	r3, [r5, #24]
 800854a:	b913      	cbnz	r3, 8008552 <__swsetup_r+0x16>
 800854c:	4628      	mov	r0, r5
 800854e:	f000 fff5 	bl	800953c <__sinit>
 8008552:	4b2e      	ldr	r3, [pc, #184]	; (800860c <__swsetup_r+0xd0>)
 8008554:	429c      	cmp	r4, r3
 8008556:	d10f      	bne.n	8008578 <__swsetup_r+0x3c>
 8008558:	686c      	ldr	r4, [r5, #4]
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008560:	0719      	lsls	r1, r3, #28
 8008562:	d42c      	bmi.n	80085be <__swsetup_r+0x82>
 8008564:	06dd      	lsls	r5, r3, #27
 8008566:	d411      	bmi.n	800858c <__swsetup_r+0x50>
 8008568:	2309      	movs	r3, #9
 800856a:	6033      	str	r3, [r6, #0]
 800856c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008570:	81a3      	strh	r3, [r4, #12]
 8008572:	f04f 30ff 	mov.w	r0, #4294967295
 8008576:	e03e      	b.n	80085f6 <__swsetup_r+0xba>
 8008578:	4b25      	ldr	r3, [pc, #148]	; (8008610 <__swsetup_r+0xd4>)
 800857a:	429c      	cmp	r4, r3
 800857c:	d101      	bne.n	8008582 <__swsetup_r+0x46>
 800857e:	68ac      	ldr	r4, [r5, #8]
 8008580:	e7eb      	b.n	800855a <__swsetup_r+0x1e>
 8008582:	4b24      	ldr	r3, [pc, #144]	; (8008614 <__swsetup_r+0xd8>)
 8008584:	429c      	cmp	r4, r3
 8008586:	bf08      	it	eq
 8008588:	68ec      	ldreq	r4, [r5, #12]
 800858a:	e7e6      	b.n	800855a <__swsetup_r+0x1e>
 800858c:	0758      	lsls	r0, r3, #29
 800858e:	d512      	bpl.n	80085b6 <__swsetup_r+0x7a>
 8008590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008592:	b141      	cbz	r1, 80085a6 <__swsetup_r+0x6a>
 8008594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008598:	4299      	cmp	r1, r3
 800859a:	d002      	beq.n	80085a2 <__swsetup_r+0x66>
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff f9a1 	bl	80078e4 <_free_r>
 80085a2:	2300      	movs	r3, #0
 80085a4:	6363      	str	r3, [r4, #52]	; 0x34
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085ac:	81a3      	strh	r3, [r4, #12]
 80085ae:	2300      	movs	r3, #0
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	6923      	ldr	r3, [r4, #16]
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	f043 0308 	orr.w	r3, r3, #8
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	b94b      	cbnz	r3, 80085d6 <__swsetup_r+0x9a>
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085cc:	d003      	beq.n	80085d6 <__swsetup_r+0x9a>
 80085ce:	4621      	mov	r1, r4
 80085d0:	4630      	mov	r0, r6
 80085d2:	f001 f87d 	bl	80096d0 <__smakebuf_r>
 80085d6:	89a0      	ldrh	r0, [r4, #12]
 80085d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085dc:	f010 0301 	ands.w	r3, r0, #1
 80085e0:	d00a      	beq.n	80085f8 <__swsetup_r+0xbc>
 80085e2:	2300      	movs	r3, #0
 80085e4:	60a3      	str	r3, [r4, #8]
 80085e6:	6963      	ldr	r3, [r4, #20]
 80085e8:	425b      	negs	r3, r3
 80085ea:	61a3      	str	r3, [r4, #24]
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	b943      	cbnz	r3, 8008602 <__swsetup_r+0xc6>
 80085f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085f4:	d1ba      	bne.n	800856c <__swsetup_r+0x30>
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	0781      	lsls	r1, r0, #30
 80085fa:	bf58      	it	pl
 80085fc:	6963      	ldrpl	r3, [r4, #20]
 80085fe:	60a3      	str	r3, [r4, #8]
 8008600:	e7f4      	b.n	80085ec <__swsetup_r+0xb0>
 8008602:	2000      	movs	r0, #0
 8008604:	e7f7      	b.n	80085f6 <__swsetup_r+0xba>
 8008606:	bf00      	nop
 8008608:	20000ed0 	.word	0x20000ed0
 800860c:	08066678 	.word	0x08066678
 8008610:	08066698 	.word	0x08066698
 8008614:	08066658 	.word	0x08066658

08008618 <quorem>:
 8008618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	6903      	ldr	r3, [r0, #16]
 800861e:	690c      	ldr	r4, [r1, #16]
 8008620:	42a3      	cmp	r3, r4
 8008622:	4607      	mov	r7, r0
 8008624:	f2c0 8081 	blt.w	800872a <quorem+0x112>
 8008628:	3c01      	subs	r4, #1
 800862a:	f101 0814 	add.w	r8, r1, #20
 800862e:	f100 0514 	add.w	r5, r0, #20
 8008632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008636:	9301      	str	r3, [sp, #4]
 8008638:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800863c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008640:	3301      	adds	r3, #1
 8008642:	429a      	cmp	r2, r3
 8008644:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008648:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800864c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008650:	d331      	bcc.n	80086b6 <quorem+0x9e>
 8008652:	f04f 0e00 	mov.w	lr, #0
 8008656:	4640      	mov	r0, r8
 8008658:	46ac      	mov	ip, r5
 800865a:	46f2      	mov	sl, lr
 800865c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008660:	b293      	uxth	r3, r2
 8008662:	fb06 e303 	mla	r3, r6, r3, lr
 8008666:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800866a:	b29b      	uxth	r3, r3
 800866c:	ebaa 0303 	sub.w	r3, sl, r3
 8008670:	0c12      	lsrs	r2, r2, #16
 8008672:	f8dc a000 	ldr.w	sl, [ip]
 8008676:	fb06 e202 	mla	r2, r6, r2, lr
 800867a:	fa13 f38a 	uxtah	r3, r3, sl
 800867e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008682:	fa1f fa82 	uxth.w	sl, r2
 8008686:	f8dc 2000 	ldr.w	r2, [ip]
 800868a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800868e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008692:	b29b      	uxth	r3, r3
 8008694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008698:	4581      	cmp	r9, r0
 800869a:	f84c 3b04 	str.w	r3, [ip], #4
 800869e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086a2:	d2db      	bcs.n	800865c <quorem+0x44>
 80086a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80086a8:	b92b      	cbnz	r3, 80086b6 <quorem+0x9e>
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	3b04      	subs	r3, #4
 80086ae:	429d      	cmp	r5, r3
 80086b0:	461a      	mov	r2, r3
 80086b2:	d32e      	bcc.n	8008712 <quorem+0xfa>
 80086b4:	613c      	str	r4, [r7, #16]
 80086b6:	4638      	mov	r0, r7
 80086b8:	f001 fad4 	bl	8009c64 <__mcmp>
 80086bc:	2800      	cmp	r0, #0
 80086be:	db24      	blt.n	800870a <quorem+0xf2>
 80086c0:	3601      	adds	r6, #1
 80086c2:	4628      	mov	r0, r5
 80086c4:	f04f 0c00 	mov.w	ip, #0
 80086c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80086cc:	f8d0 e000 	ldr.w	lr, [r0]
 80086d0:	b293      	uxth	r3, r2
 80086d2:	ebac 0303 	sub.w	r3, ip, r3
 80086d6:	0c12      	lsrs	r2, r2, #16
 80086d8:	fa13 f38e 	uxtah	r3, r3, lr
 80086dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086ea:	45c1      	cmp	r9, r8
 80086ec:	f840 3b04 	str.w	r3, [r0], #4
 80086f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086f4:	d2e8      	bcs.n	80086c8 <quorem+0xb0>
 80086f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086fe:	b922      	cbnz	r2, 800870a <quorem+0xf2>
 8008700:	3b04      	subs	r3, #4
 8008702:	429d      	cmp	r5, r3
 8008704:	461a      	mov	r2, r3
 8008706:	d30a      	bcc.n	800871e <quorem+0x106>
 8008708:	613c      	str	r4, [r7, #16]
 800870a:	4630      	mov	r0, r6
 800870c:	b003      	add	sp, #12
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	3b04      	subs	r3, #4
 8008716:	2a00      	cmp	r2, #0
 8008718:	d1cc      	bne.n	80086b4 <quorem+0x9c>
 800871a:	3c01      	subs	r4, #1
 800871c:	e7c7      	b.n	80086ae <quorem+0x96>
 800871e:	6812      	ldr	r2, [r2, #0]
 8008720:	3b04      	subs	r3, #4
 8008722:	2a00      	cmp	r2, #0
 8008724:	d1f0      	bne.n	8008708 <quorem+0xf0>
 8008726:	3c01      	subs	r4, #1
 8008728:	e7eb      	b.n	8008702 <quorem+0xea>
 800872a:	2000      	movs	r0, #0
 800872c:	e7ee      	b.n	800870c <quorem+0xf4>
	...

08008730 <_dtoa_r>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	ed2d 8b02 	vpush	{d8}
 8008738:	ec57 6b10 	vmov	r6, r7, d0
 800873c:	b095      	sub	sp, #84	; 0x54
 800873e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008740:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008744:	9105      	str	r1, [sp, #20]
 8008746:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800874a:	4604      	mov	r4, r0
 800874c:	9209      	str	r2, [sp, #36]	; 0x24
 800874e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008750:	b975      	cbnz	r5, 8008770 <_dtoa_r+0x40>
 8008752:	2010      	movs	r0, #16
 8008754:	f7ff f890 	bl	8007878 <malloc>
 8008758:	4602      	mov	r2, r0
 800875a:	6260      	str	r0, [r4, #36]	; 0x24
 800875c:	b920      	cbnz	r0, 8008768 <_dtoa_r+0x38>
 800875e:	4bb2      	ldr	r3, [pc, #712]	; (8008a28 <_dtoa_r+0x2f8>)
 8008760:	21ea      	movs	r1, #234	; 0xea
 8008762:	48b2      	ldr	r0, [pc, #712]	; (8008a2c <_dtoa_r+0x2fc>)
 8008764:	f001 feb0 	bl	800a4c8 <__assert_func>
 8008768:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800876c:	6005      	str	r5, [r0, #0]
 800876e:	60c5      	str	r5, [r0, #12]
 8008770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008772:	6819      	ldr	r1, [r3, #0]
 8008774:	b151      	cbz	r1, 800878c <_dtoa_r+0x5c>
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	604a      	str	r2, [r1, #4]
 800877a:	2301      	movs	r3, #1
 800877c:	4093      	lsls	r3, r2
 800877e:	608b      	str	r3, [r1, #8]
 8008780:	4620      	mov	r0, r4
 8008782:	f001 f831 	bl	80097e8 <_Bfree>
 8008786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	1e3b      	subs	r3, r7, #0
 800878e:	bfb9      	ittee	lt
 8008790:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008794:	9303      	strlt	r3, [sp, #12]
 8008796:	2300      	movge	r3, #0
 8008798:	f8c8 3000 	strge.w	r3, [r8]
 800879c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80087a0:	4ba3      	ldr	r3, [pc, #652]	; (8008a30 <_dtoa_r+0x300>)
 80087a2:	bfbc      	itt	lt
 80087a4:	2201      	movlt	r2, #1
 80087a6:	f8c8 2000 	strlt.w	r2, [r8]
 80087aa:	ea33 0309 	bics.w	r3, r3, r9
 80087ae:	d11b      	bne.n	80087e8 <_dtoa_r+0xb8>
 80087b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087bc:	4333      	orrs	r3, r6
 80087be:	f000 857a 	beq.w	80092b6 <_dtoa_r+0xb86>
 80087c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087c4:	b963      	cbnz	r3, 80087e0 <_dtoa_r+0xb0>
 80087c6:	4b9b      	ldr	r3, [pc, #620]	; (8008a34 <_dtoa_r+0x304>)
 80087c8:	e024      	b.n	8008814 <_dtoa_r+0xe4>
 80087ca:	4b9b      	ldr	r3, [pc, #620]	; (8008a38 <_dtoa_r+0x308>)
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	3308      	adds	r3, #8
 80087d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	9800      	ldr	r0, [sp, #0]
 80087d6:	b015      	add	sp, #84	; 0x54
 80087d8:	ecbd 8b02 	vpop	{d8}
 80087dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e0:	4b94      	ldr	r3, [pc, #592]	; (8008a34 <_dtoa_r+0x304>)
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	3303      	adds	r3, #3
 80087e6:	e7f3      	b.n	80087d0 <_dtoa_r+0xa0>
 80087e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	ec51 0b17 	vmov	r0, r1, d7
 80087f2:	2300      	movs	r3, #0
 80087f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80087f8:	f7f8 f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 80087fc:	4680      	mov	r8, r0
 80087fe:	b158      	cbz	r0, 8008818 <_dtoa_r+0xe8>
 8008800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008802:	2301      	movs	r3, #1
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 8551 	beq.w	80092b0 <_dtoa_r+0xb80>
 800880e:	488b      	ldr	r0, [pc, #556]	; (8008a3c <_dtoa_r+0x30c>)
 8008810:	6018      	str	r0, [r3, #0]
 8008812:	1e43      	subs	r3, r0, #1
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	e7dd      	b.n	80087d4 <_dtoa_r+0xa4>
 8008818:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800881c:	aa12      	add	r2, sp, #72	; 0x48
 800881e:	a913      	add	r1, sp, #76	; 0x4c
 8008820:	4620      	mov	r0, r4
 8008822:	f001 fac3 	bl	8009dac <__d2b>
 8008826:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800882a:	4683      	mov	fp, r0
 800882c:	2d00      	cmp	r5, #0
 800882e:	d07c      	beq.n	800892a <_dtoa_r+0x1fa>
 8008830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008832:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800883a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800883e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008842:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008846:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800884a:	4b7d      	ldr	r3, [pc, #500]	; (8008a40 <_dtoa_r+0x310>)
 800884c:	2200      	movs	r2, #0
 800884e:	4630      	mov	r0, r6
 8008850:	4639      	mov	r1, r7
 8008852:	f7f7 fd21 	bl	8000298 <__aeabi_dsub>
 8008856:	a36e      	add	r3, pc, #440	; (adr r3, 8008a10 <_dtoa_r+0x2e0>)
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	f7f7 fed4 	bl	8000608 <__aeabi_dmul>
 8008860:	a36d      	add	r3, pc, #436	; (adr r3, 8008a18 <_dtoa_r+0x2e8>)
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	f7f7 fd19 	bl	800029c <__adddf3>
 800886a:	4606      	mov	r6, r0
 800886c:	4628      	mov	r0, r5
 800886e:	460f      	mov	r7, r1
 8008870:	f7f7 fe60 	bl	8000534 <__aeabi_i2d>
 8008874:	a36a      	add	r3, pc, #424	; (adr r3, 8008a20 <_dtoa_r+0x2f0>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	f7f7 fec5 	bl	8000608 <__aeabi_dmul>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4630      	mov	r0, r6
 8008884:	4639      	mov	r1, r7
 8008886:	f7f7 fd09 	bl	800029c <__adddf3>
 800888a:	4606      	mov	r6, r0
 800888c:	460f      	mov	r7, r1
 800888e:	f7f8 f96b 	bl	8000b68 <__aeabi_d2iz>
 8008892:	2200      	movs	r2, #0
 8008894:	4682      	mov	sl, r0
 8008896:	2300      	movs	r3, #0
 8008898:	4630      	mov	r0, r6
 800889a:	4639      	mov	r1, r7
 800889c:	f7f8 f926 	bl	8000aec <__aeabi_dcmplt>
 80088a0:	b148      	cbz	r0, 80088b6 <_dtoa_r+0x186>
 80088a2:	4650      	mov	r0, sl
 80088a4:	f7f7 fe46 	bl	8000534 <__aeabi_i2d>
 80088a8:	4632      	mov	r2, r6
 80088aa:	463b      	mov	r3, r7
 80088ac:	f7f8 f914 	bl	8000ad8 <__aeabi_dcmpeq>
 80088b0:	b908      	cbnz	r0, 80088b6 <_dtoa_r+0x186>
 80088b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088b6:	f1ba 0f16 	cmp.w	sl, #22
 80088ba:	d854      	bhi.n	8008966 <_dtoa_r+0x236>
 80088bc:	4b61      	ldr	r3, [pc, #388]	; (8008a44 <_dtoa_r+0x314>)
 80088be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088ca:	f7f8 f90f 	bl	8000aec <__aeabi_dcmplt>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d04b      	beq.n	800896a <_dtoa_r+0x23a>
 80088d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088d6:	2300      	movs	r3, #0
 80088d8:	930e      	str	r3, [sp, #56]	; 0x38
 80088da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088dc:	1b5d      	subs	r5, r3, r5
 80088de:	1e6b      	subs	r3, r5, #1
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	bf43      	ittte	mi
 80088e4:	2300      	movmi	r3, #0
 80088e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80088ea:	9304      	strmi	r3, [sp, #16]
 80088ec:	f04f 0800 	movpl.w	r8, #0
 80088f0:	f1ba 0f00 	cmp.w	sl, #0
 80088f4:	db3b      	blt.n	800896e <_dtoa_r+0x23e>
 80088f6:	9b04      	ldr	r3, [sp, #16]
 80088f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80088fc:	4453      	add	r3, sl
 80088fe:	9304      	str	r3, [sp, #16]
 8008900:	2300      	movs	r3, #0
 8008902:	9306      	str	r3, [sp, #24]
 8008904:	9b05      	ldr	r3, [sp, #20]
 8008906:	2b09      	cmp	r3, #9
 8008908:	d869      	bhi.n	80089de <_dtoa_r+0x2ae>
 800890a:	2b05      	cmp	r3, #5
 800890c:	bfc4      	itt	gt
 800890e:	3b04      	subgt	r3, #4
 8008910:	9305      	strgt	r3, [sp, #20]
 8008912:	9b05      	ldr	r3, [sp, #20]
 8008914:	f1a3 0302 	sub.w	r3, r3, #2
 8008918:	bfcc      	ite	gt
 800891a:	2500      	movgt	r5, #0
 800891c:	2501      	movle	r5, #1
 800891e:	2b03      	cmp	r3, #3
 8008920:	d869      	bhi.n	80089f6 <_dtoa_r+0x2c6>
 8008922:	e8df f003 	tbb	[pc, r3]
 8008926:	4e2c      	.short	0x4e2c
 8008928:	5a4c      	.short	0x5a4c
 800892a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800892e:	441d      	add	r5, r3
 8008930:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008934:	2b20      	cmp	r3, #32
 8008936:	bfc1      	itttt	gt
 8008938:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800893c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008940:	fa09 f303 	lslgt.w	r3, r9, r3
 8008944:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008948:	bfda      	itte	le
 800894a:	f1c3 0320 	rsble	r3, r3, #32
 800894e:	fa06 f003 	lslle.w	r0, r6, r3
 8008952:	4318      	orrgt	r0, r3
 8008954:	f7f7 fdde 	bl	8000514 <__aeabi_ui2d>
 8008958:	2301      	movs	r3, #1
 800895a:	4606      	mov	r6, r0
 800895c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008960:	3d01      	subs	r5, #1
 8008962:	9310      	str	r3, [sp, #64]	; 0x40
 8008964:	e771      	b.n	800884a <_dtoa_r+0x11a>
 8008966:	2301      	movs	r3, #1
 8008968:	e7b6      	b.n	80088d8 <_dtoa_r+0x1a8>
 800896a:	900e      	str	r0, [sp, #56]	; 0x38
 800896c:	e7b5      	b.n	80088da <_dtoa_r+0x1aa>
 800896e:	f1ca 0300 	rsb	r3, sl, #0
 8008972:	9306      	str	r3, [sp, #24]
 8008974:	2300      	movs	r3, #0
 8008976:	eba8 080a 	sub.w	r8, r8, sl
 800897a:	930d      	str	r3, [sp, #52]	; 0x34
 800897c:	e7c2      	b.n	8008904 <_dtoa_r+0x1d4>
 800897e:	2300      	movs	r3, #0
 8008980:	9308      	str	r3, [sp, #32]
 8008982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	dc39      	bgt.n	80089fc <_dtoa_r+0x2cc>
 8008988:	f04f 0901 	mov.w	r9, #1
 800898c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008990:	464b      	mov	r3, r9
 8008992:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008996:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008998:	2200      	movs	r2, #0
 800899a:	6042      	str	r2, [r0, #4]
 800899c:	2204      	movs	r2, #4
 800899e:	f102 0614 	add.w	r6, r2, #20
 80089a2:	429e      	cmp	r6, r3
 80089a4:	6841      	ldr	r1, [r0, #4]
 80089a6:	d92f      	bls.n	8008a08 <_dtoa_r+0x2d8>
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fedd 	bl	8009768 <_Balloc>
 80089ae:	9000      	str	r0, [sp, #0]
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d14b      	bne.n	8008a4c <_dtoa_r+0x31c>
 80089b4:	4b24      	ldr	r3, [pc, #144]	; (8008a48 <_dtoa_r+0x318>)
 80089b6:	4602      	mov	r2, r0
 80089b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089bc:	e6d1      	b.n	8008762 <_dtoa_r+0x32>
 80089be:	2301      	movs	r3, #1
 80089c0:	e7de      	b.n	8008980 <_dtoa_r+0x250>
 80089c2:	2300      	movs	r3, #0
 80089c4:	9308      	str	r3, [sp, #32]
 80089c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c8:	eb0a 0903 	add.w	r9, sl, r3
 80089cc:	f109 0301 	add.w	r3, r9, #1
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	bfb8      	it	lt
 80089d6:	2301      	movlt	r3, #1
 80089d8:	e7dd      	b.n	8008996 <_dtoa_r+0x266>
 80089da:	2301      	movs	r3, #1
 80089dc:	e7f2      	b.n	80089c4 <_dtoa_r+0x294>
 80089de:	2501      	movs	r5, #1
 80089e0:	2300      	movs	r3, #0
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	9508      	str	r5, [sp, #32]
 80089e6:	f04f 39ff 	mov.w	r9, #4294967295
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80089f0:	2312      	movs	r3, #18
 80089f2:	9209      	str	r2, [sp, #36]	; 0x24
 80089f4:	e7cf      	b.n	8008996 <_dtoa_r+0x266>
 80089f6:	2301      	movs	r3, #1
 80089f8:	9308      	str	r3, [sp, #32]
 80089fa:	e7f4      	b.n	80089e6 <_dtoa_r+0x2b6>
 80089fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008a00:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a04:	464b      	mov	r3, r9
 8008a06:	e7c6      	b.n	8008996 <_dtoa_r+0x266>
 8008a08:	3101      	adds	r1, #1
 8008a0a:	6041      	str	r1, [r0, #4]
 8008a0c:	0052      	lsls	r2, r2, #1
 8008a0e:	e7c6      	b.n	800899e <_dtoa_r+0x26e>
 8008a10:	636f4361 	.word	0x636f4361
 8008a14:	3fd287a7 	.word	0x3fd287a7
 8008a18:	8b60c8b3 	.word	0x8b60c8b3
 8008a1c:	3fc68a28 	.word	0x3fc68a28
 8008a20:	509f79fb 	.word	0x509f79fb
 8008a24:	3fd34413 	.word	0x3fd34413
 8008a28:	080665d1 	.word	0x080665d1
 8008a2c:	080665e8 	.word	0x080665e8
 8008a30:	7ff00000 	.word	0x7ff00000
 8008a34:	080665cd 	.word	0x080665cd
 8008a38:	080665c4 	.word	0x080665c4
 8008a3c:	080665a1 	.word	0x080665a1
 8008a40:	3ff80000 	.word	0x3ff80000
 8008a44:	08066740 	.word	0x08066740
 8008a48:	08066647 	.word	0x08066647
 8008a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a4e:	9a00      	ldr	r2, [sp, #0]
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	2b0e      	cmp	r3, #14
 8008a56:	f200 80ad 	bhi.w	8008bb4 <_dtoa_r+0x484>
 8008a5a:	2d00      	cmp	r5, #0
 8008a5c:	f000 80aa 	beq.w	8008bb4 <_dtoa_r+0x484>
 8008a60:	f1ba 0f00 	cmp.w	sl, #0
 8008a64:	dd36      	ble.n	8008ad4 <_dtoa_r+0x3a4>
 8008a66:	4ac3      	ldr	r2, [pc, #780]	; (8008d74 <_dtoa_r+0x644>)
 8008a68:	f00a 030f 	and.w	r3, sl, #15
 8008a6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a70:	ed93 7b00 	vldr	d7, [r3]
 8008a74:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a78:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008a7c:	eeb0 8a47 	vmov.f32	s16, s14
 8008a80:	eef0 8a67 	vmov.f32	s17, s15
 8008a84:	d016      	beq.n	8008ab4 <_dtoa_r+0x384>
 8008a86:	4bbc      	ldr	r3, [pc, #752]	; (8008d78 <_dtoa_r+0x648>)
 8008a88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a90:	f7f7 fee4 	bl	800085c <__aeabi_ddiv>
 8008a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a98:	f007 070f 	and.w	r7, r7, #15
 8008a9c:	2503      	movs	r5, #3
 8008a9e:	4eb6      	ldr	r6, [pc, #728]	; (8008d78 <_dtoa_r+0x648>)
 8008aa0:	b957      	cbnz	r7, 8008ab8 <_dtoa_r+0x388>
 8008aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa6:	ec53 2b18 	vmov	r2, r3, d8
 8008aaa:	f7f7 fed7 	bl	800085c <__aeabi_ddiv>
 8008aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ab2:	e029      	b.n	8008b08 <_dtoa_r+0x3d8>
 8008ab4:	2502      	movs	r5, #2
 8008ab6:	e7f2      	b.n	8008a9e <_dtoa_r+0x36e>
 8008ab8:	07f9      	lsls	r1, r7, #31
 8008aba:	d508      	bpl.n	8008ace <_dtoa_r+0x39e>
 8008abc:	ec51 0b18 	vmov	r0, r1, d8
 8008ac0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ac4:	f7f7 fda0 	bl	8000608 <__aeabi_dmul>
 8008ac8:	ec41 0b18 	vmov	d8, r0, r1
 8008acc:	3501      	adds	r5, #1
 8008ace:	107f      	asrs	r7, r7, #1
 8008ad0:	3608      	adds	r6, #8
 8008ad2:	e7e5      	b.n	8008aa0 <_dtoa_r+0x370>
 8008ad4:	f000 80a6 	beq.w	8008c24 <_dtoa_r+0x4f4>
 8008ad8:	f1ca 0600 	rsb	r6, sl, #0
 8008adc:	4ba5      	ldr	r3, [pc, #660]	; (8008d74 <_dtoa_r+0x644>)
 8008ade:	4fa6      	ldr	r7, [pc, #664]	; (8008d78 <_dtoa_r+0x648>)
 8008ae0:	f006 020f 	and.w	r2, r6, #15
 8008ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008af0:	f7f7 fd8a 	bl	8000608 <__aeabi_dmul>
 8008af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008af8:	1136      	asrs	r6, r6, #4
 8008afa:	2300      	movs	r3, #0
 8008afc:	2502      	movs	r5, #2
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	f040 8085 	bne.w	8008c0e <_dtoa_r+0x4de>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1d2      	bne.n	8008aae <_dtoa_r+0x37e>
 8008b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 808c 	beq.w	8008c28 <_dtoa_r+0x4f8>
 8008b10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b14:	4b99      	ldr	r3, [pc, #612]	; (8008d7c <_dtoa_r+0x64c>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	f7f7 ffe6 	bl	8000aec <__aeabi_dcmplt>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f000 8081 	beq.w	8008c28 <_dtoa_r+0x4f8>
 8008b26:	9b01      	ldr	r3, [sp, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d07d      	beq.n	8008c28 <_dtoa_r+0x4f8>
 8008b2c:	f1b9 0f00 	cmp.w	r9, #0
 8008b30:	dd3c      	ble.n	8008bac <_dtoa_r+0x47c>
 8008b32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b36:	9307      	str	r3, [sp, #28]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	4b91      	ldr	r3, [pc, #580]	; (8008d80 <_dtoa_r+0x650>)
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 fd62 	bl	8000608 <__aeabi_dmul>
 8008b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b48:	3501      	adds	r5, #1
 8008b4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008b4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b52:	4628      	mov	r0, r5
 8008b54:	f7f7 fcee 	bl	8000534 <__aeabi_i2d>
 8008b58:	4632      	mov	r2, r6
 8008b5a:	463b      	mov	r3, r7
 8008b5c:	f7f7 fd54 	bl	8000608 <__aeabi_dmul>
 8008b60:	4b88      	ldr	r3, [pc, #544]	; (8008d84 <_dtoa_r+0x654>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	f7f7 fb9a 	bl	800029c <__adddf3>
 8008b68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b70:	9303      	str	r3, [sp, #12]
 8008b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d15c      	bne.n	8008c32 <_dtoa_r+0x502>
 8008b78:	4b83      	ldr	r3, [pc, #524]	; (8008d88 <_dtoa_r+0x658>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	f7f7 fb8a 	bl	8000298 <__aeabi_dsub>
 8008b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b88:	4606      	mov	r6, r0
 8008b8a:	460f      	mov	r7, r1
 8008b8c:	f7f7 ffcc 	bl	8000b28 <__aeabi_dcmpgt>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	f040 8296 	bne.w	80090c2 <_dtoa_r+0x992>
 8008b96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	f7f7 ffa3 	bl	8000aec <__aeabi_dcmplt>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f040 8288 	bne.w	80090bc <_dtoa_r+0x98c>
 8008bac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008bb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f2c0 8158 	blt.w	8008e6c <_dtoa_r+0x73c>
 8008bbc:	f1ba 0f0e 	cmp.w	sl, #14
 8008bc0:	f300 8154 	bgt.w	8008e6c <_dtoa_r+0x73c>
 8008bc4:	4b6b      	ldr	r3, [pc, #428]	; (8008d74 <_dtoa_r+0x644>)
 8008bc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f280 80e3 	bge.w	8008d9c <_dtoa_r+0x66c>
 8008bd6:	9b01      	ldr	r3, [sp, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f300 80df 	bgt.w	8008d9c <_dtoa_r+0x66c>
 8008bde:	f040 826d 	bne.w	80090bc <_dtoa_r+0x98c>
 8008be2:	4b69      	ldr	r3, [pc, #420]	; (8008d88 <_dtoa_r+0x658>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	4640      	mov	r0, r8
 8008be8:	4649      	mov	r1, r9
 8008bea:	f7f7 fd0d 	bl	8000608 <__aeabi_dmul>
 8008bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bf2:	f7f7 ff8f 	bl	8000b14 <__aeabi_dcmpge>
 8008bf6:	9e01      	ldr	r6, [sp, #4]
 8008bf8:	4637      	mov	r7, r6
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f040 8243 	bne.w	8009086 <_dtoa_r+0x956>
 8008c00:	9d00      	ldr	r5, [sp, #0]
 8008c02:	2331      	movs	r3, #49	; 0x31
 8008c04:	f805 3b01 	strb.w	r3, [r5], #1
 8008c08:	f10a 0a01 	add.w	sl, sl, #1
 8008c0c:	e23f      	b.n	800908e <_dtoa_r+0x95e>
 8008c0e:	07f2      	lsls	r2, r6, #31
 8008c10:	d505      	bpl.n	8008c1e <_dtoa_r+0x4ee>
 8008c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c16:	f7f7 fcf7 	bl	8000608 <__aeabi_dmul>
 8008c1a:	3501      	adds	r5, #1
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	1076      	asrs	r6, r6, #1
 8008c20:	3708      	adds	r7, #8
 8008c22:	e76c      	b.n	8008afe <_dtoa_r+0x3ce>
 8008c24:	2502      	movs	r5, #2
 8008c26:	e76f      	b.n	8008b08 <_dtoa_r+0x3d8>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c30:	e78d      	b.n	8008b4e <_dtoa_r+0x41e>
 8008c32:	9900      	ldr	r1, [sp, #0]
 8008c34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c38:	4b4e      	ldr	r3, [pc, #312]	; (8008d74 <_dtoa_r+0x644>)
 8008c3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c3e:	4401      	add	r1, r0
 8008c40:	9102      	str	r1, [sp, #8]
 8008c42:	9908      	ldr	r1, [sp, #32]
 8008c44:	eeb0 8a47 	vmov.f32	s16, s14
 8008c48:	eef0 8a67 	vmov.f32	s17, s15
 8008c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c54:	2900      	cmp	r1, #0
 8008c56:	d045      	beq.n	8008ce4 <_dtoa_r+0x5b4>
 8008c58:	494c      	ldr	r1, [pc, #304]	; (8008d8c <_dtoa_r+0x65c>)
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f7f7 fdfe 	bl	800085c <__aeabi_ddiv>
 8008c60:	ec53 2b18 	vmov	r2, r3, d8
 8008c64:	f7f7 fb18 	bl	8000298 <__aeabi_dsub>
 8008c68:	9d00      	ldr	r5, [sp, #0]
 8008c6a:	ec41 0b18 	vmov	d8, r0, r1
 8008c6e:	4639      	mov	r1, r7
 8008c70:	4630      	mov	r0, r6
 8008c72:	f7f7 ff79 	bl	8000b68 <__aeabi_d2iz>
 8008c76:	900c      	str	r0, [sp, #48]	; 0x30
 8008c78:	f7f7 fc5c 	bl	8000534 <__aeabi_i2d>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4630      	mov	r0, r6
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f7 fb08 	bl	8000298 <__aeabi_dsub>
 8008c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c8a:	3330      	adds	r3, #48	; 0x30
 8008c8c:	f805 3b01 	strb.w	r3, [r5], #1
 8008c90:	ec53 2b18 	vmov	r2, r3, d8
 8008c94:	4606      	mov	r6, r0
 8008c96:	460f      	mov	r7, r1
 8008c98:	f7f7 ff28 	bl	8000aec <__aeabi_dcmplt>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d165      	bne.n	8008d6c <_dtoa_r+0x63c>
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	4935      	ldr	r1, [pc, #212]	; (8008d7c <_dtoa_r+0x64c>)
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	f7f7 faf6 	bl	8000298 <__aeabi_dsub>
 8008cac:	ec53 2b18 	vmov	r2, r3, d8
 8008cb0:	f7f7 ff1c 	bl	8000aec <__aeabi_dcmplt>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	f040 80b9 	bne.w	8008e2c <_dtoa_r+0x6fc>
 8008cba:	9b02      	ldr	r3, [sp, #8]
 8008cbc:	429d      	cmp	r5, r3
 8008cbe:	f43f af75 	beq.w	8008bac <_dtoa_r+0x47c>
 8008cc2:	4b2f      	ldr	r3, [pc, #188]	; (8008d80 <_dtoa_r+0x650>)
 8008cc4:	ec51 0b18 	vmov	r0, r1, d8
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f7f7 fc9d 	bl	8000608 <__aeabi_dmul>
 8008cce:	4b2c      	ldr	r3, [pc, #176]	; (8008d80 <_dtoa_r+0x650>)
 8008cd0:	ec41 0b18 	vmov	d8, r0, r1
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	4639      	mov	r1, r7
 8008cda:	f7f7 fc95 	bl	8000608 <__aeabi_dmul>
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	e7c4      	b.n	8008c6e <_dtoa_r+0x53e>
 8008ce4:	ec51 0b17 	vmov	r0, r1, d7
 8008ce8:	f7f7 fc8e 	bl	8000608 <__aeabi_dmul>
 8008cec:	9b02      	ldr	r3, [sp, #8]
 8008cee:	9d00      	ldr	r5, [sp, #0]
 8008cf0:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf2:	ec41 0b18 	vmov	d8, r0, r1
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7f7 ff35 	bl	8000b68 <__aeabi_d2iz>
 8008cfe:	9011      	str	r0, [sp, #68]	; 0x44
 8008d00:	f7f7 fc18 	bl	8000534 <__aeabi_i2d>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4630      	mov	r0, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f7f7 fac4 	bl	8000298 <__aeabi_dsub>
 8008d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d12:	3330      	adds	r3, #48	; 0x30
 8008d14:	f805 3b01 	strb.w	r3, [r5], #1
 8008d18:	9b02      	ldr	r3, [sp, #8]
 8008d1a:	429d      	cmp	r5, r3
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	460f      	mov	r7, r1
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	d134      	bne.n	8008d90 <_dtoa_r+0x660>
 8008d26:	4b19      	ldr	r3, [pc, #100]	; (8008d8c <_dtoa_r+0x65c>)
 8008d28:	ec51 0b18 	vmov	r0, r1, d8
 8008d2c:	f7f7 fab6 	bl	800029c <__adddf3>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4630      	mov	r0, r6
 8008d36:	4639      	mov	r1, r7
 8008d38:	f7f7 fef6 	bl	8000b28 <__aeabi_dcmpgt>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d175      	bne.n	8008e2c <_dtoa_r+0x6fc>
 8008d40:	ec53 2b18 	vmov	r2, r3, d8
 8008d44:	4911      	ldr	r1, [pc, #68]	; (8008d8c <_dtoa_r+0x65c>)
 8008d46:	2000      	movs	r0, #0
 8008d48:	f7f7 faa6 	bl	8000298 <__aeabi_dsub>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 feca 	bl	8000aec <__aeabi_dcmplt>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	f43f af27 	beq.w	8008bac <_dtoa_r+0x47c>
 8008d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d60:	1e6b      	subs	r3, r5, #1
 8008d62:	930c      	str	r3, [sp, #48]	; 0x30
 8008d64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d68:	2b30      	cmp	r3, #48	; 0x30
 8008d6a:	d0f8      	beq.n	8008d5e <_dtoa_r+0x62e>
 8008d6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d70:	e04a      	b.n	8008e08 <_dtoa_r+0x6d8>
 8008d72:	bf00      	nop
 8008d74:	08066740 	.word	0x08066740
 8008d78:	08066718 	.word	0x08066718
 8008d7c:	3ff00000 	.word	0x3ff00000
 8008d80:	40240000 	.word	0x40240000
 8008d84:	401c0000 	.word	0x401c0000
 8008d88:	40140000 	.word	0x40140000
 8008d8c:	3fe00000 	.word	0x3fe00000
 8008d90:	4baf      	ldr	r3, [pc, #700]	; (8009050 <_dtoa_r+0x920>)
 8008d92:	f7f7 fc39 	bl	8000608 <__aeabi_dmul>
 8008d96:	4606      	mov	r6, r0
 8008d98:	460f      	mov	r7, r1
 8008d9a:	e7ac      	b.n	8008cf6 <_dtoa_r+0x5c6>
 8008d9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008da0:	9d00      	ldr	r5, [sp, #0]
 8008da2:	4642      	mov	r2, r8
 8008da4:	464b      	mov	r3, r9
 8008da6:	4630      	mov	r0, r6
 8008da8:	4639      	mov	r1, r7
 8008daa:	f7f7 fd57 	bl	800085c <__aeabi_ddiv>
 8008dae:	f7f7 fedb 	bl	8000b68 <__aeabi_d2iz>
 8008db2:	9002      	str	r0, [sp, #8]
 8008db4:	f7f7 fbbe 	bl	8000534 <__aeabi_i2d>
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	f7f7 fc24 	bl	8000608 <__aeabi_dmul>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	f7f7 fa66 	bl	8000298 <__aeabi_dsub>
 8008dcc:	9e02      	ldr	r6, [sp, #8]
 8008dce:	9f01      	ldr	r7, [sp, #4]
 8008dd0:	3630      	adds	r6, #48	; 0x30
 8008dd2:	f805 6b01 	strb.w	r6, [r5], #1
 8008dd6:	9e00      	ldr	r6, [sp, #0]
 8008dd8:	1bae      	subs	r6, r5, r6
 8008dda:	42b7      	cmp	r7, r6
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	d137      	bne.n	8008e52 <_dtoa_r+0x722>
 8008de2:	f7f7 fa5b 	bl	800029c <__adddf3>
 8008de6:	4642      	mov	r2, r8
 8008de8:	464b      	mov	r3, r9
 8008dea:	4606      	mov	r6, r0
 8008dec:	460f      	mov	r7, r1
 8008dee:	f7f7 fe9b 	bl	8000b28 <__aeabi_dcmpgt>
 8008df2:	b9c8      	cbnz	r0, 8008e28 <_dtoa_r+0x6f8>
 8008df4:	4642      	mov	r2, r8
 8008df6:	464b      	mov	r3, r9
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 fe6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e00:	b110      	cbz	r0, 8008e08 <_dtoa_r+0x6d8>
 8008e02:	9b02      	ldr	r3, [sp, #8]
 8008e04:	07d9      	lsls	r1, r3, #31
 8008e06:	d40f      	bmi.n	8008e28 <_dtoa_r+0x6f8>
 8008e08:	4620      	mov	r0, r4
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	f000 fcec 	bl	80097e8 <_Bfree>
 8008e10:	2300      	movs	r3, #0
 8008e12:	702b      	strb	r3, [r5, #0]
 8008e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e16:	f10a 0001 	add.w	r0, sl, #1
 8008e1a:	6018      	str	r0, [r3, #0]
 8008e1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f43f acd8 	beq.w	80087d4 <_dtoa_r+0xa4>
 8008e24:	601d      	str	r5, [r3, #0]
 8008e26:	e4d5      	b.n	80087d4 <_dtoa_r+0xa4>
 8008e28:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	461d      	mov	r5, r3
 8008e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e34:	2a39      	cmp	r2, #57	; 0x39
 8008e36:	d108      	bne.n	8008e4a <_dtoa_r+0x71a>
 8008e38:	9a00      	ldr	r2, [sp, #0]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d1f7      	bne.n	8008e2e <_dtoa_r+0x6fe>
 8008e3e:	9a07      	ldr	r2, [sp, #28]
 8008e40:	9900      	ldr	r1, [sp, #0]
 8008e42:	3201      	adds	r2, #1
 8008e44:	9207      	str	r2, [sp, #28]
 8008e46:	2230      	movs	r2, #48	; 0x30
 8008e48:	700a      	strb	r2, [r1, #0]
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	3201      	adds	r2, #1
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	e78c      	b.n	8008d6c <_dtoa_r+0x63c>
 8008e52:	4b7f      	ldr	r3, [pc, #508]	; (8009050 <_dtoa_r+0x920>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	f7f7 fbd7 	bl	8000608 <__aeabi_dmul>
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	f7f7 fe39 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d09b      	beq.n	8008da2 <_dtoa_r+0x672>
 8008e6a:	e7cd      	b.n	8008e08 <_dtoa_r+0x6d8>
 8008e6c:	9a08      	ldr	r2, [sp, #32]
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	f000 80c4 	beq.w	8008ffc <_dtoa_r+0x8cc>
 8008e74:	9a05      	ldr	r2, [sp, #20]
 8008e76:	2a01      	cmp	r2, #1
 8008e78:	f300 80a8 	bgt.w	8008fcc <_dtoa_r+0x89c>
 8008e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	f000 80a0 	beq.w	8008fc4 <_dtoa_r+0x894>
 8008e84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e88:	9e06      	ldr	r6, [sp, #24]
 8008e8a:	4645      	mov	r5, r8
 8008e8c:	9a04      	ldr	r2, [sp, #16]
 8008e8e:	2101      	movs	r1, #1
 8008e90:	441a      	add	r2, r3
 8008e92:	4620      	mov	r0, r4
 8008e94:	4498      	add	r8, r3
 8008e96:	9204      	str	r2, [sp, #16]
 8008e98:	f000 fd62 	bl	8009960 <__i2b>
 8008e9c:	4607      	mov	r7, r0
 8008e9e:	2d00      	cmp	r5, #0
 8008ea0:	dd0b      	ble.n	8008eba <_dtoa_r+0x78a>
 8008ea2:	9b04      	ldr	r3, [sp, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	dd08      	ble.n	8008eba <_dtoa_r+0x78a>
 8008ea8:	42ab      	cmp	r3, r5
 8008eaa:	9a04      	ldr	r2, [sp, #16]
 8008eac:	bfa8      	it	ge
 8008eae:	462b      	movge	r3, r5
 8008eb0:	eba8 0803 	sub.w	r8, r8, r3
 8008eb4:	1aed      	subs	r5, r5, r3
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	9b06      	ldr	r3, [sp, #24]
 8008ebc:	b1fb      	cbz	r3, 8008efe <_dtoa_r+0x7ce>
 8008ebe:	9b08      	ldr	r3, [sp, #32]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 809f 	beq.w	8009004 <_dtoa_r+0x8d4>
 8008ec6:	2e00      	cmp	r6, #0
 8008ec8:	dd11      	ble.n	8008eee <_dtoa_r+0x7be>
 8008eca:	4639      	mov	r1, r7
 8008ecc:	4632      	mov	r2, r6
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 fe02 	bl	8009ad8 <__pow5mult>
 8008ed4:	465a      	mov	r2, fp
 8008ed6:	4601      	mov	r1, r0
 8008ed8:	4607      	mov	r7, r0
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 fd56 	bl	800998c <__multiply>
 8008ee0:	4659      	mov	r1, fp
 8008ee2:	9007      	str	r0, [sp, #28]
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 fc7f 	bl	80097e8 <_Bfree>
 8008eea:	9b07      	ldr	r3, [sp, #28]
 8008eec:	469b      	mov	fp, r3
 8008eee:	9b06      	ldr	r3, [sp, #24]
 8008ef0:	1b9a      	subs	r2, r3, r6
 8008ef2:	d004      	beq.n	8008efe <_dtoa_r+0x7ce>
 8008ef4:	4659      	mov	r1, fp
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 fdee 	bl	8009ad8 <__pow5mult>
 8008efc:	4683      	mov	fp, r0
 8008efe:	2101      	movs	r1, #1
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 fd2d 	bl	8009960 <__i2b>
 8008f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	dd7c      	ble.n	8009008 <_dtoa_r+0x8d8>
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4601      	mov	r1, r0
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 fde0 	bl	8009ad8 <__pow5mult>
 8008f18:	9b05      	ldr	r3, [sp, #20]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	dd76      	ble.n	800900e <_dtoa_r+0x8de>
 8008f20:	2300      	movs	r3, #0
 8008f22:	9306      	str	r3, [sp, #24]
 8008f24:	6933      	ldr	r3, [r6, #16]
 8008f26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f2a:	6918      	ldr	r0, [r3, #16]
 8008f2c:	f000 fcc8 	bl	80098c0 <__hi0bits>
 8008f30:	f1c0 0020 	rsb	r0, r0, #32
 8008f34:	9b04      	ldr	r3, [sp, #16]
 8008f36:	4418      	add	r0, r3
 8008f38:	f010 001f 	ands.w	r0, r0, #31
 8008f3c:	f000 8086 	beq.w	800904c <_dtoa_r+0x91c>
 8008f40:	f1c0 0320 	rsb	r3, r0, #32
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	dd7f      	ble.n	8009048 <_dtoa_r+0x918>
 8008f48:	f1c0 001c 	rsb	r0, r0, #28
 8008f4c:	9b04      	ldr	r3, [sp, #16]
 8008f4e:	4403      	add	r3, r0
 8008f50:	4480      	add	r8, r0
 8008f52:	4405      	add	r5, r0
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	f1b8 0f00 	cmp.w	r8, #0
 8008f5a:	dd05      	ble.n	8008f68 <_dtoa_r+0x838>
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	4642      	mov	r2, r8
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fe13 	bl	8009b8c <__lshift>
 8008f66:	4683      	mov	fp, r0
 8008f68:	9b04      	ldr	r3, [sp, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	dd05      	ble.n	8008f7a <_dtoa_r+0x84a>
 8008f6e:	4631      	mov	r1, r6
 8008f70:	461a      	mov	r2, r3
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 fe0a 	bl	8009b8c <__lshift>
 8008f78:	4606      	mov	r6, r0
 8008f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d069      	beq.n	8009054 <_dtoa_r+0x924>
 8008f80:	4631      	mov	r1, r6
 8008f82:	4658      	mov	r0, fp
 8008f84:	f000 fe6e 	bl	8009c64 <__mcmp>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	da63      	bge.n	8009054 <_dtoa_r+0x924>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4659      	mov	r1, fp
 8008f90:	220a      	movs	r2, #10
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 fc4a 	bl	800982c <__multadd>
 8008f98:	9b08      	ldr	r3, [sp, #32]
 8008f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f9e:	4683      	mov	fp, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 818f 	beq.w	80092c4 <_dtoa_r+0xb94>
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	2300      	movs	r3, #0
 8008faa:	220a      	movs	r2, #10
 8008fac:	4620      	mov	r0, r4
 8008fae:	f000 fc3d 	bl	800982c <__multadd>
 8008fb2:	f1b9 0f00 	cmp.w	r9, #0
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	f300 808e 	bgt.w	80090d8 <_dtoa_r+0x9a8>
 8008fbc:	9b05      	ldr	r3, [sp, #20]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	dc50      	bgt.n	8009064 <_dtoa_r+0x934>
 8008fc2:	e089      	b.n	80090d8 <_dtoa_r+0x9a8>
 8008fc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fca:	e75d      	b.n	8008e88 <_dtoa_r+0x758>
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	1e5e      	subs	r6, r3, #1
 8008fd0:	9b06      	ldr	r3, [sp, #24]
 8008fd2:	42b3      	cmp	r3, r6
 8008fd4:	bfbf      	itttt	lt
 8008fd6:	9b06      	ldrlt	r3, [sp, #24]
 8008fd8:	9606      	strlt	r6, [sp, #24]
 8008fda:	1af2      	sublt	r2, r6, r3
 8008fdc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008fde:	bfb6      	itet	lt
 8008fe0:	189b      	addlt	r3, r3, r2
 8008fe2:	1b9e      	subge	r6, r3, r6
 8008fe4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008fe6:	9b01      	ldr	r3, [sp, #4]
 8008fe8:	bfb8      	it	lt
 8008fea:	2600      	movlt	r6, #0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bfb5      	itete	lt
 8008ff0:	eba8 0503 	sublt.w	r5, r8, r3
 8008ff4:	9b01      	ldrge	r3, [sp, #4]
 8008ff6:	2300      	movlt	r3, #0
 8008ff8:	4645      	movge	r5, r8
 8008ffa:	e747      	b.n	8008e8c <_dtoa_r+0x75c>
 8008ffc:	9e06      	ldr	r6, [sp, #24]
 8008ffe:	9f08      	ldr	r7, [sp, #32]
 8009000:	4645      	mov	r5, r8
 8009002:	e74c      	b.n	8008e9e <_dtoa_r+0x76e>
 8009004:	9a06      	ldr	r2, [sp, #24]
 8009006:	e775      	b.n	8008ef4 <_dtoa_r+0x7c4>
 8009008:	9b05      	ldr	r3, [sp, #20]
 800900a:	2b01      	cmp	r3, #1
 800900c:	dc18      	bgt.n	8009040 <_dtoa_r+0x910>
 800900e:	9b02      	ldr	r3, [sp, #8]
 8009010:	b9b3      	cbnz	r3, 8009040 <_dtoa_r+0x910>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009018:	b9a3      	cbnz	r3, 8009044 <_dtoa_r+0x914>
 800901a:	9b03      	ldr	r3, [sp, #12]
 800901c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009020:	0d1b      	lsrs	r3, r3, #20
 8009022:	051b      	lsls	r3, r3, #20
 8009024:	b12b      	cbz	r3, 8009032 <_dtoa_r+0x902>
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	3301      	adds	r3, #1
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	f108 0801 	add.w	r8, r8, #1
 8009030:	2301      	movs	r3, #1
 8009032:	9306      	str	r3, [sp, #24]
 8009034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009036:	2b00      	cmp	r3, #0
 8009038:	f47f af74 	bne.w	8008f24 <_dtoa_r+0x7f4>
 800903c:	2001      	movs	r0, #1
 800903e:	e779      	b.n	8008f34 <_dtoa_r+0x804>
 8009040:	2300      	movs	r3, #0
 8009042:	e7f6      	b.n	8009032 <_dtoa_r+0x902>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	e7f4      	b.n	8009032 <_dtoa_r+0x902>
 8009048:	d085      	beq.n	8008f56 <_dtoa_r+0x826>
 800904a:	4618      	mov	r0, r3
 800904c:	301c      	adds	r0, #28
 800904e:	e77d      	b.n	8008f4c <_dtoa_r+0x81c>
 8009050:	40240000 	.word	0x40240000
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	dc38      	bgt.n	80090cc <_dtoa_r+0x99c>
 800905a:	9b05      	ldr	r3, [sp, #20]
 800905c:	2b02      	cmp	r3, #2
 800905e:	dd35      	ble.n	80090cc <_dtoa_r+0x99c>
 8009060:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009064:	f1b9 0f00 	cmp.w	r9, #0
 8009068:	d10d      	bne.n	8009086 <_dtoa_r+0x956>
 800906a:	4631      	mov	r1, r6
 800906c:	464b      	mov	r3, r9
 800906e:	2205      	movs	r2, #5
 8009070:	4620      	mov	r0, r4
 8009072:	f000 fbdb 	bl	800982c <__multadd>
 8009076:	4601      	mov	r1, r0
 8009078:	4606      	mov	r6, r0
 800907a:	4658      	mov	r0, fp
 800907c:	f000 fdf2 	bl	8009c64 <__mcmp>
 8009080:	2800      	cmp	r0, #0
 8009082:	f73f adbd 	bgt.w	8008c00 <_dtoa_r+0x4d0>
 8009086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009088:	9d00      	ldr	r5, [sp, #0]
 800908a:	ea6f 0a03 	mvn.w	sl, r3
 800908e:	f04f 0800 	mov.w	r8, #0
 8009092:	4631      	mov	r1, r6
 8009094:	4620      	mov	r0, r4
 8009096:	f000 fba7 	bl	80097e8 <_Bfree>
 800909a:	2f00      	cmp	r7, #0
 800909c:	f43f aeb4 	beq.w	8008e08 <_dtoa_r+0x6d8>
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	d005      	beq.n	80090b2 <_dtoa_r+0x982>
 80090a6:	45b8      	cmp	r8, r7
 80090a8:	d003      	beq.n	80090b2 <_dtoa_r+0x982>
 80090aa:	4641      	mov	r1, r8
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 fb9b 	bl	80097e8 <_Bfree>
 80090b2:	4639      	mov	r1, r7
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fb97 	bl	80097e8 <_Bfree>
 80090ba:	e6a5      	b.n	8008e08 <_dtoa_r+0x6d8>
 80090bc:	2600      	movs	r6, #0
 80090be:	4637      	mov	r7, r6
 80090c0:	e7e1      	b.n	8009086 <_dtoa_r+0x956>
 80090c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80090c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090c8:	4637      	mov	r7, r6
 80090ca:	e599      	b.n	8008c00 <_dtoa_r+0x4d0>
 80090cc:	9b08      	ldr	r3, [sp, #32]
 80090ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 80fd 	beq.w	80092d2 <_dtoa_r+0xba2>
 80090d8:	2d00      	cmp	r5, #0
 80090da:	dd05      	ble.n	80090e8 <_dtoa_r+0x9b8>
 80090dc:	4639      	mov	r1, r7
 80090de:	462a      	mov	r2, r5
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fd53 	bl	8009b8c <__lshift>
 80090e6:	4607      	mov	r7, r0
 80090e8:	9b06      	ldr	r3, [sp, #24]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d05c      	beq.n	80091a8 <_dtoa_r+0xa78>
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fb39 	bl	8009768 <_Balloc>
 80090f6:	4605      	mov	r5, r0
 80090f8:	b928      	cbnz	r0, 8009106 <_dtoa_r+0x9d6>
 80090fa:	4b80      	ldr	r3, [pc, #512]	; (80092fc <_dtoa_r+0xbcc>)
 80090fc:	4602      	mov	r2, r0
 80090fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009102:	f7ff bb2e 	b.w	8008762 <_dtoa_r+0x32>
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	3202      	adds	r2, #2
 800910a:	0092      	lsls	r2, r2, #2
 800910c:	f107 010c 	add.w	r1, r7, #12
 8009110:	300c      	adds	r0, #12
 8009112:	f7fe fbc1 	bl	8007898 <memcpy>
 8009116:	2201      	movs	r2, #1
 8009118:	4629      	mov	r1, r5
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fd36 	bl	8009b8c <__lshift>
 8009120:	9b00      	ldr	r3, [sp, #0]
 8009122:	3301      	adds	r3, #1
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	9b00      	ldr	r3, [sp, #0]
 8009128:	444b      	add	r3, r9
 800912a:	9307      	str	r3, [sp, #28]
 800912c:	9b02      	ldr	r3, [sp, #8]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	46b8      	mov	r8, r7
 8009134:	9306      	str	r3, [sp, #24]
 8009136:	4607      	mov	r7, r0
 8009138:	9b01      	ldr	r3, [sp, #4]
 800913a:	4631      	mov	r1, r6
 800913c:	3b01      	subs	r3, #1
 800913e:	4658      	mov	r0, fp
 8009140:	9302      	str	r3, [sp, #8]
 8009142:	f7ff fa69 	bl	8008618 <quorem>
 8009146:	4603      	mov	r3, r0
 8009148:	3330      	adds	r3, #48	; 0x30
 800914a:	9004      	str	r0, [sp, #16]
 800914c:	4641      	mov	r1, r8
 800914e:	4658      	mov	r0, fp
 8009150:	9308      	str	r3, [sp, #32]
 8009152:	f000 fd87 	bl	8009c64 <__mcmp>
 8009156:	463a      	mov	r2, r7
 8009158:	4681      	mov	r9, r0
 800915a:	4631      	mov	r1, r6
 800915c:	4620      	mov	r0, r4
 800915e:	f000 fd9d 	bl	8009c9c <__mdiff>
 8009162:	68c2      	ldr	r2, [r0, #12]
 8009164:	9b08      	ldr	r3, [sp, #32]
 8009166:	4605      	mov	r5, r0
 8009168:	bb02      	cbnz	r2, 80091ac <_dtoa_r+0xa7c>
 800916a:	4601      	mov	r1, r0
 800916c:	4658      	mov	r0, fp
 800916e:	f000 fd79 	bl	8009c64 <__mcmp>
 8009172:	9b08      	ldr	r3, [sp, #32]
 8009174:	4602      	mov	r2, r0
 8009176:	4629      	mov	r1, r5
 8009178:	4620      	mov	r0, r4
 800917a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800917e:	f000 fb33 	bl	80097e8 <_Bfree>
 8009182:	9b05      	ldr	r3, [sp, #20]
 8009184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009186:	9d01      	ldr	r5, [sp, #4]
 8009188:	ea43 0102 	orr.w	r1, r3, r2
 800918c:	9b06      	ldr	r3, [sp, #24]
 800918e:	430b      	orrs	r3, r1
 8009190:	9b08      	ldr	r3, [sp, #32]
 8009192:	d10d      	bne.n	80091b0 <_dtoa_r+0xa80>
 8009194:	2b39      	cmp	r3, #57	; 0x39
 8009196:	d029      	beq.n	80091ec <_dtoa_r+0xabc>
 8009198:	f1b9 0f00 	cmp.w	r9, #0
 800919c:	dd01      	ble.n	80091a2 <_dtoa_r+0xa72>
 800919e:	9b04      	ldr	r3, [sp, #16]
 80091a0:	3331      	adds	r3, #49	; 0x31
 80091a2:	9a02      	ldr	r2, [sp, #8]
 80091a4:	7013      	strb	r3, [r2, #0]
 80091a6:	e774      	b.n	8009092 <_dtoa_r+0x962>
 80091a8:	4638      	mov	r0, r7
 80091aa:	e7b9      	b.n	8009120 <_dtoa_r+0x9f0>
 80091ac:	2201      	movs	r2, #1
 80091ae:	e7e2      	b.n	8009176 <_dtoa_r+0xa46>
 80091b0:	f1b9 0f00 	cmp.w	r9, #0
 80091b4:	db06      	blt.n	80091c4 <_dtoa_r+0xa94>
 80091b6:	9905      	ldr	r1, [sp, #20]
 80091b8:	ea41 0909 	orr.w	r9, r1, r9
 80091bc:	9906      	ldr	r1, [sp, #24]
 80091be:	ea59 0101 	orrs.w	r1, r9, r1
 80091c2:	d120      	bne.n	8009206 <_dtoa_r+0xad6>
 80091c4:	2a00      	cmp	r2, #0
 80091c6:	ddec      	ble.n	80091a2 <_dtoa_r+0xa72>
 80091c8:	4659      	mov	r1, fp
 80091ca:	2201      	movs	r2, #1
 80091cc:	4620      	mov	r0, r4
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	f000 fcdc 	bl	8009b8c <__lshift>
 80091d4:	4631      	mov	r1, r6
 80091d6:	4683      	mov	fp, r0
 80091d8:	f000 fd44 	bl	8009c64 <__mcmp>
 80091dc:	2800      	cmp	r0, #0
 80091de:	9b01      	ldr	r3, [sp, #4]
 80091e0:	dc02      	bgt.n	80091e8 <_dtoa_r+0xab8>
 80091e2:	d1de      	bne.n	80091a2 <_dtoa_r+0xa72>
 80091e4:	07da      	lsls	r2, r3, #31
 80091e6:	d5dc      	bpl.n	80091a2 <_dtoa_r+0xa72>
 80091e8:	2b39      	cmp	r3, #57	; 0x39
 80091ea:	d1d8      	bne.n	800919e <_dtoa_r+0xa6e>
 80091ec:	9a02      	ldr	r2, [sp, #8]
 80091ee:	2339      	movs	r3, #57	; 0x39
 80091f0:	7013      	strb	r3, [r2, #0]
 80091f2:	462b      	mov	r3, r5
 80091f4:	461d      	mov	r5, r3
 80091f6:	3b01      	subs	r3, #1
 80091f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091fc:	2a39      	cmp	r2, #57	; 0x39
 80091fe:	d050      	beq.n	80092a2 <_dtoa_r+0xb72>
 8009200:	3201      	adds	r2, #1
 8009202:	701a      	strb	r2, [r3, #0]
 8009204:	e745      	b.n	8009092 <_dtoa_r+0x962>
 8009206:	2a00      	cmp	r2, #0
 8009208:	dd03      	ble.n	8009212 <_dtoa_r+0xae2>
 800920a:	2b39      	cmp	r3, #57	; 0x39
 800920c:	d0ee      	beq.n	80091ec <_dtoa_r+0xabc>
 800920e:	3301      	adds	r3, #1
 8009210:	e7c7      	b.n	80091a2 <_dtoa_r+0xa72>
 8009212:	9a01      	ldr	r2, [sp, #4]
 8009214:	9907      	ldr	r1, [sp, #28]
 8009216:	f802 3c01 	strb.w	r3, [r2, #-1]
 800921a:	428a      	cmp	r2, r1
 800921c:	d02a      	beq.n	8009274 <_dtoa_r+0xb44>
 800921e:	4659      	mov	r1, fp
 8009220:	2300      	movs	r3, #0
 8009222:	220a      	movs	r2, #10
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fb01 	bl	800982c <__multadd>
 800922a:	45b8      	cmp	r8, r7
 800922c:	4683      	mov	fp, r0
 800922e:	f04f 0300 	mov.w	r3, #0
 8009232:	f04f 020a 	mov.w	r2, #10
 8009236:	4641      	mov	r1, r8
 8009238:	4620      	mov	r0, r4
 800923a:	d107      	bne.n	800924c <_dtoa_r+0xb1c>
 800923c:	f000 faf6 	bl	800982c <__multadd>
 8009240:	4680      	mov	r8, r0
 8009242:	4607      	mov	r7, r0
 8009244:	9b01      	ldr	r3, [sp, #4]
 8009246:	3301      	adds	r3, #1
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	e775      	b.n	8009138 <_dtoa_r+0xa08>
 800924c:	f000 faee 	bl	800982c <__multadd>
 8009250:	4639      	mov	r1, r7
 8009252:	4680      	mov	r8, r0
 8009254:	2300      	movs	r3, #0
 8009256:	220a      	movs	r2, #10
 8009258:	4620      	mov	r0, r4
 800925a:	f000 fae7 	bl	800982c <__multadd>
 800925e:	4607      	mov	r7, r0
 8009260:	e7f0      	b.n	8009244 <_dtoa_r+0xb14>
 8009262:	f1b9 0f00 	cmp.w	r9, #0
 8009266:	9a00      	ldr	r2, [sp, #0]
 8009268:	bfcc      	ite	gt
 800926a:	464d      	movgt	r5, r9
 800926c:	2501      	movle	r5, #1
 800926e:	4415      	add	r5, r2
 8009270:	f04f 0800 	mov.w	r8, #0
 8009274:	4659      	mov	r1, fp
 8009276:	2201      	movs	r2, #1
 8009278:	4620      	mov	r0, r4
 800927a:	9301      	str	r3, [sp, #4]
 800927c:	f000 fc86 	bl	8009b8c <__lshift>
 8009280:	4631      	mov	r1, r6
 8009282:	4683      	mov	fp, r0
 8009284:	f000 fcee 	bl	8009c64 <__mcmp>
 8009288:	2800      	cmp	r0, #0
 800928a:	dcb2      	bgt.n	80091f2 <_dtoa_r+0xac2>
 800928c:	d102      	bne.n	8009294 <_dtoa_r+0xb64>
 800928e:	9b01      	ldr	r3, [sp, #4]
 8009290:	07db      	lsls	r3, r3, #31
 8009292:	d4ae      	bmi.n	80091f2 <_dtoa_r+0xac2>
 8009294:	462b      	mov	r3, r5
 8009296:	461d      	mov	r5, r3
 8009298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800929c:	2a30      	cmp	r2, #48	; 0x30
 800929e:	d0fa      	beq.n	8009296 <_dtoa_r+0xb66>
 80092a0:	e6f7      	b.n	8009092 <_dtoa_r+0x962>
 80092a2:	9a00      	ldr	r2, [sp, #0]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d1a5      	bne.n	80091f4 <_dtoa_r+0xac4>
 80092a8:	f10a 0a01 	add.w	sl, sl, #1
 80092ac:	2331      	movs	r3, #49	; 0x31
 80092ae:	e779      	b.n	80091a4 <_dtoa_r+0xa74>
 80092b0:	4b13      	ldr	r3, [pc, #76]	; (8009300 <_dtoa_r+0xbd0>)
 80092b2:	f7ff baaf 	b.w	8008814 <_dtoa_r+0xe4>
 80092b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f47f aa86 	bne.w	80087ca <_dtoa_r+0x9a>
 80092be:	4b11      	ldr	r3, [pc, #68]	; (8009304 <_dtoa_r+0xbd4>)
 80092c0:	f7ff baa8 	b.w	8008814 <_dtoa_r+0xe4>
 80092c4:	f1b9 0f00 	cmp.w	r9, #0
 80092c8:	dc03      	bgt.n	80092d2 <_dtoa_r+0xba2>
 80092ca:	9b05      	ldr	r3, [sp, #20]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	f73f aec9 	bgt.w	8009064 <_dtoa_r+0x934>
 80092d2:	9d00      	ldr	r5, [sp, #0]
 80092d4:	4631      	mov	r1, r6
 80092d6:	4658      	mov	r0, fp
 80092d8:	f7ff f99e 	bl	8008618 <quorem>
 80092dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80092e0:	f805 3b01 	strb.w	r3, [r5], #1
 80092e4:	9a00      	ldr	r2, [sp, #0]
 80092e6:	1aaa      	subs	r2, r5, r2
 80092e8:	4591      	cmp	r9, r2
 80092ea:	ddba      	ble.n	8009262 <_dtoa_r+0xb32>
 80092ec:	4659      	mov	r1, fp
 80092ee:	2300      	movs	r3, #0
 80092f0:	220a      	movs	r2, #10
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 fa9a 	bl	800982c <__multadd>
 80092f8:	4683      	mov	fp, r0
 80092fa:	e7eb      	b.n	80092d4 <_dtoa_r+0xba4>
 80092fc:	08066647 	.word	0x08066647
 8009300:	080665a0 	.word	0x080665a0
 8009304:	080665c4 	.word	0x080665c4

08009308 <__sflush_r>:
 8009308:	898a      	ldrh	r2, [r1, #12]
 800930a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800930e:	4605      	mov	r5, r0
 8009310:	0710      	lsls	r0, r2, #28
 8009312:	460c      	mov	r4, r1
 8009314:	d458      	bmi.n	80093c8 <__sflush_r+0xc0>
 8009316:	684b      	ldr	r3, [r1, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc05      	bgt.n	8009328 <__sflush_r+0x20>
 800931c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	dc02      	bgt.n	8009328 <__sflush_r+0x20>
 8009322:	2000      	movs	r0, #0
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800932a:	2e00      	cmp	r6, #0
 800932c:	d0f9      	beq.n	8009322 <__sflush_r+0x1a>
 800932e:	2300      	movs	r3, #0
 8009330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009334:	682f      	ldr	r7, [r5, #0]
 8009336:	602b      	str	r3, [r5, #0]
 8009338:	d032      	beq.n	80093a0 <__sflush_r+0x98>
 800933a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	075a      	lsls	r2, r3, #29
 8009340:	d505      	bpl.n	800934e <__sflush_r+0x46>
 8009342:	6863      	ldr	r3, [r4, #4]
 8009344:	1ac0      	subs	r0, r0, r3
 8009346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009348:	b10b      	cbz	r3, 800934e <__sflush_r+0x46>
 800934a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800934c:	1ac0      	subs	r0, r0, r3
 800934e:	2300      	movs	r3, #0
 8009350:	4602      	mov	r2, r0
 8009352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009354:	6a21      	ldr	r1, [r4, #32]
 8009356:	4628      	mov	r0, r5
 8009358:	47b0      	blx	r6
 800935a:	1c43      	adds	r3, r0, #1
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	d106      	bne.n	800936e <__sflush_r+0x66>
 8009360:	6829      	ldr	r1, [r5, #0]
 8009362:	291d      	cmp	r1, #29
 8009364:	d82c      	bhi.n	80093c0 <__sflush_r+0xb8>
 8009366:	4a2a      	ldr	r2, [pc, #168]	; (8009410 <__sflush_r+0x108>)
 8009368:	40ca      	lsrs	r2, r1
 800936a:	07d6      	lsls	r6, r2, #31
 800936c:	d528      	bpl.n	80093c0 <__sflush_r+0xb8>
 800936e:	2200      	movs	r2, #0
 8009370:	6062      	str	r2, [r4, #4]
 8009372:	04d9      	lsls	r1, r3, #19
 8009374:	6922      	ldr	r2, [r4, #16]
 8009376:	6022      	str	r2, [r4, #0]
 8009378:	d504      	bpl.n	8009384 <__sflush_r+0x7c>
 800937a:	1c42      	adds	r2, r0, #1
 800937c:	d101      	bne.n	8009382 <__sflush_r+0x7a>
 800937e:	682b      	ldr	r3, [r5, #0]
 8009380:	b903      	cbnz	r3, 8009384 <__sflush_r+0x7c>
 8009382:	6560      	str	r0, [r4, #84]	; 0x54
 8009384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009386:	602f      	str	r7, [r5, #0]
 8009388:	2900      	cmp	r1, #0
 800938a:	d0ca      	beq.n	8009322 <__sflush_r+0x1a>
 800938c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009390:	4299      	cmp	r1, r3
 8009392:	d002      	beq.n	800939a <__sflush_r+0x92>
 8009394:	4628      	mov	r0, r5
 8009396:	f7fe faa5 	bl	80078e4 <_free_r>
 800939a:	2000      	movs	r0, #0
 800939c:	6360      	str	r0, [r4, #52]	; 0x34
 800939e:	e7c1      	b.n	8009324 <__sflush_r+0x1c>
 80093a0:	6a21      	ldr	r1, [r4, #32]
 80093a2:	2301      	movs	r3, #1
 80093a4:	4628      	mov	r0, r5
 80093a6:	47b0      	blx	r6
 80093a8:	1c41      	adds	r1, r0, #1
 80093aa:	d1c7      	bne.n	800933c <__sflush_r+0x34>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0c4      	beq.n	800933c <__sflush_r+0x34>
 80093b2:	2b1d      	cmp	r3, #29
 80093b4:	d001      	beq.n	80093ba <__sflush_r+0xb2>
 80093b6:	2b16      	cmp	r3, #22
 80093b8:	d101      	bne.n	80093be <__sflush_r+0xb6>
 80093ba:	602f      	str	r7, [r5, #0]
 80093bc:	e7b1      	b.n	8009322 <__sflush_r+0x1a>
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	e7ad      	b.n	8009324 <__sflush_r+0x1c>
 80093c8:	690f      	ldr	r7, [r1, #16]
 80093ca:	2f00      	cmp	r7, #0
 80093cc:	d0a9      	beq.n	8009322 <__sflush_r+0x1a>
 80093ce:	0793      	lsls	r3, r2, #30
 80093d0:	680e      	ldr	r6, [r1, #0]
 80093d2:	bf08      	it	eq
 80093d4:	694b      	ldreq	r3, [r1, #20]
 80093d6:	600f      	str	r7, [r1, #0]
 80093d8:	bf18      	it	ne
 80093da:	2300      	movne	r3, #0
 80093dc:	eba6 0807 	sub.w	r8, r6, r7
 80093e0:	608b      	str	r3, [r1, #8]
 80093e2:	f1b8 0f00 	cmp.w	r8, #0
 80093e6:	dd9c      	ble.n	8009322 <__sflush_r+0x1a>
 80093e8:	6a21      	ldr	r1, [r4, #32]
 80093ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093ec:	4643      	mov	r3, r8
 80093ee:	463a      	mov	r2, r7
 80093f0:	4628      	mov	r0, r5
 80093f2:	47b0      	blx	r6
 80093f4:	2800      	cmp	r0, #0
 80093f6:	dc06      	bgt.n	8009406 <__sflush_r+0xfe>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fe:	81a3      	strh	r3, [r4, #12]
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	e78e      	b.n	8009324 <__sflush_r+0x1c>
 8009406:	4407      	add	r7, r0
 8009408:	eba8 0800 	sub.w	r8, r8, r0
 800940c:	e7e9      	b.n	80093e2 <__sflush_r+0xda>
 800940e:	bf00      	nop
 8009410:	20400001 	.word	0x20400001

08009414 <_fflush_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	690b      	ldr	r3, [r1, #16]
 8009418:	4605      	mov	r5, r0
 800941a:	460c      	mov	r4, r1
 800941c:	b913      	cbnz	r3, 8009424 <_fflush_r+0x10>
 800941e:	2500      	movs	r5, #0
 8009420:	4628      	mov	r0, r5
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	b118      	cbz	r0, 800942e <_fflush_r+0x1a>
 8009426:	6983      	ldr	r3, [r0, #24]
 8009428:	b90b      	cbnz	r3, 800942e <_fflush_r+0x1a>
 800942a:	f000 f887 	bl	800953c <__sinit>
 800942e:	4b14      	ldr	r3, [pc, #80]	; (8009480 <_fflush_r+0x6c>)
 8009430:	429c      	cmp	r4, r3
 8009432:	d11b      	bne.n	800946c <_fflush_r+0x58>
 8009434:	686c      	ldr	r4, [r5, #4]
 8009436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0ef      	beq.n	800941e <_fflush_r+0xa>
 800943e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009440:	07d0      	lsls	r0, r2, #31
 8009442:	d404      	bmi.n	800944e <_fflush_r+0x3a>
 8009444:	0599      	lsls	r1, r3, #22
 8009446:	d402      	bmi.n	800944e <_fflush_r+0x3a>
 8009448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800944a:	f000 f91a 	bl	8009682 <__retarget_lock_acquire_recursive>
 800944e:	4628      	mov	r0, r5
 8009450:	4621      	mov	r1, r4
 8009452:	f7ff ff59 	bl	8009308 <__sflush_r>
 8009456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009458:	07da      	lsls	r2, r3, #31
 800945a:	4605      	mov	r5, r0
 800945c:	d4e0      	bmi.n	8009420 <_fflush_r+0xc>
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	059b      	lsls	r3, r3, #22
 8009462:	d4dd      	bmi.n	8009420 <_fflush_r+0xc>
 8009464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009466:	f000 f90d 	bl	8009684 <__retarget_lock_release_recursive>
 800946a:	e7d9      	b.n	8009420 <_fflush_r+0xc>
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <_fflush_r+0x70>)
 800946e:	429c      	cmp	r4, r3
 8009470:	d101      	bne.n	8009476 <_fflush_r+0x62>
 8009472:	68ac      	ldr	r4, [r5, #8]
 8009474:	e7df      	b.n	8009436 <_fflush_r+0x22>
 8009476:	4b04      	ldr	r3, [pc, #16]	; (8009488 <_fflush_r+0x74>)
 8009478:	429c      	cmp	r4, r3
 800947a:	bf08      	it	eq
 800947c:	68ec      	ldreq	r4, [r5, #12]
 800947e:	e7da      	b.n	8009436 <_fflush_r+0x22>
 8009480:	08066678 	.word	0x08066678
 8009484:	08066698 	.word	0x08066698
 8009488:	08066658 	.word	0x08066658

0800948c <std>:
 800948c:	2300      	movs	r3, #0
 800948e:	b510      	push	{r4, lr}
 8009490:	4604      	mov	r4, r0
 8009492:	e9c0 3300 	strd	r3, r3, [r0]
 8009496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800949a:	6083      	str	r3, [r0, #8]
 800949c:	8181      	strh	r1, [r0, #12]
 800949e:	6643      	str	r3, [r0, #100]	; 0x64
 80094a0:	81c2      	strh	r2, [r0, #14]
 80094a2:	6183      	str	r3, [r0, #24]
 80094a4:	4619      	mov	r1, r3
 80094a6:	2208      	movs	r2, #8
 80094a8:	305c      	adds	r0, #92	; 0x5c
 80094aa:	f7fe fa03 	bl	80078b4 <memset>
 80094ae:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <std+0x38>)
 80094b0:	6263      	str	r3, [r4, #36]	; 0x24
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <std+0x3c>)
 80094b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80094b6:	4b05      	ldr	r3, [pc, #20]	; (80094cc <std+0x40>)
 80094b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094ba:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <std+0x44>)
 80094bc:	6224      	str	r4, [r4, #32]
 80094be:	6323      	str	r3, [r4, #48]	; 0x30
 80094c0:	bd10      	pop	{r4, pc}
 80094c2:	bf00      	nop
 80094c4:	0800a41d 	.word	0x0800a41d
 80094c8:	0800a43f 	.word	0x0800a43f
 80094cc:	0800a477 	.word	0x0800a477
 80094d0:	0800a49b 	.word	0x0800a49b

080094d4 <_cleanup_r>:
 80094d4:	4901      	ldr	r1, [pc, #4]	; (80094dc <_cleanup_r+0x8>)
 80094d6:	f000 b8af 	b.w	8009638 <_fwalk_reent>
 80094da:	bf00      	nop
 80094dc:	08009415 	.word	0x08009415

080094e0 <__sfmoreglue>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	1e4a      	subs	r2, r1, #1
 80094e4:	2568      	movs	r5, #104	; 0x68
 80094e6:	4355      	muls	r5, r2
 80094e8:	460e      	mov	r6, r1
 80094ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094ee:	f7fe fa49 	bl	8007984 <_malloc_r>
 80094f2:	4604      	mov	r4, r0
 80094f4:	b140      	cbz	r0, 8009508 <__sfmoreglue+0x28>
 80094f6:	2100      	movs	r1, #0
 80094f8:	e9c0 1600 	strd	r1, r6, [r0]
 80094fc:	300c      	adds	r0, #12
 80094fe:	60a0      	str	r0, [r4, #8]
 8009500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009504:	f7fe f9d6 	bl	80078b4 <memset>
 8009508:	4620      	mov	r0, r4
 800950a:	bd70      	pop	{r4, r5, r6, pc}

0800950c <__sfp_lock_acquire>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__sfp_lock_acquire+0x8>)
 800950e:	f000 b8b8 	b.w	8009682 <__retarget_lock_acquire_recursive>
 8009512:	bf00      	nop
 8009514:	20002bec 	.word	0x20002bec

08009518 <__sfp_lock_release>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__sfp_lock_release+0x8>)
 800951a:	f000 b8b3 	b.w	8009684 <__retarget_lock_release_recursive>
 800951e:	bf00      	nop
 8009520:	20002bec 	.word	0x20002bec

08009524 <__sinit_lock_acquire>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__sinit_lock_acquire+0x8>)
 8009526:	f000 b8ac 	b.w	8009682 <__retarget_lock_acquire_recursive>
 800952a:	bf00      	nop
 800952c:	20002be7 	.word	0x20002be7

08009530 <__sinit_lock_release>:
 8009530:	4801      	ldr	r0, [pc, #4]	; (8009538 <__sinit_lock_release+0x8>)
 8009532:	f000 b8a7 	b.w	8009684 <__retarget_lock_release_recursive>
 8009536:	bf00      	nop
 8009538:	20002be7 	.word	0x20002be7

0800953c <__sinit>:
 800953c:	b510      	push	{r4, lr}
 800953e:	4604      	mov	r4, r0
 8009540:	f7ff fff0 	bl	8009524 <__sinit_lock_acquire>
 8009544:	69a3      	ldr	r3, [r4, #24]
 8009546:	b11b      	cbz	r3, 8009550 <__sinit+0x14>
 8009548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800954c:	f7ff bff0 	b.w	8009530 <__sinit_lock_release>
 8009550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009554:	6523      	str	r3, [r4, #80]	; 0x50
 8009556:	4b13      	ldr	r3, [pc, #76]	; (80095a4 <__sinit+0x68>)
 8009558:	4a13      	ldr	r2, [pc, #76]	; (80095a8 <__sinit+0x6c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	62a2      	str	r2, [r4, #40]	; 0x28
 800955e:	42a3      	cmp	r3, r4
 8009560:	bf04      	itt	eq
 8009562:	2301      	moveq	r3, #1
 8009564:	61a3      	streq	r3, [r4, #24]
 8009566:	4620      	mov	r0, r4
 8009568:	f000 f820 	bl	80095ac <__sfp>
 800956c:	6060      	str	r0, [r4, #4]
 800956e:	4620      	mov	r0, r4
 8009570:	f000 f81c 	bl	80095ac <__sfp>
 8009574:	60a0      	str	r0, [r4, #8]
 8009576:	4620      	mov	r0, r4
 8009578:	f000 f818 	bl	80095ac <__sfp>
 800957c:	2200      	movs	r2, #0
 800957e:	60e0      	str	r0, [r4, #12]
 8009580:	2104      	movs	r1, #4
 8009582:	6860      	ldr	r0, [r4, #4]
 8009584:	f7ff ff82 	bl	800948c <std>
 8009588:	68a0      	ldr	r0, [r4, #8]
 800958a:	2201      	movs	r2, #1
 800958c:	2109      	movs	r1, #9
 800958e:	f7ff ff7d 	bl	800948c <std>
 8009592:	68e0      	ldr	r0, [r4, #12]
 8009594:	2202      	movs	r2, #2
 8009596:	2112      	movs	r1, #18
 8009598:	f7ff ff78 	bl	800948c <std>
 800959c:	2301      	movs	r3, #1
 800959e:	61a3      	str	r3, [r4, #24]
 80095a0:	e7d2      	b.n	8009548 <__sinit+0xc>
 80095a2:	bf00      	nop
 80095a4:	0806658c 	.word	0x0806658c
 80095a8:	080094d5 	.word	0x080094d5

080095ac <__sfp>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	4607      	mov	r7, r0
 80095b0:	f7ff ffac 	bl	800950c <__sfp_lock_acquire>
 80095b4:	4b1e      	ldr	r3, [pc, #120]	; (8009630 <__sfp+0x84>)
 80095b6:	681e      	ldr	r6, [r3, #0]
 80095b8:	69b3      	ldr	r3, [r6, #24]
 80095ba:	b913      	cbnz	r3, 80095c2 <__sfp+0x16>
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff ffbd 	bl	800953c <__sinit>
 80095c2:	3648      	adds	r6, #72	; 0x48
 80095c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	d503      	bpl.n	80095d4 <__sfp+0x28>
 80095cc:	6833      	ldr	r3, [r6, #0]
 80095ce:	b30b      	cbz	r3, 8009614 <__sfp+0x68>
 80095d0:	6836      	ldr	r6, [r6, #0]
 80095d2:	e7f7      	b.n	80095c4 <__sfp+0x18>
 80095d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095d8:	b9d5      	cbnz	r5, 8009610 <__sfp+0x64>
 80095da:	4b16      	ldr	r3, [pc, #88]	; (8009634 <__sfp+0x88>)
 80095dc:	60e3      	str	r3, [r4, #12]
 80095de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095e2:	6665      	str	r5, [r4, #100]	; 0x64
 80095e4:	f000 f84c 	bl	8009680 <__retarget_lock_init_recursive>
 80095e8:	f7ff ff96 	bl	8009518 <__sfp_lock_release>
 80095ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095f4:	6025      	str	r5, [r4, #0]
 80095f6:	61a5      	str	r5, [r4, #24]
 80095f8:	2208      	movs	r2, #8
 80095fa:	4629      	mov	r1, r5
 80095fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009600:	f7fe f958 	bl	80078b4 <memset>
 8009604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800960c:	4620      	mov	r0, r4
 800960e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009610:	3468      	adds	r4, #104	; 0x68
 8009612:	e7d9      	b.n	80095c8 <__sfp+0x1c>
 8009614:	2104      	movs	r1, #4
 8009616:	4638      	mov	r0, r7
 8009618:	f7ff ff62 	bl	80094e0 <__sfmoreglue>
 800961c:	4604      	mov	r4, r0
 800961e:	6030      	str	r0, [r6, #0]
 8009620:	2800      	cmp	r0, #0
 8009622:	d1d5      	bne.n	80095d0 <__sfp+0x24>
 8009624:	f7ff ff78 	bl	8009518 <__sfp_lock_release>
 8009628:	230c      	movs	r3, #12
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	e7ee      	b.n	800960c <__sfp+0x60>
 800962e:	bf00      	nop
 8009630:	0806658c 	.word	0x0806658c
 8009634:	ffff0001 	.word	0xffff0001

08009638 <_fwalk_reent>:
 8009638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800963c:	4606      	mov	r6, r0
 800963e:	4688      	mov	r8, r1
 8009640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009644:	2700      	movs	r7, #0
 8009646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800964a:	f1b9 0901 	subs.w	r9, r9, #1
 800964e:	d505      	bpl.n	800965c <_fwalk_reent+0x24>
 8009650:	6824      	ldr	r4, [r4, #0]
 8009652:	2c00      	cmp	r4, #0
 8009654:	d1f7      	bne.n	8009646 <_fwalk_reent+0xe>
 8009656:	4638      	mov	r0, r7
 8009658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965c:	89ab      	ldrh	r3, [r5, #12]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d907      	bls.n	8009672 <_fwalk_reent+0x3a>
 8009662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009666:	3301      	adds	r3, #1
 8009668:	d003      	beq.n	8009672 <_fwalk_reent+0x3a>
 800966a:	4629      	mov	r1, r5
 800966c:	4630      	mov	r0, r6
 800966e:	47c0      	blx	r8
 8009670:	4307      	orrs	r7, r0
 8009672:	3568      	adds	r5, #104	; 0x68
 8009674:	e7e9      	b.n	800964a <_fwalk_reent+0x12>
	...

08009678 <_localeconv_r>:
 8009678:	4800      	ldr	r0, [pc, #0]	; (800967c <_localeconv_r+0x4>)
 800967a:	4770      	bx	lr
 800967c:	20001024 	.word	0x20001024

08009680 <__retarget_lock_init_recursive>:
 8009680:	4770      	bx	lr

08009682 <__retarget_lock_acquire_recursive>:
 8009682:	4770      	bx	lr

08009684 <__retarget_lock_release_recursive>:
 8009684:	4770      	bx	lr

08009686 <__swhatbuf_r>:
 8009686:	b570      	push	{r4, r5, r6, lr}
 8009688:	460e      	mov	r6, r1
 800968a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968e:	2900      	cmp	r1, #0
 8009690:	b096      	sub	sp, #88	; 0x58
 8009692:	4614      	mov	r4, r2
 8009694:	461d      	mov	r5, r3
 8009696:	da07      	bge.n	80096a8 <__swhatbuf_r+0x22>
 8009698:	2300      	movs	r3, #0
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	89b3      	ldrh	r3, [r6, #12]
 800969e:	061a      	lsls	r2, r3, #24
 80096a0:	d410      	bmi.n	80096c4 <__swhatbuf_r+0x3e>
 80096a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a6:	e00e      	b.n	80096c6 <__swhatbuf_r+0x40>
 80096a8:	466a      	mov	r2, sp
 80096aa:	f000 ff4d 	bl	800a548 <_fstat_r>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	dbf2      	blt.n	8009698 <__swhatbuf_r+0x12>
 80096b2:	9a01      	ldr	r2, [sp, #4]
 80096b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096bc:	425a      	negs	r2, r3
 80096be:	415a      	adcs	r2, r3
 80096c0:	602a      	str	r2, [r5, #0]
 80096c2:	e7ee      	b.n	80096a2 <__swhatbuf_r+0x1c>
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	2000      	movs	r0, #0
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	b016      	add	sp, #88	; 0x58
 80096cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080096d0 <__smakebuf_r>:
 80096d0:	898b      	ldrh	r3, [r1, #12]
 80096d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096d4:	079d      	lsls	r5, r3, #30
 80096d6:	4606      	mov	r6, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	d507      	bpl.n	80096ec <__smakebuf_r+0x1c>
 80096dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	6123      	str	r3, [r4, #16]
 80096e4:	2301      	movs	r3, #1
 80096e6:	6163      	str	r3, [r4, #20]
 80096e8:	b002      	add	sp, #8
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	ab01      	add	r3, sp, #4
 80096ee:	466a      	mov	r2, sp
 80096f0:	f7ff ffc9 	bl	8009686 <__swhatbuf_r>
 80096f4:	9900      	ldr	r1, [sp, #0]
 80096f6:	4605      	mov	r5, r0
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7fe f943 	bl	8007984 <_malloc_r>
 80096fe:	b948      	cbnz	r0, 8009714 <__smakebuf_r+0x44>
 8009700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009704:	059a      	lsls	r2, r3, #22
 8009706:	d4ef      	bmi.n	80096e8 <__smakebuf_r+0x18>
 8009708:	f023 0303 	bic.w	r3, r3, #3
 800970c:	f043 0302 	orr.w	r3, r3, #2
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	e7e3      	b.n	80096dc <__smakebuf_r+0xc>
 8009714:	4b0d      	ldr	r3, [pc, #52]	; (800974c <__smakebuf_r+0x7c>)
 8009716:	62b3      	str	r3, [r6, #40]	; 0x28
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	6020      	str	r0, [r4, #0]
 800971c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	9b00      	ldr	r3, [sp, #0]
 8009724:	6163      	str	r3, [r4, #20]
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	6120      	str	r0, [r4, #16]
 800972a:	b15b      	cbz	r3, 8009744 <__smakebuf_r+0x74>
 800972c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009730:	4630      	mov	r0, r6
 8009732:	f000 ff1b 	bl	800a56c <_isatty_r>
 8009736:	b128      	cbz	r0, 8009744 <__smakebuf_r+0x74>
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	f023 0303 	bic.w	r3, r3, #3
 800973e:	f043 0301 	orr.w	r3, r3, #1
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	89a0      	ldrh	r0, [r4, #12]
 8009746:	4305      	orrs	r5, r0
 8009748:	81a5      	strh	r5, [r4, #12]
 800974a:	e7cd      	b.n	80096e8 <__smakebuf_r+0x18>
 800974c:	080094d5 	.word	0x080094d5

08009750 <__malloc_lock>:
 8009750:	4801      	ldr	r0, [pc, #4]	; (8009758 <__malloc_lock+0x8>)
 8009752:	f7ff bf96 	b.w	8009682 <__retarget_lock_acquire_recursive>
 8009756:	bf00      	nop
 8009758:	20002be8 	.word	0x20002be8

0800975c <__malloc_unlock>:
 800975c:	4801      	ldr	r0, [pc, #4]	; (8009764 <__malloc_unlock+0x8>)
 800975e:	f7ff bf91 	b.w	8009684 <__retarget_lock_release_recursive>
 8009762:	bf00      	nop
 8009764:	20002be8 	.word	0x20002be8

08009768 <_Balloc>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800976c:	4604      	mov	r4, r0
 800976e:	460d      	mov	r5, r1
 8009770:	b976      	cbnz	r6, 8009790 <_Balloc+0x28>
 8009772:	2010      	movs	r0, #16
 8009774:	f7fe f880 	bl	8007878 <malloc>
 8009778:	4602      	mov	r2, r0
 800977a:	6260      	str	r0, [r4, #36]	; 0x24
 800977c:	b920      	cbnz	r0, 8009788 <_Balloc+0x20>
 800977e:	4b18      	ldr	r3, [pc, #96]	; (80097e0 <_Balloc+0x78>)
 8009780:	4818      	ldr	r0, [pc, #96]	; (80097e4 <_Balloc+0x7c>)
 8009782:	2166      	movs	r1, #102	; 0x66
 8009784:	f000 fea0 	bl	800a4c8 <__assert_func>
 8009788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800978c:	6006      	str	r6, [r0, #0]
 800978e:	60c6      	str	r6, [r0, #12]
 8009790:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009792:	68f3      	ldr	r3, [r6, #12]
 8009794:	b183      	cbz	r3, 80097b8 <_Balloc+0x50>
 8009796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800979e:	b9b8      	cbnz	r0, 80097d0 <_Balloc+0x68>
 80097a0:	2101      	movs	r1, #1
 80097a2:	fa01 f605 	lsl.w	r6, r1, r5
 80097a6:	1d72      	adds	r2, r6, #5
 80097a8:	0092      	lsls	r2, r2, #2
 80097aa:	4620      	mov	r0, r4
 80097ac:	f7fe f88a 	bl	80078c4 <_calloc_r>
 80097b0:	b160      	cbz	r0, 80097cc <_Balloc+0x64>
 80097b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097b6:	e00e      	b.n	80097d6 <_Balloc+0x6e>
 80097b8:	2221      	movs	r2, #33	; 0x21
 80097ba:	2104      	movs	r1, #4
 80097bc:	4620      	mov	r0, r4
 80097be:	f7fe f881 	bl	80078c4 <_calloc_r>
 80097c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c4:	60f0      	str	r0, [r6, #12]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e4      	bne.n	8009796 <_Balloc+0x2e>
 80097cc:	2000      	movs	r0, #0
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	6802      	ldr	r2, [r0, #0]
 80097d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097d6:	2300      	movs	r3, #0
 80097d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097dc:	e7f7      	b.n	80097ce <_Balloc+0x66>
 80097de:	bf00      	nop
 80097e0:	080665d1 	.word	0x080665d1
 80097e4:	080666b8 	.word	0x080666b8

080097e8 <_Bfree>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097ec:	4605      	mov	r5, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	b976      	cbnz	r6, 8009810 <_Bfree+0x28>
 80097f2:	2010      	movs	r0, #16
 80097f4:	f7fe f840 	bl	8007878 <malloc>
 80097f8:	4602      	mov	r2, r0
 80097fa:	6268      	str	r0, [r5, #36]	; 0x24
 80097fc:	b920      	cbnz	r0, 8009808 <_Bfree+0x20>
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <_Bfree+0x3c>)
 8009800:	4809      	ldr	r0, [pc, #36]	; (8009828 <_Bfree+0x40>)
 8009802:	218a      	movs	r1, #138	; 0x8a
 8009804:	f000 fe60 	bl	800a4c8 <__assert_func>
 8009808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800980c:	6006      	str	r6, [r0, #0]
 800980e:	60c6      	str	r6, [r0, #12]
 8009810:	b13c      	cbz	r4, 8009822 <_Bfree+0x3a>
 8009812:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009814:	6862      	ldr	r2, [r4, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800981c:	6021      	str	r1, [r4, #0]
 800981e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009822:	bd70      	pop	{r4, r5, r6, pc}
 8009824:	080665d1 	.word	0x080665d1
 8009828:	080666b8 	.word	0x080666b8

0800982c <__multadd>:
 800982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009830:	690e      	ldr	r6, [r1, #16]
 8009832:	4607      	mov	r7, r0
 8009834:	4698      	mov	r8, r3
 8009836:	460c      	mov	r4, r1
 8009838:	f101 0014 	add.w	r0, r1, #20
 800983c:	2300      	movs	r3, #0
 800983e:	6805      	ldr	r5, [r0, #0]
 8009840:	b2a9      	uxth	r1, r5
 8009842:	fb02 8101 	mla	r1, r2, r1, r8
 8009846:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800984a:	0c2d      	lsrs	r5, r5, #16
 800984c:	fb02 c505 	mla	r5, r2, r5, ip
 8009850:	b289      	uxth	r1, r1
 8009852:	3301      	adds	r3, #1
 8009854:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009858:	429e      	cmp	r6, r3
 800985a:	f840 1b04 	str.w	r1, [r0], #4
 800985e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009862:	dcec      	bgt.n	800983e <__multadd+0x12>
 8009864:	f1b8 0f00 	cmp.w	r8, #0
 8009868:	d022      	beq.n	80098b0 <__multadd+0x84>
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	42b3      	cmp	r3, r6
 800986e:	dc19      	bgt.n	80098a4 <__multadd+0x78>
 8009870:	6861      	ldr	r1, [r4, #4]
 8009872:	4638      	mov	r0, r7
 8009874:	3101      	adds	r1, #1
 8009876:	f7ff ff77 	bl	8009768 <_Balloc>
 800987a:	4605      	mov	r5, r0
 800987c:	b928      	cbnz	r0, 800988a <__multadd+0x5e>
 800987e:	4602      	mov	r2, r0
 8009880:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <__multadd+0x8c>)
 8009882:	480e      	ldr	r0, [pc, #56]	; (80098bc <__multadd+0x90>)
 8009884:	21b5      	movs	r1, #181	; 0xb5
 8009886:	f000 fe1f 	bl	800a4c8 <__assert_func>
 800988a:	6922      	ldr	r2, [r4, #16]
 800988c:	3202      	adds	r2, #2
 800988e:	f104 010c 	add.w	r1, r4, #12
 8009892:	0092      	lsls	r2, r2, #2
 8009894:	300c      	adds	r0, #12
 8009896:	f7fd ffff 	bl	8007898 <memcpy>
 800989a:	4621      	mov	r1, r4
 800989c:	4638      	mov	r0, r7
 800989e:	f7ff ffa3 	bl	80097e8 <_Bfree>
 80098a2:	462c      	mov	r4, r5
 80098a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80098a8:	3601      	adds	r6, #1
 80098aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80098ae:	6126      	str	r6, [r4, #16]
 80098b0:	4620      	mov	r0, r4
 80098b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b6:	bf00      	nop
 80098b8:	08066647 	.word	0x08066647
 80098bc:	080666b8 	.word	0x080666b8

080098c0 <__hi0bits>:
 80098c0:	0c03      	lsrs	r3, r0, #16
 80098c2:	041b      	lsls	r3, r3, #16
 80098c4:	b9d3      	cbnz	r3, 80098fc <__hi0bits+0x3c>
 80098c6:	0400      	lsls	r0, r0, #16
 80098c8:	2310      	movs	r3, #16
 80098ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098ce:	bf04      	itt	eq
 80098d0:	0200      	lsleq	r0, r0, #8
 80098d2:	3308      	addeq	r3, #8
 80098d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80098d8:	bf04      	itt	eq
 80098da:	0100      	lsleq	r0, r0, #4
 80098dc:	3304      	addeq	r3, #4
 80098de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80098e2:	bf04      	itt	eq
 80098e4:	0080      	lsleq	r0, r0, #2
 80098e6:	3302      	addeq	r3, #2
 80098e8:	2800      	cmp	r0, #0
 80098ea:	db05      	blt.n	80098f8 <__hi0bits+0x38>
 80098ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80098f0:	f103 0301 	add.w	r3, r3, #1
 80098f4:	bf08      	it	eq
 80098f6:	2320      	moveq	r3, #32
 80098f8:	4618      	mov	r0, r3
 80098fa:	4770      	bx	lr
 80098fc:	2300      	movs	r3, #0
 80098fe:	e7e4      	b.n	80098ca <__hi0bits+0xa>

08009900 <__lo0bits>:
 8009900:	6803      	ldr	r3, [r0, #0]
 8009902:	f013 0207 	ands.w	r2, r3, #7
 8009906:	4601      	mov	r1, r0
 8009908:	d00b      	beq.n	8009922 <__lo0bits+0x22>
 800990a:	07da      	lsls	r2, r3, #31
 800990c:	d424      	bmi.n	8009958 <__lo0bits+0x58>
 800990e:	0798      	lsls	r0, r3, #30
 8009910:	bf49      	itett	mi
 8009912:	085b      	lsrmi	r3, r3, #1
 8009914:	089b      	lsrpl	r3, r3, #2
 8009916:	2001      	movmi	r0, #1
 8009918:	600b      	strmi	r3, [r1, #0]
 800991a:	bf5c      	itt	pl
 800991c:	600b      	strpl	r3, [r1, #0]
 800991e:	2002      	movpl	r0, #2
 8009920:	4770      	bx	lr
 8009922:	b298      	uxth	r0, r3
 8009924:	b9b0      	cbnz	r0, 8009954 <__lo0bits+0x54>
 8009926:	0c1b      	lsrs	r3, r3, #16
 8009928:	2010      	movs	r0, #16
 800992a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800992e:	bf04      	itt	eq
 8009930:	0a1b      	lsreq	r3, r3, #8
 8009932:	3008      	addeq	r0, #8
 8009934:	071a      	lsls	r2, r3, #28
 8009936:	bf04      	itt	eq
 8009938:	091b      	lsreq	r3, r3, #4
 800993a:	3004      	addeq	r0, #4
 800993c:	079a      	lsls	r2, r3, #30
 800993e:	bf04      	itt	eq
 8009940:	089b      	lsreq	r3, r3, #2
 8009942:	3002      	addeq	r0, #2
 8009944:	07da      	lsls	r2, r3, #31
 8009946:	d403      	bmi.n	8009950 <__lo0bits+0x50>
 8009948:	085b      	lsrs	r3, r3, #1
 800994a:	f100 0001 	add.w	r0, r0, #1
 800994e:	d005      	beq.n	800995c <__lo0bits+0x5c>
 8009950:	600b      	str	r3, [r1, #0]
 8009952:	4770      	bx	lr
 8009954:	4610      	mov	r0, r2
 8009956:	e7e8      	b.n	800992a <__lo0bits+0x2a>
 8009958:	2000      	movs	r0, #0
 800995a:	4770      	bx	lr
 800995c:	2020      	movs	r0, #32
 800995e:	4770      	bx	lr

08009960 <__i2b>:
 8009960:	b510      	push	{r4, lr}
 8009962:	460c      	mov	r4, r1
 8009964:	2101      	movs	r1, #1
 8009966:	f7ff feff 	bl	8009768 <_Balloc>
 800996a:	4602      	mov	r2, r0
 800996c:	b928      	cbnz	r0, 800997a <__i2b+0x1a>
 800996e:	4b05      	ldr	r3, [pc, #20]	; (8009984 <__i2b+0x24>)
 8009970:	4805      	ldr	r0, [pc, #20]	; (8009988 <__i2b+0x28>)
 8009972:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009976:	f000 fda7 	bl	800a4c8 <__assert_func>
 800997a:	2301      	movs	r3, #1
 800997c:	6144      	str	r4, [r0, #20]
 800997e:	6103      	str	r3, [r0, #16]
 8009980:	bd10      	pop	{r4, pc}
 8009982:	bf00      	nop
 8009984:	08066647 	.word	0x08066647
 8009988:	080666b8 	.word	0x080666b8

0800998c <__multiply>:
 800998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009990:	4614      	mov	r4, r2
 8009992:	690a      	ldr	r2, [r1, #16]
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	429a      	cmp	r2, r3
 8009998:	bfb8      	it	lt
 800999a:	460b      	movlt	r3, r1
 800999c:	460d      	mov	r5, r1
 800999e:	bfbc      	itt	lt
 80099a0:	4625      	movlt	r5, r4
 80099a2:	461c      	movlt	r4, r3
 80099a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80099a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099ac:	68ab      	ldr	r3, [r5, #8]
 80099ae:	6869      	ldr	r1, [r5, #4]
 80099b0:	eb0a 0709 	add.w	r7, sl, r9
 80099b4:	42bb      	cmp	r3, r7
 80099b6:	b085      	sub	sp, #20
 80099b8:	bfb8      	it	lt
 80099ba:	3101      	addlt	r1, #1
 80099bc:	f7ff fed4 	bl	8009768 <_Balloc>
 80099c0:	b930      	cbnz	r0, 80099d0 <__multiply+0x44>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4b42      	ldr	r3, [pc, #264]	; (8009ad0 <__multiply+0x144>)
 80099c6:	4843      	ldr	r0, [pc, #268]	; (8009ad4 <__multiply+0x148>)
 80099c8:	f240 115d 	movw	r1, #349	; 0x15d
 80099cc:	f000 fd7c 	bl	800a4c8 <__assert_func>
 80099d0:	f100 0614 	add.w	r6, r0, #20
 80099d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80099d8:	4633      	mov	r3, r6
 80099da:	2200      	movs	r2, #0
 80099dc:	4543      	cmp	r3, r8
 80099de:	d31e      	bcc.n	8009a1e <__multiply+0x92>
 80099e0:	f105 0c14 	add.w	ip, r5, #20
 80099e4:	f104 0314 	add.w	r3, r4, #20
 80099e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80099ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80099f0:	9202      	str	r2, [sp, #8]
 80099f2:	ebac 0205 	sub.w	r2, ip, r5
 80099f6:	3a15      	subs	r2, #21
 80099f8:	f022 0203 	bic.w	r2, r2, #3
 80099fc:	3204      	adds	r2, #4
 80099fe:	f105 0115 	add.w	r1, r5, #21
 8009a02:	458c      	cmp	ip, r1
 8009a04:	bf38      	it	cc
 8009a06:	2204      	movcc	r2, #4
 8009a08:	9201      	str	r2, [sp, #4]
 8009a0a:	9a02      	ldr	r2, [sp, #8]
 8009a0c:	9303      	str	r3, [sp, #12]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d808      	bhi.n	8009a24 <__multiply+0x98>
 8009a12:	2f00      	cmp	r7, #0
 8009a14:	dc55      	bgt.n	8009ac2 <__multiply+0x136>
 8009a16:	6107      	str	r7, [r0, #16]
 8009a18:	b005      	add	sp, #20
 8009a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a1e:	f843 2b04 	str.w	r2, [r3], #4
 8009a22:	e7db      	b.n	80099dc <__multiply+0x50>
 8009a24:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a28:	f1ba 0f00 	cmp.w	sl, #0
 8009a2c:	d020      	beq.n	8009a70 <__multiply+0xe4>
 8009a2e:	f105 0e14 	add.w	lr, r5, #20
 8009a32:	46b1      	mov	r9, r6
 8009a34:	2200      	movs	r2, #0
 8009a36:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009a3a:	f8d9 b000 	ldr.w	fp, [r9]
 8009a3e:	b2a1      	uxth	r1, r4
 8009a40:	fa1f fb8b 	uxth.w	fp, fp
 8009a44:	fb0a b101 	mla	r1, sl, r1, fp
 8009a48:	4411      	add	r1, r2
 8009a4a:	f8d9 2000 	ldr.w	r2, [r9]
 8009a4e:	0c24      	lsrs	r4, r4, #16
 8009a50:	0c12      	lsrs	r2, r2, #16
 8009a52:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a56:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a5a:	b289      	uxth	r1, r1
 8009a5c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a60:	45f4      	cmp	ip, lr
 8009a62:	f849 1b04 	str.w	r1, [r9], #4
 8009a66:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a6a:	d8e4      	bhi.n	8009a36 <__multiply+0xaa>
 8009a6c:	9901      	ldr	r1, [sp, #4]
 8009a6e:	5072      	str	r2, [r6, r1]
 8009a70:	9a03      	ldr	r2, [sp, #12]
 8009a72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a76:	3304      	adds	r3, #4
 8009a78:	f1b9 0f00 	cmp.w	r9, #0
 8009a7c:	d01f      	beq.n	8009abe <__multiply+0x132>
 8009a7e:	6834      	ldr	r4, [r6, #0]
 8009a80:	f105 0114 	add.w	r1, r5, #20
 8009a84:	46b6      	mov	lr, r6
 8009a86:	f04f 0a00 	mov.w	sl, #0
 8009a8a:	880a      	ldrh	r2, [r1, #0]
 8009a8c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a90:	fb09 b202 	mla	r2, r9, r2, fp
 8009a94:	4492      	add	sl, r2
 8009a96:	b2a4      	uxth	r4, r4
 8009a98:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a9c:	f84e 4b04 	str.w	r4, [lr], #4
 8009aa0:	f851 4b04 	ldr.w	r4, [r1], #4
 8009aa4:	f8be 2000 	ldrh.w	r2, [lr]
 8009aa8:	0c24      	lsrs	r4, r4, #16
 8009aaa:	fb09 2404 	mla	r4, r9, r4, r2
 8009aae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ab2:	458c      	cmp	ip, r1
 8009ab4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ab8:	d8e7      	bhi.n	8009a8a <__multiply+0xfe>
 8009aba:	9a01      	ldr	r2, [sp, #4]
 8009abc:	50b4      	str	r4, [r6, r2]
 8009abe:	3604      	adds	r6, #4
 8009ac0:	e7a3      	b.n	8009a0a <__multiply+0x7e>
 8009ac2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1a5      	bne.n	8009a16 <__multiply+0x8a>
 8009aca:	3f01      	subs	r7, #1
 8009acc:	e7a1      	b.n	8009a12 <__multiply+0x86>
 8009ace:	bf00      	nop
 8009ad0:	08066647 	.word	0x08066647
 8009ad4:	080666b8 	.word	0x080666b8

08009ad8 <__pow5mult>:
 8009ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009adc:	4615      	mov	r5, r2
 8009ade:	f012 0203 	ands.w	r2, r2, #3
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	460f      	mov	r7, r1
 8009ae6:	d007      	beq.n	8009af8 <__pow5mult+0x20>
 8009ae8:	4c25      	ldr	r4, [pc, #148]	; (8009b80 <__pow5mult+0xa8>)
 8009aea:	3a01      	subs	r2, #1
 8009aec:	2300      	movs	r3, #0
 8009aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009af2:	f7ff fe9b 	bl	800982c <__multadd>
 8009af6:	4607      	mov	r7, r0
 8009af8:	10ad      	asrs	r5, r5, #2
 8009afa:	d03d      	beq.n	8009b78 <__pow5mult+0xa0>
 8009afc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009afe:	b97c      	cbnz	r4, 8009b20 <__pow5mult+0x48>
 8009b00:	2010      	movs	r0, #16
 8009b02:	f7fd feb9 	bl	8007878 <malloc>
 8009b06:	4602      	mov	r2, r0
 8009b08:	6270      	str	r0, [r6, #36]	; 0x24
 8009b0a:	b928      	cbnz	r0, 8009b18 <__pow5mult+0x40>
 8009b0c:	4b1d      	ldr	r3, [pc, #116]	; (8009b84 <__pow5mult+0xac>)
 8009b0e:	481e      	ldr	r0, [pc, #120]	; (8009b88 <__pow5mult+0xb0>)
 8009b10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b14:	f000 fcd8 	bl	800a4c8 <__assert_func>
 8009b18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b1c:	6004      	str	r4, [r0, #0]
 8009b1e:	60c4      	str	r4, [r0, #12]
 8009b20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b28:	b94c      	cbnz	r4, 8009b3e <__pow5mult+0x66>
 8009b2a:	f240 2171 	movw	r1, #625	; 0x271
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7ff ff16 	bl	8009960 <__i2b>
 8009b34:	2300      	movs	r3, #0
 8009b36:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	6003      	str	r3, [r0, #0]
 8009b3e:	f04f 0900 	mov.w	r9, #0
 8009b42:	07eb      	lsls	r3, r5, #31
 8009b44:	d50a      	bpl.n	8009b5c <__pow5mult+0x84>
 8009b46:	4639      	mov	r1, r7
 8009b48:	4622      	mov	r2, r4
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	f7ff ff1e 	bl	800998c <__multiply>
 8009b50:	4639      	mov	r1, r7
 8009b52:	4680      	mov	r8, r0
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff fe47 	bl	80097e8 <_Bfree>
 8009b5a:	4647      	mov	r7, r8
 8009b5c:	106d      	asrs	r5, r5, #1
 8009b5e:	d00b      	beq.n	8009b78 <__pow5mult+0xa0>
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	b938      	cbnz	r0, 8009b74 <__pow5mult+0x9c>
 8009b64:	4622      	mov	r2, r4
 8009b66:	4621      	mov	r1, r4
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff ff0f 	bl	800998c <__multiply>
 8009b6e:	6020      	str	r0, [r4, #0]
 8009b70:	f8c0 9000 	str.w	r9, [r0]
 8009b74:	4604      	mov	r4, r0
 8009b76:	e7e4      	b.n	8009b42 <__pow5mult+0x6a>
 8009b78:	4638      	mov	r0, r7
 8009b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b7e:	bf00      	nop
 8009b80:	08066808 	.word	0x08066808
 8009b84:	080665d1 	.word	0x080665d1
 8009b88:	080666b8 	.word	0x080666b8

08009b8c <__lshift>:
 8009b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b90:	460c      	mov	r4, r1
 8009b92:	6849      	ldr	r1, [r1, #4]
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b9a:	68a3      	ldr	r3, [r4, #8]
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	4691      	mov	r9, r2
 8009ba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ba4:	f108 0601 	add.w	r6, r8, #1
 8009ba8:	42b3      	cmp	r3, r6
 8009baa:	db0b      	blt.n	8009bc4 <__lshift+0x38>
 8009bac:	4638      	mov	r0, r7
 8009bae:	f7ff fddb 	bl	8009768 <_Balloc>
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	b948      	cbnz	r0, 8009bca <__lshift+0x3e>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	4b28      	ldr	r3, [pc, #160]	; (8009c5c <__lshift+0xd0>)
 8009bba:	4829      	ldr	r0, [pc, #164]	; (8009c60 <__lshift+0xd4>)
 8009bbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009bc0:	f000 fc82 	bl	800a4c8 <__assert_func>
 8009bc4:	3101      	adds	r1, #1
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	e7ee      	b.n	8009ba8 <__lshift+0x1c>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f100 0114 	add.w	r1, r0, #20
 8009bd0:	f100 0210 	add.w	r2, r0, #16
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	4553      	cmp	r3, sl
 8009bd8:	db33      	blt.n	8009c42 <__lshift+0xb6>
 8009bda:	6920      	ldr	r0, [r4, #16]
 8009bdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009be0:	f104 0314 	add.w	r3, r4, #20
 8009be4:	f019 091f 	ands.w	r9, r9, #31
 8009be8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bf0:	d02b      	beq.n	8009c4a <__lshift+0xbe>
 8009bf2:	f1c9 0e20 	rsb	lr, r9, #32
 8009bf6:	468a      	mov	sl, r1
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	6818      	ldr	r0, [r3, #0]
 8009bfc:	fa00 f009 	lsl.w	r0, r0, r9
 8009c00:	4302      	orrs	r2, r0
 8009c02:	f84a 2b04 	str.w	r2, [sl], #4
 8009c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c0a:	459c      	cmp	ip, r3
 8009c0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c10:	d8f3      	bhi.n	8009bfa <__lshift+0x6e>
 8009c12:	ebac 0304 	sub.w	r3, ip, r4
 8009c16:	3b15      	subs	r3, #21
 8009c18:	f023 0303 	bic.w	r3, r3, #3
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	f104 0015 	add.w	r0, r4, #21
 8009c22:	4584      	cmp	ip, r0
 8009c24:	bf38      	it	cc
 8009c26:	2304      	movcc	r3, #4
 8009c28:	50ca      	str	r2, [r1, r3]
 8009c2a:	b10a      	cbz	r2, 8009c30 <__lshift+0xa4>
 8009c2c:	f108 0602 	add.w	r6, r8, #2
 8009c30:	3e01      	subs	r6, #1
 8009c32:	4638      	mov	r0, r7
 8009c34:	612e      	str	r6, [r5, #16]
 8009c36:	4621      	mov	r1, r4
 8009c38:	f7ff fdd6 	bl	80097e8 <_Bfree>
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c42:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c46:	3301      	adds	r3, #1
 8009c48:	e7c5      	b.n	8009bd6 <__lshift+0x4a>
 8009c4a:	3904      	subs	r1, #4
 8009c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c50:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c54:	459c      	cmp	ip, r3
 8009c56:	d8f9      	bhi.n	8009c4c <__lshift+0xc0>
 8009c58:	e7ea      	b.n	8009c30 <__lshift+0xa4>
 8009c5a:	bf00      	nop
 8009c5c:	08066647 	.word	0x08066647
 8009c60:	080666b8 	.word	0x080666b8

08009c64 <__mcmp>:
 8009c64:	b530      	push	{r4, r5, lr}
 8009c66:	6902      	ldr	r2, [r0, #16]
 8009c68:	690c      	ldr	r4, [r1, #16]
 8009c6a:	1b12      	subs	r2, r2, r4
 8009c6c:	d10e      	bne.n	8009c8c <__mcmp+0x28>
 8009c6e:	f100 0314 	add.w	r3, r0, #20
 8009c72:	3114      	adds	r1, #20
 8009c74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c84:	42a5      	cmp	r5, r4
 8009c86:	d003      	beq.n	8009c90 <__mcmp+0x2c>
 8009c88:	d305      	bcc.n	8009c96 <__mcmp+0x32>
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	bd30      	pop	{r4, r5, pc}
 8009c90:	4283      	cmp	r3, r0
 8009c92:	d3f3      	bcc.n	8009c7c <__mcmp+0x18>
 8009c94:	e7fa      	b.n	8009c8c <__mcmp+0x28>
 8009c96:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9a:	e7f7      	b.n	8009c8c <__mcmp+0x28>

08009c9c <__mdiff>:
 8009c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	4617      	mov	r7, r2
 8009caa:	f7ff ffdb 	bl	8009c64 <__mcmp>
 8009cae:	1e05      	subs	r5, r0, #0
 8009cb0:	d110      	bne.n	8009cd4 <__mdiff+0x38>
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7ff fd57 	bl	8009768 <_Balloc>
 8009cba:	b930      	cbnz	r0, 8009cca <__mdiff+0x2e>
 8009cbc:	4b39      	ldr	r3, [pc, #228]	; (8009da4 <__mdiff+0x108>)
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	f240 2132 	movw	r1, #562	; 0x232
 8009cc4:	4838      	ldr	r0, [pc, #224]	; (8009da8 <__mdiff+0x10c>)
 8009cc6:	f000 fbff 	bl	800a4c8 <__assert_func>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd4:	bfa4      	itt	ge
 8009cd6:	463b      	movge	r3, r7
 8009cd8:	4627      	movge	r7, r4
 8009cda:	4630      	mov	r0, r6
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	bfa6      	itte	ge
 8009ce0:	461c      	movge	r4, r3
 8009ce2:	2500      	movge	r5, #0
 8009ce4:	2501      	movlt	r5, #1
 8009ce6:	f7ff fd3f 	bl	8009768 <_Balloc>
 8009cea:	b920      	cbnz	r0, 8009cf6 <__mdiff+0x5a>
 8009cec:	4b2d      	ldr	r3, [pc, #180]	; (8009da4 <__mdiff+0x108>)
 8009cee:	4602      	mov	r2, r0
 8009cf0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009cf4:	e7e6      	b.n	8009cc4 <__mdiff+0x28>
 8009cf6:	693e      	ldr	r6, [r7, #16]
 8009cf8:	60c5      	str	r5, [r0, #12]
 8009cfa:	6925      	ldr	r5, [r4, #16]
 8009cfc:	f107 0114 	add.w	r1, r7, #20
 8009d00:	f104 0914 	add.w	r9, r4, #20
 8009d04:	f100 0e14 	add.w	lr, r0, #20
 8009d08:	f107 0210 	add.w	r2, r7, #16
 8009d0c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d10:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d14:	46f2      	mov	sl, lr
 8009d16:	2700      	movs	r7, #0
 8009d18:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d20:	fa1f f883 	uxth.w	r8, r3
 8009d24:	fa17 f78b 	uxtah	r7, r7, fp
 8009d28:	0c1b      	lsrs	r3, r3, #16
 8009d2a:	eba7 0808 	sub.w	r8, r7, r8
 8009d2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d36:	fa1f f888 	uxth.w	r8, r8
 8009d3a:	141f      	asrs	r7, r3, #16
 8009d3c:	454d      	cmp	r5, r9
 8009d3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d42:	f84a 3b04 	str.w	r3, [sl], #4
 8009d46:	d8e7      	bhi.n	8009d18 <__mdiff+0x7c>
 8009d48:	1b2b      	subs	r3, r5, r4
 8009d4a:	3b15      	subs	r3, #21
 8009d4c:	f023 0303 	bic.w	r3, r3, #3
 8009d50:	3304      	adds	r3, #4
 8009d52:	3415      	adds	r4, #21
 8009d54:	42a5      	cmp	r5, r4
 8009d56:	bf38      	it	cc
 8009d58:	2304      	movcc	r3, #4
 8009d5a:	4419      	add	r1, r3
 8009d5c:	4473      	add	r3, lr
 8009d5e:	469e      	mov	lr, r3
 8009d60:	460d      	mov	r5, r1
 8009d62:	4565      	cmp	r5, ip
 8009d64:	d30e      	bcc.n	8009d84 <__mdiff+0xe8>
 8009d66:	f10c 0203 	add.w	r2, ip, #3
 8009d6a:	1a52      	subs	r2, r2, r1
 8009d6c:	f022 0203 	bic.w	r2, r2, #3
 8009d70:	3903      	subs	r1, #3
 8009d72:	458c      	cmp	ip, r1
 8009d74:	bf38      	it	cc
 8009d76:	2200      	movcc	r2, #0
 8009d78:	441a      	add	r2, r3
 8009d7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d7e:	b17b      	cbz	r3, 8009da0 <__mdiff+0x104>
 8009d80:	6106      	str	r6, [r0, #16]
 8009d82:	e7a5      	b.n	8009cd0 <__mdiff+0x34>
 8009d84:	f855 8b04 	ldr.w	r8, [r5], #4
 8009d88:	fa17 f488 	uxtah	r4, r7, r8
 8009d8c:	1422      	asrs	r2, r4, #16
 8009d8e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009d92:	b2a4      	uxth	r4, r4
 8009d94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009d98:	f84e 4b04 	str.w	r4, [lr], #4
 8009d9c:	1417      	asrs	r7, r2, #16
 8009d9e:	e7e0      	b.n	8009d62 <__mdiff+0xc6>
 8009da0:	3e01      	subs	r6, #1
 8009da2:	e7ea      	b.n	8009d7a <__mdiff+0xde>
 8009da4:	08066647 	.word	0x08066647
 8009da8:	080666b8 	.word	0x080666b8

08009dac <__d2b>:
 8009dac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009db0:	4689      	mov	r9, r1
 8009db2:	2101      	movs	r1, #1
 8009db4:	ec57 6b10 	vmov	r6, r7, d0
 8009db8:	4690      	mov	r8, r2
 8009dba:	f7ff fcd5 	bl	8009768 <_Balloc>
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	b930      	cbnz	r0, 8009dd0 <__d2b+0x24>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	4b25      	ldr	r3, [pc, #148]	; (8009e5c <__d2b+0xb0>)
 8009dc6:	4826      	ldr	r0, [pc, #152]	; (8009e60 <__d2b+0xb4>)
 8009dc8:	f240 310a 	movw	r1, #778	; 0x30a
 8009dcc:	f000 fb7c 	bl	800a4c8 <__assert_func>
 8009dd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009dd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dd8:	bb35      	cbnz	r5, 8009e28 <__d2b+0x7c>
 8009dda:	2e00      	cmp	r6, #0
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	d028      	beq.n	8009e32 <__d2b+0x86>
 8009de0:	4668      	mov	r0, sp
 8009de2:	9600      	str	r6, [sp, #0]
 8009de4:	f7ff fd8c 	bl	8009900 <__lo0bits>
 8009de8:	9900      	ldr	r1, [sp, #0]
 8009dea:	b300      	cbz	r0, 8009e2e <__d2b+0x82>
 8009dec:	9a01      	ldr	r2, [sp, #4]
 8009dee:	f1c0 0320 	rsb	r3, r0, #32
 8009df2:	fa02 f303 	lsl.w	r3, r2, r3
 8009df6:	430b      	orrs	r3, r1
 8009df8:	40c2      	lsrs	r2, r0
 8009dfa:	6163      	str	r3, [r4, #20]
 8009dfc:	9201      	str	r2, [sp, #4]
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	61a3      	str	r3, [r4, #24]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	bf14      	ite	ne
 8009e06:	2202      	movne	r2, #2
 8009e08:	2201      	moveq	r2, #1
 8009e0a:	6122      	str	r2, [r4, #16]
 8009e0c:	b1d5      	cbz	r5, 8009e44 <__d2b+0x98>
 8009e0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e12:	4405      	add	r5, r0
 8009e14:	f8c9 5000 	str.w	r5, [r9]
 8009e18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e1c:	f8c8 0000 	str.w	r0, [r8]
 8009e20:	4620      	mov	r0, r4
 8009e22:	b003      	add	sp, #12
 8009e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e2c:	e7d5      	b.n	8009dda <__d2b+0x2e>
 8009e2e:	6161      	str	r1, [r4, #20]
 8009e30:	e7e5      	b.n	8009dfe <__d2b+0x52>
 8009e32:	a801      	add	r0, sp, #4
 8009e34:	f7ff fd64 	bl	8009900 <__lo0bits>
 8009e38:	9b01      	ldr	r3, [sp, #4]
 8009e3a:	6163      	str	r3, [r4, #20]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	6122      	str	r2, [r4, #16]
 8009e40:	3020      	adds	r0, #32
 8009e42:	e7e3      	b.n	8009e0c <__d2b+0x60>
 8009e44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e4c:	f8c9 0000 	str.w	r0, [r9]
 8009e50:	6918      	ldr	r0, [r3, #16]
 8009e52:	f7ff fd35 	bl	80098c0 <__hi0bits>
 8009e56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e5a:	e7df      	b.n	8009e1c <__d2b+0x70>
 8009e5c:	08066647 	.word	0x08066647
 8009e60:	080666b8 	.word	0x080666b8

08009e64 <_realloc_r>:
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	4607      	mov	r7, r0
 8009e68:	4614      	mov	r4, r2
 8009e6a:	460e      	mov	r6, r1
 8009e6c:	b921      	cbnz	r1, 8009e78 <_realloc_r+0x14>
 8009e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e72:	4611      	mov	r1, r2
 8009e74:	f7fd bd86 	b.w	8007984 <_malloc_r>
 8009e78:	b922      	cbnz	r2, 8009e84 <_realloc_r+0x20>
 8009e7a:	f7fd fd33 	bl	80078e4 <_free_r>
 8009e7e:	4625      	mov	r5, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e84:	f000 fbc0 	bl	800a608 <_malloc_usable_size_r>
 8009e88:	42a0      	cmp	r0, r4
 8009e8a:	d20f      	bcs.n	8009eac <_realloc_r+0x48>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f7fd fd78 	bl	8007984 <_malloc_r>
 8009e94:	4605      	mov	r5, r0
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d0f2      	beq.n	8009e80 <_realloc_r+0x1c>
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	f7fd fcfb 	bl	8007898 <memcpy>
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7fd fd1d 	bl	80078e4 <_free_r>
 8009eaa:	e7e9      	b.n	8009e80 <_realloc_r+0x1c>
 8009eac:	4635      	mov	r5, r6
 8009eae:	e7e7      	b.n	8009e80 <_realloc_r+0x1c>

08009eb0 <__ssputs_r>:
 8009eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb4:	688e      	ldr	r6, [r1, #8]
 8009eb6:	429e      	cmp	r6, r3
 8009eb8:	4682      	mov	sl, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	4690      	mov	r8, r2
 8009ebe:	461f      	mov	r7, r3
 8009ec0:	d838      	bhi.n	8009f34 <__ssputs_r+0x84>
 8009ec2:	898a      	ldrh	r2, [r1, #12]
 8009ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ec8:	d032      	beq.n	8009f30 <__ssputs_r+0x80>
 8009eca:	6825      	ldr	r5, [r4, #0]
 8009ecc:	6909      	ldr	r1, [r1, #16]
 8009ece:	eba5 0901 	sub.w	r9, r5, r1
 8009ed2:	6965      	ldr	r5, [r4, #20]
 8009ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009edc:	3301      	adds	r3, #1
 8009ede:	444b      	add	r3, r9
 8009ee0:	106d      	asrs	r5, r5, #1
 8009ee2:	429d      	cmp	r5, r3
 8009ee4:	bf38      	it	cc
 8009ee6:	461d      	movcc	r5, r3
 8009ee8:	0553      	lsls	r3, r2, #21
 8009eea:	d531      	bpl.n	8009f50 <__ssputs_r+0xa0>
 8009eec:	4629      	mov	r1, r5
 8009eee:	f7fd fd49 	bl	8007984 <_malloc_r>
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	b950      	cbnz	r0, 8009f0c <__ssputs_r+0x5c>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	f8ca 3000 	str.w	r3, [sl]
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f02:	81a3      	strh	r3, [r4, #12]
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295
 8009f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0c:	6921      	ldr	r1, [r4, #16]
 8009f0e:	464a      	mov	r2, r9
 8009f10:	f7fd fcc2 	bl	8007898 <memcpy>
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	6126      	str	r6, [r4, #16]
 8009f22:	6165      	str	r5, [r4, #20]
 8009f24:	444e      	add	r6, r9
 8009f26:	eba5 0509 	sub.w	r5, r5, r9
 8009f2a:	6026      	str	r6, [r4, #0]
 8009f2c:	60a5      	str	r5, [r4, #8]
 8009f2e:	463e      	mov	r6, r7
 8009f30:	42be      	cmp	r6, r7
 8009f32:	d900      	bls.n	8009f36 <__ssputs_r+0x86>
 8009f34:	463e      	mov	r6, r7
 8009f36:	4632      	mov	r2, r6
 8009f38:	6820      	ldr	r0, [r4, #0]
 8009f3a:	4641      	mov	r1, r8
 8009f3c:	f000 fb4a 	bl	800a5d4 <memmove>
 8009f40:	68a3      	ldr	r3, [r4, #8]
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	1b9b      	subs	r3, r3, r6
 8009f46:	4432      	add	r2, r6
 8009f48:	60a3      	str	r3, [r4, #8]
 8009f4a:	6022      	str	r2, [r4, #0]
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	e7db      	b.n	8009f08 <__ssputs_r+0x58>
 8009f50:	462a      	mov	r2, r5
 8009f52:	f7ff ff87 	bl	8009e64 <_realloc_r>
 8009f56:	4606      	mov	r6, r0
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d1e1      	bne.n	8009f20 <__ssputs_r+0x70>
 8009f5c:	6921      	ldr	r1, [r4, #16]
 8009f5e:	4650      	mov	r0, sl
 8009f60:	f7fd fcc0 	bl	80078e4 <_free_r>
 8009f64:	e7c7      	b.n	8009ef6 <__ssputs_r+0x46>
	...

08009f68 <_svfiprintf_r>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	4698      	mov	r8, r3
 8009f6e:	898b      	ldrh	r3, [r1, #12]
 8009f70:	061b      	lsls	r3, r3, #24
 8009f72:	b09d      	sub	sp, #116	; 0x74
 8009f74:	4607      	mov	r7, r0
 8009f76:	460d      	mov	r5, r1
 8009f78:	4614      	mov	r4, r2
 8009f7a:	d50e      	bpl.n	8009f9a <_svfiprintf_r+0x32>
 8009f7c:	690b      	ldr	r3, [r1, #16]
 8009f7e:	b963      	cbnz	r3, 8009f9a <_svfiprintf_r+0x32>
 8009f80:	2140      	movs	r1, #64	; 0x40
 8009f82:	f7fd fcff 	bl	8007984 <_malloc_r>
 8009f86:	6028      	str	r0, [r5, #0]
 8009f88:	6128      	str	r0, [r5, #16]
 8009f8a:	b920      	cbnz	r0, 8009f96 <_svfiprintf_r+0x2e>
 8009f8c:	230c      	movs	r3, #12
 8009f8e:	603b      	str	r3, [r7, #0]
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	e0d1      	b.n	800a13a <_svfiprintf_r+0x1d2>
 8009f96:	2340      	movs	r3, #64	; 0x40
 8009f98:	616b      	str	r3, [r5, #20]
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9e:	2320      	movs	r3, #32
 8009fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa8:	2330      	movs	r3, #48	; 0x30
 8009faa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a154 <_svfiprintf_r+0x1ec>
 8009fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fb2:	f04f 0901 	mov.w	r9, #1
 8009fb6:	4623      	mov	r3, r4
 8009fb8:	469a      	mov	sl, r3
 8009fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fbe:	b10a      	cbz	r2, 8009fc4 <_svfiprintf_r+0x5c>
 8009fc0:	2a25      	cmp	r2, #37	; 0x25
 8009fc2:	d1f9      	bne.n	8009fb8 <_svfiprintf_r+0x50>
 8009fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc8:	d00b      	beq.n	8009fe2 <_svfiprintf_r+0x7a>
 8009fca:	465b      	mov	r3, fp
 8009fcc:	4622      	mov	r2, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7ff ff6d 	bl	8009eb0 <__ssputs_r>
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f000 80aa 	beq.w	800a130 <_svfiprintf_r+0x1c8>
 8009fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fde:	445a      	add	r2, fp
 8009fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 80a2 	beq.w	800a130 <_svfiprintf_r+0x1c8>
 8009fec:	2300      	movs	r3, #0
 8009fee:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff6:	f10a 0a01 	add.w	sl, sl, #1
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	9307      	str	r3, [sp, #28]
 8009ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a002:	931a      	str	r3, [sp, #104]	; 0x68
 800a004:	4654      	mov	r4, sl
 800a006:	2205      	movs	r2, #5
 800a008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00c:	4851      	ldr	r0, [pc, #324]	; (800a154 <_svfiprintf_r+0x1ec>)
 800a00e:	f7f6 f8ef 	bl	80001f0 <memchr>
 800a012:	9a04      	ldr	r2, [sp, #16]
 800a014:	b9d8      	cbnz	r0, 800a04e <_svfiprintf_r+0xe6>
 800a016:	06d0      	lsls	r0, r2, #27
 800a018:	bf44      	itt	mi
 800a01a:	2320      	movmi	r3, #32
 800a01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a020:	0711      	lsls	r1, r2, #28
 800a022:	bf44      	itt	mi
 800a024:	232b      	movmi	r3, #43	; 0x2b
 800a026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a02a:	f89a 3000 	ldrb.w	r3, [sl]
 800a02e:	2b2a      	cmp	r3, #42	; 0x2a
 800a030:	d015      	beq.n	800a05e <_svfiprintf_r+0xf6>
 800a032:	9a07      	ldr	r2, [sp, #28]
 800a034:	4654      	mov	r4, sl
 800a036:	2000      	movs	r0, #0
 800a038:	f04f 0c0a 	mov.w	ip, #10
 800a03c:	4621      	mov	r1, r4
 800a03e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a042:	3b30      	subs	r3, #48	; 0x30
 800a044:	2b09      	cmp	r3, #9
 800a046:	d94e      	bls.n	800a0e6 <_svfiprintf_r+0x17e>
 800a048:	b1b0      	cbz	r0, 800a078 <_svfiprintf_r+0x110>
 800a04a:	9207      	str	r2, [sp, #28]
 800a04c:	e014      	b.n	800a078 <_svfiprintf_r+0x110>
 800a04e:	eba0 0308 	sub.w	r3, r0, r8
 800a052:	fa09 f303 	lsl.w	r3, r9, r3
 800a056:	4313      	orrs	r3, r2
 800a058:	9304      	str	r3, [sp, #16]
 800a05a:	46a2      	mov	sl, r4
 800a05c:	e7d2      	b.n	800a004 <_svfiprintf_r+0x9c>
 800a05e:	9b03      	ldr	r3, [sp, #12]
 800a060:	1d19      	adds	r1, r3, #4
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	9103      	str	r1, [sp, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	bfbb      	ittet	lt
 800a06a:	425b      	neglt	r3, r3
 800a06c:	f042 0202 	orrlt.w	r2, r2, #2
 800a070:	9307      	strge	r3, [sp, #28]
 800a072:	9307      	strlt	r3, [sp, #28]
 800a074:	bfb8      	it	lt
 800a076:	9204      	strlt	r2, [sp, #16]
 800a078:	7823      	ldrb	r3, [r4, #0]
 800a07a:	2b2e      	cmp	r3, #46	; 0x2e
 800a07c:	d10c      	bne.n	800a098 <_svfiprintf_r+0x130>
 800a07e:	7863      	ldrb	r3, [r4, #1]
 800a080:	2b2a      	cmp	r3, #42	; 0x2a
 800a082:	d135      	bne.n	800a0f0 <_svfiprintf_r+0x188>
 800a084:	9b03      	ldr	r3, [sp, #12]
 800a086:	1d1a      	adds	r2, r3, #4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	9203      	str	r2, [sp, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bfb8      	it	lt
 800a090:	f04f 33ff 	movlt.w	r3, #4294967295
 800a094:	3402      	adds	r4, #2
 800a096:	9305      	str	r3, [sp, #20]
 800a098:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a164 <_svfiprintf_r+0x1fc>
 800a09c:	7821      	ldrb	r1, [r4, #0]
 800a09e:	2203      	movs	r2, #3
 800a0a0:	4650      	mov	r0, sl
 800a0a2:	f7f6 f8a5 	bl	80001f0 <memchr>
 800a0a6:	b140      	cbz	r0, 800a0ba <_svfiprintf_r+0x152>
 800a0a8:	2340      	movs	r3, #64	; 0x40
 800a0aa:	eba0 000a 	sub.w	r0, r0, sl
 800a0ae:	fa03 f000 	lsl.w	r0, r3, r0
 800a0b2:	9b04      	ldr	r3, [sp, #16]
 800a0b4:	4303      	orrs	r3, r0
 800a0b6:	3401      	adds	r4, #1
 800a0b8:	9304      	str	r3, [sp, #16]
 800a0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0be:	4826      	ldr	r0, [pc, #152]	; (800a158 <_svfiprintf_r+0x1f0>)
 800a0c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0c4:	2206      	movs	r2, #6
 800a0c6:	f7f6 f893 	bl	80001f0 <memchr>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d038      	beq.n	800a140 <_svfiprintf_r+0x1d8>
 800a0ce:	4b23      	ldr	r3, [pc, #140]	; (800a15c <_svfiprintf_r+0x1f4>)
 800a0d0:	bb1b      	cbnz	r3, 800a11a <_svfiprintf_r+0x1b2>
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	3307      	adds	r3, #7
 800a0d6:	f023 0307 	bic.w	r3, r3, #7
 800a0da:	3308      	adds	r3, #8
 800a0dc:	9303      	str	r3, [sp, #12]
 800a0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e0:	4433      	add	r3, r6
 800a0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e4:	e767      	b.n	8009fb6 <_svfiprintf_r+0x4e>
 800a0e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	e7a5      	b.n	800a03c <_svfiprintf_r+0xd4>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	3401      	adds	r4, #1
 800a0f4:	9305      	str	r3, [sp, #20]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	f04f 0c0a 	mov.w	ip, #10
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a102:	3a30      	subs	r2, #48	; 0x30
 800a104:	2a09      	cmp	r2, #9
 800a106:	d903      	bls.n	800a110 <_svfiprintf_r+0x1a8>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0c5      	beq.n	800a098 <_svfiprintf_r+0x130>
 800a10c:	9105      	str	r1, [sp, #20]
 800a10e:	e7c3      	b.n	800a098 <_svfiprintf_r+0x130>
 800a110:	fb0c 2101 	mla	r1, ip, r1, r2
 800a114:	4604      	mov	r4, r0
 800a116:	2301      	movs	r3, #1
 800a118:	e7f0      	b.n	800a0fc <_svfiprintf_r+0x194>
 800a11a:	ab03      	add	r3, sp, #12
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	462a      	mov	r2, r5
 800a120:	4b0f      	ldr	r3, [pc, #60]	; (800a160 <_svfiprintf_r+0x1f8>)
 800a122:	a904      	add	r1, sp, #16
 800a124:	4638      	mov	r0, r7
 800a126:	f7fd fd27 	bl	8007b78 <_printf_float>
 800a12a:	1c42      	adds	r2, r0, #1
 800a12c:	4606      	mov	r6, r0
 800a12e:	d1d6      	bne.n	800a0de <_svfiprintf_r+0x176>
 800a130:	89ab      	ldrh	r3, [r5, #12]
 800a132:	065b      	lsls	r3, r3, #25
 800a134:	f53f af2c 	bmi.w	8009f90 <_svfiprintf_r+0x28>
 800a138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a13a:	b01d      	add	sp, #116	; 0x74
 800a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a140:	ab03      	add	r3, sp, #12
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	462a      	mov	r2, r5
 800a146:	4b06      	ldr	r3, [pc, #24]	; (800a160 <_svfiprintf_r+0x1f8>)
 800a148:	a904      	add	r1, sp, #16
 800a14a:	4638      	mov	r0, r7
 800a14c:	f7fd ffb8 	bl	80080c0 <_printf_i>
 800a150:	e7eb      	b.n	800a12a <_svfiprintf_r+0x1c2>
 800a152:	bf00      	nop
 800a154:	08066814 	.word	0x08066814
 800a158:	0806681e 	.word	0x0806681e
 800a15c:	08007b79 	.word	0x08007b79
 800a160:	08009eb1 	.word	0x08009eb1
 800a164:	0806681a 	.word	0x0806681a

0800a168 <__sfputc_r>:
 800a168:	6893      	ldr	r3, [r2, #8]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	b410      	push	{r4}
 800a170:	6093      	str	r3, [r2, #8]
 800a172:	da08      	bge.n	800a186 <__sfputc_r+0x1e>
 800a174:	6994      	ldr	r4, [r2, #24]
 800a176:	42a3      	cmp	r3, r4
 800a178:	db01      	blt.n	800a17e <__sfputc_r+0x16>
 800a17a:	290a      	cmp	r1, #10
 800a17c:	d103      	bne.n	800a186 <__sfputc_r+0x1e>
 800a17e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a182:	f7fe b989 	b.w	8008498 <__swbuf_r>
 800a186:	6813      	ldr	r3, [r2, #0]
 800a188:	1c58      	adds	r0, r3, #1
 800a18a:	6010      	str	r0, [r2, #0]
 800a18c:	7019      	strb	r1, [r3, #0]
 800a18e:	4608      	mov	r0, r1
 800a190:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <__sfputs_r>:
 800a196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a198:	4606      	mov	r6, r0
 800a19a:	460f      	mov	r7, r1
 800a19c:	4614      	mov	r4, r2
 800a19e:	18d5      	adds	r5, r2, r3
 800a1a0:	42ac      	cmp	r4, r5
 800a1a2:	d101      	bne.n	800a1a8 <__sfputs_r+0x12>
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e007      	b.n	800a1b8 <__sfputs_r+0x22>
 800a1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ac:	463a      	mov	r2, r7
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7ff ffda 	bl	800a168 <__sfputc_r>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d1f3      	bne.n	800a1a0 <__sfputs_r+0xa>
 800a1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1bc <_vfiprintf_r>:
 800a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	b09d      	sub	sp, #116	; 0x74
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	4698      	mov	r8, r3
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	b118      	cbz	r0, 800a1d4 <_vfiprintf_r+0x18>
 800a1cc:	6983      	ldr	r3, [r0, #24]
 800a1ce:	b90b      	cbnz	r3, 800a1d4 <_vfiprintf_r+0x18>
 800a1d0:	f7ff f9b4 	bl	800953c <__sinit>
 800a1d4:	4b89      	ldr	r3, [pc, #548]	; (800a3fc <_vfiprintf_r+0x240>)
 800a1d6:	429d      	cmp	r5, r3
 800a1d8:	d11b      	bne.n	800a212 <_vfiprintf_r+0x56>
 800a1da:	6875      	ldr	r5, [r6, #4]
 800a1dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1de:	07d9      	lsls	r1, r3, #31
 800a1e0:	d405      	bmi.n	800a1ee <_vfiprintf_r+0x32>
 800a1e2:	89ab      	ldrh	r3, [r5, #12]
 800a1e4:	059a      	lsls	r2, r3, #22
 800a1e6:	d402      	bmi.n	800a1ee <_vfiprintf_r+0x32>
 800a1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1ea:	f7ff fa4a 	bl	8009682 <__retarget_lock_acquire_recursive>
 800a1ee:	89ab      	ldrh	r3, [r5, #12]
 800a1f0:	071b      	lsls	r3, r3, #28
 800a1f2:	d501      	bpl.n	800a1f8 <_vfiprintf_r+0x3c>
 800a1f4:	692b      	ldr	r3, [r5, #16]
 800a1f6:	b9eb      	cbnz	r3, 800a234 <_vfiprintf_r+0x78>
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7fe f99e 	bl	800853c <__swsetup_r>
 800a200:	b1c0      	cbz	r0, 800a234 <_vfiprintf_r+0x78>
 800a202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a204:	07dc      	lsls	r4, r3, #31
 800a206:	d50e      	bpl.n	800a226 <_vfiprintf_r+0x6a>
 800a208:	f04f 30ff 	mov.w	r0, #4294967295
 800a20c:	b01d      	add	sp, #116	; 0x74
 800a20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a212:	4b7b      	ldr	r3, [pc, #492]	; (800a400 <_vfiprintf_r+0x244>)
 800a214:	429d      	cmp	r5, r3
 800a216:	d101      	bne.n	800a21c <_vfiprintf_r+0x60>
 800a218:	68b5      	ldr	r5, [r6, #8]
 800a21a:	e7df      	b.n	800a1dc <_vfiprintf_r+0x20>
 800a21c:	4b79      	ldr	r3, [pc, #484]	; (800a404 <_vfiprintf_r+0x248>)
 800a21e:	429d      	cmp	r5, r3
 800a220:	bf08      	it	eq
 800a222:	68f5      	ldreq	r5, [r6, #12]
 800a224:	e7da      	b.n	800a1dc <_vfiprintf_r+0x20>
 800a226:	89ab      	ldrh	r3, [r5, #12]
 800a228:	0598      	lsls	r0, r3, #22
 800a22a:	d4ed      	bmi.n	800a208 <_vfiprintf_r+0x4c>
 800a22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a22e:	f7ff fa29 	bl	8009684 <__retarget_lock_release_recursive>
 800a232:	e7e9      	b.n	800a208 <_vfiprintf_r+0x4c>
 800a234:	2300      	movs	r3, #0
 800a236:	9309      	str	r3, [sp, #36]	; 0x24
 800a238:	2320      	movs	r3, #32
 800a23a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a23e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a242:	2330      	movs	r3, #48	; 0x30
 800a244:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a408 <_vfiprintf_r+0x24c>
 800a248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a24c:	f04f 0901 	mov.w	r9, #1
 800a250:	4623      	mov	r3, r4
 800a252:	469a      	mov	sl, r3
 800a254:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a258:	b10a      	cbz	r2, 800a25e <_vfiprintf_r+0xa2>
 800a25a:	2a25      	cmp	r2, #37	; 0x25
 800a25c:	d1f9      	bne.n	800a252 <_vfiprintf_r+0x96>
 800a25e:	ebba 0b04 	subs.w	fp, sl, r4
 800a262:	d00b      	beq.n	800a27c <_vfiprintf_r+0xc0>
 800a264:	465b      	mov	r3, fp
 800a266:	4622      	mov	r2, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7ff ff93 	bl	800a196 <__sfputs_r>
 800a270:	3001      	adds	r0, #1
 800a272:	f000 80aa 	beq.w	800a3ca <_vfiprintf_r+0x20e>
 800a276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a278:	445a      	add	r2, fp
 800a27a:	9209      	str	r2, [sp, #36]	; 0x24
 800a27c:	f89a 3000 	ldrb.w	r3, [sl]
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 80a2 	beq.w	800a3ca <_vfiprintf_r+0x20e>
 800a286:	2300      	movs	r3, #0
 800a288:	f04f 32ff 	mov.w	r2, #4294967295
 800a28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a290:	f10a 0a01 	add.w	sl, sl, #1
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a29c:	931a      	str	r3, [sp, #104]	; 0x68
 800a29e:	4654      	mov	r4, sl
 800a2a0:	2205      	movs	r2, #5
 800a2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a6:	4858      	ldr	r0, [pc, #352]	; (800a408 <_vfiprintf_r+0x24c>)
 800a2a8:	f7f5 ffa2 	bl	80001f0 <memchr>
 800a2ac:	9a04      	ldr	r2, [sp, #16]
 800a2ae:	b9d8      	cbnz	r0, 800a2e8 <_vfiprintf_r+0x12c>
 800a2b0:	06d1      	lsls	r1, r2, #27
 800a2b2:	bf44      	itt	mi
 800a2b4:	2320      	movmi	r3, #32
 800a2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ba:	0713      	lsls	r3, r2, #28
 800a2bc:	bf44      	itt	mi
 800a2be:	232b      	movmi	r3, #43	; 0x2b
 800a2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ca:	d015      	beq.n	800a2f8 <_vfiprintf_r+0x13c>
 800a2cc:	9a07      	ldr	r2, [sp, #28]
 800a2ce:	4654      	mov	r4, sl
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	f04f 0c0a 	mov.w	ip, #10
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2dc:	3b30      	subs	r3, #48	; 0x30
 800a2de:	2b09      	cmp	r3, #9
 800a2e0:	d94e      	bls.n	800a380 <_vfiprintf_r+0x1c4>
 800a2e2:	b1b0      	cbz	r0, 800a312 <_vfiprintf_r+0x156>
 800a2e4:	9207      	str	r2, [sp, #28]
 800a2e6:	e014      	b.n	800a312 <_vfiprintf_r+0x156>
 800a2e8:	eba0 0308 	sub.w	r3, r0, r8
 800a2ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	46a2      	mov	sl, r4
 800a2f6:	e7d2      	b.n	800a29e <_vfiprintf_r+0xe2>
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	1d19      	adds	r1, r3, #4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	9103      	str	r1, [sp, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	bfbb      	ittet	lt
 800a304:	425b      	neglt	r3, r3
 800a306:	f042 0202 	orrlt.w	r2, r2, #2
 800a30a:	9307      	strge	r3, [sp, #28]
 800a30c:	9307      	strlt	r3, [sp, #28]
 800a30e:	bfb8      	it	lt
 800a310:	9204      	strlt	r2, [sp, #16]
 800a312:	7823      	ldrb	r3, [r4, #0]
 800a314:	2b2e      	cmp	r3, #46	; 0x2e
 800a316:	d10c      	bne.n	800a332 <_vfiprintf_r+0x176>
 800a318:	7863      	ldrb	r3, [r4, #1]
 800a31a:	2b2a      	cmp	r3, #42	; 0x2a
 800a31c:	d135      	bne.n	800a38a <_vfiprintf_r+0x1ce>
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	1d1a      	adds	r2, r3, #4
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	9203      	str	r2, [sp, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	bfb8      	it	lt
 800a32a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a32e:	3402      	adds	r4, #2
 800a330:	9305      	str	r3, [sp, #20]
 800a332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a418 <_vfiprintf_r+0x25c>
 800a336:	7821      	ldrb	r1, [r4, #0]
 800a338:	2203      	movs	r2, #3
 800a33a:	4650      	mov	r0, sl
 800a33c:	f7f5 ff58 	bl	80001f0 <memchr>
 800a340:	b140      	cbz	r0, 800a354 <_vfiprintf_r+0x198>
 800a342:	2340      	movs	r3, #64	; 0x40
 800a344:	eba0 000a 	sub.w	r0, r0, sl
 800a348:	fa03 f000 	lsl.w	r0, r3, r0
 800a34c:	9b04      	ldr	r3, [sp, #16]
 800a34e:	4303      	orrs	r3, r0
 800a350:	3401      	adds	r4, #1
 800a352:	9304      	str	r3, [sp, #16]
 800a354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a358:	482c      	ldr	r0, [pc, #176]	; (800a40c <_vfiprintf_r+0x250>)
 800a35a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a35e:	2206      	movs	r2, #6
 800a360:	f7f5 ff46 	bl	80001f0 <memchr>
 800a364:	2800      	cmp	r0, #0
 800a366:	d03f      	beq.n	800a3e8 <_vfiprintf_r+0x22c>
 800a368:	4b29      	ldr	r3, [pc, #164]	; (800a410 <_vfiprintf_r+0x254>)
 800a36a:	bb1b      	cbnz	r3, 800a3b4 <_vfiprintf_r+0x1f8>
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	3307      	adds	r3, #7
 800a370:	f023 0307 	bic.w	r3, r3, #7
 800a374:	3308      	adds	r3, #8
 800a376:	9303      	str	r3, [sp, #12]
 800a378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a37a:	443b      	add	r3, r7
 800a37c:	9309      	str	r3, [sp, #36]	; 0x24
 800a37e:	e767      	b.n	800a250 <_vfiprintf_r+0x94>
 800a380:	fb0c 3202 	mla	r2, ip, r2, r3
 800a384:	460c      	mov	r4, r1
 800a386:	2001      	movs	r0, #1
 800a388:	e7a5      	b.n	800a2d6 <_vfiprintf_r+0x11a>
 800a38a:	2300      	movs	r3, #0
 800a38c:	3401      	adds	r4, #1
 800a38e:	9305      	str	r3, [sp, #20]
 800a390:	4619      	mov	r1, r3
 800a392:	f04f 0c0a 	mov.w	ip, #10
 800a396:	4620      	mov	r0, r4
 800a398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a39c:	3a30      	subs	r2, #48	; 0x30
 800a39e:	2a09      	cmp	r2, #9
 800a3a0:	d903      	bls.n	800a3aa <_vfiprintf_r+0x1ee>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0c5      	beq.n	800a332 <_vfiprintf_r+0x176>
 800a3a6:	9105      	str	r1, [sp, #20]
 800a3a8:	e7c3      	b.n	800a332 <_vfiprintf_r+0x176>
 800a3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e7f0      	b.n	800a396 <_vfiprintf_r+0x1da>
 800a3b4:	ab03      	add	r3, sp, #12
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	462a      	mov	r2, r5
 800a3ba:	4b16      	ldr	r3, [pc, #88]	; (800a414 <_vfiprintf_r+0x258>)
 800a3bc:	a904      	add	r1, sp, #16
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f7fd fbda 	bl	8007b78 <_printf_float>
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	1c78      	adds	r0, r7, #1
 800a3c8:	d1d6      	bne.n	800a378 <_vfiprintf_r+0x1bc>
 800a3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3cc:	07d9      	lsls	r1, r3, #31
 800a3ce:	d405      	bmi.n	800a3dc <_vfiprintf_r+0x220>
 800a3d0:	89ab      	ldrh	r3, [r5, #12]
 800a3d2:	059a      	lsls	r2, r3, #22
 800a3d4:	d402      	bmi.n	800a3dc <_vfiprintf_r+0x220>
 800a3d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3d8:	f7ff f954 	bl	8009684 <__retarget_lock_release_recursive>
 800a3dc:	89ab      	ldrh	r3, [r5, #12]
 800a3de:	065b      	lsls	r3, r3, #25
 800a3e0:	f53f af12 	bmi.w	800a208 <_vfiprintf_r+0x4c>
 800a3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3e6:	e711      	b.n	800a20c <_vfiprintf_r+0x50>
 800a3e8:	ab03      	add	r3, sp, #12
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	4b09      	ldr	r3, [pc, #36]	; (800a414 <_vfiprintf_r+0x258>)
 800a3f0:	a904      	add	r1, sp, #16
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f7fd fe64 	bl	80080c0 <_printf_i>
 800a3f8:	e7e4      	b.n	800a3c4 <_vfiprintf_r+0x208>
 800a3fa:	bf00      	nop
 800a3fc:	08066678 	.word	0x08066678
 800a400:	08066698 	.word	0x08066698
 800a404:	08066658 	.word	0x08066658
 800a408:	08066814 	.word	0x08066814
 800a40c:	0806681e 	.word	0x0806681e
 800a410:	08007b79 	.word	0x08007b79
 800a414:	0800a197 	.word	0x0800a197
 800a418:	0806681a 	.word	0x0806681a

0800a41c <__sread>:
 800a41c:	b510      	push	{r4, lr}
 800a41e:	460c      	mov	r4, r1
 800a420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a424:	f000 f8f8 	bl	800a618 <_read_r>
 800a428:	2800      	cmp	r0, #0
 800a42a:	bfab      	itete	ge
 800a42c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a42e:	89a3      	ldrhlt	r3, [r4, #12]
 800a430:	181b      	addge	r3, r3, r0
 800a432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a436:	bfac      	ite	ge
 800a438:	6563      	strge	r3, [r4, #84]	; 0x54
 800a43a:	81a3      	strhlt	r3, [r4, #12]
 800a43c:	bd10      	pop	{r4, pc}

0800a43e <__swrite>:
 800a43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a442:	461f      	mov	r7, r3
 800a444:	898b      	ldrh	r3, [r1, #12]
 800a446:	05db      	lsls	r3, r3, #23
 800a448:	4605      	mov	r5, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	4616      	mov	r6, r2
 800a44e:	d505      	bpl.n	800a45c <__swrite+0x1e>
 800a450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a454:	2302      	movs	r3, #2
 800a456:	2200      	movs	r2, #0
 800a458:	f000 f898 	bl	800a58c <_lseek_r>
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a466:	81a3      	strh	r3, [r4, #12]
 800a468:	4632      	mov	r2, r6
 800a46a:	463b      	mov	r3, r7
 800a46c:	4628      	mov	r0, r5
 800a46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a472:	f000 b817 	b.w	800a4a4 <_write_r>

0800a476 <__sseek>:
 800a476:	b510      	push	{r4, lr}
 800a478:	460c      	mov	r4, r1
 800a47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47e:	f000 f885 	bl	800a58c <_lseek_r>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	bf15      	itete	ne
 800a488:	6560      	strne	r0, [r4, #84]	; 0x54
 800a48a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a48e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a492:	81a3      	strheq	r3, [r4, #12]
 800a494:	bf18      	it	ne
 800a496:	81a3      	strhne	r3, [r4, #12]
 800a498:	bd10      	pop	{r4, pc}

0800a49a <__sclose>:
 800a49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a49e:	f000 b831 	b.w	800a504 <_close_r>
	...

0800a4a4 <_write_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4d07      	ldr	r5, [pc, #28]	; (800a4c4 <_write_r+0x20>)
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	4608      	mov	r0, r1
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	602a      	str	r2, [r5, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f000 fd38 	bl	800af28 <_write>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_write_r+0x1e>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_write_r+0x1e>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	20002bf0 	.word	0x20002bf0

0800a4c8 <__assert_func>:
 800a4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4ca:	4614      	mov	r4, r2
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <__assert_func+0x2c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	68d8      	ldr	r0, [r3, #12]
 800a4d6:	b14c      	cbz	r4, 800a4ec <__assert_func+0x24>
 800a4d8:	4b07      	ldr	r3, [pc, #28]	; (800a4f8 <__assert_func+0x30>)
 800a4da:	9100      	str	r1, [sp, #0]
 800a4dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4e0:	4906      	ldr	r1, [pc, #24]	; (800a4fc <__assert_func+0x34>)
 800a4e2:	462b      	mov	r3, r5
 800a4e4:	f000 f81e 	bl	800a524 <fiprintf>
 800a4e8:	f000 f8b5 	bl	800a656 <abort>
 800a4ec:	4b04      	ldr	r3, [pc, #16]	; (800a500 <__assert_func+0x38>)
 800a4ee:	461c      	mov	r4, r3
 800a4f0:	e7f3      	b.n	800a4da <__assert_func+0x12>
 800a4f2:	bf00      	nop
 800a4f4:	20000ed0 	.word	0x20000ed0
 800a4f8:	08066825 	.word	0x08066825
 800a4fc:	08066832 	.word	0x08066832
 800a500:	08066860 	.word	0x08066860

0800a504 <_close_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d06      	ldr	r5, [pc, #24]	; (800a520 <_close_r+0x1c>)
 800a508:	2300      	movs	r3, #0
 800a50a:	4604      	mov	r4, r0
 800a50c:	4608      	mov	r0, r1
 800a50e:	602b      	str	r3, [r5, #0]
 800a510:	f000 fcd2 	bl	800aeb8 <_close>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_close_r+0x1a>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_close_r+0x1a>
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	20002bf0 	.word	0x20002bf0

0800a524 <fiprintf>:
 800a524:	b40e      	push	{r1, r2, r3}
 800a526:	b503      	push	{r0, r1, lr}
 800a528:	4601      	mov	r1, r0
 800a52a:	ab03      	add	r3, sp, #12
 800a52c:	4805      	ldr	r0, [pc, #20]	; (800a544 <fiprintf+0x20>)
 800a52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a532:	6800      	ldr	r0, [r0, #0]
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	f7ff fe41 	bl	800a1bc <_vfiprintf_r>
 800a53a:	b002      	add	sp, #8
 800a53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a540:	b003      	add	sp, #12
 800a542:	4770      	bx	lr
 800a544:	20000ed0 	.word	0x20000ed0

0800a548 <_fstat_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d07      	ldr	r5, [pc, #28]	; (800a568 <_fstat_r+0x20>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	4611      	mov	r1, r2
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	f000 fcb7 	bl	800aec8 <_fstat>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d102      	bne.n	800a564 <_fstat_r+0x1c>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	b103      	cbz	r3, 800a564 <_fstat_r+0x1c>
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	bd38      	pop	{r3, r4, r5, pc}
 800a566:	bf00      	nop
 800a568:	20002bf0 	.word	0x20002bf0

0800a56c <_isatty_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4d06      	ldr	r5, [pc, #24]	; (800a588 <_isatty_r+0x1c>)
 800a570:	2300      	movs	r3, #0
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	f000 fcb6 	bl	800aee8 <_isatty>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_isatty_r+0x1a>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_isatty_r+0x1a>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	20002bf0 	.word	0x20002bf0

0800a58c <_lseek_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d07      	ldr	r5, [pc, #28]	; (800a5ac <_lseek_r+0x20>)
 800a590:	4604      	mov	r4, r0
 800a592:	4608      	mov	r0, r1
 800a594:	4611      	mov	r1, r2
 800a596:	2200      	movs	r2, #0
 800a598:	602a      	str	r2, [r5, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	f000 fcb4 	bl	800af08 <_lseek>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d102      	bne.n	800a5aa <_lseek_r+0x1e>
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	b103      	cbz	r3, 800a5aa <_lseek_r+0x1e>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	20002bf0 	.word	0x20002bf0

0800a5b0 <__ascii_mbtowc>:
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	b901      	cbnz	r1, 800a5b6 <__ascii_mbtowc+0x6>
 800a5b4:	a901      	add	r1, sp, #4
 800a5b6:	b142      	cbz	r2, 800a5ca <__ascii_mbtowc+0x1a>
 800a5b8:	b14b      	cbz	r3, 800a5ce <__ascii_mbtowc+0x1e>
 800a5ba:	7813      	ldrb	r3, [r2, #0]
 800a5bc:	600b      	str	r3, [r1, #0]
 800a5be:	7812      	ldrb	r2, [r2, #0]
 800a5c0:	1e10      	subs	r0, r2, #0
 800a5c2:	bf18      	it	ne
 800a5c4:	2001      	movne	r0, #1
 800a5c6:	b002      	add	sp, #8
 800a5c8:	4770      	bx	lr
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	e7fb      	b.n	800a5c6 <__ascii_mbtowc+0x16>
 800a5ce:	f06f 0001 	mvn.w	r0, #1
 800a5d2:	e7f8      	b.n	800a5c6 <__ascii_mbtowc+0x16>

0800a5d4 <memmove>:
 800a5d4:	4288      	cmp	r0, r1
 800a5d6:	b510      	push	{r4, lr}
 800a5d8:	eb01 0402 	add.w	r4, r1, r2
 800a5dc:	d902      	bls.n	800a5e4 <memmove+0x10>
 800a5de:	4284      	cmp	r4, r0
 800a5e0:	4623      	mov	r3, r4
 800a5e2:	d807      	bhi.n	800a5f4 <memmove+0x20>
 800a5e4:	1e43      	subs	r3, r0, #1
 800a5e6:	42a1      	cmp	r1, r4
 800a5e8:	d008      	beq.n	800a5fc <memmove+0x28>
 800a5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5f2:	e7f8      	b.n	800a5e6 <memmove+0x12>
 800a5f4:	4402      	add	r2, r0
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	428a      	cmp	r2, r1
 800a5fa:	d100      	bne.n	800a5fe <memmove+0x2a>
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a606:	e7f7      	b.n	800a5f8 <memmove+0x24>

0800a608 <_malloc_usable_size_r>:
 800a608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a60c:	1f18      	subs	r0, r3, #4
 800a60e:	2b00      	cmp	r3, #0
 800a610:	bfbc      	itt	lt
 800a612:	580b      	ldrlt	r3, [r1, r0]
 800a614:	18c0      	addlt	r0, r0, r3
 800a616:	4770      	bx	lr

0800a618 <_read_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d07      	ldr	r5, [pc, #28]	; (800a638 <_read_r+0x20>)
 800a61c:	4604      	mov	r4, r0
 800a61e:	4608      	mov	r0, r1
 800a620:	4611      	mov	r1, r2
 800a622:	2200      	movs	r2, #0
 800a624:	602a      	str	r2, [r5, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f000 fc76 	bl	800af18 <_read>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_read_r+0x1e>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_read_r+0x1e>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	20002bf0 	.word	0x20002bf0

0800a63c <__ascii_wctomb>:
 800a63c:	b149      	cbz	r1, 800a652 <__ascii_wctomb+0x16>
 800a63e:	2aff      	cmp	r2, #255	; 0xff
 800a640:	bf85      	ittet	hi
 800a642:	238a      	movhi	r3, #138	; 0x8a
 800a644:	6003      	strhi	r3, [r0, #0]
 800a646:	700a      	strbls	r2, [r1, #0]
 800a648:	f04f 30ff 	movhi.w	r0, #4294967295
 800a64c:	bf98      	it	ls
 800a64e:	2001      	movls	r0, #1
 800a650:	4770      	bx	lr
 800a652:	4608      	mov	r0, r1
 800a654:	4770      	bx	lr

0800a656 <abort>:
 800a656:	b508      	push	{r3, lr}
 800a658:	2006      	movs	r0, #6
 800a65a:	f000 f82b 	bl	800a6b4 <raise>
 800a65e:	2001      	movs	r0, #1
 800a660:	f000 fc6a 	bl	800af38 <_exit>

0800a664 <_raise_r>:
 800a664:	291f      	cmp	r1, #31
 800a666:	b538      	push	{r3, r4, r5, lr}
 800a668:	4604      	mov	r4, r0
 800a66a:	460d      	mov	r5, r1
 800a66c:	d904      	bls.n	800a678 <_raise_r+0x14>
 800a66e:	2316      	movs	r3, #22
 800a670:	6003      	str	r3, [r0, #0]
 800a672:	f04f 30ff 	mov.w	r0, #4294967295
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a67a:	b112      	cbz	r2, 800a682 <_raise_r+0x1e>
 800a67c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a680:	b94b      	cbnz	r3, 800a696 <_raise_r+0x32>
 800a682:	4620      	mov	r0, r4
 800a684:	f000 f830 	bl	800a6e8 <_getpid_r>
 800a688:	462a      	mov	r2, r5
 800a68a:	4601      	mov	r1, r0
 800a68c:	4620      	mov	r0, r4
 800a68e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a692:	f000 b817 	b.w	800a6c4 <_kill_r>
 800a696:	2b01      	cmp	r3, #1
 800a698:	d00a      	beq.n	800a6b0 <_raise_r+0x4c>
 800a69a:	1c59      	adds	r1, r3, #1
 800a69c:	d103      	bne.n	800a6a6 <_raise_r+0x42>
 800a69e:	2316      	movs	r3, #22
 800a6a0:	6003      	str	r3, [r0, #0]
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	e7e7      	b.n	800a676 <_raise_r+0x12>
 800a6a6:	2400      	movs	r4, #0
 800a6a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	4798      	blx	r3
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	e7e0      	b.n	800a676 <_raise_r+0x12>

0800a6b4 <raise>:
 800a6b4:	4b02      	ldr	r3, [pc, #8]	; (800a6c0 <raise+0xc>)
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	f7ff bfd3 	b.w	800a664 <_raise_r>
 800a6be:	bf00      	nop
 800a6c0:	20000ed0 	.word	0x20000ed0

0800a6c4 <_kill_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	; (800a6e4 <_kill_r+0x20>)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	602b      	str	r3, [r5, #0]
 800a6d2:	f000 fc11 	bl	800aef8 <_kill>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d102      	bne.n	800a6e0 <_kill_r+0x1c>
 800a6da:	682b      	ldr	r3, [r5, #0]
 800a6dc:	b103      	cbz	r3, 800a6e0 <_kill_r+0x1c>
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	bd38      	pop	{r3, r4, r5, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20002bf0 	.word	0x20002bf0

0800a6e8 <_getpid_r>:
 800a6e8:	f000 bbf6 	b.w	800aed8 <_getpid>
 800a6ec:	0000      	movs	r0, r0
	...

0800a6f0 <exp>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	ed2d 8b02 	vpush	{d8}
 800a6f6:	ec55 4b10 	vmov	r4, r5, d0
 800a6fa:	f000 f891 	bl	800a820 <__ieee754_exp>
 800a6fe:	4b22      	ldr	r3, [pc, #136]	; (800a788 <exp+0x98>)
 800a700:	eeb0 8a40 	vmov.f32	s16, s0
 800a704:	eef0 8a60 	vmov.f32	s17, s1
 800a708:	f993 3000 	ldrsb.w	r3, [r3]
 800a70c:	3301      	adds	r3, #1
 800a70e:	d012      	beq.n	800a736 <exp+0x46>
 800a710:	ec45 4b10 	vmov	d0, r4, r5
 800a714:	f000 fbba 	bl	800ae8c <finite>
 800a718:	b168      	cbz	r0, 800a736 <exp+0x46>
 800a71a:	a313      	add	r3, pc, #76	; (adr r3, 800a768 <exp+0x78>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	4620      	mov	r0, r4
 800a722:	4629      	mov	r1, r5
 800a724:	f7f6 fa00 	bl	8000b28 <__aeabi_dcmpgt>
 800a728:	b160      	cbz	r0, 800a744 <exp+0x54>
 800a72a:	f7fd f87b 	bl	8007824 <__errno>
 800a72e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800a770 <exp+0x80>
 800a732:	2322      	movs	r3, #34	; 0x22
 800a734:	6003      	str	r3, [r0, #0]
 800a736:	eeb0 0a48 	vmov.f32	s0, s16
 800a73a:	eef0 0a68 	vmov.f32	s1, s17
 800a73e:	ecbd 8b02 	vpop	{d8}
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	a30c      	add	r3, pc, #48	; (adr r3, 800a778 <exp+0x88>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	4620      	mov	r0, r4
 800a74c:	4629      	mov	r1, r5
 800a74e:	f7f6 f9cd 	bl	8000aec <__aeabi_dcmplt>
 800a752:	2800      	cmp	r0, #0
 800a754:	d0ef      	beq.n	800a736 <exp+0x46>
 800a756:	f7fd f865 	bl	8007824 <__errno>
 800a75a:	2322      	movs	r3, #34	; 0x22
 800a75c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800a780 <exp+0x90>
 800a760:	6003      	str	r3, [r0, #0]
 800a762:	e7e8      	b.n	800a736 <exp+0x46>
 800a764:	f3af 8000 	nop.w
 800a768:	fefa39ef 	.word	0xfefa39ef
 800a76c:	40862e42 	.word	0x40862e42
 800a770:	00000000 	.word	0x00000000
 800a774:	7ff00000 	.word	0x7ff00000
 800a778:	d52d3051 	.word	0xd52d3051
 800a77c:	c0874910 	.word	0xc0874910
	...
 800a788:	200010a0 	.word	0x200010a0
 800a78c:	00000000 	.word	0x00000000

0800a790 <log>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	ed2d 8b02 	vpush	{d8}
 800a796:	ec55 4b10 	vmov	r4, r5, d0
 800a79a:	f000 f9bd 	bl	800ab18 <__ieee754_log>
 800a79e:	4b1e      	ldr	r3, [pc, #120]	; (800a818 <log+0x88>)
 800a7a0:	eeb0 8a40 	vmov.f32	s16, s0
 800a7a4:	eef0 8a60 	vmov.f32	s17, s1
 800a7a8:	f993 3000 	ldrsb.w	r3, [r3]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	d01a      	beq.n	800a7e6 <log+0x56>
 800a7b0:	4622      	mov	r2, r4
 800a7b2:	462b      	mov	r3, r5
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	f7f6 f9c0 	bl	8000b3c <__aeabi_dcmpun>
 800a7bc:	b998      	cbnz	r0, 800a7e6 <log+0x56>
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f7f6 f9af 	bl	8000b28 <__aeabi_dcmpgt>
 800a7ca:	b960      	cbnz	r0, 800a7e6 <log+0x56>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	f7f6 f980 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7d8:	b160      	cbz	r0, 800a7f4 <log+0x64>
 800a7da:	f7fd f823 	bl	8007824 <__errno>
 800a7de:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800a810 <log+0x80>
 800a7e2:	2322      	movs	r3, #34	; 0x22
 800a7e4:	6003      	str	r3, [r0, #0]
 800a7e6:	eeb0 0a48 	vmov.f32	s0, s16
 800a7ea:	eef0 0a68 	vmov.f32	s1, s17
 800a7ee:	ecbd 8b02 	vpop	{d8}
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	f7fd f816 	bl	8007824 <__errno>
 800a7f8:	ecbd 8b02 	vpop	{d8}
 800a7fc:	2321      	movs	r3, #33	; 0x21
 800a7fe:	6003      	str	r3, [r0, #0]
 800a800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a804:	4805      	ldr	r0, [pc, #20]	; (800a81c <log+0x8c>)
 800a806:	f000 bb4f 	b.w	800aea8 <nan>
 800a80a:	bf00      	nop
 800a80c:	f3af 8000 	nop.w
 800a810:	00000000 	.word	0x00000000
 800a814:	fff00000 	.word	0xfff00000
 800a818:	200010a0 	.word	0x200010a0
 800a81c:	08066860 	.word	0x08066860

0800a820 <__ieee754_exp>:
 800a820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a824:	ec55 4b10 	vmov	r4, r5, d0
 800a828:	49b1      	ldr	r1, [pc, #708]	; (800aaf0 <__ieee754_exp+0x2d0>)
 800a82a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a82e:	428b      	cmp	r3, r1
 800a830:	ed2d 8b04 	vpush	{d8-d9}
 800a834:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800a838:	d937      	bls.n	800a8aa <__ieee754_exp+0x8a>
 800a83a:	49ae      	ldr	r1, [pc, #696]	; (800aaf4 <__ieee754_exp+0x2d4>)
 800a83c:	428b      	cmp	r3, r1
 800a83e:	d916      	bls.n	800a86e <__ieee754_exp+0x4e>
 800a840:	ee10 3a10 	vmov	r3, s0
 800a844:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800a848:	4313      	orrs	r3, r2
 800a84a:	d009      	beq.n	800a860 <__ieee754_exp+0x40>
 800a84c:	ee10 2a10 	vmov	r2, s0
 800a850:	462b      	mov	r3, r5
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	f7f5 fd21 	bl	800029c <__adddf3>
 800a85a:	4604      	mov	r4, r0
 800a85c:	460d      	mov	r5, r1
 800a85e:	e000      	b.n	800a862 <__ieee754_exp+0x42>
 800a860:	bb06      	cbnz	r6, 800a8a4 <__ieee754_exp+0x84>
 800a862:	ecbd 8b04 	vpop	{d8-d9}
 800a866:	ec45 4b10 	vmov	d0, r4, r5
 800a86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86e:	a38a      	add	r3, pc, #552	; (adr r3, 800aa98 <__ieee754_exp+0x278>)
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	ee10 0a10 	vmov	r0, s0
 800a878:	4629      	mov	r1, r5
 800a87a:	f7f6 f955 	bl	8000b28 <__aeabi_dcmpgt>
 800a87e:	b138      	cbz	r0, 800a890 <__ieee754_exp+0x70>
 800a880:	a387      	add	r3, pc, #540	; (adr r3, 800aaa0 <__ieee754_exp+0x280>)
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	4610      	mov	r0, r2
 800a888:	4619      	mov	r1, r3
 800a88a:	f7f5 febd 	bl	8000608 <__aeabi_dmul>
 800a88e:	e7e4      	b.n	800a85a <__ieee754_exp+0x3a>
 800a890:	a385      	add	r3, pc, #532	; (adr r3, 800aaa8 <__ieee754_exp+0x288>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	4620      	mov	r0, r4
 800a898:	4629      	mov	r1, r5
 800a89a:	f7f6 f927 	bl	8000aec <__aeabi_dcmplt>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	f000 8087 	beq.w	800a9b2 <__ieee754_exp+0x192>
 800a8a4:	2400      	movs	r4, #0
 800a8a6:	2500      	movs	r5, #0
 800a8a8:	e7db      	b.n	800a862 <__ieee754_exp+0x42>
 800a8aa:	4a93      	ldr	r2, [pc, #588]	; (800aaf8 <__ieee754_exp+0x2d8>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	f240 80ac 	bls.w	800aa0a <__ieee754_exp+0x1ea>
 800a8b2:	4a92      	ldr	r2, [pc, #584]	; (800aafc <__ieee754_exp+0x2dc>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d87c      	bhi.n	800a9b2 <__ieee754_exp+0x192>
 800a8b8:	4b91      	ldr	r3, [pc, #580]	; (800ab00 <__ieee754_exp+0x2e0>)
 800a8ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	ee10 0a10 	vmov	r0, s0
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f5 fce6 	bl	8000298 <__aeabi_dsub>
 800a8cc:	4b8d      	ldr	r3, [pc, #564]	; (800ab04 <__ieee754_exp+0x2e4>)
 800a8ce:	00f7      	lsls	r7, r6, #3
 800a8d0:	443b      	add	r3, r7
 800a8d2:	ed93 7b00 	vldr	d7, [r3]
 800a8d6:	f1c6 0a01 	rsb	sl, r6, #1
 800a8da:	4680      	mov	r8, r0
 800a8dc:	4689      	mov	r9, r1
 800a8de:	ebaa 0a06 	sub.w	sl, sl, r6
 800a8e2:	eeb0 8a47 	vmov.f32	s16, s14
 800a8e6:	eef0 8a67 	vmov.f32	s17, s15
 800a8ea:	ec53 2b18 	vmov	r2, r3, d8
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	4649      	mov	r1, r9
 800a8f2:	f7f5 fcd1 	bl	8000298 <__aeabi_dsub>
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	4622      	mov	r2, r4
 800a8fc:	462b      	mov	r3, r5
 800a8fe:	4620      	mov	r0, r4
 800a900:	4629      	mov	r1, r5
 800a902:	f7f5 fe81 	bl	8000608 <__aeabi_dmul>
 800a906:	a36a      	add	r3, pc, #424	; (adr r3, 800aab0 <__ieee754_exp+0x290>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	4606      	mov	r6, r0
 800a90e:	460f      	mov	r7, r1
 800a910:	f7f5 fe7a 	bl	8000608 <__aeabi_dmul>
 800a914:	a368      	add	r3, pc, #416	; (adr r3, 800aab8 <__ieee754_exp+0x298>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f7f5 fcbd 	bl	8000298 <__aeabi_dsub>
 800a91e:	4632      	mov	r2, r6
 800a920:	463b      	mov	r3, r7
 800a922:	f7f5 fe71 	bl	8000608 <__aeabi_dmul>
 800a926:	a366      	add	r3, pc, #408	; (adr r3, 800aac0 <__ieee754_exp+0x2a0>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f7f5 fcb6 	bl	800029c <__adddf3>
 800a930:	4632      	mov	r2, r6
 800a932:	463b      	mov	r3, r7
 800a934:	f7f5 fe68 	bl	8000608 <__aeabi_dmul>
 800a938:	a363      	add	r3, pc, #396	; (adr r3, 800aac8 <__ieee754_exp+0x2a8>)
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f7f5 fcab 	bl	8000298 <__aeabi_dsub>
 800a942:	4632      	mov	r2, r6
 800a944:	463b      	mov	r3, r7
 800a946:	f7f5 fe5f 	bl	8000608 <__aeabi_dmul>
 800a94a:	a361      	add	r3, pc, #388	; (adr r3, 800aad0 <__ieee754_exp+0x2b0>)
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f7f5 fca4 	bl	800029c <__adddf3>
 800a954:	4632      	mov	r2, r6
 800a956:	463b      	mov	r3, r7
 800a958:	f7f5 fe56 	bl	8000608 <__aeabi_dmul>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4620      	mov	r0, r4
 800a962:	4629      	mov	r1, r5
 800a964:	f7f5 fc98 	bl	8000298 <__aeabi_dsub>
 800a968:	4602      	mov	r2, r0
 800a96a:	460b      	mov	r3, r1
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f5 fe48 	bl	8000608 <__aeabi_dmul>
 800a978:	ec41 0b19 	vmov	d9, r0, r1
 800a97c:	f1ba 0f00 	cmp.w	sl, #0
 800a980:	d15d      	bne.n	800aa3e <__ieee754_exp+0x21e>
 800a982:	2200      	movs	r2, #0
 800a984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a988:	4630      	mov	r0, r6
 800a98a:	4639      	mov	r1, r7
 800a98c:	f7f5 fc84 	bl	8000298 <__aeabi_dsub>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	ec51 0b19 	vmov	r0, r1, d9
 800a998:	f7f5 ff60 	bl	800085c <__aeabi_ddiv>
 800a99c:	4622      	mov	r2, r4
 800a99e:	462b      	mov	r3, r5
 800a9a0:	f7f5 fc7a 	bl	8000298 <__aeabi_dsub>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	4957      	ldr	r1, [pc, #348]	; (800ab08 <__ieee754_exp+0x2e8>)
 800a9ac:	f7f5 fc74 	bl	8000298 <__aeabi_dsub>
 800a9b0:	e753      	b.n	800a85a <__ieee754_exp+0x3a>
 800a9b2:	4856      	ldr	r0, [pc, #344]	; (800ab0c <__ieee754_exp+0x2ec>)
 800a9b4:	a348      	add	r3, pc, #288	; (adr r3, 800aad8 <__ieee754_exp+0x2b8>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a9be:	4629      	mov	r1, r5
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7f5 fe21 	bl	8000608 <__aeabi_dmul>
 800a9c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9ca:	f7f5 fc67 	bl	800029c <__adddf3>
 800a9ce:	f7f6 f8cb 	bl	8000b68 <__aeabi_d2iz>
 800a9d2:	4682      	mov	sl, r0
 800a9d4:	f7f5 fdae 	bl	8000534 <__aeabi_i2d>
 800a9d8:	a341      	add	r3, pc, #260	; (adr r3, 800aae0 <__ieee754_exp+0x2c0>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460f      	mov	r7, r1
 800a9e2:	f7f5 fe11 	bl	8000608 <__aeabi_dmul>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	f7f5 fc53 	bl	8000298 <__aeabi_dsub>
 800a9f2:	a33d      	add	r3, pc, #244	; (adr r3, 800aae8 <__ieee754_exp+0x2c8>)
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	4680      	mov	r8, r0
 800a9fa:	4689      	mov	r9, r1
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f7f5 fe02 	bl	8000608 <__aeabi_dmul>
 800aa04:	ec41 0b18 	vmov	d8, r0, r1
 800aa08:	e76f      	b.n	800a8ea <__ieee754_exp+0xca>
 800aa0a:	4a41      	ldr	r2, [pc, #260]	; (800ab10 <__ieee754_exp+0x2f0>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d811      	bhi.n	800aa34 <__ieee754_exp+0x214>
 800aa10:	a323      	add	r3, pc, #140	; (adr r3, 800aaa0 <__ieee754_exp+0x280>)
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	ee10 0a10 	vmov	r0, s0
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7f5 fc3e 	bl	800029c <__adddf3>
 800aa20:	4b39      	ldr	r3, [pc, #228]	; (800ab08 <__ieee754_exp+0x2e8>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	f7f6 f880 	bl	8000b28 <__aeabi_dcmpgt>
 800aa28:	b138      	cbz	r0, 800aa3a <__ieee754_exp+0x21a>
 800aa2a:	4b37      	ldr	r3, [pc, #220]	; (800ab08 <__ieee754_exp+0x2e8>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	4620      	mov	r0, r4
 800aa30:	4629      	mov	r1, r5
 800aa32:	e710      	b.n	800a856 <__ieee754_exp+0x36>
 800aa34:	f04f 0a00 	mov.w	sl, #0
 800aa38:	e75f      	b.n	800a8fa <__ieee754_exp+0xda>
 800aa3a:	4682      	mov	sl, r0
 800aa3c:	e75d      	b.n	800a8fa <__ieee754_exp+0xda>
 800aa3e:	4632      	mov	r2, r6
 800aa40:	463b      	mov	r3, r7
 800aa42:	2000      	movs	r0, #0
 800aa44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800aa48:	f7f5 fc26 	bl	8000298 <__aeabi_dsub>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	ec51 0b19 	vmov	r0, r1, d9
 800aa54:	f7f5 ff02 	bl	800085c <__aeabi_ddiv>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	ec51 0b18 	vmov	r0, r1, d8
 800aa60:	f7f5 fc1a 	bl	8000298 <__aeabi_dsub>
 800aa64:	4642      	mov	r2, r8
 800aa66:	464b      	mov	r3, r9
 800aa68:	f7f5 fc16 	bl	8000298 <__aeabi_dsub>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	2000      	movs	r0, #0
 800aa72:	4925      	ldr	r1, [pc, #148]	; (800ab08 <__ieee754_exp+0x2e8>)
 800aa74:	f7f5 fc10 	bl	8000298 <__aeabi_dsub>
 800aa78:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800aa7c:	4592      	cmp	sl, r2
 800aa7e:	db02      	blt.n	800aa86 <__ieee754_exp+0x266>
 800aa80:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800aa84:	e6e9      	b.n	800a85a <__ieee754_exp+0x3a>
 800aa86:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800aa8a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800aa94:	e6f9      	b.n	800a88a <__ieee754_exp+0x6a>
 800aa96:	bf00      	nop
 800aa98:	fefa39ef 	.word	0xfefa39ef
 800aa9c:	40862e42 	.word	0x40862e42
 800aaa0:	8800759c 	.word	0x8800759c
 800aaa4:	7e37e43c 	.word	0x7e37e43c
 800aaa8:	d52d3051 	.word	0xd52d3051
 800aaac:	c0874910 	.word	0xc0874910
 800aab0:	72bea4d0 	.word	0x72bea4d0
 800aab4:	3e663769 	.word	0x3e663769
 800aab8:	c5d26bf1 	.word	0xc5d26bf1
 800aabc:	3ebbbd41 	.word	0x3ebbbd41
 800aac0:	af25de2c 	.word	0xaf25de2c
 800aac4:	3f11566a 	.word	0x3f11566a
 800aac8:	16bebd93 	.word	0x16bebd93
 800aacc:	3f66c16c 	.word	0x3f66c16c
 800aad0:	5555553e 	.word	0x5555553e
 800aad4:	3fc55555 	.word	0x3fc55555
 800aad8:	652b82fe 	.word	0x652b82fe
 800aadc:	3ff71547 	.word	0x3ff71547
 800aae0:	fee00000 	.word	0xfee00000
 800aae4:	3fe62e42 	.word	0x3fe62e42
 800aae8:	35793c76 	.word	0x35793c76
 800aaec:	3dea39ef 	.word	0x3dea39ef
 800aaf0:	40862e41 	.word	0x40862e41
 800aaf4:	7fefffff 	.word	0x7fefffff
 800aaf8:	3fd62e42 	.word	0x3fd62e42
 800aafc:	3ff0a2b1 	.word	0x3ff0a2b1
 800ab00:	08066980 	.word	0x08066980
 800ab04:	08066990 	.word	0x08066990
 800ab08:	3ff00000 	.word	0x3ff00000
 800ab0c:	08066970 	.word	0x08066970
 800ab10:	3e2fffff 	.word	0x3e2fffff
 800ab14:	00000000 	.word	0x00000000

0800ab18 <__ieee754_log>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	ec51 0b10 	vmov	r0, r1, d0
 800ab20:	ed2d 8b04 	vpush	{d8-d9}
 800ab24:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ab28:	b083      	sub	sp, #12
 800ab2a:	460d      	mov	r5, r1
 800ab2c:	da29      	bge.n	800ab82 <__ieee754_log+0x6a>
 800ab2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab32:	4303      	orrs	r3, r0
 800ab34:	ee10 2a10 	vmov	r2, s0
 800ab38:	d10c      	bne.n	800ab54 <__ieee754_log+0x3c>
 800ab3a:	49cf      	ldr	r1, [pc, #828]	; (800ae78 <__ieee754_log+0x360>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2300      	movs	r3, #0
 800ab40:	2000      	movs	r0, #0
 800ab42:	f7f5 fe8b 	bl	800085c <__aeabi_ddiv>
 800ab46:	ec41 0b10 	vmov	d0, r0, r1
 800ab4a:	b003      	add	sp, #12
 800ab4c:	ecbd 8b04 	vpop	{d8-d9}
 800ab50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab54:	2900      	cmp	r1, #0
 800ab56:	da05      	bge.n	800ab64 <__ieee754_log+0x4c>
 800ab58:	460b      	mov	r3, r1
 800ab5a:	f7f5 fb9d 	bl	8000298 <__aeabi_dsub>
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2300      	movs	r3, #0
 800ab62:	e7ee      	b.n	800ab42 <__ieee754_log+0x2a>
 800ab64:	4bc5      	ldr	r3, [pc, #788]	; (800ae7c <__ieee754_log+0x364>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	f7f5 fd4e 	bl	8000608 <__aeabi_dmul>
 800ab6c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ab70:	460d      	mov	r5, r1
 800ab72:	4ac3      	ldr	r2, [pc, #780]	; (800ae80 <__ieee754_log+0x368>)
 800ab74:	4295      	cmp	r5, r2
 800ab76:	dd06      	ble.n	800ab86 <__ieee754_log+0x6e>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	f7f5 fb8e 	bl	800029c <__adddf3>
 800ab80:	e7e1      	b.n	800ab46 <__ieee754_log+0x2e>
 800ab82:	2300      	movs	r3, #0
 800ab84:	e7f5      	b.n	800ab72 <__ieee754_log+0x5a>
 800ab86:	152c      	asrs	r4, r5, #20
 800ab88:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ab8c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ab90:	441c      	add	r4, r3
 800ab92:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ab96:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ab9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab9e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800aba2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800aba6:	ea42 0105 	orr.w	r1, r2, r5
 800abaa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800abae:	2200      	movs	r2, #0
 800abb0:	4bb4      	ldr	r3, [pc, #720]	; (800ae84 <__ieee754_log+0x36c>)
 800abb2:	f7f5 fb71 	bl	8000298 <__aeabi_dsub>
 800abb6:	1cab      	adds	r3, r5, #2
 800abb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	4682      	mov	sl, r0
 800abc0:	468b      	mov	fp, r1
 800abc2:	f04f 0200 	mov.w	r2, #0
 800abc6:	dc53      	bgt.n	800ac70 <__ieee754_log+0x158>
 800abc8:	2300      	movs	r3, #0
 800abca:	f7f5 ff85 	bl	8000ad8 <__aeabi_dcmpeq>
 800abce:	b1d0      	cbz	r0, 800ac06 <__ieee754_log+0xee>
 800abd0:	2c00      	cmp	r4, #0
 800abd2:	f000 8122 	beq.w	800ae1a <__ieee754_log+0x302>
 800abd6:	4620      	mov	r0, r4
 800abd8:	f7f5 fcac 	bl	8000534 <__aeabi_i2d>
 800abdc:	a390      	add	r3, pc, #576	; (adr r3, 800ae20 <__ieee754_log+0x308>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	4606      	mov	r6, r0
 800abe4:	460f      	mov	r7, r1
 800abe6:	f7f5 fd0f 	bl	8000608 <__aeabi_dmul>
 800abea:	a38f      	add	r3, pc, #572	; (adr r3, 800ae28 <__ieee754_log+0x310>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	4604      	mov	r4, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	4630      	mov	r0, r6
 800abf6:	4639      	mov	r1, r7
 800abf8:	f7f5 fd06 	bl	8000608 <__aeabi_dmul>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4620      	mov	r0, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	e7ba      	b.n	800ab7c <__ieee754_log+0x64>
 800ac06:	a38a      	add	r3, pc, #552	; (adr r3, 800ae30 <__ieee754_log+0x318>)
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	4650      	mov	r0, sl
 800ac0e:	4659      	mov	r1, fp
 800ac10:	f7f5 fcfa 	bl	8000608 <__aeabi_dmul>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	2000      	movs	r0, #0
 800ac1a:	499b      	ldr	r1, [pc, #620]	; (800ae88 <__ieee754_log+0x370>)
 800ac1c:	f7f5 fb3c 	bl	8000298 <__aeabi_dsub>
 800ac20:	4652      	mov	r2, sl
 800ac22:	4606      	mov	r6, r0
 800ac24:	460f      	mov	r7, r1
 800ac26:	465b      	mov	r3, fp
 800ac28:	4650      	mov	r0, sl
 800ac2a:	4659      	mov	r1, fp
 800ac2c:	f7f5 fcec 	bl	8000608 <__aeabi_dmul>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4630      	mov	r0, r6
 800ac36:	4639      	mov	r1, r7
 800ac38:	f7f5 fce6 	bl	8000608 <__aeabi_dmul>
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460f      	mov	r7, r1
 800ac40:	b914      	cbnz	r4, 800ac48 <__ieee754_log+0x130>
 800ac42:	4632      	mov	r2, r6
 800ac44:	463b      	mov	r3, r7
 800ac46:	e0a2      	b.n	800ad8e <__ieee754_log+0x276>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f7f5 fc73 	bl	8000534 <__aeabi_i2d>
 800ac4e:	a374      	add	r3, pc, #464	; (adr r3, 800ae20 <__ieee754_log+0x308>)
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	4680      	mov	r8, r0
 800ac56:	4689      	mov	r9, r1
 800ac58:	f7f5 fcd6 	bl	8000608 <__aeabi_dmul>
 800ac5c:	a372      	add	r3, pc, #456	; (adr r3, 800ae28 <__ieee754_log+0x310>)
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	4604      	mov	r4, r0
 800ac64:	460d      	mov	r5, r1
 800ac66:	4640      	mov	r0, r8
 800ac68:	4649      	mov	r1, r9
 800ac6a:	f7f5 fccd 	bl	8000608 <__aeabi_dmul>
 800ac6e:	e0a7      	b.n	800adc0 <__ieee754_log+0x2a8>
 800ac70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac74:	f7f5 fb12 	bl	800029c <__adddf3>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4650      	mov	r0, sl
 800ac7e:	4659      	mov	r1, fp
 800ac80:	f7f5 fdec 	bl	800085c <__aeabi_ddiv>
 800ac84:	ec41 0b18 	vmov	d8, r0, r1
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f7f5 fc53 	bl	8000534 <__aeabi_i2d>
 800ac8e:	ec53 2b18 	vmov	r2, r3, d8
 800ac92:	ec41 0b19 	vmov	d9, r0, r1
 800ac96:	ec51 0b18 	vmov	r0, r1, d8
 800ac9a:	f7f5 fcb5 	bl	8000608 <__aeabi_dmul>
 800ac9e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800aca2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4680      	mov	r8, r0
 800acae:	4689      	mov	r9, r1
 800acb0:	f7f5 fcaa 	bl	8000608 <__aeabi_dmul>
 800acb4:	a360      	add	r3, pc, #384	; (adr r3, 800ae38 <__ieee754_log+0x320>)
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	4606      	mov	r6, r0
 800acbc:	460f      	mov	r7, r1
 800acbe:	f7f5 fca3 	bl	8000608 <__aeabi_dmul>
 800acc2:	a35f      	add	r3, pc, #380	; (adr r3, 800ae40 <__ieee754_log+0x328>)
 800acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc8:	f7f5 fae8 	bl	800029c <__adddf3>
 800accc:	4632      	mov	r2, r6
 800acce:	463b      	mov	r3, r7
 800acd0:	f7f5 fc9a 	bl	8000608 <__aeabi_dmul>
 800acd4:	a35c      	add	r3, pc, #368	; (adr r3, 800ae48 <__ieee754_log+0x330>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fadf 	bl	800029c <__adddf3>
 800acde:	4632      	mov	r2, r6
 800ace0:	463b      	mov	r3, r7
 800ace2:	f7f5 fc91 	bl	8000608 <__aeabi_dmul>
 800ace6:	a35a      	add	r3, pc, #360	; (adr r3, 800ae50 <__ieee754_log+0x338>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 fad6 	bl	800029c <__adddf3>
 800acf0:	4642      	mov	r2, r8
 800acf2:	464b      	mov	r3, r9
 800acf4:	f7f5 fc88 	bl	8000608 <__aeabi_dmul>
 800acf8:	a357      	add	r3, pc, #348	; (adr r3, 800ae58 <__ieee754_log+0x340>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	4680      	mov	r8, r0
 800ad00:	4689      	mov	r9, r1
 800ad02:	4630      	mov	r0, r6
 800ad04:	4639      	mov	r1, r7
 800ad06:	f7f5 fc7f 	bl	8000608 <__aeabi_dmul>
 800ad0a:	a355      	add	r3, pc, #340	; (adr r3, 800ae60 <__ieee754_log+0x348>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 fac4 	bl	800029c <__adddf3>
 800ad14:	4632      	mov	r2, r6
 800ad16:	463b      	mov	r3, r7
 800ad18:	f7f5 fc76 	bl	8000608 <__aeabi_dmul>
 800ad1c:	a352      	add	r3, pc, #328	; (adr r3, 800ae68 <__ieee754_log+0x350>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	f7f5 fabb 	bl	800029c <__adddf3>
 800ad26:	4632      	mov	r2, r6
 800ad28:	463b      	mov	r3, r7
 800ad2a:	f7f5 fc6d 	bl	8000608 <__aeabi_dmul>
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4602      	mov	r2, r0
 800ad32:	4649      	mov	r1, r9
 800ad34:	4640      	mov	r0, r8
 800ad36:	f7f5 fab1 	bl	800029c <__adddf3>
 800ad3a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ad3e:	9b01      	ldr	r3, [sp, #4]
 800ad40:	3551      	adds	r5, #81	; 0x51
 800ad42:	431d      	orrs	r5, r3
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	4680      	mov	r8, r0
 800ad48:	4689      	mov	r9, r1
 800ad4a:	dd48      	ble.n	800adde <__ieee754_log+0x2c6>
 800ad4c:	4b4e      	ldr	r3, [pc, #312]	; (800ae88 <__ieee754_log+0x370>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	4650      	mov	r0, sl
 800ad52:	4659      	mov	r1, fp
 800ad54:	f7f5 fc58 	bl	8000608 <__aeabi_dmul>
 800ad58:	4652      	mov	r2, sl
 800ad5a:	465b      	mov	r3, fp
 800ad5c:	f7f5 fc54 	bl	8000608 <__aeabi_dmul>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	4606      	mov	r6, r0
 800ad66:	460f      	mov	r7, r1
 800ad68:	4640      	mov	r0, r8
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	f7f5 fa96 	bl	800029c <__adddf3>
 800ad70:	ec53 2b18 	vmov	r2, r3, d8
 800ad74:	f7f5 fc48 	bl	8000608 <__aeabi_dmul>
 800ad78:	4680      	mov	r8, r0
 800ad7a:	4689      	mov	r9, r1
 800ad7c:	b964      	cbnz	r4, 800ad98 <__ieee754_log+0x280>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4630      	mov	r0, r6
 800ad84:	4639      	mov	r1, r7
 800ad86:	f7f5 fa87 	bl	8000298 <__aeabi_dsub>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	4650      	mov	r0, sl
 800ad90:	4659      	mov	r1, fp
 800ad92:	f7f5 fa81 	bl	8000298 <__aeabi_dsub>
 800ad96:	e6d6      	b.n	800ab46 <__ieee754_log+0x2e>
 800ad98:	a321      	add	r3, pc, #132	; (adr r3, 800ae20 <__ieee754_log+0x308>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	ec51 0b19 	vmov	r0, r1, d9
 800ada2:	f7f5 fc31 	bl	8000608 <__aeabi_dmul>
 800ada6:	a320      	add	r3, pc, #128	; (adr r3, 800ae28 <__ieee754_log+0x310>)
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	4604      	mov	r4, r0
 800adae:	460d      	mov	r5, r1
 800adb0:	ec51 0b19 	vmov	r0, r1, d9
 800adb4:	f7f5 fc28 	bl	8000608 <__aeabi_dmul>
 800adb8:	4642      	mov	r2, r8
 800adba:	464b      	mov	r3, r9
 800adbc:	f7f5 fa6e 	bl	800029c <__adddf3>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fa66 	bl	8000298 <__aeabi_dsub>
 800adcc:	4652      	mov	r2, sl
 800adce:	465b      	mov	r3, fp
 800add0:	f7f5 fa62 	bl	8000298 <__aeabi_dsub>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4620      	mov	r0, r4
 800adda:	4629      	mov	r1, r5
 800addc:	e7d9      	b.n	800ad92 <__ieee754_log+0x27a>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4650      	mov	r0, sl
 800ade4:	4659      	mov	r1, fp
 800ade6:	f7f5 fa57 	bl	8000298 <__aeabi_dsub>
 800adea:	ec53 2b18 	vmov	r2, r3, d8
 800adee:	f7f5 fc0b 	bl	8000608 <__aeabi_dmul>
 800adf2:	4606      	mov	r6, r0
 800adf4:	460f      	mov	r7, r1
 800adf6:	2c00      	cmp	r4, #0
 800adf8:	f43f af23 	beq.w	800ac42 <__ieee754_log+0x12a>
 800adfc:	a308      	add	r3, pc, #32	; (adr r3, 800ae20 <__ieee754_log+0x308>)
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	ec51 0b19 	vmov	r0, r1, d9
 800ae06:	f7f5 fbff 	bl	8000608 <__aeabi_dmul>
 800ae0a:	a307      	add	r3, pc, #28	; (adr r3, 800ae28 <__ieee754_log+0x310>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	4604      	mov	r4, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	ec51 0b19 	vmov	r0, r1, d9
 800ae18:	e727      	b.n	800ac6a <__ieee754_log+0x152>
 800ae1a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ae70 <__ieee754_log+0x358>
 800ae1e:	e694      	b.n	800ab4a <__ieee754_log+0x32>
 800ae20:	fee00000 	.word	0xfee00000
 800ae24:	3fe62e42 	.word	0x3fe62e42
 800ae28:	35793c76 	.word	0x35793c76
 800ae2c:	3dea39ef 	.word	0x3dea39ef
 800ae30:	55555555 	.word	0x55555555
 800ae34:	3fd55555 	.word	0x3fd55555
 800ae38:	df3e5244 	.word	0xdf3e5244
 800ae3c:	3fc2f112 	.word	0x3fc2f112
 800ae40:	96cb03de 	.word	0x96cb03de
 800ae44:	3fc74664 	.word	0x3fc74664
 800ae48:	94229359 	.word	0x94229359
 800ae4c:	3fd24924 	.word	0x3fd24924
 800ae50:	55555593 	.word	0x55555593
 800ae54:	3fe55555 	.word	0x3fe55555
 800ae58:	d078c69f 	.word	0xd078c69f
 800ae5c:	3fc39a09 	.word	0x3fc39a09
 800ae60:	1d8e78af 	.word	0x1d8e78af
 800ae64:	3fcc71c5 	.word	0x3fcc71c5
 800ae68:	9997fa04 	.word	0x9997fa04
 800ae6c:	3fd99999 	.word	0x3fd99999
	...
 800ae78:	c3500000 	.word	0xc3500000
 800ae7c:	43500000 	.word	0x43500000
 800ae80:	7fefffff 	.word	0x7fefffff
 800ae84:	3ff00000 	.word	0x3ff00000
 800ae88:	3fe00000 	.word	0x3fe00000

0800ae8c <finite>:
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	ed8d 0b00 	vstr	d0, [sp]
 800ae92:	9801      	ldr	r0, [sp, #4]
 800ae94:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ae98:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ae9c:	0fc0      	lsrs	r0, r0, #31
 800ae9e:	b002      	add	sp, #8
 800aea0:	4770      	bx	lr
 800aea2:	0000      	movs	r0, r0
 800aea4:	0000      	movs	r0, r0
	...

0800aea8 <nan>:
 800aea8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aeb0 <nan+0x8>
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	00000000 	.word	0x00000000
 800aeb4:	7ff80000 	.word	0x7ff80000

0800aeb8 <_close>:
 800aeb8:	4b02      	ldr	r3, [pc, #8]	; (800aec4 <_close+0xc>)
 800aeba:	2258      	movs	r2, #88	; 0x58
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	f04f 30ff 	mov.w	r0, #4294967295
 800aec2:	4770      	bx	lr
 800aec4:	20002bf0 	.word	0x20002bf0

0800aec8 <_fstat>:
 800aec8:	4b02      	ldr	r3, [pc, #8]	; (800aed4 <_fstat+0xc>)
 800aeca:	2258      	movs	r2, #88	; 0x58
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	f04f 30ff 	mov.w	r0, #4294967295
 800aed2:	4770      	bx	lr
 800aed4:	20002bf0 	.word	0x20002bf0

0800aed8 <_getpid>:
 800aed8:	4b02      	ldr	r3, [pc, #8]	; (800aee4 <_getpid+0xc>)
 800aeda:	2258      	movs	r2, #88	; 0x58
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	f04f 30ff 	mov.w	r0, #4294967295
 800aee2:	4770      	bx	lr
 800aee4:	20002bf0 	.word	0x20002bf0

0800aee8 <_isatty>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <_isatty+0xc>)
 800aeea:	2258      	movs	r2, #88	; 0x58
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	2000      	movs	r0, #0
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	20002bf0 	.word	0x20002bf0

0800aef8 <_kill>:
 800aef8:	4b02      	ldr	r3, [pc, #8]	; (800af04 <_kill+0xc>)
 800aefa:	2258      	movs	r2, #88	; 0x58
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	f04f 30ff 	mov.w	r0, #4294967295
 800af02:	4770      	bx	lr
 800af04:	20002bf0 	.word	0x20002bf0

0800af08 <_lseek>:
 800af08:	4b02      	ldr	r3, [pc, #8]	; (800af14 <_lseek+0xc>)
 800af0a:	2258      	movs	r2, #88	; 0x58
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	f04f 30ff 	mov.w	r0, #4294967295
 800af12:	4770      	bx	lr
 800af14:	20002bf0 	.word	0x20002bf0

0800af18 <_read>:
 800af18:	4b02      	ldr	r3, [pc, #8]	; (800af24 <_read+0xc>)
 800af1a:	2258      	movs	r2, #88	; 0x58
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	f04f 30ff 	mov.w	r0, #4294967295
 800af22:	4770      	bx	lr
 800af24:	20002bf0 	.word	0x20002bf0

0800af28 <_write>:
 800af28:	4b02      	ldr	r3, [pc, #8]	; (800af34 <_write+0xc>)
 800af2a:	2258      	movs	r2, #88	; 0x58
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f04f 30ff 	mov.w	r0, #4294967295
 800af32:	4770      	bx	lr
 800af34:	20002bf0 	.word	0x20002bf0

0800af38 <_exit>:
 800af38:	e7fe      	b.n	800af38 <_exit>
	...

0800af3c <_init>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	bf00      	nop
 800af40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af42:	bc08      	pop	{r3}
 800af44:	469e      	mov	lr, r3
 800af46:	4770      	bx	lr

0800af48 <_fini>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	bf00      	nop
 800af4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4e:	bc08      	pop	{r3}
 800af50:	469e      	mov	lr, r3
 800af52:	4770      	bx	lr
