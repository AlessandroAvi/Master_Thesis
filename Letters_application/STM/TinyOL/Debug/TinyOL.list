
TinyOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a864  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005ba40  0800aa20  0800aa20  0001aa20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08066460  08066460  000810a4  2**0
                  CONTENTS
  4 .ARM          00000008  08066460  08066460  00076460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08066468  08066468  000810a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08066468  08066468  00076468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806646c  0806646c  0007646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010a4  20000000  08066470  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b50  200010a4  08067514  000810a4  2**2
                  ALLOC
 10 ._user_heap_stack 00001204  20002bf4  08067514  00082bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000810a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136fb  00000000  00000000  000810d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f19  00000000  00000000  000947cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000976e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00098520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019adb  00000000  00000000  000991f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013566  00000000  00000000  000b2cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ce1  00000000  00000000  000c6239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0015df1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e0c  00000000  00000000  0015dfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00162df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00162ec0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200010a4 	.word	0x200010a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a9ec 	.word	0x0800a9ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200010a8 	.word	0x200010a8
 80001dc:	0800a9ec 	.word	0x0800a9ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <OL_allocateMemory>:
//      FUNCTIONS RELATED TO MEMORY ALLOCATION
// #############################################


/*  Allocates all the matrices and arrays needed for the bare minimum functions.  */
void OL_allocateMemory(OL_LAYER_STRUCT * layer){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

	layer->weights = calloc(layer->WIDTH*layer->HEIGHT, sizeof(float));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6912      	ldr	r2, [r2, #16]
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	2104      	movs	r1, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f006 f9ac 	bl	80072c4 <calloc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
	if(layer->weights==NULL){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d103      	bne.n	8000f84 <OL_allocateMemory+0x34>
		  layer->OL_ERROR = CALLOC_WEIGHTS;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->biases = calloc(layer->WIDTH, sizeof(float));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 f99a 	bl	80072c4 <calloc>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	61da      	str	r2, [r3, #28]
	if(layer->biases==NULL){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d103      	bne.n	8000fa8 <OL_allocateMemory+0x58>
	  layer->OL_ERROR = CALLOC_BIASES;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->label = calloc(layer->WIDTH, sizeof(char));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2101      	movs	r1, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f006 f988 	bl	80072c4 <calloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	615a      	str	r2, [r3, #20]
	if(layer->label==NULL){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <OL_allocateMemory+0x7c>
	  layer->OL_ERROR = CALLOC_LABEL;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->y_pred = calloc(layer->WIDTH, sizeof(float));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 f976 	bl	80072c4 <calloc>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	621a      	str	r2, [r3, #32]
	if(layer->y_pred==NULL){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d103      	bne.n	8000ff0 <OL_allocateMemory+0xa0>
	  layer->OL_ERROR = CALLOC_Y_PRED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2203      	movs	r2, #3
 8000fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->y_true = calloc(layer->WIDTH, sizeof(float));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 f964 	bl	80072c4 <calloc>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
	if(layer->y_true== NULL){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2b00      	cmp	r3, #0
 800100a:	d103      	bne.n	8001014 <OL_allocateMemory+0xc4>
	  layer->OL_ERROR = CALLOC_Y_TRUE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2207      	movs	r2, #7
 8001010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}


	if( layer->ALGORITHM!=MODE_OL && layer->ALGORITHM!=MODE_OL_V2){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001018:	2b00      	cmp	r3, #0
 800101a:	d05f      	beq.n	80010dc <OL_allocateMemory+0x18c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001020:	2b01      	cmp	r3, #1
 8001022:	d05b      	beq.n	80010dc <OL_allocateMemory+0x18c>

		layer->weights_2 = calloc(layer->WIDTH*layer->HEIGHT, sizeof(float));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6912      	ldr	r2, [r2, #16]
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	2104      	movs	r1, #4
 8001032:	4618      	mov	r0, r3
 8001034:	f006 f946 	bl	80072c4 <calloc>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
		if(layer->weights_2==NULL){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	2b00      	cmp	r3, #0
 8001046:	d103      	bne.n	8001050 <OL_allocateMemory+0x100>
			layer->OL_ERROR = CALLOC_WEIGHTS_2;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2204      	movs	r2, #4
 800104c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}

		layer->biases_2 = calloc(layer->WIDTH, sizeof(float));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2104      	movs	r1, #4
 8001056:	4618      	mov	r0, r3
 8001058:	f006 f934 	bl	80072c4 <calloc>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
		if(layer->biases_2==NULL){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <OL_allocateMemory+0x124>
			layer->OL_ERROR = CALLOC_BIASES_2;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2205      	movs	r2, #5
 8001070:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}

		if(layer->ALGORITHM == MODE_CWR){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001078:	2b02      	cmp	r3, #2
 800107a:	d111      	bne.n	80010a0 <OL_allocateMemory+0x150>
			layer->found_lett = calloc(layer->WIDTH, sizeof(uint8_t));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2101      	movs	r1, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f006 f91e 	bl	80072c4 <calloc>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	635a      	str	r2, [r3, #52]	; 0x34
			if(layer->found_lett==NULL){
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	2b00      	cmp	r3, #0
 8001096:	d103      	bne.n	80010a0 <OL_allocateMemory+0x150>
				layer->OL_ERROR = CALLOC_FOUND_LETT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2206      	movs	r2, #6
 800109c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			}
		}

		if(layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_LWF_batch || layer->ALGORITHM == MODE_CWR){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d007      	beq.n	80010b8 <OL_allocateMemory+0x168>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	d003      	beq.n	80010b8 <OL_allocateMemory+0x168>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d111      	bne.n	80010dc <OL_allocateMemory+0x18c>
			layer->y_pred_2 = calloc(layer->WIDTH, sizeof(float));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2104      	movs	r1, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 f900 	bl	80072c4 <calloc>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	639a      	str	r2, [r3, #56]	; 0x38
			if(layer->y_pred_2==NULL){
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <OL_allocateMemory+0x18c>
				layer->OL_ERROR = CALLOC_Y_PRED_2;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2208      	movs	r2, #8
 80010d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			}
		}
	}

}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <OL_increaseWeightDim>:


/* Use realloc to increase the amount of memory dedicated to the weights  */
void OL_increaseWeightDim(OL_LAYER_STRUCT * layer){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

	int h = layer->HEIGHT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	60fb      	str	r3, [r7, #12]
	int w = layer->WIDTH;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	60bb      	str	r3, [r7, #8]

	layer->weights = realloc(layer->weights, h*w*sizeof(float));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6998      	ldr	r0, [r3, #24]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4619      	mov	r1, r3
 8001108:	f006 fee6 	bl	8007ed8 <realloc>
 800110c:	4602      	mov	r2, r0
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	619a      	str	r2, [r3, #24]
	if(layer->weights== NULL){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <OL_increaseWeightDim+0x3e>
		layer->OL_ERROR = REALLOC_WEIGHTS;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	220a      	movs	r2, #10
 800111e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	// set to 0 only the new weights
	for(int i=h*(w-1); i<h*w; i++){
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e00a      	b.n	8001146 <OL_increaseWeightDim+0x62>
		layer->weights[i] = 0;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	699a      	ldr	r2, [r3, #24]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
	for(int i=h*(w-1); i<h*w; i++){
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	fb02 f303 	mul.w	r3, r2, r3
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbed      	blt.n	8001130 <OL_increaseWeightDim+0x4c>
	}

	if(layer->ALGORITHM == MODE_CWR || layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_OL_batch ||
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001158:	2b02      	cmp	r3, #2
 800115a:	d00f      	beq.n	800117c <OL_increaseWeightDim+0x98>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	2b03      	cmp	r3, #3
 8001162:	d00b      	beq.n	800117c <OL_increaseWeightDim+0x98>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001168:	2b04      	cmp	r3, #4
 800116a:	d007      	beq.n	800117c <OL_increaseWeightDim+0x98>
	   layer->ALGORITHM == MODE_OL_V2_batch || layer->ALGORITHM == MODE_LWF_batch){
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(layer->ALGORITHM == MODE_CWR || layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_OL_batch ||
 8001170:	2b05      	cmp	r3, #5
 8001172:	d003      	beq.n	800117c <OL_increaseWeightDim+0x98>
	   layer->ALGORITHM == MODE_OL_V2_batch || layer->ALGORITHM == MODE_LWF_batch){
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001178:	2b06      	cmp	r3, #6
 800117a:	d12d      	bne.n	80011d8 <OL_increaseWeightDim+0xf4>

		layer->weights_2 = realloc(layer->weights_2, h*w*sizeof(float));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	f006 fea4 	bl	8007ed8 <realloc>
 8001190:	4602      	mov	r2, r0
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
		if(layer->weights_2== NULL){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119a:	2b00      	cmp	r3, #0
 800119c:	d103      	bne.n	80011a6 <OL_increaseWeightDim+0xc2>
			layer->OL_ERROR = REALLOC_WEIGHTS_2;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	220b      	movs	r2, #11
 80011a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}

		// set to 0 new weights
		for(int i=h*(w-1); i<h*w; i++){
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	e00a      	b.n	80011ca <OL_increaseWeightDim+0xe6>
			layer->weights_2[i] = 0;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
		for(int i=h*(w-1); i<h*w; i++){
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	3301      	adds	r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbed      	blt.n	80011b4 <OL_increaseWeightDim+0xd0>
	}

#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <OL_increaseBiasDim>:


/* Use realloc to increase the amount of memory dedicated to the biases  */
void OL_increaseBiasDim(OL_LAYER_STRUCT * layer){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	int w = layer->WIDTH;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60fb      	str	r3, [r7, #12]

	layer->biases = realloc(layer->biases, w*sizeof(float));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69da      	ldr	r2, [r3, #28]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4619      	mov	r1, r3
 80011f8:	4610      	mov	r0, r2
 80011fa:	f006 fe6d 	bl	8007ed8 <realloc>
 80011fe:	4602      	mov	r2, r0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61da      	str	r2, [r3, #28]
	if(layer->biases==NULL){
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d103      	bne.n	8001214 <OL_increaseBiasDim+0x34>
		layer->OL_ERROR = REALLOC_BIASES;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	220c      	movs	r2, #12
 8001210:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	layer->biases[w-1] = 0;				// set to 0 new biases
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69da      	ldr	r2, [r3, #28]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800121e:	3b01      	subs	r3, #1
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	601a      	str	r2, [r3, #0]

	if(layer->ALGORITHM==MODE_CWR || layer->ALGORITHM==MODE_LWF || layer->ALGORITHM==MODE_OL_batch  ||
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122e:	2b02      	cmp	r3, #2
 8001230:	d00f      	beq.n	8001252 <OL_increaseBiasDim+0x72>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001236:	2b03      	cmp	r3, #3
 8001238:	d00b      	beq.n	8001252 <OL_increaseBiasDim+0x72>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123e:	2b04      	cmp	r3, #4
 8001240:	d007      	beq.n	8001252 <OL_increaseBiasDim+0x72>
	   layer->ALGORITHM==MODE_OL_V2_batch || layer->ALGORITHM==MODE_LWF_batch){
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(layer->ALGORITHM==MODE_CWR || layer->ALGORITHM==MODE_LWF || layer->ALGORITHM==MODE_OL_batch  ||
 8001246:	2b05      	cmp	r3, #5
 8001248:	d003      	beq.n	8001252 <OL_increaseBiasDim+0x72>
	   layer->ALGORITHM==MODE_OL_V2_batch || layer->ALGORITHM==MODE_LWF_batch){
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124e:	2b06      	cmp	r3, #6
 8001250:	d11d      	bne.n	800128e <OL_increaseBiasDim+0xae>

		layer->biases_2 = realloc(layer->biases_2, w*sizeof(float));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f006 fe3b 	bl	8007ed8 <realloc>
 8001262:	4602      	mov	r2, r0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
		if(layer->biases_2==NULL){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	2b00      	cmp	r3, #0
 800126e:	d103      	bne.n	8001278 <OL_increaseBiasDim+0x98>
			layer->OL_ERROR = REALLOC_BIASES_2;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	220d      	movs	r2, #13
 8001274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}
		layer->biases_2[w-1] = 0;		// set to 0 new biases
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001282:	3b01      	subs	r3, #1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
	}

#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <OL_increaseYtrueDim>:


/* Use realloc to increase the amount of memory dedicated to y_true  */
void OL_increaseYtrueDim(OL_LAYER_STRUCT * layer){
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]

	layer->y_true = realloc(layer->y_true, layer->WIDTH*sizeof(float));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4619      	mov	r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	f006 fe14 	bl	8007ed8 <realloc>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
	if(layer->y_true==NULL){
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <OL_increaseYtrueDim+0x30>
		layer->OL_ERROR = REALLOC_Y_TRUE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2211      	movs	r2, #17
 80012c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <OL_increaseLabel>:

/* Use realloc to increase the amount of memory dedicated to the labels  */
void OL_increaseLabel(OL_LAYER_STRUCT * layer, char new_letter){
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	70fb      	strb	r3, [r7, #3]

	int w = layer->WIDTH;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	60fb      	str	r3, [r7, #12]

	layer->label = realloc(layer->label, w*sizeof(char));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f006 fdf5 	bl	8007ed8 <realloc>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	615a      	str	r2, [r3, #20]
	if(layer->label==NULL){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <OL_increaseLabel+0x36>
		layer->OL_ERROR = REALLOC_LABEL;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	220e      	movs	r2, #14
 8001300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
	layer->label[w-1] = new_letter;		// save in labels the new letter
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695a      	ldr	r2, [r3, #20]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3b01      	subs	r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	78fa      	ldrb	r2, [r7, #3]
 8001310:	701a      	strb	r2, [r3, #0]
	OL_updateRAMcounter(layer);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f001 f9e8 	bl	80026e8 <OL_updateRAMcounter>

};
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <OL_increaseYpredDim>:


/* Use realloc to increase the amount of memory dedicated to the y prediction arrays  */
void OL_increaseYpredDim(OL_LAYER_STRUCT * layer){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	layer->y_pred = realloc(layer->y_pred, layer->WIDTH*sizeof(float));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1a      	ldr	r2, [r3, #32]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4619      	mov	r1, r3
 8001334:	4610      	mov	r0, r2
 8001336:	f006 fdcf 	bl	8007ed8 <realloc>
 800133a:	4602      	mov	r2, r0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	621a      	str	r2, [r3, #32]
	if(layer->y_pred==NULL){
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <OL_increaseYpredDim+0x30>
		layer->OL_ERROR = REALLOC_Y_PRED;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	220f      	movs	r2, #15
 800134c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	if(layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_LWF_batch || layer->ALGORITHM == MODE_CWR){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001354:	2b03      	cmp	r3, #3
 8001356:	d007      	beq.n	8001368 <OL_increaseYpredDim+0x48>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	2b06      	cmp	r3, #6
 800135e:	d003      	beq.n	8001368 <OL_increaseYpredDim+0x48>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001364:	2b02      	cmp	r3, #2
 8001366:	d113      	bne.n	8001390 <OL_increaseYpredDim+0x70>
		layer->y_pred_2 = realloc(layer->y_pred_2, layer->WIDTH*sizeof(float));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f006 fdaf 	bl	8007ed8 <realloc>
 800137a:	4602      	mov	r2, r0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
		if(layer->y_pred_2==NULL){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <OL_increaseYpredDim+0x70>
			layer->OL_ERROR = REALLOC_Y_PRED_2;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2210      	movs	r2, #16
 800138c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <OL_resetInfo>:




/* Resets the values that are stored in the struct as 'info parameters'  */
void OL_resetInfo(OL_LAYER_STRUCT * layer){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

	layer->prediction_correct = 0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	layer->new_class = 0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	layer->vowel_guess = 'Q';		// Q is a letter that is not in the dataset, is considered the NULL option
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2251      	movs	r2, #81	; 0x51
 80013b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <OL_lettToSoft>:


/* Transforms a letter in an array of 0 and 1. This is used for computing the error committed
 * from the moel since the last layer is a softmax.  */
void OL_lettToSoft(OL_LAYER_STRUCT * layer, char *lett){
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]

	// Check in the label array letter by letter, if the letter is the same put a 1 in the correct position
	for(int i=0; i<layer->WIDTH; i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	e01c      	b.n	800140e <OL_lettToSoft+0x4a>
		if(lett[0] == layer->label[i]){
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6959      	ldr	r1, [r3, #20]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	440b      	add	r3, r1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d108      	bne.n	80013f8 <OL_lettToSoft+0x34>
			layer->y_true[i] = 1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e007      	b.n	8001408 <OL_lettToSoft+0x44>
		}else{
			layer->y_true[i] = 0;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbdd      	blt.n	80013d4 <OL_lettToSoft+0x10>
		}
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <OL_feedForward>:


/* Performs the feed forward operation. It's just a product of matrices  and a sum with an array  */
void OL_feedForward(OL_LAYER_STRUCT * layer, float * weights, float * input, float * bias, float * y_pred){
 8001426:	b480      	push	{r7}
 8001428:	b08b      	sub	sp, #44	; 0x2c
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	603b      	str	r3, [r7, #0]

	int h = layer->HEIGHT;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	61bb      	str	r3, [r7, #24]
	int w = layer->WIDTH;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	617b      	str	r3, [r7, #20]

	// Reset the prediction
	for(int i=0; i<layer->WIDTH; i++){
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
 8001444:	e009      	b.n	800145a <OL_feedForward+0x34>
		y_pred[i]=0;
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800144c:	4413      	add	r3, r2
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	3301      	adds	r3, #1
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001460:	429a      	cmp	r2, r3
 8001462:	dbf0      	blt.n	8001446 <OL_feedForward+0x20>
	}

	// Perform the feed forward
	for(int i=0; i<w; i++){
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
 8001468:	e041      	b.n	80014ee <OL_feedForward+0xc8>
		for(int j=0; j< h; j++){
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e023      	b.n	80014b8 <OL_feedForward+0x92>
			y_pred[i] += weights[h*i+j]*input[j];
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001476:	4413      	add	r3, r2
 8001478:	ed93 7a00 	vldr	s14, [r3]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6a3a      	ldr	r2, [r7, #32]
 8001480:	fb02 f203 	mul.w	r2, r2, r3
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	4413      	add	r3, r2
 800148e:	edd3 6a00 	vldr	s13, [r3]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014a8:	4413      	add	r3, r2
 80014aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ae:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j< h; j++){
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbd7      	blt.n	8001470 <OL_feedForward+0x4a>
		}
		y_pred[i] += bias[i];
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014c6:	4413      	add	r3, r2
 80014c8:	ed93 7a00 	vldr	s14, [r3]
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014de:	4413      	add	r3, r2
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e4:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<w; i++){
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	3301      	adds	r3, #1
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dbb9      	blt.n	800146a <OL_feedForward+0x44>
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	372c      	adds	r7, #44	; 0x2c
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <OL_softmax>:


/*Takes a array in input and computes the softmax operation on that array  */
void OL_softmax(OL_LAYER_STRUCT * layer, float * y_pred){
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]

	// Softmax function taken from web

	int size = layer->WIDTH;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	613b      	str	r3, [r7, #16]
    float m, sum, constant;

	  if(((layer->counter-1) % 10 == 0) && (layer->counter >= 100)){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	1e59      	subs	r1, r3, #1
 800151a:	4b58      	ldr	r3, [pc, #352]	; (800167c <OL_softmax+0x178>)
 800151c:	fb83 2301 	smull	r2, r3, r3, r1
 8001520:	109a      	asrs	r2, r3, #2
 8001522:	17cb      	asrs	r3, r1, #31
 8001524:	1ad2      	subs	r2, r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	1aca      	subs	r2, r1, r3
 8001530:	2a00      	cmp	r2, #0
 8001532:	d106      	bne.n	8001542 <OL_softmax+0x3e>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b63      	cmp	r3, #99	; 0x63
 800153a:	dd02      	ble.n	8001542 <OL_softmax+0x3e>
		  layer->batch_size = 8;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2208      	movs	r2, #8
 8001540:	809a      	strh	r2, [r3, #4]
	  }

    m = y_pred[0];
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i =0; i<size; i++){
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	e015      	b.n	800157a <OL_softmax+0x76>
    	if(m<y_pred[i]){
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	4413      	add	r3, r2
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800155e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	d505      	bpl.n	8001574 <OL_softmax+0x70>
    		m = y_pred[i];
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	4413      	add	r3, r2
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i =0; i<size; i++){
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	3301      	adds	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	429a      	cmp	r2, r3
 8001580:	dbe5      	blt.n	800154e <OL_softmax+0x4a>
    	}
    }

    sum = 0;
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
    for (int i=0; i<size; i++){
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
 800158c:	e029      	b.n	80015e2 <OL_softmax+0xde>
    	sum += exp(y_pred[i] - m);
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	4413      	add	r3, r2
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800159e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a2:	ee17 0a90 	vmov	r0, s15
 80015a6:	f7fe ffd7 	bl	8000558 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	ec43 2b10 	vmov	d0, r2, r3
 80015b2:	f008 fdf5 	bl	800a1a0 <exp>
 80015b6:	ec55 4b10 	vmov	r4, r5, d0
 80015ba:	6a38      	ldr	r0, [r7, #32]
 80015bc:	f7fe ffcc 	bl	8000558 <__aeabi_f2d>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f7fe fe68 	bl	800029c <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff faf0 	bl	8000bb8 <__aeabi_d2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	623b      	str	r3, [r7, #32]
    for (int i=0; i<size; i++){
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	3301      	adds	r3, #1
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbd1      	blt.n	800158e <OL_softmax+0x8a>
    }

    constant = m + log(sum);
 80015ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015ec:	f7fe ffb4 	bl	8000558 <__aeabi_f2d>
 80015f0:	4604      	mov	r4, r0
 80015f2:	460d      	mov	r5, r1
 80015f4:	6a38      	ldr	r0, [r7, #32]
 80015f6:	f7fe ffaf 	bl	8000558 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	ec43 2b10 	vmov	d0, r2, r3
 8001602:	f008 fe1d 	bl	800a240 <log>
 8001606:	ec53 2b10 	vmov	r2, r3, d0
 800160a:	4620      	mov	r0, r4
 800160c:	4629      	mov	r1, r5
 800160e:	f7fe fe45 	bl	800029c <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff facd 	bl	8000bb8 <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
 8001620:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<size; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e020      	b.n	800166a <OL_softmax+0x166>
    	y_pred[i] = exp(y_pred[i] - constant);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	4413      	add	r3, r2
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	edd7 7a03 	vldr	s15, [r7, #12]
 8001638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163c:	ee17 0a90 	vmov	r0, s15
 8001640:	f7fe ff8a 	bl	8000558 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f008 fda8 	bl	800a1a0 <exp>
 8001650:	ec51 0b10 	vmov	r0, r1, d0
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	18d4      	adds	r4, r2, r3
 800165c:	f7ff faac 	bl	8000bb8 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	6023      	str	r3, [r4, #0]
    for(int i=0; i<size; i++){
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	429a      	cmp	r2, r3
 8001670:	dbda      	blt.n	8001628 <OL_softmax+0x124>
    }
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001672:	bf00      	nop
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bdb0      	pop	{r4, r5, r7, pc}
 800167c:	66666667 	.word	0x66666667

08001680 <OL_checkNewClass>:




/* Check if the letter just received is already known. If not increase dimensions of the layer.  */
void OL_checkNewClass(OL_LAYER_STRUCT * layer, char *letter){
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]

	int found = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<layer->WIDTH; i++){
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	e00d      	b.n	80016b0 <OL_checkNewClass+0x30>
		if(letter[0] == layer->label[i]){
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6959      	ldr	r1, [r3, #20]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	440b      	add	r3, r1
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d101      	bne.n	80016aa <OL_checkNewClass+0x2a>
			found = 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<layer->WIDTH; i++){
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	3301      	adds	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbec      	blt.n	8001694 <OL_checkNewClass+0x14>
		}
	}

	// If the letter has not been found
	if(found==0){
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d11a      	bne.n	80016f6 <OL_checkNewClass+0x76>
		// Update info
		layer->new_class = 1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		layer->WIDTH = layer->WIDTH+1;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60da      	str	r2, [r3, #12]
		// Update dimensions
		OL_increaseLabel(layer, letter[0]);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fdf8 	bl	80012ce <OL_increaseLabel>
		OL_increaseBiasDim(layer);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fd7e 	bl	80011e0 <OL_increaseBiasDim>
		OL_increaseYpredDim(layer);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fe1b 	bl	8001320 <OL_increaseYpredDim>
		OL_increaseYtrueDim(layer);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fdd3 	bl	8001296 <OL_increaseYtrueDim>
		OL_increaseWeightDim(layer);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fcf7 	bl	80010e4 <OL_increaseWeightDim>
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <OL_compareLabels>:



/* Compare the prediction and the true label. If the max values of both arrays are in the
 * same positition in the array the prediction is correct.  */
void OL_compareLabels(OL_LAYER_STRUCT * layer){
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]

	uint8_t max_pred = 0;	// Used for saving the maximum value
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
	uint8_t max_true = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	73bb      	strb	r3, [r7, #14]
	uint8_t max_j_pred;		// Used for saving the position where the max value is
	uint8_t max_j_true;

	// Find max of both prediction and true label
	for(int j=0; j<layer->WIDTH; j++){
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	e04a      	b.n	80017aa <OL_compareLabels+0xac>
		if(max_true < layer->y_true[j]){
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d50e      	bpl.n	8001754 <OL_compareLabels+0x56>
			max_j_true = j;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	733b      	strb	r3, [r7, #12]
			max_true = layer->y_true[j];
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174c:	edc7 7a00 	vstr	s15, [r7]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	73bb      	strb	r3, [r7, #14]
		}
		if(max_pred < layer->y_pred[j]){
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1a      	ldr	r2, [r3, #32]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d516      	bpl.n	80017a4 <OL_compareLabels+0xa6>
			max_j_pred = j;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	737b      	strb	r3, [r7, #13]
			max_pred = layer->y_pred[j];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1a      	ldr	r2, [r3, #32]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178c:	edc7 7a00 	vstr	s15, [r7]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	73fb      	strb	r3, [r7, #15]
			layer->vowel_guess = layer->label[j];
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4413      	add	r3, r2
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for(int j=0; j<layer->WIDTH; j++){
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbaf      	blt.n	8001714 <OL_compareLabels+0x16>
		}
	}

	// If the maximum values are in different position of the array -> prediction is WRONG
	if(max_j_true != max_j_pred){
 80017b4:	7b3a      	ldrb	r2, [r7, #12]
 80017b6:	7b7b      	ldrb	r3, [r7, #13]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d004      	beq.n	80017c6 <OL_compareLabels+0xc8>
		layer->prediction_correct = 1;				// wrong
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017c4:	e003      	b.n	80017ce <OL_compareLabels+0xd0>
	}else{
		layer->prediction_correct = 2;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}

	// Used from the CWR algorithm
	if(layer->ALGORITHM == MODE_CWR){
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d10b      	bne.n	80017ee <OL_compareLabels+0xf0>
		layer->found_lett[max_j_true] += 1;		// Update the found_lett array
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017da:	7b3b      	ldrb	r3, [r7, #12]
 80017dc:	4413      	add	r3, r2
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	440b      	add	r3, r1
 80017e8:	3201      	adds	r2, #1
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <OL_train>:
// #############################################


/* This function is the most important part of the TinyOL script. Inside here an IF decides which algorithm
 * to apply, thus changing the update of the weights.  */
void OL_train(OL_LAYER_STRUCT * layer, float * input, char *letter){
 80017fa:	b5b0      	push	{r4, r5, r7, lr}
 80017fc:	b0ae      	sub	sp, #184	; 0xb8
 80017fe:	af02      	add	r7, sp, #8
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]

	// Values in common between all algorithms
	int w = layer->WIDTH;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	657b      	str	r3, [r7, #84]	; 0x54
	int h = layer->HEIGHT;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	653b      	str	r3, [r7, #80]	; 0x50
	layer->vowel_guess = 0;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42


	// ***************************************************************
	//     ***** OL ALGORITHM      |      ***** OL_V2 ALGORITHM
	if(layer->ALGORITHM == MODE_OL || layer->ALGORITHM == MODE_OL_V2){
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <OL_train+0x32>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001826:	2b01      	cmp	r3, #1
 8001828:	f040 80cd 	bne.w	80019c6 <OL_train+0x1cc>
 800182c:	466b      	mov	r3, sp
 800182e:	461d      	mov	r5, r3

		float cost[w];
 8001830:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8001832:	1e63      	subs	r3, r4, #1
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	4623      	mov	r3, r4
 8001838:	4618      	mov	r0, r3
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	014b      	lsls	r3, r1, #5
 8001848:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800184c:	0142      	lsls	r2, r0, #5
 800184e:	4623      	mov	r3, r4
 8001850:	4618      	mov	r0, r3
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	014b      	lsls	r3, r1, #5
 8001860:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001864:	0142      	lsls	r2, r0, #5
 8001866:	4623      	mov	r3, r4
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	3307      	adds	r3, #7
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	ebad 0d03 	sub.w	sp, sp, r3
 8001874:	ab02      	add	r3, sp, #8
 8001876:	3303      	adds	r3, #3
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	617b      	str	r3, [r7, #20]

		// Inference with current weights
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6999      	ldr	r1, [r3, #24]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	4613      	mov	r3, r2
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff fdc8 	bl	8001426 <OL_feedForward>
		for(int k=0; k<8; k++){
			sendPreSoftmaxUART(layer, k, k*4, msgPreSoftmax);
		}
#endif

		OL_softmax(layer, layer->y_pred);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4619      	mov	r1, r3
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff fe31 	bl	8001504 <OL_softmax>

		int j_start = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	65bb      	str	r3, [r7, #88]	; 0x58
		// If algorithms is OL_V2, don't update the vowels
		if(layer->ALGORITHM == MODE_OL_V2){
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <OL_train+0xb8>
			j_start = 5;
 80018ae:	2305      	movs	r3, #5
 80018b0:	65bb      	str	r3, [r7, #88]	; 0x58
		}

		for(int j=j_start; j<w; j++){
 80018b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018b6:	e077      	b.n	80019a8 <OL_train+0x1ae>
			cost[j] = layer->y_pred[j]-layer->y_true[j];			    // Compute the cost
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	ed93 7a00 	vldr	s14, [r3]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	edc3 7a00 	vstr	s15, [r3]
			if (cost[j]==0) continue;									// If nothing to update skip loop
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	d052      	beq.n	80019a0 <OL_train+0x1a6>

			for(int i=0; i<h; i++){
 80018fa:	2300      	movs	r3, #0
 80018fc:	663b      	str	r3, [r7, #96]	; 0x60
 80018fe:	e02f      	b.n	8001960 <OL_train+0x166>
				layer->weights[j*h+i] -= cost[j]*input[i]*layer->l_rate;	// Update the weights
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001906:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001908:	fb01 f103 	mul.w	r1, r1, r3
 800190c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800190e:	440b      	add	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	ed93 7a00 	vldr	s14, [r3]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	edd3 6a00 	vldr	s13, [r3]
 8001924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	4413      	add	r3, r2
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001944:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001946:	fb01 f103 	mul.w	r1, r1, r3
 800194a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800194c:	440b      	add	r3, r1
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001956:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 800195a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800195c:	3301      	adds	r3, #1
 800195e:	663b      	str	r3, [r7, #96]	; 0x60
 8001960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001964:	429a      	cmp	r2, r3
 8001966:	dbcb      	blt.n	8001900 <OL_train+0x106>
			}
			layer->biases[j] -= cost[j]*layer->l_rate;					// Update the biases
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	69da      	ldr	r2, [r3, #28]
 800196c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	ed93 7a00 	vldr	s14, [r3]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	edd3 6a00 	vldr	s13, [r3]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	edc3 7a00 	vstr	s15, [r3]
 800199e:	e000      	b.n	80019a2 <OL_train+0x1a8>
			if (cost[j]==0) continue;									// If nothing to update skip loop
 80019a0:	bf00      	nop
		for(int j=j_start; j<w; j++){
 80019a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a4:	3301      	adds	r3, #1
 80019a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ac:	429a      	cmp	r2, r3
 80019ae:	db83      	blt.n	80018b8 <OL_train+0xbe>
		}

		OL_compareLabels(layer);										// Check if prediction is correct
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff fea4 	bl	80016fe <OL_compareLabels>

		layer->counter +=1;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	46ad      	mov	sp, r5
	if(layer->ALGORITHM == MODE_OL || layer->ALGORITHM == MODE_OL_V2){
 80019c2:	f000 be8c 	b.w	80026de <OL_train+0xee4>
		OL_updateRAMcounter(layer);
#endif

	// ***************************************************************
	//     ***** OL ALGORITHM BATCH            |      ***** OL_V2 ALGORITHM BATCH
	}else if(layer->ALGORITHM == MODE_OL_batch || layer->ALGORITHM == MODE_OL_V2_batch){
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d004      	beq.n	80019d8 <OL_train+0x1de>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	f040 815c 	bne.w	8001c90 <OL_train+0x496>
 80019d8:	466b      	mov	r3, sp
 80019da:	461d      	mov	r5, r3

		float cost[w];
 80019dc:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80019de:	1e63      	subs	r3, r4, #1
 80019e0:	623b      	str	r3, [r7, #32]
 80019e2:	4623      	mov	r3, r4
 80019e4:	4618      	mov	r0, r3
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	014b      	lsls	r3, r1, #5
 80019f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019f8:	0142      	lsls	r2, r0, #5
 80019fa:	4623      	mov	r3, r4
 80019fc:	4618      	mov	r0, r3
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	014b      	lsls	r3, r1, #5
 8001a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a10:	0142      	lsls	r2, r0, #5
 8001a12:	4623      	mov	r3, r4
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	3307      	adds	r3, #7
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	ebad 0d03 	sub.w	sp, sp, r3
 8001a20:	ab02      	add	r3, sp, #8
 8001a22:	3303      	adds	r3, #3
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	61fb      	str	r3, [r7, #28]

		// Inference with current weights
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6999      	ldr	r1, [r3, #24]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7ff fcf2 	bl	8001426 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4619      	mov	r1, r3
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f7ff fd5b 	bl	8001504 <OL_softmax>

		int j_start = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	667b      	str	r3, [r7, #100]	; 0x64
		// If algorithms is OL_V2, don't update the vowels
		if(layer->ALGORITHM == MODE_OL_V2_batch){
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d101      	bne.n	8001a5e <OL_train+0x264>
			j_start = 5;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	667b      	str	r3, [r7, #100]	; 0x64
		}

		for(int j=j_start; j<w; j++){
 8001a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a62:	e06d      	b.n	8001b40 <OL_train+0x346>
			cost[j] = layer->y_pred[j]-layer->y_true[j];			// Compute the cost
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a1a      	ldr	r2, [r3, #32]
 8001a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	d048      	beq.n	8001b38 <OL_train+0x33e>

			for(int i=0; i<h; i++){
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001aaa:	e02a      	b.n	8001b02 <OL_train+0x308>
				layer->weights_2[j*h+i] += cost[j]*input[i];	// Update weights
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ab2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ab4:	fb01 f103 	mul.w	r1, r1, r3
 8001ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aba:	440b      	add	r3, r1
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	ed93 7a00 	vldr	s14, [r3]
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	edd3 6a00 	vldr	s13, [r3]
 8001ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ae6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ae8:	fb01 f103 	mul.w	r1, r1, r3
 8001aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aee:	440b      	add	r3, r1
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8001afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001afe:	3301      	adds	r3, #1
 8001b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbd0      	blt.n	8001aac <OL_train+0x2b2>
			}
			layer->biases_2[j] += cost[j];					// Update biases
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	ed93 7a00 	vldr	s14, [r3]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b32:	edc3 7a00 	vstr	s15, [r3]
 8001b36:	e000      	b.n	8001b3a <OL_train+0x340>
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001b38:	bf00      	nop
		for(int j=j_start; j<w; j++){
 8001b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b44:	429a      	cmp	r2, r3
 8001b46:	db8d      	blt.n	8001a64 <OL_train+0x26a>
		}

		OL_compareLabels(layer);					// Check if prediction is correct or not
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff fdd8 	bl	80016fe <OL_compareLabels>

		// When reached the end of a batch
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size)==0) ){
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8094 	beq.w	8001c80 <OL_train+0x486>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	8892      	ldrh	r2, [r2, #4]
 8001b60:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b64:	fb02 f201 	mul.w	r2, r2, r1
 8001b68:	1a9b      	subs	r3, r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 8088 	bne.w	8001c80 <OL_train+0x486>

			int j_start = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	673b      	str	r3, [r7, #112]	; 0x70

			// If algorithms is OL_V2, don't update the vowels
			if(layer->ALGORITHM == MODE_OL_V2_batch){
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d101      	bne.n	8001b80 <OL_train+0x386>
				j_start=5;
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	673b      	str	r3, [r7, #112]	; 0x70
			}

			for(int j=j_start; j<w; j++){
 8001b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b82:	677b      	str	r3, [r7, #116]	; 0x74
 8001b84:	e078      	b.n	8001c78 <OL_train+0x47e>
				for(int i=0; i<h; i++){
 8001b86:	2300      	movs	r3, #0
 8001b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b8a:	e042      	b.n	8001c12 <OL_train+0x418>
					layer->weights[j*h+i] -= layer->weights_2[j*h+i]/layer->batch_size*layer->l_rate;	// Update weights
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b94:	fb01 f103 	mul.w	r1, r1, r3
 8001b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b9a:	440b      	add	r3, r1
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	ed93 7a00 	vldr	s14, [r3]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001baa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001bac:	fb01 f103 	mul.w	r1, r1, r3
 8001bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bb2:	440b      	add	r3, r1
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	ed93 6a00 	vldr	s12, [r3]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	889b      	ldrh	r3, [r3, #4]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001bde:	fb01 f103 	mul.w	r1, r1, r3
 8001be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001be4:	440b      	add	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bee:	edc3 7a00 	vstr	s15, [r3]
					layer->weights_2[j*h+i] = 0;														// Reset
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001bfa:	fb01 f103 	mul.w	r1, r1, r3
 8001bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c00:	440b      	add	r3, r1
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8001c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c0e:	3301      	adds	r3, #1
 8001c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbb8      	blt.n	8001b8c <OL_train+0x392>
				}
				layer->biases[j] -= layer->biases_2[j]/layer->batch_size*layer->l_rate;				// Update biases
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	ed93 7a00 	vldr	s14, [r3]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	ed93 6a00 	vldr	s12, [r3]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	889b      	ldrh	r3, [r3, #4]
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
				layer->biases_2[j] = 0;																	// Reset
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
			for(int j=j_start; j<w; j++){
 8001c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c74:	3301      	adds	r3, #1
 8001c76:	677b      	str	r3, [r7, #116]	; 0x74
 8001c78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	db82      	blt.n	8001b86 <OL_train+0x38c>
			}
		}

		layer->counter +=1;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	46ad      	mov	sp, r5
	}else if(layer->ALGORITHM == MODE_OL_batch || layer->ALGORITHM == MODE_OL_V2_batch){
 8001c8c:	f000 bd27 	b.w	80026de <OL_train+0xee4>
		OL_updateRAMcounter(layer);
#endif

	// *************************************
	// ***** CWR ALGORITHM
	}else if (layer->ALGORITHM == MODE_CWR){
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	f040 820e 	bne.w	80020b6 <OL_train+0x8bc>
 8001c9a:	466b      	mov	r3, sp
 8001c9c:	461d      	mov	r5, r3

		float cost[w];
 8001c9e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8001ca0:	1e63      	subs	r3, r4, #1
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	014b      	lsls	r3, r1, #5
 8001cb6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cba:	0142      	lsls	r2, r0, #5
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f04f 0100 	mov.w	r1, #0
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	014b      	lsls	r3, r1, #5
 8001cce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cd2:	0142      	lsls	r2, r0, #5
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	3307      	adds	r3, #7
 8001cda:	08db      	lsrs	r3, r3, #3
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	ebad 0d03 	sub.w	sp, sp, r3
 8001ce2:	ab02      	add	r3, sp, #8
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24

		// Prediction
		if(layer->counter < layer->end_training){
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	da12      	bge.n	8001d1e <OL_train+0x524>
			OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	4613      	mov	r3, r2
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff fb8b 	bl	8001426 <OL_feedForward>
			OL_softmax(layer, layer->y_pred);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4619      	mov	r1, r3
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff fbf4 	bl	8001504 <OL_softmax>
 8001d1c:	e023      	b.n	8001d66 <OL_train+0x56c>
		}else{
			// Prediction of training weights
			OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff fb78 	bl	8001426 <OL_feedForward>
			OL_softmax(layer, layer->y_pred_2);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff fbe1 	bl	8001504 <OL_softmax>
			// Prediction of consolidated weights
			OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6999      	ldr	r1, [r3, #24]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fb66 	bl	8001426 <OL_feedForward>
			OL_softmax(layer, layer->y_pred);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7ff fbcf 	bl	8001504 <OL_softmax>
		}


		for(int j=0; j<w; j++){
 8001d66:	2300      	movs	r3, #0
 8001d68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d6a:	e09b      	b.n	8001ea4 <OL_train+0x6aa>

			if(layer->counter < layer->end_training){
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	429a      	cmp	r2, r3
 8001d76:	da16      	bge.n	8001da6 <OL_train+0x5ac>
				cost[j] = layer->y_pred[j]-layer->y_true[j];		  	// Cost computation
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	ed93 7a00 	vldr	s14, [r3]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	edc3 7a00 	vstr	s15, [r3]
 8001da4:	e015      	b.n	8001dd2 <OL_train+0x5d8>
			}else{
				cost[j] = layer->y_pred_2[j]-layer->y_true[j];		  	// Cost computation
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001daa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	edc3 7a00 	vstr	s15, [r3]
			}

			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	d059      	beq.n	8001e9c <OL_train+0x6a2>

			// Back propagation on TW
			for(int i=0; i<h; i++){
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dee:	e034      	b.n	8001e5a <OL_train+0x660>
				layer->weights_2[j*h+i] -= cost[j]*input[i]*layer->l_rate;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001df4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001df6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001df8:	fb01 f103 	mul.w	r1, r1, r3
 8001dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e00:	440b      	add	r3, r1
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	ed93 7a00 	vldr	s14, [r3]
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	edd3 6a00 	vldr	s13, [r3]
 8001e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	4413      	add	r3, r2
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e3a:	fb01 f103 	mul.w	r1, r1, r3
 8001e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e42:	440b      	add	r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8001e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e54:	3301      	adds	r3, #1
 8001e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbc5      	blt.n	8001df0 <OL_train+0x5f6>
			}
			layer->biases_2[j] -= cost[j]*layer->l_rate;  // Back propagation on TB
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	edd3 6a00 	vldr	s13, [r3]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e96:	edc3 7a00 	vstr	s15, [r3]
 8001e9a:	e000      	b.n	8001e9e <OL_train+0x6a4>
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001e9c:	bf00      	nop
		for(int j=0; j<w; j++){
 8001e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ea4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f6ff af5f 	blt.w	8001d6c <OL_train+0x572>
		}

		OL_compareLabels(layer);			// Check if prediction is correct or not
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff fc25 	bl	80016fe <OL_compareLabels>


		// When batch ends
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size) == 0) ){
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80f5 	beq.w	80020a8 <OL_train+0x8ae>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	8892      	ldrh	r2, [r2, #4]
 8001ec6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001eca:	fb02 f201 	mul.w	r2, r2, r1
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 80e9 	bne.w	80020a8 <OL_train+0x8ae>

			// Update CW
			for(int j=0; j<w; j++){
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001edc:	e093      	b.n	8002006 <OL_train+0x80c>
				if(layer->found_lett[j] != 0){
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8086 	beq.w	8001ffc <OL_train+0x802>
					for(int i=0; i<h; i++){
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ef6:	e049      	b.n	8001f8c <OL_train+0x792>
						layer->weights[j*h+i] = ((layer->weights[j*h+i]*layer->found_lett[j])+layer->weights_2[j*h+i])/(layer->found_lett[j]+1);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f02:	fb01 f103 	mul.w	r1, r1, r3
 8001f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f0a:	440b      	add	r3, r1
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	ed93 7a00 	vldr	s14, [r3]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	ee07 3a90 	vmov	s15, r3
 8001f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f36:	fb01 f103 	mul.w	r1, r1, r3
 8001f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f3e:	440b      	add	r3, r1
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f54:	4413      	add	r3, r2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f6c:	fb01 f103 	mul.w	r1, r1, r3
 8001f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f74:	440b      	add	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7e:	edc3 7a00 	vstr	s15, [r3]
					for(int i=0; i<h; i++){
 8001f82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f86:	3301      	adds	r3, #1
 8001f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f92:	429a      	cmp	r2, r3
 8001f94:	dbb0      	blt.n	8001ef8 <OL_train+0x6fe>
					}
					layer->biases[j] = ((layer->biases[j]*layer->found_lett[j])+layer->biases_2[j])/(layer->found_lett[j]+1);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fda:	4413      	add	r3, r2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
			for(int j=0; j<w; j++){
 8001ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002000:	3301      	adds	r3, #1
 8002002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002006:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800200a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200c:	429a      	cmp	r2, r3
 800200e:	f6ff af66 	blt.w	8001ede <OL_train+0x6e4>
				}
			}

			// Reset TW
			for(int j=0; j<w; j++){
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002018:	e041      	b.n	800209e <OL_train+0x8a4>
				for(int i=0; i<h; i++){
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002020:	e01e      	b.n	8002060 <OL_train+0x866>
					layer->weights_2[j*h+i] = layer->weights[j*h+i];	// reset
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800202a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800202c:	fb01 f103 	mul.w	r1, r1, r3
 8002030:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002034:	440b      	add	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	441a      	add	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800203e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002042:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002044:	fb00 f003 	mul.w	r0, r0, r3
 8002048:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800204c:	4403      	add	r3, r0
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8002056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205a:	3301      	adds	r3, #1
 800205c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002060:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	429a      	cmp	r2, r3
 8002068:	dbdb      	blt.n	8002022 <OL_train+0x828>
				}
				layer->biases_2[j] = layer->biases[j];					// reset
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	601a      	str	r2, [r3, #0]
				layer->found_lett[j] = 0;								// reset
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800208e:	4413      	add	r3, r2
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<w; j++){
 8002094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002098:	3301      	adds	r3, #1
 800209a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800209e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80020a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbb8      	blt.n	800201a <OL_train+0x820>
			}
		}

		layer->counter +=1;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	46ad      	mov	sp, r5
#if READ_FREE_RAM==1
		OL_updateRAMcounter(layer);
#endif

	}
};
 80020b4:	e313      	b.n	80026de <OL_train+0xee4>
	}else if(layer->ALGORITHM == MODE_LWF){
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	f040 8157 	bne.w	800236e <OL_train+0xb74>
 80020c0:	466b      	mov	r3, sp
 80020c2:	461d      	mov	r5, r3
		float cost_norm[w];
 80020c4:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80020c6:	1e63      	subs	r3, r4, #1
 80020c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ca:	4623      	mov	r3, r4
 80020cc:	4618      	mov	r0, r3
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	014b      	lsls	r3, r1, #5
 80020dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020e0:	0142      	lsls	r2, r0, #5
 80020e2:	4623      	mov	r3, r4
 80020e4:	4618      	mov	r0, r3
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	014b      	lsls	r3, r1, #5
 80020f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020f8:	0142      	lsls	r2, r0, #5
 80020fa:	4623      	mov	r3, r4
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3307      	adds	r3, #7
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	ebad 0d03 	sub.w	sp, sp, r3
 8002108:	ab02      	add	r3, sp, #8
 800210a:	3303      	adds	r3, #3
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	63bb      	str	r3, [r7, #56]	; 0x38
		float cost_LWF[w];
 8002112:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8002114:	1e63      	subs	r3, r4, #1
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
 8002118:	4623      	mov	r3, r4
 800211a:	4618      	mov	r0, r3
 800211c:	f04f 0100 	mov.w	r1, #0
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	014b      	lsls	r3, r1, #5
 800212a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800212e:	0142      	lsls	r2, r0, #5
 8002130:	4623      	mov	r3, r4
 8002132:	4618      	mov	r0, r3
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	014b      	lsls	r3, r1, #5
 8002142:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002146:	0142      	lsls	r2, r0, #5
 8002148:	4623      	mov	r3, r4
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	3307      	adds	r3, #7
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	ebad 0d03 	sub.w	sp, sp, r3
 8002156:	ab02      	add	r3, sp, #8
 8002158:	3303      	adds	r3, #3
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
		float lambda=0;
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6999      	ldr	r1, [r3, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7ff f954 	bl	8001426 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4619      	mov	r1, r3
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7ff f9bd 	bl	8001504 <OL_softmax>
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff f942 	bl	8001426 <OL_feedForward>
		OL_softmax(layer, layer->y_pred_2);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	4619      	mov	r1, r3
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff f9ab 	bl	8001504 <OL_softmax>
		lambda = 100/(100+layer->counter);					// Update lambda
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	3364      	adds	r3, #100	; 0x64
 80021b4:	2264      	movs	r2, #100	; 0x64
 80021b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		for(int j=0; j<w; j++){
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021cc:	e0bf      	b.n	800234e <OL_train+0xb54>
			cost_norm[j] = layer->y_pred[j]-layer->y_true[j];	// Compute normal cost
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a1a      	ldr	r2, [r3, #32]
 80021d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	ed93 7a00 	vldr	s14, [r3]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	edc3 7a00 	vstr	s15, [r3]
			cost_LWF[j]  = layer->y_pred[j]-layer->y_pred_2[j];	// Compute LWF cost
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a1a      	ldr	r2, [r3, #32]
 8002204:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	ed93 7a00 	vldr	s14, [r3]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002214:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002226:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002238:	e04c      	b.n	80022d4 <OL_train+0xada>
				layer->weights[j*h+i] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate*input[i];	// Update weights
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002244:	fb01 f103 	mul.w	r1, r1, r3
 8002248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800224c:	440b      	add	r3, r1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	ed93 7a00 	vldr	s14, [r3]
 8002256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002258:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	edd3 6a00 	vldr	s13, [r3]
 8002264:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002268:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800226c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002270:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002276:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	ed93 6a00 	vldr	s12, [r3]
 8002282:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002286:	ee66 7a27 	vmul.f32	s15, s12, s15
 800228a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4413      	add	r3, r2
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80022b4:	fb01 f103 	mul.w	r1, r1, r3
 80022b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022bc:	440b      	add	r3, r1
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c6:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 80022ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022ce:	3301      	adds	r3, #1
 80022d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022da:	429a      	cmp	r2, r3
 80022dc:	dbad      	blt.n	800223a <OL_train+0xa40>
			layer->biases[j] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate;					// Update biases
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	ed93 7a00 	vldr	s14, [r3]
 80022ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	edd3 6a00 	vldr	s13, [r3]
 80022fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002300:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002304:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002308:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800230c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	ed93 6a00 	vldr	s12, [r3]
 800231a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800231e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002322:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002340:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 8002344:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002348:	3301      	adds	r3, #1
 800234a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800234e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002354:	429a      	cmp	r2, r3
 8002356:	f6ff af3a 	blt.w	80021ce <OL_train+0x9d4>
		OL_compareLabels(layer);																	// Check if prediction is correct or not
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff f9cf 	bl	80016fe <OL_compareLabels>
		layer->counter +=1;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	46ad      	mov	sp, r5
};
 800236c:	e1b7      	b.n	80026de <OL_train+0xee4>
	}else if(layer->ALGORITHM == MODE_LWF_batch){
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2b06      	cmp	r3, #6
 8002374:	f040 81b3 	bne.w	80026de <OL_train+0xee4>
 8002378:	466b      	mov	r3, sp
 800237a:	461d      	mov	r5, r3
		float cost_norm[w];
 800237c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800237e:	1e63      	subs	r3, r4, #1
 8002380:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002382:	4623      	mov	r3, r4
 8002384:	4618      	mov	r0, r3
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	014b      	lsls	r3, r1, #5
 8002394:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002398:	0142      	lsls	r2, r0, #5
 800239a:	4623      	mov	r3, r4
 800239c:	4618      	mov	r0, r3
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	014b      	lsls	r3, r1, #5
 80023ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023b0:	0142      	lsls	r2, r0, #5
 80023b2:	4623      	mov	r3, r4
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	3307      	adds	r3, #7
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	ebad 0d03 	sub.w	sp, sp, r3
 80023c0:	ab02      	add	r3, sp, #8
 80023c2:	3303      	adds	r3, #3
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	64bb      	str	r3, [r7, #72]	; 0x48
		float cost_LWF[w];
 80023ca:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80023cc:	1e63      	subs	r3, r4, #1
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
 80023d0:	4623      	mov	r3, r4
 80023d2:	4618      	mov	r0, r3
 80023d4:	f04f 0100 	mov.w	r1, #0
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	014b      	lsls	r3, r1, #5
 80023e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023e6:	0142      	lsls	r2, r0, #5
 80023e8:	4623      	mov	r3, r4
 80023ea:	4618      	mov	r0, r3
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	014b      	lsls	r3, r1, #5
 80023fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023fe:	0142      	lsls	r2, r0, #5
 8002400:	4623      	mov	r3, r4
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	3307      	adds	r3, #7
 8002406:	08db      	lsrs	r3, r3, #3
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	ebad 0d03 	sub.w	sp, sp, r3
 800240e:	ab02      	add	r3, sp, #8
 8002410:	3303      	adds	r3, #3
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	643b      	str	r3, [r7, #64]	; 0x40
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6999      	ldr	r1, [r3, #24]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7fe fffb 	bl	8001426 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4619      	mov	r1, r3
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff f864 	bl	8001504 <OL_softmax>
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7fe ffe9 	bl	8001426 <OL_feedForward>
		OL_softmax(layer, layer->y_pred_2);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	4619      	mov	r1, r3
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff f852 	bl	8001504 <OL_softmax>
        if(layer->counter<layer->batch_size){
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	8892      	ldrh	r2, [r2, #4]
 8002468:	4293      	cmp	r3, r2
 800246a:	da04      	bge.n	8002476 <OL_train+0xc7c>
        	lambda = 1;
 800246c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002474:	e00c      	b.n	8002490 <OL_train+0xc96>
        	lambda = layer->batch_size/layer->counter;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	889b      	ldrh	r3, [r3, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	fb92 f3f3 	sdiv	r3, r2, r3
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		for(int j=0; j<w; j++){
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002496:	e0bf      	b.n	8002618 <OL_train+0xe1e>
			cost_norm[j] = layer->y_pred[j]-layer->y_true[j];	// compute normal cost
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	edc3 7a00 	vstr	s15, [r3]
			cost_LWF[j]  = layer->y_pred[j]-layer->y_pred_2[j];	// compute LWF cost
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	ed93 7a00 	vldr	s14, [r3]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002502:	e04c      	b.n	800259e <OL_train+0xda4>
				layer->weights[j*h+i] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate*input[i];	// Update weights
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800250c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800250e:	fb01 f103 	mul.w	r1, r1, r3
 8002512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002516:	440b      	add	r3, r1
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	ed93 7a00 	vldr	s14, [r3]
 8002520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	edd3 6a00 	vldr	s13, [r3]
 800252e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002532:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002536:	ee76 7a67 	vsub.f32	s15, s12, s15
 800253a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800253e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002540:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	ed93 6a00 	vldr	s12, [r3]
 800254c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002550:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002554:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	4413      	add	r3, r2
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800257c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800257e:	fb01 f103 	mul.w	r1, r1, r3
 8002582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002586:	440b      	add	r3, r1
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002590:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8002594:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002598:	3301      	adds	r3, #1
 800259a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800259e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80025a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025a4:	429a      	cmp	r2, r3
 80025a6:	dbad      	blt.n	8002504 <OL_train+0xd0a>
			layer->biases[j] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate;					// Update biases
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	edd3 6a00 	vldr	s13, [r3]
 80025c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80025ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80025ce:	ee76 7a67 	vsub.f32	s15, s12, s15
 80025d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	ed93 6a00 	vldr	s12, [r3]
 80025e4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80025e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260a:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 800260e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002612:	3301      	adds	r3, #1
 8002614:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002618:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800261c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261e:	429a      	cmp	r2, r3
 8002620:	f6ff af3a 	blt.w	8002498 <OL_train+0xc9e>
		OL_compareLabels(layer);																	// Check if prediction is correct or not
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7ff f86a 	bl	80016fe <OL_compareLabels>
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size) == 0) ){
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d04e      	beq.n	80026d0 <OL_train+0xed6>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	8892      	ldrh	r2, [r2, #4]
 800263a:	fb93 f1f2 	sdiv	r1, r3, r2
 800263e:	fb02 f201 	mul.w	r2, r2, r1
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d143      	bne.n	80026d0 <OL_train+0xed6>
			for(int j=0; j<w; j++){
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800264e:	e03a      	b.n	80026c6 <OL_train+0xecc>
				for(int i=0; i<h; i++){
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002656:	e01e      	b.n	8002696 <OL_train+0xe9c>
					layer->weights_2[j*h+i] = layer->weights[j*h+i];	// Reset
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002660:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002662:	fb01 f103 	mul.w	r1, r1, r3
 8002666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800266a:	440b      	add	r3, r1
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	441a      	add	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002678:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800267a:	fb00 f003 	mul.w	r0, r0, r3
 800267e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002682:	4403      	add	r3, r0
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 800268c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002690:	3301      	adds	r3, #1
 8002692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002696:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800269a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269c:	429a      	cmp	r2, r3
 800269e:	dbdb      	blt.n	8002658 <OL_train+0xe5e>
				layer->biases_2[j] = layer->biases[j];					// Reset
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	441a      	add	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	601a      	str	r2, [r3, #0]
			for(int j=0; j<w; j++){
 80026bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026c0:	3301      	adds	r3, #1
 80026c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dbbf      	blt.n	8002650 <OL_train+0xe56>
		layer->counter +=1;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	46ad      	mov	sp, r5
};
 80026dc:	e7ff      	b.n	80026de <OL_train+0xee4>
 80026de:	bf00      	nop
 80026e0:	37b0      	adds	r7, #176	; 0xb0
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080026e8 <OL_updateRAMcounter>:





void OL_updateRAMcounter(OL_LAYER_STRUCT * layer){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

	if( (layer->counter>100) && (layer->counter%5==0) ){
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b64      	cmp	r3, #100	; 0x64
 80026f6:	dd18      	ble.n	800272a <OL_updateRAMcounter+0x42>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6899      	ldr	r1, [r3, #8]
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <OL_updateRAMcounter+0x4c>)
 80026fe:	fb83 2301 	smull	r2, r3, r3, r1
 8002702:	105a      	asrs	r2, r3, #1
 8002704:	17cb      	asrs	r3, r1, #31
 8002706:	1ad2      	subs	r2, r2, r3
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	1aca      	subs	r2, r1, r3
 8002710:	2a00      	cmp	r2, #0
 8002712:	d10a      	bne.n	800272a <OL_updateRAMcounter+0x42>
		int tmp = FreeMem();
 8002714:	f000 f810 	bl	8002738 <FreeMem>
 8002718:	60f8      	str	r0, [r7, #12]
		if(tmp < layer->freeRAMbytes){
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	da02      	bge.n	800272a <OL_updateRAMcounter+0x42>
			layer->freeRAMbytes = tmp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	66666667 	.word	0x66666667

08002738 <FreeMem>:
    struct elem *next;
    char dummy[FREEMEM_CELL-2];
};


int FreeMem(void) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
    int counter;
    struct elem *head, *current, *nextone;
    current = head = (struct elem*) malloc(sizeof(struct elem));
 800273e:	2068      	movs	r0, #104	; 0x68
 8002740:	f004 fdf2 	bl	8007328 <malloc>
 8002744:	4603      	mov	r3, r0
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60bb      	str	r3, [r7, #8]
    if (head == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <FreeMem+0x1e>
        return 0;      /*No memory available.*/
 8002752:	2300      	movs	r3, #0
 8002754:	e022      	b.n	800279c <FreeMem+0x64>
    counter = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
   // __disable_irq();
    do {
        counter++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3301      	adds	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
        current->next = (struct elem*) malloc(sizeof(struct elem));
 8002760:	2068      	movs	r0, #104	; 0x68
 8002762:	f004 fde1 	bl	8007328 <malloc>
 8002766:	4603      	mov	r3, r0
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	601a      	str	r2, [r3, #0]
        current = current->next;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60bb      	str	r3, [r7, #8]
    } while (current != NULL);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ef      	bne.n	800275a <FreeMem+0x22>
    /* Now counter holds the number of type elem
       structures we were able to allocate. We
       must free them all before returning. */
    current = head;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60bb      	str	r3, [r7, #8]
    do {
        nextone = current->next;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	603b      	str	r3, [r7, #0]
        free(current);
 8002784:	68b8      	ldr	r0, [r7, #8]
 8002786:	f004 fdd7 	bl	8007338 <free>
        current = nextone;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	60bb      	str	r3, [r7, #8]
    } while (nextone != NULL);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f4      	bne.n	800277e <FreeMem+0x46>
   // __enable_irq();

    return counter*FREEMEM_CELL;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2264      	movs	r2, #100	; 0x64
 8002798:	fb02 f303 	mul.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_CRC_Init+0x20>)
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <MX_CRC_Init+0x24>)
 80027ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_CRC_Init+0x20>)
 80027b0:	f000 fef7 	bl	80035a2 <HAL_CRC_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80027ba:	f000 fb95 	bl	8002ee8 <Error_Handler>
  }

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20001ff4 	.word	0x20001ff4
 80027c8:	40023000 	.word	0x40023000

080027cc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <HAL_CRC_MspInit+0x3c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10d      	bne.n	80027fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_CRC_MspInit+0x40>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_CRC_MspInit+0x40>)
 80027e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <HAL_CRC_MspInit+0x40>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023000 	.word	0x40023000
 800280c:	40023800 	.word	0x40023800

08002810 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b45      	ldr	r3, [pc, #276]	; (8002940 <MX_GPIO_Init+0x130>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a44      	ldr	r2, [pc, #272]	; (8002940 <MX_GPIO_Init+0x130>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b42      	ldr	r3, [pc, #264]	; (8002940 <MX_GPIO_Init+0x130>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <MX_GPIO_Init+0x130>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a3d      	ldr	r2, [pc, #244]	; (8002940 <MX_GPIO_Init+0x130>)
 800284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <MX_GPIO_Init+0x130>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <MX_GPIO_Init+0x130>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a36      	ldr	r2, [pc, #216]	; (8002940 <MX_GPIO_Init+0x130>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b34      	ldr	r3, [pc, #208]	; (8002940 <MX_GPIO_Init+0x130>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <MX_GPIO_Init+0x130>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <MX_GPIO_Init+0x130>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <MX_GPIO_Init+0x130>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002896:	2200      	movs	r2, #0
 8002898:	2120      	movs	r1, #32
 800289a:	482a      	ldr	r0, [pc, #168]	; (8002944 <MX_GPIO_Init+0x134>)
 800289c:	f001 f844 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80028a0:	2200      	movs	r2, #0
 80028a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028a6:	4828      	ldr	r0, [pc, #160]	; (8002948 <MX_GPIO_Init+0x138>)
 80028a8:	f001 f83e 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <MX_GPIO_Init+0x13c>)
 80028b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4619      	mov	r1, r3
 80028c0:	4823      	ldr	r0, [pc, #140]	; (8002950 <MX_GPIO_Init+0x140>)
 80028c2:	f000 fead 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028c6:	2320      	movs	r3, #32
 80028c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	4619      	mov	r1, r3
 80028dc:	4819      	ldr	r0, [pc, #100]	; (8002944 <MX_GPIO_Init+0x134>)
 80028de:	f000 fe9f 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e8:	2301      	movs	r3, #1
 80028ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4619      	mov	r1, r3
 80028fa:	4813      	ldr	r0, [pc, #76]	; (8002948 <MX_GPIO_Init+0x138>)
 80028fc:	f000 fe90 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002900:	2320      	movs	r3, #32
 8002902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <MX_GPIO_Init+0x144>)
 8002906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4619      	mov	r1, r3
 8002912:	480d      	ldr	r0, [pc, #52]	; (8002948 <MX_GPIO_Init+0x138>)
 8002914:	f000 fe84 	bl	8003620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	2100      	movs	r1, #0
 800291c:	2017      	movs	r0, #23
 800291e:	f000 fe0a 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002922:	2017      	movs	r0, #23
 8002924:	f000 fe23 	bl	800356e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	2028      	movs	r0, #40	; 0x28
 800292e:	f000 fe02 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002932:	2028      	movs	r0, #40	; 0x28
 8002934:	f000 fe1b 	bl	800356e <HAL_NVIC_EnableIRQ>

}
 8002938:	bf00      	nop
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	10210000 	.word	0x10210000
 8002950:	40020800 	.word	0x40020800
 8002954:	10110000 	.word	0x10110000

08002958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b09a      	sub	sp, #104	; 0x68
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800295e:	f000 fc79 	bl	8003254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002962:	f000 f9c1 	bl	8002ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002966:	f7ff ff53 	bl	8002810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800296a:	f000 fbcf 	bl	800310c <MX_USART2_UART_Init>
  MX_CRC_Init();
 800296e:	f7ff ff19 	bl	80027a4 <MX_CRC_Init>
  MX_TIM10_Init();
 8002972:	f000 fb81 	bl	8003078 <MX_TIM10_Init>
  MX_X_CUBE_AI_Init();
 8002976:	f002 ff39 	bl	80057ec <MX_X_CUBE_AI_Init>
  //	MODE_CWR
  //    MODE_LWF
  //	MODE_OL_batch
  //	MODE_OL_V2_batch
  //	MODE_LWF_batch
  OL_layer.ALGORITHM = MODE_CWR;
 800297a:	2302      	movs	r3, #2
 800297c:	643b      	str	r3, [r7, #64]	; 0x40

  OL_layer.batch_size = 16;
 800297e:	2310      	movs	r3, #16
 8002980:	813b      	strh	r3, [r7, #8]

  // Define the learn rate depending on the algorithm
  if(OL_layer.ALGORITHM       == MODE_OL){
 8002982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <main+0x36>
	  OL_layer.l_rate = 0.001;
 8002988:	4b6d      	ldr	r3, [pc, #436]	; (8002b40 <main+0x1e8>)
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	e025      	b.n	80029da <main+0x82>
  }else if(OL_layer.ALGORITHM == MODE_OL_batch){
 800298e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002990:	2b04      	cmp	r3, #4
 8002992:	d102      	bne.n	800299a <main+0x42>
	  OL_layer.l_rate = 0.0001;
 8002994:	4b6b      	ldr	r3, [pc, #428]	; (8002b44 <main+0x1ec>)
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	e01f      	b.n	80029da <main+0x82>
  }else if(OL_layer.ALGORITHM == MODE_OL_V2){
 800299a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299c:	2b01      	cmp	r3, #1
 800299e:	d102      	bne.n	80029a6 <main+0x4e>
	  OL_layer.l_rate = 0.001;
 80029a0:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <main+0x1e8>)
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	e019      	b.n	80029da <main+0x82>
  }else if(OL_layer.ALGORITHM == MODE_OL_V2_batch){
 80029a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d102      	bne.n	80029b2 <main+0x5a>
	  OL_layer.l_rate = 0.001;
 80029ac:	4b64      	ldr	r3, [pc, #400]	; (8002b40 <main+0x1e8>)
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	e013      	b.n	80029da <main+0x82>
  }else if(OL_layer.ALGORITHM == MODE_CWR){
 80029b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d105      	bne.n	80029c4 <main+0x6c>
	  OL_layer.l_rate = 0.0005;
 80029b8:	4b63      	ldr	r3, [pc, #396]	; (8002b48 <main+0x1f0>)
 80029ba:	607b      	str	r3, [r7, #4]
	  OL_layer.end_training = 3476;
 80029bc:	f640 5394 	movw	r3, #3476	; 0xd94
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
 80029c2:	e00a      	b.n	80029da <main+0x82>
  }else if(OL_layer.ALGORITHM == MODE_LWF){
 80029c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d102      	bne.n	80029d0 <main+0x78>
	  OL_layer.l_rate = 0.001;
 80029ca:	4b5d      	ldr	r3, [pc, #372]	; (8002b40 <main+0x1e8>)
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	e004      	b.n	80029da <main+0x82>
  }else if(OL_layer.ALGORITHM == MODE_LWF_batch){
 80029d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d101      	bne.n	80029da <main+0x82>
	  OL_layer.l_rate = 0.0007;
 80029d6:	4b5d      	ldr	r3, [pc, #372]	; (8002b4c <main+0x1f4>)
 80029d8:	607b      	str	r3, [r7, #4]
  }


  // Initialize all the other values in the struct
  // The values below should always stay the same
  OL_layer.WIDTH    	= 5;
 80029da:	2305      	movs	r3, #5
 80029dc:	613b      	str	r3, [r7, #16]
  OL_layer.HEIGHT   	= AI_NETWORK_OUT_1_SIZE;
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	617b      	str	r3, [r7, #20]
  OL_layer.counter  	= 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  OL_layer.OL_ERROR 	= 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  OL_layer.freeRAMbytes = 100000000;
 80029ec:	4b58      	ldr	r3, [pc, #352]	; (8002b50 <main+0x1f8>)
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c


  // Allocate all the necessary matrices/arrays
  OL_allocateMemory(&OL_layer);
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe faac 	bl	8000f50 <OL_allocateMemory>


  // Fill up labels
  OL_layer.label[0] = 'A';
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2241      	movs	r2, #65	; 0x41
 80029fc:	701a      	strb	r2, [r3, #0]
  OL_layer.label[1] = 'E';
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	3301      	adds	r3, #1
 8002a02:	2245      	movs	r2, #69	; 0x45
 8002a04:	701a      	strb	r2, [r3, #0]
  OL_layer.label[2] = 'I';
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	2249      	movs	r2, #73	; 0x49
 8002a0c:	701a      	strb	r2, [r3, #0]
  OL_layer.label[3] = 'O';
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	3303      	adds	r3, #3
 8002a12:	224f      	movs	r2, #79	; 0x4f
 8002a14:	701a      	strb	r2, [r3, #0]
  OL_layer.label[4] = 'U';
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2255      	movs	r2, #85	; 0x55
 8002a1c:	701a      	strb	r2, [r3, #0]

  // Fill up the weight matrix with the weights from the Keras model
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002a1e:	2300      	movs	r3, #0
 8002a20:	667b      	str	r3, [r7, #100]	; 0x64
 8002a22:	e00c      	b.n	8002a3e <main+0xe6>
  	  OL_layer.weights[i] = saved_weights[i];
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4949      	ldr	r1, [pc, #292]	; (8002b54 <main+0x1fc>)
 8002a2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a30:	0092      	lsls	r2, r2, #2
 8002a32:	440a      	add	r2, r1
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	667b      	str	r3, [r7, #100]	; 0x64
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dbeb      	blt.n	8002a24 <main+0xcc>
  }
  // Fill up the biases array with the weights from the Keras model
  for(int i=0; i<OL_layer.WIDTH; i++){
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a50:	e00c      	b.n	8002a6c <main+0x114>
	  OL_layer.biases[i] = saved_biases[i];
 8002a52:	6a3a      	ldr	r2, [r7, #32]
 8002a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	493f      	ldr	r1, [pc, #252]	; (8002b58 <main+0x200>)
 8002a5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	440a      	add	r2, r1
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH; i++){
 8002a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a68:	3301      	adds	r3, #1
 8002a6a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbee      	blt.n	8002a52 <main+0xfa>
  }

  // Fill up weights2 and biases2 only in the case of LWF
  if(OL_layer.ALGORITHM == MODE_LWF || OL_layer.ALGORITHM == MODE_LWF_batch){
 8002a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d002      	beq.n	8002a80 <main+0x128>
 8002a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d12a      	bne.n	8002ad6 <main+0x17e>
	  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002a80:	2300      	movs	r3, #0
 8002a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a84:	e00c      	b.n	8002aa0 <main+0x148>
	  	  OL_layer.weights_2[i] = saved_weights[i];
 8002a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4931      	ldr	r1, [pc, #196]	; (8002b54 <main+0x1fc>)
 8002a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	440a      	add	r2, r1
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	dbeb      	blt.n	8002a86 <main+0x12e>
	  }
	  for(int i=0; i<OL_layer.WIDTH; i++){
 8002aae:	2300      	movs	r3, #0
 8002ab0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ab2:	e00c      	b.n	8002ace <main+0x176>
		  OL_layer.biases_2[i] = saved_biases[i];
 8002ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	4926      	ldr	r1, [pc, #152]	; (8002b58 <main+0x200>)
 8002abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ac0:	0092      	lsls	r2, r2, #2
 8002ac2:	440a      	add	r2, r1
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<OL_layer.WIDTH; i++){
 8002ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aca:	3301      	adds	r3, #1
 8002acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	dbee      	blt.n	8002ab4 <main+0x15c>
	  }
  }

  HAL_TIM_Base_Start_IT(&htim10);	// Start the timer for counting inference time (1 timer increment = 10 micro sec)
 8002ad6:	4821      	ldr	r0, [pc, #132]	; (8002b5c <main+0x204>)
 8002ad8:	f001 fc09 	bl	80042ee <HAL_TIM_Base_Start_IT>
  while (1)
  {


	  // Enable_inference flag is raised at the end of the data communication between pc-STM (see interrupt callbacks at the end of the main)
	  if(enable_inference == 1){
 8002adc:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <main+0x208>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 80d0 	bne.w	8002c86 <main+0x32e>

		  // *************************
		  //                   DATA IN
		  // *************************
		  // Reset the info carried from the OL struct
		  OL_resetInfo(&OL_layer);
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fc55 	bl	8001398 <OL_resetInfo>

		  // Decode the message received from the UART communication
		  // The message sent from the PC is specifically encoded in a way that allows
		  // to recognize negative values easily -> explained in the readme file
		  uint8_t tmp;
		  for(int k=0; k<600; k++){
 8002aee:	2300      	movs	r3, #0
 8002af0:	657b      	str	r3, [r7, #84]	; 0x54
 8002af2:	e053      	b.n	8002b9c <main+0x244>
			  tmp = msgRxData[k*2];
 8002af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <main+0x20c>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			  if((tmp&128) == 128){
 8002b00:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	da31      	bge.n	8002b6c <main+0x214>
				  tmp = tmp & 127;
 8002b08:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b10:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				  in_data[k] = -((tmp << 8) | (msgRxData[(k*2)+1]));
 8002b14:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b1c:	0052      	lsls	r2, r2, #1
 8002b1e:	3201      	adds	r2, #1
 8002b20:	4910      	ldr	r1, [pc, #64]	; (8002b64 <main+0x20c>)
 8002b22:	5c8a      	ldrb	r2, [r1, r2]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	425b      	negs	r3, r3
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b30:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <main+0x210>)
 8002b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	edc3 7a00 	vstr	s15, [r3]
 8002b3c:	e02b      	b.n	8002b96 <main+0x23e>
 8002b3e:	bf00      	nop
 8002b40:	3a83126f 	.word	0x3a83126f
 8002b44:	38d1b717 	.word	0x38d1b717
 8002b48:	3a03126f 	.word	0x3a03126f
 8002b4c:	3a378034 	.word	0x3a378034
 8002b50:	05f5e100 	.word	0x05f5e100
 8002b54:	20000000 	.word	0x20000000
 8002b58:	20000a00 	.word	0x20000a00
 8002b5c:	20002b60 	.word	0x20002b60
 8002b60:	200010c0 	.word	0x200010c0
 8002b64:	20001940 	.word	0x20001940
 8002b68:	20002000 	.word	0x20002000
			  }else{
				  in_data[k] = (msgRxData[(k*2)] << 8) | (msgRxData[(k*2)+1]);
 8002b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4a4f      	ldr	r2, [pc, #316]	; (8002cb0 <main+0x358>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b78:	0052      	lsls	r2, r2, #1
 8002b7a:	3201      	adds	r2, #1
 8002b7c:	494c      	ldr	r1, [pc, #304]	; (8002cb0 <main+0x358>)
 8002b7e:	5c8a      	ldrb	r2, [r1, r2]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8a:	4a4a      	ldr	r2, [pc, #296]	; (8002cb4 <main+0x35c>)
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	edc3 7a00 	vstr	s15, [r3]
		  for(int k=0; k<600; k++){
 8002b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b98:	3301      	adds	r3, #1
 8002b9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002ba2:	dba7      	blt.n	8002af4 <main+0x19c>


		  // *************************
		  //                 INFERENCE
		  // *************************
		  timer_counter = 0;										// Reset time
 8002ba4:	4b44      	ldr	r3, [pc, #272]	; (8002cb8 <main+0x360>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

		  ai_run_v2(&in_data, &out_data);							// Perform inference from frozen model
 8002baa:	4944      	ldr	r1, [pc, #272]	; (8002cbc <main+0x364>)
 8002bac:	4841      	ldr	r0, [pc, #260]	; (8002cb4 <main+0x35c>)
 8002bae:	f002 fddf 	bl	8005770 <ai_run_v2>

		  inferenceTime_frozen = timer_counter;						// Measure frozen time
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <main+0x360>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a42      	ldr	r2, [pc, #264]	; (8002cc0 <main+0x368>)
 8002bb8:	6013      	str	r3, [r2, #0]

		  OL_checkNewClass(&OL_layer, letter);						// Check if the letter is known, otherwise increase dimensions of weight and biases
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	4941      	ldr	r1, [pc, #260]	; (8002cc4 <main+0x36c>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fd5e 	bl	8001680 <OL_checkNewClass>
		  OL_lettToSoft(&OL_layer, letter);							// Transform the letter char into a hot one encoded softmax array
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	493f      	ldr	r1, [pc, #252]	; (8002cc4 <main+0x36c>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fbfb 	bl	80013c4 <OL_lettToSoft>

		  OL_train(&OL_layer, out_data, letter);					// Perform training on last captured sample
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	4a3c      	ldr	r2, [pc, #240]	; (8002cc4 <main+0x36c>)
 8002bd2:	493a      	ldr	r1, [pc, #232]	; (8002cbc <main+0x364>)
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe fe10 	bl	80017fa <OL_train>

		  inferenceTime_OL = timer_counter-inferenceTime_frozen;	// Measure OL time
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <main+0x360>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <main+0x368>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	4a38      	ldr	r2, [pc, #224]	; (8002cc8 <main+0x370>)
 8002be6:	6013      	str	r3, [r2, #0]

		  // *************************
		  //                  DATA OUT
		  // *************************
		  // Send info data to pc
		  msgInfo[0] = OL_layer.ALGORITHM;									// int
 8002be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <main+0x374>)
 8002bee:	701a      	strb	r2, [r3, #0]
		  msgInfo[1] = OL_layer.counter;									// int
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <main+0x374>)
 8002bf6:	705a      	strb	r2, [r3, #1]
		  msgInfo[2] = (uint8_t)(inferenceTime_frozen & LOW_BYTE); 	 		// int - low byte
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <main+0x368>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <main+0x374>)
 8002c00:	709a      	strb	r2, [r3, #2]
		  msgInfo[3] = (uint8_t)((inferenceTime_frozen>>8) & LOW_BYTE); 	// int - high byte
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <main+0x368>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <main+0x374>)
 8002c0c:	70da      	strb	r2, [r3, #3]
		  msgInfo[4] = (uint8_t)(inferenceTime_OL & LOW_BYTE);				// int - low byte
 8002c0e:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <main+0x370>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <main+0x374>)
 8002c16:	711a      	strb	r2, [r3, #4]
		  msgInfo[5] = (uint8_t)((inferenceTime_OL>>8) & LOW_BYTE);			// int - high byte
 8002c18:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <main+0x370>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <main+0x374>)
 8002c22:	715a      	strb	r2, [r3, #5]
		  msgInfo[6] = OL_layer.new_class;									// 0 or 1
 8002c24:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <main+0x374>)
 8002c2a:	719a      	strb	r2, [r3, #6]
		  msgInfo[7] = OL_layer.prediction_correct;							// 0, 1, 2
 8002c2c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <main+0x374>)
 8002c32:	71da      	strb	r2, [r3, #7]
		  msgInfo[8] = OL_layer.WIDTH;										// int
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <main+0x374>)
 8002c3a:	721a      	strb	r2, [r3, #8]
		  msgInfo[9] = OL_layer.vowel_guess;								// char
 8002c3c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <main+0x374>)
 8002c42:	725a      	strb	r2, [r3, #9]

		  HAL_UART_Transmit(&huart2, (uint8_t*)msgInfo, INFO_LEN, 100);		// Send message
 8002c44:	2364      	movs	r3, #100	; 0x64
 8002c46:	220a      	movs	r2, #10
 8002c48:	4920      	ldr	r1, [pc, #128]	; (8002ccc <main+0x374>)
 8002c4a:	4821      	ldr	r0, [pc, #132]	; (8002cd0 <main+0x378>)
 8002c4c:	f001 fd85 	bl	800475a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgSoftmax, 8*4, 100);
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgPreSoftmax, 8*4, 100);
		  }
#endif

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// LED toggle
 8002c50:	2120      	movs	r1, #32
 8002c52:	4820      	ldr	r0, [pc, #128]	; (8002cd4 <main+0x37c>)
 8002c54:	f000 fe81 	bl	800395a <HAL_GPIO_TogglePin>
		  enable_inference = 0;						// Reset inference flag
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <main+0x380>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

		  if(((OL_layer.counter-1) % 10 == 0) && (OL_layer.counter >= 100)){
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1e59      	subs	r1, r3, #1
 8002c62:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <main+0x384>)
 8002c64:	fb83 2301 	smull	r2, r3, r3, r1
 8002c68:	109a      	asrs	r2, r3, #2
 8002c6a:	17cb      	asrs	r3, r1, #31
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	1aca      	subs	r2, r1, r3
 8002c78:	2a00      	cmp	r2, #0
 8002c7a:	d104      	bne.n	8002c86 <main+0x32e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b63      	cmp	r3, #99	; 0x63
 8002c80:	dd01      	ble.n	8002c86 <main+0x32e>
			  OL_layer.batch_size = 8;
 8002c82:	2308      	movs	r3, #8
 8002c84:	813b      	strh	r3, [r7, #8]
		  }
	  }

	  HAL_Delay(5); 			// Helps the code to not get stuck
 8002c86:	2005      	movs	r0, #5
 8002c88:	f000 fb56 	bl	8003338 <HAL_Delay>

	  // If the blue button has been pressed and the cycle inference cycle is finished enable again the interrupt for the infinite cycle
	  if(BlueButton == 1 && enable_inference == 0){
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <main+0x388>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	f47f af23 	bne.w	8002adc <main+0x184>
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <main+0x380>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f47f af1e 	bne.w	8002adc <main+0x184>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	// Set high the value for interrupt for infinity cycle
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ca6:	480f      	ldr	r0, [pc, #60]	; (8002ce4 <main+0x38c>)
 8002ca8:	f000 fe3e 	bl	8003928 <HAL_GPIO_WritePin>
	  if(enable_inference == 1){
 8002cac:	e716      	b.n	8002adc <main+0x184>
 8002cae:	bf00      	nop
 8002cb0:	20001940 	.word	0x20001940
 8002cb4:	20002000 	.word	0x20002000
 8002cb8:	200010c8 	.word	0x200010c8
 8002cbc:	20002960 	.word	0x20002960
 8002cc0:	200010cc 	.word	0x200010cc
 8002cc4:	20001ffc 	.word	0x20001ffc
 8002cc8:	200010d0 	.word	0x200010d0
 8002ccc:	20001714 	.word	0x20001714
 8002cd0:	20002ba0 	.word	0x20002ba0
 8002cd4:	40020000 	.word	0x40020000
 8002cd8:	200010c0 	.word	0x200010c0
 8002cdc:	66666667 	.word	0x66666667
 8002ce0:	200010c4 	.word	0x200010c4
 8002ce4:	40020400 	.word	0x40020400

08002ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b094      	sub	sp, #80	; 0x50
 8002cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cee:	f107 0320 	add.w	r3, r7, #32
 8002cf2:	2230      	movs	r2, #48	; 0x30
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 fb34 	bl	8007364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <SystemClock_Config+0xd0>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <SystemClock_Config+0xd0>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <SystemClock_Config+0xd0>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <SystemClock_Config+0xd4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d34:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <SystemClock_Config+0xd4>)
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <SystemClock_Config+0xd4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d50:	2310      	movs	r3, #16
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d54:	2302      	movs	r3, #2
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002d64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d66:	2304      	movs	r3, #4
 8002d68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6e:	f107 0320 	add.w	r3, r7, #32
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fe24 	bl	80039c0 <HAL_RCC_OscConfig>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d7e:	f000 f8b3 	bl	8002ee8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d82:	230f      	movs	r3, #15
 8002d84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d86:	2302      	movs	r3, #2
 8002d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d98:	f107 030c 	add.w	r3, r7, #12
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 f87e 	bl	8003ea0 <HAL_RCC_ClockConfig>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002daa:	f000 f89d 	bl	8002ee8 <Error_Handler>
  }
}
 8002dae:	bf00      	nop
 8002db0:	3750      	adds	r7, #80	; 0x50
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000

08002dc0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



// INTERRUPTS
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]


	if(BlueButton == 0){ 		// Avoid double clicks
 8002dca:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d12d      	bne.n	8002e2e <HAL_GPIO_EXTI_Callback+0x6e>

		// When the blue button is pressed the first time it enables the STM to receive the first input message. Then
		// the STM automatically continues to recive messages from the PC.

		if(GPIO_Pin == B1_Pin){													// If interrupt is blue button
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd8:	d129      	bne.n	8002e2e <HAL_GPIO_EXTI_Callback+0x6e>

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);								// Toggle LED
 8002dda:	2120      	movs	r1, #32
 8002ddc:	482f      	ldr	r0, [pc, #188]	; (8002e9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8002dde:	f000 fdbc 	bl	800395a <HAL_GPIO_TogglePin>

			BlueButton = 1;														// Raise blue button flag
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]

			msgLen = sprintf(msgDebug, "OK");
 8002de8:	492d      	ldr	r1, [pc, #180]	; (8002ea0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002dea:	482e      	ldr	r0, [pc, #184]	; (8002ea4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002dec:	f005 f88c 	bl	8007f08 <siprintf>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002df4:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc message in order to sync, the pc is waiting a msg long 2
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	2364      	movs	r3, #100	; 0x64
 8002dfe:	4929      	ldr	r1, [pc, #164]	; (8002ea4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e00:	482a      	ldr	r0, [pc, #168]	; (8002eac <HAL_GPIO_EXTI_Callback+0xec>)
 8002e02:	f001 fcaa 	bl	800475a <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive the array data from the pc - array is long 600
 8002e06:	2364      	movs	r3, #100	; 0x64
 8002e08:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002e0c:	4928      	ldr	r1, [pc, #160]	; (8002eb0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002e0e:	4827      	ldr	r0, [pc, #156]	; (8002eac <HAL_GPIO_EXTI_Callback+0xec>)
 8002e10:	f001 fd3c 	bl	800488c <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);	// Receive the label char from the pc - label is long 1
 8002e14:	2364      	movs	r3, #100	; 0x64
 8002e16:	2201      	movs	r2, #1
 8002e18:	4926      	ldr	r1, [pc, #152]	; (8002eb4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002e1a:	4824      	ldr	r0, [pc, #144]	; (8002eac <HAL_GPIO_EXTI_Callback+0xec>)
 8002e1c:	f001 fd36 	bl	800488c <HAL_UART_Receive>

			letter[0] = msgRxLett[0];											// Store the received message in the label container
 8002e20:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002e26:	701a      	strb	r2, [r3, #0]

			enable_inference = 1;												// Raise the flag that enables the inference at the next cyle in the while
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_GPIO_EXTI_Callback+0xfc>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
	// to have a signal that notices when the STM finishes an inference.This is done by short cuircuiting 2 GPIOs. In
	// this case I use an output GPIO (B10) and an input interrupt GPIO (B5) for doing this. The output is raised high when
	// the inference in the while loop is finished, the other is an interrupt that is triggered when it reads this signal high.
	// Once the interrupt is triggered the code enters here and it syncs with the PC reading the message through he UART

	if(BlueButton == 1){	// If the blue button has been pressed once
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d12b      	bne.n	8002e8e <HAL_GPIO_EXTI_Callback+0xce>

		if(GPIO_Pin == GPIO_PIN_5){	// If the interrupt is the GPIO pin
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d128      	bne.n	8002e8e <HAL_GPIO_EXTI_Callback+0xce>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);				// Set low the GPIO pin that signals the end of a cycle
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e42:	481f      	ldr	r0, [pc, #124]	; (8002ec0 <HAL_GPIO_EXTI_Callback+0x100>)
 8002e44:	f000 fd70 	bl	8003928 <HAL_GPIO_WritePin>

			msgLen = sprintf(msgDebug, "OK");
 8002e48:	4915      	ldr	r1, [pc, #84]	; (8002ea0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002e4a:	4816      	ldr	r0, [pc, #88]	; (8002ea4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e4c:	f005 f85c 	bl	8007f08 <siprintf>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002e54:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc sync msg, the pc is waiting a msg long 2, no need to be exactly 'OK'
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	2364      	movs	r3, #100	; 0x64
 8002e5e:	4911      	ldr	r1, [pc, #68]	; (8002ea4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e60:	4812      	ldr	r0, [pc, #72]	; (8002eac <HAL_GPIO_EXTI_Callback+0xec>)
 8002e62:	f001 fc7a 	bl	800475a <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive the array data from the pc - array is long 600
 8002e66:	2364      	movs	r3, #100	; 0x64
 8002e68:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002e6c:	4910      	ldr	r1, [pc, #64]	; (8002eb0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002e6e:	480f      	ldr	r0, [pc, #60]	; (8002eac <HAL_GPIO_EXTI_Callback+0xec>)
 8002e70:	f001 fd0c 	bl	800488c <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);	// Receive the label char from the pc - label is long 1
 8002e74:	2364      	movs	r3, #100	; 0x64
 8002e76:	2201      	movs	r2, #1
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002e7a:	480c      	ldr	r0, [pc, #48]	; (8002eac <HAL_GPIO_EXTI_Callback+0xec>)
 8002e7c:	f001 fd06 	bl	800488c <HAL_UART_Receive>

			letter[0] = msgRxLett[0];											// Store the received message in the label container
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002e86:	701a      	strb	r2, [r3, #0]

			enable_inference = 1;												// Raise the flag that enables the inference at the next cyle in the while
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_GPIO_EXTI_Callback+0xfc>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200010c4 	.word	0x200010c4
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	0800aa20 	.word	0x0800aa20
 8002ea4:	20001df0 	.word	0x20001df0
 8002ea8:	20001e90 	.word	0x20001e90
 8002eac:	20002ba0 	.word	0x20002ba0
 8002eb0:	20001940 	.word	0x20001940
 8002eb4:	200015d0 	.word	0x200015d0
 8002eb8:	20001ffc 	.word	0x20001ffc
 8002ebc:	200010c0 	.word	0x200010c0
 8002ec0:	40020400 	.word	0x40020400

08002ec4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim){
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	timer_counter += 1;	// 10 micro sec has passed
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ed4:	6013      	str	r3, [r2, #0]



	// Use this if cycle just for debugging and see how much memory is used after 100 input samples
	//OL_updateFreeRAM();
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	200010c8 	.word	0x200010c8

08002ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eec:	b672      	cpsid	i
}
 8002eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ef0:	e7fe      	b.n	8002ef0 <Error_Handler+0x8>
	...

08002ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f32:	2007      	movs	r0, #7
 8002f34:	f000 faf4 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800

08002f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <NMI_Handler+0x4>

08002f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <HardFault_Handler+0x4>

08002f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <MemManage_Handler+0x4>

08002f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f5a:	e7fe      	b.n	8002f5a <BusFault_Handler+0x4>

08002f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f60:	e7fe      	b.n	8002f60 <UsageFault_Handler+0x4>

08002f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f90:	f000 f9b2 	bl	80032f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002f9c:	2020      	movs	r0, #32
 8002f9e:	f000 fcf7 	bl	8003990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002fae:	f001 f9c2 	bl	8004336 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20002b60 	.word	0x20002b60

08002fbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <USART2_IRQHandler+0x10>)
 8002fc2:	f001 fd09 	bl	80049d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20002ba0 	.word	0x20002ba0

08002fd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002fd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fd8:	f000 fcda 	bl	8003990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe8:	4a14      	ldr	r2, [pc, #80]	; (800303c <_sbrk+0x5c>)
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <_sbrk+0x60>)
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <_sbrk+0x64>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <_sbrk+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	d207      	bcs.n	8003020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003010:	f004 f960 	bl	80072d4 <__errno>
 8003014:	4603      	mov	r3, r0
 8003016:	220c      	movs	r2, #12
 8003018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	e009      	b.n	8003034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <_sbrk+0x64>)
 8003030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20018000 	.word	0x20018000
 8003040:	00001000 	.word	0x00001000
 8003044:	200010d4 	.word	0x200010d4
 8003048:	20002bf8 	.word	0x20002bf8

0800304c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <SystemInit+0x28>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	4a07      	ldr	r2, [pc, #28]	; (8003074 <SystemInit+0x28>)
 8003058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800305c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <SystemInit+0x28>)
 8003062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003066:	609a      	str	r2, [r3, #8]
#endif
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <MX_TIM10_Init+0x3c>)
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <MX_TIM10_Init+0x40>)
 8003080:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21-1;
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MX_TIM10_Init+0x3c>)
 8003084:	2214      	movs	r2, #20
 8003086:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <MX_TIM10_Init+0x3c>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 40-1;
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <MX_TIM10_Init+0x3c>)
 8003090:	2227      	movs	r2, #39	; 0x27
 8003092:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <MX_TIM10_Init+0x3c>)
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <MX_TIM10_Init+0x3c>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80030a0:	4804      	ldr	r0, [pc, #16]	; (80030b4 <MX_TIM10_Init+0x3c>)
 80030a2:	f001 f8f9 	bl	8004298 <HAL_TIM_Base_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80030ac:	f7ff ff1c 	bl	8002ee8 <Error_Handler>
  }

}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20002b60 	.word	0x20002b60
 80030b8:	40014400 	.word	0x40014400

080030bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <HAL_TIM_Base_MspInit+0x48>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d115      	bne.n	80030fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_TIM_Base_MspInit+0x4c>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <HAL_TIM_Base_MspInit+0x4c>)
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_TIM_Base_MspInit+0x4c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	2019      	movs	r0, #25
 80030f0:	f000 fa21 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80030f4:	2019      	movs	r0, #25
 80030f6:	f000 fa3a 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40014400 	.word	0x40014400
 8003108:	40023800 	.word	0x40023800

0800310c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <MX_USART2_UART_Init+0x50>)
 8003114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800311c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003132:	220c      	movs	r2, #12
 8003134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003144:	f001 fabc 	bl	80046c0 <HAL_UART_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800314e:	f7ff fecb 	bl	8002ee8 <Error_Handler>
  }

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20002ba0 	.word	0x20002ba0
 800315c:	40004400 	.word	0x40004400

08003160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_UART_MspInit+0x94>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d133      	bne.n	80031ea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <HAL_UART_MspInit+0x98>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <HAL_UART_MspInit+0x98>)
 800318c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_UART_MspInit+0x98>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_UART_MspInit+0x98>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <HAL_UART_MspInit+0x98>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_UART_MspInit+0x98>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031ba:	230c      	movs	r3, #12
 80031bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ca:	2307      	movs	r3, #7
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	4619      	mov	r1, r3
 80031d4:	4809      	ldr	r0, [pc, #36]	; (80031fc <HAL_UART_MspInit+0x9c>)
 80031d6:	f000 fa23 	bl	8003620 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	2026      	movs	r0, #38	; 0x26
 80031e0:	f000 f9a9 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031e4:	2026      	movs	r0, #38	; 0x26
 80031e6:	f000 f9c2 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80031ea:	bf00      	nop
 80031ec:	3728      	adds	r7, #40	; 0x28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40004400 	.word	0x40004400
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40020000 	.word	0x40020000

08003200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003238 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003204:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003206:	e003      	b.n	8003210 <LoopCopyDataInit>

08003208 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800320a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800320c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800320e:	3104      	adds	r1, #4

08003210 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003210:	480b      	ldr	r0, [pc, #44]	; (8003240 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003214:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003216:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003218:	d3f6      	bcc.n	8003208 <CopyDataInit>
  ldr  r2, =_sbss
 800321a:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800321c:	e002      	b.n	8003224 <LoopFillZerobss>

0800321e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800321e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003220:	f842 3b04 	str.w	r3, [r2], #4

08003224 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003226:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003228:	d3f9      	bcc.n	800321e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800322a:	f7ff ff0f 	bl	800304c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800322e:	f004 f857 	bl	80072e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003232:	f7ff fb91 	bl	8002958 <main>
  bx  lr    
 8003236:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003238:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800323c:	08066470 	.word	0x08066470
  ldr  r0, =_sdata
 8003240:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003244:	200010a4 	.word	0x200010a4
  ldr  r2, =_sbss
 8003248:	200010a4 	.word	0x200010a4
  ldr  r3, = _ebss
 800324c:	20002bf4 	.word	0x20002bf4

08003250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003250:	e7fe      	b.n	8003250 <ADC_IRQHandler>
	...

08003254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_Init+0x40>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <HAL_Init+0x40>)
 800325e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_Init+0x40>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_Init+0x40>)
 800326a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_Init+0x40>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_Init+0x40>)
 8003276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327c:	2003      	movs	r0, #3
 800327e:	f000 f94f 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003282:	2000      	movs	r0, #0
 8003284:	f000 f808 	bl	8003298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003288:	f7ff fe34 	bl	8002ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00

08003298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_InitTick+0x54>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_InitTick+0x58>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f967 	bl	800358a <HAL_SYSTICK_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00e      	b.n	80032e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b0f      	cmp	r3, #15
 80032ca:	d80a      	bhi.n	80032e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032cc:	2200      	movs	r2, #0
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	f000 f92f 	bl	8003536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d8:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <HAL_InitTick+0x5c>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e000      	b.n	80032e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000a14 	.word	0x20000a14
 80032f0:	20000a1c 	.word	0x20000a1c
 80032f4:	20000a18 	.word	0x20000a18

080032f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_IncTick+0x20>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_IncTick+0x24>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4413      	add	r3, r2
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <HAL_IncTick+0x24>)
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000a1c 	.word	0x20000a1c
 800331c:	20002be0 	.word	0x20002be0

08003320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return uwTick;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_GetTick+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20002be0 	.word	0x20002be0

08003338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003340:	f7ff ffee 	bl	8003320 <HAL_GetTick>
 8003344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d005      	beq.n	800335e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_Delay+0x44>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800335e:	bf00      	nop
 8003360:	f7ff ffde 	bl	8003320 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	429a      	cmp	r2, r3
 800336e:	d8f7      	bhi.n	8003360 <HAL_Delay+0x28>
  {
  }
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000a1c 	.word	0x20000a1c

08003380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800339c:	4013      	ands	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b2:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	60d3      	str	r3, [r2, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	f003 0307 	and.w	r3, r3, #7
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	db0b      	blt.n	800340e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4907      	ldr	r1, [pc, #28]	; (800341c <__NVIC_EnableIRQ+0x38>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2001      	movs	r0, #1
 8003406:	fa00 f202 	lsl.w	r2, r0, r2
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000e100 	.word	0xe000e100

08003420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	2b00      	cmp	r3, #0
 8003432:	db0a      	blt.n	800344a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	490c      	ldr	r1, [pc, #48]	; (800346c <__NVIC_SetPriority+0x4c>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	440b      	add	r3, r1
 8003444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003448:	e00a      	b.n	8003460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4908      	ldr	r1, [pc, #32]	; (8003470 <__NVIC_SetPriority+0x50>)
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	3b04      	subs	r3, #4
 8003458:	0112      	lsls	r2, r2, #4
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	440b      	add	r3, r1
 800345e:	761a      	strb	r2, [r3, #24]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000e100 	.word	0xe000e100
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f1c3 0307 	rsb	r3, r3, #7
 800348e:	2b04      	cmp	r3, #4
 8003490:	bf28      	it	cs
 8003492:	2304      	movcs	r3, #4
 8003494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3304      	adds	r3, #4
 800349a:	2b06      	cmp	r3, #6
 800349c:	d902      	bls.n	80034a4 <NVIC_EncodePriority+0x30>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3b03      	subs	r3, #3
 80034a2:	e000      	b.n	80034a6 <NVIC_EncodePriority+0x32>
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43da      	mvns	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	401a      	ands	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034bc:	f04f 31ff 	mov.w	r1, #4294967295
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43d9      	mvns	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	4313      	orrs	r3, r2
         );
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ec:	d301      	bcc.n	80034f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00f      	b.n	8003512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <SysTick_Config+0x40>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fa:	210f      	movs	r1, #15
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f7ff ff8e 	bl	8003420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <SysTick_Config+0x40>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <SysTick_Config+0x40>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff29 	bl	8003380 <__NVIC_SetPriorityGrouping>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003548:	f7ff ff3e 	bl	80033c8 <__NVIC_GetPriorityGrouping>
 800354c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff8e 	bl	8003474 <NVIC_EncodePriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff5d 	bl	8003420 <__NVIC_SetPriority>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff31 	bl	80033e4 <__NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffa2 	bl	80034dc <SysTick_Config>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e00e      	b.n	80035d2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	795b      	ldrb	r3, [r3, #5]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff f901 	bl	80027cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d004      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e00c      	b.n	8003612 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2205      	movs	r2, #5
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e159      	b.n	80038f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800363c:	2201      	movs	r2, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	f040 8148 	bne.w	80038ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d00b      	beq.n	800367a <HAL_GPIO_Init+0x5a>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d007      	beq.n	800367a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800366e:	2b11      	cmp	r3, #17
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b12      	cmp	r3, #18
 8003678:	d130      	bne.n	80036dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	2203      	movs	r2, #3
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b0:	2201      	movs	r2, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 0201 	and.w	r2, r3, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	2203      	movs	r2, #3
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0xfc>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b12      	cmp	r3, #18
 800371a:	d123      	bne.n	8003764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	08da      	lsrs	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3208      	adds	r2, #8
 8003724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	220f      	movs	r2, #15
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	08da      	lsrs	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3208      	adds	r2, #8
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0203 	and.w	r2, r3, #3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a2 	beq.w	80038ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	4b57      	ldr	r3, [pc, #348]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b54      	ldr	r3, [pc, #336]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c2:	4a52      	ldr	r2, [pc, #328]	; (800390c <HAL_GPIO_Init+0x2ec>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a49      	ldr	r2, [pc, #292]	; (8003910 <HAL_GPIO_Init+0x2f0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d019      	beq.n	8003822 <HAL_GPIO_Init+0x202>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a48      	ldr	r2, [pc, #288]	; (8003914 <HAL_GPIO_Init+0x2f4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_GPIO_Init+0x1fe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a47      	ldr	r2, [pc, #284]	; (8003918 <HAL_GPIO_Init+0x2f8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00d      	beq.n	800381a <HAL_GPIO_Init+0x1fa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a46      	ldr	r2, [pc, #280]	; (800391c <HAL_GPIO_Init+0x2fc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <HAL_GPIO_Init+0x1f6>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a45      	ldr	r2, [pc, #276]	; (8003920 <HAL_GPIO_Init+0x300>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_GPIO_Init+0x1f2>
 800380e:	2304      	movs	r3, #4
 8003810:	e008      	b.n	8003824 <HAL_GPIO_Init+0x204>
 8003812:	2307      	movs	r3, #7
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x204>
 8003816:	2303      	movs	r3, #3
 8003818:	e004      	b.n	8003824 <HAL_GPIO_Init+0x204>
 800381a:	2302      	movs	r3, #2
 800381c:	e002      	b.n	8003824 <HAL_GPIO_Init+0x204>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_GPIO_Init+0x204>
 8003822:	2300      	movs	r3, #0
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	f002 0203 	and.w	r2, r2, #3
 800382a:	0092      	lsls	r2, r2, #2
 800382c:	4093      	lsls	r3, r2
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003834:	4935      	ldr	r1, [pc, #212]	; (800390c <HAL_GPIO_Init+0x2ec>)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	3302      	adds	r3, #2
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003842:	4b38      	ldr	r3, [pc, #224]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003866:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_GPIO_Init+0x304>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ba:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <HAL_GPIO_Init+0x304>)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c0:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_GPIO_Init+0x304>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e4:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <HAL_GPIO_Init+0x304>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3301      	adds	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	f67f aea2 	bls.w	800363c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3724      	adds	r7, #36	; 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	40013800 	.word	0x40013800
 8003910:	40020000 	.word	0x40020000
 8003914:	40020400 	.word	0x40020400
 8003918:	40020800 	.word	0x40020800
 800391c:	40020c00 	.word	0x40020c00
 8003920:	40021000 	.word	0x40021000
 8003924:	40013c00 	.word	0x40013c00

08003928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	807b      	strh	r3, [r7, #2]
 8003934:	4613      	mov	r3, r2
 8003936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003938:	787b      	ldrb	r3, [r7, #1]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003944:	e003      	b.n	800394e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003946:	887b      	ldrh	r3, [r7, #2]
 8003948:	041a      	lsls	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	619a      	str	r2, [r3, #24]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	887b      	ldrh	r3, [r7, #2]
 800396c:	401a      	ands	r2, r3
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	429a      	cmp	r2, r3
 8003972:	d104      	bne.n	800397e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003974:	887b      	ldrh	r3, [r7, #2]
 8003976:	041a      	lsls	r2, r3, #16
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800397c:	e002      	b.n	8003984 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039a6:	4a05      	ldr	r2, [pc, #20]	; (80039bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fa06 	bl	8002dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40013c00 	.word	0x40013c00

080039c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e25b      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d075      	beq.n	8003aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039de:	4ba3      	ldr	r3, [pc, #652]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d00c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4ba0      	ldr	r3, [pc, #640]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d112      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b9d      	ldr	r3, [pc, #628]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4b99      	ldr	r3, [pc, #612]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d05b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x108>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d157      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e236      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_OscConfig+0x74>
 8003a26:	4b91      	ldr	r3, [pc, #580]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a90      	ldr	r2, [pc, #576]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0xb0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x98>
 8003a3e:	4b8b      	ldr	r3, [pc, #556]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a8a      	ldr	r2, [pc, #552]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a87      	ldr	r2, [pc, #540]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0xb0>
 8003a58:	4b84      	ldr	r3, [pc, #528]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a83      	ldr	r2, [pc, #524]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a80      	ldr	r2, [pc, #512]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7ff fc52 	bl	8003320 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a80:	f7ff fc4e 	bl	8003320 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e1fb      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0xc0>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7ff fc3e 	bl	8003320 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7ff fc3a 	bl	8003320 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e1e7      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	4b6c      	ldr	r3, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xe8>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d063      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ad6:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae2:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d11c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d116      	bne.n	8003b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	4b5c      	ldr	r3, [pc, #368]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_RCC_OscConfig+0x152>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e1bb      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b56      	ldr	r3, [pc, #344]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4952      	ldr	r1, [pc, #328]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	e03a      	b.n	8003b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b30:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <HAL_RCC_OscConfig+0x2b0>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7ff fbf3 	bl	8003320 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3e:	f7ff fbef 	bl	8003320 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e19c      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5c:	4b43      	ldr	r3, [pc, #268]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4940      	ldr	r1, [pc, #256]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	e015      	b.n	8003b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b72:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCC_OscConfig+0x2b0>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7ff fbd2 	bl	8003320 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b80:	f7ff fbce 	bl	8003320 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e17b      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d030      	beq.n	8003c0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb2:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <HAL_RCC_OscConfig+0x2b4>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7ff fbb2 	bl	8003320 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc0:	f7ff fbae 	bl	8003320 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e15b      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x200>
 8003bde:	e015      	b.n	8003c0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_RCC_OscConfig+0x2b4>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be6:	f7ff fb9b 	bl	8003320 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bee:	f7ff fb97 	bl	8003320 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e144      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f0      	bne.n	8003bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80a0 	beq.w	8003d5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a0e      	ldr	r2, [pc, #56]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_OscConfig+0x2b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d121      	bne.n	8003c9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_RCC_OscConfig+0x2b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <HAL_RCC_OscConfig+0x2b8>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7ff fb5d 	bl	8003320 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e011      	b.n	8003c8e <HAL_RCC_OscConfig+0x2ce>
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	42470000 	.word	0x42470000
 8003c74:	42470e80 	.word	0x42470e80
 8003c78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7c:	f7ff fb50 	bl	8003320 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0fd      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8e:	4b81      	ldr	r3, [pc, #516]	; (8003e94 <HAL_RCC_OscConfig+0x4d4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d106      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x2f0>
 8003ca2:	4b7d      	ldr	r3, [pc, #500]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	4a7c      	ldr	r2, [pc, #496]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6713      	str	r3, [r2, #112]	; 0x70
 8003cae:	e01c      	b.n	8003cea <HAL_RCC_OscConfig+0x32a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x312>
 8003cb8:	4b77      	ldr	r3, [pc, #476]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a76      	ldr	r2, [pc, #472]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cbe:	f043 0304 	orr.w	r3, r3, #4
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc4:	4b74      	ldr	r3, [pc, #464]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a73      	ldr	r2, [pc, #460]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	e00b      	b.n	8003cea <HAL_RCC_OscConfig+0x32a>
 8003cd2:	4b71      	ldr	r3, [pc, #452]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a70      	ldr	r2, [pc, #448]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	4b6e      	ldr	r3, [pc, #440]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a6d      	ldr	r2, [pc, #436]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d015      	beq.n	8003d1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7ff fb15 	bl	8003320 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7ff fb11 	bl	8003320 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0bc      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ee      	beq.n	8003cfa <HAL_RCC_OscConfig+0x33a>
 8003d1c:	e014      	b.n	8003d48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7ff faff 	bl	8003320 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7ff fafb 	bl	8003320 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e0a6      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3c:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ee      	bne.n	8003d26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4b52      	ldr	r3, [pc, #328]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	4a51      	ldr	r2, [pc, #324]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8092 	beq.w	8003e88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d64:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d05c      	beq.n	8003e2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d141      	bne.n	8003dfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d78:	4b48      	ldr	r3, [pc, #288]	; (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7ff facf 	bl	8003320 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d86:	f7ff facb 	bl	8003320 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e078      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d98:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	019b      	lsls	r3, r3, #6
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	061b      	lsls	r3, r3, #24
 8003dc8:	4933      	ldr	r1, [pc, #204]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dce:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7ff faa4 	bl	8003320 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ddc:	f7ff faa0 	bl	8003320 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04d      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x41c>
 8003dfa:	e045      	b.n	8003e88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e02:	f7ff fa8d 	bl	8003320 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0a:	f7ff fa89 	bl	8003320 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e036      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x44a>
 8003e28:	e02e      	b.n	8003e88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e029      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e36:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d11c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d115      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40007000 	.word	0x40007000
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	42470060 	.word	0x42470060

08003ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0cc      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b68      	ldr	r3, [pc, #416]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d90c      	bls.n	8003edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b65      	ldr	r3, [pc, #404]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b63      	ldr	r3, [pc, #396]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b8      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f0c:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	494d      	ldr	r1, [pc, #308]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d044      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d119      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	4b3f      	ldr	r3, [pc, #252]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e06f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e067      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4934      	ldr	r1, [pc, #208]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f90:	f7ff f9c6 	bl	8003320 <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f98:	f7ff f9c2 	bl	8003320 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e04f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 020c 	and.w	r2, r3, #12
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d1eb      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d20c      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e032      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4916      	ldr	r1, [pc, #88]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	490e      	ldr	r1, [pc, #56]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004026:	f000 f821 	bl	800406c <HAL_RCC_GetSysClockFreq>
 800402a:	4602      	mov	r2, r0
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	490a      	ldr	r1, [pc, #40]	; (8004060 <HAL_RCC_ClockConfig+0x1c0>)
 8004038:	5ccb      	ldrb	r3, [r1, r3]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1c8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff f926 	bl	8003298 <HAL_InitTick>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023c00 	.word	0x40023c00
 800405c:	40023800 	.word	0x40023800
 8004060:	0800abf8 	.word	0x0800abf8
 8004064:	20000a14 	.word	0x20000a14
 8004068:	20000a18 	.word	0x20000a18

0800406c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800406c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	2300      	movs	r3, #0
 800407e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004084:	4b67      	ldr	r3, [pc, #412]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d00d      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x40>
 8004090:	2b08      	cmp	r3, #8
 8004092:	f200 80bd 	bhi.w	8004210 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x34>
 800409a:	2b04      	cmp	r3, #4
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800409e:	e0b7      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b61      	ldr	r3, [pc, #388]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040a2:	60bb      	str	r3, [r7, #8]
       break;
 80040a4:	e0b7      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040a6:	4b61      	ldr	r3, [pc, #388]	; (800422c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040a8:	60bb      	str	r3, [r7, #8]
      break;
 80040aa:	e0b4      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ac:	4b5d      	ldr	r3, [pc, #372]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040b6:	4b5b      	ldr	r3, [pc, #364]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04d      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c2:	4b58      	ldr	r3, [pc, #352]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	461a      	mov	r2, r3
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	ea02 0800 	and.w	r8, r2, r0
 80040da:	ea03 0901 	and.w	r9, r3, r1
 80040de:	4640      	mov	r0, r8
 80040e0:	4649      	mov	r1, r9
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	014b      	lsls	r3, r1, #5
 80040ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040f0:	0142      	lsls	r2, r0, #5
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	ebb0 0008 	subs.w	r0, r0, r8
 80040fa:	eb61 0109 	sbc.w	r1, r1, r9
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	018b      	lsls	r3, r1, #6
 8004108:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800410c:	0182      	lsls	r2, r0, #6
 800410e:	1a12      	subs	r2, r2, r0
 8004110:	eb63 0301 	sbc.w	r3, r3, r1
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f04f 0100 	mov.w	r1, #0
 800411c:	00d9      	lsls	r1, r3, #3
 800411e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004122:	00d0      	lsls	r0, r2, #3
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	eb12 0208 	adds.w	r2, r2, r8
 800412c:	eb43 0309 	adc.w	r3, r3, r9
 8004130:	f04f 0000 	mov.w	r0, #0
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	0259      	lsls	r1, r3, #9
 800413a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800413e:	0250      	lsls	r0, r2, #9
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4610      	mov	r0, r2
 8004146:	4619      	mov	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	461a      	mov	r2, r3
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	f7fc fd82 	bl	8000c58 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4613      	mov	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e04a      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415e:	4b31      	ldr	r3, [pc, #196]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	461a      	mov	r2, r3
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	ea02 0400 	and.w	r4, r2, r0
 8004176:	ea03 0501 	and.w	r5, r3, r1
 800417a:	4620      	mov	r0, r4
 800417c:	4629      	mov	r1, r5
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	014b      	lsls	r3, r1, #5
 8004188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800418c:	0142      	lsls	r2, r0, #5
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	1b00      	subs	r0, r0, r4
 8004194:	eb61 0105 	sbc.w	r1, r1, r5
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	018b      	lsls	r3, r1, #6
 80041a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041a6:	0182      	lsls	r2, r0, #6
 80041a8:	1a12      	subs	r2, r2, r0
 80041aa:	eb63 0301 	sbc.w	r3, r3, r1
 80041ae:	f04f 0000 	mov.w	r0, #0
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	00d9      	lsls	r1, r3, #3
 80041b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041bc:	00d0      	lsls	r0, r2, #3
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	1912      	adds	r2, r2, r4
 80041c4:	eb45 0303 	adc.w	r3, r5, r3
 80041c8:	f04f 0000 	mov.w	r0, #0
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	0299      	lsls	r1, r3, #10
 80041d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041d6:	0290      	lsls	r0, r2, #10
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4610      	mov	r0, r2
 80041de:	4619      	mov	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f7fc fd36 	bl	8000c58 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4613      	mov	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	60bb      	str	r3, [r7, #8]
      break;
 800420e:	e002      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004212:	60bb      	str	r3, [r7, #8]
      break;
 8004214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004216:	68bb      	ldr	r3, [r7, #8]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200

08004230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_GetHCLKFreq+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000a14 	.word	0x20000a14

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800424c:	f7ff fff0 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0a9b      	lsrs	r3, r3, #10
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4903      	ldr	r1, [pc, #12]	; (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	0800ac08 	.word	0x0800ac08

08004270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004274:	f7ff ffdc 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	0b5b      	lsrs	r3, r3, #13
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4903      	ldr	r1, [pc, #12]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	0800ac08 	.word	0x0800ac08

08004298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e01d      	b.n	80042e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fe fefc 	bl	80030bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 f95e 	bl	8004598 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b06      	cmp	r3, #6
 8004316:	d007      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b02      	cmp	r3, #2
 800434a:	d122      	bne.n	8004392 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d11b      	bne.n	8004392 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f06f 0202 	mvn.w	r2, #2
 8004362:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f8ee 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 800437e:	e005      	b.n	800438c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f8e0 	bl	8004546 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8f1 	bl	800456e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d122      	bne.n	80043e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d11b      	bne.n	80043e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f06f 0204 	mvn.w	r2, #4
 80043b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f8c4 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 80043d2:	e005      	b.n	80043e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f8b6 	bl	8004546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f8c7 	bl	800456e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d122      	bne.n	800443a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d11b      	bne.n	800443a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f06f 0208 	mvn.w	r2, #8
 800440a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2204      	movs	r2, #4
 8004410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f89a 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 8004426:	e005      	b.n	8004434 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f88c 	bl	8004546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f89d 	bl	800456e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b10      	cmp	r3, #16
 8004446:	d122      	bne.n	800448e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b10      	cmp	r3, #16
 8004454:	d11b      	bne.n	800448e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f06f 0210 	mvn.w	r2, #16
 800445e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2208      	movs	r2, #8
 8004464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f870 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 800447a:	e005      	b.n	8004488 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f862 	bl	8004546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f873 	bl	800456e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d10e      	bne.n	80044ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d107      	bne.n	80044ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f06f 0201 	mvn.w	r2, #1
 80044b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fe fd05 	bl	8002ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d10e      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d107      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8e3 	bl	80046ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d10e      	bne.n	8004512 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d107      	bne.n	8004512 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800450a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f838 	bl	8004582 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b20      	cmp	r3, #32
 800451e:	d10e      	bne.n	800453e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b20      	cmp	r3, #32
 800452c:	d107      	bne.n	800453e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f06f 0220 	mvn.w	r2, #32
 8004536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f8ad 	bl	8004698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a34      	ldr	r2, [pc, #208]	; (800467c <TIM_Base_SetConfig+0xe4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00f      	beq.n	80045d0 <TIM_Base_SetConfig+0x38>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b6:	d00b      	beq.n	80045d0 <TIM_Base_SetConfig+0x38>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a31      	ldr	r2, [pc, #196]	; (8004680 <TIM_Base_SetConfig+0xe8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <TIM_Base_SetConfig+0x38>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a30      	ldr	r2, [pc, #192]	; (8004684 <TIM_Base_SetConfig+0xec>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_Base_SetConfig+0x38>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <TIM_Base_SetConfig+0xf0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d108      	bne.n	80045e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a25      	ldr	r2, [pc, #148]	; (800467c <TIM_Base_SetConfig+0xe4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01b      	beq.n	8004622 <TIM_Base_SetConfig+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d017      	beq.n	8004622 <TIM_Base_SetConfig+0x8a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a22      	ldr	r2, [pc, #136]	; (8004680 <TIM_Base_SetConfig+0xe8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <TIM_Base_SetConfig+0x8a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a21      	ldr	r2, [pc, #132]	; (8004684 <TIM_Base_SetConfig+0xec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00f      	beq.n	8004622 <TIM_Base_SetConfig+0x8a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a20      	ldr	r2, [pc, #128]	; (8004688 <TIM_Base_SetConfig+0xf0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00b      	beq.n	8004622 <TIM_Base_SetConfig+0x8a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1f      	ldr	r2, [pc, #124]	; (800468c <TIM_Base_SetConfig+0xf4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <TIM_Base_SetConfig+0x8a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1e      	ldr	r2, [pc, #120]	; (8004690 <TIM_Base_SetConfig+0xf8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_Base_SetConfig+0x8a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a1d      	ldr	r2, [pc, #116]	; (8004694 <TIM_Base_SetConfig+0xfc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d108      	bne.n	8004634 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a08      	ldr	r2, [pc, #32]	; (800467c <TIM_Base_SetConfig+0xe4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d103      	bne.n	8004668 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	615a      	str	r2, [r3, #20]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800

08004698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e03f      	b.n	8004752 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fe fd3a 	bl	8003160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	; 0x24
 80046f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fbf1 	bl	8004eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b088      	sub	sp, #32
 800475e:	af02      	add	r7, sp, #8
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b20      	cmp	r3, #32
 8004778:	f040 8083 	bne.w	8004882 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_Transmit+0x2e>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e07b      	b.n	8004884 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_UART_Transmit+0x40>
 8004796:	2302      	movs	r3, #2
 8004798:	e074      	b.n	8004884 <HAL_UART_Transmit+0x12a>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2221      	movs	r2, #33	; 0x21
 80047ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047b0:	f7fe fdb6 	bl	8003320 <HAL_GetTick>
 80047b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80047ca:	e042      	b.n	8004852 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e2:	d122      	bne.n	800482a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2200      	movs	r2, #0
 80047ec:	2180      	movs	r1, #128	; 0x80
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fa10 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e042      	b.n	8004884 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004810:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3302      	adds	r3, #2
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	e017      	b.n	8004852 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	3301      	adds	r3, #1
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	e013      	b.n	8004852 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2200      	movs	r2, #0
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f9ed 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e01f      	b.n	8004884 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	60ba      	str	r2, [r7, #8]
 800484a:	781a      	ldrb	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1b7      	bne.n	80047cc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2200      	movs	r2, #0
 8004864:	2140      	movs	r1, #64	; 0x40
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f9d4 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e006      	b.n	8004884 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4613      	mov	r3, r2
 800489a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	f040 8090 	bne.w	80049ce <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_UART_Receive+0x2e>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e088      	b.n	80049d0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_UART_Receive+0x40>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e081      	b.n	80049d0 <HAL_UART_Receive+0x144>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2222      	movs	r2, #34	; 0x22
 80048de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80048e2:	f7fe fd1d 	bl	8003320 <HAL_GetTick>
 80048e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80048fc:	e05c      	b.n	80049b8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004914:	d12b      	bne.n	800496e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	2120      	movs	r1, #32
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f977 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e04f      	b.n	80049d0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10c      	bne.n	8004956 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004948:	b29a      	uxth	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	3302      	adds	r3, #2
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	e030      	b.n	80049b8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	b29b      	uxth	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	b29a      	uxth	r2, r3
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	3301      	adds	r3, #1
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	e024      	b.n	80049b8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	2120      	movs	r1, #32
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f94b 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e023      	b.n	80049d0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d108      	bne.n	80049a2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6859      	ldr	r1, [r3, #4]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	60ba      	str	r2, [r7, #8]
 800499c:	b2ca      	uxtb	r2, r1
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e00a      	b.n	80049b8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d19d      	bne.n	80048fe <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
  }
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_UART_IRQHandler+0x52>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f9e0 	bl	8004de8 <UART_Receive_IT>
      return;
 8004a28:	e0d0      	b.n	8004bcc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80b0 	beq.w	8004b92 <HAL_UART_IRQHandler+0x1ba>
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_UART_IRQHandler+0x70>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80a5 	beq.w	8004b92 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_UART_IRQHandler+0x90>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_UART_IRQHandler+0xb0>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	f043 0202 	orr.w	r2, r3, #2
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_UART_IRQHandler+0xd0>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa0:	f043 0204 	orr.w	r2, r3, #4
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00f      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xfa>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_UART_IRQHandler+0xee>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	f043 0208 	orr.w	r2, r3, #8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d077      	beq.n	8004bca <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <HAL_UART_IRQHandler+0x11c>
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f97a 	bl	8004de8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <HAL_UART_IRQHandler+0x144>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d031      	beq.n	8004b80 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8c3 	bl	8004ca8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d123      	bne.n	8004b78 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d013      	beq.n	8004b70 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4c:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <HAL_UART_IRQHandler+0x1fc>)
 8004b4e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe fd40 	bl	80035da <HAL_DMA_Abort_IT>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d016      	beq.n	8004b8e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6e:	e00e      	b.n	8004b8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f845 	bl	8004c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b76:	e00a      	b.n	8004b8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f841 	bl	8004c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7e:	e006      	b.n	8004b8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f83d 	bl	8004c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b8c:	e01d      	b.n	8004bca <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8e:	bf00      	nop
    return;
 8004b90:	e01b      	b.n	8004bca <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_UART_IRQHandler+0x1d6>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8b0 	bl	8004d0c <UART_Transmit_IT>
    return;
 8004bac:	e00e      	b.n	8004bcc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <HAL_UART_IRQHandler+0x1f4>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d004      	beq.n	8004bcc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8f8 	bl	8004db8 <UART_EndTransmit_IT>
    return;
 8004bc8:	e000      	b.n	8004bcc <HAL_UART_IRQHandler+0x1f4>
    return;
 8004bca:	bf00      	nop
  }
}
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	08004ce5 	.word	0x08004ce5

08004bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c24:	e02c      	b.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d028      	beq.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c34:	f7fe fb74 	bl	8003320 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d21d      	bcs.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e00f      	b.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d0c3      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff ff7e 	bl	8004c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b21      	cmp	r3, #33	; 0x21
 8004d1e:	d144      	bne.n	8004daa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d11a      	bne.n	8004d60 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]
 8004d52:	e00e      	b.n	8004d72 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]
 8004d5e:	e008      	b.n	8004d72 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	1c59      	adds	r1, r3, #1
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6211      	str	r1, [r2, #32]
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10f      	bne.n	8004da6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff fefd 	bl	8004bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b22      	cmp	r3, #34	; 0x22
 8004dfa:	d171      	bne.n	8004ee0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e04:	d123      	bne.n	8004e4e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10e      	bne.n	8004e32 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e30:	e029      	b.n	8004e86 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e4c:	e01b      	b.n	8004e86 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6858      	ldr	r0, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	1c59      	adds	r1, r3, #1
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6291      	str	r1, [r2, #40]	; 0x28
 8004e66:	b2c2      	uxtb	r2, r0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e00c      	b.n	8004e86 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	1c58      	adds	r0, r3, #1
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	6288      	str	r0, [r1, #40]	; 0x28
 8004e7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4619      	mov	r1, r3
 8004e94:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d120      	bne.n	8004edc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0220 	bic.w	r2, r2, #32
 8004ea8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fe8a 	bl	8004bec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e002      	b.n	8004ee2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e000      	b.n	8004ee2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef0:	b0bd      	sub	sp, #244	; 0xf4
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f08:	68d9      	ldr	r1, [r3, #12]
 8004f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	ea40 0301 	orr.w	r3, r0, r1
 8004f14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f44:	f021 010c 	bic.w	r1, r1, #12
 8004f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f52:	430b      	orrs	r3, r1
 8004f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	6999      	ldr	r1, [r3, #24]
 8004f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	ea40 0301 	orr.w	r3, r0, r1
 8004f72:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7e:	f040 81a5 	bne.w	80052cc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4bcd      	ldr	r3, [pc, #820]	; (80052c0 <UART_SetConfig+0x3d4>)
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d006      	beq.n	8004f9c <UART_SetConfig+0xb0>
 8004f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4bcb      	ldr	r3, [pc, #812]	; (80052c4 <UART_SetConfig+0x3d8>)
 8004f96:	429a      	cmp	r2, r3
 8004f98:	f040 80cb 	bne.w	8005132 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f9c:	f7ff f968 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 8004fa0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fa8:	461c      	mov	r4, r3
 8004faa:	f04f 0500 	mov.w	r5, #0
 8004fae:	4622      	mov	r2, r4
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	1891      	adds	r1, r2, r2
 8004fb4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004fb8:	415b      	adcs	r3, r3
 8004fba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004fbe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004fc2:	1912      	adds	r2, r2, r4
 8004fc4:	eb45 0303 	adc.w	r3, r5, r3
 8004fc8:	f04f 0000 	mov.w	r0, #0
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	00d9      	lsls	r1, r3, #3
 8004fd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fd6:	00d0      	lsls	r0, r2, #3
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	1911      	adds	r1, r2, r4
 8004fde:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004fe2:	416b      	adcs	r3, r5
 8004fe4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	1891      	adds	r1, r2, r2
 8004ff6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004ffa:	415b      	adcs	r3, r3
 8004ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005000:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005004:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005008:	f7fb fe26 	bl	8000c58 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4bad      	ldr	r3, [pc, #692]	; (80052c8 <UART_SetConfig+0x3dc>)
 8005012:	fba3 2302 	umull	r2, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	011e      	lsls	r6, r3, #4
 800501a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800501e:	461c      	mov	r4, r3
 8005020:	f04f 0500 	mov.w	r5, #0
 8005024:	4622      	mov	r2, r4
 8005026:	462b      	mov	r3, r5
 8005028:	1891      	adds	r1, r2, r2
 800502a:	67b9      	str	r1, [r7, #120]	; 0x78
 800502c:	415b      	adcs	r3, r3
 800502e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005030:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005034:	1912      	adds	r2, r2, r4
 8005036:	eb45 0303 	adc.w	r3, r5, r3
 800503a:	f04f 0000 	mov.w	r0, #0
 800503e:	f04f 0100 	mov.w	r1, #0
 8005042:	00d9      	lsls	r1, r3, #3
 8005044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005048:	00d0      	lsls	r0, r2, #3
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	1911      	adds	r1, r2, r4
 8005050:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005054:	416b      	adcs	r3, r5
 8005056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800505a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	461a      	mov	r2, r3
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	1891      	adds	r1, r2, r2
 8005068:	6739      	str	r1, [r7, #112]	; 0x70
 800506a:	415b      	adcs	r3, r3
 800506c:	677b      	str	r3, [r7, #116]	; 0x74
 800506e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005072:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005076:	f7fb fdef 	bl	8000c58 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4b92      	ldr	r3, [pc, #584]	; (80052c8 <UART_SetConfig+0x3dc>)
 8005080:	fba3 1302 	umull	r1, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	2164      	movs	r1, #100	; 0x64
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	3332      	adds	r3, #50	; 0x32
 8005092:	4a8d      	ldr	r2, [pc, #564]	; (80052c8 <UART_SetConfig+0x3dc>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050a0:	441e      	add	r6, r3
 80050a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050a6:	4618      	mov	r0, r3
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	1894      	adds	r4, r2, r2
 80050b2:	66bc      	str	r4, [r7, #104]	; 0x68
 80050b4:	415b      	adcs	r3, r3
 80050b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80050bc:	1812      	adds	r2, r2, r0
 80050be:	eb41 0303 	adc.w	r3, r1, r3
 80050c2:	f04f 0400 	mov.w	r4, #0
 80050c6:	f04f 0500 	mov.w	r5, #0
 80050ca:	00dd      	lsls	r5, r3, #3
 80050cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050d0:	00d4      	lsls	r4, r2, #3
 80050d2:	4622      	mov	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	1814      	adds	r4, r2, r0
 80050d8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80050dc:	414b      	adcs	r3, r1
 80050de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	461a      	mov	r2, r3
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	1891      	adds	r1, r2, r2
 80050f0:	6639      	str	r1, [r7, #96]	; 0x60
 80050f2:	415b      	adcs	r3, r3
 80050f4:	667b      	str	r3, [r7, #100]	; 0x64
 80050f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80050fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050fe:	f7fb fdab 	bl	8000c58 <__aeabi_uldivmod>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4b70      	ldr	r3, [pc, #448]	; (80052c8 <UART_SetConfig+0x3dc>)
 8005108:	fba3 1302 	umull	r1, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	2164      	movs	r1, #100	; 0x64
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	3332      	adds	r3, #50	; 0x32
 800511a:	4a6b      	ldr	r2, [pc, #428]	; (80052c8 <UART_SetConfig+0x3dc>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 0207 	and.w	r2, r3, #7
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4432      	add	r2, r6
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	e26d      	b.n	800560e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005132:	f7ff f889 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8005136:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800513a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800513e:	461c      	mov	r4, r3
 8005140:	f04f 0500 	mov.w	r5, #0
 8005144:	4622      	mov	r2, r4
 8005146:	462b      	mov	r3, r5
 8005148:	1891      	adds	r1, r2, r2
 800514a:	65b9      	str	r1, [r7, #88]	; 0x58
 800514c:	415b      	adcs	r3, r3
 800514e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005150:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005154:	1912      	adds	r2, r2, r4
 8005156:	eb45 0303 	adc.w	r3, r5, r3
 800515a:	f04f 0000 	mov.w	r0, #0
 800515e:	f04f 0100 	mov.w	r1, #0
 8005162:	00d9      	lsls	r1, r3, #3
 8005164:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005168:	00d0      	lsls	r0, r2, #3
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	1911      	adds	r1, r2, r4
 8005170:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005174:	416b      	adcs	r3, r5
 8005176:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	461a      	mov	r2, r3
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	1891      	adds	r1, r2, r2
 8005188:	6539      	str	r1, [r7, #80]	; 0x50
 800518a:	415b      	adcs	r3, r3
 800518c:	657b      	str	r3, [r7, #84]	; 0x54
 800518e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005192:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005196:	f7fb fd5f 	bl	8000c58 <__aeabi_uldivmod>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <UART_SetConfig+0x3dc>)
 80051a0:	fba3 2302 	umull	r2, r3, r3, r2
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	011e      	lsls	r6, r3, #4
 80051a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ac:	461c      	mov	r4, r3
 80051ae:	f04f 0500 	mov.w	r5, #0
 80051b2:	4622      	mov	r2, r4
 80051b4:	462b      	mov	r3, r5
 80051b6:	1891      	adds	r1, r2, r2
 80051b8:	64b9      	str	r1, [r7, #72]	; 0x48
 80051ba:	415b      	adcs	r3, r3
 80051bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051c2:	1912      	adds	r2, r2, r4
 80051c4:	eb45 0303 	adc.w	r3, r5, r3
 80051c8:	f04f 0000 	mov.w	r0, #0
 80051cc:	f04f 0100 	mov.w	r1, #0
 80051d0:	00d9      	lsls	r1, r3, #3
 80051d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051d6:	00d0      	lsls	r0, r2, #3
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	1911      	adds	r1, r2, r4
 80051de:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80051e2:	416b      	adcs	r3, r5
 80051e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80051e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	1891      	adds	r1, r2, r2
 80051f6:	6439      	str	r1, [r7, #64]	; 0x40
 80051f8:	415b      	adcs	r3, r3
 80051fa:	647b      	str	r3, [r7, #68]	; 0x44
 80051fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005200:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005204:	f7fb fd28 	bl	8000c58 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <UART_SetConfig+0x3dc>)
 800520e:	fba3 1302 	umull	r1, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2164      	movs	r1, #100	; 0x64
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	3332      	adds	r3, #50	; 0x32
 8005220:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <UART_SetConfig+0x3dc>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800522e:	441e      	add	r6, r3
 8005230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005234:	4618      	mov	r0, r3
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	1894      	adds	r4, r2, r2
 8005240:	63bc      	str	r4, [r7, #56]	; 0x38
 8005242:	415b      	adcs	r3, r3
 8005244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005246:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800524a:	1812      	adds	r2, r2, r0
 800524c:	eb41 0303 	adc.w	r3, r1, r3
 8005250:	f04f 0400 	mov.w	r4, #0
 8005254:	f04f 0500 	mov.w	r5, #0
 8005258:	00dd      	lsls	r5, r3, #3
 800525a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800525e:	00d4      	lsls	r4, r2, #3
 8005260:	4622      	mov	r2, r4
 8005262:	462b      	mov	r3, r5
 8005264:	1814      	adds	r4, r2, r0
 8005266:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800526a:	414b      	adcs	r3, r1
 800526c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	461a      	mov	r2, r3
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	1891      	adds	r1, r2, r2
 800527e:	6339      	str	r1, [r7, #48]	; 0x30
 8005280:	415b      	adcs	r3, r3
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
 8005284:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005288:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800528c:	f7fb fce4 	bl	8000c58 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <UART_SetConfig+0x3dc>)
 8005296:	fba3 1302 	umull	r1, r3, r3, r2
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	2164      	movs	r1, #100	; 0x64
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	3332      	adds	r3, #50	; 0x32
 80052a8:	4a07      	ldr	r2, [pc, #28]	; (80052c8 <UART_SetConfig+0x3dc>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	f003 0207 	and.w	r2, r3, #7
 80052b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4432      	add	r2, r6
 80052bc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80052be:	e1a6      	b.n	800560e <UART_SetConfig+0x722>
 80052c0:	40011000 	.word	0x40011000
 80052c4:	40011400 	.word	0x40011400
 80052c8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4bd1      	ldr	r3, [pc, #836]	; (8005618 <UART_SetConfig+0x72c>)
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d006      	beq.n	80052e6 <UART_SetConfig+0x3fa>
 80052d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4bcf      	ldr	r3, [pc, #828]	; (800561c <UART_SetConfig+0x730>)
 80052e0:	429a      	cmp	r2, r3
 80052e2:	f040 80ca 	bne.w	800547a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80052e6:	f7fe ffc3 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 80052ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052f2:	461c      	mov	r4, r3
 80052f4:	f04f 0500 	mov.w	r5, #0
 80052f8:	4622      	mov	r2, r4
 80052fa:	462b      	mov	r3, r5
 80052fc:	1891      	adds	r1, r2, r2
 80052fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8005300:	415b      	adcs	r3, r3
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005308:	1912      	adds	r2, r2, r4
 800530a:	eb45 0303 	adc.w	r3, r5, r3
 800530e:	f04f 0000 	mov.w	r0, #0
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	00d9      	lsls	r1, r3, #3
 8005318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800531c:	00d0      	lsls	r0, r2, #3
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	eb12 0a04 	adds.w	sl, r2, r4
 8005326:	eb43 0b05 	adc.w	fp, r3, r5
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	f04f 0100 	mov.w	r1, #0
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	008b      	lsls	r3, r1, #2
 8005340:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005344:	0082      	lsls	r2, r0, #2
 8005346:	4650      	mov	r0, sl
 8005348:	4659      	mov	r1, fp
 800534a:	f7fb fc85 	bl	8000c58 <__aeabi_uldivmod>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4bb3      	ldr	r3, [pc, #716]	; (8005620 <UART_SetConfig+0x734>)
 8005354:	fba3 2302 	umull	r2, r3, r3, r2
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	011e      	lsls	r6, r3, #4
 800535c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005360:	4618      	mov	r0, r3
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	1894      	adds	r4, r2, r2
 800536c:	623c      	str	r4, [r7, #32]
 800536e:	415b      	adcs	r3, r3
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005376:	1812      	adds	r2, r2, r0
 8005378:	eb41 0303 	adc.w	r3, r1, r3
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	f04f 0500 	mov.w	r5, #0
 8005384:	00dd      	lsls	r5, r3, #3
 8005386:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800538a:	00d4      	lsls	r4, r2, #3
 800538c:	4622      	mov	r2, r4
 800538e:	462b      	mov	r3, r5
 8005390:	1814      	adds	r4, r2, r0
 8005392:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005396:	414b      	adcs	r3, r1
 8005398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800539c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	008b      	lsls	r3, r1, #2
 80053b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053b6:	0082      	lsls	r2, r0, #2
 80053b8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80053bc:	f7fb fc4c 	bl	8000c58 <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4b96      	ldr	r3, [pc, #600]	; (8005620 <UART_SetConfig+0x734>)
 80053c6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2164      	movs	r1, #100	; 0x64
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	3332      	adds	r3, #50	; 0x32
 80053d8:	4a91      	ldr	r2, [pc, #580]	; (8005620 <UART_SetConfig+0x734>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e4:	441e      	add	r6, r3
 80053e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053ea:	4618      	mov	r0, r3
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	1894      	adds	r4, r2, r2
 80053f6:	61bc      	str	r4, [r7, #24]
 80053f8:	415b      	adcs	r3, r3
 80053fa:	61fb      	str	r3, [r7, #28]
 80053fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005400:	1812      	adds	r2, r2, r0
 8005402:	eb41 0303 	adc.w	r3, r1, r3
 8005406:	f04f 0400 	mov.w	r4, #0
 800540a:	f04f 0500 	mov.w	r5, #0
 800540e:	00dd      	lsls	r5, r3, #3
 8005410:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005414:	00d4      	lsls	r4, r2, #3
 8005416:	4622      	mov	r2, r4
 8005418:	462b      	mov	r3, r5
 800541a:	1814      	adds	r4, r2, r0
 800541c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005420:	414b      	adcs	r3, r1
 8005422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4618      	mov	r0, r3
 800542e:	f04f 0100 	mov.w	r1, #0
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	008b      	lsls	r3, r1, #2
 800543c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005440:	0082      	lsls	r2, r0, #2
 8005442:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005446:	f7fb fc07 	bl	8000c58 <__aeabi_uldivmod>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4b74      	ldr	r3, [pc, #464]	; (8005620 <UART_SetConfig+0x734>)
 8005450:	fba3 1302 	umull	r1, r3, r3, r2
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	2164      	movs	r1, #100	; 0x64
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	3332      	adds	r3, #50	; 0x32
 8005462:	4a6f      	ldr	r2, [pc, #444]	; (8005620 <UART_SetConfig+0x734>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	f003 020f 	and.w	r2, r3, #15
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4432      	add	r2, r6
 8005476:	609a      	str	r2, [r3, #8]
 8005478:	e0c9      	b.n	800560e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800547a:	f7fe fee5 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 800547e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005486:	461c      	mov	r4, r3
 8005488:	f04f 0500 	mov.w	r5, #0
 800548c:	4622      	mov	r2, r4
 800548e:	462b      	mov	r3, r5
 8005490:	1891      	adds	r1, r2, r2
 8005492:	6139      	str	r1, [r7, #16]
 8005494:	415b      	adcs	r3, r3
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800549c:	1912      	adds	r2, r2, r4
 800549e:	eb45 0303 	adc.w	r3, r5, r3
 80054a2:	f04f 0000 	mov.w	r0, #0
 80054a6:	f04f 0100 	mov.w	r1, #0
 80054aa:	00d9      	lsls	r1, r3, #3
 80054ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b0:	00d0      	lsls	r0, r2, #3
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	eb12 0804 	adds.w	r8, r2, r4
 80054ba:	eb43 0905 	adc.w	r9, r3, r5
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f04f 0100 	mov.w	r1, #0
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	008b      	lsls	r3, r1, #2
 80054d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054d8:	0082      	lsls	r2, r0, #2
 80054da:	4640      	mov	r0, r8
 80054dc:	4649      	mov	r1, r9
 80054de:	f7fb fbbb 	bl	8000c58 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4b4e      	ldr	r3, [pc, #312]	; (8005620 <UART_SetConfig+0x734>)
 80054e8:	fba3 2302 	umull	r2, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	011e      	lsls	r6, r3, #4
 80054f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054f4:	4618      	mov	r0, r3
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	1894      	adds	r4, r2, r2
 8005500:	60bc      	str	r4, [r7, #8]
 8005502:	415b      	adcs	r3, r3
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800550a:	1812      	adds	r2, r2, r0
 800550c:	eb41 0303 	adc.w	r3, r1, r3
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	f04f 0500 	mov.w	r5, #0
 8005518:	00dd      	lsls	r5, r3, #3
 800551a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800551e:	00d4      	lsls	r4, r2, #3
 8005520:	4622      	mov	r2, r4
 8005522:	462b      	mov	r3, r5
 8005524:	1814      	adds	r4, r2, r0
 8005526:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800552a:	414b      	adcs	r3, r1
 800552c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4618      	mov	r0, r3
 8005538:	f04f 0100 	mov.w	r1, #0
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	008b      	lsls	r3, r1, #2
 8005546:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800554a:	0082      	lsls	r2, r0, #2
 800554c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005550:	f7fb fb82 	bl	8000c58 <__aeabi_uldivmod>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4b31      	ldr	r3, [pc, #196]	; (8005620 <UART_SetConfig+0x734>)
 800555a:	fba3 1302 	umull	r1, r3, r3, r2
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	2164      	movs	r1, #100	; 0x64
 8005562:	fb01 f303 	mul.w	r3, r1, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	3332      	adds	r3, #50	; 0x32
 800556c:	4a2c      	ldr	r2, [pc, #176]	; (8005620 <UART_SetConfig+0x734>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005578:	441e      	add	r6, r3
 800557a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800557e:	4618      	mov	r0, r3
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	1894      	adds	r4, r2, r2
 800558a:	603c      	str	r4, [r7, #0]
 800558c:	415b      	adcs	r3, r3
 800558e:	607b      	str	r3, [r7, #4]
 8005590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005594:	1812      	adds	r2, r2, r0
 8005596:	eb41 0303 	adc.w	r3, r1, r3
 800559a:	f04f 0400 	mov.w	r4, #0
 800559e:	f04f 0500 	mov.w	r5, #0
 80055a2:	00dd      	lsls	r5, r3, #3
 80055a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055a8:	00d4      	lsls	r4, r2, #3
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	1814      	adds	r4, r2, r0
 80055b0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80055b4:	414b      	adcs	r3, r1
 80055b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	008b      	lsls	r3, r1, #2
 80055d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055d4:	0082      	lsls	r2, r0, #2
 80055d6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80055da:	f7fb fb3d 	bl	8000c58 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <UART_SetConfig+0x734>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	3332      	adds	r3, #50	; 0x32
 80055f6:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <UART_SetConfig+0x734>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4432      	add	r2, r6
 800560a:	609a      	str	r2, [r3, #8]
}
 800560c:	e7ff      	b.n	800560e <UART_SetConfig+0x722>
 800560e:	bf00      	nop
 8005610:	37f4      	adds	r7, #244	; 0xf4
 8005612:	46bd      	mov	sp, r7
 8005614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005618:	40011000 	.word	0x40011000
 800561c:	40011400 	.word	0x40011400
 8005620:	51eb851f 	.word	0x51eb851f

08005624 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8005634:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005636:	461a      	mov	r2, r3
        err.type, err.code);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	4806      	ldr	r0, [pc, #24]	; (800565c <ai_log_err+0x38>)
 8005642:	f002 fbbb 	bl	8007dbc <iprintf>
 8005646:	e008      	b.n	800565a <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8005648:	793b      	ldrb	r3, [r7, #4]
 800564a:	4619      	mov	r1, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005652:	461a      	mov	r2, r3
 8005654:	4802      	ldr	r0, [pc, #8]	; (8005660 <ai_log_err+0x3c>)
 8005656:	f002 fbb1 	bl	8007dbc <iprintf>

  do {} while (1);
 800565a:	e7fe      	b.n	800565a <ai_log_err+0x36>
 800565c:	0800aa24 	.word	0x0800aa24
 8005660:	0800aa58 	.word	0x0800aa58

08005664 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b090      	sub	sp, #64	; 0x40
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800566e:	2100      	movs	r1, #0
 8005670:	4837      	ldr	r0, [pc, #220]	; (8005750 <ai_boostrap+0xec>)
 8005672:	f000 f9d1 	bl	8005a18 <ai_network_create>
 8005676:	4603      	mov	r3, r0
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 800567a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d006      	beq.n	8005690 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 8005682:	4934      	ldr	r1, [pc, #208]	; (8005754 <ai_boostrap+0xf0>)
 8005684:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005686:	f7ff ffcd 	bl	8005624 <ai_log_err>
    return -1;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	e05b      	b.n	8005748 <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8005690:	4b31      	ldr	r3, [pc, #196]	; (8005758 <ai_boostrap+0xf4>)
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	2301      	movs	r3, #1
 8005696:	823b      	strh	r3, [r7, #16]
 8005698:	2301      	movs	r3, #1
 800569a:	827b      	strh	r3, [r7, #18]
 800569c:	2301      	movs	r3, #1
 800569e:	82bb      	strh	r3, [r7, #20]
 80056a0:	4b2e      	ldr	r3, [pc, #184]	; (800575c <ai_boostrap+0xf8>)
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	2300      	movs	r3, #0
 80056aa:	623b      	str	r3, [r7, #32]
 80056ac:	4b2c      	ldr	r3, [pc, #176]	; (8005760 <ai_boostrap+0xfc>)
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
 80056b0:	2301      	movs	r3, #1
 80056b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80056b4:	2301      	movs	r3, #1
 80056b6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80056b8:	2301      	movs	r3, #1
 80056ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80056bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c0:	633b      	str	r3, [r7, #48]	; 0x30
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
 80056c6:	2300      	movs	r3, #0
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 80056ca:	4b21      	ldr	r3, [pc, #132]	; (8005750 <ai_boostrap+0xec>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f107 020c 	add.w	r2, r7, #12
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f9c1 	bl	8005a5c <ai_network_init>
 80056da:	4603      	mov	r3, r0
 80056dc:	f083 0301 	eor.w	r3, r3, #1
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00d      	beq.n	8005702 <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 80056e6:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <ai_boostrap+0xec>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 f988 	bl	8005a00 <ai_network_get_error>
 80056f0:	4603      	mov	r3, r0
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 80056f4:	491b      	ldr	r1, [pc, #108]	; (8005764 <ai_boostrap+0x100>)
 80056f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056f8:	f7ff ff94 	bl	8005624 <ai_log_err>
      return -1;
 80056fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005700:	e022      	b.n	8005748 <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8005702:	4b13      	ldr	r3, [pc, #76]	; (8005750 <ai_boostrap+0xec>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4918      	ldr	r1, [pc, #96]	; (8005768 <ai_boostrap+0x104>)
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f91b 	bl	8005944 <ai_network_get_info>
 800570e:	4603      	mov	r3, r0
 8005710:	f083 0301 	eor.w	r3, r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d015      	beq.n	8005746 <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 800571a:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <ai_boostrap+0xec>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f000 f96e 	bl	8005a00 <ai_network_get_error>
 8005724:	4603      	mov	r3, r0
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 8005728:	4910      	ldr	r1, [pc, #64]	; (800576c <ai_boostrap+0x108>)
 800572a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800572c:	f7ff ff7a 	bl	8005624 <ai_log_err>
    ai_network_destroy(network);
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <ai_boostrap+0xec>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f985 	bl	8005a44 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <ai_boostrap+0xec>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
    return -3;
 8005740:	f06f 0302 	mvn.w	r3, #2
 8005744:	e000      	b.n	8005748 <ai_boostrap+0xe4>
  }

  return 0;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3740      	adds	r7, #64	; 0x40
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200010d8 	.word	0x200010d8
 8005754:	0800aa88 	.word	0x0800aa88
 8005758:	40040440 	.word	0x40040440
 800575c:	0005b400 	.word	0x0005b400
 8005760:	00040440 	.word	0x00040440
 8005764:	0800aa9c 	.word	0x0800aa9c
 8005768:	200010dc 	.word	0x200010dc
 800576c:	0800aaac 	.word	0x0800aaac

08005770 <ai_run_v2>:

  return 0;
}

/* USER CODE BEGIN 2 */
int ai_run_v2(void *in_data, void *out_data){
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
	ai_i32 nbatch;
	ai_error err;

	/* Parameters checking */
	if (!in_data || !out_data || !network)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d006      	beq.n	800578e <ai_run_v2+0x1e>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <ai_run_v2+0x1e>
 8005786:	4b17      	ldr	r3, [pc, #92]	; (80057e4 <ai_run_v2+0x74>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d102      	bne.n	8005794 <ai_run_v2+0x24>
		return -1;
 800578e:	f04f 33ff 	mov.w	r3, #4294967295
 8005792:	e022      	b.n	80057da <ai_run_v2+0x6a>

	ai_buffer *ai_input = network_info.inputs;
 8005794:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <ai_run_v2+0x78>)
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	617b      	str	r3, [r7, #20]
	ai_buffer *ai_output = network_info.outputs;
 800579a:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <ai_run_v2+0x78>)
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	613b      	str	r3, [r7, #16]

	/* Initialize input/output buffer handlers */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	611a      	str	r2, [r3, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	611a      	str	r2, [r3, #16]

	/* 2 - Perform the inference */
	nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80057ac:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <ai_run_v2+0x74>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 f990 	bl	8005ada <ai_network_run>
 80057ba:	60f8      	str	r0, [r7, #12]
	if (nbatch != 1) {
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d00a      	beq.n	80057d8 <ai_run_v2+0x68>
		err = ai_network_get_error(network);
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <ai_run_v2+0x74>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f91a 	bl	8005a00 <ai_network_get_error>
 80057cc:	4603      	mov	r3, r0
 80057ce:	60bb      	str	r3, [r7, #8]
		// ...
		return err.code;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80057d6:	e000      	b.n	80057da <ai_run_v2+0x6a>
	}


  return 0;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	200010d8 	.word	0x200010d8
 80057e8:	200010dc 	.word	0x200010dc

080057ec <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80057f0:	4805      	ldr	r0, [pc, #20]	; (8005808 <MX_X_CUBE_AI_Init+0x1c>)
 80057f2:	f002 fb69 	bl	8007ec8 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 80057f6:	f000 f981 	bl	8005afc <ai_network_data_weights_get>
 80057fa:	4603      	mov	r3, r0
 80057fc:	4903      	ldr	r1, [pc, #12]	; (800580c <MX_X_CUBE_AI_Init+0x20>)
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff ff30 	bl	8005664 <ai_boostrap>
    /* USER CODE END 5 */
}
 8005804:	bf00      	nop
 8005806:	bd80      	pop	{r7, pc}
 8005808:	0800aad4 	.word	0x0800aad4
 800580c:	20001150 	.word	0x20001150

08005810 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	3303      	adds	r3, #3
 8005820:	f023 0303 	bic.w	r3, r3, #3
 8005824:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <network_configure_activations+0x68>)
 8005828:	2200      	movs	r2, #0
 800582a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <network_configure_activations+0x68>)
 800582e:	2200      	movs	r2, #0
 8005830:	60da      	str	r2, [r3, #12]
    input_layer_output_array.data = AI_PTR(activations + 0);
 8005832:	4a12      	ldr	r2, [pc, #72]	; (800587c <network_configure_activations+0x6c>)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6093      	str	r3, [r2, #8]
    input_layer_output_array.data_start = AI_PTR(activations + 0);
 8005838:	4a10      	ldr	r2, [pc, #64]	; (800587c <network_configure_activations+0x6c>)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	60d3      	str	r3, [r2, #12]
    input_layer_nl_output_array.data = AI_PTR(activations + 0);
 800583e:	4a10      	ldr	r2, [pc, #64]	; (8005880 <network_configure_activations+0x70>)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6093      	str	r3, [r2, #8]
    input_layer_nl_output_array.data_start = AI_PTR(activations + 0);
 8005844:	4a0e      	ldr	r2, [pc, #56]	; (8005880 <network_configure_activations+0x70>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	60d3      	str	r3, [r2, #12]
    hidden1_output_array.data = AI_PTR(activations + 512);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005850:	4a0c      	ldr	r2, [pc, #48]	; (8005884 <network_configure_activations+0x74>)
 8005852:	6093      	str	r3, [r2, #8]
    hidden1_output_array.data_start = AI_PTR(activations + 512);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800585a:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <network_configure_activations+0x74>)
 800585c:	60d3      	str	r3, [r2, #12]
    hidden1_nl_output_array.data = AI_PTR(NULL);
 800585e:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <network_configure_activations+0x78>)
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
    hidden1_nl_output_array.data_start = AI_PTR(NULL);
 8005864:	4b08      	ldr	r3, [pc, #32]	; (8005888 <network_configure_activations+0x78>)
 8005866:	2200      	movs	r2, #0
 8005868:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800586a:	2301      	movs	r3, #1
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	20000a84 	.word	0x20000a84
 800587c:	20000a94 	.word	0x20000a94
 8005880:	20000aa4 	.word	0x20000aa4
 8005884:	20000ab4 	.word	0x20000ab4
 8005888:	20000ac4 	.word	0x20000ac4

0800588c <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    input_layer_weights_array.format |= AI_FMT_FLAG_CONST;
 800589c:	4b25      	ldr	r3, [pc, #148]	; (8005934 <network_configure_weights+0xa8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a4:	4a23      	ldr	r2, [pc, #140]	; (8005934 <network_configure_weights+0xa8>)
 80058a6:	6013      	str	r3, [r2, #0]
    input_layer_weights_array.data = AI_PTR(weights + 0);
 80058a8:	4a22      	ldr	r2, [pc, #136]	; (8005934 <network_configure_weights+0xa8>)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6093      	str	r3, [r2, #8]
    input_layer_weights_array.data_start = AI_PTR(weights + 0);
 80058ae:	4a21      	ldr	r2, [pc, #132]	; (8005934 <network_configure_weights+0xa8>)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	60d3      	str	r3, [r2, #12]
    input_layer_bias_array.format |= AI_FMT_FLAG_CONST;
 80058b4:	4b20      	ldr	r3, [pc, #128]	; (8005938 <network_configure_weights+0xac>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058bc:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <network_configure_weights+0xac>)
 80058be:	6013      	str	r3, [r2, #0]
    input_layer_bias_array.data = AI_PTR(weights + 307200);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80058c6:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <network_configure_weights+0xac>)
 80058c8:	6093      	str	r3, [r2, #8]
    input_layer_bias_array.data_start = AI_PTR(weights + 307200);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80058d0:	4a19      	ldr	r2, [pc, #100]	; (8005938 <network_configure_weights+0xac>)
 80058d2:	60d3      	str	r3, [r2, #12]
    hidden1_weights_array.format |= AI_FMT_FLAG_CONST;
 80058d4:	4b19      	ldr	r3, [pc, #100]	; (800593c <network_configure_weights+0xb0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058dc:	4a17      	ldr	r2, [pc, #92]	; (800593c <network_configure_weights+0xb0>)
 80058de:	6013      	str	r3, [r2, #0]
    hidden1_weights_array.data = AI_PTR(weights + 307712);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80058e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80058ea:	4a14      	ldr	r2, [pc, #80]	; (800593c <network_configure_weights+0xb0>)
 80058ec:	6093      	str	r3, [r2, #8]
    hidden1_weights_array.data_start = AI_PTR(weights + 307712);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80058f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80058f8:	4a10      	ldr	r2, [pc, #64]	; (800593c <network_configure_weights+0xb0>)
 80058fa:	60d3      	str	r3, [r2, #12]
    hidden1_bias_array.format |= AI_FMT_FLAG_CONST;
 80058fc:	4b10      	ldr	r3, [pc, #64]	; (8005940 <network_configure_weights+0xb4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005904:	4a0e      	ldr	r2, [pc, #56]	; (8005940 <network_configure_weights+0xb4>)
 8005906:	6013      	str	r3, [r2, #0]
    hidden1_bias_array.data = AI_PTR(weights + 373248);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 800590e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005912:	4a0b      	ldr	r2, [pc, #44]	; (8005940 <network_configure_weights+0xb4>)
 8005914:	6093      	str	r3, [r2, #8]
    hidden1_bias_array.data_start = AI_PTR(weights + 373248);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 800591c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005920:	4a07      	ldr	r2, [pc, #28]	; (8005940 <network_configure_weights+0xb4>)
 8005922:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8005924:	2301      	movs	r3, #1
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000ad4 	.word	0x20000ad4
 8005938:	20000ae4 	.word	0x20000ae4
 800593c:	20000af4 	.word	0x20000af4
 8005940:	20000b04 	.word	0x20000b04

08005944 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b0a0      	sub	sp, #128	; 0x80
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f9f8 	bl	8005d44 <ai_platform_context_acquire>
 8005954:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d041      	beq.n	80059e0 <ai_network_get_info+0x9c>
 800595c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d03e      	beq.n	80059e0 <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	2274      	movs	r2, #116	; 0x74
 8005968:	2100      	movs	r1, #0
 800596a:	4618      	mov	r0, r3
 800596c:	f001 fcfa 	bl	8007364 <memset>
 8005970:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <ai_network_get_info+0xa8>)
 8005972:	60bb      	str	r3, [r7, #8]
 8005974:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <ai_network_get_info+0xac>)
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <ai_network_get_info+0xb0>)
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	4b1e      	ldr	r3, [pc, #120]	; (80059f8 <ai_network_get_info+0xb4>)
 800597e:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005980:	f000 f934 	bl	8005bec <ai_platform_runtime_get_revision>
 8005984:	4603      	mov	r3, r0
    ai_network_report r = {
 8005986:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005988:	f000 f952 	bl	8005c30 <ai_platform_runtime_get_version>
 800598c:	4603      	mov	r3, r0
 800598e:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8005990:	4b1a      	ldr	r3, [pc, #104]	; (80059fc <ai_network_get_info+0xb8>)
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	2306      	movs	r3, #6
 8005996:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800599a:	f000 f96b 	bl	8005c74 <ai_platform_api_get_version>
 800599e:	4603      	mov	r3, r0
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80059a2:	f000 f99b 	bl	8005cdc <ai_platform_interface_api_get_version>
 80059a6:	4603      	mov	r3, r0
 80059a8:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 80059aa:	f44f 33b7 	mov.w	r3, #93696	; 0x16e00
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80059b0:	f107 0308 	add.w	r3, r7, #8
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa20 	bl	8005dfc <ai_platform_api_get_network_report>
 80059bc:	4603      	mov	r3, r0
 80059be:	f083 0301 	eor.w	r3, r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <ai_network_get_info+0x88>
 80059c8:	2300      	movs	r3, #0
 80059ca:	e00a      	b.n	80059e2 <ai_network_get_info+0x9e>

    *report = r;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f107 0308 	add.w	r3, r7, #8
 80059d4:	2274      	movs	r2, #116	; 0x74
 80059d6:	4619      	mov	r1, r3
 80059d8:	f001 fcb6 	bl	8007348 <memcpy>
    return true;
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <ai_network_get_info+0x9e>
  }

  return false;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3780      	adds	r7, #128	; 0x80
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	0800ab90 	.word	0x0800ab90
 80059f0:	0800ab98 	.word	0x0800ab98
 80059f4:	0800abbc 	.word	0x0800abbc
 80059f8:	0800abd8 	.word	0x0800abd8
 80059fc:	0800abf0 	.word	0x0800abf0

08005a00 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f9c5 	bl	8005d98 <ai_platform_network_get_error>
 8005a0e:	4603      	mov	r3, r0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005a22:	2300      	movs	r3, #0
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	2304      	movs	r3, #4
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <ai_network_create+0x28>)
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fad9 	bl	8005fe8 <ai_platform_network_create>
 8005a36:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000a20 	.word	0x20000a20

08005a44 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fb3d 	bl	80060cc <ai_platform_network_destroy>
 8005a52:	4603      	mov	r3, r0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fb61 	bl	8006130 <ai_platform_network_init>
 8005a6e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <ai_network_init+0x1e>
 8005a76:	2300      	movs	r3, #0
 8005a78:	e02b      	b.n	8005ad2 <ai_network_init+0x76>

  ai_bool ok = true;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	4619      	mov	r1, r3
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff ff02 	bl	800588c <network_configure_weights>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	7afb      	ldrb	r3, [r7, #11]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	3318      	adds	r3, #24
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff feb5 	bl	8005810 <network_configure_activations>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	7afb      	ldrb	r3, [r7, #11]
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fbab 	bl	8006214 <ai_platform_network_post_init>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bf14      	ite	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	2300      	moveq	r3, #0
 8005ace:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005ad0:	7afb      	ldrb	r3, [r7, #11]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fbde 	bl	80062ac <ai_platform_network_process>
 8005af0:	4603      	mov	r3, r0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
    0x87, 0xbb, 0xce, 0x35, 0x0d, 0xbc, 0x0f, 0x8a, 0x4e, 0x3b,
    0xc5, 0x2a, 0xe4, 0x3b, 0x8d, 0xcc, 0x7a, 0xbb, 0x97, 0x90,
    0x25, 0xbc, 0x11, 0x2e, 0x42, 0x3b, 0x49, 0x0b, 0x4d, 0xba,
    0x59, 0x09, 0x9b, 0xbb, 0xef, 0xb7, 0x8c, 0x3b, 0x0e, 0x67,
    0x90, 0xbc, 0x24, 0x06, 0xab, 0x3a, 0x10, 0xe4, 0x17, 0xbc  };
  return AI_HANDLE_PTR(s_network_weights);
 8005b00:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <ai_network_data_weights_get+0x10>)
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	0800ac40 	.word	0x0800ac40

08005b10 <_ai_platform_get_io_buffers_info>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	2400      	movs	r4, #0
 8005b16:	b083      	sub	sp, #12
 8005b18:	4606      	mov	r6, r0
 8005b1a:	4688      	mov	r8, r1
 8005b1c:	46a3      	mov	fp, r4
 8005b1e:	f04f 0a18 	mov.w	sl, #24
 8005b22:	f04f 0901 	mov.w	r9, #1
 8005b26:	b2a0      	uxth	r0, r4
 8005b28:	b936      	cbnz	r6, 8005b38 <_ai_platform_get_io_buffers_info+0x28>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d03b      	beq.n	8005ba6 <_ai_platform_get_io_buffers_info+0x96>
 8005b2e:	68b3      	ldr	r3, [r6, #8]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f8c8 3000 	str.w	r3, [r8]
 8005b36:	e036      	b.n	8005ba6 <_ai_platform_get_io_buffers_info+0x96>
 8005b38:	8833      	ldrh	r3, [r6, #0]
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d2f5      	bcs.n	8005b2a <_ai_platform_get_io_buffers_info+0x1a>
 8005b3e:	6873      	ldr	r3, [r6, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f2      	beq.n	8005b2a <_ai_platform_get_io_buffers_info+0x1a>
 8005b44:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8005b48:	2d00      	cmp	r5, #0
 8005b4a:	d0ee      	beq.n	8005b2a <_ai_platform_get_io_buffers_info+0x1a>
 8005b4c:	68b3      	ldr	r3, [r6, #8]
 8005b4e:	69aa      	ldr	r2, [r5, #24]
 8005b50:	6859      	ldr	r1, [r3, #4]
 8005b52:	6810      	ldr	r0, [r2, #0]
 8005b54:	689f      	ldr	r7, [r3, #8]
 8005b56:	9101      	str	r1, [sp, #4]
 8005b58:	f001 fb46 	bl	80071e8 <ai_array_to_buffer_fmt>
 8005b5c:	9901      	ldr	r1, [sp, #4]
 8005b5e:	fb0a f304 	mul.w	r3, sl, r4
 8005b62:	18ca      	adds	r2, r1, r3
 8005b64:	50c8      	str	r0, [r1, r3]
 8005b66:	f8a2 9004 	strh.w	r9, [r2, #4]
 8005b6a:	68eb      	ldr	r3, [r5, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	80d3      	strh	r3, [r2, #6]
 8005b70:	68eb      	ldr	r3, [r5, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	8113      	strh	r3, [r2, #8]
 8005b76:	68eb      	ldr	r3, [r5, #12]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	60d3      	str	r3, [r2, #12]
 8005b7c:	69ab      	ldr	r3, [r5, #24]
 8005b7e:	00e1      	lsls	r1, r4, #3
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	6113      	str	r3, [r2, #16]
 8005b84:	1878      	adds	r0, r7, r1
 8005b86:	b150      	cbz	r0, 8005b9e <_ai_platform_get_io_buffers_info+0x8e>
 8005b88:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	6043      	str	r3, [r0, #4]
 8005b90:	b11b      	cbz	r3, 8005b9a <_ai_platform_get_io_buffers_info+0x8a>
 8005b92:	885b      	ldrh	r3, [r3, #2]
 8005b94:	3300      	adds	r3, #0
 8005b96:	bf18      	it	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	507b      	str	r3, [r7, r1]
 8005b9c:	b903      	cbnz	r3, 8005ba0 <_ai_platform_get_io_buffers_info+0x90>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	6150      	str	r0, [r2, #20]
 8005ba2:	3401      	adds	r4, #1
 8005ba4:	e7bf      	b.n	8005b26 <_ai_platform_get_io_buffers_info+0x16>
 8005ba6:	b003      	add	sp, #12
 8005ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005bac <_platform_network_state_setup.isra.1>:
 8005bac:	b430      	push	{r4, r5}
 8005bae:	68dd      	ldr	r5, [r3, #12]
 8005bb0:	695c      	ldr	r4, [r3, #20]
 8005bb2:	68ed      	ldr	r5, [r5, #12]
 8005bb4:	68e4      	ldr	r4, [r4, #12]
 8005bb6:	fb04 f405 	mul.w	r4, r4, r5
 8005bba:	6084      	str	r4, [r0, #8]
 8005bbc:	8809      	ldrh	r1, [r1, #0]
 8005bbe:	fb04 f401 	mul.w	r4, r4, r1
 8005bc2:	60c4      	str	r4, [r0, #12]
 8005bc4:	6811      	ldr	r1, [r2, #0]
 8005bc6:	6041      	str	r1, [r0, #4]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	4414      	add	r4, r2
 8005bcc:	6004      	str	r4, [r0, #0]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	6814      	ldr	r4, [r2, #0]
 8005bd2:	00a4      	lsls	r4, r4, #2
 8005bd4:	d407      	bmi.n	8005be6 <_platform_network_state_setup.isra.1+0x3a>
 8005bd6:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8005bda:	1b64      	subs	r4, r4, r5
 8005bdc:	4421      	add	r1, r4
 8005bde:	6091      	str	r1, [r2, #8]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	6842      	ldr	r2, [r0, #4]
 8005be4:	60da      	str	r2, [r3, #12]
 8005be6:	bc30      	pop	{r4, r5}
 8005be8:	4770      	bx	lr
	...

08005bec <ai_platform_runtime_get_revision>:
 8005bec:	490a      	ldr	r1, [pc, #40]	; (8005c18 <ai_platform_runtime_get_revision+0x2c>)
 8005bee:	4a0b      	ldr	r2, [pc, #44]	; (8005c1c <ai_platform_runtime_get_revision+0x30>)
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	600b      	str	r3, [r1, #0]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	6010      	str	r0, [r2, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	2a00      	cmp	r2, #0
 8005c02:	d1fc      	bne.n	8005bfe <ai_platform_runtime_get_revision+0x12>
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <ai_platform_runtime_get_revision+0x34>)
 8005c06:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <ai_platform_runtime_get_revision+0x38>)
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <ai_platform_runtime_get_revision+0x3c>)
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d000      	beq.n	8005c14 <ai_platform_runtime_get_revision+0x28>
 8005c12:	e7fe      	b.n	8005c12 <ai_platform_runtime_get_revision+0x26>
 8005c14:	4805      	ldr	r0, [pc, #20]	; (8005c2c <ai_platform_runtime_get_revision+0x40>)
 8005c16:	4770      	bx	lr
 8005c18:	e0002000 	.word	0xe0002000
 8005c1c:	40023008 	.word	0x40023008
 8005c20:	40023000 	.word	0x40023000
 8005c24:	f407a5c2 	.word	0xf407a5c2
 8005c28:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c2c:	08066040 	.word	0x08066040

08005c30 <ai_platform_runtime_get_version>:
 8005c30:	490b      	ldr	r1, [pc, #44]	; (8005c60 <ai_platform_runtime_get_version+0x30>)
 8005c32:	4a0c      	ldr	r2, [pc, #48]	; (8005c64 <ai_platform_runtime_get_version+0x34>)
 8005c34:	680b      	ldr	r3, [r1, #0]
 8005c36:	2001      	movs	r0, #1
 8005c38:	f023 0301 	bic.w	r3, r3, #1
 8005c3c:	600b      	str	r3, [r1, #0]
 8005c3e:	b082      	sub	sp, #8
 8005c40:	4613      	mov	r3, r2
 8005c42:	6010      	str	r0, [r2, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	d1fc      	bne.n	8005c44 <ai_platform_runtime_get_version+0x14>
 8005c4a:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <ai_platform_runtime_get_version+0x38>)
 8005c4c:	4a07      	ldr	r2, [pc, #28]	; (8005c6c <ai_platform_runtime_get_version+0x3c>)
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <ai_platform_runtime_get_version+0x40>)
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d000      	beq.n	8005c5a <ai_platform_runtime_get_version+0x2a>
 8005c58:	e7fe      	b.n	8005c58 <ai_platform_runtime_get_version+0x28>
 8005c5a:	2006      	movs	r0, #6
 8005c5c:	b002      	add	sp, #8
 8005c5e:	4770      	bx	lr
 8005c60:	e0002000 	.word	0xe0002000
 8005c64:	40023008 	.word	0x40023008
 8005c68:	40023000 	.word	0x40023000
 8005c6c:	f407a5c2 	.word	0xf407a5c2
 8005c70:	b5e8b5cd 	.word	0xb5e8b5cd

08005c74 <ai_platform_api_get_version>:
 8005c74:	4913      	ldr	r1, [pc, #76]	; (8005cc4 <ai_platform_api_get_version+0x50>)
 8005c76:	4a14      	ldr	r2, [pc, #80]	; (8005cc8 <ai_platform_api_get_version+0x54>)
 8005c78:	680b      	ldr	r3, [r1, #0]
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	600b      	str	r3, [r1, #0]
 8005c82:	b082      	sub	sp, #8
 8005c84:	4613      	mov	r3, r2
 8005c86:	6010      	str	r0, [r2, #0]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d1fc      	bne.n	8005c88 <ai_platform_api_get_version+0x14>
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <ai_platform_api_get_version+0x58>)
 8005c90:	4a0f      	ldr	r2, [pc, #60]	; (8005cd0 <ai_platform_api_get_version+0x5c>)
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <ai_platform_api_get_version+0x60>)
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d000      	beq.n	8005c9e <ai_platform_api_get_version+0x2a>
 8005c9c:	e7fe      	b.n	8005c9c <ai_platform_api_get_version+0x28>
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <ai_platform_api_get_version+0x64>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	f362 0007 	bfi	r0, r2, #0, #8
 8005ca8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005cac:	f362 200f 	bfi	r0, r2, #8, #8
 8005cb0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005cb4:	f362 4017 	bfi	r0, r2, #16, #8
 8005cb8:	0e1b      	lsrs	r3, r3, #24
 8005cba:	f363 601f 	bfi	r0, r3, #24, #8
 8005cbe:	b002      	add	sp, #8
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	e0002000 	.word	0xe0002000
 8005cc8:	40023008 	.word	0x40023008
 8005ccc:	40023000 	.word	0x40023000
 8005cd0:	f407a5c2 	.word	0xf407a5c2
 8005cd4:	b5e8b5cd 	.word	0xb5e8b5cd
 8005cd8:	08066044 	.word	0x08066044

08005cdc <ai_platform_interface_api_get_version>:
 8005cdc:	4913      	ldr	r1, [pc, #76]	; (8005d2c <ai_platform_interface_api_get_version+0x50>)
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <ai_platform_interface_api_get_version+0x54>)
 8005ce0:	680b      	ldr	r3, [r1, #0]
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	600b      	str	r3, [r1, #0]
 8005cea:	b082      	sub	sp, #8
 8005cec:	4613      	mov	r3, r2
 8005cee:	6010      	str	r0, [r2, #0]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d1fc      	bne.n	8005cf0 <ai_platform_interface_api_get_version+0x14>
 8005cf6:	4b0f      	ldr	r3, [pc, #60]	; (8005d34 <ai_platform_interface_api_get_version+0x58>)
 8005cf8:	4a0f      	ldr	r2, [pc, #60]	; (8005d38 <ai_platform_interface_api_get_version+0x5c>)
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <ai_platform_interface_api_get_version+0x60>)
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d000      	beq.n	8005d06 <ai_platform_interface_api_get_version+0x2a>
 8005d04:	e7fe      	b.n	8005d04 <ai_platform_interface_api_get_version+0x28>
 8005d06:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <ai_platform_interface_api_get_version+0x64>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	f362 0007 	bfi	r0, r2, #0, #8
 8005d10:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005d14:	f362 200f 	bfi	r0, r2, #8, #8
 8005d18:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005d1c:	f362 4017 	bfi	r0, r2, #16, #8
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	f363 601f 	bfi	r0, r3, #24, #8
 8005d26:	b002      	add	sp, #8
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	e0002000 	.word	0xe0002000
 8005d30:	40023008 	.word	0x40023008
 8005d34:	40023000 	.word	0x40023000
 8005d38:	f407a5c2 	.word	0xf407a5c2
 8005d3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005d40:	08066048 	.word	0x08066048

08005d44 <ai_platform_context_acquire>:
 8005d44:	b410      	push	{r4}
 8005d46:	b120      	cbz	r0, 8005d52 <ai_platform_context_acquire+0xe>
 8005d48:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <ai_platform_context_acquire+0x3c>)
 8005d4a:	6802      	ldr	r2, [r0, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	bf18      	it	ne
 8005d50:	2000      	movne	r0, #0
 8005d52:	490c      	ldr	r1, [pc, #48]	; (8005d84 <ai_platform_context_acquire+0x40>)
 8005d54:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <ai_platform_context_acquire+0x44>)
 8005d56:	680b      	ldr	r3, [r1, #0]
 8005d58:	2401      	movs	r4, #1
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	600b      	str	r3, [r1, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	6014      	str	r4, [r2, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	2a00      	cmp	r2, #0
 8005d68:	d1fc      	bne.n	8005d64 <ai_platform_context_acquire+0x20>
 8005d6a:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <ai_platform_context_acquire+0x48>)
 8005d6c:	4a08      	ldr	r2, [pc, #32]	; (8005d90 <ai_platform_context_acquire+0x4c>)
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <ai_platform_context_acquire+0x50>)
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d000      	beq.n	8005d7a <ai_platform_context_acquire+0x36>
 8005d78:	e7fe      	b.n	8005d78 <ai_platform_context_acquire+0x34>
 8005d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	a1c00100 	.word	0xa1c00100
 8005d84:	e0002000 	.word	0xe0002000
 8005d88:	40023008 	.word	0x40023008
 8005d8c:	40023000 	.word	0x40023000
 8005d90:	f407a5c2 	.word	0xf407a5c2
 8005d94:	b5e8b5cd 	.word	0xb5e8b5cd

08005d98 <ai_platform_network_get_error>:
 8005d98:	b410      	push	{r4}
 8005d9a:	b120      	cbz	r0, 8005da6 <ai_platform_network_get_error+0xe>
 8005d9c:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <ai_platform_network_get_error+0x4c>)
 8005d9e:	6802      	ldr	r2, [r0, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	bf18      	it	ne
 8005da4:	2000      	movne	r0, #0
 8005da6:	4910      	ldr	r1, [pc, #64]	; (8005de8 <ai_platform_network_get_error+0x50>)
 8005da8:	4a10      	ldr	r2, [pc, #64]	; (8005dec <ai_platform_network_get_error+0x54>)
 8005daa:	680b      	ldr	r3, [r1, #0]
 8005dac:	2401      	movs	r4, #1
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	600b      	str	r3, [r1, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	6014      	str	r4, [r2, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	2a00      	cmp	r2, #0
 8005dbc:	d1fc      	bne.n	8005db8 <ai_platform_network_get_error+0x20>
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <ai_platform_network_get_error+0x58>)
 8005dc0:	4a0c      	ldr	r2, [pc, #48]	; (8005df4 <ai_platform_network_get_error+0x5c>)
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <ai_platform_network_get_error+0x60>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d000      	beq.n	8005dce <ai_platform_network_get_error+0x36>
 8005dcc:	e7fe      	b.n	8005dcc <ai_platform_network_get_error+0x34>
 8005dce:	b120      	cbz	r0, 8005dda <ai_platform_network_get_error+0x42>
 8005dd0:	3010      	adds	r0, #16
 8005dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dd6:	f000 bc75 	b.w	80066c4 <core_get_error>
 8005dda:	f241 0010 	movw	r0, #4112	; 0x1010
 8005dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	a1c00100 	.word	0xa1c00100
 8005de8:	e0002000 	.word	0xe0002000
 8005dec:	40023008 	.word	0x40023008
 8005df0:	40023000 	.word	0x40023000
 8005df4:	f407a5c2 	.word	0xf407a5c2
 8005df8:	b5e8b5cd 	.word	0xb5e8b5cd

08005dfc <ai_platform_api_get_network_report>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	460c      	mov	r4, r1
 8005e00:	4605      	mov	r5, r0
 8005e02:	b120      	cbz	r0, 8005e0e <ai_platform_api_get_network_report+0x12>
 8005e04:	4b71      	ldr	r3, [pc, #452]	; (8005fcc <ai_platform_api_get_network_report+0x1d0>)
 8005e06:	6802      	ldr	r2, [r0, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	bf18      	it	ne
 8005e0c:	2500      	movne	r5, #0
 8005e0e:	4970      	ldr	r1, [pc, #448]	; (8005fd0 <ai_platform_api_get_network_report+0x1d4>)
 8005e10:	4a70      	ldr	r2, [pc, #448]	; (8005fd4 <ai_platform_api_get_network_report+0x1d8>)
 8005e12:	680b      	ldr	r3, [r1, #0]
 8005e14:	2001      	movs	r0, #1
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	600b      	str	r3, [r1, #0]
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	6010      	str	r0, [r2, #0]
 8005e20:	680b      	ldr	r3, [r1, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1fc      	bne.n	8005e20 <ai_platform_api_get_network_report+0x24>
 8005e26:	4a6c      	ldr	r2, [pc, #432]	; (8005fd8 <ai_platform_api_get_network_report+0x1dc>)
 8005e28:	496c      	ldr	r1, [pc, #432]	; (8005fdc <ai_platform_api_get_network_report+0x1e0>)
 8005e2a:	6011      	str	r1, [r2, #0]
 8005e2c:	6811      	ldr	r1, [r2, #0]
 8005e2e:	4a6c      	ldr	r2, [pc, #432]	; (8005fe0 <ai_platform_api_get_network_report+0x1e4>)
 8005e30:	4291      	cmp	r1, r2
 8005e32:	d000      	beq.n	8005e36 <ai_platform_api_get_network_report+0x3a>
 8005e34:	e7fe      	b.n	8005e34 <ai_platform_api_get_network_report+0x38>
 8005e36:	2d00      	cmp	r5, #0
 8005e38:	d062      	beq.n	8005f00 <ai_platform_api_get_network_report+0x104>
 8005e3a:	2c00      	cmp	r4, #0
 8005e3c:	d062      	beq.n	8005f04 <ai_platform_api_get_network_report+0x108>
 8005e3e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005e40:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	d056      	beq.n	8005ef4 <ai_platform_api_get_network_report+0xf8>
 8005e46:	2301      	movs	r3, #1
 8005e48:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005e4a:	6913      	ldr	r3, [r2, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00c      	beq.n	8005e6a <ai_platform_api_get_network_report+0x6e>
 8005e50:	b15b      	cbz	r3, 8005e6a <ai_platform_api_get_network_report+0x6e>
 8005e52:	2202      	movs	r2, #2
 8005e54:	e003      	b.n	8005e5e <ai_platform_api_get_network_report+0x62>
 8005e56:	1c50      	adds	r0, r2, #1
 8005e58:	460b      	mov	r3, r1
 8005e5a:	b121      	cbz	r1, 8005e66 <ai_platform_api_get_network_report+0x6a>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	66e2      	str	r2, [r4, #108]	; 0x6c
 8005e60:	6919      	ldr	r1, [r3, #16]
 8005e62:	4299      	cmp	r1, r3
 8005e64:	d1f7      	bne.n	8005e56 <ai_platform_api_get_network_report+0x5a>
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	d044      	beq.n	8005ef4 <ai_platform_api_get_network_report+0xf8>
 8005e6a:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8005e6e:	b100      	cbz	r0, 8005e72 <ai_platform_api_get_network_report+0x76>
 8005e70:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8005e72:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8005e76:	f7ff fe4b 	bl	8005b10 <_ai_platform_get_io_buffers_info>
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	8620      	strh	r0, [r4, #48]	; 0x30
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d05f      	beq.n	8005f42 <ai_platform_api_get_network_report+0x146>
 8005e82:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	bf8a      	itet	hi
 8005e8a:	6ce8      	ldrhi	r0, [r5, #76]	; 0x4c
 8005e8c:	2000      	movls	r0, #0
 8005e8e:	300c      	addhi	r0, #12
 8005e90:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8005e94:	f7ff fe3c 	bl	8005b10 <_ai_platform_get_io_buffers_info>
 8005e98:	4606      	mov	r6, r0
 8005e9a:	8660      	strh	r0, [r4, #50]	; 0x32
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d048      	beq.n	8005f32 <ai_platform_api_get_network_report+0x136>
 8005ea0:	686b      	ldr	r3, [r5, #4]
 8005ea2:	6723      	str	r3, [r4, #112]	; 0x70
 8005ea4:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8005ea8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005eaa:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8005eae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005eb0:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005eb4:	e886 0003 	stmia.w	r6, {r0, r1}
 8005eb8:	f105 0718 	add.w	r7, r5, #24
 8005ebc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005ebe:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8005ec2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005ec4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005ec8:	e886 0003 	stmia.w	r6, {r0, r1}
 8005ecc:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <ai_platform_api_get_network_report+0x1d4>)
 8005ece:	4941      	ldr	r1, [pc, #260]	; (8005fd4 <ai_platform_api_get_network_report+0x1d8>)
 8005ed0:	6813      	ldr	r3, [r2, #0]
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	460a      	mov	r2, r1
 8005edc:	6008      	str	r0, [r1, #0]
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1fc      	bne.n	8005ede <ai_platform_api_get_network_report+0xe2>
 8005ee4:	4b3c      	ldr	r3, [pc, #240]	; (8005fd8 <ai_platform_api_get_network_report+0x1dc>)
 8005ee6:	493d      	ldr	r1, [pc, #244]	; (8005fdc <ai_platform_api_get_network_report+0x1e0>)
 8005ee8:	6019      	str	r1, [r3, #0]
 8005eea:	6819      	ldr	r1, [r3, #0]
 8005eec:	4b3c      	ldr	r3, [pc, #240]	; (8005fe0 <ai_platform_api_get_network_report+0x1e4>)
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	d00a      	beq.n	8005f08 <ai_platform_api_get_network_report+0x10c>
 8005ef2:	e7fe      	b.n	8005ef2 <ai_platform_api_get_network_report+0xf6>
 8005ef4:	f105 0010 	add.w	r0, r5, #16
 8005ef8:	2218      	movs	r2, #24
 8005efa:	2111      	movs	r1, #17
 8005efc:	f000 fbe8 	bl	80066d0 <core_set_error>
 8005f00:	2000      	movs	r0, #0
 8005f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f04:	4620      	mov	r0, r4
 8005f06:	e7fc      	b.n	8005f02 <ai_platform_api_get_network_report+0x106>
 8005f08:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <ai_platform_api_get_network_report+0x1e8>)
 8005f0a:	4831      	ldr	r0, [pc, #196]	; (8005fd0 <ai_platform_api_get_network_report+0x1d4>)
 8005f0c:	6123      	str	r3, [r4, #16]
 8005f0e:	6803      	ldr	r3, [r0, #0]
 8005f10:	4930      	ldr	r1, [pc, #192]	; (8005fd4 <ai_platform_api_get_network_report+0x1d8>)
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	6003      	str	r3, [r0, #0]
 8005f18:	2301      	movs	r3, #1
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	680b      	ldr	r3, [r1, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1fc      	bne.n	8005f1c <ai_platform_api_get_network_report+0x120>
 8005f22:	4b2d      	ldr	r3, [pc, #180]	; (8005fd8 <ai_platform_api_get_network_report+0x1dc>)
 8005f24:	4a2d      	ldr	r2, [pc, #180]	; (8005fdc <ai_platform_api_get_network_report+0x1e0>)
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b2d      	ldr	r3, [pc, #180]	; (8005fe0 <ai_platform_api_get_network_report+0x1e4>)
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d010      	beq.n	8005f52 <ai_platform_api_get_network_report+0x156>
 8005f30:	e7fe      	b.n	8005f30 <ai_platform_api_get_network_report+0x134>
 8005f32:	f105 0010 	add.w	r0, r5, #16
 8005f36:	2218      	movs	r2, #24
 8005f38:	2113      	movs	r1, #19
 8005f3a:	f000 fbc9 	bl	80066d0 <core_set_error>
 8005f3e:	4630      	mov	r0, r6
 8005f40:	e7df      	b.n	8005f02 <ai_platform_api_get_network_report+0x106>
 8005f42:	f105 0010 	add.w	r0, r5, #16
 8005f46:	2218      	movs	r2, #24
 8005f48:	2112      	movs	r1, #18
 8005f4a:	f000 fbc1 	bl	80066d0 <core_set_error>
 8005f4e:	4630      	mov	r0, r6
 8005f50:	e7d7      	b.n	8005f02 <ai_platform_api_get_network_report+0x106>
 8005f52:	2306      	movs	r3, #6
 8005f54:	481e      	ldr	r0, [pc, #120]	; (8005fd0 <ai_platform_api_get_network_report+0x1d4>)
 8005f56:	6163      	str	r3, [r4, #20]
 8005f58:	6803      	ldr	r3, [r0, #0]
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <ai_platform_api_get_network_report+0x1d8>)
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	6003      	str	r3, [r0, #0]
 8005f62:	2301      	movs	r3, #1
 8005f64:	600b      	str	r3, [r1, #0]
 8005f66:	6813      	ldr	r3, [r2, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1fc      	bne.n	8005f66 <ai_platform_api_get_network_report+0x16a>
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <ai_platform_api_get_network_report+0x1dc>)
 8005f6e:	491b      	ldr	r1, [pc, #108]	; (8005fdc <ai_platform_api_get_network_report+0x1e0>)
 8005f70:	6019      	str	r1, [r3, #0]
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <ai_platform_api_get_network_report+0x1e4>)
 8005f76:	4299      	cmp	r1, r3
 8005f78:	d000      	beq.n	8005f7c <ai_platform_api_get_network_report+0x180>
 8005f7a:	e7fe      	b.n	8005f7a <ai_platform_api_get_network_report+0x17e>
 8005f7c:	f240 1301 	movw	r3, #257	; 0x101
 8005f80:	4913      	ldr	r1, [pc, #76]	; (8005fd0 <ai_platform_api_get_network_report+0x1d4>)
 8005f82:	6263      	str	r3, [r4, #36]	; 0x24
 8005f84:	680b      	ldr	r3, [r1, #0]
 8005f86:	4813      	ldr	r0, [pc, #76]	; (8005fd4 <ai_platform_api_get_network_report+0x1d8>)
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	600b      	str	r3, [r1, #0]
 8005f8e:	2301      	movs	r3, #1
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	6802      	ldr	r2, [r0, #0]
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	d1fc      	bne.n	8005f92 <ai_platform_api_get_network_report+0x196>
 8005f98:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <ai_platform_api_get_network_report+0x1dc>)
 8005f9a:	4910      	ldr	r1, [pc, #64]	; (8005fdc <ai_platform_api_get_network_report+0x1e0>)
 8005f9c:	6019      	str	r1, [r3, #0]
 8005f9e:	6819      	ldr	r1, [r3, #0]
 8005fa0:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <ai_platform_api_get_network_report+0x1e4>)
 8005fa2:	4299      	cmp	r1, r3
 8005fa4:	d000      	beq.n	8005fa8 <ai_platform_api_get_network_report+0x1ac>
 8005fa6:	e7fe      	b.n	8005fa6 <ai_platform_api_get_network_report+0x1aa>
 8005fa8:	f240 4301 	movw	r3, #1025	; 0x401
 8005fac:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fae:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8005fb0:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8005fb4:	0e19      	lsrs	r1, r3, #24
 8005fb6:	0c1a      	lsrs	r2, r3, #16
 8005fb8:	0a1b      	lsrs	r3, r3, #8
 8005fba:	f884 1020 	strb.w	r1, [r4, #32]
 8005fbe:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8005fc2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	e79b      	b.n	8005f02 <ai_platform_api_get_network_report+0x106>
 8005fca:	bf00      	nop
 8005fcc:	a1c00100 	.word	0xa1c00100
 8005fd0:	e0002000 	.word	0xe0002000
 8005fd4:	40023008 	.word	0x40023008
 8005fd8:	40023000 	.word	0x40023000
 8005fdc:	f407a5c2 	.word	0xf407a5c2
 8005fe0:	b5e8b5cd 	.word	0xb5e8b5cd
 8005fe4:	08066040 	.word	0x08066040

08005fe8 <ai_platform_network_create>:
 8005fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fec:	4f30      	ldr	r7, [pc, #192]	; (80060b0 <ai_platform_network_create+0xc8>)
 8005fee:	4e31      	ldr	r6, [pc, #196]	; (80060b4 <ai_platform_network_create+0xcc>)
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	f021 0101 	bic.w	r1, r1, #1
 8005ff8:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8005ffc:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8006000:	6039      	str	r1, [r7, #0]
 8006002:	2101      	movs	r1, #1
 8006004:	6031      	str	r1, [r6, #0]
 8006006:	6831      	ldr	r1, [r6, #0]
 8006008:	2900      	cmp	r1, #0
 800600a:	d1fc      	bne.n	8006006 <ai_platform_network_create+0x1e>
 800600c:	492a      	ldr	r1, [pc, #168]	; (80060b8 <ai_platform_network_create+0xd0>)
 800600e:	4d2b      	ldr	r5, [pc, #172]	; (80060bc <ai_platform_network_create+0xd4>)
 8006010:	600d      	str	r5, [r1, #0]
 8006012:	680d      	ldr	r5, [r1, #0]
 8006014:	492a      	ldr	r1, [pc, #168]	; (80060c0 <ai_platform_network_create+0xd8>)
 8006016:	428d      	cmp	r5, r1
 8006018:	d000      	beq.n	800601c <ai_platform_network_create+0x34>
 800601a:	e7fe      	b.n	800601a <ai_platform_network_create+0x32>
 800601c:	b1e0      	cbz	r0, 8006058 <ai_platform_network_create+0x70>
 800601e:	4680      	mov	r8, r0
 8006020:	461d      	mov	r5, r3
 8006022:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <ai_platform_network_create+0xdc>)
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	f8c8 2000 	str.w	r2, [r8]
 800602a:	4617      	mov	r7, r2
 800602c:	f000 fb48 	bl	80066c0 <core_init>
 8006030:	b1b8      	cbz	r0, 8006062 <ai_platform_network_create+0x7a>
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <ai_platform_network_create+0xc8>)
 8006034:	491f      	ldr	r1, [pc, #124]	; (80060b4 <ai_platform_network_create+0xcc>)
 8006036:	6813      	ldr	r3, [r2, #0]
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	2301      	movs	r3, #1
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	680e      	ldr	r6, [r1, #0]
 8006044:	2e00      	cmp	r6, #0
 8006046:	d1fc      	bne.n	8006042 <ai_platform_network_create+0x5a>
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <ai_platform_network_create+0xd0>)
 800604a:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <ai_platform_network_create+0xd4>)
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <ai_platform_network_create+0xd8>)
 8006052:	429a      	cmp	r2, r3
 8006054:	d016      	beq.n	8006084 <ai_platform_network_create+0x9c>
 8006056:	e7fe      	b.n	8006056 <ai_platform_network_create+0x6e>
 8006058:	f241 0010 	movw	r0, #4112	; 0x1010
 800605c:	b003      	add	sp, #12
 800605e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006062:	062d      	lsls	r5, r5, #24
 8006064:	0424      	lsls	r4, r4, #16
 8006066:	2130      	movs	r1, #48	; 0x30
 8006068:	2300      	movs	r3, #0
 800606a:	f8c8 3000 	str.w	r3, [r8]
 800606e:	2210      	movs	r2, #16
 8006070:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 8006074:	2000      	movs	r0, #0
 8006076:	432b      	orrs	r3, r5
 8006078:	f361 0007 	bfi	r0, r1, #0, #8
 800607c:	663b      	str	r3, [r7, #96]	; 0x60
 800607e:	f362 201f 	bfi	r0, r2, #8, #24
 8006082:	e7eb      	b.n	800605c <ai_platform_network_create+0x74>
 8006084:	062d      	lsls	r5, r5, #24
 8006086:	0424      	lsls	r4, r4, #16
 8006088:	ea45 0304 	orr.w	r3, r5, r4
 800608c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8006090:	d001      	beq.n	8006096 <ai_platform_network_create+0xae>
 8006092:	2101      	movs	r1, #1
 8006094:	e7e8      	b.n	8006068 <ai_platform_network_create+0x80>
 8006096:	a802      	add	r0, sp, #8
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <ai_platform_network_create+0xe0>)
 800609a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800609e:	f000 ffe7 	bl	8007070 <ai_check_custom_types>
 80060a2:	b110      	cbz	r0, 80060aa <ai_platform_network_create+0xc2>
 80060a4:	4632      	mov	r2, r6
 80060a6:	4631      	mov	r1, r6
 80060a8:	e7e2      	b.n	8006070 <ai_platform_network_create+0x88>
 80060aa:	2102      	movs	r1, #2
 80060ac:	e7dc      	b.n	8006068 <ai_platform_network_create+0x80>
 80060ae:	bf00      	nop
 80060b0:	e0002000 	.word	0xe0002000
 80060b4:	40023008 	.word	0x40023008
 80060b8:	40023000 	.word	0x40023000
 80060bc:	f407a5c2 	.word	0xf407a5c2
 80060c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80060c4:	a1c00100 	.word	0xa1c00100
 80060c8:	84048403 	.word	0x84048403

080060cc <ai_platform_network_destroy>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	b1d8      	cbz	r0, 8006108 <ai_platform_network_destroy+0x3c>
 80060d0:	4a11      	ldr	r2, [pc, #68]	; (8006118 <ai_platform_network_destroy+0x4c>)
 80060d2:	6803      	ldr	r3, [r0, #0]
 80060d4:	4293      	cmp	r3, r2
 80060d6:	bf0c      	ite	eq
 80060d8:	4603      	moveq	r3, r0
 80060da:	2300      	movne	r3, #0
 80060dc:	4c0f      	ldr	r4, [pc, #60]	; (800611c <ai_platform_network_destroy+0x50>)
 80060de:	4910      	ldr	r1, [pc, #64]	; (8006120 <ai_platform_network_destroy+0x54>)
 80060e0:	6822      	ldr	r2, [r4, #0]
 80060e2:	2501      	movs	r5, #1
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	6022      	str	r2, [r4, #0]
 80060ea:	460a      	mov	r2, r1
 80060ec:	600d      	str	r5, [r1, #0]
 80060ee:	6814      	ldr	r4, [r2, #0]
 80060f0:	2c00      	cmp	r4, #0
 80060f2:	d1fc      	bne.n	80060ee <ai_platform_network_destroy+0x22>
 80060f4:	4a0b      	ldr	r2, [pc, #44]	; (8006124 <ai_platform_network_destroy+0x58>)
 80060f6:	490c      	ldr	r1, [pc, #48]	; (8006128 <ai_platform_network_destroy+0x5c>)
 80060f8:	6011      	str	r1, [r2, #0]
 80060fa:	6811      	ldr	r1, [r2, #0]
 80060fc:	4a0b      	ldr	r2, [pc, #44]	; (800612c <ai_platform_network_destroy+0x60>)
 80060fe:	4291      	cmp	r1, r2
 8006100:	d000      	beq.n	8006104 <ai_platform_network_destroy+0x38>
 8006102:	e7fe      	b.n	8006102 <ai_platform_network_destroy+0x36>
 8006104:	b913      	cbnz	r3, 800610c <ai_platform_network_destroy+0x40>
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	4603      	mov	r3, r0
 800610a:	e7e7      	b.n	80060dc <ai_platform_network_destroy+0x10>
 800610c:	4618      	mov	r0, r3
 800610e:	f001 f853 	bl	80071b8 <ai_layers_destroy_all>
 8006112:	4620      	mov	r0, r4
 8006114:	bd38      	pop	{r3, r4, r5, pc}
 8006116:	bf00      	nop
 8006118:	a1c00100 	.word	0xa1c00100
 800611c:	e0002000 	.word	0xe0002000
 8006120:	40023008 	.word	0x40023008
 8006124:	40023000 	.word	0x40023000
 8006128:	f407a5c2 	.word	0xf407a5c2
 800612c:	b5e8b5cd 	.word	0xb5e8b5cd

08006130 <ai_platform_network_init>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	460c      	mov	r4, r1
 8006134:	4605      	mov	r5, r0
 8006136:	b120      	cbz	r0, 8006142 <ai_platform_network_init+0x12>
 8006138:	4b30      	ldr	r3, [pc, #192]	; (80061fc <ai_platform_network_init+0xcc>)
 800613a:	6802      	ldr	r2, [r0, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	bf18      	it	ne
 8006140:	2500      	movne	r5, #0
 8006142:	492f      	ldr	r1, [pc, #188]	; (8006200 <ai_platform_network_init+0xd0>)
 8006144:	4a2f      	ldr	r2, [pc, #188]	; (8006204 <ai_platform_network_init+0xd4>)
 8006146:	680b      	ldr	r3, [r1, #0]
 8006148:	2001      	movs	r0, #1
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	600b      	str	r3, [r1, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	6010      	str	r0, [r2, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	2a00      	cmp	r2, #0
 8006158:	d1fc      	bne.n	8006154 <ai_platform_network_init+0x24>
 800615a:	4b2b      	ldr	r3, [pc, #172]	; (8006208 <ai_platform_network_init+0xd8>)
 800615c:	4a2b      	ldr	r2, [pc, #172]	; (800620c <ai_platform_network_init+0xdc>)
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b2b      	ldr	r3, [pc, #172]	; (8006210 <ai_platform_network_init+0xe0>)
 8006164:	429a      	cmp	r2, r3
 8006166:	d000      	beq.n	800616a <ai_platform_network_init+0x3a>
 8006168:	e7fe      	b.n	8006168 <ai_platform_network_init+0x38>
 800616a:	b1dd      	cbz	r5, 80061a4 <ai_platform_network_init+0x74>
 800616c:	b1e4      	cbz	r4, 80061a8 <ai_platform_network_init+0x78>
 800616e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006170:	6926      	ldr	r6, [r4, #16]
 8006172:	b30f      	cbz	r7, 80061b8 <ai_platform_network_init+0x88>
 8006174:	b38e      	cbz	r6, 80061da <ai_platform_network_init+0xaa>
 8006176:	4627      	mov	r7, r4
 8006178:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800617a:	f105 0618 	add.w	r6, r5, #24
 800617e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006180:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006184:	e886 0003 	stmia.w	r6, {r0, r1}
 8006188:	3418      	adds	r4, #24
 800618a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800618c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8006190:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006196:	2303      	movs	r3, #3
 8006198:	e886 0003 	stmia.w	r6, {r0, r1}
 800619c:	60eb      	str	r3, [r5, #12]
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 ff90 	bl	80070c4 <ai_layers_init_all>
 80061a4:	4628      	mov	r0, r5
 80061a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a8:	f105 0010 	add.w	r0, r5, #16
 80061ac:	2211      	movs	r2, #17
 80061ae:	2110      	movs	r1, #16
 80061b0:	4625      	mov	r5, r4
 80061b2:	f000 fa8d 	bl	80066d0 <core_set_error>
 80061b6:	e7f5      	b.n	80061a4 <ai_platform_network_init+0x74>
 80061b8:	8c21      	ldrh	r1, [r4, #32]
 80061ba:	8be2      	ldrh	r2, [r4, #30]
 80061bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061be:	fb02 f201 	mul.w	r2, r2, r1
 80061c2:	fb03 f302 	mul.w	r3, r3, r2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0d4      	beq.n	8006174 <ai_platform_network_init+0x44>
 80061ca:	f105 0010 	add.w	r0, r5, #16
 80061ce:	2213      	movs	r2, #19
 80061d0:	2110      	movs	r1, #16
 80061d2:	463d      	mov	r5, r7
 80061d4:	f000 fa7c 	bl	80066d0 <core_set_error>
 80061d8:	e7e4      	b.n	80061a4 <ai_platform_network_init+0x74>
 80061da:	8921      	ldrh	r1, [r4, #8]
 80061dc:	88e2      	ldrh	r2, [r4, #6]
 80061de:	68e3      	ldr	r3, [r4, #12]
 80061e0:	fb02 f201 	mul.w	r2, r2, r1
 80061e4:	fb03 f302 	mul.w	r3, r3, r2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0c4      	beq.n	8006176 <ai_platform_network_init+0x46>
 80061ec:	f105 0010 	add.w	r0, r5, #16
 80061f0:	2212      	movs	r2, #18
 80061f2:	2110      	movs	r1, #16
 80061f4:	4635      	mov	r5, r6
 80061f6:	f000 fa6b 	bl	80066d0 <core_set_error>
 80061fa:	e7d3      	b.n	80061a4 <ai_platform_network_init+0x74>
 80061fc:	a1c00100 	.word	0xa1c00100
 8006200:	e0002000 	.word	0xe0002000
 8006204:	40023008 	.word	0x40023008
 8006208:	40023000 	.word	0x40023000
 800620c:	f407a5c2 	.word	0xf407a5c2
 8006210:	b5e8b5cd 	.word	0xb5e8b5cd

08006214 <ai_platform_network_post_init>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4604      	mov	r4, r0
 8006218:	b120      	cbz	r0, 8006224 <ai_platform_network_post_init+0x10>
 800621a:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <ai_platform_network_post_init+0x80>)
 800621c:	6802      	ldr	r2, [r0, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	bf18      	it	ne
 8006222:	2400      	movne	r4, #0
 8006224:	491c      	ldr	r1, [pc, #112]	; (8006298 <ai_platform_network_post_init+0x84>)
 8006226:	4a1d      	ldr	r2, [pc, #116]	; (800629c <ai_platform_network_post_init+0x88>)
 8006228:	680b      	ldr	r3, [r1, #0]
 800622a:	2001      	movs	r0, #1
 800622c:	f023 0301 	bic.w	r3, r3, #1
 8006230:	600b      	str	r3, [r1, #0]
 8006232:	4613      	mov	r3, r2
 8006234:	6010      	str	r0, [r2, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	2a00      	cmp	r2, #0
 800623a:	d1fc      	bne.n	8006236 <ai_platform_network_post_init+0x22>
 800623c:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <ai_platform_network_post_init+0x8c>)
 800623e:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <ai_platform_network_post_init+0x90>)
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <ai_platform_network_post_init+0x94>)
 8006246:	429a      	cmp	r2, r3
 8006248:	d000      	beq.n	800624c <ai_platform_network_post_init+0x38>
 800624a:	e7fe      	b.n	800624a <ai_platform_network_post_init+0x36>
 800624c:	b1bc      	cbz	r4, 800627e <ai_platform_network_post_init+0x6a>
 800624e:	68e3      	ldr	r3, [r4, #12]
 8006250:	f013 0502 	ands.w	r5, r3, #2
 8006254:	d015      	beq.n	8006282 <ai_platform_network_post_init+0x6e>
 8006256:	4620      	mov	r0, r4
 8006258:	f000 ff48 	bl	80070ec <ai_layers_post_init_all>
 800625c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800625e:	b163      	cbz	r3, 800627a <ai_platform_network_post_init+0x66>
 8006260:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8006262:	b91d      	cbnz	r5, 800626c <ai_platform_network_post_init+0x58>
 8006264:	e009      	b.n	800627a <ai_platform_network_post_init+0x66>
 8006266:	461d      	mov	r5, r3
 8006268:	b13b      	cbz	r3, 800627a <ai_platform_network_post_init+0x66>
 800626a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800626c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800626e:	4629      	mov	r1, r5
 8006270:	2000      	movs	r0, #0
 8006272:	4798      	blx	r3
 8006274:	692b      	ldr	r3, [r5, #16]
 8006276:	42ab      	cmp	r3, r5
 8006278:	d1f5      	bne.n	8006266 <ai_platform_network_post_init+0x52>
 800627a:	2001      	movs	r0, #1
 800627c:	bd38      	pop	{r3, r4, r5, pc}
 800627e:	4620      	mov	r0, r4
 8006280:	bd38      	pop	{r3, r4, r5, pc}
 8006282:	f104 0010 	add.w	r0, r4, #16
 8006286:	2210      	movs	r2, #16
 8006288:	2111      	movs	r1, #17
 800628a:	f000 fa21 	bl	80066d0 <core_set_error>
 800628e:	4628      	mov	r0, r5
 8006290:	bd38      	pop	{r3, r4, r5, pc}
 8006292:	bf00      	nop
 8006294:	a1c00100 	.word	0xa1c00100
 8006298:	e0002000 	.word	0xe0002000
 800629c:	40023008 	.word	0x40023008
 80062a0:	40023000 	.word	0x40023000
 80062a4:	f407a5c2 	.word	0xf407a5c2
 80062a8:	b5e8b5cd 	.word	0xb5e8b5cd

080062ac <ai_platform_network_process>:
 80062ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b0:	b083      	sub	sp, #12
 80062b2:	4604      	mov	r4, r0
 80062b4:	9201      	str	r2, [sp, #4]
 80062b6:	b120      	cbz	r0, 80062c2 <ai_platform_network_process+0x16>
 80062b8:	4ba5      	ldr	r3, [pc, #660]	; (8006550 <ai_platform_network_process+0x2a4>)
 80062ba:	6802      	ldr	r2, [r0, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	bf18      	it	ne
 80062c0:	2400      	movne	r4, #0
 80062c2:	48a4      	ldr	r0, [pc, #656]	; (8006554 <ai_platform_network_process+0x2a8>)
 80062c4:	4ba4      	ldr	r3, [pc, #656]	; (8006558 <ai_platform_network_process+0x2ac>)
 80062c6:	6802      	ldr	r2, [r0, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	6002      	str	r2, [r0, #0]
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	2a00      	cmp	r2, #0
 80062d6:	d1fc      	bne.n	80062d2 <ai_platform_network_process+0x26>
 80062d8:	4ba0      	ldr	r3, [pc, #640]	; (800655c <ai_platform_network_process+0x2b0>)
 80062da:	4aa1      	ldr	r2, [pc, #644]	; (8006560 <ai_platform_network_process+0x2b4>)
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4ba0      	ldr	r3, [pc, #640]	; (8006564 <ai_platform_network_process+0x2b8>)
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d000      	beq.n	80062e8 <ai_platform_network_process+0x3c>
 80062e6:	e7fe      	b.n	80062e6 <ai_platform_network_process+0x3a>
 80062e8:	2c00      	cmp	r4, #0
 80062ea:	d066      	beq.n	80063ba <ai_platform_network_process+0x10e>
 80062ec:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80062f0:	b107      	cbz	r7, 80062f4 <ai_platform_network_process+0x48>
 80062f2:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80062f4:	68e3      	ldr	r3, [r4, #12]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	2600      	movs	r6, #0
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	6166      	str	r6, [r4, #20]
 8006300:	f040 80fe 	bne.w	8006500 <ai_platform_network_process+0x254>
 8006304:	2900      	cmp	r1, #0
 8006306:	d07f      	beq.n	8006408 <ai_platform_network_process+0x15c>
 8006308:	2f00      	cmp	r7, #0
 800630a:	d07d      	beq.n	8006408 <ai_platform_network_process+0x15c>
 800630c:	883b      	ldrh	r3, [r7, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d07a      	beq.n	8006408 <ai_platform_network_process+0x15c>
 8006312:	460d      	mov	r5, r1
 8006314:	46a0      	mov	r8, r4
 8006316:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800631a:	429e      	cmp	r6, r3
 800631c:	d27d      	bcs.n	800641a <ai_platform_network_process+0x16e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d07a      	beq.n	800641a <ai_platform_network_process+0x16e>
 8006324:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8006328:	2c00      	cmp	r4, #0
 800632a:	d076      	beq.n	800641a <ai_platform_network_process+0x16e>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8006334:	d067      	beq.n	8006406 <ai_platform_network_process+0x15a>
 8006336:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800633a:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800633e:	69a0      	ldr	r0, [r4, #24]
 8006340:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8006344:	6841      	ldr	r1, [r0, #4]
 8006346:	fb0b f30e 	mul.w	r3, fp, lr
 800634a:	fb0c f303 	mul.w	r3, ip, r3
 800634e:	4299      	cmp	r1, r3
 8006350:	d350      	bcc.n	80063f4 <ai_platform_network_process+0x148>
 8006352:	68e3      	ldr	r3, [r4, #12]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	455a      	cmp	r2, fp
 8006358:	d14c      	bne.n	80063f4 <ai_platform_network_process+0x148>
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	4572      	cmp	r2, lr
 800635e:	d149      	bne.n	80063f4 <ai_platform_network_process+0x148>
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	459c      	cmp	ip, r3
 8006364:	d146      	bne.n	80063f4 <ai_platform_network_process+0x148>
 8006366:	6800      	ldr	r0, [r0, #0]
 8006368:	f000 ff8a 	bl	8007280 <ai_array_get_byte_size>
 800636c:	68e2      	ldr	r2, [r4, #12]
 800636e:	6963      	ldr	r3, [r4, #20]
 8006370:	68d2      	ldr	r2, [r2, #12]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	fb03 f302 	mul.w	r3, r3, r2
 8006378:	4298      	cmp	r0, r3
 800637a:	d33b      	bcc.n	80063f4 <ai_platform_network_process+0x148>
 800637c:	69a3      	ldr	r3, [r4, #24]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	f000 ff32 	bl	80071e8 <ai_array_to_buffer_fmt>
 8006384:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8006388:	4043      	eors	r3, r0
 800638a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800638e:	d128      	bne.n	80063e2 <ai_platform_network_process+0x136>
 8006390:	68eb      	ldr	r3, [r5, #12]
 8006392:	b1f3      	cbz	r3, 80063d2 <ai_platform_network_process+0x126>
 8006394:	f8b5 b000 	ldrh.w	fp, [r5]
 8006398:	f1bb 0f00 	cmp.w	fp, #0
 800639c:	d012      	beq.n	80063c4 <ai_platform_network_process+0x118>
 800639e:	4623      	mov	r3, r4
 80063a0:	f105 020c 	add.w	r2, r5, #12
 80063a4:	4629      	mov	r1, r5
 80063a6:	4650      	mov	r0, sl
 80063a8:	f7ff fc00 	bl	8005bac <_platform_network_state_setup.isra.1>
 80063ac:	45d9      	cmp	r9, fp
 80063ae:	883b      	ldrh	r3, [r7, #0]
 80063b0:	bf38      	it	cc
 80063b2:	46d9      	movcc	r9, fp
 80063b4:	3601      	adds	r6, #1
 80063b6:	3518      	adds	r5, #24
 80063b8:	e7af      	b.n	800631a <ai_platform_network_process+0x6e>
 80063ba:	46a3      	mov	fp, r4
 80063bc:	4658      	mov	r0, fp
 80063be:	b003      	add	sp, #12
 80063c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c4:	f108 0010 	add.w	r0, r8, #16
 80063c8:	2221      	movs	r2, #33	; 0x21
 80063ca:	2112      	movs	r1, #18
 80063cc:	f000 f980 	bl	80066d0 <core_set_error>
 80063d0:	e7f4      	b.n	80063bc <ai_platform_network_process+0x110>
 80063d2:	f108 0010 	add.w	r0, r8, #16
 80063d6:	2217      	movs	r2, #23
 80063d8:	2112      	movs	r1, #18
 80063da:	469b      	mov	fp, r3
 80063dc:	f000 f978 	bl	80066d0 <core_set_error>
 80063e0:	e7ec      	b.n	80063bc <ai_platform_network_process+0x110>
 80063e2:	f108 0010 	add.w	r0, r8, #16
 80063e6:	2219      	movs	r2, #25
 80063e8:	2112      	movs	r1, #18
 80063ea:	f000 f971 	bl	80066d0 <core_set_error>
 80063ee:	f04f 0b00 	mov.w	fp, #0
 80063f2:	e7e3      	b.n	80063bc <ai_platform_network_process+0x110>
 80063f4:	f108 0010 	add.w	r0, r8, #16
 80063f8:	2218      	movs	r2, #24
 80063fa:	2112      	movs	r1, #18
 80063fc:	f000 f968 	bl	80066d0 <core_set_error>
 8006400:	f04f 0b00 	mov.w	fp, #0
 8006404:	e7da      	b.n	80063bc <ai_platform_network_process+0x110>
 8006406:	4644      	mov	r4, r8
 8006408:	f104 0010 	add.w	r0, r4, #16
 800640c:	2217      	movs	r2, #23
 800640e:	2112      	movs	r1, #18
 8006410:	f000 f95e 	bl	80066d0 <core_set_error>
 8006414:	f04f 0b00 	mov.w	fp, #0
 8006418:	e7d0      	b.n	80063bc <ai_platform_network_process+0x110>
 800641a:	9a01      	ldr	r2, [sp, #4]
 800641c:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8006420:	4644      	mov	r4, r8
 8006422:	2a00      	cmp	r2, #0
 8006424:	f000 80a2 	beq.w	800656c <ai_platform_network_process+0x2c0>
 8006428:	2b01      	cmp	r3, #1
 800642a:	f240 8140 	bls.w	80066ae <ai_platform_network_process+0x402>
 800642e:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8006432:	f118 0f0c 	cmn.w	r8, #12
 8006436:	f000 813a 	beq.w	80066ae <ai_platform_network_process+0x402>
 800643a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 8135 	beq.w	80066ae <ai_platform_network_process+0x402>
 8006444:	9d01      	ldr	r5, [sp, #4]
 8006446:	2700      	movs	r7, #0
 8006448:	3504      	adds	r5, #4
 800644a:	429f      	cmp	r7, r3
 800644c:	f080 808c 	bcs.w	8006568 <ai_platform_network_process+0x2bc>
 8006450:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8087 	beq.w	8006568 <ai_platform_network_process+0x2bc>
 800645a:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800645e:	2e00      	cmp	r6, #0
 8006460:	f000 8082 	beq.w	8006568 <ai_platform_network_process+0x2bc>
 8006464:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800646e:	d067      	beq.n	8006540 <ai_platform_network_process+0x294>
 8006470:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8006474:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8006478:	69b0      	ldr	r0, [r6, #24]
 800647a:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800647e:	6841      	ldr	r1, [r0, #4]
 8006480:	fb0b f30e 	mul.w	r3, fp, lr
 8006484:	fb0c f303 	mul.w	r3, ip, r3
 8006488:	4299      	cmp	r1, r3
 800648a:	f0c0 8110 	bcc.w	80066ae <ai_platform_network_process+0x402>
 800648e:	68f3      	ldr	r3, [r6, #12]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	455a      	cmp	r2, fp
 8006494:	f040 810b 	bne.w	80066ae <ai_platform_network_process+0x402>
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	4572      	cmp	r2, lr
 800649c:	f040 8107 	bne.w	80066ae <ai_platform_network_process+0x402>
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	459c      	cmp	ip, r3
 80064a4:	f040 8103 	bne.w	80066ae <ai_platform_network_process+0x402>
 80064a8:	6800      	ldr	r0, [r0, #0]
 80064aa:	f000 fee9 	bl	8007280 <ai_array_get_byte_size>
 80064ae:	68f2      	ldr	r2, [r6, #12]
 80064b0:	6973      	ldr	r3, [r6, #20]
 80064b2:	68d2      	ldr	r2, [r2, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	fb03 f302 	mul.w	r3, r3, r2
 80064ba:	4298      	cmp	r0, r3
 80064bc:	f0c0 80f7 	bcc.w	80066ae <ai_platform_network_process+0x402>
 80064c0:	69b3      	ldr	r3, [r6, #24]
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	f000 fe90 	bl	80071e8 <ai_array_to_buffer_fmt>
 80064c8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80064cc:	4043      	eors	r3, r0
 80064ce:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80064d2:	d12c      	bne.n	800652e <ai_platform_network_process+0x282>
 80064d4:	68eb      	ldr	r3, [r5, #12]
 80064d6:	b313      	cbz	r3, 800651e <ai_platform_network_process+0x272>
 80064d8:	f8b5 b000 	ldrh.w	fp, [r5]
 80064dc:	f1bb 0f00 	cmp.w	fp, #0
 80064e0:	d016      	beq.n	8006510 <ai_platform_network_process+0x264>
 80064e2:	4633      	mov	r3, r6
 80064e4:	f105 020c 	add.w	r2, r5, #12
 80064e8:	4629      	mov	r1, r5
 80064ea:	4650      	mov	r0, sl
 80064ec:	f7ff fb5e 	bl	8005bac <_platform_network_state_setup.isra.1>
 80064f0:	45d9      	cmp	r9, fp
 80064f2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80064f6:	bf38      	it	cc
 80064f8:	46d9      	movcc	r9, fp
 80064fa:	3701      	adds	r7, #1
 80064fc:	3518      	adds	r5, #24
 80064fe:	e7a4      	b.n	800644a <ai_platform_network_process+0x19e>
 8006500:	f104 0010 	add.w	r0, r4, #16
 8006504:	2230      	movs	r2, #48	; 0x30
 8006506:	2111      	movs	r1, #17
 8006508:	f000 f8e2 	bl	80066d0 <core_set_error>
 800650c:	46b3      	mov	fp, r6
 800650e:	e755      	b.n	80063bc <ai_platform_network_process+0x110>
 8006510:	f104 0010 	add.w	r0, r4, #16
 8006514:	2221      	movs	r2, #33	; 0x21
 8006516:	2113      	movs	r1, #19
 8006518:	f000 f8da 	bl	80066d0 <core_set_error>
 800651c:	e74e      	b.n	80063bc <ai_platform_network_process+0x110>
 800651e:	f104 0010 	add.w	r0, r4, #16
 8006522:	2217      	movs	r2, #23
 8006524:	2113      	movs	r1, #19
 8006526:	469b      	mov	fp, r3
 8006528:	f000 f8d2 	bl	80066d0 <core_set_error>
 800652c:	e746      	b.n	80063bc <ai_platform_network_process+0x110>
 800652e:	f104 0010 	add.w	r0, r4, #16
 8006532:	2219      	movs	r2, #25
 8006534:	2113      	movs	r1, #19
 8006536:	f000 f8cb 	bl	80066d0 <core_set_error>
 800653a:	f04f 0b00 	mov.w	fp, #0
 800653e:	e73d      	b.n	80063bc <ai_platform_network_process+0x110>
 8006540:	f104 0010 	add.w	r0, r4, #16
 8006544:	2217      	movs	r2, #23
 8006546:	2113      	movs	r1, #19
 8006548:	f000 f8c2 	bl	80066d0 <core_set_error>
 800654c:	46d3      	mov	fp, sl
 800654e:	e735      	b.n	80063bc <ai_platform_network_process+0x110>
 8006550:	a1c00100 	.word	0xa1c00100
 8006554:	e0002000 	.word	0xe0002000
 8006558:	40023008 	.word	0x40023008
 800655c:	40023000 	.word	0x40023000
 8006560:	f407a5c2 	.word	0xf407a5c2
 8006564:	b5e8b5cd 	.word	0xb5e8b5cd
 8006568:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800656c:	f8a4 9014 	strh.w	r9, [r4, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 8099 	beq.w	80066a8 <ai_platform_network_process+0x3fc>
 8006576:	2b01      	cmp	r3, #1
 8006578:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800657a:	f240 8093 	bls.w	80066a4 <ai_platform_network_process+0x3f8>
 800657e:	f105 070c 	add.w	r7, r5, #12
 8006582:	8ae0      	ldrh	r0, [r4, #22]
 8006584:	8aa3      	ldrh	r3, [r4, #20]
 8006586:	4283      	cmp	r3, r0
 8006588:	d977      	bls.n	800667a <ai_platform_network_process+0x3ce>
 800658a:	46a3      	mov	fp, r4
 800658c:	2d00      	cmp	r5, #0
 800658e:	d032      	beq.n	80065f6 <ai_platform_network_process+0x34a>
 8006590:	882b      	ldrh	r3, [r5, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d02f      	beq.n	80065f6 <ai_platform_network_process+0x34a>
 8006596:	686b      	ldr	r3, [r5, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d02c      	beq.n	80065f6 <ai_platform_network_process+0x34a>
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f04f 0800 	mov.w	r8, #0
 80065a2:	b343      	cbz	r3, 80065f6 <ai_platform_network_process+0x34a>
 80065a4:	68a9      	ldr	r1, [r5, #8]
 80065a6:	699a      	ldr	r2, [r3, #24]
 80065a8:	f8d1 a000 	ldr.w	sl, [r1]
 80065ac:	6814      	ldr	r4, [r2, #0]
 80065ae:	6890      	ldr	r0, [r2, #8]
 80065b0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80065b4:	eb0a 0609 	add.w	r6, sl, r9
 80065b8:	00a4      	lsls	r4, r4, #2
 80065ba:	6871      	ldr	r1, [r6, #4]
 80065bc:	d45f      	bmi.n	800667e <ai_platform_network_process+0x3d2>
 80065be:	68d4      	ldr	r4, [r2, #12]
 80065c0:	1b00      	subs	r0, r0, r4
 80065c2:	4401      	add	r1, r0
 80065c4:	6091      	str	r1, [r2, #8]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	6872      	ldr	r2, [r6, #4]
 80065ca:	60da      	str	r2, [r3, #12]
 80065cc:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80065d0:	f85a 2009 	ldr.w	r2, [sl, r9]
 80065d4:	440b      	add	r3, r1
 80065d6:	4293      	cmp	r3, r2
 80065d8:	bf24      	itt	cs
 80065da:	68f3      	ldrcs	r3, [r6, #12]
 80065dc:	1ad3      	subcs	r3, r2, r3
 80065de:	6073      	str	r3, [r6, #4]
 80065e0:	882b      	ldrh	r3, [r5, #0]
 80065e2:	f108 0801 	add.w	r8, r8, #1
 80065e6:	4598      	cmp	r8, r3
 80065e8:	d205      	bcs.n	80065f6 <ai_platform_network_process+0x34a>
 80065ea:	686b      	ldr	r3, [r5, #4]
 80065ec:	b11b      	cbz	r3, 80065f6 <ai_platform_network_process+0x34a>
 80065ee:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1d6      	bne.n	80065a4 <ai_platform_network_process+0x2f8>
 80065f6:	4658      	mov	r0, fp
 80065f8:	f000 fd90 	bl	800711c <ai_layers_forward_all>
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	d032      	beq.n	8006666 <ai_platform_network_process+0x3ba>
 8006600:	883b      	ldrh	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d02f      	beq.n	8006666 <ai_platform_network_process+0x3ba>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	b36b      	cbz	r3, 8006666 <ai_platform_network_process+0x3ba>
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	b358      	cbz	r0, 8006666 <ai_platform_network_process+0x3ba>
 800660e:	f04f 0800 	mov.w	r8, #0
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6981      	ldr	r1, [r0, #24]
 8006616:	f8d3 a000 	ldr.w	sl, [r3]
 800661a:	680c      	ldr	r4, [r1, #0]
 800661c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8006620:	eb0a 0609 	add.w	r6, sl, r9
 8006624:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8006628:	00a4      	lsls	r4, r4, #2
 800662a:	eb0c 0302 	add.w	r3, ip, r2
 800662e:	d42a      	bmi.n	8006686 <ai_platform_network_process+0x3da>
 8006630:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006634:	4293      	cmp	r3, r2
 8006636:	bf24      	itt	cs
 8006638:	68f3      	ldrcs	r3, [r6, #12]
 800663a:	1ad3      	subcs	r3, r2, r3
 800663c:	6073      	str	r3, [r6, #4]
 800663e:	6981      	ldr	r1, [r0, #24]
 8006640:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8006644:	1b12      	subs	r2, r2, r4
 8006646:	4413      	add	r3, r2
 8006648:	608b      	str	r3, [r1, #8]
 800664a:	6983      	ldr	r3, [r0, #24]
 800664c:	6872      	ldr	r2, [r6, #4]
 800664e:	60da      	str	r2, [r3, #12]
 8006650:	883b      	ldrh	r3, [r7, #0]
 8006652:	f108 0801 	add.w	r8, r8, #1
 8006656:	4598      	cmp	r8, r3
 8006658:	d205      	bcs.n	8006666 <ai_platform_network_process+0x3ba>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	b11b      	cbz	r3, 8006666 <ai_platform_network_process+0x3ba>
 800665e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006662:	2800      	cmp	r0, #0
 8006664:	d1d5      	bne.n	8006612 <ai_platform_network_process+0x366>
 8006666:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800666a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800666e:	3001      	adds	r0, #1
 8006670:	b280      	uxth	r0, r0
 8006672:	4283      	cmp	r3, r0
 8006674:	f8ab 0016 	strh.w	r0, [fp, #22]
 8006678:	d888      	bhi.n	800658c <ai_platform_network_process+0x2e0>
 800667a:	4683      	mov	fp, r0
 800667c:	e69e      	b.n	80063bc <ai_platform_network_process+0x110>
 800667e:	68b2      	ldr	r2, [r6, #8]
 8006680:	f000 fe62 	bl	8007348 <memcpy>
 8006684:	e7a2      	b.n	80065cc <ai_platform_network_process+0x320>
 8006686:	6889      	ldr	r1, [r1, #8]
 8006688:	4660      	mov	r0, ip
 800668a:	f000 fe5d 	bl	8007348 <memcpy>
 800668e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8006692:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006696:	440b      	add	r3, r1
 8006698:	4293      	cmp	r3, r2
 800669a:	bf24      	itt	cs
 800669c:	68f3      	ldrcs	r3, [r6, #12]
 800669e:	1ad3      	subcs	r3, r2, r3
 80066a0:	6073      	str	r3, [r6, #4]
 80066a2:	e7d5      	b.n	8006650 <ai_platform_network_process+0x3a4>
 80066a4:	2700      	movs	r7, #0
 80066a6:	e76c      	b.n	8006582 <ai_platform_network_process+0x2d6>
 80066a8:	461d      	mov	r5, r3
 80066aa:	461f      	mov	r7, r3
 80066ac:	e769      	b.n	8006582 <ai_platform_network_process+0x2d6>
 80066ae:	f104 0010 	add.w	r0, r4, #16
 80066b2:	2218      	movs	r2, #24
 80066b4:	2113      	movs	r1, #19
 80066b6:	f000 f80b 	bl	80066d0 <core_set_error>
 80066ba:	f04f 0b00 	mov.w	fp, #0
 80066be:	e67d      	b.n	80063bc <ai_platform_network_process+0x110>

080066c0 <core_init>:
 80066c0:	2001      	movs	r0, #1
 80066c2:	4770      	bx	lr

080066c4 <core_get_error>:
 80066c4:	4603      	mov	r3, r0
 80066c6:	2200      	movs	r2, #0
 80066c8:	6800      	ldr	r0, [r0, #0]
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop

080066d0 <core_set_error>:
 80066d0:	7803      	ldrb	r3, [r0, #0]
 80066d2:	b933      	cbnz	r3, 80066e2 <core_set_error+0x12>
 80066d4:	7001      	strb	r1, [r0, #0]
 80066d6:	6803      	ldr	r3, [r0, #0]
 80066d8:	f362 231f 	bfi	r3, r2, #8, #24
 80066dc:	6003      	str	r3, [r0, #0]
 80066de:	2001      	movs	r0, #1
 80066e0:	4770      	bx	lr
 80066e2:	2000      	movs	r0, #0
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop

080066e8 <ai_dict8_dot_array_f32>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	f8dd c020 	ldr.w	ip, [sp, #32]
 80066f0:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80066f4:	f000 80c0 	beq.w	8006878 <ai_dict8_dot_array_f32+0x190>
 80066f8:	f101 0408 	add.w	r4, r1, #8
 80066fc:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006700:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8006880 <ai_dict8_dot_array_f32+0x198>
 8006704:	eb04 0e09 	add.w	lr, r4, r9
 8006708:	f103 0520 	add.w	r5, r3, #32
 800670c:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8006710:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8006714:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8006718:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800671c:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8006720:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8006724:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8006728:	ed55 3a04 	vldr	s7, [r5, #-16]
 800672c:	ed55 4a03 	vldr	s9, [r5, #-12]
 8006730:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006734:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006738:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800673c:	edd6 7a00 	vldr	s15, [r6]
 8006740:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8006744:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006748:	ee67 7a83 	vmul.f32	s15, s15, s6
 800674c:	ed9a 3a00 	vldr	s6, [sl]
 8006750:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8006754:	eee3 7a05 	vfma.f32	s15, s6, s10
 8006758:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800675c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006760:	ed97 3a00 	vldr	s6, [r7]
 8006764:	ed96 5a00 	vldr	s10, [r6]
 8006768:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800676c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8006770:	eee3 7a04 	vfma.f32	s15, s6, s8
 8006774:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006778:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800677c:	ed9a 3a00 	vldr	s6, [sl]
 8006780:	ed96 4a00 	vldr	s8, [r6]
 8006784:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8006788:	eee5 7a06 	vfma.f32	s15, s10, s12
 800678c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006790:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006794:	ed97 5a00 	vldr	s10, [r7]
 8006798:	ed96 6a00 	vldr	s12, [r6]
 800679c:	eee3 7a23 	vfma.f32	s15, s6, s7
 80067a0:	3408      	adds	r4, #8
 80067a2:	45a6      	cmp	lr, r4
 80067a4:	f105 0520 	add.w	r5, r5, #32
 80067a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80067ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80067b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80067b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067b8:	d1a8      	bne.n	800670c <ai_dict8_dot_array_f32+0x24>
 80067ba:	4449      	add	r1, r9
 80067bc:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80067c0:	f01c 0c07 	ands.w	ip, ip, #7
 80067c4:	d050      	beq.n	8006868 <ai_dict8_dot_array_f32+0x180>
 80067c6:	780c      	ldrb	r4, [r1, #0]
 80067c8:	edd3 6a00 	vldr	s13, [r3]
 80067cc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80067d0:	edd4 7a00 	vldr	s15, [r4]
 80067d4:	f1bc 0f01 	cmp.w	ip, #1
 80067d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067dc:	d044      	beq.n	8006868 <ai_dict8_dot_array_f32+0x180>
 80067de:	784c      	ldrb	r4, [r1, #1]
 80067e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80067e4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80067e8:	edd4 7a00 	vldr	s15, [r4]
 80067ec:	f1bc 0f02 	cmp.w	ip, #2
 80067f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067f4:	d038      	beq.n	8006868 <ai_dict8_dot_array_f32+0x180>
 80067f6:	788c      	ldrb	r4, [r1, #2]
 80067f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80067fc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006800:	edd4 7a00 	vldr	s15, [r4]
 8006804:	f1bc 0f03 	cmp.w	ip, #3
 8006808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800680c:	d02c      	beq.n	8006868 <ai_dict8_dot_array_f32+0x180>
 800680e:	78cc      	ldrb	r4, [r1, #3]
 8006810:	edd3 6a03 	vldr	s13, [r3, #12]
 8006814:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006818:	edd4 7a00 	vldr	s15, [r4]
 800681c:	f1bc 0f04 	cmp.w	ip, #4
 8006820:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006824:	d020      	beq.n	8006868 <ai_dict8_dot_array_f32+0x180>
 8006826:	790c      	ldrb	r4, [r1, #4]
 8006828:	edd3 6a04 	vldr	s13, [r3, #16]
 800682c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006830:	edd4 7a00 	vldr	s15, [r4]
 8006834:	f1bc 0f05 	cmp.w	ip, #5
 8006838:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800683c:	d014      	beq.n	8006868 <ai_dict8_dot_array_f32+0x180>
 800683e:	794c      	ldrb	r4, [r1, #5]
 8006840:	edd3 6a05 	vldr	s13, [r3, #20]
 8006844:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006848:	edd4 7a00 	vldr	s15, [r4]
 800684c:	f1bc 0f06 	cmp.w	ip, #6
 8006850:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006854:	d008      	beq.n	8006868 <ai_dict8_dot_array_f32+0x180>
 8006856:	7989      	ldrb	r1, [r1, #6]
 8006858:	edd3 7a06 	vldr	s15, [r3, #24]
 800685c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006860:	edd2 6a00 	vldr	s13, [r2]
 8006864:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006868:	edd0 7a00 	vldr	s15, [r0]
 800686c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006870:	ed80 7a00 	vstr	s14, [r0]
 8006874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006878:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8006880 <ai_dict8_dot_array_f32+0x198>
 800687c:	e7a0      	b.n	80067c0 <ai_dict8_dot_array_f32+0xd8>
 800687e:	bf00      	nop
 8006880:	00000000 	.word	0x00000000

08006884 <ai_dict4_dot_array_f32>:
 8006884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006888:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800688a:	f027 0c01 	bic.w	ip, r7, #1
 800688e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8006892:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8006896:	f000 80ae 	beq.w	80069f6 <ai_dict4_dot_array_f32+0x172>
 800689a:	1d0d      	adds	r5, r1, #4
 800689c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80068a0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80069fc <ai_dict4_dot_array_f32+0x178>
 80068a4:	eb05 0e09 	add.w	lr, r5, r9
 80068a8:	f103 0420 	add.w	r4, r3, #32
 80068ac:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80068b0:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 80068b4:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 80068b8:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 80068bc:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80068c0:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 80068c4:	ed14 5a04 	vldr	s10, [r4, #-16]
 80068c8:	ed54 5a03 	vldr	s11, [r4, #-12]
 80068cc:	ed14 6a02 	vldr	s12, [r4, #-8]
 80068d0:	ed54 6a01 	vldr	s13, [r4, #-4]
 80068d4:	f006 0a0f 	and.w	sl, r6, #15
 80068d8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80068dc:	edda 7a00 	vldr	s15, [sl]
 80068e0:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80068e4:	0936      	lsrs	r6, r6, #4
 80068e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80068ea:	ee67 7a83 	vmul.f32	s15, s15, s6
 80068ee:	ed96 3a00 	vldr	s6, [r6]
 80068f2:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80068f6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80068fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80068fe:	f00b 0b0f 	and.w	fp, fp, #15
 8006902:	edd6 3a00 	vldr	s7, [r6]
 8006906:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800690a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800690e:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8006912:	3504      	adds	r5, #4
 8006914:	ed9b 4a00 	vldr	s8, [fp]
 8006918:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800691c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006920:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8006924:	f00a 0a0f 	and.w	sl, sl, #15
 8006928:	eddb 4a00 	vldr	s9, [fp]
 800692c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006930:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006934:	45ae      	cmp	lr, r5
 8006936:	ed9a 5a00 	vldr	s10, [sl]
 800693a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800693e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006942:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006946:	f006 060f 	and.w	r6, r6, #15
 800694a:	edda 5a00 	vldr	s11, [sl]
 800694e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006952:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006956:	f104 0420 	add.w	r4, r4, #32
 800695a:	ed96 6a00 	vldr	s12, [r6]
 800695e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006966:	d1a1      	bne.n	80068ac <ai_dict4_dot_array_f32+0x28>
 8006968:	4449      	add	r1, r9
 800696a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800696e:	459c      	cmp	ip, r3
 8006970:	d92d      	bls.n	80069ce <ai_dict4_dot_array_f32+0x14a>
 8006972:	f10c 0c07 	add.w	ip, ip, #7
 8006976:	f103 0508 	add.w	r5, r3, #8
 800697a:	ebac 0c05 	sub.w	ip, ip, r5
 800697e:	f02c 0407 	bic.w	r4, ip, #7
 8006982:	f103 0810 	add.w	r8, r3, #16
 8006986:	44a0      	add	r8, r4
 8006988:	f101 3eff 	add.w	lr, r1, #4294967295
 800698c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8006990:	ed15 6a01 	vldr	s12, [r5, #-4]
 8006994:	ed55 6a02 	vldr	s13, [r5, #-8]
 8006998:	f004 060f 	and.w	r6, r4, #15
 800699c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80069a0:	0924      	lsrs	r4, r4, #4
 80069a2:	edd6 7a00 	vldr	s15, [r6]
 80069a6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80069aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80069ae:	ed94 6a00 	vldr	s12, [r4]
 80069b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80069b6:	3508      	adds	r5, #8
 80069b8:	45a8      	cmp	r8, r5
 80069ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069be:	d1e5      	bne.n	800698c <ai_dict4_dot_array_f32+0x108>
 80069c0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80069c4:	f10c 0c01 	add.w	ip, ip, #1
 80069c8:	4461      	add	r1, ip
 80069ca:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80069ce:	07fc      	lsls	r4, r7, #31
 80069d0:	d509      	bpl.n	80069e6 <ai_dict4_dot_array_f32+0x162>
 80069d2:	7809      	ldrb	r1, [r1, #0]
 80069d4:	edd3 7a00 	vldr	s15, [r3]
 80069d8:	090b      	lsrs	r3, r1, #4
 80069da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80069de:	edd2 6a00 	vldr	s13, [r2]
 80069e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80069e6:	edd0 7a00 	vldr	s15, [r0]
 80069ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069ee:	ed80 7a00 	vstr	s14, [r0]
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80069fc <ai_dict4_dot_array_f32+0x178>
 80069fa:	e7b8      	b.n	800696e <ai_dict4_dot_array_f32+0xea>
 80069fc:	00000000 	.word	0x00000000

08006a00 <forward_dense>:
 8006a00:	6982      	ldr	r2, [r0, #24]
 8006a02:	8813      	ldrh	r3, [r2, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 81ca 	beq.w	8006d9e <forward_dense+0x39e>
 8006a0a:	6852      	ldr	r2, [r2, #4]
 8006a0c:	6850      	ldr	r0, [r2, #4]
 8006a0e:	b100      	cbz	r0, 8006a12 <forward_dense+0x12>
 8006a10:	6800      	ldr	r0, [r0, #0]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	f240 81c0 	bls.w	8006d98 <forward_dense+0x398>
 8006a18:	6911      	ldr	r1, [r2, #16]
 8006a1a:	b101      	cbz	r1, 8006a1e <forward_dense+0x1e>
 8006a1c:	6809      	ldr	r1, [r1, #0]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	f000 81bf 	beq.w	8006da2 <forward_dense+0x3a2>
 8006a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a28:	ed2d 8b10 	vpush	{d8-d15}
 8006a2c:	69d3      	ldr	r3, [r2, #28]
 8006a2e:	b091      	sub	sp, #68	; 0x44
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 820b 	beq.w	8006e4c <forward_dense+0x44c>
 8006a36:	681c      	ldr	r4, [r3, #0]
 8006a38:	9408      	str	r4, [sp, #32]
 8006a3a:	f112 0418 	adds.w	r4, r2, #24
 8006a3e:	f000 81df 	beq.w	8006e00 <forward_dense+0x400>
 8006a42:	8b12      	ldrh	r2, [r2, #24]
 8006a44:	2a01      	cmp	r2, #1
 8006a46:	f240 81fe 	bls.w	8006e46 <forward_dense+0x446>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 81da 	beq.w	8006e04 <forward_dense+0x404>
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	9306      	str	r3, [sp, #24]
 8006a54:	9b08      	ldr	r3, [sp, #32]
 8006a56:	68cc      	ldr	r4, [r1, #12]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	68c5      	ldr	r5, [r0, #12]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006a62:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006a66:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8006a6a:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8006a6e:	fa4c f505 	asr.w	r5, ip, r5
 8006a72:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8006a76:	950b      	str	r5, [sp, #44]	; 0x2c
 8006a78:	2a04      	cmp	r2, #4
 8006a7a:	fb07 f506 	mul.w	r5, r7, r6
 8006a7e:	6864      	ldr	r4, [r4, #4]
 8006a80:	9507      	str	r5, [sp, #28]
 8006a82:	f000 81dd 	beq.w	8006e40 <forward_dense+0x440>
 8006a86:	2a08      	cmp	r2, #8
 8006a88:	f000 81da 	beq.w	8006e40 <forward_dense+0x440>
 8006a8c:	f04f 0a00 	mov.w	sl, #0
 8006a90:	698a      	ldr	r2, [r1, #24]
 8006a92:	6981      	ldr	r1, [r0, #24]
 8006a94:	6890      	ldr	r0, [r2, #8]
 8006a96:	9a08      	ldr	r2, [sp, #32]
 8006a98:	9004      	str	r0, [sp, #16]
 8006a9a:	6952      	ldr	r2, [r2, #20]
 8006a9c:	688f      	ldr	r7, [r1, #8]
 8006a9e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006aa2:	00a2      	lsls	r2, r4, #2
 8006aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8006aa6:	1886      	adds	r6, r0, r2
 8006aa8:	9a07      	ldr	r2, [sp, #28]
 8006aaa:	2a00      	cmp	r2, #0
 8006aac:	f000 81c3 	beq.w	8006e36 <forward_dense+0x436>
 8006ab0:	f1a8 0210 	sub.w	r2, r8, #16
 8006ab4:	0912      	lsrs	r2, r2, #4
 8006ab6:	3201      	adds	r2, #1
 8006ab8:	0192      	lsls	r2, r2, #6
 8006aba:	920c      	str	r2, [sp, #48]	; 0x30
 8006abc:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8006ac0:	920a      	str	r2, [sp, #40]	; 0x28
 8006ac2:	689d      	ldr	r5, [r3, #8]
 8006ac4:	9b06      	ldr	r3, [sp, #24]
 8006ac6:	eddf aad0 	vldr	s21, [pc, #832]	; 8006e08 <forward_dense+0x408>
 8006aca:	2200      	movs	r2, #0
 8006acc:	9205      	str	r2, [sp, #20]
 8006ace:	f008 020f 	and.w	r2, r8, #15
 8006ad2:	920d      	str	r2, [sp, #52]	; 0x34
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d043      	beq.n	8006b60 <forward_dense+0x160>
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	689c      	ldr	r4, [r3, #8]
 8006adc:	9b04      	ldr	r3, [sp, #16]
 8006ade:	f1ba 0f00 	cmp.w	sl, #0
 8006ae2:	d042      	beq.n	8006b6a <forward_dense+0x16a>
 8006ae4:	42b3      	cmp	r3, r6
 8006ae6:	d22a      	bcs.n	8006b3e <forward_dense+0x13e>
 8006ae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aea:	469b      	mov	fp, r3
 8006aec:	ab0f      	add	r3, sp, #60	; 0x3c
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	2a04      	cmp	r2, #4
 8006af2:	4633      	mov	r3, r6
 8006af4:	4646      	mov	r6, r8
 8006af6:	4698      	mov	r8, r3
 8006af8:	f000 8156 	beq.w	8006da8 <forward_dense+0x3a8>
 8006afc:	2c00      	cmp	r4, #0
 8006afe:	f000 8185 	beq.w	8006e0c <forward_dense+0x40c>
 8006b02:	f8d4 c000 	ldr.w	ip, [r4]
 8006b06:	9803      	ldr	r0, [sp, #12]
 8006b08:	9600      	str	r6, [sp, #0]
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4652      	mov	r2, sl
 8006b10:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006b14:	f7ff fde8 	bl	80066e8 <ai_dict8_dot_array_f32>
 8006b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b1a:	f84b 3b04 	str.w	r3, [fp], #4
 8006b1e:	45c3      	cmp	fp, r8
 8006b20:	f104 0404 	add.w	r4, r4, #4
 8006b24:	444d      	add	r5, r9
 8006b26:	d3e9      	bcc.n	8006afc <forward_dense+0xfc>
 8006b28:	4643      	mov	r3, r8
 8006b2a:	46b0      	mov	r8, r6
 8006b2c:	461e      	mov	r6, r3
 8006b2e:	9a04      	ldr	r2, [sp, #16]
 8006b30:	43d3      	mvns	r3, r2
 8006b32:	4433      	add	r3, r6
 8006b34:	f023 0303 	bic.w	r3, r3, #3
 8006b38:	3304      	adds	r3, #4
 8006b3a:	18d3      	adds	r3, r2, r3
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b40:	9b05      	ldr	r3, [sp, #20]
 8006b42:	4417      	add	r7, r2
 8006b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b46:	4416      	add	r6, r2
 8006b48:	9a07      	ldr	r2, [sp, #28]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	9305      	str	r3, [sp, #20]
 8006b50:	f000 8171 	beq.w	8006e36 <forward_dense+0x436>
 8006b54:	9b08      	ldr	r3, [sp, #32]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	689d      	ldr	r5, [r3, #8]
 8006b5a:	9b06      	ldr	r3, [sp, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1bb      	bne.n	8006ad8 <forward_dense+0xd8>
 8006b60:	461c      	mov	r4, r3
 8006b62:	9b04      	ldr	r3, [sp, #16]
 8006b64:	f1ba 0f00 	cmp.w	sl, #0
 8006b68:	d1bc      	bne.n	8006ae4 <forward_dense+0xe4>
 8006b6a:	42b3      	cmp	r3, r6
 8006b6c:	d2e7      	bcs.n	8006b3e <forward_dense+0x13e>
 8006b6e:	4618      	mov	r0, r3
 8006b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b72:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8006b76:	eb07 0c03 	add.w	ip, r7, r3
 8006b7a:	469e      	mov	lr, r3
 8006b7c:	2c00      	cmp	r4, #0
 8006b7e:	f000 80ff 	beq.w	8006d80 <forward_dense+0x380>
 8006b82:	f1b8 0f0f 	cmp.w	r8, #15
 8006b86:	edd4 fa00 	vldr	s31, [r4]
 8006b8a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8006e08 <forward_dense+0x408>
 8006b8e:	f104 0404 	add.w	r4, r4, #4
 8006b92:	f240 80fd 	bls.w	8006d90 <forward_dense+0x390>
 8006b96:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006b9a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8006b9e:	4641      	mov	r1, r8
 8006ba0:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8006ba4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006ba8:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8006bac:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8006bb0:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8006bb4:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8006bb8:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8006bbc:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8006bc0:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8006bc4:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8006bc8:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8006bcc:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8006bd0:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8006bd4:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8006bd8:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8006bdc:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8006be0:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8006be4:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8006be8:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8006bec:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8006bf0:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8006bf4:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8006bf8:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8006bfc:	ed13 4a04 	vldr	s8, [r3, #-16]
 8006c00:	ed52 4a04 	vldr	s9, [r2, #-16]
 8006c04:	ed12 5a03 	vldr	s10, [r2, #-12]
 8006c08:	ed53 5a03 	vldr	s11, [r3, #-12]
 8006c0c:	ed12 6a02 	vldr	s12, [r2, #-8]
 8006c10:	ed13 7a02 	vldr	s14, [r3, #-8]
 8006c14:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8006c18:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8006c1c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8006c20:	3910      	subs	r1, #16
 8006c22:	290f      	cmp	r1, #15
 8006c24:	ed53 ea01 	vldr	s29, [r3, #-4]
 8006c28:	ed12 ea01 	vldr	s28, [r2, #-4]
 8006c2c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8006c30:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8006c34:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006c38:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8006c3c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8006c40:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8006c44:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006c48:	eee8 7a88 	vfma.f32	s15, s17, s16
 8006c4c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8006c50:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006c54:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006c58:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006c5c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006c60:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006c64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006c68:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8006c6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006c70:	d896      	bhi.n	8006ba0 <forward_dense+0x1a0>
 8006c72:	eb05 010e 	add.w	r1, r5, lr
 8006c76:	465b      	mov	r3, fp
 8006c78:	4662      	mov	r2, ip
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d075      	beq.n	8006d6a <forward_dense+0x36a>
 8006c7e:	ed91 7a00 	vldr	s14, [r1]
 8006c82:	edd2 7a00 	vldr	s15, [r2]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006c8c:	d06d      	beq.n	8006d6a <forward_dense+0x36a>
 8006c8e:	ed91 7a01 	vldr	s14, [r1, #4]
 8006c92:	edd2 7a01 	vldr	s15, [r2, #4]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006c9c:	d065      	beq.n	8006d6a <forward_dense+0x36a>
 8006c9e:	ed91 7a02 	vldr	s14, [r1, #8]
 8006ca2:	edd2 7a02 	vldr	s15, [r2, #8]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cac:	d05d      	beq.n	8006d6a <forward_dense+0x36a>
 8006cae:	ed91 7a03 	vldr	s14, [r1, #12]
 8006cb2:	edd2 7a03 	vldr	s15, [r2, #12]
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cbc:	d055      	beq.n	8006d6a <forward_dense+0x36a>
 8006cbe:	ed91 7a04 	vldr	s14, [r1, #16]
 8006cc2:	edd2 7a04 	vldr	s15, [r2, #16]
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006ccc:	d04d      	beq.n	8006d6a <forward_dense+0x36a>
 8006cce:	ed91 7a05 	vldr	s14, [r1, #20]
 8006cd2:	edd2 7a05 	vldr	s15, [r2, #20]
 8006cd6:	2b06      	cmp	r3, #6
 8006cd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cdc:	d045      	beq.n	8006d6a <forward_dense+0x36a>
 8006cde:	ed91 7a06 	vldr	s14, [r1, #24]
 8006ce2:	edd2 7a06 	vldr	s15, [r2, #24]
 8006ce6:	2b07      	cmp	r3, #7
 8006ce8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cec:	d03d      	beq.n	8006d6a <forward_dense+0x36a>
 8006cee:	ed91 7a07 	vldr	s14, [r1, #28]
 8006cf2:	edd2 7a07 	vldr	s15, [r2, #28]
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cfc:	d035      	beq.n	8006d6a <forward_dense+0x36a>
 8006cfe:	ed91 7a08 	vldr	s14, [r1, #32]
 8006d02:	edd2 7a08 	vldr	s15, [r2, #32]
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d0c:	d02d      	beq.n	8006d6a <forward_dense+0x36a>
 8006d0e:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8006d12:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8006d16:	2b0a      	cmp	r3, #10
 8006d18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d1c:	d025      	beq.n	8006d6a <forward_dense+0x36a>
 8006d1e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8006d22:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8006d26:	2b0b      	cmp	r3, #11
 8006d28:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d2c:	d01d      	beq.n	8006d6a <forward_dense+0x36a>
 8006d2e:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8006d32:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8006d36:	2b0c      	cmp	r3, #12
 8006d38:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d3c:	d015      	beq.n	8006d6a <forward_dense+0x36a>
 8006d3e:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8006d42:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8006d46:	2b0d      	cmp	r3, #13
 8006d48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d4c:	d00d      	beq.n	8006d6a <forward_dense+0x36a>
 8006d4e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8006d52:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006d56:	2b0e      	cmp	r3, #14
 8006d58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d5c:	d005      	beq.n	8006d6a <forward_dense+0x36a>
 8006d5e:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8006d62:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8006d66:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d6a:	444d      	add	r5, r9
 8006d6c:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8006d70:	ece0 6a01 	vstmia	r0!, {s13}
 8006d74:	42b0      	cmp	r0, r6
 8006d76:	f4bf aeda 	bcs.w	8006b2e <forward_dense+0x12e>
 8006d7a:	2c00      	cmp	r4, #0
 8006d7c:	f47f af01 	bne.w	8006b82 <forward_dense+0x182>
 8006d80:	f1b8 0f0f 	cmp.w	r8, #15
 8006d84:	eef0 fa6a 	vmov.f32	s31, s21
 8006d88:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8006e08 <forward_dense+0x408>
 8006d8c:	f63f af03 	bhi.w	8006b96 <forward_dense+0x196>
 8006d90:	4643      	mov	r3, r8
 8006d92:	4629      	mov	r1, r5
 8006d94:	463a      	mov	r2, r7
 8006d96:	e770      	b.n	8006c7a <forward_dense+0x27a>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	deff      	udf	#255	; 0xff
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	deff      	udf	#255	; 0xff
 8006da2:	2300      	movs	r3, #0
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	deff      	udf	#255	; 0xff
 8006da8:	b1ac      	cbz	r4, 8006dd6 <forward_dense+0x3d6>
 8006daa:	f8d4 c000 	ldr.w	ip, [r4]
 8006dae:	9803      	ldr	r0, [sp, #12]
 8006db0:	9600      	str	r6, [sp, #0]
 8006db2:	463b      	mov	r3, r7
 8006db4:	4629      	mov	r1, r5
 8006db6:	4652      	mov	r2, sl
 8006db8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006dbc:	f7ff fd62 	bl	8006884 <ai_dict4_dot_array_f32>
 8006dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc2:	f84b 3b04 	str.w	r3, [fp], #4
 8006dc6:	45c3      	cmp	fp, r8
 8006dc8:	f104 0404 	add.w	r4, r4, #4
 8006dcc:	444d      	add	r5, r9
 8006dce:	f4bf aeab 	bcs.w	8006b28 <forward_dense+0x128>
 8006dd2:	2c00      	cmp	r4, #0
 8006dd4:	d1e9      	bne.n	8006daa <forward_dense+0x3aa>
 8006dd6:	4634      	mov	r4, r6
 8006dd8:	4646      	mov	r6, r8
 8006dda:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006dde:	9400      	str	r4, [sp, #0]
 8006de0:	463b      	mov	r3, r7
 8006de2:	4629      	mov	r1, r5
 8006de4:	4652      	mov	r2, sl
 8006de6:	4640      	mov	r0, r8
 8006de8:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8006dec:	f7ff fd4a 	bl	8006884 <ai_dict4_dot_array_f32>
 8006df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006df2:	f84b 3b04 	str.w	r3, [fp], #4
 8006df6:	45b3      	cmp	fp, r6
 8006df8:	444d      	add	r5, r9
 8006dfa:	d3f0      	bcc.n	8006dde <forward_dense+0x3de>
 8006dfc:	46a0      	mov	r8, r4
 8006dfe:	e696      	b.n	8006b2e <forward_dense+0x12e>
 8006e00:	9406      	str	r4, [sp, #24]
 8006e02:	e627      	b.n	8006a54 <forward_dense+0x54>
 8006e04:	9306      	str	r3, [sp, #24]
 8006e06:	e625      	b.n	8006a54 <forward_dense+0x54>
 8006e08:	00000000 	.word	0x00000000
 8006e0c:	4634      	mov	r4, r6
 8006e0e:	4646      	mov	r6, r8
 8006e10:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006e14:	9400      	str	r4, [sp, #0]
 8006e16:	463b      	mov	r3, r7
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4652      	mov	r2, sl
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8006e22:	f7ff fc61 	bl	80066e8 <ai_dict8_dot_array_f32>
 8006e26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e28:	f84b 3b04 	str.w	r3, [fp], #4
 8006e2c:	45b3      	cmp	fp, r6
 8006e2e:	444d      	add	r5, r9
 8006e30:	d3f0      	bcc.n	8006e14 <forward_dense+0x414>
 8006e32:	46a0      	mov	r8, r4
 8006e34:	e67b      	b.n	8006b2e <forward_dense+0x12e>
 8006e36:	b011      	add	sp, #68	; 0x44
 8006e38:	ecbd 8b10 	vpop	{d8-d15}
 8006e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8006e44:	e624      	b.n	8006a90 <forward_dense+0x90>
 8006e46:	2300      	movs	r3, #0
 8006e48:	9306      	str	r3, [sp, #24]
 8006e4a:	e603      	b.n	8006a54 <forward_dense+0x54>
 8006e4c:	9308      	str	r3, [sp, #32]
 8006e4e:	e5f4      	b.n	8006a3a <forward_dense+0x3a>

08006e50 <nl_func_relu_generic_array_f32>:
 8006e50:	b430      	push	{r4, r5}
 8006e52:	6989      	ldr	r1, [r1, #24]
 8006e54:	6980      	ldr	r0, [r0, #24]
 8006e56:	edd3 6a02 	vldr	s13, [r3, #8]
 8006e5a:	688c      	ldr	r4, [r1, #8]
 8006e5c:	6880      	ldr	r0, [r0, #8]
 8006e5e:	ed93 7a00 	vldr	s14, [r3]
 8006e62:	ed93 6a01 	vldr	s12, [r3, #4]
 8006e66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006e6a:	3a01      	subs	r2, #1
 8006e6c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006e70:	0092      	lsls	r2, r2, #2
 8006e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e76:	4410      	add	r0, r2
 8006e78:	4422      	add	r2, r4
 8006e7a:	d421      	bmi.n	8006ec0 <nl_func_relu_generic_array_f32+0x70>
 8006e7c:	4294      	cmp	r4, r2
 8006e7e:	d83d      	bhi.n	8006efc <nl_func_relu_generic_array_f32+0xac>
 8006e80:	1d13      	adds	r3, r2, #4
 8006e82:	1d02      	adds	r2, r0, #4
 8006e84:	e010      	b.n	8006ea8 <nl_func_relu_generic_array_f32+0x58>
 8006e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e8e:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8006e92:	d501      	bpl.n	8006e98 <nl_func_relu_generic_array_f32+0x48>
 8006e94:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006e98:	ed62 7a01 	vstmdb	r2!, {s15}
 8006e9c:	6888      	ldr	r0, [r1, #8]
 8006e9e:	f1a3 0408 	sub.w	r4, r3, #8
 8006ea2:	4284      	cmp	r4, r0
 8006ea4:	462b      	mov	r3, r5
 8006ea6:	d329      	bcc.n	8006efc <nl_func_relu_generic_array_f32+0xac>
 8006ea8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006eac:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb4:	f1a3 0504 	sub.w	r5, r3, #4
 8006eb8:	d4e5      	bmi.n	8006e86 <nl_func_relu_generic_array_f32+0x36>
 8006eba:	eef0 7a66 	vmov.f32	s15, s13
 8006ebe:	e7eb      	b.n	8006e98 <nl_func_relu_generic_array_f32+0x48>
 8006ec0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec8:	d01a      	beq.n	8006f00 <nl_func_relu_generic_array_f32+0xb0>
 8006eca:	4294      	cmp	r4, r2
 8006ecc:	d816      	bhi.n	8006efc <nl_func_relu_generic_array_f32+0xac>
 8006ece:	1d13      	adds	r3, r2, #4
 8006ed0:	1d02      	adds	r2, r0, #4
 8006ed2:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006ed6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ede:	f1a3 0408 	sub.w	r4, r3, #8
 8006ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee6:	f1a3 0004 	sub.w	r0, r3, #4
 8006eea:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006eee:	4623      	mov	r3, r4
 8006ef0:	d51e      	bpl.n	8006f30 <nl_func_relu_generic_array_f32+0xe0>
 8006ef2:	ed62 6a01 	vstmdb	r2!, {s13}
 8006ef6:	688b      	ldr	r3, [r1, #8]
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	d91e      	bls.n	8006f3a <nl_func_relu_generic_array_f32+0xea>
 8006efc:	bc30      	pop	{r4, r5}
 8006efe:	4770      	bx	lr
 8006f00:	4294      	cmp	r4, r2
 8006f02:	d8fb      	bhi.n	8006efc <nl_func_relu_generic_array_f32+0xac>
 8006f04:	1d13      	adds	r3, r2, #4
 8006f06:	2500      	movs	r5, #0
 8006f08:	1d02      	adds	r2, r0, #4
 8006f0a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f12:	f1a3 0408 	sub.w	r4, r3, #8
 8006f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1a:	f1a3 0004 	sub.w	r0, r3, #4
 8006f1e:	4623      	mov	r3, r4
 8006f20:	db0d      	blt.n	8006f3e <nl_func_relu_generic_array_f32+0xee>
 8006f22:	ed62 7a01 	vstmdb	r2!, {s15}
 8006f26:	688b      	ldr	r3, [r1, #8]
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	d8e7      	bhi.n	8006efc <nl_func_relu_generic_array_f32+0xac>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	e7ec      	b.n	8006f0a <nl_func_relu_generic_array_f32+0xba>
 8006f30:	ed62 7a01 	vstmdb	r2!, {s15}
 8006f34:	688c      	ldr	r4, [r1, #8]
 8006f36:	429c      	cmp	r4, r3
 8006f38:	d8e0      	bhi.n	8006efc <nl_func_relu_generic_array_f32+0xac>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	e7c9      	b.n	8006ed2 <nl_func_relu_generic_array_f32+0x82>
 8006f3e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006f42:	688c      	ldr	r4, [r1, #8]
 8006f44:	429c      	cmp	r4, r3
 8006f46:	d8d9      	bhi.n	8006efc <nl_func_relu_generic_array_f32+0xac>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	e7de      	b.n	8006f0a <nl_func_relu_generic_array_f32+0xba>

08006f4c <forward_relu>:
 8006f4c:	6982      	ldr	r2, [r0, #24]
 8006f4e:	8813      	ldrh	r3, [r2, #0]
 8006f50:	b333      	cbz	r3, 8006fa0 <forward_relu+0x54>
 8006f52:	6852      	ldr	r2, [r2, #4]
 8006f54:	6851      	ldr	r1, [r2, #4]
 8006f56:	b101      	cbz	r1, 8006f5a <forward_relu+0xe>
 8006f58:	6809      	ldr	r1, [r1, #0]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d91d      	bls.n	8006f9a <forward_relu+0x4e>
 8006f5e:	b4f0      	push	{r4, r5, r6, r7}
 8006f60:	6917      	ldr	r7, [r2, #16]
 8006f62:	b107      	cbz	r7, 8006f66 <forward_relu+0x1a>
 8006f64:	683f      	ldr	r7, [r7, #0]
 8006f66:	688c      	ldr	r4, [r1, #8]
 8006f68:	69c3      	ldr	r3, [r0, #28]
 8006f6a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d044      	beq.n	8006ffc <forward_relu+0xb0>
 8006f72:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8006f76:	2d01      	cmp	r5, #1
 8006f78:	d014      	beq.n	8006fa4 <forward_relu+0x58>
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	d074      	beq.n	8007068 <forward_relu+0x11c>
 8006f7e:	68ce      	ldr	r6, [r1, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006f86:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f8a:	42a6      	cmp	r6, r4
 8006f8c:	fb05 f202 	mul.w	r2, r5, r2
 8006f90:	d1f9      	bne.n	8006f86 <forward_relu+0x3a>
 8006f92:	4638      	mov	r0, r7
 8006f94:	bcf0      	pop	{r4, r5, r6, r7}
 8006f96:	f7ff bf5b 	b.w	8006e50 <nl_func_relu_generic_array_f32>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	deff      	udf	#255	; 0xff
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	deff      	udf	#255	; 0xff
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	6988      	ldr	r0, [r1, #24]
 8006fa8:	6896      	ldr	r6, [r2, #8]
 8006faa:	ed93 7a00 	vldr	s14, [r3]
 8006fae:	6882      	ldr	r2, [r0, #8]
 8006fb0:	b184      	cbz	r4, 8006fd4 <forward_relu+0x88>
 8006fb2:	68cf      	ldr	r7, [r1, #12]
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8006fba:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8006fbe:	42a7      	cmp	r7, r4
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	d1f9      	bne.n	8006fba <forward_relu+0x6e>
 8006fc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	18d2      	adds	r2, r2, r3
 8006fd0:	441e      	add	r6, r3
 8006fd2:	d23f      	bcs.n	8007054 <forward_relu+0x108>
 8006fd4:	1d13      	adds	r3, r2, #4
 8006fd6:	2500      	movs	r5, #0
 8006fd8:	1d32      	adds	r2, r6, #4
 8006fda:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe6:	f1a3 0104 	sub.w	r1, r3, #4
 8006fea:	d835      	bhi.n	8007058 <forward_relu+0x10c>
 8006fec:	ed62 7a01 	vstmdb	r2!, {s15}
 8006ff0:	6884      	ldr	r4, [r0, #8]
 8006ff2:	3b08      	subs	r3, #8
 8006ff4:	429c      	cmp	r4, r3
 8006ff6:	d82d      	bhi.n	8007054 <forward_relu+0x108>
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	e7ee      	b.n	8006fda <forward_relu+0x8e>
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	698d      	ldr	r5, [r1, #24]
 8007000:	6898      	ldr	r0, [r3, #8]
 8007002:	68ab      	ldr	r3, [r5, #8]
 8007004:	b184      	cbz	r4, 8007028 <forward_relu+0xdc>
 8007006:	68ce      	ldr	r6, [r1, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800700e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8007012:	42a6      	cmp	r6, r4
 8007014:	fb01 f202 	mul.w	r2, r1, r2
 8007018:	d1f9      	bne.n	800700e <forward_relu+0xc2>
 800701a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800701e:	3a01      	subs	r2, #1
 8007020:	0092      	lsls	r2, r2, #2
 8007022:	189b      	adds	r3, r3, r2
 8007024:	4410      	add	r0, r2
 8007026:	d215      	bcs.n	8007054 <forward_relu+0x108>
 8007028:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800706c <forward_relu+0x120>
 800702c:	3304      	adds	r3, #4
 800702e:	1d01      	adds	r1, r0, #4
 8007030:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800703c:	bfb8      	it	lt
 800703e:	eef0 7a47 	vmovlt.f32	s15, s14
 8007042:	ed61 7a01 	vstmdb	r1!, {s15}
 8007046:	68a8      	ldr	r0, [r5, #8]
 8007048:	f1a3 0208 	sub.w	r2, r3, #8
 800704c:	4290      	cmp	r0, r2
 800704e:	f1a3 0304 	sub.w	r3, r3, #4
 8007052:	d9ed      	bls.n	8007030 <forward_relu+0xe4>
 8007054:	bcf0      	pop	{r4, r5, r6, r7}
 8007056:	4770      	bx	lr
 8007058:	f842 5d04 	str.w	r5, [r2, #-4]!
 800705c:	6884      	ldr	r4, [r0, #8]
 800705e:	3b08      	subs	r3, #8
 8007060:	429c      	cmp	r4, r3
 8007062:	d8f7      	bhi.n	8007054 <forward_relu+0x108>
 8007064:	460b      	mov	r3, r1
 8007066:	e7b8      	b.n	8006fda <forward_relu+0x8e>
 8007068:	2201      	movs	r2, #1
 800706a:	e792      	b.n	8006f92 <forward_relu+0x46>
 800706c:	00000000 	.word	0x00000000

08007070 <ai_check_custom_types>:
 8007070:	4b13      	ldr	r3, [pc, #76]	; (80070c0 <ai_check_custom_types+0x50>)
 8007072:	b082      	sub	sp, #8
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	b118      	cbz	r0, 8007082 <ai_check_custom_types+0x12>
 800707a:	7803      	ldrb	r3, [r0, #0]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d002      	beq.n	8007086 <ai_check_custom_types+0x16>
 8007080:	2000      	movs	r0, #0
 8007082:	b002      	add	sp, #8
 8007084:	4770      	bx	lr
 8007086:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800708a:	4293      	cmp	r3, r2
 800708c:	d004      	beq.n	8007098 <ai_check_custom_types+0x28>
 800708e:	2001      	movs	r0, #1
 8007090:	f080 0001 	eor.w	r0, r0, #1
 8007094:	b002      	add	sp, #8
 8007096:	4770      	bx	lr
 8007098:	7842      	ldrb	r2, [r0, #1]
 800709a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800709e:	429a      	cmp	r2, r3
 80070a0:	f100 0001 	add.w	r0, r0, #1
 80070a4:	d1f3      	bne.n	800708e <ai_check_custom_types+0x1e>
 80070a6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80070aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d1ed      	bne.n	800708e <ai_check_custom_types+0x1e>
 80070b2:	7842      	ldrb	r2, [r0, #1]
 80070b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d1e8      	bne.n	800708e <ai_check_custom_types+0x1e>
 80070bc:	2000      	movs	r0, #0
 80070be:	e7e7      	b.n	8007090 <ai_check_custom_types+0x20>
 80070c0:	0800abf4 	.word	0x0800abf4

080070c4 <ai_layers_init_all>:
 80070c4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80070c6:	b17a      	cbz	r2, 80070e8 <ai_layers_init_all+0x24>
 80070c8:	6913      	ldr	r3, [r2, #16]
 80070ca:	60d0      	str	r0, [r2, #12]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	f04f 0201 	mov.w	r2, #1
 80070d2:	d009      	beq.n	80070e8 <ai_layers_init_all+0x24>
 80070d4:	b143      	cbz	r3, 80070e8 <ai_layers_init_all+0x24>
 80070d6:	6919      	ldr	r1, [r3, #16]
 80070d8:	60d8      	str	r0, [r3, #12]
 80070da:	4299      	cmp	r1, r3
 80070dc:	f102 0201 	add.w	r2, r2, #1
 80070e0:	d002      	beq.n	80070e8 <ai_layers_init_all+0x24>
 80070e2:	460b      	mov	r3, r1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1f6      	bne.n	80070d6 <ai_layers_init_all+0x12>
 80070e8:	4610      	mov	r0, r2
 80070ea:	4770      	bx	lr

080070ec <ai_layers_post_init_all>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80070f0:	b18c      	cbz	r4, 8007116 <ai_layers_post_init_all+0x2a>
 80070f2:	2500      	movs	r5, #0
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	f013 0f01 	tst.w	r3, #1
 80070fa:	4620      	mov	r0, r4
 80070fc:	d003      	beq.n	8007106 <ai_layers_post_init_all+0x1a>
 80070fe:	6a23      	ldr	r3, [r4, #32]
 8007100:	b10b      	cbz	r3, 8007106 <ai_layers_post_init_all+0x1a>
 8007102:	4798      	blx	r3
 8007104:	3501      	adds	r5, #1
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	42a3      	cmp	r3, r4
 800710a:	d002      	beq.n	8007112 <ai_layers_post_init_all+0x26>
 800710c:	461c      	mov	r4, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <ai_layers_post_init_all+0x8>
 8007112:	4628      	mov	r0, r5
 8007114:	bd38      	pop	{r3, r4, r5, pc}
 8007116:	4625      	mov	r5, r4
 8007118:	e7fb      	b.n	8007112 <ai_layers_post_init_all+0x26>
 800711a:	bf00      	nop

0800711c <ai_layers_forward_all>:
 800711c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007120:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8007122:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8007124:	4604      	mov	r4, r0
 8007126:	2f00      	cmp	r7, #0
 8007128:	d02c      	beq.n	8007184 <ai_layers_forward_all+0x68>
 800712a:	2d00      	cmp	r5, #0
 800712c:	d03f      	beq.n	80071ae <ai_layers_forward_all+0x92>
 800712e:	6545      	str	r5, [r0, #84]	; 0x54
 8007130:	4629      	mov	r1, r5
 8007132:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007134:	2001      	movs	r0, #1
 8007136:	47b8      	blx	r7
 8007138:	2600      	movs	r6, #0
 800713a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800713c:	46b0      	mov	r8, r6
 800713e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007140:	2002      	movs	r0, #2
 8007142:	47b8      	blx	r7
 8007144:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8007146:	696b      	ldr	r3, [r5, #20]
 8007148:	4628      	mov	r0, r5
 800714a:	4798      	blx	r3
 800714c:	692b      	ldr	r3, [r5, #16]
 800714e:	429d      	cmp	r5, r3
 8007150:	f04f 0003 	mov.w	r0, #3
 8007154:	4619      	mov	r1, r3
 8007156:	d009      	beq.n	800716c <ai_layers_forward_all+0x50>
 8007158:	6563      	str	r3, [r4, #84]	; 0x54
 800715a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800715c:	47b8      	blx	r7
 800715e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007160:	3601      	adds	r6, #1
 8007162:	2900      	cmp	r1, #0
 8007164:	d1eb      	bne.n	800713e <ai_layers_forward_all+0x22>
 8007166:	4630      	mov	r0, r6
 8007168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800716c:	2100      	movs	r1, #0
 800716e:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 8007172:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007174:	47b8      	blx	r7
 8007176:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007178:	3601      	adds	r6, #1
 800717a:	2900      	cmp	r1, #0
 800717c:	d1df      	bne.n	800713e <ai_layers_forward_all+0x22>
 800717e:	4630      	mov	r0, r6
 8007180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007184:	b19d      	cbz	r5, 80071ae <ai_layers_forward_all+0x92>
 8007186:	6545      	str	r5, [r0, #84]	; 0x54
 8007188:	463e      	mov	r6, r7
 800718a:	696b      	ldr	r3, [r5, #20]
 800718c:	4628      	mov	r0, r5
 800718e:	4798      	blx	r3
 8007190:	692b      	ldr	r3, [r5, #16]
 8007192:	42ab      	cmp	r3, r5
 8007194:	f106 0601 	add.w	r6, r6, #1
 8007198:	d004      	beq.n	80071a4 <ai_layers_forward_all+0x88>
 800719a:	6563      	str	r3, [r4, #84]	; 0x54
 800719c:	461d      	mov	r5, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1f3      	bne.n	800718a <ai_layers_forward_all+0x6e>
 80071a2:	e7e0      	b.n	8007166 <ai_layers_forward_all+0x4a>
 80071a4:	2300      	movs	r3, #0
 80071a6:	6563      	str	r3, [r4, #84]	; 0x54
 80071a8:	4630      	mov	r0, r6
 80071aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ae:	462e      	mov	r6, r5
 80071b0:	4630      	mov	r0, r6
 80071b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b6:	bf00      	nop

080071b8 <ai_layers_destroy_all>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80071bc:	b18c      	cbz	r4, 80071e2 <ai_layers_destroy_all+0x2a>
 80071be:	2500      	movs	r5, #0
 80071c0:	6863      	ldr	r3, [r4, #4]
 80071c2:	f013 0f04 	tst.w	r3, #4
 80071c6:	4620      	mov	r0, r4
 80071c8:	d003      	beq.n	80071d2 <ai_layers_destroy_all+0x1a>
 80071ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071cc:	b10b      	cbz	r3, 80071d2 <ai_layers_destroy_all+0x1a>
 80071ce:	4798      	blx	r3
 80071d0:	3501      	adds	r5, #1
 80071d2:	6923      	ldr	r3, [r4, #16]
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	d002      	beq.n	80071de <ai_layers_destroy_all+0x26>
 80071d8:	461c      	mov	r4, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f0      	bne.n	80071c0 <ai_layers_destroy_all+0x8>
 80071de:	4628      	mov	r0, r5
 80071e0:	bd38      	pop	{r3, r4, r5, pc}
 80071e2:	4625      	mov	r5, r4
 80071e4:	e7fb      	b.n	80071de <ai_layers_destroy_all+0x26>
 80071e6:	bf00      	nop

080071e8 <ai_array_to_buffer_fmt>:
 80071e8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d02e      	beq.n	800724e <ai_array_to_buffer_fmt+0x66>
 80071f0:	4a1b      	ldr	r2, [pc, #108]	; (8007260 <ai_array_to_buffer_fmt+0x78>)
 80071f2:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00e      	beq.n	8007218 <ai_array_to_buffer_fmt+0x30>
 80071fa:	dd11      	ble.n	8007220 <ai_array_to_buffer_fmt+0x38>
 80071fc:	4a19      	ldr	r2, [pc, #100]	; (8007264 <ai_array_to_buffer_fmt+0x7c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00a      	beq.n	8007218 <ai_array_to_buffer_fmt+0x30>
 8007202:	dd18      	ble.n	8007236 <ai_array_to_buffer_fmt+0x4e>
 8007204:	4a18      	ldr	r2, [pc, #96]	; (8007268 <ai_array_to_buffer_fmt+0x80>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d006      	beq.n	8007218 <ai_array_to_buffer_fmt+0x30>
 800720a:	4a18      	ldr	r2, [pc, #96]	; (800726c <ai_array_to_buffer_fmt+0x84>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d003      	beq.n	8007218 <ai_array_to_buffer_fmt+0x30>
 8007210:	4a17      	ldr	r2, [pc, #92]	; (8007270 <ai_array_to_buffer_fmt+0x88>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d000      	beq.n	8007218 <ai_array_to_buffer_fmt+0x30>
 8007216:	2340      	movs	r3, #64	; 0x40
 8007218:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800721c:	4318      	orrs	r0, r3
 800721e:	4770      	bx	lr
 8007220:	4a14      	ldr	r2, [pc, #80]	; (8007274 <ai_array_to_buffer_fmt+0x8c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d0f8      	beq.n	8007218 <ai_array_to_buffer_fmt+0x30>
 8007226:	dd06      	ble.n	8007236 <ai_array_to_buffer_fmt+0x4e>
 8007228:	4a13      	ldr	r2, [pc, #76]	; (8007278 <ai_array_to_buffer_fmt+0x90>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d0f4      	beq.n	8007218 <ai_array_to_buffer_fmt+0x30>
 800722e:	320f      	adds	r2, #15
 8007230:	4293      	cmp	r3, r2
 8007232:	d0f1      	beq.n	8007218 <ai_array_to_buffer_fmt+0x30>
 8007234:	e7ef      	b.n	8007216 <ai_array_to_buffer_fmt+0x2e>
 8007236:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800723a:	4293      	cmp	r3, r2
 800723c:	d0ec      	beq.n	8007218 <ai_array_to_buffer_fmt+0x30>
 800723e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007242:	4293      	cmp	r3, r2
 8007244:	d1e7      	bne.n	8007216 <ai_array_to_buffer_fmt+0x2e>
 8007246:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800724a:	4318      	orrs	r0, r3
 800724c:	4770      	bx	lr
 800724e:	4b0b      	ldr	r3, [pc, #44]	; (800727c <ai_array_to_buffer_fmt+0x94>)
 8007250:	4003      	ands	r3, r0
 8007252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007256:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800725a:	4318      	orrs	r0, r3
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	00060440 	.word	0x00060440
 8007264:	00840447 	.word	0x00840447
 8007268:	0084084f 	.word	0x0084084f
 800726c:	01821040 	.word	0x01821040
 8007270:	00840840 	.word	0x00840840
 8007274:	00040447 	.word	0x00040447
 8007278:	00040840 	.word	0x00040840
 800727c:	00803fff 	.word	0x00803fff

08007280 <ai_array_get_byte_size>:
 8007280:	b1c1      	cbz	r1, 80072b4 <ai_array_get_byte_size+0x34>
 8007282:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8007286:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800728a:	4413      	add	r3, r2
 800728c:	fb01 f103 	mul.w	r1, r1, r3
 8007290:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8007294:	3107      	adds	r1, #7
 8007296:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800729a:	f021 0107 	bic.w	r1, r1, #7
 800729e:	2804      	cmp	r0, #4
 80072a0:	fa21 f102 	lsr.w	r1, r1, r2
 80072a4:	d008      	beq.n	80072b8 <ai_array_get_byte_size+0x38>
 80072a6:	2808      	cmp	r0, #8
 80072a8:	d101      	bne.n	80072ae <ai_array_get_byte_size+0x2e>
 80072aa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80072ae:	3107      	adds	r1, #7
 80072b0:	08c8      	lsrs	r0, r1, #3
 80072b2:	4770      	bx	lr
 80072b4:	4608      	mov	r0, r1
 80072b6:	4770      	bx	lr
 80072b8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80072bc:	3107      	adds	r1, #7
 80072be:	08c8      	lsrs	r0, r1, #3
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop

080072c4 <calloc>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <calloc+0xc>)
 80072c6:	460a      	mov	r2, r1
 80072c8:	4601      	mov	r1, r0
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	f000 b852 	b.w	8007374 <_calloc_r>
 80072d0:	20000ed0 	.word	0x20000ed0

080072d4 <__errno>:
 80072d4:	4b01      	ldr	r3, [pc, #4]	; (80072dc <__errno+0x8>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000ed0 	.word	0x20000ed0

080072e0 <__libc_init_array>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4d0d      	ldr	r5, [pc, #52]	; (8007318 <__libc_init_array+0x38>)
 80072e4:	4c0d      	ldr	r4, [pc, #52]	; (800731c <__libc_init_array+0x3c>)
 80072e6:	1b64      	subs	r4, r4, r5
 80072e8:	10a4      	asrs	r4, r4, #2
 80072ea:	2600      	movs	r6, #0
 80072ec:	42a6      	cmp	r6, r4
 80072ee:	d109      	bne.n	8007304 <__libc_init_array+0x24>
 80072f0:	4d0b      	ldr	r5, [pc, #44]	; (8007320 <__libc_init_array+0x40>)
 80072f2:	4c0c      	ldr	r4, [pc, #48]	; (8007324 <__libc_init_array+0x44>)
 80072f4:	f003 fb7a 	bl	800a9ec <_init>
 80072f8:	1b64      	subs	r4, r4, r5
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	2600      	movs	r6, #0
 80072fe:	42a6      	cmp	r6, r4
 8007300:	d105      	bne.n	800730e <__libc_init_array+0x2e>
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	f855 3b04 	ldr.w	r3, [r5], #4
 8007308:	4798      	blx	r3
 800730a:	3601      	adds	r6, #1
 800730c:	e7ee      	b.n	80072ec <__libc_init_array+0xc>
 800730e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007312:	4798      	blx	r3
 8007314:	3601      	adds	r6, #1
 8007316:	e7f2      	b.n	80072fe <__libc_init_array+0x1e>
 8007318:	08066468 	.word	0x08066468
 800731c:	08066468 	.word	0x08066468
 8007320:	08066468 	.word	0x08066468
 8007324:	0806646c 	.word	0x0806646c

08007328 <malloc>:
 8007328:	4b02      	ldr	r3, [pc, #8]	; (8007334 <malloc+0xc>)
 800732a:	4601      	mov	r1, r0
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	f000 b881 	b.w	8007434 <_malloc_r>
 8007332:	bf00      	nop
 8007334:	20000ed0 	.word	0x20000ed0

08007338 <free>:
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <free+0xc>)
 800733a:	4601      	mov	r1, r0
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f000 b829 	b.w	8007394 <_free_r>
 8007342:	bf00      	nop
 8007344:	20000ed0 	.word	0x20000ed0

08007348 <memcpy>:
 8007348:	440a      	add	r2, r1
 800734a:	4291      	cmp	r1, r2
 800734c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007350:	d100      	bne.n	8007354 <memcpy+0xc>
 8007352:	4770      	bx	lr
 8007354:	b510      	push	{r4, lr}
 8007356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800735a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800735e:	4291      	cmp	r1, r2
 8007360:	d1f9      	bne.n	8007356 <memcpy+0xe>
 8007362:	bd10      	pop	{r4, pc}

08007364 <memset>:
 8007364:	4402      	add	r2, r0
 8007366:	4603      	mov	r3, r0
 8007368:	4293      	cmp	r3, r2
 800736a:	d100      	bne.n	800736e <memset+0xa>
 800736c:	4770      	bx	lr
 800736e:	f803 1b01 	strb.w	r1, [r3], #1
 8007372:	e7f9      	b.n	8007368 <memset+0x4>

08007374 <_calloc_r>:
 8007374:	b513      	push	{r0, r1, r4, lr}
 8007376:	434a      	muls	r2, r1
 8007378:	4611      	mov	r1, r2
 800737a:	9201      	str	r2, [sp, #4]
 800737c:	f000 f85a 	bl	8007434 <_malloc_r>
 8007380:	4604      	mov	r4, r0
 8007382:	b118      	cbz	r0, 800738c <_calloc_r+0x18>
 8007384:	9a01      	ldr	r2, [sp, #4]
 8007386:	2100      	movs	r1, #0
 8007388:	f7ff ffec 	bl	8007364 <memset>
 800738c:	4620      	mov	r0, r4
 800738e:	b002      	add	sp, #8
 8007390:	bd10      	pop	{r4, pc}
	...

08007394 <_free_r>:
 8007394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007396:	2900      	cmp	r1, #0
 8007398:	d048      	beq.n	800742c <_free_r+0x98>
 800739a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739e:	9001      	str	r0, [sp, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f1a1 0404 	sub.w	r4, r1, #4
 80073a6:	bfb8      	it	lt
 80073a8:	18e4      	addlt	r4, r4, r3
 80073aa:	f001 ff29 	bl	8009200 <__malloc_lock>
 80073ae:	4a20      	ldr	r2, [pc, #128]	; (8007430 <_free_r+0x9c>)
 80073b0:	9801      	ldr	r0, [sp, #4]
 80073b2:	6813      	ldr	r3, [r2, #0]
 80073b4:	4615      	mov	r5, r2
 80073b6:	b933      	cbnz	r3, 80073c6 <_free_r+0x32>
 80073b8:	6063      	str	r3, [r4, #4]
 80073ba:	6014      	str	r4, [r2, #0]
 80073bc:	b003      	add	sp, #12
 80073be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073c2:	f001 bf23 	b.w	800920c <__malloc_unlock>
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	d90b      	bls.n	80073e2 <_free_r+0x4e>
 80073ca:	6821      	ldr	r1, [r4, #0]
 80073cc:	1862      	adds	r2, r4, r1
 80073ce:	4293      	cmp	r3, r2
 80073d0:	bf04      	itt	eq
 80073d2:	681a      	ldreq	r2, [r3, #0]
 80073d4:	685b      	ldreq	r3, [r3, #4]
 80073d6:	6063      	str	r3, [r4, #4]
 80073d8:	bf04      	itt	eq
 80073da:	1852      	addeq	r2, r2, r1
 80073dc:	6022      	streq	r2, [r4, #0]
 80073de:	602c      	str	r4, [r5, #0]
 80073e0:	e7ec      	b.n	80073bc <_free_r+0x28>
 80073e2:	461a      	mov	r2, r3
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	b10b      	cbz	r3, 80073ec <_free_r+0x58>
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	d9fa      	bls.n	80073e2 <_free_r+0x4e>
 80073ec:	6811      	ldr	r1, [r2, #0]
 80073ee:	1855      	adds	r5, r2, r1
 80073f0:	42a5      	cmp	r5, r4
 80073f2:	d10b      	bne.n	800740c <_free_r+0x78>
 80073f4:	6824      	ldr	r4, [r4, #0]
 80073f6:	4421      	add	r1, r4
 80073f8:	1854      	adds	r4, r2, r1
 80073fa:	42a3      	cmp	r3, r4
 80073fc:	6011      	str	r1, [r2, #0]
 80073fe:	d1dd      	bne.n	80073bc <_free_r+0x28>
 8007400:	681c      	ldr	r4, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	6053      	str	r3, [r2, #4]
 8007406:	4421      	add	r1, r4
 8007408:	6011      	str	r1, [r2, #0]
 800740a:	e7d7      	b.n	80073bc <_free_r+0x28>
 800740c:	d902      	bls.n	8007414 <_free_r+0x80>
 800740e:	230c      	movs	r3, #12
 8007410:	6003      	str	r3, [r0, #0]
 8007412:	e7d3      	b.n	80073bc <_free_r+0x28>
 8007414:	6825      	ldr	r5, [r4, #0]
 8007416:	1961      	adds	r1, r4, r5
 8007418:	428b      	cmp	r3, r1
 800741a:	bf04      	itt	eq
 800741c:	6819      	ldreq	r1, [r3, #0]
 800741e:	685b      	ldreq	r3, [r3, #4]
 8007420:	6063      	str	r3, [r4, #4]
 8007422:	bf04      	itt	eq
 8007424:	1949      	addeq	r1, r1, r5
 8007426:	6021      	streq	r1, [r4, #0]
 8007428:	6054      	str	r4, [r2, #4]
 800742a:	e7c7      	b.n	80073bc <_free_r+0x28>
 800742c:	b003      	add	sp, #12
 800742e:	bd30      	pop	{r4, r5, pc}
 8007430:	200015c8 	.word	0x200015c8

08007434 <_malloc_r>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	1ccd      	adds	r5, r1, #3
 8007438:	f025 0503 	bic.w	r5, r5, #3
 800743c:	3508      	adds	r5, #8
 800743e:	2d0c      	cmp	r5, #12
 8007440:	bf38      	it	cc
 8007442:	250c      	movcc	r5, #12
 8007444:	2d00      	cmp	r5, #0
 8007446:	4606      	mov	r6, r0
 8007448:	db01      	blt.n	800744e <_malloc_r+0x1a>
 800744a:	42a9      	cmp	r1, r5
 800744c:	d903      	bls.n	8007456 <_malloc_r+0x22>
 800744e:	230c      	movs	r3, #12
 8007450:	6033      	str	r3, [r6, #0]
 8007452:	2000      	movs	r0, #0
 8007454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007456:	f001 fed3 	bl	8009200 <__malloc_lock>
 800745a:	4921      	ldr	r1, [pc, #132]	; (80074e0 <_malloc_r+0xac>)
 800745c:	680a      	ldr	r2, [r1, #0]
 800745e:	4614      	mov	r4, r2
 8007460:	b99c      	cbnz	r4, 800748a <_malloc_r+0x56>
 8007462:	4f20      	ldr	r7, [pc, #128]	; (80074e4 <_malloc_r+0xb0>)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	b923      	cbnz	r3, 8007472 <_malloc_r+0x3e>
 8007468:	4621      	mov	r1, r4
 800746a:	4630      	mov	r0, r6
 800746c:	f000 fd3c 	bl	8007ee8 <_sbrk_r>
 8007470:	6038      	str	r0, [r7, #0]
 8007472:	4629      	mov	r1, r5
 8007474:	4630      	mov	r0, r6
 8007476:	f000 fd37 	bl	8007ee8 <_sbrk_r>
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	d123      	bne.n	80074c6 <_malloc_r+0x92>
 800747e:	230c      	movs	r3, #12
 8007480:	6033      	str	r3, [r6, #0]
 8007482:	4630      	mov	r0, r6
 8007484:	f001 fec2 	bl	800920c <__malloc_unlock>
 8007488:	e7e3      	b.n	8007452 <_malloc_r+0x1e>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	1b5b      	subs	r3, r3, r5
 800748e:	d417      	bmi.n	80074c0 <_malloc_r+0x8c>
 8007490:	2b0b      	cmp	r3, #11
 8007492:	d903      	bls.n	800749c <_malloc_r+0x68>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	441c      	add	r4, r3
 8007498:	6025      	str	r5, [r4, #0]
 800749a:	e004      	b.n	80074a6 <_malloc_r+0x72>
 800749c:	6863      	ldr	r3, [r4, #4]
 800749e:	42a2      	cmp	r2, r4
 80074a0:	bf0c      	ite	eq
 80074a2:	600b      	streq	r3, [r1, #0]
 80074a4:	6053      	strne	r3, [r2, #4]
 80074a6:	4630      	mov	r0, r6
 80074a8:	f001 feb0 	bl	800920c <__malloc_unlock>
 80074ac:	f104 000b 	add.w	r0, r4, #11
 80074b0:	1d23      	adds	r3, r4, #4
 80074b2:	f020 0007 	bic.w	r0, r0, #7
 80074b6:	1ac2      	subs	r2, r0, r3
 80074b8:	d0cc      	beq.n	8007454 <_malloc_r+0x20>
 80074ba:	1a1b      	subs	r3, r3, r0
 80074bc:	50a3      	str	r3, [r4, r2]
 80074be:	e7c9      	b.n	8007454 <_malloc_r+0x20>
 80074c0:	4622      	mov	r2, r4
 80074c2:	6864      	ldr	r4, [r4, #4]
 80074c4:	e7cc      	b.n	8007460 <_malloc_r+0x2c>
 80074c6:	1cc4      	adds	r4, r0, #3
 80074c8:	f024 0403 	bic.w	r4, r4, #3
 80074cc:	42a0      	cmp	r0, r4
 80074ce:	d0e3      	beq.n	8007498 <_malloc_r+0x64>
 80074d0:	1a21      	subs	r1, r4, r0
 80074d2:	4630      	mov	r0, r6
 80074d4:	f000 fd08 	bl	8007ee8 <_sbrk_r>
 80074d8:	3001      	adds	r0, #1
 80074da:	d1dd      	bne.n	8007498 <_malloc_r+0x64>
 80074dc:	e7cf      	b.n	800747e <_malloc_r+0x4a>
 80074de:	bf00      	nop
 80074e0:	200015c8 	.word	0x200015c8
 80074e4:	200015cc 	.word	0x200015cc

080074e8 <__cvt>:
 80074e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	ec55 4b10 	vmov	r4, r5, d0
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	460e      	mov	r6, r1
 80074f4:	4619      	mov	r1, r3
 80074f6:	462b      	mov	r3, r5
 80074f8:	bfbb      	ittet	lt
 80074fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074fe:	461d      	movlt	r5, r3
 8007500:	2300      	movge	r3, #0
 8007502:	232d      	movlt	r3, #45	; 0x2d
 8007504:	700b      	strb	r3, [r1, #0]
 8007506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800750c:	4691      	mov	r9, r2
 800750e:	f023 0820 	bic.w	r8, r3, #32
 8007512:	bfbc      	itt	lt
 8007514:	4622      	movlt	r2, r4
 8007516:	4614      	movlt	r4, r2
 8007518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800751c:	d005      	beq.n	800752a <__cvt+0x42>
 800751e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007522:	d100      	bne.n	8007526 <__cvt+0x3e>
 8007524:	3601      	adds	r6, #1
 8007526:	2102      	movs	r1, #2
 8007528:	e000      	b.n	800752c <__cvt+0x44>
 800752a:	2103      	movs	r1, #3
 800752c:	ab03      	add	r3, sp, #12
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	ab02      	add	r3, sp, #8
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	ec45 4b10 	vmov	d0, r4, r5
 8007538:	4653      	mov	r3, sl
 800753a:	4632      	mov	r2, r6
 800753c:	f000 fe50 	bl	80081e0 <_dtoa_r>
 8007540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007544:	4607      	mov	r7, r0
 8007546:	d102      	bne.n	800754e <__cvt+0x66>
 8007548:	f019 0f01 	tst.w	r9, #1
 800754c:	d022      	beq.n	8007594 <__cvt+0xac>
 800754e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007552:	eb07 0906 	add.w	r9, r7, r6
 8007556:	d110      	bne.n	800757a <__cvt+0x92>
 8007558:	783b      	ldrb	r3, [r7, #0]
 800755a:	2b30      	cmp	r3, #48	; 0x30
 800755c:	d10a      	bne.n	8007574 <__cvt+0x8c>
 800755e:	2200      	movs	r2, #0
 8007560:	2300      	movs	r3, #0
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f9 fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800756a:	b918      	cbnz	r0, 8007574 <__cvt+0x8c>
 800756c:	f1c6 0601 	rsb	r6, r6, #1
 8007570:	f8ca 6000 	str.w	r6, [sl]
 8007574:	f8da 3000 	ldr.w	r3, [sl]
 8007578:	4499      	add	r9, r3
 800757a:	2200      	movs	r2, #0
 800757c:	2300      	movs	r3, #0
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f9 faa9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007586:	b108      	cbz	r0, 800758c <__cvt+0xa4>
 8007588:	f8cd 900c 	str.w	r9, [sp, #12]
 800758c:	2230      	movs	r2, #48	; 0x30
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	454b      	cmp	r3, r9
 8007592:	d307      	bcc.n	80075a4 <__cvt+0xbc>
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007598:	1bdb      	subs	r3, r3, r7
 800759a:	4638      	mov	r0, r7
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	b004      	add	sp, #16
 80075a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a4:	1c59      	adds	r1, r3, #1
 80075a6:	9103      	str	r1, [sp, #12]
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	e7f0      	b.n	800758e <__cvt+0xa6>

080075ac <__exponent>:
 80075ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ae:	4603      	mov	r3, r0
 80075b0:	2900      	cmp	r1, #0
 80075b2:	bfb8      	it	lt
 80075b4:	4249      	neglt	r1, r1
 80075b6:	f803 2b02 	strb.w	r2, [r3], #2
 80075ba:	bfb4      	ite	lt
 80075bc:	222d      	movlt	r2, #45	; 0x2d
 80075be:	222b      	movge	r2, #43	; 0x2b
 80075c0:	2909      	cmp	r1, #9
 80075c2:	7042      	strb	r2, [r0, #1]
 80075c4:	dd2a      	ble.n	800761c <__exponent+0x70>
 80075c6:	f10d 0407 	add.w	r4, sp, #7
 80075ca:	46a4      	mov	ip, r4
 80075cc:	270a      	movs	r7, #10
 80075ce:	46a6      	mov	lr, r4
 80075d0:	460a      	mov	r2, r1
 80075d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80075d6:	fb07 1516 	mls	r5, r7, r6, r1
 80075da:	3530      	adds	r5, #48	; 0x30
 80075dc:	2a63      	cmp	r2, #99	; 0x63
 80075de:	f104 34ff 	add.w	r4, r4, #4294967295
 80075e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075e6:	4631      	mov	r1, r6
 80075e8:	dcf1      	bgt.n	80075ce <__exponent+0x22>
 80075ea:	3130      	adds	r1, #48	; 0x30
 80075ec:	f1ae 0502 	sub.w	r5, lr, #2
 80075f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075f4:	1c44      	adds	r4, r0, #1
 80075f6:	4629      	mov	r1, r5
 80075f8:	4561      	cmp	r1, ip
 80075fa:	d30a      	bcc.n	8007612 <__exponent+0x66>
 80075fc:	f10d 0209 	add.w	r2, sp, #9
 8007600:	eba2 020e 	sub.w	r2, r2, lr
 8007604:	4565      	cmp	r5, ip
 8007606:	bf88      	it	hi
 8007608:	2200      	movhi	r2, #0
 800760a:	4413      	add	r3, r2
 800760c:	1a18      	subs	r0, r3, r0
 800760e:	b003      	add	sp, #12
 8007610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007616:	f804 2f01 	strb.w	r2, [r4, #1]!
 800761a:	e7ed      	b.n	80075f8 <__exponent+0x4c>
 800761c:	2330      	movs	r3, #48	; 0x30
 800761e:	3130      	adds	r1, #48	; 0x30
 8007620:	7083      	strb	r3, [r0, #2]
 8007622:	70c1      	strb	r1, [r0, #3]
 8007624:	1d03      	adds	r3, r0, #4
 8007626:	e7f1      	b.n	800760c <__exponent+0x60>

08007628 <_printf_float>:
 8007628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	ed2d 8b02 	vpush	{d8}
 8007630:	b08d      	sub	sp, #52	; 0x34
 8007632:	460c      	mov	r4, r1
 8007634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007638:	4616      	mov	r6, r2
 800763a:	461f      	mov	r7, r3
 800763c:	4605      	mov	r5, r0
 800763e:	f001 fd73 	bl	8009128 <_localeconv_r>
 8007642:	f8d0 a000 	ldr.w	sl, [r0]
 8007646:	4650      	mov	r0, sl
 8007648:	f7f8 fdca 	bl	80001e0 <strlen>
 800764c:	2300      	movs	r3, #0
 800764e:	930a      	str	r3, [sp, #40]	; 0x28
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	9305      	str	r3, [sp, #20]
 8007654:	f8d8 3000 	ldr.w	r3, [r8]
 8007658:	f894 b018 	ldrb.w	fp, [r4, #24]
 800765c:	3307      	adds	r3, #7
 800765e:	f023 0307 	bic.w	r3, r3, #7
 8007662:	f103 0208 	add.w	r2, r3, #8
 8007666:	f8c8 2000 	str.w	r2, [r8]
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007672:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800767a:	9307      	str	r3, [sp, #28]
 800767c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007680:	ee08 0a10 	vmov	s16, r0
 8007684:	4b9f      	ldr	r3, [pc, #636]	; (8007904 <_printf_float+0x2dc>)
 8007686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800768a:	f04f 32ff 	mov.w	r2, #4294967295
 800768e:	f7f9 fa55 	bl	8000b3c <__aeabi_dcmpun>
 8007692:	bb88      	cbnz	r0, 80076f8 <_printf_float+0xd0>
 8007694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007698:	4b9a      	ldr	r3, [pc, #616]	; (8007904 <_printf_float+0x2dc>)
 800769a:	f04f 32ff 	mov.w	r2, #4294967295
 800769e:	f7f9 fa2f 	bl	8000b00 <__aeabi_dcmple>
 80076a2:	bb48      	cbnz	r0, 80076f8 <_printf_float+0xd0>
 80076a4:	2200      	movs	r2, #0
 80076a6:	2300      	movs	r3, #0
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	f7f9 fa1e 	bl	8000aec <__aeabi_dcmplt>
 80076b0:	b110      	cbz	r0, 80076b8 <_printf_float+0x90>
 80076b2:	232d      	movs	r3, #45	; 0x2d
 80076b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b8:	4b93      	ldr	r3, [pc, #588]	; (8007908 <_printf_float+0x2e0>)
 80076ba:	4894      	ldr	r0, [pc, #592]	; (800790c <_printf_float+0x2e4>)
 80076bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076c0:	bf94      	ite	ls
 80076c2:	4698      	movls	r8, r3
 80076c4:	4680      	movhi	r8, r0
 80076c6:	2303      	movs	r3, #3
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	9b05      	ldr	r3, [sp, #20]
 80076cc:	f023 0204 	bic.w	r2, r3, #4
 80076d0:	6022      	str	r2, [r4, #0]
 80076d2:	f04f 0900 	mov.w	r9, #0
 80076d6:	9700      	str	r7, [sp, #0]
 80076d8:	4633      	mov	r3, r6
 80076da:	aa0b      	add	r2, sp, #44	; 0x2c
 80076dc:	4621      	mov	r1, r4
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 f9d8 	bl	8007a94 <_printf_common>
 80076e4:	3001      	adds	r0, #1
 80076e6:	f040 8090 	bne.w	800780a <_printf_float+0x1e2>
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	b00d      	add	sp, #52	; 0x34
 80076f0:	ecbd 8b02 	vpop	{d8}
 80076f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f8:	4642      	mov	r2, r8
 80076fa:	464b      	mov	r3, r9
 80076fc:	4640      	mov	r0, r8
 80076fe:	4649      	mov	r1, r9
 8007700:	f7f9 fa1c 	bl	8000b3c <__aeabi_dcmpun>
 8007704:	b140      	cbz	r0, 8007718 <_printf_float+0xf0>
 8007706:	464b      	mov	r3, r9
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfbc      	itt	lt
 800770c:	232d      	movlt	r3, #45	; 0x2d
 800770e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007712:	487f      	ldr	r0, [pc, #508]	; (8007910 <_printf_float+0x2e8>)
 8007714:	4b7f      	ldr	r3, [pc, #508]	; (8007914 <_printf_float+0x2ec>)
 8007716:	e7d1      	b.n	80076bc <_printf_float+0x94>
 8007718:	6863      	ldr	r3, [r4, #4]
 800771a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800771e:	9206      	str	r2, [sp, #24]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	d13f      	bne.n	80077a4 <_printf_float+0x17c>
 8007724:	2306      	movs	r3, #6
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	9b05      	ldr	r3, [sp, #20]
 800772a:	6861      	ldr	r1, [r4, #4]
 800772c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007730:	2300      	movs	r3, #0
 8007732:	9303      	str	r3, [sp, #12]
 8007734:	ab0a      	add	r3, sp, #40	; 0x28
 8007736:	e9cd b301 	strd	fp, r3, [sp, #4]
 800773a:	ab09      	add	r3, sp, #36	; 0x24
 800773c:	ec49 8b10 	vmov	d0, r8, r9
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	6022      	str	r2, [r4, #0]
 8007744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007748:	4628      	mov	r0, r5
 800774a:	f7ff fecd 	bl	80074e8 <__cvt>
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007752:	2b47      	cmp	r3, #71	; 0x47
 8007754:	4680      	mov	r8, r0
 8007756:	d108      	bne.n	800776a <_printf_float+0x142>
 8007758:	1cc8      	adds	r0, r1, #3
 800775a:	db02      	blt.n	8007762 <_printf_float+0x13a>
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	4299      	cmp	r1, r3
 8007760:	dd41      	ble.n	80077e6 <_printf_float+0x1be>
 8007762:	f1ab 0b02 	sub.w	fp, fp, #2
 8007766:	fa5f fb8b 	uxtb.w	fp, fp
 800776a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800776e:	d820      	bhi.n	80077b2 <_printf_float+0x18a>
 8007770:	3901      	subs	r1, #1
 8007772:	465a      	mov	r2, fp
 8007774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007778:	9109      	str	r1, [sp, #36]	; 0x24
 800777a:	f7ff ff17 	bl	80075ac <__exponent>
 800777e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007780:	1813      	adds	r3, r2, r0
 8007782:	2a01      	cmp	r2, #1
 8007784:	4681      	mov	r9, r0
 8007786:	6123      	str	r3, [r4, #16]
 8007788:	dc02      	bgt.n	8007790 <_printf_float+0x168>
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	07d2      	lsls	r2, r2, #31
 800778e:	d501      	bpl.n	8007794 <_printf_float+0x16c>
 8007790:	3301      	adds	r3, #1
 8007792:	6123      	str	r3, [r4, #16]
 8007794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007798:	2b00      	cmp	r3, #0
 800779a:	d09c      	beq.n	80076d6 <_printf_float+0xae>
 800779c:	232d      	movs	r3, #45	; 0x2d
 800779e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a2:	e798      	b.n	80076d6 <_printf_float+0xae>
 80077a4:	9a06      	ldr	r2, [sp, #24]
 80077a6:	2a47      	cmp	r2, #71	; 0x47
 80077a8:	d1be      	bne.n	8007728 <_printf_float+0x100>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1bc      	bne.n	8007728 <_printf_float+0x100>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e7b9      	b.n	8007726 <_printf_float+0xfe>
 80077b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077b6:	d118      	bne.n	80077ea <_printf_float+0x1c2>
 80077b8:	2900      	cmp	r1, #0
 80077ba:	6863      	ldr	r3, [r4, #4]
 80077bc:	dd0b      	ble.n	80077d6 <_printf_float+0x1ae>
 80077be:	6121      	str	r1, [r4, #16]
 80077c0:	b913      	cbnz	r3, 80077c8 <_printf_float+0x1a0>
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	07d0      	lsls	r0, r2, #31
 80077c6:	d502      	bpl.n	80077ce <_printf_float+0x1a6>
 80077c8:	3301      	adds	r3, #1
 80077ca:	440b      	add	r3, r1
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80077d0:	f04f 0900 	mov.w	r9, #0
 80077d4:	e7de      	b.n	8007794 <_printf_float+0x16c>
 80077d6:	b913      	cbnz	r3, 80077de <_printf_float+0x1b6>
 80077d8:	6822      	ldr	r2, [r4, #0]
 80077da:	07d2      	lsls	r2, r2, #31
 80077dc:	d501      	bpl.n	80077e2 <_printf_float+0x1ba>
 80077de:	3302      	adds	r3, #2
 80077e0:	e7f4      	b.n	80077cc <_printf_float+0x1a4>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7f2      	b.n	80077cc <_printf_float+0x1a4>
 80077e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ec:	4299      	cmp	r1, r3
 80077ee:	db05      	blt.n	80077fc <_printf_float+0x1d4>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	6121      	str	r1, [r4, #16]
 80077f4:	07d8      	lsls	r0, r3, #31
 80077f6:	d5ea      	bpl.n	80077ce <_printf_float+0x1a6>
 80077f8:	1c4b      	adds	r3, r1, #1
 80077fa:	e7e7      	b.n	80077cc <_printf_float+0x1a4>
 80077fc:	2900      	cmp	r1, #0
 80077fe:	bfd4      	ite	le
 8007800:	f1c1 0202 	rsble	r2, r1, #2
 8007804:	2201      	movgt	r2, #1
 8007806:	4413      	add	r3, r2
 8007808:	e7e0      	b.n	80077cc <_printf_float+0x1a4>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	055a      	lsls	r2, r3, #21
 800780e:	d407      	bmi.n	8007820 <_printf_float+0x1f8>
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	4642      	mov	r2, r8
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	d12c      	bne.n	8007878 <_printf_float+0x250>
 800781e:	e764      	b.n	80076ea <_printf_float+0xc2>
 8007820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007824:	f240 80e0 	bls.w	80079e8 <_printf_float+0x3c0>
 8007828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800782c:	2200      	movs	r2, #0
 800782e:	2300      	movs	r3, #0
 8007830:	f7f9 f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8007834:	2800      	cmp	r0, #0
 8007836:	d034      	beq.n	80078a2 <_printf_float+0x27a>
 8007838:	4a37      	ldr	r2, [pc, #220]	; (8007918 <_printf_float+0x2f0>)
 800783a:	2301      	movs	r3, #1
 800783c:	4631      	mov	r1, r6
 800783e:	4628      	mov	r0, r5
 8007840:	47b8      	blx	r7
 8007842:	3001      	adds	r0, #1
 8007844:	f43f af51 	beq.w	80076ea <_printf_float+0xc2>
 8007848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800784c:	429a      	cmp	r2, r3
 800784e:	db02      	blt.n	8007856 <_printf_float+0x22e>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	07d8      	lsls	r0, r3, #31
 8007854:	d510      	bpl.n	8007878 <_printf_float+0x250>
 8007856:	ee18 3a10 	vmov	r3, s16
 800785a:	4652      	mov	r2, sl
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	f43f af41 	beq.w	80076ea <_printf_float+0xc2>
 8007868:	f04f 0800 	mov.w	r8, #0
 800786c:	f104 091a 	add.w	r9, r4, #26
 8007870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007872:	3b01      	subs	r3, #1
 8007874:	4543      	cmp	r3, r8
 8007876:	dc09      	bgt.n	800788c <_printf_float+0x264>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	079b      	lsls	r3, r3, #30
 800787c:	f100 8105 	bmi.w	8007a8a <_printf_float+0x462>
 8007880:	68e0      	ldr	r0, [r4, #12]
 8007882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007884:	4298      	cmp	r0, r3
 8007886:	bfb8      	it	lt
 8007888:	4618      	movlt	r0, r3
 800788a:	e730      	b.n	80076ee <_printf_float+0xc6>
 800788c:	2301      	movs	r3, #1
 800788e:	464a      	mov	r2, r9
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f af27 	beq.w	80076ea <_printf_float+0xc2>
 800789c:	f108 0801 	add.w	r8, r8, #1
 80078a0:	e7e6      	b.n	8007870 <_printf_float+0x248>
 80078a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc39      	bgt.n	800791c <_printf_float+0x2f4>
 80078a8:	4a1b      	ldr	r2, [pc, #108]	; (8007918 <_printf_float+0x2f0>)
 80078aa:	2301      	movs	r3, #1
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f af19 	beq.w	80076ea <_printf_float+0xc2>
 80078b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078bc:	4313      	orrs	r3, r2
 80078be:	d102      	bne.n	80078c6 <_printf_float+0x29e>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	d5d8      	bpl.n	8007878 <_printf_float+0x250>
 80078c6:	ee18 3a10 	vmov	r3, s16
 80078ca:	4652      	mov	r2, sl
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	f43f af09 	beq.w	80076ea <_printf_float+0xc2>
 80078d8:	f04f 0900 	mov.w	r9, #0
 80078dc:	f104 0a1a 	add.w	sl, r4, #26
 80078e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e2:	425b      	negs	r3, r3
 80078e4:	454b      	cmp	r3, r9
 80078e6:	dc01      	bgt.n	80078ec <_printf_float+0x2c4>
 80078e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ea:	e792      	b.n	8007812 <_printf_float+0x1ea>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4652      	mov	r2, sl
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f aef7 	beq.w	80076ea <_printf_float+0xc2>
 80078fc:	f109 0901 	add.w	r9, r9, #1
 8007900:	e7ee      	b.n	80078e0 <_printf_float+0x2b8>
 8007902:	bf00      	nop
 8007904:	7fefffff 	.word	0x7fefffff
 8007908:	08066050 	.word	0x08066050
 800790c:	08066054 	.word	0x08066054
 8007910:	0806605c 	.word	0x0806605c
 8007914:	08066058 	.word	0x08066058
 8007918:	08066060 	.word	0x08066060
 800791c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800791e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007920:	429a      	cmp	r2, r3
 8007922:	bfa8      	it	ge
 8007924:	461a      	movge	r2, r3
 8007926:	2a00      	cmp	r2, #0
 8007928:	4691      	mov	r9, r2
 800792a:	dc37      	bgt.n	800799c <_printf_float+0x374>
 800792c:	f04f 0b00 	mov.w	fp, #0
 8007930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007934:	f104 021a 	add.w	r2, r4, #26
 8007938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	eba3 0309 	sub.w	r3, r3, r9
 8007940:	455b      	cmp	r3, fp
 8007942:	dc33      	bgt.n	80079ac <_printf_float+0x384>
 8007944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007948:	429a      	cmp	r2, r3
 800794a:	db3b      	blt.n	80079c4 <_printf_float+0x39c>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	07da      	lsls	r2, r3, #31
 8007950:	d438      	bmi.n	80079c4 <_printf_float+0x39c>
 8007952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007954:	9b05      	ldr	r3, [sp, #20]
 8007956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	eba2 0901 	sub.w	r9, r2, r1
 800795e:	4599      	cmp	r9, r3
 8007960:	bfa8      	it	ge
 8007962:	4699      	movge	r9, r3
 8007964:	f1b9 0f00 	cmp.w	r9, #0
 8007968:	dc35      	bgt.n	80079d6 <_printf_float+0x3ae>
 800796a:	f04f 0800 	mov.w	r8, #0
 800796e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007972:	f104 0a1a 	add.w	sl, r4, #26
 8007976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800797a:	1a9b      	subs	r3, r3, r2
 800797c:	eba3 0309 	sub.w	r3, r3, r9
 8007980:	4543      	cmp	r3, r8
 8007982:	f77f af79 	ble.w	8007878 <_printf_float+0x250>
 8007986:	2301      	movs	r3, #1
 8007988:	4652      	mov	r2, sl
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f aeaa 	beq.w	80076ea <_printf_float+0xc2>
 8007996:	f108 0801 	add.w	r8, r8, #1
 800799a:	e7ec      	b.n	8007976 <_printf_float+0x34e>
 800799c:	4613      	mov	r3, r2
 800799e:	4631      	mov	r1, r6
 80079a0:	4642      	mov	r2, r8
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	d1c0      	bne.n	800792c <_printf_float+0x304>
 80079aa:	e69e      	b.n	80076ea <_printf_float+0xc2>
 80079ac:	2301      	movs	r3, #1
 80079ae:	4631      	mov	r1, r6
 80079b0:	4628      	mov	r0, r5
 80079b2:	9205      	str	r2, [sp, #20]
 80079b4:	47b8      	blx	r7
 80079b6:	3001      	adds	r0, #1
 80079b8:	f43f ae97 	beq.w	80076ea <_printf_float+0xc2>
 80079bc:	9a05      	ldr	r2, [sp, #20]
 80079be:	f10b 0b01 	add.w	fp, fp, #1
 80079c2:	e7b9      	b.n	8007938 <_printf_float+0x310>
 80079c4:	ee18 3a10 	vmov	r3, s16
 80079c8:	4652      	mov	r2, sl
 80079ca:	4631      	mov	r1, r6
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b8      	blx	r7
 80079d0:	3001      	adds	r0, #1
 80079d2:	d1be      	bne.n	8007952 <_printf_float+0x32a>
 80079d4:	e689      	b.n	80076ea <_printf_float+0xc2>
 80079d6:	9a05      	ldr	r2, [sp, #20]
 80079d8:	464b      	mov	r3, r9
 80079da:	4442      	add	r2, r8
 80079dc:	4631      	mov	r1, r6
 80079de:	4628      	mov	r0, r5
 80079e0:	47b8      	blx	r7
 80079e2:	3001      	adds	r0, #1
 80079e4:	d1c1      	bne.n	800796a <_printf_float+0x342>
 80079e6:	e680      	b.n	80076ea <_printf_float+0xc2>
 80079e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ea:	2a01      	cmp	r2, #1
 80079ec:	dc01      	bgt.n	80079f2 <_printf_float+0x3ca>
 80079ee:	07db      	lsls	r3, r3, #31
 80079f0:	d538      	bpl.n	8007a64 <_printf_float+0x43c>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4642      	mov	r2, r8
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	f43f ae74 	beq.w	80076ea <_printf_float+0xc2>
 8007a02:	ee18 3a10 	vmov	r3, s16
 8007a06:	4652      	mov	r2, sl
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f ae6b 	beq.w	80076ea <_printf_float+0xc2>
 8007a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f7f9 f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a20:	b9d8      	cbnz	r0, 8007a5a <_printf_float+0x432>
 8007a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a24:	f108 0201 	add.w	r2, r8, #1
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	d10e      	bne.n	8007a52 <_printf_float+0x42a>
 8007a34:	e659      	b.n	80076ea <_printf_float+0xc2>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4652      	mov	r2, sl
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	f43f ae52 	beq.w	80076ea <_printf_float+0xc2>
 8007a46:	f108 0801 	add.w	r8, r8, #1
 8007a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	4543      	cmp	r3, r8
 8007a50:	dcf1      	bgt.n	8007a36 <_printf_float+0x40e>
 8007a52:	464b      	mov	r3, r9
 8007a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a58:	e6dc      	b.n	8007814 <_printf_float+0x1ec>
 8007a5a:	f04f 0800 	mov.w	r8, #0
 8007a5e:	f104 0a1a 	add.w	sl, r4, #26
 8007a62:	e7f2      	b.n	8007a4a <_printf_float+0x422>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4642      	mov	r2, r8
 8007a68:	e7df      	b.n	8007a2a <_printf_float+0x402>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	464a      	mov	r2, r9
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b8      	blx	r7
 8007a74:	3001      	adds	r0, #1
 8007a76:	f43f ae38 	beq.w	80076ea <_printf_float+0xc2>
 8007a7a:	f108 0801 	add.w	r8, r8, #1
 8007a7e:	68e3      	ldr	r3, [r4, #12]
 8007a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a82:	1a5b      	subs	r3, r3, r1
 8007a84:	4543      	cmp	r3, r8
 8007a86:	dcf0      	bgt.n	8007a6a <_printf_float+0x442>
 8007a88:	e6fa      	b.n	8007880 <_printf_float+0x258>
 8007a8a:	f04f 0800 	mov.w	r8, #0
 8007a8e:	f104 0919 	add.w	r9, r4, #25
 8007a92:	e7f4      	b.n	8007a7e <_printf_float+0x456>

08007a94 <_printf_common>:
 8007a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	4616      	mov	r6, r2
 8007a9a:	4699      	mov	r9, r3
 8007a9c:	688a      	ldr	r2, [r1, #8]
 8007a9e:	690b      	ldr	r3, [r1, #16]
 8007aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	bfb8      	it	lt
 8007aa8:	4613      	movlt	r3, r2
 8007aaa:	6033      	str	r3, [r6, #0]
 8007aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	b10a      	cbz	r2, 8007aba <_printf_common+0x26>
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	6033      	str	r3, [r6, #0]
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	0699      	lsls	r1, r3, #26
 8007abe:	bf42      	ittt	mi
 8007ac0:	6833      	ldrmi	r3, [r6, #0]
 8007ac2:	3302      	addmi	r3, #2
 8007ac4:	6033      	strmi	r3, [r6, #0]
 8007ac6:	6825      	ldr	r5, [r4, #0]
 8007ac8:	f015 0506 	ands.w	r5, r5, #6
 8007acc:	d106      	bne.n	8007adc <_printf_common+0x48>
 8007ace:	f104 0a19 	add.w	sl, r4, #25
 8007ad2:	68e3      	ldr	r3, [r4, #12]
 8007ad4:	6832      	ldr	r2, [r6, #0]
 8007ad6:	1a9b      	subs	r3, r3, r2
 8007ad8:	42ab      	cmp	r3, r5
 8007ada:	dc26      	bgt.n	8007b2a <_printf_common+0x96>
 8007adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ae0:	1e13      	subs	r3, r2, #0
 8007ae2:	6822      	ldr	r2, [r4, #0]
 8007ae4:	bf18      	it	ne
 8007ae6:	2301      	movne	r3, #1
 8007ae8:	0692      	lsls	r2, r2, #26
 8007aea:	d42b      	bmi.n	8007b44 <_printf_common+0xb0>
 8007aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007af0:	4649      	mov	r1, r9
 8007af2:	4638      	mov	r0, r7
 8007af4:	47c0      	blx	r8
 8007af6:	3001      	adds	r0, #1
 8007af8:	d01e      	beq.n	8007b38 <_printf_common+0xa4>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	68e5      	ldr	r5, [r4, #12]
 8007afe:	6832      	ldr	r2, [r6, #0]
 8007b00:	f003 0306 	and.w	r3, r3, #6
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	bf08      	it	eq
 8007b08:	1aad      	subeq	r5, r5, r2
 8007b0a:	68a3      	ldr	r3, [r4, #8]
 8007b0c:	6922      	ldr	r2, [r4, #16]
 8007b0e:	bf0c      	ite	eq
 8007b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b14:	2500      	movne	r5, #0
 8007b16:	4293      	cmp	r3, r2
 8007b18:	bfc4      	itt	gt
 8007b1a:	1a9b      	subgt	r3, r3, r2
 8007b1c:	18ed      	addgt	r5, r5, r3
 8007b1e:	2600      	movs	r6, #0
 8007b20:	341a      	adds	r4, #26
 8007b22:	42b5      	cmp	r5, r6
 8007b24:	d11a      	bne.n	8007b5c <_printf_common+0xc8>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e008      	b.n	8007b3c <_printf_common+0xa8>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	4652      	mov	r2, sl
 8007b2e:	4649      	mov	r1, r9
 8007b30:	4638      	mov	r0, r7
 8007b32:	47c0      	blx	r8
 8007b34:	3001      	adds	r0, #1
 8007b36:	d103      	bne.n	8007b40 <_printf_common+0xac>
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b40:	3501      	adds	r5, #1
 8007b42:	e7c6      	b.n	8007ad2 <_printf_common+0x3e>
 8007b44:	18e1      	adds	r1, r4, r3
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	2030      	movs	r0, #48	; 0x30
 8007b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b4e:	4422      	add	r2, r4
 8007b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b58:	3302      	adds	r3, #2
 8007b5a:	e7c7      	b.n	8007aec <_printf_common+0x58>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4622      	mov	r2, r4
 8007b60:	4649      	mov	r1, r9
 8007b62:	4638      	mov	r0, r7
 8007b64:	47c0      	blx	r8
 8007b66:	3001      	adds	r0, #1
 8007b68:	d0e6      	beq.n	8007b38 <_printf_common+0xa4>
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7d9      	b.n	8007b22 <_printf_common+0x8e>
	...

08007b70 <_printf_i>:
 8007b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	460c      	mov	r4, r1
 8007b76:	4691      	mov	r9, r2
 8007b78:	7e27      	ldrb	r7, [r4, #24]
 8007b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b7c:	2f78      	cmp	r7, #120	; 0x78
 8007b7e:	4680      	mov	r8, r0
 8007b80:	469a      	mov	sl, r3
 8007b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b86:	d807      	bhi.n	8007b98 <_printf_i+0x28>
 8007b88:	2f62      	cmp	r7, #98	; 0x62
 8007b8a:	d80a      	bhi.n	8007ba2 <_printf_i+0x32>
 8007b8c:	2f00      	cmp	r7, #0
 8007b8e:	f000 80d8 	beq.w	8007d42 <_printf_i+0x1d2>
 8007b92:	2f58      	cmp	r7, #88	; 0x58
 8007b94:	f000 80a3 	beq.w	8007cde <_printf_i+0x16e>
 8007b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ba0:	e03a      	b.n	8007c18 <_printf_i+0xa8>
 8007ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ba6:	2b15      	cmp	r3, #21
 8007ba8:	d8f6      	bhi.n	8007b98 <_printf_i+0x28>
 8007baa:	a001      	add	r0, pc, #4	; (adr r0, 8007bb0 <_printf_i+0x40>)
 8007bac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007bb0:	08007c09 	.word	0x08007c09
 8007bb4:	08007c1d 	.word	0x08007c1d
 8007bb8:	08007b99 	.word	0x08007b99
 8007bbc:	08007b99 	.word	0x08007b99
 8007bc0:	08007b99 	.word	0x08007b99
 8007bc4:	08007b99 	.word	0x08007b99
 8007bc8:	08007c1d 	.word	0x08007c1d
 8007bcc:	08007b99 	.word	0x08007b99
 8007bd0:	08007b99 	.word	0x08007b99
 8007bd4:	08007b99 	.word	0x08007b99
 8007bd8:	08007b99 	.word	0x08007b99
 8007bdc:	08007d29 	.word	0x08007d29
 8007be0:	08007c4d 	.word	0x08007c4d
 8007be4:	08007d0b 	.word	0x08007d0b
 8007be8:	08007b99 	.word	0x08007b99
 8007bec:	08007b99 	.word	0x08007b99
 8007bf0:	08007d4b 	.word	0x08007d4b
 8007bf4:	08007b99 	.word	0x08007b99
 8007bf8:	08007c4d 	.word	0x08007c4d
 8007bfc:	08007b99 	.word	0x08007b99
 8007c00:	08007b99 	.word	0x08007b99
 8007c04:	08007d13 	.word	0x08007d13
 8007c08:	680b      	ldr	r3, [r1, #0]
 8007c0a:	1d1a      	adds	r2, r3, #4
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	600a      	str	r2, [r1, #0]
 8007c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e0a3      	b.n	8007d64 <_printf_i+0x1f4>
 8007c1c:	6825      	ldr	r5, [r4, #0]
 8007c1e:	6808      	ldr	r0, [r1, #0]
 8007c20:	062e      	lsls	r6, r5, #24
 8007c22:	f100 0304 	add.w	r3, r0, #4
 8007c26:	d50a      	bpl.n	8007c3e <_printf_i+0xce>
 8007c28:	6805      	ldr	r5, [r0, #0]
 8007c2a:	600b      	str	r3, [r1, #0]
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	da03      	bge.n	8007c38 <_printf_i+0xc8>
 8007c30:	232d      	movs	r3, #45	; 0x2d
 8007c32:	426d      	negs	r5, r5
 8007c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c38:	485e      	ldr	r0, [pc, #376]	; (8007db4 <_printf_i+0x244>)
 8007c3a:	230a      	movs	r3, #10
 8007c3c:	e019      	b.n	8007c72 <_printf_i+0x102>
 8007c3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c42:	6805      	ldr	r5, [r0, #0]
 8007c44:	600b      	str	r3, [r1, #0]
 8007c46:	bf18      	it	ne
 8007c48:	b22d      	sxthne	r5, r5
 8007c4a:	e7ef      	b.n	8007c2c <_printf_i+0xbc>
 8007c4c:	680b      	ldr	r3, [r1, #0]
 8007c4e:	6825      	ldr	r5, [r4, #0]
 8007c50:	1d18      	adds	r0, r3, #4
 8007c52:	6008      	str	r0, [r1, #0]
 8007c54:	0628      	lsls	r0, r5, #24
 8007c56:	d501      	bpl.n	8007c5c <_printf_i+0xec>
 8007c58:	681d      	ldr	r5, [r3, #0]
 8007c5a:	e002      	b.n	8007c62 <_printf_i+0xf2>
 8007c5c:	0669      	lsls	r1, r5, #25
 8007c5e:	d5fb      	bpl.n	8007c58 <_printf_i+0xe8>
 8007c60:	881d      	ldrh	r5, [r3, #0]
 8007c62:	4854      	ldr	r0, [pc, #336]	; (8007db4 <_printf_i+0x244>)
 8007c64:	2f6f      	cmp	r7, #111	; 0x6f
 8007c66:	bf0c      	ite	eq
 8007c68:	2308      	moveq	r3, #8
 8007c6a:	230a      	movne	r3, #10
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c72:	6866      	ldr	r6, [r4, #4]
 8007c74:	60a6      	str	r6, [r4, #8]
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	bfa2      	ittt	ge
 8007c7a:	6821      	ldrge	r1, [r4, #0]
 8007c7c:	f021 0104 	bicge.w	r1, r1, #4
 8007c80:	6021      	strge	r1, [r4, #0]
 8007c82:	b90d      	cbnz	r5, 8007c88 <_printf_i+0x118>
 8007c84:	2e00      	cmp	r6, #0
 8007c86:	d04d      	beq.n	8007d24 <_printf_i+0x1b4>
 8007c88:	4616      	mov	r6, r2
 8007c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c92:	5dc7      	ldrb	r7, [r0, r7]
 8007c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c98:	462f      	mov	r7, r5
 8007c9a:	42bb      	cmp	r3, r7
 8007c9c:	460d      	mov	r5, r1
 8007c9e:	d9f4      	bls.n	8007c8a <_printf_i+0x11a>
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d10b      	bne.n	8007cbc <_printf_i+0x14c>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	07df      	lsls	r7, r3, #31
 8007ca8:	d508      	bpl.n	8007cbc <_printf_i+0x14c>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	6861      	ldr	r1, [r4, #4]
 8007cae:	4299      	cmp	r1, r3
 8007cb0:	bfde      	ittt	le
 8007cb2:	2330      	movle	r3, #48	; 0x30
 8007cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cbc:	1b92      	subs	r2, r2, r6
 8007cbe:	6122      	str	r2, [r4, #16]
 8007cc0:	f8cd a000 	str.w	sl, [sp]
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	aa03      	add	r2, sp, #12
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4640      	mov	r0, r8
 8007ccc:	f7ff fee2 	bl	8007a94 <_printf_common>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d14c      	bne.n	8007d6e <_printf_i+0x1fe>
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	b004      	add	sp, #16
 8007cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cde:	4835      	ldr	r0, [pc, #212]	; (8007db4 <_printf_i+0x244>)
 8007ce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	680e      	ldr	r6, [r1, #0]
 8007ce8:	061f      	lsls	r7, r3, #24
 8007cea:	f856 5b04 	ldr.w	r5, [r6], #4
 8007cee:	600e      	str	r6, [r1, #0]
 8007cf0:	d514      	bpl.n	8007d1c <_printf_i+0x1ac>
 8007cf2:	07d9      	lsls	r1, r3, #31
 8007cf4:	bf44      	itt	mi
 8007cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8007cfa:	6023      	strmi	r3, [r4, #0]
 8007cfc:	b91d      	cbnz	r5, 8007d06 <_printf_i+0x196>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	f023 0320 	bic.w	r3, r3, #32
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	2310      	movs	r3, #16
 8007d08:	e7b0      	b.n	8007c6c <_printf_i+0xfc>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	f043 0320 	orr.w	r3, r3, #32
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	2378      	movs	r3, #120	; 0x78
 8007d14:	4828      	ldr	r0, [pc, #160]	; (8007db8 <_printf_i+0x248>)
 8007d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d1a:	e7e3      	b.n	8007ce4 <_printf_i+0x174>
 8007d1c:	065e      	lsls	r6, r3, #25
 8007d1e:	bf48      	it	mi
 8007d20:	b2ad      	uxthmi	r5, r5
 8007d22:	e7e6      	b.n	8007cf2 <_printf_i+0x182>
 8007d24:	4616      	mov	r6, r2
 8007d26:	e7bb      	b.n	8007ca0 <_printf_i+0x130>
 8007d28:	680b      	ldr	r3, [r1, #0]
 8007d2a:	6826      	ldr	r6, [r4, #0]
 8007d2c:	6960      	ldr	r0, [r4, #20]
 8007d2e:	1d1d      	adds	r5, r3, #4
 8007d30:	600d      	str	r5, [r1, #0]
 8007d32:	0635      	lsls	r5, r6, #24
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	d501      	bpl.n	8007d3c <_printf_i+0x1cc>
 8007d38:	6018      	str	r0, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <_printf_i+0x1d2>
 8007d3c:	0671      	lsls	r1, r6, #25
 8007d3e:	d5fb      	bpl.n	8007d38 <_printf_i+0x1c8>
 8007d40:	8018      	strh	r0, [r3, #0]
 8007d42:	2300      	movs	r3, #0
 8007d44:	6123      	str	r3, [r4, #16]
 8007d46:	4616      	mov	r6, r2
 8007d48:	e7ba      	b.n	8007cc0 <_printf_i+0x150>
 8007d4a:	680b      	ldr	r3, [r1, #0]
 8007d4c:	1d1a      	adds	r2, r3, #4
 8007d4e:	600a      	str	r2, [r1, #0]
 8007d50:	681e      	ldr	r6, [r3, #0]
 8007d52:	6862      	ldr	r2, [r4, #4]
 8007d54:	2100      	movs	r1, #0
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7f8 fa4a 	bl	80001f0 <memchr>
 8007d5c:	b108      	cbz	r0, 8007d62 <_printf_i+0x1f2>
 8007d5e:	1b80      	subs	r0, r0, r6
 8007d60:	6060      	str	r0, [r4, #4]
 8007d62:	6863      	ldr	r3, [r4, #4]
 8007d64:	6123      	str	r3, [r4, #16]
 8007d66:	2300      	movs	r3, #0
 8007d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6c:	e7a8      	b.n	8007cc0 <_printf_i+0x150>
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	4632      	mov	r2, r6
 8007d72:	4649      	mov	r1, r9
 8007d74:	4640      	mov	r0, r8
 8007d76:	47d0      	blx	sl
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d0ab      	beq.n	8007cd4 <_printf_i+0x164>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	079b      	lsls	r3, r3, #30
 8007d80:	d413      	bmi.n	8007daa <_printf_i+0x23a>
 8007d82:	68e0      	ldr	r0, [r4, #12]
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	4298      	cmp	r0, r3
 8007d88:	bfb8      	it	lt
 8007d8a:	4618      	movlt	r0, r3
 8007d8c:	e7a4      	b.n	8007cd8 <_printf_i+0x168>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4632      	mov	r2, r6
 8007d92:	4649      	mov	r1, r9
 8007d94:	4640      	mov	r0, r8
 8007d96:	47d0      	blx	sl
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d09b      	beq.n	8007cd4 <_printf_i+0x164>
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	68e3      	ldr	r3, [r4, #12]
 8007da0:	9903      	ldr	r1, [sp, #12]
 8007da2:	1a5b      	subs	r3, r3, r1
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dcf2      	bgt.n	8007d8e <_printf_i+0x21e>
 8007da8:	e7eb      	b.n	8007d82 <_printf_i+0x212>
 8007daa:	2500      	movs	r5, #0
 8007dac:	f104 0619 	add.w	r6, r4, #25
 8007db0:	e7f5      	b.n	8007d9e <_printf_i+0x22e>
 8007db2:	bf00      	nop
 8007db4:	08066062 	.word	0x08066062
 8007db8:	08066073 	.word	0x08066073

08007dbc <iprintf>:
 8007dbc:	b40f      	push	{r0, r1, r2, r3}
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <iprintf+0x2c>)
 8007dc0:	b513      	push	{r0, r1, r4, lr}
 8007dc2:	681c      	ldr	r4, [r3, #0]
 8007dc4:	b124      	cbz	r4, 8007dd0 <iprintf+0x14>
 8007dc6:	69a3      	ldr	r3, [r4, #24]
 8007dc8:	b913      	cbnz	r3, 8007dd0 <iprintf+0x14>
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f001 f90e 	bl	8008fec <__sinit>
 8007dd0:	ab05      	add	r3, sp, #20
 8007dd2:	9a04      	ldr	r2, [sp, #16]
 8007dd4:	68a1      	ldr	r1, [r4, #8]
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f001 ff47 	bl	8009c6c <_vfiprintf_r>
 8007dde:	b002      	add	sp, #8
 8007de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de4:	b004      	add	sp, #16
 8007de6:	4770      	bx	lr
 8007de8:	20000ed0 	.word	0x20000ed0

08007dec <_puts_r>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	460e      	mov	r6, r1
 8007df0:	4605      	mov	r5, r0
 8007df2:	b118      	cbz	r0, 8007dfc <_puts_r+0x10>
 8007df4:	6983      	ldr	r3, [r0, #24]
 8007df6:	b90b      	cbnz	r3, 8007dfc <_puts_r+0x10>
 8007df8:	f001 f8f8 	bl	8008fec <__sinit>
 8007dfc:	69ab      	ldr	r3, [r5, #24]
 8007dfe:	68ac      	ldr	r4, [r5, #8]
 8007e00:	b913      	cbnz	r3, 8007e08 <_puts_r+0x1c>
 8007e02:	4628      	mov	r0, r5
 8007e04:	f001 f8f2 	bl	8008fec <__sinit>
 8007e08:	4b2c      	ldr	r3, [pc, #176]	; (8007ebc <_puts_r+0xd0>)
 8007e0a:	429c      	cmp	r4, r3
 8007e0c:	d120      	bne.n	8007e50 <_puts_r+0x64>
 8007e0e:	686c      	ldr	r4, [r5, #4]
 8007e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e12:	07db      	lsls	r3, r3, #31
 8007e14:	d405      	bmi.n	8007e22 <_puts_r+0x36>
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	0598      	lsls	r0, r3, #22
 8007e1a:	d402      	bmi.n	8007e22 <_puts_r+0x36>
 8007e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e1e:	f001 f988 	bl	8009132 <__retarget_lock_acquire_recursive>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	0719      	lsls	r1, r3, #28
 8007e26:	d51d      	bpl.n	8007e64 <_puts_r+0x78>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	b1db      	cbz	r3, 8007e64 <_puts_r+0x78>
 8007e2c:	3e01      	subs	r6, #1
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e34:	3b01      	subs	r3, #1
 8007e36:	60a3      	str	r3, [r4, #8]
 8007e38:	bb39      	cbnz	r1, 8007e8a <_puts_r+0x9e>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	da38      	bge.n	8007eb0 <_puts_r+0xc4>
 8007e3e:	4622      	mov	r2, r4
 8007e40:	210a      	movs	r1, #10
 8007e42:	4628      	mov	r0, r5
 8007e44:	f000 f880 	bl	8007f48 <__swbuf_r>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d011      	beq.n	8007e70 <_puts_r+0x84>
 8007e4c:	250a      	movs	r5, #10
 8007e4e:	e011      	b.n	8007e74 <_puts_r+0x88>
 8007e50:	4b1b      	ldr	r3, [pc, #108]	; (8007ec0 <_puts_r+0xd4>)
 8007e52:	429c      	cmp	r4, r3
 8007e54:	d101      	bne.n	8007e5a <_puts_r+0x6e>
 8007e56:	68ac      	ldr	r4, [r5, #8]
 8007e58:	e7da      	b.n	8007e10 <_puts_r+0x24>
 8007e5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ec4 <_puts_r+0xd8>)
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	bf08      	it	eq
 8007e60:	68ec      	ldreq	r4, [r5, #12]
 8007e62:	e7d5      	b.n	8007e10 <_puts_r+0x24>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 f8c0 	bl	8007fec <__swsetup_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d0dd      	beq.n	8007e2c <_puts_r+0x40>
 8007e70:	f04f 35ff 	mov.w	r5, #4294967295
 8007e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e76:	07da      	lsls	r2, r3, #31
 8007e78:	d405      	bmi.n	8007e86 <_puts_r+0x9a>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	059b      	lsls	r3, r3, #22
 8007e7e:	d402      	bmi.n	8007e86 <_puts_r+0x9a>
 8007e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e82:	f001 f957 	bl	8009134 <__retarget_lock_release_recursive>
 8007e86:	4628      	mov	r0, r5
 8007e88:	bd70      	pop	{r4, r5, r6, pc}
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	da04      	bge.n	8007e98 <_puts_r+0xac>
 8007e8e:	69a2      	ldr	r2, [r4, #24]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	dc06      	bgt.n	8007ea2 <_puts_r+0xb6>
 8007e94:	290a      	cmp	r1, #10
 8007e96:	d004      	beq.n	8007ea2 <_puts_r+0xb6>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	6022      	str	r2, [r4, #0]
 8007e9e:	7019      	strb	r1, [r3, #0]
 8007ea0:	e7c5      	b.n	8007e2e <_puts_r+0x42>
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 f84f 	bl	8007f48 <__swbuf_r>
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d1bf      	bne.n	8007e2e <_puts_r+0x42>
 8007eae:	e7df      	b.n	8007e70 <_puts_r+0x84>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	250a      	movs	r5, #10
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	6022      	str	r2, [r4, #0]
 8007eb8:	701d      	strb	r5, [r3, #0]
 8007eba:	e7db      	b.n	8007e74 <_puts_r+0x88>
 8007ebc:	08066138 	.word	0x08066138
 8007ec0:	08066158 	.word	0x08066158
 8007ec4:	08066118 	.word	0x08066118

08007ec8 <puts>:
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <puts+0xc>)
 8007eca:	4601      	mov	r1, r0
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f7ff bf8d 	b.w	8007dec <_puts_r>
 8007ed2:	bf00      	nop
 8007ed4:	20000ed0 	.word	0x20000ed0

08007ed8 <realloc>:
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <realloc+0xc>)
 8007eda:	460a      	mov	r2, r1
 8007edc:	4601      	mov	r1, r0
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	f001 bd18 	b.w	8009914 <_realloc_r>
 8007ee4:	20000ed0 	.word	0x20000ed0

08007ee8 <_sbrk_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4d06      	ldr	r5, [pc, #24]	; (8007f04 <_sbrk_r+0x1c>)
 8007eec:	2300      	movs	r3, #0
 8007eee:	4604      	mov	r4, r0
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	602b      	str	r3, [r5, #0]
 8007ef4:	f7fb f874 	bl	8002fe0 <_sbrk>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_sbrk_r+0x1a>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_sbrk_r+0x1a>
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	20002bf0 	.word	0x20002bf0

08007f08 <siprintf>:
 8007f08:	b40e      	push	{r1, r2, r3}
 8007f0a:	b500      	push	{lr}
 8007f0c:	b09c      	sub	sp, #112	; 0x70
 8007f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f10:	9002      	str	r0, [sp, #8]
 8007f12:	9006      	str	r0, [sp, #24]
 8007f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f18:	4809      	ldr	r0, [pc, #36]	; (8007f40 <siprintf+0x38>)
 8007f1a:	9107      	str	r1, [sp, #28]
 8007f1c:	9104      	str	r1, [sp, #16]
 8007f1e:	4909      	ldr	r1, [pc, #36]	; (8007f44 <siprintf+0x3c>)
 8007f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f24:	9105      	str	r1, [sp, #20]
 8007f26:	6800      	ldr	r0, [r0, #0]
 8007f28:	9301      	str	r3, [sp, #4]
 8007f2a:	a902      	add	r1, sp, #8
 8007f2c:	f001 fd74 	bl	8009a18 <_svfiprintf_r>
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	2200      	movs	r2, #0
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	b01c      	add	sp, #112	; 0x70
 8007f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f3c:	b003      	add	sp, #12
 8007f3e:	4770      	bx	lr
 8007f40:	20000ed0 	.word	0x20000ed0
 8007f44:	ffff0208 	.word	0xffff0208

08007f48 <__swbuf_r>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	460e      	mov	r6, r1
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	4605      	mov	r5, r0
 8007f50:	b118      	cbz	r0, 8007f5a <__swbuf_r+0x12>
 8007f52:	6983      	ldr	r3, [r0, #24]
 8007f54:	b90b      	cbnz	r3, 8007f5a <__swbuf_r+0x12>
 8007f56:	f001 f849 	bl	8008fec <__sinit>
 8007f5a:	4b21      	ldr	r3, [pc, #132]	; (8007fe0 <__swbuf_r+0x98>)
 8007f5c:	429c      	cmp	r4, r3
 8007f5e:	d12b      	bne.n	8007fb8 <__swbuf_r+0x70>
 8007f60:	686c      	ldr	r4, [r5, #4]
 8007f62:	69a3      	ldr	r3, [r4, #24]
 8007f64:	60a3      	str	r3, [r4, #8]
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	071a      	lsls	r2, r3, #28
 8007f6a:	d52f      	bpl.n	8007fcc <__swbuf_r+0x84>
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	b36b      	cbz	r3, 8007fcc <__swbuf_r+0x84>
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	6820      	ldr	r0, [r4, #0]
 8007f74:	1ac0      	subs	r0, r0, r3
 8007f76:	6963      	ldr	r3, [r4, #20]
 8007f78:	b2f6      	uxtb	r6, r6
 8007f7a:	4283      	cmp	r3, r0
 8007f7c:	4637      	mov	r7, r6
 8007f7e:	dc04      	bgt.n	8007f8a <__swbuf_r+0x42>
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 ff9e 	bl	8008ec4 <_fflush_r>
 8007f88:	bb30      	cbnz	r0, 8007fd8 <__swbuf_r+0x90>
 8007f8a:	68a3      	ldr	r3, [r4, #8]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	60a3      	str	r3, [r4, #8]
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	6022      	str	r2, [r4, #0]
 8007f96:	701e      	strb	r6, [r3, #0]
 8007f98:	6963      	ldr	r3, [r4, #20]
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	4283      	cmp	r3, r0
 8007f9e:	d004      	beq.n	8007faa <__swbuf_r+0x62>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	07db      	lsls	r3, r3, #31
 8007fa4:	d506      	bpl.n	8007fb4 <__swbuf_r+0x6c>
 8007fa6:	2e0a      	cmp	r6, #10
 8007fa8:	d104      	bne.n	8007fb4 <__swbuf_r+0x6c>
 8007faa:	4621      	mov	r1, r4
 8007fac:	4628      	mov	r0, r5
 8007fae:	f000 ff89 	bl	8008ec4 <_fflush_r>
 8007fb2:	b988      	cbnz	r0, 8007fd8 <__swbuf_r+0x90>
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <__swbuf_r+0x9c>)
 8007fba:	429c      	cmp	r4, r3
 8007fbc:	d101      	bne.n	8007fc2 <__swbuf_r+0x7a>
 8007fbe:	68ac      	ldr	r4, [r5, #8]
 8007fc0:	e7cf      	b.n	8007f62 <__swbuf_r+0x1a>
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <__swbuf_r+0xa0>)
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	bf08      	it	eq
 8007fc8:	68ec      	ldreq	r4, [r5, #12]
 8007fca:	e7ca      	b.n	8007f62 <__swbuf_r+0x1a>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f80c 	bl	8007fec <__swsetup_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d0cb      	beq.n	8007f70 <__swbuf_r+0x28>
 8007fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8007fdc:	e7ea      	b.n	8007fb4 <__swbuf_r+0x6c>
 8007fde:	bf00      	nop
 8007fe0:	08066138 	.word	0x08066138
 8007fe4:	08066158 	.word	0x08066158
 8007fe8:	08066118 	.word	0x08066118

08007fec <__swsetup_r>:
 8007fec:	4b32      	ldr	r3, [pc, #200]	; (80080b8 <__swsetup_r+0xcc>)
 8007fee:	b570      	push	{r4, r5, r6, lr}
 8007ff0:	681d      	ldr	r5, [r3, #0]
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	b125      	cbz	r5, 8008002 <__swsetup_r+0x16>
 8007ff8:	69ab      	ldr	r3, [r5, #24]
 8007ffa:	b913      	cbnz	r3, 8008002 <__swsetup_r+0x16>
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 fff5 	bl	8008fec <__sinit>
 8008002:	4b2e      	ldr	r3, [pc, #184]	; (80080bc <__swsetup_r+0xd0>)
 8008004:	429c      	cmp	r4, r3
 8008006:	d10f      	bne.n	8008028 <__swsetup_r+0x3c>
 8008008:	686c      	ldr	r4, [r5, #4]
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008010:	0719      	lsls	r1, r3, #28
 8008012:	d42c      	bmi.n	800806e <__swsetup_r+0x82>
 8008014:	06dd      	lsls	r5, r3, #27
 8008016:	d411      	bmi.n	800803c <__swsetup_r+0x50>
 8008018:	2309      	movs	r3, #9
 800801a:	6033      	str	r3, [r6, #0]
 800801c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	f04f 30ff 	mov.w	r0, #4294967295
 8008026:	e03e      	b.n	80080a6 <__swsetup_r+0xba>
 8008028:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <__swsetup_r+0xd4>)
 800802a:	429c      	cmp	r4, r3
 800802c:	d101      	bne.n	8008032 <__swsetup_r+0x46>
 800802e:	68ac      	ldr	r4, [r5, #8]
 8008030:	e7eb      	b.n	800800a <__swsetup_r+0x1e>
 8008032:	4b24      	ldr	r3, [pc, #144]	; (80080c4 <__swsetup_r+0xd8>)
 8008034:	429c      	cmp	r4, r3
 8008036:	bf08      	it	eq
 8008038:	68ec      	ldreq	r4, [r5, #12]
 800803a:	e7e6      	b.n	800800a <__swsetup_r+0x1e>
 800803c:	0758      	lsls	r0, r3, #29
 800803e:	d512      	bpl.n	8008066 <__swsetup_r+0x7a>
 8008040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008042:	b141      	cbz	r1, 8008056 <__swsetup_r+0x6a>
 8008044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008048:	4299      	cmp	r1, r3
 800804a:	d002      	beq.n	8008052 <__swsetup_r+0x66>
 800804c:	4630      	mov	r0, r6
 800804e:	f7ff f9a1 	bl	8007394 <_free_r>
 8008052:	2300      	movs	r3, #0
 8008054:	6363      	str	r3, [r4, #52]	; 0x34
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	2300      	movs	r3, #0
 8008060:	6063      	str	r3, [r4, #4]
 8008062:	6923      	ldr	r3, [r4, #16]
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	f043 0308 	orr.w	r3, r3, #8
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	b94b      	cbnz	r3, 8008086 <__swsetup_r+0x9a>
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800807c:	d003      	beq.n	8008086 <__swsetup_r+0x9a>
 800807e:	4621      	mov	r1, r4
 8008080:	4630      	mov	r0, r6
 8008082:	f001 f87d 	bl	8009180 <__smakebuf_r>
 8008086:	89a0      	ldrh	r0, [r4, #12]
 8008088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800808c:	f010 0301 	ands.w	r3, r0, #1
 8008090:	d00a      	beq.n	80080a8 <__swsetup_r+0xbc>
 8008092:	2300      	movs	r3, #0
 8008094:	60a3      	str	r3, [r4, #8]
 8008096:	6963      	ldr	r3, [r4, #20]
 8008098:	425b      	negs	r3, r3
 800809a:	61a3      	str	r3, [r4, #24]
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	b943      	cbnz	r3, 80080b2 <__swsetup_r+0xc6>
 80080a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080a4:	d1ba      	bne.n	800801c <__swsetup_r+0x30>
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	0781      	lsls	r1, r0, #30
 80080aa:	bf58      	it	pl
 80080ac:	6963      	ldrpl	r3, [r4, #20]
 80080ae:	60a3      	str	r3, [r4, #8]
 80080b0:	e7f4      	b.n	800809c <__swsetup_r+0xb0>
 80080b2:	2000      	movs	r0, #0
 80080b4:	e7f7      	b.n	80080a6 <__swsetup_r+0xba>
 80080b6:	bf00      	nop
 80080b8:	20000ed0 	.word	0x20000ed0
 80080bc:	08066138 	.word	0x08066138
 80080c0:	08066158 	.word	0x08066158
 80080c4:	08066118 	.word	0x08066118

080080c8 <quorem>:
 80080c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	6903      	ldr	r3, [r0, #16]
 80080ce:	690c      	ldr	r4, [r1, #16]
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	4607      	mov	r7, r0
 80080d4:	f2c0 8081 	blt.w	80081da <quorem+0x112>
 80080d8:	3c01      	subs	r4, #1
 80080da:	f101 0814 	add.w	r8, r1, #20
 80080de:	f100 0514 	add.w	r5, r0, #20
 80080e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080f0:	3301      	adds	r3, #1
 80080f2:	429a      	cmp	r2, r3
 80080f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008100:	d331      	bcc.n	8008166 <quorem+0x9e>
 8008102:	f04f 0e00 	mov.w	lr, #0
 8008106:	4640      	mov	r0, r8
 8008108:	46ac      	mov	ip, r5
 800810a:	46f2      	mov	sl, lr
 800810c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008110:	b293      	uxth	r3, r2
 8008112:	fb06 e303 	mla	r3, r6, r3, lr
 8008116:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800811a:	b29b      	uxth	r3, r3
 800811c:	ebaa 0303 	sub.w	r3, sl, r3
 8008120:	0c12      	lsrs	r2, r2, #16
 8008122:	f8dc a000 	ldr.w	sl, [ip]
 8008126:	fb06 e202 	mla	r2, r6, r2, lr
 800812a:	fa13 f38a 	uxtah	r3, r3, sl
 800812e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008132:	fa1f fa82 	uxth.w	sl, r2
 8008136:	f8dc 2000 	ldr.w	r2, [ip]
 800813a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800813e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008148:	4581      	cmp	r9, r0
 800814a:	f84c 3b04 	str.w	r3, [ip], #4
 800814e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008152:	d2db      	bcs.n	800810c <quorem+0x44>
 8008154:	f855 300b 	ldr.w	r3, [r5, fp]
 8008158:	b92b      	cbnz	r3, 8008166 <quorem+0x9e>
 800815a:	9b01      	ldr	r3, [sp, #4]
 800815c:	3b04      	subs	r3, #4
 800815e:	429d      	cmp	r5, r3
 8008160:	461a      	mov	r2, r3
 8008162:	d32e      	bcc.n	80081c2 <quorem+0xfa>
 8008164:	613c      	str	r4, [r7, #16]
 8008166:	4638      	mov	r0, r7
 8008168:	f001 fad4 	bl	8009714 <__mcmp>
 800816c:	2800      	cmp	r0, #0
 800816e:	db24      	blt.n	80081ba <quorem+0xf2>
 8008170:	3601      	adds	r6, #1
 8008172:	4628      	mov	r0, r5
 8008174:	f04f 0c00 	mov.w	ip, #0
 8008178:	f858 2b04 	ldr.w	r2, [r8], #4
 800817c:	f8d0 e000 	ldr.w	lr, [r0]
 8008180:	b293      	uxth	r3, r2
 8008182:	ebac 0303 	sub.w	r3, ip, r3
 8008186:	0c12      	lsrs	r2, r2, #16
 8008188:	fa13 f38e 	uxtah	r3, r3, lr
 800818c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008194:	b29b      	uxth	r3, r3
 8008196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800819a:	45c1      	cmp	r9, r8
 800819c:	f840 3b04 	str.w	r3, [r0], #4
 80081a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081a4:	d2e8      	bcs.n	8008178 <quorem+0xb0>
 80081a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ae:	b922      	cbnz	r2, 80081ba <quorem+0xf2>
 80081b0:	3b04      	subs	r3, #4
 80081b2:	429d      	cmp	r5, r3
 80081b4:	461a      	mov	r2, r3
 80081b6:	d30a      	bcc.n	80081ce <quorem+0x106>
 80081b8:	613c      	str	r4, [r7, #16]
 80081ba:	4630      	mov	r0, r6
 80081bc:	b003      	add	sp, #12
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	3b04      	subs	r3, #4
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	d1cc      	bne.n	8008164 <quorem+0x9c>
 80081ca:	3c01      	subs	r4, #1
 80081cc:	e7c7      	b.n	800815e <quorem+0x96>
 80081ce:	6812      	ldr	r2, [r2, #0]
 80081d0:	3b04      	subs	r3, #4
 80081d2:	2a00      	cmp	r2, #0
 80081d4:	d1f0      	bne.n	80081b8 <quorem+0xf0>
 80081d6:	3c01      	subs	r4, #1
 80081d8:	e7eb      	b.n	80081b2 <quorem+0xea>
 80081da:	2000      	movs	r0, #0
 80081dc:	e7ee      	b.n	80081bc <quorem+0xf4>
	...

080081e0 <_dtoa_r>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	ed2d 8b02 	vpush	{d8}
 80081e8:	ec57 6b10 	vmov	r6, r7, d0
 80081ec:	b095      	sub	sp, #84	; 0x54
 80081ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081f4:	9105      	str	r1, [sp, #20]
 80081f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80081fa:	4604      	mov	r4, r0
 80081fc:	9209      	str	r2, [sp, #36]	; 0x24
 80081fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008200:	b975      	cbnz	r5, 8008220 <_dtoa_r+0x40>
 8008202:	2010      	movs	r0, #16
 8008204:	f7ff f890 	bl	8007328 <malloc>
 8008208:	4602      	mov	r2, r0
 800820a:	6260      	str	r0, [r4, #36]	; 0x24
 800820c:	b920      	cbnz	r0, 8008218 <_dtoa_r+0x38>
 800820e:	4bb2      	ldr	r3, [pc, #712]	; (80084d8 <_dtoa_r+0x2f8>)
 8008210:	21ea      	movs	r1, #234	; 0xea
 8008212:	48b2      	ldr	r0, [pc, #712]	; (80084dc <_dtoa_r+0x2fc>)
 8008214:	f001 feb0 	bl	8009f78 <__assert_func>
 8008218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800821c:	6005      	str	r5, [r0, #0]
 800821e:	60c5      	str	r5, [r0, #12]
 8008220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008222:	6819      	ldr	r1, [r3, #0]
 8008224:	b151      	cbz	r1, 800823c <_dtoa_r+0x5c>
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	604a      	str	r2, [r1, #4]
 800822a:	2301      	movs	r3, #1
 800822c:	4093      	lsls	r3, r2
 800822e:	608b      	str	r3, [r1, #8]
 8008230:	4620      	mov	r0, r4
 8008232:	f001 f831 	bl	8009298 <_Bfree>
 8008236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	1e3b      	subs	r3, r7, #0
 800823e:	bfb9      	ittee	lt
 8008240:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008244:	9303      	strlt	r3, [sp, #12]
 8008246:	2300      	movge	r3, #0
 8008248:	f8c8 3000 	strge.w	r3, [r8]
 800824c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008250:	4ba3      	ldr	r3, [pc, #652]	; (80084e0 <_dtoa_r+0x300>)
 8008252:	bfbc      	itt	lt
 8008254:	2201      	movlt	r2, #1
 8008256:	f8c8 2000 	strlt.w	r2, [r8]
 800825a:	ea33 0309 	bics.w	r3, r3, r9
 800825e:	d11b      	bne.n	8008298 <_dtoa_r+0xb8>
 8008260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008262:	f242 730f 	movw	r3, #9999	; 0x270f
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800826c:	4333      	orrs	r3, r6
 800826e:	f000 857a 	beq.w	8008d66 <_dtoa_r+0xb86>
 8008272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008274:	b963      	cbnz	r3, 8008290 <_dtoa_r+0xb0>
 8008276:	4b9b      	ldr	r3, [pc, #620]	; (80084e4 <_dtoa_r+0x304>)
 8008278:	e024      	b.n	80082c4 <_dtoa_r+0xe4>
 800827a:	4b9b      	ldr	r3, [pc, #620]	; (80084e8 <_dtoa_r+0x308>)
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	9800      	ldr	r0, [sp, #0]
 8008286:	b015      	add	sp, #84	; 0x54
 8008288:	ecbd 8b02 	vpop	{d8}
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008290:	4b94      	ldr	r3, [pc, #592]	; (80084e4 <_dtoa_r+0x304>)
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	3303      	adds	r3, #3
 8008296:	e7f3      	b.n	8008280 <_dtoa_r+0xa0>
 8008298:	ed9d 7b02 	vldr	d7, [sp, #8]
 800829c:	2200      	movs	r2, #0
 800829e:	ec51 0b17 	vmov	r0, r1, d7
 80082a2:	2300      	movs	r3, #0
 80082a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80082a8:	f7f8 fc16 	bl	8000ad8 <__aeabi_dcmpeq>
 80082ac:	4680      	mov	r8, r0
 80082ae:	b158      	cbz	r0, 80082c8 <_dtoa_r+0xe8>
 80082b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082b2:	2301      	movs	r3, #1
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 8551 	beq.w	8008d60 <_dtoa_r+0xb80>
 80082be:	488b      	ldr	r0, [pc, #556]	; (80084ec <_dtoa_r+0x30c>)
 80082c0:	6018      	str	r0, [r3, #0]
 80082c2:	1e43      	subs	r3, r0, #1
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	e7dd      	b.n	8008284 <_dtoa_r+0xa4>
 80082c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082cc:	aa12      	add	r2, sp, #72	; 0x48
 80082ce:	a913      	add	r1, sp, #76	; 0x4c
 80082d0:	4620      	mov	r0, r4
 80082d2:	f001 fac3 	bl	800985c <__d2b>
 80082d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082da:	4683      	mov	fp, r0
 80082dc:	2d00      	cmp	r5, #0
 80082de:	d07c      	beq.n	80083da <_dtoa_r+0x1fa>
 80082e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80082e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80082ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80082f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80082f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082fa:	4b7d      	ldr	r3, [pc, #500]	; (80084f0 <_dtoa_r+0x310>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	4630      	mov	r0, r6
 8008300:	4639      	mov	r1, r7
 8008302:	f7f7 ffc9 	bl	8000298 <__aeabi_dsub>
 8008306:	a36e      	add	r3, pc, #440	; (adr r3, 80084c0 <_dtoa_r+0x2e0>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	f7f8 f97c 	bl	8000608 <__aeabi_dmul>
 8008310:	a36d      	add	r3, pc, #436	; (adr r3, 80084c8 <_dtoa_r+0x2e8>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f7 ffc1 	bl	800029c <__adddf3>
 800831a:	4606      	mov	r6, r0
 800831c:	4628      	mov	r0, r5
 800831e:	460f      	mov	r7, r1
 8008320:	f7f8 f908 	bl	8000534 <__aeabi_i2d>
 8008324:	a36a      	add	r3, pc, #424	; (adr r3, 80084d0 <_dtoa_r+0x2f0>)
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	f7f8 f96d 	bl	8000608 <__aeabi_dmul>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4630      	mov	r0, r6
 8008334:	4639      	mov	r1, r7
 8008336:	f7f7 ffb1 	bl	800029c <__adddf3>
 800833a:	4606      	mov	r6, r0
 800833c:	460f      	mov	r7, r1
 800833e:	f7f8 fc13 	bl	8000b68 <__aeabi_d2iz>
 8008342:	2200      	movs	r2, #0
 8008344:	4682      	mov	sl, r0
 8008346:	2300      	movs	r3, #0
 8008348:	4630      	mov	r0, r6
 800834a:	4639      	mov	r1, r7
 800834c:	f7f8 fbce 	bl	8000aec <__aeabi_dcmplt>
 8008350:	b148      	cbz	r0, 8008366 <_dtoa_r+0x186>
 8008352:	4650      	mov	r0, sl
 8008354:	f7f8 f8ee 	bl	8000534 <__aeabi_i2d>
 8008358:	4632      	mov	r2, r6
 800835a:	463b      	mov	r3, r7
 800835c:	f7f8 fbbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008360:	b908      	cbnz	r0, 8008366 <_dtoa_r+0x186>
 8008362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008366:	f1ba 0f16 	cmp.w	sl, #22
 800836a:	d854      	bhi.n	8008416 <_dtoa_r+0x236>
 800836c:	4b61      	ldr	r3, [pc, #388]	; (80084f4 <_dtoa_r+0x314>)
 800836e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800837a:	f7f8 fbb7 	bl	8000aec <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	d04b      	beq.n	800841a <_dtoa_r+0x23a>
 8008382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008386:	2300      	movs	r3, #0
 8008388:	930e      	str	r3, [sp, #56]	; 0x38
 800838a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800838c:	1b5d      	subs	r5, r3, r5
 800838e:	1e6b      	subs	r3, r5, #1
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	bf43      	ittte	mi
 8008394:	2300      	movmi	r3, #0
 8008396:	f1c5 0801 	rsbmi	r8, r5, #1
 800839a:	9304      	strmi	r3, [sp, #16]
 800839c:	f04f 0800 	movpl.w	r8, #0
 80083a0:	f1ba 0f00 	cmp.w	sl, #0
 80083a4:	db3b      	blt.n	800841e <_dtoa_r+0x23e>
 80083a6:	9b04      	ldr	r3, [sp, #16]
 80083a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80083ac:	4453      	add	r3, sl
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	2300      	movs	r3, #0
 80083b2:	9306      	str	r3, [sp, #24]
 80083b4:	9b05      	ldr	r3, [sp, #20]
 80083b6:	2b09      	cmp	r3, #9
 80083b8:	d869      	bhi.n	800848e <_dtoa_r+0x2ae>
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	bfc4      	itt	gt
 80083be:	3b04      	subgt	r3, #4
 80083c0:	9305      	strgt	r3, [sp, #20]
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	f1a3 0302 	sub.w	r3, r3, #2
 80083c8:	bfcc      	ite	gt
 80083ca:	2500      	movgt	r5, #0
 80083cc:	2501      	movle	r5, #1
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d869      	bhi.n	80084a6 <_dtoa_r+0x2c6>
 80083d2:	e8df f003 	tbb	[pc, r3]
 80083d6:	4e2c      	.short	0x4e2c
 80083d8:	5a4c      	.short	0x5a4c
 80083da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80083de:	441d      	add	r5, r3
 80083e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	bfc1      	itttt	gt
 80083e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80083f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083f8:	bfda      	itte	le
 80083fa:	f1c3 0320 	rsble	r3, r3, #32
 80083fe:	fa06 f003 	lslle.w	r0, r6, r3
 8008402:	4318      	orrgt	r0, r3
 8008404:	f7f8 f886 	bl	8000514 <__aeabi_ui2d>
 8008408:	2301      	movs	r3, #1
 800840a:	4606      	mov	r6, r0
 800840c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008410:	3d01      	subs	r5, #1
 8008412:	9310      	str	r3, [sp, #64]	; 0x40
 8008414:	e771      	b.n	80082fa <_dtoa_r+0x11a>
 8008416:	2301      	movs	r3, #1
 8008418:	e7b6      	b.n	8008388 <_dtoa_r+0x1a8>
 800841a:	900e      	str	r0, [sp, #56]	; 0x38
 800841c:	e7b5      	b.n	800838a <_dtoa_r+0x1aa>
 800841e:	f1ca 0300 	rsb	r3, sl, #0
 8008422:	9306      	str	r3, [sp, #24]
 8008424:	2300      	movs	r3, #0
 8008426:	eba8 080a 	sub.w	r8, r8, sl
 800842a:	930d      	str	r3, [sp, #52]	; 0x34
 800842c:	e7c2      	b.n	80083b4 <_dtoa_r+0x1d4>
 800842e:	2300      	movs	r3, #0
 8008430:	9308      	str	r3, [sp, #32]
 8008432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	dc39      	bgt.n	80084ac <_dtoa_r+0x2cc>
 8008438:	f04f 0901 	mov.w	r9, #1
 800843c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008440:	464b      	mov	r3, r9
 8008442:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008446:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008448:	2200      	movs	r2, #0
 800844a:	6042      	str	r2, [r0, #4]
 800844c:	2204      	movs	r2, #4
 800844e:	f102 0614 	add.w	r6, r2, #20
 8008452:	429e      	cmp	r6, r3
 8008454:	6841      	ldr	r1, [r0, #4]
 8008456:	d92f      	bls.n	80084b8 <_dtoa_r+0x2d8>
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fedd 	bl	8009218 <_Balloc>
 800845e:	9000      	str	r0, [sp, #0]
 8008460:	2800      	cmp	r0, #0
 8008462:	d14b      	bne.n	80084fc <_dtoa_r+0x31c>
 8008464:	4b24      	ldr	r3, [pc, #144]	; (80084f8 <_dtoa_r+0x318>)
 8008466:	4602      	mov	r2, r0
 8008468:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800846c:	e6d1      	b.n	8008212 <_dtoa_r+0x32>
 800846e:	2301      	movs	r3, #1
 8008470:	e7de      	b.n	8008430 <_dtoa_r+0x250>
 8008472:	2300      	movs	r3, #0
 8008474:	9308      	str	r3, [sp, #32]
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	eb0a 0903 	add.w	r9, sl, r3
 800847c:	f109 0301 	add.w	r3, r9, #1
 8008480:	2b01      	cmp	r3, #1
 8008482:	9301      	str	r3, [sp, #4]
 8008484:	bfb8      	it	lt
 8008486:	2301      	movlt	r3, #1
 8008488:	e7dd      	b.n	8008446 <_dtoa_r+0x266>
 800848a:	2301      	movs	r3, #1
 800848c:	e7f2      	b.n	8008474 <_dtoa_r+0x294>
 800848e:	2501      	movs	r5, #1
 8008490:	2300      	movs	r3, #0
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	9508      	str	r5, [sp, #32]
 8008496:	f04f 39ff 	mov.w	r9, #4294967295
 800849a:	2200      	movs	r2, #0
 800849c:	f8cd 9004 	str.w	r9, [sp, #4]
 80084a0:	2312      	movs	r3, #18
 80084a2:	9209      	str	r2, [sp, #36]	; 0x24
 80084a4:	e7cf      	b.n	8008446 <_dtoa_r+0x266>
 80084a6:	2301      	movs	r3, #1
 80084a8:	9308      	str	r3, [sp, #32]
 80084aa:	e7f4      	b.n	8008496 <_dtoa_r+0x2b6>
 80084ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80084b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80084b4:	464b      	mov	r3, r9
 80084b6:	e7c6      	b.n	8008446 <_dtoa_r+0x266>
 80084b8:	3101      	adds	r1, #1
 80084ba:	6041      	str	r1, [r0, #4]
 80084bc:	0052      	lsls	r2, r2, #1
 80084be:	e7c6      	b.n	800844e <_dtoa_r+0x26e>
 80084c0:	636f4361 	.word	0x636f4361
 80084c4:	3fd287a7 	.word	0x3fd287a7
 80084c8:	8b60c8b3 	.word	0x8b60c8b3
 80084cc:	3fc68a28 	.word	0x3fc68a28
 80084d0:	509f79fb 	.word	0x509f79fb
 80084d4:	3fd34413 	.word	0x3fd34413
 80084d8:	08066091 	.word	0x08066091
 80084dc:	080660a8 	.word	0x080660a8
 80084e0:	7ff00000 	.word	0x7ff00000
 80084e4:	0806608d 	.word	0x0806608d
 80084e8:	08066084 	.word	0x08066084
 80084ec:	08066061 	.word	0x08066061
 80084f0:	3ff80000 	.word	0x3ff80000
 80084f4:	08066200 	.word	0x08066200
 80084f8:	08066107 	.word	0x08066107
 80084fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fe:	9a00      	ldr	r2, [sp, #0]
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	9b01      	ldr	r3, [sp, #4]
 8008504:	2b0e      	cmp	r3, #14
 8008506:	f200 80ad 	bhi.w	8008664 <_dtoa_r+0x484>
 800850a:	2d00      	cmp	r5, #0
 800850c:	f000 80aa 	beq.w	8008664 <_dtoa_r+0x484>
 8008510:	f1ba 0f00 	cmp.w	sl, #0
 8008514:	dd36      	ble.n	8008584 <_dtoa_r+0x3a4>
 8008516:	4ac3      	ldr	r2, [pc, #780]	; (8008824 <_dtoa_r+0x644>)
 8008518:	f00a 030f 	and.w	r3, sl, #15
 800851c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008520:	ed93 7b00 	vldr	d7, [r3]
 8008524:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008528:	ea4f 172a 	mov.w	r7, sl, asr #4
 800852c:	eeb0 8a47 	vmov.f32	s16, s14
 8008530:	eef0 8a67 	vmov.f32	s17, s15
 8008534:	d016      	beq.n	8008564 <_dtoa_r+0x384>
 8008536:	4bbc      	ldr	r3, [pc, #752]	; (8008828 <_dtoa_r+0x648>)
 8008538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800853c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008540:	f7f8 f98c 	bl	800085c <__aeabi_ddiv>
 8008544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008548:	f007 070f 	and.w	r7, r7, #15
 800854c:	2503      	movs	r5, #3
 800854e:	4eb6      	ldr	r6, [pc, #728]	; (8008828 <_dtoa_r+0x648>)
 8008550:	b957      	cbnz	r7, 8008568 <_dtoa_r+0x388>
 8008552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008556:	ec53 2b18 	vmov	r2, r3, d8
 800855a:	f7f8 f97f 	bl	800085c <__aeabi_ddiv>
 800855e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008562:	e029      	b.n	80085b8 <_dtoa_r+0x3d8>
 8008564:	2502      	movs	r5, #2
 8008566:	e7f2      	b.n	800854e <_dtoa_r+0x36e>
 8008568:	07f9      	lsls	r1, r7, #31
 800856a:	d508      	bpl.n	800857e <_dtoa_r+0x39e>
 800856c:	ec51 0b18 	vmov	r0, r1, d8
 8008570:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008574:	f7f8 f848 	bl	8000608 <__aeabi_dmul>
 8008578:	ec41 0b18 	vmov	d8, r0, r1
 800857c:	3501      	adds	r5, #1
 800857e:	107f      	asrs	r7, r7, #1
 8008580:	3608      	adds	r6, #8
 8008582:	e7e5      	b.n	8008550 <_dtoa_r+0x370>
 8008584:	f000 80a6 	beq.w	80086d4 <_dtoa_r+0x4f4>
 8008588:	f1ca 0600 	rsb	r6, sl, #0
 800858c:	4ba5      	ldr	r3, [pc, #660]	; (8008824 <_dtoa_r+0x644>)
 800858e:	4fa6      	ldr	r7, [pc, #664]	; (8008828 <_dtoa_r+0x648>)
 8008590:	f006 020f 	and.w	r2, r6, #15
 8008594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085a0:	f7f8 f832 	bl	8000608 <__aeabi_dmul>
 80085a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085a8:	1136      	asrs	r6, r6, #4
 80085aa:	2300      	movs	r3, #0
 80085ac:	2502      	movs	r5, #2
 80085ae:	2e00      	cmp	r6, #0
 80085b0:	f040 8085 	bne.w	80086be <_dtoa_r+0x4de>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1d2      	bne.n	800855e <_dtoa_r+0x37e>
 80085b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 808c 	beq.w	80086d8 <_dtoa_r+0x4f8>
 80085c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085c4:	4b99      	ldr	r3, [pc, #612]	; (800882c <_dtoa_r+0x64c>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 fa8e 	bl	8000aec <__aeabi_dcmplt>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f000 8081 	beq.w	80086d8 <_dtoa_r+0x4f8>
 80085d6:	9b01      	ldr	r3, [sp, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d07d      	beq.n	80086d8 <_dtoa_r+0x4f8>
 80085dc:	f1b9 0f00 	cmp.w	r9, #0
 80085e0:	dd3c      	ble.n	800865c <_dtoa_r+0x47c>
 80085e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80085e6:	9307      	str	r3, [sp, #28]
 80085e8:	2200      	movs	r2, #0
 80085ea:	4b91      	ldr	r3, [pc, #580]	; (8008830 <_dtoa_r+0x650>)
 80085ec:	4630      	mov	r0, r6
 80085ee:	4639      	mov	r1, r7
 80085f0:	f7f8 f80a 	bl	8000608 <__aeabi_dmul>
 80085f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f8:	3501      	adds	r5, #1
 80085fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80085fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008602:	4628      	mov	r0, r5
 8008604:	f7f7 ff96 	bl	8000534 <__aeabi_i2d>
 8008608:	4632      	mov	r2, r6
 800860a:	463b      	mov	r3, r7
 800860c:	f7f7 fffc 	bl	8000608 <__aeabi_dmul>
 8008610:	4b88      	ldr	r3, [pc, #544]	; (8008834 <_dtoa_r+0x654>)
 8008612:	2200      	movs	r2, #0
 8008614:	f7f7 fe42 	bl	800029c <__adddf3>
 8008618:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800861c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008624:	2b00      	cmp	r3, #0
 8008626:	d15c      	bne.n	80086e2 <_dtoa_r+0x502>
 8008628:	4b83      	ldr	r3, [pc, #524]	; (8008838 <_dtoa_r+0x658>)
 800862a:	2200      	movs	r2, #0
 800862c:	4630      	mov	r0, r6
 800862e:	4639      	mov	r1, r7
 8008630:	f7f7 fe32 	bl	8000298 <__aeabi_dsub>
 8008634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008638:	4606      	mov	r6, r0
 800863a:	460f      	mov	r7, r1
 800863c:	f7f8 fa74 	bl	8000b28 <__aeabi_dcmpgt>
 8008640:	2800      	cmp	r0, #0
 8008642:	f040 8296 	bne.w	8008b72 <_dtoa_r+0x992>
 8008646:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800864a:	4630      	mov	r0, r6
 800864c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008650:	4639      	mov	r1, r7
 8008652:	f7f8 fa4b 	bl	8000aec <__aeabi_dcmplt>
 8008656:	2800      	cmp	r0, #0
 8008658:	f040 8288 	bne.w	8008b6c <_dtoa_r+0x98c>
 800865c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008666:	2b00      	cmp	r3, #0
 8008668:	f2c0 8158 	blt.w	800891c <_dtoa_r+0x73c>
 800866c:	f1ba 0f0e 	cmp.w	sl, #14
 8008670:	f300 8154 	bgt.w	800891c <_dtoa_r+0x73c>
 8008674:	4b6b      	ldr	r3, [pc, #428]	; (8008824 <_dtoa_r+0x644>)
 8008676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800867a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800867e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	f280 80e3 	bge.w	800884c <_dtoa_r+0x66c>
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f300 80df 	bgt.w	800884c <_dtoa_r+0x66c>
 800868e:	f040 826d 	bne.w	8008b6c <_dtoa_r+0x98c>
 8008692:	4b69      	ldr	r3, [pc, #420]	; (8008838 <_dtoa_r+0x658>)
 8008694:	2200      	movs	r2, #0
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	f7f7 ffb5 	bl	8000608 <__aeabi_dmul>
 800869e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086a2:	f7f8 fa37 	bl	8000b14 <__aeabi_dcmpge>
 80086a6:	9e01      	ldr	r6, [sp, #4]
 80086a8:	4637      	mov	r7, r6
 80086aa:	2800      	cmp	r0, #0
 80086ac:	f040 8243 	bne.w	8008b36 <_dtoa_r+0x956>
 80086b0:	9d00      	ldr	r5, [sp, #0]
 80086b2:	2331      	movs	r3, #49	; 0x31
 80086b4:	f805 3b01 	strb.w	r3, [r5], #1
 80086b8:	f10a 0a01 	add.w	sl, sl, #1
 80086bc:	e23f      	b.n	8008b3e <_dtoa_r+0x95e>
 80086be:	07f2      	lsls	r2, r6, #31
 80086c0:	d505      	bpl.n	80086ce <_dtoa_r+0x4ee>
 80086c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c6:	f7f7 ff9f 	bl	8000608 <__aeabi_dmul>
 80086ca:	3501      	adds	r5, #1
 80086cc:	2301      	movs	r3, #1
 80086ce:	1076      	asrs	r6, r6, #1
 80086d0:	3708      	adds	r7, #8
 80086d2:	e76c      	b.n	80085ae <_dtoa_r+0x3ce>
 80086d4:	2502      	movs	r5, #2
 80086d6:	e76f      	b.n	80085b8 <_dtoa_r+0x3d8>
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	f8cd a01c 	str.w	sl, [sp, #28]
 80086de:	930c      	str	r3, [sp, #48]	; 0x30
 80086e0:	e78d      	b.n	80085fe <_dtoa_r+0x41e>
 80086e2:	9900      	ldr	r1, [sp, #0]
 80086e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80086e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086e8:	4b4e      	ldr	r3, [pc, #312]	; (8008824 <_dtoa_r+0x644>)
 80086ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086ee:	4401      	add	r1, r0
 80086f0:	9102      	str	r1, [sp, #8]
 80086f2:	9908      	ldr	r1, [sp, #32]
 80086f4:	eeb0 8a47 	vmov.f32	s16, s14
 80086f8:	eef0 8a67 	vmov.f32	s17, s15
 80086fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008700:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008704:	2900      	cmp	r1, #0
 8008706:	d045      	beq.n	8008794 <_dtoa_r+0x5b4>
 8008708:	494c      	ldr	r1, [pc, #304]	; (800883c <_dtoa_r+0x65c>)
 800870a:	2000      	movs	r0, #0
 800870c:	f7f8 f8a6 	bl	800085c <__aeabi_ddiv>
 8008710:	ec53 2b18 	vmov	r2, r3, d8
 8008714:	f7f7 fdc0 	bl	8000298 <__aeabi_dsub>
 8008718:	9d00      	ldr	r5, [sp, #0]
 800871a:	ec41 0b18 	vmov	d8, r0, r1
 800871e:	4639      	mov	r1, r7
 8008720:	4630      	mov	r0, r6
 8008722:	f7f8 fa21 	bl	8000b68 <__aeabi_d2iz>
 8008726:	900c      	str	r0, [sp, #48]	; 0x30
 8008728:	f7f7 ff04 	bl	8000534 <__aeabi_i2d>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f7 fdb0 	bl	8000298 <__aeabi_dsub>
 8008738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800873a:	3330      	adds	r3, #48	; 0x30
 800873c:	f805 3b01 	strb.w	r3, [r5], #1
 8008740:	ec53 2b18 	vmov	r2, r3, d8
 8008744:	4606      	mov	r6, r0
 8008746:	460f      	mov	r7, r1
 8008748:	f7f8 f9d0 	bl	8000aec <__aeabi_dcmplt>
 800874c:	2800      	cmp	r0, #0
 800874e:	d165      	bne.n	800881c <_dtoa_r+0x63c>
 8008750:	4632      	mov	r2, r6
 8008752:	463b      	mov	r3, r7
 8008754:	4935      	ldr	r1, [pc, #212]	; (800882c <_dtoa_r+0x64c>)
 8008756:	2000      	movs	r0, #0
 8008758:	f7f7 fd9e 	bl	8000298 <__aeabi_dsub>
 800875c:	ec53 2b18 	vmov	r2, r3, d8
 8008760:	f7f8 f9c4 	bl	8000aec <__aeabi_dcmplt>
 8008764:	2800      	cmp	r0, #0
 8008766:	f040 80b9 	bne.w	80088dc <_dtoa_r+0x6fc>
 800876a:	9b02      	ldr	r3, [sp, #8]
 800876c:	429d      	cmp	r5, r3
 800876e:	f43f af75 	beq.w	800865c <_dtoa_r+0x47c>
 8008772:	4b2f      	ldr	r3, [pc, #188]	; (8008830 <_dtoa_r+0x650>)
 8008774:	ec51 0b18 	vmov	r0, r1, d8
 8008778:	2200      	movs	r2, #0
 800877a:	f7f7 ff45 	bl	8000608 <__aeabi_dmul>
 800877e:	4b2c      	ldr	r3, [pc, #176]	; (8008830 <_dtoa_r+0x650>)
 8008780:	ec41 0b18 	vmov	d8, r0, r1
 8008784:	2200      	movs	r2, #0
 8008786:	4630      	mov	r0, r6
 8008788:	4639      	mov	r1, r7
 800878a:	f7f7 ff3d 	bl	8000608 <__aeabi_dmul>
 800878e:	4606      	mov	r6, r0
 8008790:	460f      	mov	r7, r1
 8008792:	e7c4      	b.n	800871e <_dtoa_r+0x53e>
 8008794:	ec51 0b17 	vmov	r0, r1, d7
 8008798:	f7f7 ff36 	bl	8000608 <__aeabi_dmul>
 800879c:	9b02      	ldr	r3, [sp, #8]
 800879e:	9d00      	ldr	r5, [sp, #0]
 80087a0:	930c      	str	r3, [sp, #48]	; 0x30
 80087a2:	ec41 0b18 	vmov	d8, r0, r1
 80087a6:	4639      	mov	r1, r7
 80087a8:	4630      	mov	r0, r6
 80087aa:	f7f8 f9dd 	bl	8000b68 <__aeabi_d2iz>
 80087ae:	9011      	str	r0, [sp, #68]	; 0x44
 80087b0:	f7f7 fec0 	bl	8000534 <__aeabi_i2d>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4630      	mov	r0, r6
 80087ba:	4639      	mov	r1, r7
 80087bc:	f7f7 fd6c 	bl	8000298 <__aeabi_dsub>
 80087c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087c2:	3330      	adds	r3, #48	; 0x30
 80087c4:	f805 3b01 	strb.w	r3, [r5], #1
 80087c8:	9b02      	ldr	r3, [sp, #8]
 80087ca:	429d      	cmp	r5, r3
 80087cc:	4606      	mov	r6, r0
 80087ce:	460f      	mov	r7, r1
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	d134      	bne.n	8008840 <_dtoa_r+0x660>
 80087d6:	4b19      	ldr	r3, [pc, #100]	; (800883c <_dtoa_r+0x65c>)
 80087d8:	ec51 0b18 	vmov	r0, r1, d8
 80087dc:	f7f7 fd5e 	bl	800029c <__adddf3>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4630      	mov	r0, r6
 80087e6:	4639      	mov	r1, r7
 80087e8:	f7f8 f99e 	bl	8000b28 <__aeabi_dcmpgt>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d175      	bne.n	80088dc <_dtoa_r+0x6fc>
 80087f0:	ec53 2b18 	vmov	r2, r3, d8
 80087f4:	4911      	ldr	r1, [pc, #68]	; (800883c <_dtoa_r+0x65c>)
 80087f6:	2000      	movs	r0, #0
 80087f8:	f7f7 fd4e 	bl	8000298 <__aeabi_dsub>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f8 f972 	bl	8000aec <__aeabi_dcmplt>
 8008808:	2800      	cmp	r0, #0
 800880a:	f43f af27 	beq.w	800865c <_dtoa_r+0x47c>
 800880e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008810:	1e6b      	subs	r3, r5, #1
 8008812:	930c      	str	r3, [sp, #48]	; 0x30
 8008814:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008818:	2b30      	cmp	r3, #48	; 0x30
 800881a:	d0f8      	beq.n	800880e <_dtoa_r+0x62e>
 800881c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008820:	e04a      	b.n	80088b8 <_dtoa_r+0x6d8>
 8008822:	bf00      	nop
 8008824:	08066200 	.word	0x08066200
 8008828:	080661d8 	.word	0x080661d8
 800882c:	3ff00000 	.word	0x3ff00000
 8008830:	40240000 	.word	0x40240000
 8008834:	401c0000 	.word	0x401c0000
 8008838:	40140000 	.word	0x40140000
 800883c:	3fe00000 	.word	0x3fe00000
 8008840:	4baf      	ldr	r3, [pc, #700]	; (8008b00 <_dtoa_r+0x920>)
 8008842:	f7f7 fee1 	bl	8000608 <__aeabi_dmul>
 8008846:	4606      	mov	r6, r0
 8008848:	460f      	mov	r7, r1
 800884a:	e7ac      	b.n	80087a6 <_dtoa_r+0x5c6>
 800884c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008850:	9d00      	ldr	r5, [sp, #0]
 8008852:	4642      	mov	r2, r8
 8008854:	464b      	mov	r3, r9
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f7 ffff 	bl	800085c <__aeabi_ddiv>
 800885e:	f7f8 f983 	bl	8000b68 <__aeabi_d2iz>
 8008862:	9002      	str	r0, [sp, #8]
 8008864:	f7f7 fe66 	bl	8000534 <__aeabi_i2d>
 8008868:	4642      	mov	r2, r8
 800886a:	464b      	mov	r3, r9
 800886c:	f7f7 fecc 	bl	8000608 <__aeabi_dmul>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4630      	mov	r0, r6
 8008876:	4639      	mov	r1, r7
 8008878:	f7f7 fd0e 	bl	8000298 <__aeabi_dsub>
 800887c:	9e02      	ldr	r6, [sp, #8]
 800887e:	9f01      	ldr	r7, [sp, #4]
 8008880:	3630      	adds	r6, #48	; 0x30
 8008882:	f805 6b01 	strb.w	r6, [r5], #1
 8008886:	9e00      	ldr	r6, [sp, #0]
 8008888:	1bae      	subs	r6, r5, r6
 800888a:	42b7      	cmp	r7, r6
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	d137      	bne.n	8008902 <_dtoa_r+0x722>
 8008892:	f7f7 fd03 	bl	800029c <__adddf3>
 8008896:	4642      	mov	r2, r8
 8008898:	464b      	mov	r3, r9
 800889a:	4606      	mov	r6, r0
 800889c:	460f      	mov	r7, r1
 800889e:	f7f8 f943 	bl	8000b28 <__aeabi_dcmpgt>
 80088a2:	b9c8      	cbnz	r0, 80088d8 <_dtoa_r+0x6f8>
 80088a4:	4642      	mov	r2, r8
 80088a6:	464b      	mov	r3, r9
 80088a8:	4630      	mov	r0, r6
 80088aa:	4639      	mov	r1, r7
 80088ac:	f7f8 f914 	bl	8000ad8 <__aeabi_dcmpeq>
 80088b0:	b110      	cbz	r0, 80088b8 <_dtoa_r+0x6d8>
 80088b2:	9b02      	ldr	r3, [sp, #8]
 80088b4:	07d9      	lsls	r1, r3, #31
 80088b6:	d40f      	bmi.n	80088d8 <_dtoa_r+0x6f8>
 80088b8:	4620      	mov	r0, r4
 80088ba:	4659      	mov	r1, fp
 80088bc:	f000 fcec 	bl	8009298 <_Bfree>
 80088c0:	2300      	movs	r3, #0
 80088c2:	702b      	strb	r3, [r5, #0]
 80088c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088c6:	f10a 0001 	add.w	r0, sl, #1
 80088ca:	6018      	str	r0, [r3, #0]
 80088cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f43f acd8 	beq.w	8008284 <_dtoa_r+0xa4>
 80088d4:	601d      	str	r5, [r3, #0]
 80088d6:	e4d5      	b.n	8008284 <_dtoa_r+0xa4>
 80088d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80088dc:	462b      	mov	r3, r5
 80088de:	461d      	mov	r5, r3
 80088e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088e4:	2a39      	cmp	r2, #57	; 0x39
 80088e6:	d108      	bne.n	80088fa <_dtoa_r+0x71a>
 80088e8:	9a00      	ldr	r2, [sp, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d1f7      	bne.n	80088de <_dtoa_r+0x6fe>
 80088ee:	9a07      	ldr	r2, [sp, #28]
 80088f0:	9900      	ldr	r1, [sp, #0]
 80088f2:	3201      	adds	r2, #1
 80088f4:	9207      	str	r2, [sp, #28]
 80088f6:	2230      	movs	r2, #48	; 0x30
 80088f8:	700a      	strb	r2, [r1, #0]
 80088fa:	781a      	ldrb	r2, [r3, #0]
 80088fc:	3201      	adds	r2, #1
 80088fe:	701a      	strb	r2, [r3, #0]
 8008900:	e78c      	b.n	800881c <_dtoa_r+0x63c>
 8008902:	4b7f      	ldr	r3, [pc, #508]	; (8008b00 <_dtoa_r+0x920>)
 8008904:	2200      	movs	r2, #0
 8008906:	f7f7 fe7f 	bl	8000608 <__aeabi_dmul>
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	f7f8 f8e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008916:	2800      	cmp	r0, #0
 8008918:	d09b      	beq.n	8008852 <_dtoa_r+0x672>
 800891a:	e7cd      	b.n	80088b8 <_dtoa_r+0x6d8>
 800891c:	9a08      	ldr	r2, [sp, #32]
 800891e:	2a00      	cmp	r2, #0
 8008920:	f000 80c4 	beq.w	8008aac <_dtoa_r+0x8cc>
 8008924:	9a05      	ldr	r2, [sp, #20]
 8008926:	2a01      	cmp	r2, #1
 8008928:	f300 80a8 	bgt.w	8008a7c <_dtoa_r+0x89c>
 800892c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800892e:	2a00      	cmp	r2, #0
 8008930:	f000 80a0 	beq.w	8008a74 <_dtoa_r+0x894>
 8008934:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008938:	9e06      	ldr	r6, [sp, #24]
 800893a:	4645      	mov	r5, r8
 800893c:	9a04      	ldr	r2, [sp, #16]
 800893e:	2101      	movs	r1, #1
 8008940:	441a      	add	r2, r3
 8008942:	4620      	mov	r0, r4
 8008944:	4498      	add	r8, r3
 8008946:	9204      	str	r2, [sp, #16]
 8008948:	f000 fd62 	bl	8009410 <__i2b>
 800894c:	4607      	mov	r7, r0
 800894e:	2d00      	cmp	r5, #0
 8008950:	dd0b      	ble.n	800896a <_dtoa_r+0x78a>
 8008952:	9b04      	ldr	r3, [sp, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd08      	ble.n	800896a <_dtoa_r+0x78a>
 8008958:	42ab      	cmp	r3, r5
 800895a:	9a04      	ldr	r2, [sp, #16]
 800895c:	bfa8      	it	ge
 800895e:	462b      	movge	r3, r5
 8008960:	eba8 0803 	sub.w	r8, r8, r3
 8008964:	1aed      	subs	r5, r5, r3
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	9b06      	ldr	r3, [sp, #24]
 800896c:	b1fb      	cbz	r3, 80089ae <_dtoa_r+0x7ce>
 800896e:	9b08      	ldr	r3, [sp, #32]
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 809f 	beq.w	8008ab4 <_dtoa_r+0x8d4>
 8008976:	2e00      	cmp	r6, #0
 8008978:	dd11      	ble.n	800899e <_dtoa_r+0x7be>
 800897a:	4639      	mov	r1, r7
 800897c:	4632      	mov	r2, r6
 800897e:	4620      	mov	r0, r4
 8008980:	f000 fe02 	bl	8009588 <__pow5mult>
 8008984:	465a      	mov	r2, fp
 8008986:	4601      	mov	r1, r0
 8008988:	4607      	mov	r7, r0
 800898a:	4620      	mov	r0, r4
 800898c:	f000 fd56 	bl	800943c <__multiply>
 8008990:	4659      	mov	r1, fp
 8008992:	9007      	str	r0, [sp, #28]
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fc7f 	bl	8009298 <_Bfree>
 800899a:	9b07      	ldr	r3, [sp, #28]
 800899c:	469b      	mov	fp, r3
 800899e:	9b06      	ldr	r3, [sp, #24]
 80089a0:	1b9a      	subs	r2, r3, r6
 80089a2:	d004      	beq.n	80089ae <_dtoa_r+0x7ce>
 80089a4:	4659      	mov	r1, fp
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 fdee 	bl	8009588 <__pow5mult>
 80089ac:	4683      	mov	fp, r0
 80089ae:	2101      	movs	r1, #1
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 fd2d 	bl	8009410 <__i2b>
 80089b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	4606      	mov	r6, r0
 80089bc:	dd7c      	ble.n	8008ab8 <_dtoa_r+0x8d8>
 80089be:	461a      	mov	r2, r3
 80089c0:	4601      	mov	r1, r0
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 fde0 	bl	8009588 <__pow5mult>
 80089c8:	9b05      	ldr	r3, [sp, #20]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	4606      	mov	r6, r0
 80089ce:	dd76      	ble.n	8008abe <_dtoa_r+0x8de>
 80089d0:	2300      	movs	r3, #0
 80089d2:	9306      	str	r3, [sp, #24]
 80089d4:	6933      	ldr	r3, [r6, #16]
 80089d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089da:	6918      	ldr	r0, [r3, #16]
 80089dc:	f000 fcc8 	bl	8009370 <__hi0bits>
 80089e0:	f1c0 0020 	rsb	r0, r0, #32
 80089e4:	9b04      	ldr	r3, [sp, #16]
 80089e6:	4418      	add	r0, r3
 80089e8:	f010 001f 	ands.w	r0, r0, #31
 80089ec:	f000 8086 	beq.w	8008afc <_dtoa_r+0x91c>
 80089f0:	f1c0 0320 	rsb	r3, r0, #32
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	dd7f      	ble.n	8008af8 <_dtoa_r+0x918>
 80089f8:	f1c0 001c 	rsb	r0, r0, #28
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	4403      	add	r3, r0
 8008a00:	4480      	add	r8, r0
 8008a02:	4405      	add	r5, r0
 8008a04:	9304      	str	r3, [sp, #16]
 8008a06:	f1b8 0f00 	cmp.w	r8, #0
 8008a0a:	dd05      	ble.n	8008a18 <_dtoa_r+0x838>
 8008a0c:	4659      	mov	r1, fp
 8008a0e:	4642      	mov	r2, r8
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 fe13 	bl	800963c <__lshift>
 8008a16:	4683      	mov	fp, r0
 8008a18:	9b04      	ldr	r3, [sp, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	dd05      	ble.n	8008a2a <_dtoa_r+0x84a>
 8008a1e:	4631      	mov	r1, r6
 8008a20:	461a      	mov	r2, r3
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fe0a 	bl	800963c <__lshift>
 8008a28:	4606      	mov	r6, r0
 8008a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d069      	beq.n	8008b04 <_dtoa_r+0x924>
 8008a30:	4631      	mov	r1, r6
 8008a32:	4658      	mov	r0, fp
 8008a34:	f000 fe6e 	bl	8009714 <__mcmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	da63      	bge.n	8008b04 <_dtoa_r+0x924>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4659      	mov	r1, fp
 8008a40:	220a      	movs	r2, #10
 8008a42:	4620      	mov	r0, r4
 8008a44:	f000 fc4a 	bl	80092dc <__multadd>
 8008a48:	9b08      	ldr	r3, [sp, #32]
 8008a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a4e:	4683      	mov	fp, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 818f 	beq.w	8008d74 <_dtoa_r+0xb94>
 8008a56:	4639      	mov	r1, r7
 8008a58:	2300      	movs	r3, #0
 8008a5a:	220a      	movs	r2, #10
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 fc3d 	bl	80092dc <__multadd>
 8008a62:	f1b9 0f00 	cmp.w	r9, #0
 8008a66:	4607      	mov	r7, r0
 8008a68:	f300 808e 	bgt.w	8008b88 <_dtoa_r+0x9a8>
 8008a6c:	9b05      	ldr	r3, [sp, #20]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	dc50      	bgt.n	8008b14 <_dtoa_r+0x934>
 8008a72:	e089      	b.n	8008b88 <_dtoa_r+0x9a8>
 8008a74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a7a:	e75d      	b.n	8008938 <_dtoa_r+0x758>
 8008a7c:	9b01      	ldr	r3, [sp, #4]
 8008a7e:	1e5e      	subs	r6, r3, #1
 8008a80:	9b06      	ldr	r3, [sp, #24]
 8008a82:	42b3      	cmp	r3, r6
 8008a84:	bfbf      	itttt	lt
 8008a86:	9b06      	ldrlt	r3, [sp, #24]
 8008a88:	9606      	strlt	r6, [sp, #24]
 8008a8a:	1af2      	sublt	r2, r6, r3
 8008a8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008a8e:	bfb6      	itet	lt
 8008a90:	189b      	addlt	r3, r3, r2
 8008a92:	1b9e      	subge	r6, r3, r6
 8008a94:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	bfb8      	it	lt
 8008a9a:	2600      	movlt	r6, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bfb5      	itete	lt
 8008aa0:	eba8 0503 	sublt.w	r5, r8, r3
 8008aa4:	9b01      	ldrge	r3, [sp, #4]
 8008aa6:	2300      	movlt	r3, #0
 8008aa8:	4645      	movge	r5, r8
 8008aaa:	e747      	b.n	800893c <_dtoa_r+0x75c>
 8008aac:	9e06      	ldr	r6, [sp, #24]
 8008aae:	9f08      	ldr	r7, [sp, #32]
 8008ab0:	4645      	mov	r5, r8
 8008ab2:	e74c      	b.n	800894e <_dtoa_r+0x76e>
 8008ab4:	9a06      	ldr	r2, [sp, #24]
 8008ab6:	e775      	b.n	80089a4 <_dtoa_r+0x7c4>
 8008ab8:	9b05      	ldr	r3, [sp, #20]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	dc18      	bgt.n	8008af0 <_dtoa_r+0x910>
 8008abe:	9b02      	ldr	r3, [sp, #8]
 8008ac0:	b9b3      	cbnz	r3, 8008af0 <_dtoa_r+0x910>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ac8:	b9a3      	cbnz	r3, 8008af4 <_dtoa_r+0x914>
 8008aca:	9b03      	ldr	r3, [sp, #12]
 8008acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ad0:	0d1b      	lsrs	r3, r3, #20
 8008ad2:	051b      	lsls	r3, r3, #20
 8008ad4:	b12b      	cbz	r3, 8008ae2 <_dtoa_r+0x902>
 8008ad6:	9b04      	ldr	r3, [sp, #16]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	f108 0801 	add.w	r8, r8, #1
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	9306      	str	r3, [sp, #24]
 8008ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f47f af74 	bne.w	80089d4 <_dtoa_r+0x7f4>
 8008aec:	2001      	movs	r0, #1
 8008aee:	e779      	b.n	80089e4 <_dtoa_r+0x804>
 8008af0:	2300      	movs	r3, #0
 8008af2:	e7f6      	b.n	8008ae2 <_dtoa_r+0x902>
 8008af4:	9b02      	ldr	r3, [sp, #8]
 8008af6:	e7f4      	b.n	8008ae2 <_dtoa_r+0x902>
 8008af8:	d085      	beq.n	8008a06 <_dtoa_r+0x826>
 8008afa:	4618      	mov	r0, r3
 8008afc:	301c      	adds	r0, #28
 8008afe:	e77d      	b.n	80089fc <_dtoa_r+0x81c>
 8008b00:	40240000 	.word	0x40240000
 8008b04:	9b01      	ldr	r3, [sp, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	dc38      	bgt.n	8008b7c <_dtoa_r+0x99c>
 8008b0a:	9b05      	ldr	r3, [sp, #20]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	dd35      	ble.n	8008b7c <_dtoa_r+0x99c>
 8008b10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b14:	f1b9 0f00 	cmp.w	r9, #0
 8008b18:	d10d      	bne.n	8008b36 <_dtoa_r+0x956>
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	2205      	movs	r2, #5
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 fbdb 	bl	80092dc <__multadd>
 8008b26:	4601      	mov	r1, r0
 8008b28:	4606      	mov	r6, r0
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	f000 fdf2 	bl	8009714 <__mcmp>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f73f adbd 	bgt.w	80086b0 <_dtoa_r+0x4d0>
 8008b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b38:	9d00      	ldr	r5, [sp, #0]
 8008b3a:	ea6f 0a03 	mvn.w	sl, r3
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	4631      	mov	r1, r6
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 fba7 	bl	8009298 <_Bfree>
 8008b4a:	2f00      	cmp	r7, #0
 8008b4c:	f43f aeb4 	beq.w	80088b8 <_dtoa_r+0x6d8>
 8008b50:	f1b8 0f00 	cmp.w	r8, #0
 8008b54:	d005      	beq.n	8008b62 <_dtoa_r+0x982>
 8008b56:	45b8      	cmp	r8, r7
 8008b58:	d003      	beq.n	8008b62 <_dtoa_r+0x982>
 8008b5a:	4641      	mov	r1, r8
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 fb9b 	bl	8009298 <_Bfree>
 8008b62:	4639      	mov	r1, r7
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fb97 	bl	8009298 <_Bfree>
 8008b6a:	e6a5      	b.n	80088b8 <_dtoa_r+0x6d8>
 8008b6c:	2600      	movs	r6, #0
 8008b6e:	4637      	mov	r7, r6
 8008b70:	e7e1      	b.n	8008b36 <_dtoa_r+0x956>
 8008b72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008b74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008b78:	4637      	mov	r7, r6
 8008b7a:	e599      	b.n	80086b0 <_dtoa_r+0x4d0>
 8008b7c:	9b08      	ldr	r3, [sp, #32]
 8008b7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 80fd 	beq.w	8008d82 <_dtoa_r+0xba2>
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	dd05      	ble.n	8008b98 <_dtoa_r+0x9b8>
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	462a      	mov	r2, r5
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fd53 	bl	800963c <__lshift>
 8008b96:	4607      	mov	r7, r0
 8008b98:	9b06      	ldr	r3, [sp, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d05c      	beq.n	8008c58 <_dtoa_r+0xa78>
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fb39 	bl	8009218 <_Balloc>
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	b928      	cbnz	r0, 8008bb6 <_dtoa_r+0x9d6>
 8008baa:	4b80      	ldr	r3, [pc, #512]	; (8008dac <_dtoa_r+0xbcc>)
 8008bac:	4602      	mov	r2, r0
 8008bae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bb2:	f7ff bb2e 	b.w	8008212 <_dtoa_r+0x32>
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	3202      	adds	r2, #2
 8008bba:	0092      	lsls	r2, r2, #2
 8008bbc:	f107 010c 	add.w	r1, r7, #12
 8008bc0:	300c      	adds	r0, #12
 8008bc2:	f7fe fbc1 	bl	8007348 <memcpy>
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 fd36 	bl	800963c <__lshift>
 8008bd0:	9b00      	ldr	r3, [sp, #0]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	9b00      	ldr	r3, [sp, #0]
 8008bd8:	444b      	add	r3, r9
 8008bda:	9307      	str	r3, [sp, #28]
 8008bdc:	9b02      	ldr	r3, [sp, #8]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	46b8      	mov	r8, r7
 8008be4:	9306      	str	r3, [sp, #24]
 8008be6:	4607      	mov	r7, r0
 8008be8:	9b01      	ldr	r3, [sp, #4]
 8008bea:	4631      	mov	r1, r6
 8008bec:	3b01      	subs	r3, #1
 8008bee:	4658      	mov	r0, fp
 8008bf0:	9302      	str	r3, [sp, #8]
 8008bf2:	f7ff fa69 	bl	80080c8 <quorem>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	3330      	adds	r3, #48	; 0x30
 8008bfa:	9004      	str	r0, [sp, #16]
 8008bfc:	4641      	mov	r1, r8
 8008bfe:	4658      	mov	r0, fp
 8008c00:	9308      	str	r3, [sp, #32]
 8008c02:	f000 fd87 	bl	8009714 <__mcmp>
 8008c06:	463a      	mov	r2, r7
 8008c08:	4681      	mov	r9, r0
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f000 fd9d 	bl	800974c <__mdiff>
 8008c12:	68c2      	ldr	r2, [r0, #12]
 8008c14:	9b08      	ldr	r3, [sp, #32]
 8008c16:	4605      	mov	r5, r0
 8008c18:	bb02      	cbnz	r2, 8008c5c <_dtoa_r+0xa7c>
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	4658      	mov	r0, fp
 8008c1e:	f000 fd79 	bl	8009714 <__mcmp>
 8008c22:	9b08      	ldr	r3, [sp, #32]
 8008c24:	4602      	mov	r2, r0
 8008c26:	4629      	mov	r1, r5
 8008c28:	4620      	mov	r0, r4
 8008c2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008c2e:	f000 fb33 	bl	8009298 <_Bfree>
 8008c32:	9b05      	ldr	r3, [sp, #20]
 8008c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c36:	9d01      	ldr	r5, [sp, #4]
 8008c38:	ea43 0102 	orr.w	r1, r3, r2
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	430b      	orrs	r3, r1
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	d10d      	bne.n	8008c60 <_dtoa_r+0xa80>
 8008c44:	2b39      	cmp	r3, #57	; 0x39
 8008c46:	d029      	beq.n	8008c9c <_dtoa_r+0xabc>
 8008c48:	f1b9 0f00 	cmp.w	r9, #0
 8008c4c:	dd01      	ble.n	8008c52 <_dtoa_r+0xa72>
 8008c4e:	9b04      	ldr	r3, [sp, #16]
 8008c50:	3331      	adds	r3, #49	; 0x31
 8008c52:	9a02      	ldr	r2, [sp, #8]
 8008c54:	7013      	strb	r3, [r2, #0]
 8008c56:	e774      	b.n	8008b42 <_dtoa_r+0x962>
 8008c58:	4638      	mov	r0, r7
 8008c5a:	e7b9      	b.n	8008bd0 <_dtoa_r+0x9f0>
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	e7e2      	b.n	8008c26 <_dtoa_r+0xa46>
 8008c60:	f1b9 0f00 	cmp.w	r9, #0
 8008c64:	db06      	blt.n	8008c74 <_dtoa_r+0xa94>
 8008c66:	9905      	ldr	r1, [sp, #20]
 8008c68:	ea41 0909 	orr.w	r9, r1, r9
 8008c6c:	9906      	ldr	r1, [sp, #24]
 8008c6e:	ea59 0101 	orrs.w	r1, r9, r1
 8008c72:	d120      	bne.n	8008cb6 <_dtoa_r+0xad6>
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	ddec      	ble.n	8008c52 <_dtoa_r+0xa72>
 8008c78:	4659      	mov	r1, fp
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	f000 fcdc 	bl	800963c <__lshift>
 8008c84:	4631      	mov	r1, r6
 8008c86:	4683      	mov	fp, r0
 8008c88:	f000 fd44 	bl	8009714 <__mcmp>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	9b01      	ldr	r3, [sp, #4]
 8008c90:	dc02      	bgt.n	8008c98 <_dtoa_r+0xab8>
 8008c92:	d1de      	bne.n	8008c52 <_dtoa_r+0xa72>
 8008c94:	07da      	lsls	r2, r3, #31
 8008c96:	d5dc      	bpl.n	8008c52 <_dtoa_r+0xa72>
 8008c98:	2b39      	cmp	r3, #57	; 0x39
 8008c9a:	d1d8      	bne.n	8008c4e <_dtoa_r+0xa6e>
 8008c9c:	9a02      	ldr	r2, [sp, #8]
 8008c9e:	2339      	movs	r3, #57	; 0x39
 8008ca0:	7013      	strb	r3, [r2, #0]
 8008ca2:	462b      	mov	r3, r5
 8008ca4:	461d      	mov	r5, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cac:	2a39      	cmp	r2, #57	; 0x39
 8008cae:	d050      	beq.n	8008d52 <_dtoa_r+0xb72>
 8008cb0:	3201      	adds	r2, #1
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	e745      	b.n	8008b42 <_dtoa_r+0x962>
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	dd03      	ble.n	8008cc2 <_dtoa_r+0xae2>
 8008cba:	2b39      	cmp	r3, #57	; 0x39
 8008cbc:	d0ee      	beq.n	8008c9c <_dtoa_r+0xabc>
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	e7c7      	b.n	8008c52 <_dtoa_r+0xa72>
 8008cc2:	9a01      	ldr	r2, [sp, #4]
 8008cc4:	9907      	ldr	r1, [sp, #28]
 8008cc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cca:	428a      	cmp	r2, r1
 8008ccc:	d02a      	beq.n	8008d24 <_dtoa_r+0xb44>
 8008cce:	4659      	mov	r1, fp
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	220a      	movs	r2, #10
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 fb01 	bl	80092dc <__multadd>
 8008cda:	45b8      	cmp	r8, r7
 8008cdc:	4683      	mov	fp, r0
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	f04f 020a 	mov.w	r2, #10
 8008ce6:	4641      	mov	r1, r8
 8008ce8:	4620      	mov	r0, r4
 8008cea:	d107      	bne.n	8008cfc <_dtoa_r+0xb1c>
 8008cec:	f000 faf6 	bl	80092dc <__multadd>
 8008cf0:	4680      	mov	r8, r0
 8008cf2:	4607      	mov	r7, r0
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	e775      	b.n	8008be8 <_dtoa_r+0xa08>
 8008cfc:	f000 faee 	bl	80092dc <__multadd>
 8008d00:	4639      	mov	r1, r7
 8008d02:	4680      	mov	r8, r0
 8008d04:	2300      	movs	r3, #0
 8008d06:	220a      	movs	r2, #10
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 fae7 	bl	80092dc <__multadd>
 8008d0e:	4607      	mov	r7, r0
 8008d10:	e7f0      	b.n	8008cf4 <_dtoa_r+0xb14>
 8008d12:	f1b9 0f00 	cmp.w	r9, #0
 8008d16:	9a00      	ldr	r2, [sp, #0]
 8008d18:	bfcc      	ite	gt
 8008d1a:	464d      	movgt	r5, r9
 8008d1c:	2501      	movle	r5, #1
 8008d1e:	4415      	add	r5, r2
 8008d20:	f04f 0800 	mov.w	r8, #0
 8008d24:	4659      	mov	r1, fp
 8008d26:	2201      	movs	r2, #1
 8008d28:	4620      	mov	r0, r4
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	f000 fc86 	bl	800963c <__lshift>
 8008d30:	4631      	mov	r1, r6
 8008d32:	4683      	mov	fp, r0
 8008d34:	f000 fcee 	bl	8009714 <__mcmp>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	dcb2      	bgt.n	8008ca2 <_dtoa_r+0xac2>
 8008d3c:	d102      	bne.n	8008d44 <_dtoa_r+0xb64>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	07db      	lsls	r3, r3, #31
 8008d42:	d4ae      	bmi.n	8008ca2 <_dtoa_r+0xac2>
 8008d44:	462b      	mov	r3, r5
 8008d46:	461d      	mov	r5, r3
 8008d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d4c:	2a30      	cmp	r2, #48	; 0x30
 8008d4e:	d0fa      	beq.n	8008d46 <_dtoa_r+0xb66>
 8008d50:	e6f7      	b.n	8008b42 <_dtoa_r+0x962>
 8008d52:	9a00      	ldr	r2, [sp, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d1a5      	bne.n	8008ca4 <_dtoa_r+0xac4>
 8008d58:	f10a 0a01 	add.w	sl, sl, #1
 8008d5c:	2331      	movs	r3, #49	; 0x31
 8008d5e:	e779      	b.n	8008c54 <_dtoa_r+0xa74>
 8008d60:	4b13      	ldr	r3, [pc, #76]	; (8008db0 <_dtoa_r+0xbd0>)
 8008d62:	f7ff baaf 	b.w	80082c4 <_dtoa_r+0xe4>
 8008d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f47f aa86 	bne.w	800827a <_dtoa_r+0x9a>
 8008d6e:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <_dtoa_r+0xbd4>)
 8008d70:	f7ff baa8 	b.w	80082c4 <_dtoa_r+0xe4>
 8008d74:	f1b9 0f00 	cmp.w	r9, #0
 8008d78:	dc03      	bgt.n	8008d82 <_dtoa_r+0xba2>
 8008d7a:	9b05      	ldr	r3, [sp, #20]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	f73f aec9 	bgt.w	8008b14 <_dtoa_r+0x934>
 8008d82:	9d00      	ldr	r5, [sp, #0]
 8008d84:	4631      	mov	r1, r6
 8008d86:	4658      	mov	r0, fp
 8008d88:	f7ff f99e 	bl	80080c8 <quorem>
 8008d8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d90:	f805 3b01 	strb.w	r3, [r5], #1
 8008d94:	9a00      	ldr	r2, [sp, #0]
 8008d96:	1aaa      	subs	r2, r5, r2
 8008d98:	4591      	cmp	r9, r2
 8008d9a:	ddba      	ble.n	8008d12 <_dtoa_r+0xb32>
 8008d9c:	4659      	mov	r1, fp
 8008d9e:	2300      	movs	r3, #0
 8008da0:	220a      	movs	r2, #10
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 fa9a 	bl	80092dc <__multadd>
 8008da8:	4683      	mov	fp, r0
 8008daa:	e7eb      	b.n	8008d84 <_dtoa_r+0xba4>
 8008dac:	08066107 	.word	0x08066107
 8008db0:	08066060 	.word	0x08066060
 8008db4:	08066084 	.word	0x08066084

08008db8 <__sflush_r>:
 8008db8:	898a      	ldrh	r2, [r1, #12]
 8008dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	0710      	lsls	r0, r2, #28
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	d458      	bmi.n	8008e78 <__sflush_r+0xc0>
 8008dc6:	684b      	ldr	r3, [r1, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dc05      	bgt.n	8008dd8 <__sflush_r+0x20>
 8008dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	dc02      	bgt.n	8008dd8 <__sflush_r+0x20>
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dda:	2e00      	cmp	r6, #0
 8008ddc:	d0f9      	beq.n	8008dd2 <__sflush_r+0x1a>
 8008dde:	2300      	movs	r3, #0
 8008de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008de4:	682f      	ldr	r7, [r5, #0]
 8008de6:	602b      	str	r3, [r5, #0]
 8008de8:	d032      	beq.n	8008e50 <__sflush_r+0x98>
 8008dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	075a      	lsls	r2, r3, #29
 8008df0:	d505      	bpl.n	8008dfe <__sflush_r+0x46>
 8008df2:	6863      	ldr	r3, [r4, #4]
 8008df4:	1ac0      	subs	r0, r0, r3
 8008df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008df8:	b10b      	cbz	r3, 8008dfe <__sflush_r+0x46>
 8008dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dfc:	1ac0      	subs	r0, r0, r3
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4602      	mov	r2, r0
 8008e02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e04:	6a21      	ldr	r1, [r4, #32]
 8008e06:	4628      	mov	r0, r5
 8008e08:	47b0      	blx	r6
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	d106      	bne.n	8008e1e <__sflush_r+0x66>
 8008e10:	6829      	ldr	r1, [r5, #0]
 8008e12:	291d      	cmp	r1, #29
 8008e14:	d82c      	bhi.n	8008e70 <__sflush_r+0xb8>
 8008e16:	4a2a      	ldr	r2, [pc, #168]	; (8008ec0 <__sflush_r+0x108>)
 8008e18:	40ca      	lsrs	r2, r1
 8008e1a:	07d6      	lsls	r6, r2, #31
 8008e1c:	d528      	bpl.n	8008e70 <__sflush_r+0xb8>
 8008e1e:	2200      	movs	r2, #0
 8008e20:	6062      	str	r2, [r4, #4]
 8008e22:	04d9      	lsls	r1, r3, #19
 8008e24:	6922      	ldr	r2, [r4, #16]
 8008e26:	6022      	str	r2, [r4, #0]
 8008e28:	d504      	bpl.n	8008e34 <__sflush_r+0x7c>
 8008e2a:	1c42      	adds	r2, r0, #1
 8008e2c:	d101      	bne.n	8008e32 <__sflush_r+0x7a>
 8008e2e:	682b      	ldr	r3, [r5, #0]
 8008e30:	b903      	cbnz	r3, 8008e34 <__sflush_r+0x7c>
 8008e32:	6560      	str	r0, [r4, #84]	; 0x54
 8008e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e36:	602f      	str	r7, [r5, #0]
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	d0ca      	beq.n	8008dd2 <__sflush_r+0x1a>
 8008e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e40:	4299      	cmp	r1, r3
 8008e42:	d002      	beq.n	8008e4a <__sflush_r+0x92>
 8008e44:	4628      	mov	r0, r5
 8008e46:	f7fe faa5 	bl	8007394 <_free_r>
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8008e4e:	e7c1      	b.n	8008dd4 <__sflush_r+0x1c>
 8008e50:	6a21      	ldr	r1, [r4, #32]
 8008e52:	2301      	movs	r3, #1
 8008e54:	4628      	mov	r0, r5
 8008e56:	47b0      	blx	r6
 8008e58:	1c41      	adds	r1, r0, #1
 8008e5a:	d1c7      	bne.n	8008dec <__sflush_r+0x34>
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0c4      	beq.n	8008dec <__sflush_r+0x34>
 8008e62:	2b1d      	cmp	r3, #29
 8008e64:	d001      	beq.n	8008e6a <__sflush_r+0xb2>
 8008e66:	2b16      	cmp	r3, #22
 8008e68:	d101      	bne.n	8008e6e <__sflush_r+0xb6>
 8008e6a:	602f      	str	r7, [r5, #0]
 8008e6c:	e7b1      	b.n	8008dd2 <__sflush_r+0x1a>
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	e7ad      	b.n	8008dd4 <__sflush_r+0x1c>
 8008e78:	690f      	ldr	r7, [r1, #16]
 8008e7a:	2f00      	cmp	r7, #0
 8008e7c:	d0a9      	beq.n	8008dd2 <__sflush_r+0x1a>
 8008e7e:	0793      	lsls	r3, r2, #30
 8008e80:	680e      	ldr	r6, [r1, #0]
 8008e82:	bf08      	it	eq
 8008e84:	694b      	ldreq	r3, [r1, #20]
 8008e86:	600f      	str	r7, [r1, #0]
 8008e88:	bf18      	it	ne
 8008e8a:	2300      	movne	r3, #0
 8008e8c:	eba6 0807 	sub.w	r8, r6, r7
 8008e90:	608b      	str	r3, [r1, #8]
 8008e92:	f1b8 0f00 	cmp.w	r8, #0
 8008e96:	dd9c      	ble.n	8008dd2 <__sflush_r+0x1a>
 8008e98:	6a21      	ldr	r1, [r4, #32]
 8008e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e9c:	4643      	mov	r3, r8
 8008e9e:	463a      	mov	r2, r7
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b0      	blx	r6
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	dc06      	bgt.n	8008eb6 <__sflush_r+0xfe>
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb4:	e78e      	b.n	8008dd4 <__sflush_r+0x1c>
 8008eb6:	4407      	add	r7, r0
 8008eb8:	eba8 0800 	sub.w	r8, r8, r0
 8008ebc:	e7e9      	b.n	8008e92 <__sflush_r+0xda>
 8008ebe:	bf00      	nop
 8008ec0:	20400001 	.word	0x20400001

08008ec4 <_fflush_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	690b      	ldr	r3, [r1, #16]
 8008ec8:	4605      	mov	r5, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	b913      	cbnz	r3, 8008ed4 <_fflush_r+0x10>
 8008ece:	2500      	movs	r5, #0
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	b118      	cbz	r0, 8008ede <_fflush_r+0x1a>
 8008ed6:	6983      	ldr	r3, [r0, #24]
 8008ed8:	b90b      	cbnz	r3, 8008ede <_fflush_r+0x1a>
 8008eda:	f000 f887 	bl	8008fec <__sinit>
 8008ede:	4b14      	ldr	r3, [pc, #80]	; (8008f30 <_fflush_r+0x6c>)
 8008ee0:	429c      	cmp	r4, r3
 8008ee2:	d11b      	bne.n	8008f1c <_fflush_r+0x58>
 8008ee4:	686c      	ldr	r4, [r5, #4]
 8008ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0ef      	beq.n	8008ece <_fflush_r+0xa>
 8008eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ef0:	07d0      	lsls	r0, r2, #31
 8008ef2:	d404      	bmi.n	8008efe <_fflush_r+0x3a>
 8008ef4:	0599      	lsls	r1, r3, #22
 8008ef6:	d402      	bmi.n	8008efe <_fflush_r+0x3a>
 8008ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efa:	f000 f91a 	bl	8009132 <__retarget_lock_acquire_recursive>
 8008efe:	4628      	mov	r0, r5
 8008f00:	4621      	mov	r1, r4
 8008f02:	f7ff ff59 	bl	8008db8 <__sflush_r>
 8008f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f08:	07da      	lsls	r2, r3, #31
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	d4e0      	bmi.n	8008ed0 <_fflush_r+0xc>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	059b      	lsls	r3, r3, #22
 8008f12:	d4dd      	bmi.n	8008ed0 <_fflush_r+0xc>
 8008f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f16:	f000 f90d 	bl	8009134 <__retarget_lock_release_recursive>
 8008f1a:	e7d9      	b.n	8008ed0 <_fflush_r+0xc>
 8008f1c:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <_fflush_r+0x70>)
 8008f1e:	429c      	cmp	r4, r3
 8008f20:	d101      	bne.n	8008f26 <_fflush_r+0x62>
 8008f22:	68ac      	ldr	r4, [r5, #8]
 8008f24:	e7df      	b.n	8008ee6 <_fflush_r+0x22>
 8008f26:	4b04      	ldr	r3, [pc, #16]	; (8008f38 <_fflush_r+0x74>)
 8008f28:	429c      	cmp	r4, r3
 8008f2a:	bf08      	it	eq
 8008f2c:	68ec      	ldreq	r4, [r5, #12]
 8008f2e:	e7da      	b.n	8008ee6 <_fflush_r+0x22>
 8008f30:	08066138 	.word	0x08066138
 8008f34:	08066158 	.word	0x08066158
 8008f38:	08066118 	.word	0x08066118

08008f3c <std>:
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	4604      	mov	r4, r0
 8008f42:	e9c0 3300 	strd	r3, r3, [r0]
 8008f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f4a:	6083      	str	r3, [r0, #8]
 8008f4c:	8181      	strh	r1, [r0, #12]
 8008f4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008f50:	81c2      	strh	r2, [r0, #14]
 8008f52:	6183      	str	r3, [r0, #24]
 8008f54:	4619      	mov	r1, r3
 8008f56:	2208      	movs	r2, #8
 8008f58:	305c      	adds	r0, #92	; 0x5c
 8008f5a:	f7fe fa03 	bl	8007364 <memset>
 8008f5e:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <std+0x38>)
 8008f60:	6263      	str	r3, [r4, #36]	; 0x24
 8008f62:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <std+0x3c>)
 8008f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f66:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <std+0x40>)
 8008f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f6a:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <std+0x44>)
 8008f6c:	6224      	str	r4, [r4, #32]
 8008f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8008f70:	bd10      	pop	{r4, pc}
 8008f72:	bf00      	nop
 8008f74:	08009ecd 	.word	0x08009ecd
 8008f78:	08009eef 	.word	0x08009eef
 8008f7c:	08009f27 	.word	0x08009f27
 8008f80:	08009f4b 	.word	0x08009f4b

08008f84 <_cleanup_r>:
 8008f84:	4901      	ldr	r1, [pc, #4]	; (8008f8c <_cleanup_r+0x8>)
 8008f86:	f000 b8af 	b.w	80090e8 <_fwalk_reent>
 8008f8a:	bf00      	nop
 8008f8c:	08008ec5 	.word	0x08008ec5

08008f90 <__sfmoreglue>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	1e4a      	subs	r2, r1, #1
 8008f94:	2568      	movs	r5, #104	; 0x68
 8008f96:	4355      	muls	r5, r2
 8008f98:	460e      	mov	r6, r1
 8008f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f9e:	f7fe fa49 	bl	8007434 <_malloc_r>
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	b140      	cbz	r0, 8008fb8 <__sfmoreglue+0x28>
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8008fac:	300c      	adds	r0, #12
 8008fae:	60a0      	str	r0, [r4, #8]
 8008fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008fb4:	f7fe f9d6 	bl	8007364 <memset>
 8008fb8:	4620      	mov	r0, r4
 8008fba:	bd70      	pop	{r4, r5, r6, pc}

08008fbc <__sfp_lock_acquire>:
 8008fbc:	4801      	ldr	r0, [pc, #4]	; (8008fc4 <__sfp_lock_acquire+0x8>)
 8008fbe:	f000 b8b8 	b.w	8009132 <__retarget_lock_acquire_recursive>
 8008fc2:	bf00      	nop
 8008fc4:	20002bec 	.word	0x20002bec

08008fc8 <__sfp_lock_release>:
 8008fc8:	4801      	ldr	r0, [pc, #4]	; (8008fd0 <__sfp_lock_release+0x8>)
 8008fca:	f000 b8b3 	b.w	8009134 <__retarget_lock_release_recursive>
 8008fce:	bf00      	nop
 8008fd0:	20002bec 	.word	0x20002bec

08008fd4 <__sinit_lock_acquire>:
 8008fd4:	4801      	ldr	r0, [pc, #4]	; (8008fdc <__sinit_lock_acquire+0x8>)
 8008fd6:	f000 b8ac 	b.w	8009132 <__retarget_lock_acquire_recursive>
 8008fda:	bf00      	nop
 8008fdc:	20002be7 	.word	0x20002be7

08008fe0 <__sinit_lock_release>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	; (8008fe8 <__sinit_lock_release+0x8>)
 8008fe2:	f000 b8a7 	b.w	8009134 <__retarget_lock_release_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	20002be7 	.word	0x20002be7

08008fec <__sinit>:
 8008fec:	b510      	push	{r4, lr}
 8008fee:	4604      	mov	r4, r0
 8008ff0:	f7ff fff0 	bl	8008fd4 <__sinit_lock_acquire>
 8008ff4:	69a3      	ldr	r3, [r4, #24]
 8008ff6:	b11b      	cbz	r3, 8009000 <__sinit+0x14>
 8008ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ffc:	f7ff bff0 	b.w	8008fe0 <__sinit_lock_release>
 8009000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009004:	6523      	str	r3, [r4, #80]	; 0x50
 8009006:	4b13      	ldr	r3, [pc, #76]	; (8009054 <__sinit+0x68>)
 8009008:	4a13      	ldr	r2, [pc, #76]	; (8009058 <__sinit+0x6c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	62a2      	str	r2, [r4, #40]	; 0x28
 800900e:	42a3      	cmp	r3, r4
 8009010:	bf04      	itt	eq
 8009012:	2301      	moveq	r3, #1
 8009014:	61a3      	streq	r3, [r4, #24]
 8009016:	4620      	mov	r0, r4
 8009018:	f000 f820 	bl	800905c <__sfp>
 800901c:	6060      	str	r0, [r4, #4]
 800901e:	4620      	mov	r0, r4
 8009020:	f000 f81c 	bl	800905c <__sfp>
 8009024:	60a0      	str	r0, [r4, #8]
 8009026:	4620      	mov	r0, r4
 8009028:	f000 f818 	bl	800905c <__sfp>
 800902c:	2200      	movs	r2, #0
 800902e:	60e0      	str	r0, [r4, #12]
 8009030:	2104      	movs	r1, #4
 8009032:	6860      	ldr	r0, [r4, #4]
 8009034:	f7ff ff82 	bl	8008f3c <std>
 8009038:	68a0      	ldr	r0, [r4, #8]
 800903a:	2201      	movs	r2, #1
 800903c:	2109      	movs	r1, #9
 800903e:	f7ff ff7d 	bl	8008f3c <std>
 8009042:	68e0      	ldr	r0, [r4, #12]
 8009044:	2202      	movs	r2, #2
 8009046:	2112      	movs	r1, #18
 8009048:	f7ff ff78 	bl	8008f3c <std>
 800904c:	2301      	movs	r3, #1
 800904e:	61a3      	str	r3, [r4, #24]
 8009050:	e7d2      	b.n	8008ff8 <__sinit+0xc>
 8009052:	bf00      	nop
 8009054:	0806604c 	.word	0x0806604c
 8009058:	08008f85 	.word	0x08008f85

0800905c <__sfp>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	4607      	mov	r7, r0
 8009060:	f7ff ffac 	bl	8008fbc <__sfp_lock_acquire>
 8009064:	4b1e      	ldr	r3, [pc, #120]	; (80090e0 <__sfp+0x84>)
 8009066:	681e      	ldr	r6, [r3, #0]
 8009068:	69b3      	ldr	r3, [r6, #24]
 800906a:	b913      	cbnz	r3, 8009072 <__sfp+0x16>
 800906c:	4630      	mov	r0, r6
 800906e:	f7ff ffbd 	bl	8008fec <__sinit>
 8009072:	3648      	adds	r6, #72	; 0x48
 8009074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009078:	3b01      	subs	r3, #1
 800907a:	d503      	bpl.n	8009084 <__sfp+0x28>
 800907c:	6833      	ldr	r3, [r6, #0]
 800907e:	b30b      	cbz	r3, 80090c4 <__sfp+0x68>
 8009080:	6836      	ldr	r6, [r6, #0]
 8009082:	e7f7      	b.n	8009074 <__sfp+0x18>
 8009084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009088:	b9d5      	cbnz	r5, 80090c0 <__sfp+0x64>
 800908a:	4b16      	ldr	r3, [pc, #88]	; (80090e4 <__sfp+0x88>)
 800908c:	60e3      	str	r3, [r4, #12]
 800908e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009092:	6665      	str	r5, [r4, #100]	; 0x64
 8009094:	f000 f84c 	bl	8009130 <__retarget_lock_init_recursive>
 8009098:	f7ff ff96 	bl	8008fc8 <__sfp_lock_release>
 800909c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80090a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80090a4:	6025      	str	r5, [r4, #0]
 80090a6:	61a5      	str	r5, [r4, #24]
 80090a8:	2208      	movs	r2, #8
 80090aa:	4629      	mov	r1, r5
 80090ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80090b0:	f7fe f958 	bl	8007364 <memset>
 80090b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80090b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80090bc:	4620      	mov	r0, r4
 80090be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c0:	3468      	adds	r4, #104	; 0x68
 80090c2:	e7d9      	b.n	8009078 <__sfp+0x1c>
 80090c4:	2104      	movs	r1, #4
 80090c6:	4638      	mov	r0, r7
 80090c8:	f7ff ff62 	bl	8008f90 <__sfmoreglue>
 80090cc:	4604      	mov	r4, r0
 80090ce:	6030      	str	r0, [r6, #0]
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1d5      	bne.n	8009080 <__sfp+0x24>
 80090d4:	f7ff ff78 	bl	8008fc8 <__sfp_lock_release>
 80090d8:	230c      	movs	r3, #12
 80090da:	603b      	str	r3, [r7, #0]
 80090dc:	e7ee      	b.n	80090bc <__sfp+0x60>
 80090de:	bf00      	nop
 80090e0:	0806604c 	.word	0x0806604c
 80090e4:	ffff0001 	.word	0xffff0001

080090e8 <_fwalk_reent>:
 80090e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ec:	4606      	mov	r6, r0
 80090ee:	4688      	mov	r8, r1
 80090f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090f4:	2700      	movs	r7, #0
 80090f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090fa:	f1b9 0901 	subs.w	r9, r9, #1
 80090fe:	d505      	bpl.n	800910c <_fwalk_reent+0x24>
 8009100:	6824      	ldr	r4, [r4, #0]
 8009102:	2c00      	cmp	r4, #0
 8009104:	d1f7      	bne.n	80090f6 <_fwalk_reent+0xe>
 8009106:	4638      	mov	r0, r7
 8009108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910c:	89ab      	ldrh	r3, [r5, #12]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d907      	bls.n	8009122 <_fwalk_reent+0x3a>
 8009112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009116:	3301      	adds	r3, #1
 8009118:	d003      	beq.n	8009122 <_fwalk_reent+0x3a>
 800911a:	4629      	mov	r1, r5
 800911c:	4630      	mov	r0, r6
 800911e:	47c0      	blx	r8
 8009120:	4307      	orrs	r7, r0
 8009122:	3568      	adds	r5, #104	; 0x68
 8009124:	e7e9      	b.n	80090fa <_fwalk_reent+0x12>
	...

08009128 <_localeconv_r>:
 8009128:	4800      	ldr	r0, [pc, #0]	; (800912c <_localeconv_r+0x4>)
 800912a:	4770      	bx	lr
 800912c:	20001024 	.word	0x20001024

08009130 <__retarget_lock_init_recursive>:
 8009130:	4770      	bx	lr

08009132 <__retarget_lock_acquire_recursive>:
 8009132:	4770      	bx	lr

08009134 <__retarget_lock_release_recursive>:
 8009134:	4770      	bx	lr

08009136 <__swhatbuf_r>:
 8009136:	b570      	push	{r4, r5, r6, lr}
 8009138:	460e      	mov	r6, r1
 800913a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913e:	2900      	cmp	r1, #0
 8009140:	b096      	sub	sp, #88	; 0x58
 8009142:	4614      	mov	r4, r2
 8009144:	461d      	mov	r5, r3
 8009146:	da07      	bge.n	8009158 <__swhatbuf_r+0x22>
 8009148:	2300      	movs	r3, #0
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	89b3      	ldrh	r3, [r6, #12]
 800914e:	061a      	lsls	r2, r3, #24
 8009150:	d410      	bmi.n	8009174 <__swhatbuf_r+0x3e>
 8009152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009156:	e00e      	b.n	8009176 <__swhatbuf_r+0x40>
 8009158:	466a      	mov	r2, sp
 800915a:	f000 ff4d 	bl	8009ff8 <_fstat_r>
 800915e:	2800      	cmp	r0, #0
 8009160:	dbf2      	blt.n	8009148 <__swhatbuf_r+0x12>
 8009162:	9a01      	ldr	r2, [sp, #4]
 8009164:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009168:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800916c:	425a      	negs	r2, r3
 800916e:	415a      	adcs	r2, r3
 8009170:	602a      	str	r2, [r5, #0]
 8009172:	e7ee      	b.n	8009152 <__swhatbuf_r+0x1c>
 8009174:	2340      	movs	r3, #64	; 0x40
 8009176:	2000      	movs	r0, #0
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	b016      	add	sp, #88	; 0x58
 800917c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009180 <__smakebuf_r>:
 8009180:	898b      	ldrh	r3, [r1, #12]
 8009182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009184:	079d      	lsls	r5, r3, #30
 8009186:	4606      	mov	r6, r0
 8009188:	460c      	mov	r4, r1
 800918a:	d507      	bpl.n	800919c <__smakebuf_r+0x1c>
 800918c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	6123      	str	r3, [r4, #16]
 8009194:	2301      	movs	r3, #1
 8009196:	6163      	str	r3, [r4, #20]
 8009198:	b002      	add	sp, #8
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	ab01      	add	r3, sp, #4
 800919e:	466a      	mov	r2, sp
 80091a0:	f7ff ffc9 	bl	8009136 <__swhatbuf_r>
 80091a4:	9900      	ldr	r1, [sp, #0]
 80091a6:	4605      	mov	r5, r0
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7fe f943 	bl	8007434 <_malloc_r>
 80091ae:	b948      	cbnz	r0, 80091c4 <__smakebuf_r+0x44>
 80091b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b4:	059a      	lsls	r2, r3, #22
 80091b6:	d4ef      	bmi.n	8009198 <__smakebuf_r+0x18>
 80091b8:	f023 0303 	bic.w	r3, r3, #3
 80091bc:	f043 0302 	orr.w	r3, r3, #2
 80091c0:	81a3      	strh	r3, [r4, #12]
 80091c2:	e7e3      	b.n	800918c <__smakebuf_r+0xc>
 80091c4:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <__smakebuf_r+0x7c>)
 80091c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	6020      	str	r0, [r4, #0]
 80091cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	9b00      	ldr	r3, [sp, #0]
 80091d4:	6163      	str	r3, [r4, #20]
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	6120      	str	r0, [r4, #16]
 80091da:	b15b      	cbz	r3, 80091f4 <__smakebuf_r+0x74>
 80091dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e0:	4630      	mov	r0, r6
 80091e2:	f000 ff1b 	bl	800a01c <_isatty_r>
 80091e6:	b128      	cbz	r0, 80091f4 <__smakebuf_r+0x74>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f023 0303 	bic.w	r3, r3, #3
 80091ee:	f043 0301 	orr.w	r3, r3, #1
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	89a0      	ldrh	r0, [r4, #12]
 80091f6:	4305      	orrs	r5, r0
 80091f8:	81a5      	strh	r5, [r4, #12]
 80091fa:	e7cd      	b.n	8009198 <__smakebuf_r+0x18>
 80091fc:	08008f85 	.word	0x08008f85

08009200 <__malloc_lock>:
 8009200:	4801      	ldr	r0, [pc, #4]	; (8009208 <__malloc_lock+0x8>)
 8009202:	f7ff bf96 	b.w	8009132 <__retarget_lock_acquire_recursive>
 8009206:	bf00      	nop
 8009208:	20002be8 	.word	0x20002be8

0800920c <__malloc_unlock>:
 800920c:	4801      	ldr	r0, [pc, #4]	; (8009214 <__malloc_unlock+0x8>)
 800920e:	f7ff bf91 	b.w	8009134 <__retarget_lock_release_recursive>
 8009212:	bf00      	nop
 8009214:	20002be8 	.word	0x20002be8

08009218 <_Balloc>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800921c:	4604      	mov	r4, r0
 800921e:	460d      	mov	r5, r1
 8009220:	b976      	cbnz	r6, 8009240 <_Balloc+0x28>
 8009222:	2010      	movs	r0, #16
 8009224:	f7fe f880 	bl	8007328 <malloc>
 8009228:	4602      	mov	r2, r0
 800922a:	6260      	str	r0, [r4, #36]	; 0x24
 800922c:	b920      	cbnz	r0, 8009238 <_Balloc+0x20>
 800922e:	4b18      	ldr	r3, [pc, #96]	; (8009290 <_Balloc+0x78>)
 8009230:	4818      	ldr	r0, [pc, #96]	; (8009294 <_Balloc+0x7c>)
 8009232:	2166      	movs	r1, #102	; 0x66
 8009234:	f000 fea0 	bl	8009f78 <__assert_func>
 8009238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800923c:	6006      	str	r6, [r0, #0]
 800923e:	60c6      	str	r6, [r0, #12]
 8009240:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009242:	68f3      	ldr	r3, [r6, #12]
 8009244:	b183      	cbz	r3, 8009268 <_Balloc+0x50>
 8009246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800924e:	b9b8      	cbnz	r0, 8009280 <_Balloc+0x68>
 8009250:	2101      	movs	r1, #1
 8009252:	fa01 f605 	lsl.w	r6, r1, r5
 8009256:	1d72      	adds	r2, r6, #5
 8009258:	0092      	lsls	r2, r2, #2
 800925a:	4620      	mov	r0, r4
 800925c:	f7fe f88a 	bl	8007374 <_calloc_r>
 8009260:	b160      	cbz	r0, 800927c <_Balloc+0x64>
 8009262:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009266:	e00e      	b.n	8009286 <_Balloc+0x6e>
 8009268:	2221      	movs	r2, #33	; 0x21
 800926a:	2104      	movs	r1, #4
 800926c:	4620      	mov	r0, r4
 800926e:	f7fe f881 	bl	8007374 <_calloc_r>
 8009272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009274:	60f0      	str	r0, [r6, #12]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e4      	bne.n	8009246 <_Balloc+0x2e>
 800927c:	2000      	movs	r0, #0
 800927e:	bd70      	pop	{r4, r5, r6, pc}
 8009280:	6802      	ldr	r2, [r0, #0]
 8009282:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009286:	2300      	movs	r3, #0
 8009288:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800928c:	e7f7      	b.n	800927e <_Balloc+0x66>
 800928e:	bf00      	nop
 8009290:	08066091 	.word	0x08066091
 8009294:	08066178 	.word	0x08066178

08009298 <_Bfree>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800929c:	4605      	mov	r5, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	b976      	cbnz	r6, 80092c0 <_Bfree+0x28>
 80092a2:	2010      	movs	r0, #16
 80092a4:	f7fe f840 	bl	8007328 <malloc>
 80092a8:	4602      	mov	r2, r0
 80092aa:	6268      	str	r0, [r5, #36]	; 0x24
 80092ac:	b920      	cbnz	r0, 80092b8 <_Bfree+0x20>
 80092ae:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <_Bfree+0x3c>)
 80092b0:	4809      	ldr	r0, [pc, #36]	; (80092d8 <_Bfree+0x40>)
 80092b2:	218a      	movs	r1, #138	; 0x8a
 80092b4:	f000 fe60 	bl	8009f78 <__assert_func>
 80092b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092bc:	6006      	str	r6, [r0, #0]
 80092be:	60c6      	str	r6, [r0, #12]
 80092c0:	b13c      	cbz	r4, 80092d2 <_Bfree+0x3a>
 80092c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092c4:	6862      	ldr	r2, [r4, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092cc:	6021      	str	r1, [r4, #0]
 80092ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092d2:	bd70      	pop	{r4, r5, r6, pc}
 80092d4:	08066091 	.word	0x08066091
 80092d8:	08066178 	.word	0x08066178

080092dc <__multadd>:
 80092dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e0:	690e      	ldr	r6, [r1, #16]
 80092e2:	4607      	mov	r7, r0
 80092e4:	4698      	mov	r8, r3
 80092e6:	460c      	mov	r4, r1
 80092e8:	f101 0014 	add.w	r0, r1, #20
 80092ec:	2300      	movs	r3, #0
 80092ee:	6805      	ldr	r5, [r0, #0]
 80092f0:	b2a9      	uxth	r1, r5
 80092f2:	fb02 8101 	mla	r1, r2, r1, r8
 80092f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80092fa:	0c2d      	lsrs	r5, r5, #16
 80092fc:	fb02 c505 	mla	r5, r2, r5, ip
 8009300:	b289      	uxth	r1, r1
 8009302:	3301      	adds	r3, #1
 8009304:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009308:	429e      	cmp	r6, r3
 800930a:	f840 1b04 	str.w	r1, [r0], #4
 800930e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009312:	dcec      	bgt.n	80092ee <__multadd+0x12>
 8009314:	f1b8 0f00 	cmp.w	r8, #0
 8009318:	d022      	beq.n	8009360 <__multadd+0x84>
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	42b3      	cmp	r3, r6
 800931e:	dc19      	bgt.n	8009354 <__multadd+0x78>
 8009320:	6861      	ldr	r1, [r4, #4]
 8009322:	4638      	mov	r0, r7
 8009324:	3101      	adds	r1, #1
 8009326:	f7ff ff77 	bl	8009218 <_Balloc>
 800932a:	4605      	mov	r5, r0
 800932c:	b928      	cbnz	r0, 800933a <__multadd+0x5e>
 800932e:	4602      	mov	r2, r0
 8009330:	4b0d      	ldr	r3, [pc, #52]	; (8009368 <__multadd+0x8c>)
 8009332:	480e      	ldr	r0, [pc, #56]	; (800936c <__multadd+0x90>)
 8009334:	21b5      	movs	r1, #181	; 0xb5
 8009336:	f000 fe1f 	bl	8009f78 <__assert_func>
 800933a:	6922      	ldr	r2, [r4, #16]
 800933c:	3202      	adds	r2, #2
 800933e:	f104 010c 	add.w	r1, r4, #12
 8009342:	0092      	lsls	r2, r2, #2
 8009344:	300c      	adds	r0, #12
 8009346:	f7fd ffff 	bl	8007348 <memcpy>
 800934a:	4621      	mov	r1, r4
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff ffa3 	bl	8009298 <_Bfree>
 8009352:	462c      	mov	r4, r5
 8009354:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009358:	3601      	adds	r6, #1
 800935a:	f8c3 8014 	str.w	r8, [r3, #20]
 800935e:	6126      	str	r6, [r4, #16]
 8009360:	4620      	mov	r0, r4
 8009362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009366:	bf00      	nop
 8009368:	08066107 	.word	0x08066107
 800936c:	08066178 	.word	0x08066178

08009370 <__hi0bits>:
 8009370:	0c03      	lsrs	r3, r0, #16
 8009372:	041b      	lsls	r3, r3, #16
 8009374:	b9d3      	cbnz	r3, 80093ac <__hi0bits+0x3c>
 8009376:	0400      	lsls	r0, r0, #16
 8009378:	2310      	movs	r3, #16
 800937a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800937e:	bf04      	itt	eq
 8009380:	0200      	lsleq	r0, r0, #8
 8009382:	3308      	addeq	r3, #8
 8009384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009388:	bf04      	itt	eq
 800938a:	0100      	lsleq	r0, r0, #4
 800938c:	3304      	addeq	r3, #4
 800938e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009392:	bf04      	itt	eq
 8009394:	0080      	lsleq	r0, r0, #2
 8009396:	3302      	addeq	r3, #2
 8009398:	2800      	cmp	r0, #0
 800939a:	db05      	blt.n	80093a8 <__hi0bits+0x38>
 800939c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80093a0:	f103 0301 	add.w	r3, r3, #1
 80093a4:	bf08      	it	eq
 80093a6:	2320      	moveq	r3, #32
 80093a8:	4618      	mov	r0, r3
 80093aa:	4770      	bx	lr
 80093ac:	2300      	movs	r3, #0
 80093ae:	e7e4      	b.n	800937a <__hi0bits+0xa>

080093b0 <__lo0bits>:
 80093b0:	6803      	ldr	r3, [r0, #0]
 80093b2:	f013 0207 	ands.w	r2, r3, #7
 80093b6:	4601      	mov	r1, r0
 80093b8:	d00b      	beq.n	80093d2 <__lo0bits+0x22>
 80093ba:	07da      	lsls	r2, r3, #31
 80093bc:	d424      	bmi.n	8009408 <__lo0bits+0x58>
 80093be:	0798      	lsls	r0, r3, #30
 80093c0:	bf49      	itett	mi
 80093c2:	085b      	lsrmi	r3, r3, #1
 80093c4:	089b      	lsrpl	r3, r3, #2
 80093c6:	2001      	movmi	r0, #1
 80093c8:	600b      	strmi	r3, [r1, #0]
 80093ca:	bf5c      	itt	pl
 80093cc:	600b      	strpl	r3, [r1, #0]
 80093ce:	2002      	movpl	r0, #2
 80093d0:	4770      	bx	lr
 80093d2:	b298      	uxth	r0, r3
 80093d4:	b9b0      	cbnz	r0, 8009404 <__lo0bits+0x54>
 80093d6:	0c1b      	lsrs	r3, r3, #16
 80093d8:	2010      	movs	r0, #16
 80093da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80093de:	bf04      	itt	eq
 80093e0:	0a1b      	lsreq	r3, r3, #8
 80093e2:	3008      	addeq	r0, #8
 80093e4:	071a      	lsls	r2, r3, #28
 80093e6:	bf04      	itt	eq
 80093e8:	091b      	lsreq	r3, r3, #4
 80093ea:	3004      	addeq	r0, #4
 80093ec:	079a      	lsls	r2, r3, #30
 80093ee:	bf04      	itt	eq
 80093f0:	089b      	lsreq	r3, r3, #2
 80093f2:	3002      	addeq	r0, #2
 80093f4:	07da      	lsls	r2, r3, #31
 80093f6:	d403      	bmi.n	8009400 <__lo0bits+0x50>
 80093f8:	085b      	lsrs	r3, r3, #1
 80093fa:	f100 0001 	add.w	r0, r0, #1
 80093fe:	d005      	beq.n	800940c <__lo0bits+0x5c>
 8009400:	600b      	str	r3, [r1, #0]
 8009402:	4770      	bx	lr
 8009404:	4610      	mov	r0, r2
 8009406:	e7e8      	b.n	80093da <__lo0bits+0x2a>
 8009408:	2000      	movs	r0, #0
 800940a:	4770      	bx	lr
 800940c:	2020      	movs	r0, #32
 800940e:	4770      	bx	lr

08009410 <__i2b>:
 8009410:	b510      	push	{r4, lr}
 8009412:	460c      	mov	r4, r1
 8009414:	2101      	movs	r1, #1
 8009416:	f7ff feff 	bl	8009218 <_Balloc>
 800941a:	4602      	mov	r2, r0
 800941c:	b928      	cbnz	r0, 800942a <__i2b+0x1a>
 800941e:	4b05      	ldr	r3, [pc, #20]	; (8009434 <__i2b+0x24>)
 8009420:	4805      	ldr	r0, [pc, #20]	; (8009438 <__i2b+0x28>)
 8009422:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009426:	f000 fda7 	bl	8009f78 <__assert_func>
 800942a:	2301      	movs	r3, #1
 800942c:	6144      	str	r4, [r0, #20]
 800942e:	6103      	str	r3, [r0, #16]
 8009430:	bd10      	pop	{r4, pc}
 8009432:	bf00      	nop
 8009434:	08066107 	.word	0x08066107
 8009438:	08066178 	.word	0x08066178

0800943c <__multiply>:
 800943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009440:	4614      	mov	r4, r2
 8009442:	690a      	ldr	r2, [r1, #16]
 8009444:	6923      	ldr	r3, [r4, #16]
 8009446:	429a      	cmp	r2, r3
 8009448:	bfb8      	it	lt
 800944a:	460b      	movlt	r3, r1
 800944c:	460d      	mov	r5, r1
 800944e:	bfbc      	itt	lt
 8009450:	4625      	movlt	r5, r4
 8009452:	461c      	movlt	r4, r3
 8009454:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009458:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800945c:	68ab      	ldr	r3, [r5, #8]
 800945e:	6869      	ldr	r1, [r5, #4]
 8009460:	eb0a 0709 	add.w	r7, sl, r9
 8009464:	42bb      	cmp	r3, r7
 8009466:	b085      	sub	sp, #20
 8009468:	bfb8      	it	lt
 800946a:	3101      	addlt	r1, #1
 800946c:	f7ff fed4 	bl	8009218 <_Balloc>
 8009470:	b930      	cbnz	r0, 8009480 <__multiply+0x44>
 8009472:	4602      	mov	r2, r0
 8009474:	4b42      	ldr	r3, [pc, #264]	; (8009580 <__multiply+0x144>)
 8009476:	4843      	ldr	r0, [pc, #268]	; (8009584 <__multiply+0x148>)
 8009478:	f240 115d 	movw	r1, #349	; 0x15d
 800947c:	f000 fd7c 	bl	8009f78 <__assert_func>
 8009480:	f100 0614 	add.w	r6, r0, #20
 8009484:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009488:	4633      	mov	r3, r6
 800948a:	2200      	movs	r2, #0
 800948c:	4543      	cmp	r3, r8
 800948e:	d31e      	bcc.n	80094ce <__multiply+0x92>
 8009490:	f105 0c14 	add.w	ip, r5, #20
 8009494:	f104 0314 	add.w	r3, r4, #20
 8009498:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800949c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80094a0:	9202      	str	r2, [sp, #8]
 80094a2:	ebac 0205 	sub.w	r2, ip, r5
 80094a6:	3a15      	subs	r2, #21
 80094a8:	f022 0203 	bic.w	r2, r2, #3
 80094ac:	3204      	adds	r2, #4
 80094ae:	f105 0115 	add.w	r1, r5, #21
 80094b2:	458c      	cmp	ip, r1
 80094b4:	bf38      	it	cc
 80094b6:	2204      	movcc	r2, #4
 80094b8:	9201      	str	r2, [sp, #4]
 80094ba:	9a02      	ldr	r2, [sp, #8]
 80094bc:	9303      	str	r3, [sp, #12]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d808      	bhi.n	80094d4 <__multiply+0x98>
 80094c2:	2f00      	cmp	r7, #0
 80094c4:	dc55      	bgt.n	8009572 <__multiply+0x136>
 80094c6:	6107      	str	r7, [r0, #16]
 80094c8:	b005      	add	sp, #20
 80094ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ce:	f843 2b04 	str.w	r2, [r3], #4
 80094d2:	e7db      	b.n	800948c <__multiply+0x50>
 80094d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80094d8:	f1ba 0f00 	cmp.w	sl, #0
 80094dc:	d020      	beq.n	8009520 <__multiply+0xe4>
 80094de:	f105 0e14 	add.w	lr, r5, #20
 80094e2:	46b1      	mov	r9, r6
 80094e4:	2200      	movs	r2, #0
 80094e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80094ea:	f8d9 b000 	ldr.w	fp, [r9]
 80094ee:	b2a1      	uxth	r1, r4
 80094f0:	fa1f fb8b 	uxth.w	fp, fp
 80094f4:	fb0a b101 	mla	r1, sl, r1, fp
 80094f8:	4411      	add	r1, r2
 80094fa:	f8d9 2000 	ldr.w	r2, [r9]
 80094fe:	0c24      	lsrs	r4, r4, #16
 8009500:	0c12      	lsrs	r2, r2, #16
 8009502:	fb0a 2404 	mla	r4, sl, r4, r2
 8009506:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800950a:	b289      	uxth	r1, r1
 800950c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009510:	45f4      	cmp	ip, lr
 8009512:	f849 1b04 	str.w	r1, [r9], #4
 8009516:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800951a:	d8e4      	bhi.n	80094e6 <__multiply+0xaa>
 800951c:	9901      	ldr	r1, [sp, #4]
 800951e:	5072      	str	r2, [r6, r1]
 8009520:	9a03      	ldr	r2, [sp, #12]
 8009522:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009526:	3304      	adds	r3, #4
 8009528:	f1b9 0f00 	cmp.w	r9, #0
 800952c:	d01f      	beq.n	800956e <__multiply+0x132>
 800952e:	6834      	ldr	r4, [r6, #0]
 8009530:	f105 0114 	add.w	r1, r5, #20
 8009534:	46b6      	mov	lr, r6
 8009536:	f04f 0a00 	mov.w	sl, #0
 800953a:	880a      	ldrh	r2, [r1, #0]
 800953c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009540:	fb09 b202 	mla	r2, r9, r2, fp
 8009544:	4492      	add	sl, r2
 8009546:	b2a4      	uxth	r4, r4
 8009548:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800954c:	f84e 4b04 	str.w	r4, [lr], #4
 8009550:	f851 4b04 	ldr.w	r4, [r1], #4
 8009554:	f8be 2000 	ldrh.w	r2, [lr]
 8009558:	0c24      	lsrs	r4, r4, #16
 800955a:	fb09 2404 	mla	r4, r9, r4, r2
 800955e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009562:	458c      	cmp	ip, r1
 8009564:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009568:	d8e7      	bhi.n	800953a <__multiply+0xfe>
 800956a:	9a01      	ldr	r2, [sp, #4]
 800956c:	50b4      	str	r4, [r6, r2]
 800956e:	3604      	adds	r6, #4
 8009570:	e7a3      	b.n	80094ba <__multiply+0x7e>
 8009572:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1a5      	bne.n	80094c6 <__multiply+0x8a>
 800957a:	3f01      	subs	r7, #1
 800957c:	e7a1      	b.n	80094c2 <__multiply+0x86>
 800957e:	bf00      	nop
 8009580:	08066107 	.word	0x08066107
 8009584:	08066178 	.word	0x08066178

08009588 <__pow5mult>:
 8009588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800958c:	4615      	mov	r5, r2
 800958e:	f012 0203 	ands.w	r2, r2, #3
 8009592:	4606      	mov	r6, r0
 8009594:	460f      	mov	r7, r1
 8009596:	d007      	beq.n	80095a8 <__pow5mult+0x20>
 8009598:	4c25      	ldr	r4, [pc, #148]	; (8009630 <__pow5mult+0xa8>)
 800959a:	3a01      	subs	r2, #1
 800959c:	2300      	movs	r3, #0
 800959e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095a2:	f7ff fe9b 	bl	80092dc <__multadd>
 80095a6:	4607      	mov	r7, r0
 80095a8:	10ad      	asrs	r5, r5, #2
 80095aa:	d03d      	beq.n	8009628 <__pow5mult+0xa0>
 80095ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80095ae:	b97c      	cbnz	r4, 80095d0 <__pow5mult+0x48>
 80095b0:	2010      	movs	r0, #16
 80095b2:	f7fd feb9 	bl	8007328 <malloc>
 80095b6:	4602      	mov	r2, r0
 80095b8:	6270      	str	r0, [r6, #36]	; 0x24
 80095ba:	b928      	cbnz	r0, 80095c8 <__pow5mult+0x40>
 80095bc:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <__pow5mult+0xac>)
 80095be:	481e      	ldr	r0, [pc, #120]	; (8009638 <__pow5mult+0xb0>)
 80095c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80095c4:	f000 fcd8 	bl	8009f78 <__assert_func>
 80095c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095cc:	6004      	str	r4, [r0, #0]
 80095ce:	60c4      	str	r4, [r0, #12]
 80095d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095d8:	b94c      	cbnz	r4, 80095ee <__pow5mult+0x66>
 80095da:	f240 2171 	movw	r1, #625	; 0x271
 80095de:	4630      	mov	r0, r6
 80095e0:	f7ff ff16 	bl	8009410 <__i2b>
 80095e4:	2300      	movs	r3, #0
 80095e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80095ea:	4604      	mov	r4, r0
 80095ec:	6003      	str	r3, [r0, #0]
 80095ee:	f04f 0900 	mov.w	r9, #0
 80095f2:	07eb      	lsls	r3, r5, #31
 80095f4:	d50a      	bpl.n	800960c <__pow5mult+0x84>
 80095f6:	4639      	mov	r1, r7
 80095f8:	4622      	mov	r2, r4
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7ff ff1e 	bl	800943c <__multiply>
 8009600:	4639      	mov	r1, r7
 8009602:	4680      	mov	r8, r0
 8009604:	4630      	mov	r0, r6
 8009606:	f7ff fe47 	bl	8009298 <_Bfree>
 800960a:	4647      	mov	r7, r8
 800960c:	106d      	asrs	r5, r5, #1
 800960e:	d00b      	beq.n	8009628 <__pow5mult+0xa0>
 8009610:	6820      	ldr	r0, [r4, #0]
 8009612:	b938      	cbnz	r0, 8009624 <__pow5mult+0x9c>
 8009614:	4622      	mov	r2, r4
 8009616:	4621      	mov	r1, r4
 8009618:	4630      	mov	r0, r6
 800961a:	f7ff ff0f 	bl	800943c <__multiply>
 800961e:	6020      	str	r0, [r4, #0]
 8009620:	f8c0 9000 	str.w	r9, [r0]
 8009624:	4604      	mov	r4, r0
 8009626:	e7e4      	b.n	80095f2 <__pow5mult+0x6a>
 8009628:	4638      	mov	r0, r7
 800962a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800962e:	bf00      	nop
 8009630:	080662c8 	.word	0x080662c8
 8009634:	08066091 	.word	0x08066091
 8009638:	08066178 	.word	0x08066178

0800963c <__lshift>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	460c      	mov	r4, r1
 8009642:	6849      	ldr	r1, [r1, #4]
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800964a:	68a3      	ldr	r3, [r4, #8]
 800964c:	4607      	mov	r7, r0
 800964e:	4691      	mov	r9, r2
 8009650:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009654:	f108 0601 	add.w	r6, r8, #1
 8009658:	42b3      	cmp	r3, r6
 800965a:	db0b      	blt.n	8009674 <__lshift+0x38>
 800965c:	4638      	mov	r0, r7
 800965e:	f7ff fddb 	bl	8009218 <_Balloc>
 8009662:	4605      	mov	r5, r0
 8009664:	b948      	cbnz	r0, 800967a <__lshift+0x3e>
 8009666:	4602      	mov	r2, r0
 8009668:	4b28      	ldr	r3, [pc, #160]	; (800970c <__lshift+0xd0>)
 800966a:	4829      	ldr	r0, [pc, #164]	; (8009710 <__lshift+0xd4>)
 800966c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009670:	f000 fc82 	bl	8009f78 <__assert_func>
 8009674:	3101      	adds	r1, #1
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	e7ee      	b.n	8009658 <__lshift+0x1c>
 800967a:	2300      	movs	r3, #0
 800967c:	f100 0114 	add.w	r1, r0, #20
 8009680:	f100 0210 	add.w	r2, r0, #16
 8009684:	4618      	mov	r0, r3
 8009686:	4553      	cmp	r3, sl
 8009688:	db33      	blt.n	80096f2 <__lshift+0xb6>
 800968a:	6920      	ldr	r0, [r4, #16]
 800968c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009690:	f104 0314 	add.w	r3, r4, #20
 8009694:	f019 091f 	ands.w	r9, r9, #31
 8009698:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800969c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096a0:	d02b      	beq.n	80096fa <__lshift+0xbe>
 80096a2:	f1c9 0e20 	rsb	lr, r9, #32
 80096a6:	468a      	mov	sl, r1
 80096a8:	2200      	movs	r2, #0
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	fa00 f009 	lsl.w	r0, r0, r9
 80096b0:	4302      	orrs	r2, r0
 80096b2:	f84a 2b04 	str.w	r2, [sl], #4
 80096b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ba:	459c      	cmp	ip, r3
 80096bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80096c0:	d8f3      	bhi.n	80096aa <__lshift+0x6e>
 80096c2:	ebac 0304 	sub.w	r3, ip, r4
 80096c6:	3b15      	subs	r3, #21
 80096c8:	f023 0303 	bic.w	r3, r3, #3
 80096cc:	3304      	adds	r3, #4
 80096ce:	f104 0015 	add.w	r0, r4, #21
 80096d2:	4584      	cmp	ip, r0
 80096d4:	bf38      	it	cc
 80096d6:	2304      	movcc	r3, #4
 80096d8:	50ca      	str	r2, [r1, r3]
 80096da:	b10a      	cbz	r2, 80096e0 <__lshift+0xa4>
 80096dc:	f108 0602 	add.w	r6, r8, #2
 80096e0:	3e01      	subs	r6, #1
 80096e2:	4638      	mov	r0, r7
 80096e4:	612e      	str	r6, [r5, #16]
 80096e6:	4621      	mov	r1, r4
 80096e8:	f7ff fdd6 	bl	8009298 <_Bfree>
 80096ec:	4628      	mov	r0, r5
 80096ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80096f6:	3301      	adds	r3, #1
 80096f8:	e7c5      	b.n	8009686 <__lshift+0x4a>
 80096fa:	3904      	subs	r1, #4
 80096fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009700:	f841 2f04 	str.w	r2, [r1, #4]!
 8009704:	459c      	cmp	ip, r3
 8009706:	d8f9      	bhi.n	80096fc <__lshift+0xc0>
 8009708:	e7ea      	b.n	80096e0 <__lshift+0xa4>
 800970a:	bf00      	nop
 800970c:	08066107 	.word	0x08066107
 8009710:	08066178 	.word	0x08066178

08009714 <__mcmp>:
 8009714:	b530      	push	{r4, r5, lr}
 8009716:	6902      	ldr	r2, [r0, #16]
 8009718:	690c      	ldr	r4, [r1, #16]
 800971a:	1b12      	subs	r2, r2, r4
 800971c:	d10e      	bne.n	800973c <__mcmp+0x28>
 800971e:	f100 0314 	add.w	r3, r0, #20
 8009722:	3114      	adds	r1, #20
 8009724:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009728:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800972c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009730:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009734:	42a5      	cmp	r5, r4
 8009736:	d003      	beq.n	8009740 <__mcmp+0x2c>
 8009738:	d305      	bcc.n	8009746 <__mcmp+0x32>
 800973a:	2201      	movs	r2, #1
 800973c:	4610      	mov	r0, r2
 800973e:	bd30      	pop	{r4, r5, pc}
 8009740:	4283      	cmp	r3, r0
 8009742:	d3f3      	bcc.n	800972c <__mcmp+0x18>
 8009744:	e7fa      	b.n	800973c <__mcmp+0x28>
 8009746:	f04f 32ff 	mov.w	r2, #4294967295
 800974a:	e7f7      	b.n	800973c <__mcmp+0x28>

0800974c <__mdiff>:
 800974c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	460c      	mov	r4, r1
 8009752:	4606      	mov	r6, r0
 8009754:	4611      	mov	r1, r2
 8009756:	4620      	mov	r0, r4
 8009758:	4617      	mov	r7, r2
 800975a:	f7ff ffdb 	bl	8009714 <__mcmp>
 800975e:	1e05      	subs	r5, r0, #0
 8009760:	d110      	bne.n	8009784 <__mdiff+0x38>
 8009762:	4629      	mov	r1, r5
 8009764:	4630      	mov	r0, r6
 8009766:	f7ff fd57 	bl	8009218 <_Balloc>
 800976a:	b930      	cbnz	r0, 800977a <__mdiff+0x2e>
 800976c:	4b39      	ldr	r3, [pc, #228]	; (8009854 <__mdiff+0x108>)
 800976e:	4602      	mov	r2, r0
 8009770:	f240 2132 	movw	r1, #562	; 0x232
 8009774:	4838      	ldr	r0, [pc, #224]	; (8009858 <__mdiff+0x10c>)
 8009776:	f000 fbff 	bl	8009f78 <__assert_func>
 800977a:	2301      	movs	r3, #1
 800977c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009784:	bfa4      	itt	ge
 8009786:	463b      	movge	r3, r7
 8009788:	4627      	movge	r7, r4
 800978a:	4630      	mov	r0, r6
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	bfa6      	itte	ge
 8009790:	461c      	movge	r4, r3
 8009792:	2500      	movge	r5, #0
 8009794:	2501      	movlt	r5, #1
 8009796:	f7ff fd3f 	bl	8009218 <_Balloc>
 800979a:	b920      	cbnz	r0, 80097a6 <__mdiff+0x5a>
 800979c:	4b2d      	ldr	r3, [pc, #180]	; (8009854 <__mdiff+0x108>)
 800979e:	4602      	mov	r2, r0
 80097a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80097a4:	e7e6      	b.n	8009774 <__mdiff+0x28>
 80097a6:	693e      	ldr	r6, [r7, #16]
 80097a8:	60c5      	str	r5, [r0, #12]
 80097aa:	6925      	ldr	r5, [r4, #16]
 80097ac:	f107 0114 	add.w	r1, r7, #20
 80097b0:	f104 0914 	add.w	r9, r4, #20
 80097b4:	f100 0e14 	add.w	lr, r0, #20
 80097b8:	f107 0210 	add.w	r2, r7, #16
 80097bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80097c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80097c4:	46f2      	mov	sl, lr
 80097c6:	2700      	movs	r7, #0
 80097c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80097cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80097d0:	fa1f f883 	uxth.w	r8, r3
 80097d4:	fa17 f78b 	uxtah	r7, r7, fp
 80097d8:	0c1b      	lsrs	r3, r3, #16
 80097da:	eba7 0808 	sub.w	r8, r7, r8
 80097de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097e6:	fa1f f888 	uxth.w	r8, r8
 80097ea:	141f      	asrs	r7, r3, #16
 80097ec:	454d      	cmp	r5, r9
 80097ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097f2:	f84a 3b04 	str.w	r3, [sl], #4
 80097f6:	d8e7      	bhi.n	80097c8 <__mdiff+0x7c>
 80097f8:	1b2b      	subs	r3, r5, r4
 80097fa:	3b15      	subs	r3, #21
 80097fc:	f023 0303 	bic.w	r3, r3, #3
 8009800:	3304      	adds	r3, #4
 8009802:	3415      	adds	r4, #21
 8009804:	42a5      	cmp	r5, r4
 8009806:	bf38      	it	cc
 8009808:	2304      	movcc	r3, #4
 800980a:	4419      	add	r1, r3
 800980c:	4473      	add	r3, lr
 800980e:	469e      	mov	lr, r3
 8009810:	460d      	mov	r5, r1
 8009812:	4565      	cmp	r5, ip
 8009814:	d30e      	bcc.n	8009834 <__mdiff+0xe8>
 8009816:	f10c 0203 	add.w	r2, ip, #3
 800981a:	1a52      	subs	r2, r2, r1
 800981c:	f022 0203 	bic.w	r2, r2, #3
 8009820:	3903      	subs	r1, #3
 8009822:	458c      	cmp	ip, r1
 8009824:	bf38      	it	cc
 8009826:	2200      	movcc	r2, #0
 8009828:	441a      	add	r2, r3
 800982a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800982e:	b17b      	cbz	r3, 8009850 <__mdiff+0x104>
 8009830:	6106      	str	r6, [r0, #16]
 8009832:	e7a5      	b.n	8009780 <__mdiff+0x34>
 8009834:	f855 8b04 	ldr.w	r8, [r5], #4
 8009838:	fa17 f488 	uxtah	r4, r7, r8
 800983c:	1422      	asrs	r2, r4, #16
 800983e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009842:	b2a4      	uxth	r4, r4
 8009844:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009848:	f84e 4b04 	str.w	r4, [lr], #4
 800984c:	1417      	asrs	r7, r2, #16
 800984e:	e7e0      	b.n	8009812 <__mdiff+0xc6>
 8009850:	3e01      	subs	r6, #1
 8009852:	e7ea      	b.n	800982a <__mdiff+0xde>
 8009854:	08066107 	.word	0x08066107
 8009858:	08066178 	.word	0x08066178

0800985c <__d2b>:
 800985c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009860:	4689      	mov	r9, r1
 8009862:	2101      	movs	r1, #1
 8009864:	ec57 6b10 	vmov	r6, r7, d0
 8009868:	4690      	mov	r8, r2
 800986a:	f7ff fcd5 	bl	8009218 <_Balloc>
 800986e:	4604      	mov	r4, r0
 8009870:	b930      	cbnz	r0, 8009880 <__d2b+0x24>
 8009872:	4602      	mov	r2, r0
 8009874:	4b25      	ldr	r3, [pc, #148]	; (800990c <__d2b+0xb0>)
 8009876:	4826      	ldr	r0, [pc, #152]	; (8009910 <__d2b+0xb4>)
 8009878:	f240 310a 	movw	r1, #778	; 0x30a
 800987c:	f000 fb7c 	bl	8009f78 <__assert_func>
 8009880:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009884:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009888:	bb35      	cbnz	r5, 80098d8 <__d2b+0x7c>
 800988a:	2e00      	cmp	r6, #0
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	d028      	beq.n	80098e2 <__d2b+0x86>
 8009890:	4668      	mov	r0, sp
 8009892:	9600      	str	r6, [sp, #0]
 8009894:	f7ff fd8c 	bl	80093b0 <__lo0bits>
 8009898:	9900      	ldr	r1, [sp, #0]
 800989a:	b300      	cbz	r0, 80098de <__d2b+0x82>
 800989c:	9a01      	ldr	r2, [sp, #4]
 800989e:	f1c0 0320 	rsb	r3, r0, #32
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
 80098a6:	430b      	orrs	r3, r1
 80098a8:	40c2      	lsrs	r2, r0
 80098aa:	6163      	str	r3, [r4, #20]
 80098ac:	9201      	str	r2, [sp, #4]
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	61a3      	str	r3, [r4, #24]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	bf14      	ite	ne
 80098b6:	2202      	movne	r2, #2
 80098b8:	2201      	moveq	r2, #1
 80098ba:	6122      	str	r2, [r4, #16]
 80098bc:	b1d5      	cbz	r5, 80098f4 <__d2b+0x98>
 80098be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098c2:	4405      	add	r5, r0
 80098c4:	f8c9 5000 	str.w	r5, [r9]
 80098c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098cc:	f8c8 0000 	str.w	r0, [r8]
 80098d0:	4620      	mov	r0, r4
 80098d2:	b003      	add	sp, #12
 80098d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098dc:	e7d5      	b.n	800988a <__d2b+0x2e>
 80098de:	6161      	str	r1, [r4, #20]
 80098e0:	e7e5      	b.n	80098ae <__d2b+0x52>
 80098e2:	a801      	add	r0, sp, #4
 80098e4:	f7ff fd64 	bl	80093b0 <__lo0bits>
 80098e8:	9b01      	ldr	r3, [sp, #4]
 80098ea:	6163      	str	r3, [r4, #20]
 80098ec:	2201      	movs	r2, #1
 80098ee:	6122      	str	r2, [r4, #16]
 80098f0:	3020      	adds	r0, #32
 80098f2:	e7e3      	b.n	80098bc <__d2b+0x60>
 80098f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098fc:	f8c9 0000 	str.w	r0, [r9]
 8009900:	6918      	ldr	r0, [r3, #16]
 8009902:	f7ff fd35 	bl	8009370 <__hi0bits>
 8009906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800990a:	e7df      	b.n	80098cc <__d2b+0x70>
 800990c:	08066107 	.word	0x08066107
 8009910:	08066178 	.word	0x08066178

08009914 <_realloc_r>:
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	4607      	mov	r7, r0
 8009918:	4614      	mov	r4, r2
 800991a:	460e      	mov	r6, r1
 800991c:	b921      	cbnz	r1, 8009928 <_realloc_r+0x14>
 800991e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009922:	4611      	mov	r1, r2
 8009924:	f7fd bd86 	b.w	8007434 <_malloc_r>
 8009928:	b922      	cbnz	r2, 8009934 <_realloc_r+0x20>
 800992a:	f7fd fd33 	bl	8007394 <_free_r>
 800992e:	4625      	mov	r5, r4
 8009930:	4628      	mov	r0, r5
 8009932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009934:	f000 fbc0 	bl	800a0b8 <_malloc_usable_size_r>
 8009938:	42a0      	cmp	r0, r4
 800993a:	d20f      	bcs.n	800995c <_realloc_r+0x48>
 800993c:	4621      	mov	r1, r4
 800993e:	4638      	mov	r0, r7
 8009940:	f7fd fd78 	bl	8007434 <_malloc_r>
 8009944:	4605      	mov	r5, r0
 8009946:	2800      	cmp	r0, #0
 8009948:	d0f2      	beq.n	8009930 <_realloc_r+0x1c>
 800994a:	4631      	mov	r1, r6
 800994c:	4622      	mov	r2, r4
 800994e:	f7fd fcfb 	bl	8007348 <memcpy>
 8009952:	4631      	mov	r1, r6
 8009954:	4638      	mov	r0, r7
 8009956:	f7fd fd1d 	bl	8007394 <_free_r>
 800995a:	e7e9      	b.n	8009930 <_realloc_r+0x1c>
 800995c:	4635      	mov	r5, r6
 800995e:	e7e7      	b.n	8009930 <_realloc_r+0x1c>

08009960 <__ssputs_r>:
 8009960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009964:	688e      	ldr	r6, [r1, #8]
 8009966:	429e      	cmp	r6, r3
 8009968:	4682      	mov	sl, r0
 800996a:	460c      	mov	r4, r1
 800996c:	4690      	mov	r8, r2
 800996e:	461f      	mov	r7, r3
 8009970:	d838      	bhi.n	80099e4 <__ssputs_r+0x84>
 8009972:	898a      	ldrh	r2, [r1, #12]
 8009974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009978:	d032      	beq.n	80099e0 <__ssputs_r+0x80>
 800997a:	6825      	ldr	r5, [r4, #0]
 800997c:	6909      	ldr	r1, [r1, #16]
 800997e:	eba5 0901 	sub.w	r9, r5, r1
 8009982:	6965      	ldr	r5, [r4, #20]
 8009984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800998c:	3301      	adds	r3, #1
 800998e:	444b      	add	r3, r9
 8009990:	106d      	asrs	r5, r5, #1
 8009992:	429d      	cmp	r5, r3
 8009994:	bf38      	it	cc
 8009996:	461d      	movcc	r5, r3
 8009998:	0553      	lsls	r3, r2, #21
 800999a:	d531      	bpl.n	8009a00 <__ssputs_r+0xa0>
 800999c:	4629      	mov	r1, r5
 800999e:	f7fd fd49 	bl	8007434 <_malloc_r>
 80099a2:	4606      	mov	r6, r0
 80099a4:	b950      	cbnz	r0, 80099bc <__ssputs_r+0x5c>
 80099a6:	230c      	movs	r3, #12
 80099a8:	f8ca 3000 	str.w	r3, [sl]
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b2:	81a3      	strh	r3, [r4, #12]
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099bc:	6921      	ldr	r1, [r4, #16]
 80099be:	464a      	mov	r2, r9
 80099c0:	f7fd fcc2 	bl	8007348 <memcpy>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	6126      	str	r6, [r4, #16]
 80099d2:	6165      	str	r5, [r4, #20]
 80099d4:	444e      	add	r6, r9
 80099d6:	eba5 0509 	sub.w	r5, r5, r9
 80099da:	6026      	str	r6, [r4, #0]
 80099dc:	60a5      	str	r5, [r4, #8]
 80099de:	463e      	mov	r6, r7
 80099e0:	42be      	cmp	r6, r7
 80099e2:	d900      	bls.n	80099e6 <__ssputs_r+0x86>
 80099e4:	463e      	mov	r6, r7
 80099e6:	4632      	mov	r2, r6
 80099e8:	6820      	ldr	r0, [r4, #0]
 80099ea:	4641      	mov	r1, r8
 80099ec:	f000 fb4a 	bl	800a084 <memmove>
 80099f0:	68a3      	ldr	r3, [r4, #8]
 80099f2:	6822      	ldr	r2, [r4, #0]
 80099f4:	1b9b      	subs	r3, r3, r6
 80099f6:	4432      	add	r2, r6
 80099f8:	60a3      	str	r3, [r4, #8]
 80099fa:	6022      	str	r2, [r4, #0]
 80099fc:	2000      	movs	r0, #0
 80099fe:	e7db      	b.n	80099b8 <__ssputs_r+0x58>
 8009a00:	462a      	mov	r2, r5
 8009a02:	f7ff ff87 	bl	8009914 <_realloc_r>
 8009a06:	4606      	mov	r6, r0
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d1e1      	bne.n	80099d0 <__ssputs_r+0x70>
 8009a0c:	6921      	ldr	r1, [r4, #16]
 8009a0e:	4650      	mov	r0, sl
 8009a10:	f7fd fcc0 	bl	8007394 <_free_r>
 8009a14:	e7c7      	b.n	80099a6 <__ssputs_r+0x46>
	...

08009a18 <_svfiprintf_r>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	4698      	mov	r8, r3
 8009a1e:	898b      	ldrh	r3, [r1, #12]
 8009a20:	061b      	lsls	r3, r3, #24
 8009a22:	b09d      	sub	sp, #116	; 0x74
 8009a24:	4607      	mov	r7, r0
 8009a26:	460d      	mov	r5, r1
 8009a28:	4614      	mov	r4, r2
 8009a2a:	d50e      	bpl.n	8009a4a <_svfiprintf_r+0x32>
 8009a2c:	690b      	ldr	r3, [r1, #16]
 8009a2e:	b963      	cbnz	r3, 8009a4a <_svfiprintf_r+0x32>
 8009a30:	2140      	movs	r1, #64	; 0x40
 8009a32:	f7fd fcff 	bl	8007434 <_malloc_r>
 8009a36:	6028      	str	r0, [r5, #0]
 8009a38:	6128      	str	r0, [r5, #16]
 8009a3a:	b920      	cbnz	r0, 8009a46 <_svfiprintf_r+0x2e>
 8009a3c:	230c      	movs	r3, #12
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	f04f 30ff 	mov.w	r0, #4294967295
 8009a44:	e0d1      	b.n	8009bea <_svfiprintf_r+0x1d2>
 8009a46:	2340      	movs	r3, #64	; 0x40
 8009a48:	616b      	str	r3, [r5, #20]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a4e:	2320      	movs	r3, #32
 8009a50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a58:	2330      	movs	r3, #48	; 0x30
 8009a5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c04 <_svfiprintf_r+0x1ec>
 8009a5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a62:	f04f 0901 	mov.w	r9, #1
 8009a66:	4623      	mov	r3, r4
 8009a68:	469a      	mov	sl, r3
 8009a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a6e:	b10a      	cbz	r2, 8009a74 <_svfiprintf_r+0x5c>
 8009a70:	2a25      	cmp	r2, #37	; 0x25
 8009a72:	d1f9      	bne.n	8009a68 <_svfiprintf_r+0x50>
 8009a74:	ebba 0b04 	subs.w	fp, sl, r4
 8009a78:	d00b      	beq.n	8009a92 <_svfiprintf_r+0x7a>
 8009a7a:	465b      	mov	r3, fp
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4638      	mov	r0, r7
 8009a82:	f7ff ff6d 	bl	8009960 <__ssputs_r>
 8009a86:	3001      	adds	r0, #1
 8009a88:	f000 80aa 	beq.w	8009be0 <_svfiprintf_r+0x1c8>
 8009a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a8e:	445a      	add	r2, fp
 8009a90:	9209      	str	r2, [sp, #36]	; 0x24
 8009a92:	f89a 3000 	ldrb.w	r3, [sl]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 80a2 	beq.w	8009be0 <_svfiprintf_r+0x1c8>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa6:	f10a 0a01 	add.w	sl, sl, #1
 8009aaa:	9304      	str	r3, [sp, #16]
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ab4:	4654      	mov	r4, sl
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abc:	4851      	ldr	r0, [pc, #324]	; (8009c04 <_svfiprintf_r+0x1ec>)
 8009abe:	f7f6 fb97 	bl	80001f0 <memchr>
 8009ac2:	9a04      	ldr	r2, [sp, #16]
 8009ac4:	b9d8      	cbnz	r0, 8009afe <_svfiprintf_r+0xe6>
 8009ac6:	06d0      	lsls	r0, r2, #27
 8009ac8:	bf44      	itt	mi
 8009aca:	2320      	movmi	r3, #32
 8009acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad0:	0711      	lsls	r1, r2, #28
 8009ad2:	bf44      	itt	mi
 8009ad4:	232b      	movmi	r3, #43	; 0x2b
 8009ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ada:	f89a 3000 	ldrb.w	r3, [sl]
 8009ade:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae0:	d015      	beq.n	8009b0e <_svfiprintf_r+0xf6>
 8009ae2:	9a07      	ldr	r2, [sp, #28]
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	f04f 0c0a 	mov.w	ip, #10
 8009aec:	4621      	mov	r1, r4
 8009aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009af2:	3b30      	subs	r3, #48	; 0x30
 8009af4:	2b09      	cmp	r3, #9
 8009af6:	d94e      	bls.n	8009b96 <_svfiprintf_r+0x17e>
 8009af8:	b1b0      	cbz	r0, 8009b28 <_svfiprintf_r+0x110>
 8009afa:	9207      	str	r2, [sp, #28]
 8009afc:	e014      	b.n	8009b28 <_svfiprintf_r+0x110>
 8009afe:	eba0 0308 	sub.w	r3, r0, r8
 8009b02:	fa09 f303 	lsl.w	r3, r9, r3
 8009b06:	4313      	orrs	r3, r2
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	46a2      	mov	sl, r4
 8009b0c:	e7d2      	b.n	8009ab4 <_svfiprintf_r+0x9c>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	1d19      	adds	r1, r3, #4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	9103      	str	r1, [sp, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfbb      	ittet	lt
 8009b1a:	425b      	neglt	r3, r3
 8009b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b20:	9307      	strge	r3, [sp, #28]
 8009b22:	9307      	strlt	r3, [sp, #28]
 8009b24:	bfb8      	it	lt
 8009b26:	9204      	strlt	r2, [sp, #16]
 8009b28:	7823      	ldrb	r3, [r4, #0]
 8009b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b2c:	d10c      	bne.n	8009b48 <_svfiprintf_r+0x130>
 8009b2e:	7863      	ldrb	r3, [r4, #1]
 8009b30:	2b2a      	cmp	r3, #42	; 0x2a
 8009b32:	d135      	bne.n	8009ba0 <_svfiprintf_r+0x188>
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	1d1a      	adds	r2, r3, #4
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	9203      	str	r2, [sp, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	bfb8      	it	lt
 8009b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b44:	3402      	adds	r4, #2
 8009b46:	9305      	str	r3, [sp, #20]
 8009b48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c14 <_svfiprintf_r+0x1fc>
 8009b4c:	7821      	ldrb	r1, [r4, #0]
 8009b4e:	2203      	movs	r2, #3
 8009b50:	4650      	mov	r0, sl
 8009b52:	f7f6 fb4d 	bl	80001f0 <memchr>
 8009b56:	b140      	cbz	r0, 8009b6a <_svfiprintf_r+0x152>
 8009b58:	2340      	movs	r3, #64	; 0x40
 8009b5a:	eba0 000a 	sub.w	r0, r0, sl
 8009b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009b62:	9b04      	ldr	r3, [sp, #16]
 8009b64:	4303      	orrs	r3, r0
 8009b66:	3401      	adds	r4, #1
 8009b68:	9304      	str	r3, [sp, #16]
 8009b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b6e:	4826      	ldr	r0, [pc, #152]	; (8009c08 <_svfiprintf_r+0x1f0>)
 8009b70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b74:	2206      	movs	r2, #6
 8009b76:	f7f6 fb3b 	bl	80001f0 <memchr>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d038      	beq.n	8009bf0 <_svfiprintf_r+0x1d8>
 8009b7e:	4b23      	ldr	r3, [pc, #140]	; (8009c0c <_svfiprintf_r+0x1f4>)
 8009b80:	bb1b      	cbnz	r3, 8009bca <_svfiprintf_r+0x1b2>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	3307      	adds	r3, #7
 8009b86:	f023 0307 	bic.w	r3, r3, #7
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	9303      	str	r3, [sp, #12]
 8009b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b90:	4433      	add	r3, r6
 8009b92:	9309      	str	r3, [sp, #36]	; 0x24
 8009b94:	e767      	b.n	8009a66 <_svfiprintf_r+0x4e>
 8009b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	2001      	movs	r0, #1
 8009b9e:	e7a5      	b.n	8009aec <_svfiprintf_r+0xd4>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	3401      	adds	r4, #1
 8009ba4:	9305      	str	r3, [sp, #20]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	f04f 0c0a 	mov.w	ip, #10
 8009bac:	4620      	mov	r0, r4
 8009bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bb2:	3a30      	subs	r2, #48	; 0x30
 8009bb4:	2a09      	cmp	r2, #9
 8009bb6:	d903      	bls.n	8009bc0 <_svfiprintf_r+0x1a8>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0c5      	beq.n	8009b48 <_svfiprintf_r+0x130>
 8009bbc:	9105      	str	r1, [sp, #20]
 8009bbe:	e7c3      	b.n	8009b48 <_svfiprintf_r+0x130>
 8009bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e7f0      	b.n	8009bac <_svfiprintf_r+0x194>
 8009bca:	ab03      	add	r3, sp, #12
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	462a      	mov	r2, r5
 8009bd0:	4b0f      	ldr	r3, [pc, #60]	; (8009c10 <_svfiprintf_r+0x1f8>)
 8009bd2:	a904      	add	r1, sp, #16
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f7fd fd27 	bl	8007628 <_printf_float>
 8009bda:	1c42      	adds	r2, r0, #1
 8009bdc:	4606      	mov	r6, r0
 8009bde:	d1d6      	bne.n	8009b8e <_svfiprintf_r+0x176>
 8009be0:	89ab      	ldrh	r3, [r5, #12]
 8009be2:	065b      	lsls	r3, r3, #25
 8009be4:	f53f af2c 	bmi.w	8009a40 <_svfiprintf_r+0x28>
 8009be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bea:	b01d      	add	sp, #116	; 0x74
 8009bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf0:	ab03      	add	r3, sp, #12
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	462a      	mov	r2, r5
 8009bf6:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <_svfiprintf_r+0x1f8>)
 8009bf8:	a904      	add	r1, sp, #16
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f7fd ffb8 	bl	8007b70 <_printf_i>
 8009c00:	e7eb      	b.n	8009bda <_svfiprintf_r+0x1c2>
 8009c02:	bf00      	nop
 8009c04:	080662d4 	.word	0x080662d4
 8009c08:	080662de 	.word	0x080662de
 8009c0c:	08007629 	.word	0x08007629
 8009c10:	08009961 	.word	0x08009961
 8009c14:	080662da 	.word	0x080662da

08009c18 <__sfputc_r>:
 8009c18:	6893      	ldr	r3, [r2, #8]
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	b410      	push	{r4}
 8009c20:	6093      	str	r3, [r2, #8]
 8009c22:	da08      	bge.n	8009c36 <__sfputc_r+0x1e>
 8009c24:	6994      	ldr	r4, [r2, #24]
 8009c26:	42a3      	cmp	r3, r4
 8009c28:	db01      	blt.n	8009c2e <__sfputc_r+0x16>
 8009c2a:	290a      	cmp	r1, #10
 8009c2c:	d103      	bne.n	8009c36 <__sfputc_r+0x1e>
 8009c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c32:	f7fe b989 	b.w	8007f48 <__swbuf_r>
 8009c36:	6813      	ldr	r3, [r2, #0]
 8009c38:	1c58      	adds	r0, r3, #1
 8009c3a:	6010      	str	r0, [r2, #0]
 8009c3c:	7019      	strb	r1, [r3, #0]
 8009c3e:	4608      	mov	r0, r1
 8009c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <__sfputs_r>:
 8009c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c48:	4606      	mov	r6, r0
 8009c4a:	460f      	mov	r7, r1
 8009c4c:	4614      	mov	r4, r2
 8009c4e:	18d5      	adds	r5, r2, r3
 8009c50:	42ac      	cmp	r4, r5
 8009c52:	d101      	bne.n	8009c58 <__sfputs_r+0x12>
 8009c54:	2000      	movs	r0, #0
 8009c56:	e007      	b.n	8009c68 <__sfputs_r+0x22>
 8009c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c5c:	463a      	mov	r2, r7
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f7ff ffda 	bl	8009c18 <__sfputc_r>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d1f3      	bne.n	8009c50 <__sfputs_r+0xa>
 8009c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c6c <_vfiprintf_r>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	460d      	mov	r5, r1
 8009c72:	b09d      	sub	sp, #116	; 0x74
 8009c74:	4614      	mov	r4, r2
 8009c76:	4698      	mov	r8, r3
 8009c78:	4606      	mov	r6, r0
 8009c7a:	b118      	cbz	r0, 8009c84 <_vfiprintf_r+0x18>
 8009c7c:	6983      	ldr	r3, [r0, #24]
 8009c7e:	b90b      	cbnz	r3, 8009c84 <_vfiprintf_r+0x18>
 8009c80:	f7ff f9b4 	bl	8008fec <__sinit>
 8009c84:	4b89      	ldr	r3, [pc, #548]	; (8009eac <_vfiprintf_r+0x240>)
 8009c86:	429d      	cmp	r5, r3
 8009c88:	d11b      	bne.n	8009cc2 <_vfiprintf_r+0x56>
 8009c8a:	6875      	ldr	r5, [r6, #4]
 8009c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c8e:	07d9      	lsls	r1, r3, #31
 8009c90:	d405      	bmi.n	8009c9e <_vfiprintf_r+0x32>
 8009c92:	89ab      	ldrh	r3, [r5, #12]
 8009c94:	059a      	lsls	r2, r3, #22
 8009c96:	d402      	bmi.n	8009c9e <_vfiprintf_r+0x32>
 8009c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c9a:	f7ff fa4a 	bl	8009132 <__retarget_lock_acquire_recursive>
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	071b      	lsls	r3, r3, #28
 8009ca2:	d501      	bpl.n	8009ca8 <_vfiprintf_r+0x3c>
 8009ca4:	692b      	ldr	r3, [r5, #16]
 8009ca6:	b9eb      	cbnz	r3, 8009ce4 <_vfiprintf_r+0x78>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7fe f99e 	bl	8007fec <__swsetup_r>
 8009cb0:	b1c0      	cbz	r0, 8009ce4 <_vfiprintf_r+0x78>
 8009cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cb4:	07dc      	lsls	r4, r3, #31
 8009cb6:	d50e      	bpl.n	8009cd6 <_vfiprintf_r+0x6a>
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbc:	b01d      	add	sp, #116	; 0x74
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	4b7b      	ldr	r3, [pc, #492]	; (8009eb0 <_vfiprintf_r+0x244>)
 8009cc4:	429d      	cmp	r5, r3
 8009cc6:	d101      	bne.n	8009ccc <_vfiprintf_r+0x60>
 8009cc8:	68b5      	ldr	r5, [r6, #8]
 8009cca:	e7df      	b.n	8009c8c <_vfiprintf_r+0x20>
 8009ccc:	4b79      	ldr	r3, [pc, #484]	; (8009eb4 <_vfiprintf_r+0x248>)
 8009cce:	429d      	cmp	r5, r3
 8009cd0:	bf08      	it	eq
 8009cd2:	68f5      	ldreq	r5, [r6, #12]
 8009cd4:	e7da      	b.n	8009c8c <_vfiprintf_r+0x20>
 8009cd6:	89ab      	ldrh	r3, [r5, #12]
 8009cd8:	0598      	lsls	r0, r3, #22
 8009cda:	d4ed      	bmi.n	8009cb8 <_vfiprintf_r+0x4c>
 8009cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cde:	f7ff fa29 	bl	8009134 <__retarget_lock_release_recursive>
 8009ce2:	e7e9      	b.n	8009cb8 <_vfiprintf_r+0x4c>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cf2:	2330      	movs	r3, #48	; 0x30
 8009cf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009eb8 <_vfiprintf_r+0x24c>
 8009cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cfc:	f04f 0901 	mov.w	r9, #1
 8009d00:	4623      	mov	r3, r4
 8009d02:	469a      	mov	sl, r3
 8009d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d08:	b10a      	cbz	r2, 8009d0e <_vfiprintf_r+0xa2>
 8009d0a:	2a25      	cmp	r2, #37	; 0x25
 8009d0c:	d1f9      	bne.n	8009d02 <_vfiprintf_r+0x96>
 8009d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d12:	d00b      	beq.n	8009d2c <_vfiprintf_r+0xc0>
 8009d14:	465b      	mov	r3, fp
 8009d16:	4622      	mov	r2, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7ff ff93 	bl	8009c46 <__sfputs_r>
 8009d20:	3001      	adds	r0, #1
 8009d22:	f000 80aa 	beq.w	8009e7a <_vfiprintf_r+0x20e>
 8009d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d28:	445a      	add	r2, fp
 8009d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 80a2 	beq.w	8009e7a <_vfiprintf_r+0x20e>
 8009d36:	2300      	movs	r3, #0
 8009d38:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d40:	f10a 0a01 	add.w	sl, sl, #1
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d4e:	4654      	mov	r4, sl
 8009d50:	2205      	movs	r2, #5
 8009d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d56:	4858      	ldr	r0, [pc, #352]	; (8009eb8 <_vfiprintf_r+0x24c>)
 8009d58:	f7f6 fa4a 	bl	80001f0 <memchr>
 8009d5c:	9a04      	ldr	r2, [sp, #16]
 8009d5e:	b9d8      	cbnz	r0, 8009d98 <_vfiprintf_r+0x12c>
 8009d60:	06d1      	lsls	r1, r2, #27
 8009d62:	bf44      	itt	mi
 8009d64:	2320      	movmi	r3, #32
 8009d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d6a:	0713      	lsls	r3, r2, #28
 8009d6c:	bf44      	itt	mi
 8009d6e:	232b      	movmi	r3, #43	; 0x2b
 8009d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d74:	f89a 3000 	ldrb.w	r3, [sl]
 8009d78:	2b2a      	cmp	r3, #42	; 0x2a
 8009d7a:	d015      	beq.n	8009da8 <_vfiprintf_r+0x13c>
 8009d7c:	9a07      	ldr	r2, [sp, #28]
 8009d7e:	4654      	mov	r4, sl
 8009d80:	2000      	movs	r0, #0
 8009d82:	f04f 0c0a 	mov.w	ip, #10
 8009d86:	4621      	mov	r1, r4
 8009d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d8c:	3b30      	subs	r3, #48	; 0x30
 8009d8e:	2b09      	cmp	r3, #9
 8009d90:	d94e      	bls.n	8009e30 <_vfiprintf_r+0x1c4>
 8009d92:	b1b0      	cbz	r0, 8009dc2 <_vfiprintf_r+0x156>
 8009d94:	9207      	str	r2, [sp, #28]
 8009d96:	e014      	b.n	8009dc2 <_vfiprintf_r+0x156>
 8009d98:	eba0 0308 	sub.w	r3, r0, r8
 8009d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8009da0:	4313      	orrs	r3, r2
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	46a2      	mov	sl, r4
 8009da6:	e7d2      	b.n	8009d4e <_vfiprintf_r+0xe2>
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	1d19      	adds	r1, r3, #4
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	9103      	str	r1, [sp, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bfbb      	ittet	lt
 8009db4:	425b      	neglt	r3, r3
 8009db6:	f042 0202 	orrlt.w	r2, r2, #2
 8009dba:	9307      	strge	r3, [sp, #28]
 8009dbc:	9307      	strlt	r3, [sp, #28]
 8009dbe:	bfb8      	it	lt
 8009dc0:	9204      	strlt	r2, [sp, #16]
 8009dc2:	7823      	ldrb	r3, [r4, #0]
 8009dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc6:	d10c      	bne.n	8009de2 <_vfiprintf_r+0x176>
 8009dc8:	7863      	ldrb	r3, [r4, #1]
 8009dca:	2b2a      	cmp	r3, #42	; 0x2a
 8009dcc:	d135      	bne.n	8009e3a <_vfiprintf_r+0x1ce>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	1d1a      	adds	r2, r3, #4
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	9203      	str	r2, [sp, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bfb8      	it	lt
 8009dda:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dde:	3402      	adds	r4, #2
 8009de0:	9305      	str	r3, [sp, #20]
 8009de2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ec8 <_vfiprintf_r+0x25c>
 8009de6:	7821      	ldrb	r1, [r4, #0]
 8009de8:	2203      	movs	r2, #3
 8009dea:	4650      	mov	r0, sl
 8009dec:	f7f6 fa00 	bl	80001f0 <memchr>
 8009df0:	b140      	cbz	r0, 8009e04 <_vfiprintf_r+0x198>
 8009df2:	2340      	movs	r3, #64	; 0x40
 8009df4:	eba0 000a 	sub.w	r0, r0, sl
 8009df8:	fa03 f000 	lsl.w	r0, r3, r0
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	4303      	orrs	r3, r0
 8009e00:	3401      	adds	r4, #1
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e08:	482c      	ldr	r0, [pc, #176]	; (8009ebc <_vfiprintf_r+0x250>)
 8009e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e0e:	2206      	movs	r2, #6
 8009e10:	f7f6 f9ee 	bl	80001f0 <memchr>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d03f      	beq.n	8009e98 <_vfiprintf_r+0x22c>
 8009e18:	4b29      	ldr	r3, [pc, #164]	; (8009ec0 <_vfiprintf_r+0x254>)
 8009e1a:	bb1b      	cbnz	r3, 8009e64 <_vfiprintf_r+0x1f8>
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	3307      	adds	r3, #7
 8009e20:	f023 0307 	bic.w	r3, r3, #7
 8009e24:	3308      	adds	r3, #8
 8009e26:	9303      	str	r3, [sp, #12]
 8009e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2a:	443b      	add	r3, r7
 8009e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2e:	e767      	b.n	8009d00 <_vfiprintf_r+0x94>
 8009e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e34:	460c      	mov	r4, r1
 8009e36:	2001      	movs	r0, #1
 8009e38:	e7a5      	b.n	8009d86 <_vfiprintf_r+0x11a>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	3401      	adds	r4, #1
 8009e3e:	9305      	str	r3, [sp, #20]
 8009e40:	4619      	mov	r1, r3
 8009e42:	f04f 0c0a 	mov.w	ip, #10
 8009e46:	4620      	mov	r0, r4
 8009e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e4c:	3a30      	subs	r2, #48	; 0x30
 8009e4e:	2a09      	cmp	r2, #9
 8009e50:	d903      	bls.n	8009e5a <_vfiprintf_r+0x1ee>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0c5      	beq.n	8009de2 <_vfiprintf_r+0x176>
 8009e56:	9105      	str	r1, [sp, #20]
 8009e58:	e7c3      	b.n	8009de2 <_vfiprintf_r+0x176>
 8009e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e5e:	4604      	mov	r4, r0
 8009e60:	2301      	movs	r3, #1
 8009e62:	e7f0      	b.n	8009e46 <_vfiprintf_r+0x1da>
 8009e64:	ab03      	add	r3, sp, #12
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	462a      	mov	r2, r5
 8009e6a:	4b16      	ldr	r3, [pc, #88]	; (8009ec4 <_vfiprintf_r+0x258>)
 8009e6c:	a904      	add	r1, sp, #16
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f7fd fbda 	bl	8007628 <_printf_float>
 8009e74:	4607      	mov	r7, r0
 8009e76:	1c78      	adds	r0, r7, #1
 8009e78:	d1d6      	bne.n	8009e28 <_vfiprintf_r+0x1bc>
 8009e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e7c:	07d9      	lsls	r1, r3, #31
 8009e7e:	d405      	bmi.n	8009e8c <_vfiprintf_r+0x220>
 8009e80:	89ab      	ldrh	r3, [r5, #12]
 8009e82:	059a      	lsls	r2, r3, #22
 8009e84:	d402      	bmi.n	8009e8c <_vfiprintf_r+0x220>
 8009e86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e88:	f7ff f954 	bl	8009134 <__retarget_lock_release_recursive>
 8009e8c:	89ab      	ldrh	r3, [r5, #12]
 8009e8e:	065b      	lsls	r3, r3, #25
 8009e90:	f53f af12 	bmi.w	8009cb8 <_vfiprintf_r+0x4c>
 8009e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e96:	e711      	b.n	8009cbc <_vfiprintf_r+0x50>
 8009e98:	ab03      	add	r3, sp, #12
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <_vfiprintf_r+0x258>)
 8009ea0:	a904      	add	r1, sp, #16
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7fd fe64 	bl	8007b70 <_printf_i>
 8009ea8:	e7e4      	b.n	8009e74 <_vfiprintf_r+0x208>
 8009eaa:	bf00      	nop
 8009eac:	08066138 	.word	0x08066138
 8009eb0:	08066158 	.word	0x08066158
 8009eb4:	08066118 	.word	0x08066118
 8009eb8:	080662d4 	.word	0x080662d4
 8009ebc:	080662de 	.word	0x080662de
 8009ec0:	08007629 	.word	0x08007629
 8009ec4:	08009c47 	.word	0x08009c47
 8009ec8:	080662da 	.word	0x080662da

08009ecc <__sread>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	460c      	mov	r4, r1
 8009ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed4:	f000 f8f8 	bl	800a0c8 <_read_r>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	bfab      	itete	ge
 8009edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ede:	89a3      	ldrhlt	r3, [r4, #12]
 8009ee0:	181b      	addge	r3, r3, r0
 8009ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ee6:	bfac      	ite	ge
 8009ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eea:	81a3      	strhlt	r3, [r4, #12]
 8009eec:	bd10      	pop	{r4, pc}

08009eee <__swrite>:
 8009eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef2:	461f      	mov	r7, r3
 8009ef4:	898b      	ldrh	r3, [r1, #12]
 8009ef6:	05db      	lsls	r3, r3, #23
 8009ef8:	4605      	mov	r5, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	4616      	mov	r6, r2
 8009efe:	d505      	bpl.n	8009f0c <__swrite+0x1e>
 8009f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f04:	2302      	movs	r3, #2
 8009f06:	2200      	movs	r2, #0
 8009f08:	f000 f898 	bl	800a03c <_lseek_r>
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	4632      	mov	r2, r6
 8009f1a:	463b      	mov	r3, r7
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f22:	f000 b817 	b.w	8009f54 <_write_r>

08009f26 <__sseek>:
 8009f26:	b510      	push	{r4, lr}
 8009f28:	460c      	mov	r4, r1
 8009f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2e:	f000 f885 	bl	800a03c <_lseek_r>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	bf15      	itete	ne
 8009f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f42:	81a3      	strheq	r3, [r4, #12]
 8009f44:	bf18      	it	ne
 8009f46:	81a3      	strhne	r3, [r4, #12]
 8009f48:	bd10      	pop	{r4, pc}

08009f4a <__sclose>:
 8009f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4e:	f000 b831 	b.w	8009fb4 <_close_r>
	...

08009f54 <_write_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4d07      	ldr	r5, [pc, #28]	; (8009f74 <_write_r+0x20>)
 8009f58:	4604      	mov	r4, r0
 8009f5a:	4608      	mov	r0, r1
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	2200      	movs	r2, #0
 8009f60:	602a      	str	r2, [r5, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	f000 fd38 	bl	800a9d8 <_write>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_write_r+0x1e>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_write_r+0x1e>
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	20002bf0 	.word	0x20002bf0

08009f78 <__assert_func>:
 8009f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f7a:	4614      	mov	r4, r2
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	4b09      	ldr	r3, [pc, #36]	; (8009fa4 <__assert_func+0x2c>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4605      	mov	r5, r0
 8009f84:	68d8      	ldr	r0, [r3, #12]
 8009f86:	b14c      	cbz	r4, 8009f9c <__assert_func+0x24>
 8009f88:	4b07      	ldr	r3, [pc, #28]	; (8009fa8 <__assert_func+0x30>)
 8009f8a:	9100      	str	r1, [sp, #0]
 8009f8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f90:	4906      	ldr	r1, [pc, #24]	; (8009fac <__assert_func+0x34>)
 8009f92:	462b      	mov	r3, r5
 8009f94:	f000 f81e 	bl	8009fd4 <fiprintf>
 8009f98:	f000 f8b5 	bl	800a106 <abort>
 8009f9c:	4b04      	ldr	r3, [pc, #16]	; (8009fb0 <__assert_func+0x38>)
 8009f9e:	461c      	mov	r4, r3
 8009fa0:	e7f3      	b.n	8009f8a <__assert_func+0x12>
 8009fa2:	bf00      	nop
 8009fa4:	20000ed0 	.word	0x20000ed0
 8009fa8:	080662e5 	.word	0x080662e5
 8009fac:	080662f2 	.word	0x080662f2
 8009fb0:	08066320 	.word	0x08066320

08009fb4 <_close_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4d06      	ldr	r5, [pc, #24]	; (8009fd0 <_close_r+0x1c>)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	602b      	str	r3, [r5, #0]
 8009fc0:	f000 fcd2 	bl	800a968 <_close>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d102      	bne.n	8009fce <_close_r+0x1a>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	b103      	cbz	r3, 8009fce <_close_r+0x1a>
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	20002bf0 	.word	0x20002bf0

08009fd4 <fiprintf>:
 8009fd4:	b40e      	push	{r1, r2, r3}
 8009fd6:	b503      	push	{r0, r1, lr}
 8009fd8:	4601      	mov	r1, r0
 8009fda:	ab03      	add	r3, sp, #12
 8009fdc:	4805      	ldr	r0, [pc, #20]	; (8009ff4 <fiprintf+0x20>)
 8009fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fe2:	6800      	ldr	r0, [r0, #0]
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	f7ff fe41 	bl	8009c6c <_vfiprintf_r>
 8009fea:	b002      	add	sp, #8
 8009fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ff0:	b003      	add	sp, #12
 8009ff2:	4770      	bx	lr
 8009ff4:	20000ed0 	.word	0x20000ed0

08009ff8 <_fstat_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d07      	ldr	r5, [pc, #28]	; (800a018 <_fstat_r+0x20>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	4611      	mov	r1, r2
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	f000 fcb7 	bl	800a978 <_fstat>
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	d102      	bne.n	800a014 <_fstat_r+0x1c>
 800a00e:	682b      	ldr	r3, [r5, #0]
 800a010:	b103      	cbz	r3, 800a014 <_fstat_r+0x1c>
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	bd38      	pop	{r3, r4, r5, pc}
 800a016:	bf00      	nop
 800a018:	20002bf0 	.word	0x20002bf0

0800a01c <_isatty_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4d06      	ldr	r5, [pc, #24]	; (800a038 <_isatty_r+0x1c>)
 800a020:	2300      	movs	r3, #0
 800a022:	4604      	mov	r4, r0
 800a024:	4608      	mov	r0, r1
 800a026:	602b      	str	r3, [r5, #0]
 800a028:	f000 fcb6 	bl	800a998 <_isatty>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d102      	bne.n	800a036 <_isatty_r+0x1a>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	b103      	cbz	r3, 800a036 <_isatty_r+0x1a>
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	20002bf0 	.word	0x20002bf0

0800a03c <_lseek_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4d07      	ldr	r5, [pc, #28]	; (800a05c <_lseek_r+0x20>)
 800a040:	4604      	mov	r4, r0
 800a042:	4608      	mov	r0, r1
 800a044:	4611      	mov	r1, r2
 800a046:	2200      	movs	r2, #0
 800a048:	602a      	str	r2, [r5, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f000 fcb4 	bl	800a9b8 <_lseek>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_lseek_r+0x1e>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b103      	cbz	r3, 800a05a <_lseek_r+0x1e>
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	20002bf0 	.word	0x20002bf0

0800a060 <__ascii_mbtowc>:
 800a060:	b082      	sub	sp, #8
 800a062:	b901      	cbnz	r1, 800a066 <__ascii_mbtowc+0x6>
 800a064:	a901      	add	r1, sp, #4
 800a066:	b142      	cbz	r2, 800a07a <__ascii_mbtowc+0x1a>
 800a068:	b14b      	cbz	r3, 800a07e <__ascii_mbtowc+0x1e>
 800a06a:	7813      	ldrb	r3, [r2, #0]
 800a06c:	600b      	str	r3, [r1, #0]
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	1e10      	subs	r0, r2, #0
 800a072:	bf18      	it	ne
 800a074:	2001      	movne	r0, #1
 800a076:	b002      	add	sp, #8
 800a078:	4770      	bx	lr
 800a07a:	4610      	mov	r0, r2
 800a07c:	e7fb      	b.n	800a076 <__ascii_mbtowc+0x16>
 800a07e:	f06f 0001 	mvn.w	r0, #1
 800a082:	e7f8      	b.n	800a076 <__ascii_mbtowc+0x16>

0800a084 <memmove>:
 800a084:	4288      	cmp	r0, r1
 800a086:	b510      	push	{r4, lr}
 800a088:	eb01 0402 	add.w	r4, r1, r2
 800a08c:	d902      	bls.n	800a094 <memmove+0x10>
 800a08e:	4284      	cmp	r4, r0
 800a090:	4623      	mov	r3, r4
 800a092:	d807      	bhi.n	800a0a4 <memmove+0x20>
 800a094:	1e43      	subs	r3, r0, #1
 800a096:	42a1      	cmp	r1, r4
 800a098:	d008      	beq.n	800a0ac <memmove+0x28>
 800a09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0a2:	e7f8      	b.n	800a096 <memmove+0x12>
 800a0a4:	4402      	add	r2, r0
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	428a      	cmp	r2, r1
 800a0aa:	d100      	bne.n	800a0ae <memmove+0x2a>
 800a0ac:	bd10      	pop	{r4, pc}
 800a0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0b6:	e7f7      	b.n	800a0a8 <memmove+0x24>

0800a0b8 <_malloc_usable_size_r>:
 800a0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0bc:	1f18      	subs	r0, r3, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	bfbc      	itt	lt
 800a0c2:	580b      	ldrlt	r3, [r1, r0]
 800a0c4:	18c0      	addlt	r0, r0, r3
 800a0c6:	4770      	bx	lr

0800a0c8 <_read_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d07      	ldr	r5, [pc, #28]	; (800a0e8 <_read_r+0x20>)
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	602a      	str	r2, [r5, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f000 fc76 	bl	800a9c8 <_read>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_read_r+0x1e>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_read_r+0x1e>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	20002bf0 	.word	0x20002bf0

0800a0ec <__ascii_wctomb>:
 800a0ec:	b149      	cbz	r1, 800a102 <__ascii_wctomb+0x16>
 800a0ee:	2aff      	cmp	r2, #255	; 0xff
 800a0f0:	bf85      	ittet	hi
 800a0f2:	238a      	movhi	r3, #138	; 0x8a
 800a0f4:	6003      	strhi	r3, [r0, #0]
 800a0f6:	700a      	strbls	r2, [r1, #0]
 800a0f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0fc:	bf98      	it	ls
 800a0fe:	2001      	movls	r0, #1
 800a100:	4770      	bx	lr
 800a102:	4608      	mov	r0, r1
 800a104:	4770      	bx	lr

0800a106 <abort>:
 800a106:	b508      	push	{r3, lr}
 800a108:	2006      	movs	r0, #6
 800a10a:	f000 f82b 	bl	800a164 <raise>
 800a10e:	2001      	movs	r0, #1
 800a110:	f000 fc6a 	bl	800a9e8 <_exit>

0800a114 <_raise_r>:
 800a114:	291f      	cmp	r1, #31
 800a116:	b538      	push	{r3, r4, r5, lr}
 800a118:	4604      	mov	r4, r0
 800a11a:	460d      	mov	r5, r1
 800a11c:	d904      	bls.n	800a128 <_raise_r+0x14>
 800a11e:	2316      	movs	r3, #22
 800a120:	6003      	str	r3, [r0, #0]
 800a122:	f04f 30ff 	mov.w	r0, #4294967295
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a12a:	b112      	cbz	r2, 800a132 <_raise_r+0x1e>
 800a12c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a130:	b94b      	cbnz	r3, 800a146 <_raise_r+0x32>
 800a132:	4620      	mov	r0, r4
 800a134:	f000 f830 	bl	800a198 <_getpid_r>
 800a138:	462a      	mov	r2, r5
 800a13a:	4601      	mov	r1, r0
 800a13c:	4620      	mov	r0, r4
 800a13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a142:	f000 b817 	b.w	800a174 <_kill_r>
 800a146:	2b01      	cmp	r3, #1
 800a148:	d00a      	beq.n	800a160 <_raise_r+0x4c>
 800a14a:	1c59      	adds	r1, r3, #1
 800a14c:	d103      	bne.n	800a156 <_raise_r+0x42>
 800a14e:	2316      	movs	r3, #22
 800a150:	6003      	str	r3, [r0, #0]
 800a152:	2001      	movs	r0, #1
 800a154:	e7e7      	b.n	800a126 <_raise_r+0x12>
 800a156:	2400      	movs	r4, #0
 800a158:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a15c:	4628      	mov	r0, r5
 800a15e:	4798      	blx	r3
 800a160:	2000      	movs	r0, #0
 800a162:	e7e0      	b.n	800a126 <_raise_r+0x12>

0800a164 <raise>:
 800a164:	4b02      	ldr	r3, [pc, #8]	; (800a170 <raise+0xc>)
 800a166:	4601      	mov	r1, r0
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	f7ff bfd3 	b.w	800a114 <_raise_r>
 800a16e:	bf00      	nop
 800a170:	20000ed0 	.word	0x20000ed0

0800a174 <_kill_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4d07      	ldr	r5, [pc, #28]	; (800a194 <_kill_r+0x20>)
 800a178:	2300      	movs	r3, #0
 800a17a:	4604      	mov	r4, r0
 800a17c:	4608      	mov	r0, r1
 800a17e:	4611      	mov	r1, r2
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	f000 fc11 	bl	800a9a8 <_kill>
 800a186:	1c43      	adds	r3, r0, #1
 800a188:	d102      	bne.n	800a190 <_kill_r+0x1c>
 800a18a:	682b      	ldr	r3, [r5, #0]
 800a18c:	b103      	cbz	r3, 800a190 <_kill_r+0x1c>
 800a18e:	6023      	str	r3, [r4, #0]
 800a190:	bd38      	pop	{r3, r4, r5, pc}
 800a192:	bf00      	nop
 800a194:	20002bf0 	.word	0x20002bf0

0800a198 <_getpid_r>:
 800a198:	f000 bbf6 	b.w	800a988 <_getpid>
 800a19c:	0000      	movs	r0, r0
	...

0800a1a0 <exp>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	ed2d 8b02 	vpush	{d8}
 800a1a6:	ec55 4b10 	vmov	r4, r5, d0
 800a1aa:	f000 f891 	bl	800a2d0 <__ieee754_exp>
 800a1ae:	4b22      	ldr	r3, [pc, #136]	; (800a238 <exp+0x98>)
 800a1b0:	eeb0 8a40 	vmov.f32	s16, s0
 800a1b4:	eef0 8a60 	vmov.f32	s17, s1
 800a1b8:	f993 3000 	ldrsb.w	r3, [r3]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	d012      	beq.n	800a1e6 <exp+0x46>
 800a1c0:	ec45 4b10 	vmov	d0, r4, r5
 800a1c4:	f000 fbba 	bl	800a93c <finite>
 800a1c8:	b168      	cbz	r0, 800a1e6 <exp+0x46>
 800a1ca:	a313      	add	r3, pc, #76	; (adr r3, 800a218 <exp+0x78>)
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f7f6 fca8 	bl	8000b28 <__aeabi_dcmpgt>
 800a1d8:	b160      	cbz	r0, 800a1f4 <exp+0x54>
 800a1da:	f7fd f87b 	bl	80072d4 <__errno>
 800a1de:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800a220 <exp+0x80>
 800a1e2:	2322      	movs	r3, #34	; 0x22
 800a1e4:	6003      	str	r3, [r0, #0]
 800a1e6:	eeb0 0a48 	vmov.f32	s0, s16
 800a1ea:	eef0 0a68 	vmov.f32	s1, s17
 800a1ee:	ecbd 8b02 	vpop	{d8}
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	a30c      	add	r3, pc, #48	; (adr r3, 800a228 <exp+0x88>)
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	f7f6 fc75 	bl	8000aec <__aeabi_dcmplt>
 800a202:	2800      	cmp	r0, #0
 800a204:	d0ef      	beq.n	800a1e6 <exp+0x46>
 800a206:	f7fd f865 	bl	80072d4 <__errno>
 800a20a:	2322      	movs	r3, #34	; 0x22
 800a20c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800a230 <exp+0x90>
 800a210:	6003      	str	r3, [r0, #0]
 800a212:	e7e8      	b.n	800a1e6 <exp+0x46>
 800a214:	f3af 8000 	nop.w
 800a218:	fefa39ef 	.word	0xfefa39ef
 800a21c:	40862e42 	.word	0x40862e42
 800a220:	00000000 	.word	0x00000000
 800a224:	7ff00000 	.word	0x7ff00000
 800a228:	d52d3051 	.word	0xd52d3051
 800a22c:	c0874910 	.word	0xc0874910
	...
 800a238:	200010a0 	.word	0x200010a0
 800a23c:	00000000 	.word	0x00000000

0800a240 <log>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	ed2d 8b02 	vpush	{d8}
 800a246:	ec55 4b10 	vmov	r4, r5, d0
 800a24a:	f000 f9bd 	bl	800a5c8 <__ieee754_log>
 800a24e:	4b1e      	ldr	r3, [pc, #120]	; (800a2c8 <log+0x88>)
 800a250:	eeb0 8a40 	vmov.f32	s16, s0
 800a254:	eef0 8a60 	vmov.f32	s17, s1
 800a258:	f993 3000 	ldrsb.w	r3, [r3]
 800a25c:	3301      	adds	r3, #1
 800a25e:	d01a      	beq.n	800a296 <log+0x56>
 800a260:	4622      	mov	r2, r4
 800a262:	462b      	mov	r3, r5
 800a264:	4620      	mov	r0, r4
 800a266:	4629      	mov	r1, r5
 800a268:	f7f6 fc68 	bl	8000b3c <__aeabi_dcmpun>
 800a26c:	b998      	cbnz	r0, 800a296 <log+0x56>
 800a26e:	2200      	movs	r2, #0
 800a270:	2300      	movs	r3, #0
 800a272:	4620      	mov	r0, r4
 800a274:	4629      	mov	r1, r5
 800a276:	f7f6 fc57 	bl	8000b28 <__aeabi_dcmpgt>
 800a27a:	b960      	cbnz	r0, 800a296 <log+0x56>
 800a27c:	2200      	movs	r2, #0
 800a27e:	2300      	movs	r3, #0
 800a280:	4620      	mov	r0, r4
 800a282:	4629      	mov	r1, r5
 800a284:	f7f6 fc28 	bl	8000ad8 <__aeabi_dcmpeq>
 800a288:	b160      	cbz	r0, 800a2a4 <log+0x64>
 800a28a:	f7fd f823 	bl	80072d4 <__errno>
 800a28e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800a2c0 <log+0x80>
 800a292:	2322      	movs	r3, #34	; 0x22
 800a294:	6003      	str	r3, [r0, #0]
 800a296:	eeb0 0a48 	vmov.f32	s0, s16
 800a29a:	eef0 0a68 	vmov.f32	s1, s17
 800a29e:	ecbd 8b02 	vpop	{d8}
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	f7fd f816 	bl	80072d4 <__errno>
 800a2a8:	ecbd 8b02 	vpop	{d8}
 800a2ac:	2321      	movs	r3, #33	; 0x21
 800a2ae:	6003      	str	r3, [r0, #0]
 800a2b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b4:	4805      	ldr	r0, [pc, #20]	; (800a2cc <log+0x8c>)
 800a2b6:	f000 bb4f 	b.w	800a958 <nan>
 800a2ba:	bf00      	nop
 800a2bc:	f3af 8000 	nop.w
 800a2c0:	00000000 	.word	0x00000000
 800a2c4:	fff00000 	.word	0xfff00000
 800a2c8:	200010a0 	.word	0x200010a0
 800a2cc:	08066320 	.word	0x08066320

0800a2d0 <__ieee754_exp>:
 800a2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d4:	ec55 4b10 	vmov	r4, r5, d0
 800a2d8:	49b1      	ldr	r1, [pc, #708]	; (800a5a0 <__ieee754_exp+0x2d0>)
 800a2da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a2de:	428b      	cmp	r3, r1
 800a2e0:	ed2d 8b04 	vpush	{d8-d9}
 800a2e4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800a2e8:	d937      	bls.n	800a35a <__ieee754_exp+0x8a>
 800a2ea:	49ae      	ldr	r1, [pc, #696]	; (800a5a4 <__ieee754_exp+0x2d4>)
 800a2ec:	428b      	cmp	r3, r1
 800a2ee:	d916      	bls.n	800a31e <__ieee754_exp+0x4e>
 800a2f0:	ee10 3a10 	vmov	r3, s0
 800a2f4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	d009      	beq.n	800a310 <__ieee754_exp+0x40>
 800a2fc:	ee10 2a10 	vmov	r2, s0
 800a300:	462b      	mov	r3, r5
 800a302:	4620      	mov	r0, r4
 800a304:	4629      	mov	r1, r5
 800a306:	f7f5 ffc9 	bl	800029c <__adddf3>
 800a30a:	4604      	mov	r4, r0
 800a30c:	460d      	mov	r5, r1
 800a30e:	e000      	b.n	800a312 <__ieee754_exp+0x42>
 800a310:	bb06      	cbnz	r6, 800a354 <__ieee754_exp+0x84>
 800a312:	ecbd 8b04 	vpop	{d8-d9}
 800a316:	ec45 4b10 	vmov	d0, r4, r5
 800a31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a31e:	a38a      	add	r3, pc, #552	; (adr r3, 800a548 <__ieee754_exp+0x278>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	ee10 0a10 	vmov	r0, s0
 800a328:	4629      	mov	r1, r5
 800a32a:	f7f6 fbfd 	bl	8000b28 <__aeabi_dcmpgt>
 800a32e:	b138      	cbz	r0, 800a340 <__ieee754_exp+0x70>
 800a330:	a387      	add	r3, pc, #540	; (adr r3, 800a550 <__ieee754_exp+0x280>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	4610      	mov	r0, r2
 800a338:	4619      	mov	r1, r3
 800a33a:	f7f6 f965 	bl	8000608 <__aeabi_dmul>
 800a33e:	e7e4      	b.n	800a30a <__ieee754_exp+0x3a>
 800a340:	a385      	add	r3, pc, #532	; (adr r3, 800a558 <__ieee754_exp+0x288>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	4620      	mov	r0, r4
 800a348:	4629      	mov	r1, r5
 800a34a:	f7f6 fbcf 	bl	8000aec <__aeabi_dcmplt>
 800a34e:	2800      	cmp	r0, #0
 800a350:	f000 8087 	beq.w	800a462 <__ieee754_exp+0x192>
 800a354:	2400      	movs	r4, #0
 800a356:	2500      	movs	r5, #0
 800a358:	e7db      	b.n	800a312 <__ieee754_exp+0x42>
 800a35a:	4a93      	ldr	r2, [pc, #588]	; (800a5a8 <__ieee754_exp+0x2d8>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	f240 80ac 	bls.w	800a4ba <__ieee754_exp+0x1ea>
 800a362:	4a92      	ldr	r2, [pc, #584]	; (800a5ac <__ieee754_exp+0x2dc>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d87c      	bhi.n	800a462 <__ieee754_exp+0x192>
 800a368:	4b91      	ldr	r3, [pc, #580]	; (800a5b0 <__ieee754_exp+0x2e0>)
 800a36a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	ee10 0a10 	vmov	r0, s0
 800a376:	4629      	mov	r1, r5
 800a378:	f7f5 ff8e 	bl	8000298 <__aeabi_dsub>
 800a37c:	4b8d      	ldr	r3, [pc, #564]	; (800a5b4 <__ieee754_exp+0x2e4>)
 800a37e:	00f7      	lsls	r7, r6, #3
 800a380:	443b      	add	r3, r7
 800a382:	ed93 7b00 	vldr	d7, [r3]
 800a386:	f1c6 0a01 	rsb	sl, r6, #1
 800a38a:	4680      	mov	r8, r0
 800a38c:	4689      	mov	r9, r1
 800a38e:	ebaa 0a06 	sub.w	sl, sl, r6
 800a392:	eeb0 8a47 	vmov.f32	s16, s14
 800a396:	eef0 8a67 	vmov.f32	s17, s15
 800a39a:	ec53 2b18 	vmov	r2, r3, d8
 800a39e:	4640      	mov	r0, r8
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	f7f5 ff79 	bl	8000298 <__aeabi_dsub>
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	4622      	mov	r2, r4
 800a3ac:	462b      	mov	r3, r5
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f6 f929 	bl	8000608 <__aeabi_dmul>
 800a3b6:	a36a      	add	r3, pc, #424	; (adr r3, 800a560 <__ieee754_exp+0x290>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	4606      	mov	r6, r0
 800a3be:	460f      	mov	r7, r1
 800a3c0:	f7f6 f922 	bl	8000608 <__aeabi_dmul>
 800a3c4:	a368      	add	r3, pc, #416	; (adr r3, 800a568 <__ieee754_exp+0x298>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f7f5 ff65 	bl	8000298 <__aeabi_dsub>
 800a3ce:	4632      	mov	r2, r6
 800a3d0:	463b      	mov	r3, r7
 800a3d2:	f7f6 f919 	bl	8000608 <__aeabi_dmul>
 800a3d6:	a366      	add	r3, pc, #408	; (adr r3, 800a570 <__ieee754_exp+0x2a0>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f7f5 ff5e 	bl	800029c <__adddf3>
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	f7f6 f910 	bl	8000608 <__aeabi_dmul>
 800a3e8:	a363      	add	r3, pc, #396	; (adr r3, 800a578 <__ieee754_exp+0x2a8>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f7f5 ff53 	bl	8000298 <__aeabi_dsub>
 800a3f2:	4632      	mov	r2, r6
 800a3f4:	463b      	mov	r3, r7
 800a3f6:	f7f6 f907 	bl	8000608 <__aeabi_dmul>
 800a3fa:	a361      	add	r3, pc, #388	; (adr r3, 800a580 <__ieee754_exp+0x2b0>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f5 ff4c 	bl	800029c <__adddf3>
 800a404:	4632      	mov	r2, r6
 800a406:	463b      	mov	r3, r7
 800a408:	f7f6 f8fe 	bl	8000608 <__aeabi_dmul>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4620      	mov	r0, r4
 800a412:	4629      	mov	r1, r5
 800a414:	f7f5 ff40 	bl	8000298 <__aeabi_dsub>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4606      	mov	r6, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	4620      	mov	r0, r4
 800a422:	4629      	mov	r1, r5
 800a424:	f7f6 f8f0 	bl	8000608 <__aeabi_dmul>
 800a428:	ec41 0b19 	vmov	d9, r0, r1
 800a42c:	f1ba 0f00 	cmp.w	sl, #0
 800a430:	d15d      	bne.n	800a4ee <__ieee754_exp+0x21e>
 800a432:	2200      	movs	r2, #0
 800a434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a438:	4630      	mov	r0, r6
 800a43a:	4639      	mov	r1, r7
 800a43c:	f7f5 ff2c 	bl	8000298 <__aeabi_dsub>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	ec51 0b19 	vmov	r0, r1, d9
 800a448:	f7f6 fa08 	bl	800085c <__aeabi_ddiv>
 800a44c:	4622      	mov	r2, r4
 800a44e:	462b      	mov	r3, r5
 800a450:	f7f5 ff22 	bl	8000298 <__aeabi_dsub>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	2000      	movs	r0, #0
 800a45a:	4957      	ldr	r1, [pc, #348]	; (800a5b8 <__ieee754_exp+0x2e8>)
 800a45c:	f7f5 ff1c 	bl	8000298 <__aeabi_dsub>
 800a460:	e753      	b.n	800a30a <__ieee754_exp+0x3a>
 800a462:	4856      	ldr	r0, [pc, #344]	; (800a5bc <__ieee754_exp+0x2ec>)
 800a464:	a348      	add	r3, pc, #288	; (adr r3, 800a588 <__ieee754_exp+0x2b8>)
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a46e:	4629      	mov	r1, r5
 800a470:	4620      	mov	r0, r4
 800a472:	f7f6 f8c9 	bl	8000608 <__aeabi_dmul>
 800a476:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a47a:	f7f5 ff0f 	bl	800029c <__adddf3>
 800a47e:	f7f6 fb73 	bl	8000b68 <__aeabi_d2iz>
 800a482:	4682      	mov	sl, r0
 800a484:	f7f6 f856 	bl	8000534 <__aeabi_i2d>
 800a488:	a341      	add	r3, pc, #260	; (adr r3, 800a590 <__ieee754_exp+0x2c0>)
 800a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48e:	4606      	mov	r6, r0
 800a490:	460f      	mov	r7, r1
 800a492:	f7f6 f8b9 	bl	8000608 <__aeabi_dmul>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4620      	mov	r0, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	f7f5 fefb 	bl	8000298 <__aeabi_dsub>
 800a4a2:	a33d      	add	r3, pc, #244	; (adr r3, 800a598 <__ieee754_exp+0x2c8>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	4689      	mov	r9, r1
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f6 f8aa 	bl	8000608 <__aeabi_dmul>
 800a4b4:	ec41 0b18 	vmov	d8, r0, r1
 800a4b8:	e76f      	b.n	800a39a <__ieee754_exp+0xca>
 800a4ba:	4a41      	ldr	r2, [pc, #260]	; (800a5c0 <__ieee754_exp+0x2f0>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d811      	bhi.n	800a4e4 <__ieee754_exp+0x214>
 800a4c0:	a323      	add	r3, pc, #140	; (adr r3, 800a550 <__ieee754_exp+0x280>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	ee10 0a10 	vmov	r0, s0
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f7f5 fee6 	bl	800029c <__adddf3>
 800a4d0:	4b39      	ldr	r3, [pc, #228]	; (800a5b8 <__ieee754_exp+0x2e8>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f7f6 fb28 	bl	8000b28 <__aeabi_dcmpgt>
 800a4d8:	b138      	cbz	r0, 800a4ea <__ieee754_exp+0x21a>
 800a4da:	4b37      	ldr	r3, [pc, #220]	; (800a5b8 <__ieee754_exp+0x2e8>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	4620      	mov	r0, r4
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	e710      	b.n	800a306 <__ieee754_exp+0x36>
 800a4e4:	f04f 0a00 	mov.w	sl, #0
 800a4e8:	e75f      	b.n	800a3aa <__ieee754_exp+0xda>
 800a4ea:	4682      	mov	sl, r0
 800a4ec:	e75d      	b.n	800a3aa <__ieee754_exp+0xda>
 800a4ee:	4632      	mov	r2, r6
 800a4f0:	463b      	mov	r3, r7
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a4f8:	f7f5 fece 	bl	8000298 <__aeabi_dsub>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	ec51 0b19 	vmov	r0, r1, d9
 800a504:	f7f6 f9aa 	bl	800085c <__aeabi_ddiv>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	ec51 0b18 	vmov	r0, r1, d8
 800a510:	f7f5 fec2 	bl	8000298 <__aeabi_dsub>
 800a514:	4642      	mov	r2, r8
 800a516:	464b      	mov	r3, r9
 800a518:	f7f5 febe 	bl	8000298 <__aeabi_dsub>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	2000      	movs	r0, #0
 800a522:	4925      	ldr	r1, [pc, #148]	; (800a5b8 <__ieee754_exp+0x2e8>)
 800a524:	f7f5 feb8 	bl	8000298 <__aeabi_dsub>
 800a528:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a52c:	4592      	cmp	sl, r2
 800a52e:	db02      	blt.n	800a536 <__ieee754_exp+0x266>
 800a530:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a534:	e6e9      	b.n	800a30a <__ieee754_exp+0x3a>
 800a536:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a53a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a53e:	2200      	movs	r2, #0
 800a540:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a544:	e6f9      	b.n	800a33a <__ieee754_exp+0x6a>
 800a546:	bf00      	nop
 800a548:	fefa39ef 	.word	0xfefa39ef
 800a54c:	40862e42 	.word	0x40862e42
 800a550:	8800759c 	.word	0x8800759c
 800a554:	7e37e43c 	.word	0x7e37e43c
 800a558:	d52d3051 	.word	0xd52d3051
 800a55c:	c0874910 	.word	0xc0874910
 800a560:	72bea4d0 	.word	0x72bea4d0
 800a564:	3e663769 	.word	0x3e663769
 800a568:	c5d26bf1 	.word	0xc5d26bf1
 800a56c:	3ebbbd41 	.word	0x3ebbbd41
 800a570:	af25de2c 	.word	0xaf25de2c
 800a574:	3f11566a 	.word	0x3f11566a
 800a578:	16bebd93 	.word	0x16bebd93
 800a57c:	3f66c16c 	.word	0x3f66c16c
 800a580:	5555553e 	.word	0x5555553e
 800a584:	3fc55555 	.word	0x3fc55555
 800a588:	652b82fe 	.word	0x652b82fe
 800a58c:	3ff71547 	.word	0x3ff71547
 800a590:	fee00000 	.word	0xfee00000
 800a594:	3fe62e42 	.word	0x3fe62e42
 800a598:	35793c76 	.word	0x35793c76
 800a59c:	3dea39ef 	.word	0x3dea39ef
 800a5a0:	40862e41 	.word	0x40862e41
 800a5a4:	7fefffff 	.word	0x7fefffff
 800a5a8:	3fd62e42 	.word	0x3fd62e42
 800a5ac:	3ff0a2b1 	.word	0x3ff0a2b1
 800a5b0:	08066440 	.word	0x08066440
 800a5b4:	08066450 	.word	0x08066450
 800a5b8:	3ff00000 	.word	0x3ff00000
 800a5bc:	08066430 	.word	0x08066430
 800a5c0:	3e2fffff 	.word	0x3e2fffff
 800a5c4:	00000000 	.word	0x00000000

0800a5c8 <__ieee754_log>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	ec51 0b10 	vmov	r0, r1, d0
 800a5d0:	ed2d 8b04 	vpush	{d8-d9}
 800a5d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a5d8:	b083      	sub	sp, #12
 800a5da:	460d      	mov	r5, r1
 800a5dc:	da29      	bge.n	800a632 <__ieee754_log+0x6a>
 800a5de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5e2:	4303      	orrs	r3, r0
 800a5e4:	ee10 2a10 	vmov	r2, s0
 800a5e8:	d10c      	bne.n	800a604 <__ieee754_log+0x3c>
 800a5ea:	49cf      	ldr	r1, [pc, #828]	; (800a928 <__ieee754_log+0x360>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f7f6 f933 	bl	800085c <__aeabi_ddiv>
 800a5f6:	ec41 0b10 	vmov	d0, r0, r1
 800a5fa:	b003      	add	sp, #12
 800a5fc:	ecbd 8b04 	vpop	{d8-d9}
 800a600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a604:	2900      	cmp	r1, #0
 800a606:	da05      	bge.n	800a614 <__ieee754_log+0x4c>
 800a608:	460b      	mov	r3, r1
 800a60a:	f7f5 fe45 	bl	8000298 <__aeabi_dsub>
 800a60e:	2200      	movs	r2, #0
 800a610:	2300      	movs	r3, #0
 800a612:	e7ee      	b.n	800a5f2 <__ieee754_log+0x2a>
 800a614:	4bc5      	ldr	r3, [pc, #788]	; (800a92c <__ieee754_log+0x364>)
 800a616:	2200      	movs	r2, #0
 800a618:	f7f5 fff6 	bl	8000608 <__aeabi_dmul>
 800a61c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a620:	460d      	mov	r5, r1
 800a622:	4ac3      	ldr	r2, [pc, #780]	; (800a930 <__ieee754_log+0x368>)
 800a624:	4295      	cmp	r5, r2
 800a626:	dd06      	ble.n	800a636 <__ieee754_log+0x6e>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	f7f5 fe36 	bl	800029c <__adddf3>
 800a630:	e7e1      	b.n	800a5f6 <__ieee754_log+0x2e>
 800a632:	2300      	movs	r3, #0
 800a634:	e7f5      	b.n	800a622 <__ieee754_log+0x5a>
 800a636:	152c      	asrs	r4, r5, #20
 800a638:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a63c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a640:	441c      	add	r4, r3
 800a642:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a646:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a64a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a64e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a652:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a656:	ea42 0105 	orr.w	r1, r2, r5
 800a65a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a65e:	2200      	movs	r2, #0
 800a660:	4bb4      	ldr	r3, [pc, #720]	; (800a934 <__ieee754_log+0x36c>)
 800a662:	f7f5 fe19 	bl	8000298 <__aeabi_dsub>
 800a666:	1cab      	adds	r3, r5, #2
 800a668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	4682      	mov	sl, r0
 800a670:	468b      	mov	fp, r1
 800a672:	f04f 0200 	mov.w	r2, #0
 800a676:	dc53      	bgt.n	800a720 <__ieee754_log+0x158>
 800a678:	2300      	movs	r3, #0
 800a67a:	f7f6 fa2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a67e:	b1d0      	cbz	r0, 800a6b6 <__ieee754_log+0xee>
 800a680:	2c00      	cmp	r4, #0
 800a682:	f000 8122 	beq.w	800a8ca <__ieee754_log+0x302>
 800a686:	4620      	mov	r0, r4
 800a688:	f7f5 ff54 	bl	8000534 <__aeabi_i2d>
 800a68c:	a390      	add	r3, pc, #576	; (adr r3, 800a8d0 <__ieee754_log+0x308>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	4606      	mov	r6, r0
 800a694:	460f      	mov	r7, r1
 800a696:	f7f5 ffb7 	bl	8000608 <__aeabi_dmul>
 800a69a:	a38f      	add	r3, pc, #572	; (adr r3, 800a8d8 <__ieee754_log+0x310>)
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f5 ffae 	bl	8000608 <__aeabi_dmul>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	e7ba      	b.n	800a62c <__ieee754_log+0x64>
 800a6b6:	a38a      	add	r3, pc, #552	; (adr r3, 800a8e0 <__ieee754_log+0x318>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	4650      	mov	r0, sl
 800a6be:	4659      	mov	r1, fp
 800a6c0:	f7f5 ffa2 	bl	8000608 <__aeabi_dmul>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	499b      	ldr	r1, [pc, #620]	; (800a938 <__ieee754_log+0x370>)
 800a6cc:	f7f5 fde4 	bl	8000298 <__aeabi_dsub>
 800a6d0:	4652      	mov	r2, sl
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	465b      	mov	r3, fp
 800a6d8:	4650      	mov	r0, sl
 800a6da:	4659      	mov	r1, fp
 800a6dc:	f7f5 ff94 	bl	8000608 <__aeabi_dmul>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f5 ff8e 	bl	8000608 <__aeabi_dmul>
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	460f      	mov	r7, r1
 800a6f0:	b914      	cbnz	r4, 800a6f8 <__ieee754_log+0x130>
 800a6f2:	4632      	mov	r2, r6
 800a6f4:	463b      	mov	r3, r7
 800a6f6:	e0a2      	b.n	800a83e <__ieee754_log+0x276>
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f7f5 ff1b 	bl	8000534 <__aeabi_i2d>
 800a6fe:	a374      	add	r3, pc, #464	; (adr r3, 800a8d0 <__ieee754_log+0x308>)
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	4680      	mov	r8, r0
 800a706:	4689      	mov	r9, r1
 800a708:	f7f5 ff7e 	bl	8000608 <__aeabi_dmul>
 800a70c:	a372      	add	r3, pc, #456	; (adr r3, 800a8d8 <__ieee754_log+0x310>)
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	4604      	mov	r4, r0
 800a714:	460d      	mov	r5, r1
 800a716:	4640      	mov	r0, r8
 800a718:	4649      	mov	r1, r9
 800a71a:	f7f5 ff75 	bl	8000608 <__aeabi_dmul>
 800a71e:	e0a7      	b.n	800a870 <__ieee754_log+0x2a8>
 800a720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a724:	f7f5 fdba 	bl	800029c <__adddf3>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4650      	mov	r0, sl
 800a72e:	4659      	mov	r1, fp
 800a730:	f7f6 f894 	bl	800085c <__aeabi_ddiv>
 800a734:	ec41 0b18 	vmov	d8, r0, r1
 800a738:	4620      	mov	r0, r4
 800a73a:	f7f5 fefb 	bl	8000534 <__aeabi_i2d>
 800a73e:	ec53 2b18 	vmov	r2, r3, d8
 800a742:	ec41 0b19 	vmov	d9, r0, r1
 800a746:	ec51 0b18 	vmov	r0, r1, d8
 800a74a:	f7f5 ff5d 	bl	8000608 <__aeabi_dmul>
 800a74e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a752:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4680      	mov	r8, r0
 800a75e:	4689      	mov	r9, r1
 800a760:	f7f5 ff52 	bl	8000608 <__aeabi_dmul>
 800a764:	a360      	add	r3, pc, #384	; (adr r3, 800a8e8 <__ieee754_log+0x320>)
 800a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76a:	4606      	mov	r6, r0
 800a76c:	460f      	mov	r7, r1
 800a76e:	f7f5 ff4b 	bl	8000608 <__aeabi_dmul>
 800a772:	a35f      	add	r3, pc, #380	; (adr r3, 800a8f0 <__ieee754_log+0x328>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 fd90 	bl	800029c <__adddf3>
 800a77c:	4632      	mov	r2, r6
 800a77e:	463b      	mov	r3, r7
 800a780:	f7f5 ff42 	bl	8000608 <__aeabi_dmul>
 800a784:	a35c      	add	r3, pc, #368	; (adr r3, 800a8f8 <__ieee754_log+0x330>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd87 	bl	800029c <__adddf3>
 800a78e:	4632      	mov	r2, r6
 800a790:	463b      	mov	r3, r7
 800a792:	f7f5 ff39 	bl	8000608 <__aeabi_dmul>
 800a796:	a35a      	add	r3, pc, #360	; (adr r3, 800a900 <__ieee754_log+0x338>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 fd7e 	bl	800029c <__adddf3>
 800a7a0:	4642      	mov	r2, r8
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	f7f5 ff30 	bl	8000608 <__aeabi_dmul>
 800a7a8:	a357      	add	r3, pc, #348	; (adr r3, 800a908 <__ieee754_log+0x340>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	4680      	mov	r8, r0
 800a7b0:	4689      	mov	r9, r1
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	f7f5 ff27 	bl	8000608 <__aeabi_dmul>
 800a7ba:	a355      	add	r3, pc, #340	; (adr r3, 800a910 <__ieee754_log+0x348>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 fd6c 	bl	800029c <__adddf3>
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	463b      	mov	r3, r7
 800a7c8:	f7f5 ff1e 	bl	8000608 <__aeabi_dmul>
 800a7cc:	a352      	add	r3, pc, #328	; (adr r3, 800a918 <__ieee754_log+0x350>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f7f5 fd63 	bl	800029c <__adddf3>
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	463b      	mov	r3, r7
 800a7da:	f7f5 ff15 	bl	8000608 <__aeabi_dmul>
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	f7f5 fd59 	bl	800029c <__adddf3>
 800a7ea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a7ee:	9b01      	ldr	r3, [sp, #4]
 800a7f0:	3551      	adds	r5, #81	; 0x51
 800a7f2:	431d      	orrs	r5, r3
 800a7f4:	2d00      	cmp	r5, #0
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	4689      	mov	r9, r1
 800a7fa:	dd48      	ble.n	800a88e <__ieee754_log+0x2c6>
 800a7fc:	4b4e      	ldr	r3, [pc, #312]	; (800a938 <__ieee754_log+0x370>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	4650      	mov	r0, sl
 800a802:	4659      	mov	r1, fp
 800a804:	f7f5 ff00 	bl	8000608 <__aeabi_dmul>
 800a808:	4652      	mov	r2, sl
 800a80a:	465b      	mov	r3, fp
 800a80c:	f7f5 fefc 	bl	8000608 <__aeabi_dmul>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4606      	mov	r6, r0
 800a816:	460f      	mov	r7, r1
 800a818:	4640      	mov	r0, r8
 800a81a:	4649      	mov	r1, r9
 800a81c:	f7f5 fd3e 	bl	800029c <__adddf3>
 800a820:	ec53 2b18 	vmov	r2, r3, d8
 800a824:	f7f5 fef0 	bl	8000608 <__aeabi_dmul>
 800a828:	4680      	mov	r8, r0
 800a82a:	4689      	mov	r9, r1
 800a82c:	b964      	cbnz	r4, 800a848 <__ieee754_log+0x280>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4630      	mov	r0, r6
 800a834:	4639      	mov	r1, r7
 800a836:	f7f5 fd2f 	bl	8000298 <__aeabi_dsub>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4650      	mov	r0, sl
 800a840:	4659      	mov	r1, fp
 800a842:	f7f5 fd29 	bl	8000298 <__aeabi_dsub>
 800a846:	e6d6      	b.n	800a5f6 <__ieee754_log+0x2e>
 800a848:	a321      	add	r3, pc, #132	; (adr r3, 800a8d0 <__ieee754_log+0x308>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	ec51 0b19 	vmov	r0, r1, d9
 800a852:	f7f5 fed9 	bl	8000608 <__aeabi_dmul>
 800a856:	a320      	add	r3, pc, #128	; (adr r3, 800a8d8 <__ieee754_log+0x310>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	4604      	mov	r4, r0
 800a85e:	460d      	mov	r5, r1
 800a860:	ec51 0b19 	vmov	r0, r1, d9
 800a864:	f7f5 fed0 	bl	8000608 <__aeabi_dmul>
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	f7f5 fd16 	bl	800029c <__adddf3>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4630      	mov	r0, r6
 800a876:	4639      	mov	r1, r7
 800a878:	f7f5 fd0e 	bl	8000298 <__aeabi_dsub>
 800a87c:	4652      	mov	r2, sl
 800a87e:	465b      	mov	r3, fp
 800a880:	f7f5 fd0a 	bl	8000298 <__aeabi_dsub>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4620      	mov	r0, r4
 800a88a:	4629      	mov	r1, r5
 800a88c:	e7d9      	b.n	800a842 <__ieee754_log+0x27a>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4650      	mov	r0, sl
 800a894:	4659      	mov	r1, fp
 800a896:	f7f5 fcff 	bl	8000298 <__aeabi_dsub>
 800a89a:	ec53 2b18 	vmov	r2, r3, d8
 800a89e:	f7f5 feb3 	bl	8000608 <__aeabi_dmul>
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	f43f af23 	beq.w	800a6f2 <__ieee754_log+0x12a>
 800a8ac:	a308      	add	r3, pc, #32	; (adr r3, 800a8d0 <__ieee754_log+0x308>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	ec51 0b19 	vmov	r0, r1, d9
 800a8b6:	f7f5 fea7 	bl	8000608 <__aeabi_dmul>
 800a8ba:	a307      	add	r3, pc, #28	; (adr r3, 800a8d8 <__ieee754_log+0x310>)
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	460d      	mov	r5, r1
 800a8c4:	ec51 0b19 	vmov	r0, r1, d9
 800a8c8:	e727      	b.n	800a71a <__ieee754_log+0x152>
 800a8ca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800a920 <__ieee754_log+0x358>
 800a8ce:	e694      	b.n	800a5fa <__ieee754_log+0x32>
 800a8d0:	fee00000 	.word	0xfee00000
 800a8d4:	3fe62e42 	.word	0x3fe62e42
 800a8d8:	35793c76 	.word	0x35793c76
 800a8dc:	3dea39ef 	.word	0x3dea39ef
 800a8e0:	55555555 	.word	0x55555555
 800a8e4:	3fd55555 	.word	0x3fd55555
 800a8e8:	df3e5244 	.word	0xdf3e5244
 800a8ec:	3fc2f112 	.word	0x3fc2f112
 800a8f0:	96cb03de 	.word	0x96cb03de
 800a8f4:	3fc74664 	.word	0x3fc74664
 800a8f8:	94229359 	.word	0x94229359
 800a8fc:	3fd24924 	.word	0x3fd24924
 800a900:	55555593 	.word	0x55555593
 800a904:	3fe55555 	.word	0x3fe55555
 800a908:	d078c69f 	.word	0xd078c69f
 800a90c:	3fc39a09 	.word	0x3fc39a09
 800a910:	1d8e78af 	.word	0x1d8e78af
 800a914:	3fcc71c5 	.word	0x3fcc71c5
 800a918:	9997fa04 	.word	0x9997fa04
 800a91c:	3fd99999 	.word	0x3fd99999
	...
 800a928:	c3500000 	.word	0xc3500000
 800a92c:	43500000 	.word	0x43500000
 800a930:	7fefffff 	.word	0x7fefffff
 800a934:	3ff00000 	.word	0x3ff00000
 800a938:	3fe00000 	.word	0x3fe00000

0800a93c <finite>:
 800a93c:	b082      	sub	sp, #8
 800a93e:	ed8d 0b00 	vstr	d0, [sp]
 800a942:	9801      	ldr	r0, [sp, #4]
 800a944:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a948:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a94c:	0fc0      	lsrs	r0, r0, #31
 800a94e:	b002      	add	sp, #8
 800a950:	4770      	bx	lr
 800a952:	0000      	movs	r0, r0
 800a954:	0000      	movs	r0, r0
	...

0800a958 <nan>:
 800a958:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a960 <nan+0x8>
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	00000000 	.word	0x00000000
 800a964:	7ff80000 	.word	0x7ff80000

0800a968 <_close>:
 800a968:	4b02      	ldr	r3, [pc, #8]	; (800a974 <_close+0xc>)
 800a96a:	2258      	movs	r2, #88	; 0x58
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	f04f 30ff 	mov.w	r0, #4294967295
 800a972:	4770      	bx	lr
 800a974:	20002bf0 	.word	0x20002bf0

0800a978 <_fstat>:
 800a978:	4b02      	ldr	r3, [pc, #8]	; (800a984 <_fstat+0xc>)
 800a97a:	2258      	movs	r2, #88	; 0x58
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	f04f 30ff 	mov.w	r0, #4294967295
 800a982:	4770      	bx	lr
 800a984:	20002bf0 	.word	0x20002bf0

0800a988 <_getpid>:
 800a988:	4b02      	ldr	r3, [pc, #8]	; (800a994 <_getpid+0xc>)
 800a98a:	2258      	movs	r2, #88	; 0x58
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	f04f 30ff 	mov.w	r0, #4294967295
 800a992:	4770      	bx	lr
 800a994:	20002bf0 	.word	0x20002bf0

0800a998 <_isatty>:
 800a998:	4b02      	ldr	r3, [pc, #8]	; (800a9a4 <_isatty+0xc>)
 800a99a:	2258      	movs	r2, #88	; 0x58
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	2000      	movs	r0, #0
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	20002bf0 	.word	0x20002bf0

0800a9a8 <_kill>:
 800a9a8:	4b02      	ldr	r3, [pc, #8]	; (800a9b4 <_kill+0xc>)
 800a9aa:	2258      	movs	r2, #88	; 0x58
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b2:	4770      	bx	lr
 800a9b4:	20002bf0 	.word	0x20002bf0

0800a9b8 <_lseek>:
 800a9b8:	4b02      	ldr	r3, [pc, #8]	; (800a9c4 <_lseek+0xc>)
 800a9ba:	2258      	movs	r2, #88	; 0x58
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c2:	4770      	bx	lr
 800a9c4:	20002bf0 	.word	0x20002bf0

0800a9c8 <_read>:
 800a9c8:	4b02      	ldr	r3, [pc, #8]	; (800a9d4 <_read+0xc>)
 800a9ca:	2258      	movs	r2, #88	; 0x58
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d2:	4770      	bx	lr
 800a9d4:	20002bf0 	.word	0x20002bf0

0800a9d8 <_write>:
 800a9d8:	4b02      	ldr	r3, [pc, #8]	; (800a9e4 <_write+0xc>)
 800a9da:	2258      	movs	r2, #88	; 0x58
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e2:	4770      	bx	lr
 800a9e4:	20002bf0 	.word	0x20002bf0

0800a9e8 <_exit>:
 800a9e8:	e7fe      	b.n	800a9e8 <_exit>
	...

0800a9ec <_init>:
 800a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ee:	bf00      	nop
 800a9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f2:	bc08      	pop	{r3}
 800a9f4:	469e      	mov	lr, r3
 800a9f6:	4770      	bx	lr

0800a9f8 <_fini>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	bf00      	nop
 800a9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fe:	bc08      	pop	{r3}
 800aa00:	469e      	mov	lr, r3
 800aa02:	4770      	bx	lr
