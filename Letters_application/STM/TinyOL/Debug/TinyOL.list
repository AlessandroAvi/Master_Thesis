
TinyOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005bb80  0800b060  0800b060  0001b060  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08066be0  08066be0  000810a4  2**0
                  CONTENTS
  4 .ARM          00000008  08066be0  08066be0  00076be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08066be8  08066be8  000810a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08066be8  08066be8  00076be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08066bec  08066bec  00076bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010a4  20000000  08066bf0  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b50  200010a4  08067c94  000810a4  2**2
                  ALLOC
 10 ._user_heap_stack 00001204  20002bf4  08067c94  00082bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000810a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013762  00000000  00000000  000810d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2a  00000000  00000000  00094836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00097760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00098598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ae1  00000000  00000000  00099270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013593  00000000  00000000  000b2d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ce8  00000000  00000000  000c62e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0015dfcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e0c  00000000  00000000  0015e09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00162ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00162f74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200010a4 	.word	0x200010a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b02c 	.word	0x0800b02c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200010a8 	.word	0x200010a8
 80001dc:	0800b02c 	.word	0x0800b02c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <OL_allocateMemory>:
//      FUNCTIONS RELATED TO MEMORY ALLOCATION
// #############################################


/*  Allocates all the matrices and arrays needed for the bare minimum functions.  */
void OL_allocateMemory(OL_LAYER_STRUCT * layer){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

	layer->weights = calloc(layer->WIDTH*layer->HEIGHT, sizeof(float));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6912      	ldr	r2, [r2, #16]
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	2104      	movs	r1, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f006 fcca 	bl	8007900 <calloc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
	if(layer->weights==NULL){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d103      	bne.n	8000f84 <OL_allocateMemory+0x34>
		  layer->OL_ERROR = CALLOC_WEIGHTS;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->biases = calloc(layer->WIDTH, sizeof(float));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 fcb8 	bl	8007900 <calloc>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	61da      	str	r2, [r3, #28]
	if(layer->biases==NULL){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d103      	bne.n	8000fa8 <OL_allocateMemory+0x58>
	  layer->OL_ERROR = CALLOC_BIASES;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->label = calloc(layer->WIDTH, sizeof(char));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2101      	movs	r1, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f006 fca6 	bl	8007900 <calloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	615a      	str	r2, [r3, #20]
	if(layer->label==NULL){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <OL_allocateMemory+0x7c>
	  layer->OL_ERROR = CALLOC_LABEL;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->y_pred = calloc(layer->WIDTH, sizeof(float));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 fc94 	bl	8007900 <calloc>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	621a      	str	r2, [r3, #32]
	if(layer->y_pred==NULL){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d103      	bne.n	8000ff0 <OL_allocateMemory+0xa0>
	  layer->OL_ERROR = CALLOC_Y_PRED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2203      	movs	r2, #3
 8000fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->y_true = calloc(layer->WIDTH, sizeof(float));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fc82 	bl	8007900 <calloc>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
	if(layer->y_true== NULL){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2b00      	cmp	r3, #0
 800100a:	d103      	bne.n	8001014 <OL_allocateMemory+0xc4>
	  layer->OL_ERROR = CALLOC_Y_TRUE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2207      	movs	r2, #7
 8001010:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}


	if( layer->ALGORITHM!=MODE_OL && layer->ALGORITHM!=MODE_OL_V2 ){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001018:	2b00      	cmp	r3, #0
 800101a:	d05b      	beq.n	80010d4 <OL_allocateMemory+0x184>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001020:	2b01      	cmp	r3, #1
 8001022:	d057      	beq.n	80010d4 <OL_allocateMemory+0x184>

		layer->weights_2 = calloc(layer->WIDTH*layer->HEIGHT, sizeof(float));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6912      	ldr	r2, [r2, #16]
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	2104      	movs	r1, #4
 8001032:	4618      	mov	r0, r3
 8001034:	f006 fc64 	bl	8007900 <calloc>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
		if(layer->weights_2==NULL){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	2b00      	cmp	r3, #0
 8001046:	d103      	bne.n	8001050 <OL_allocateMemory+0x100>
			layer->OL_ERROR = CALLOC_WEIGHTS_2;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2204      	movs	r2, #4
 800104c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}

		layer->biases_2 = calloc(layer->WIDTH, sizeof(float));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2104      	movs	r1, #4
 8001056:	4618      	mov	r0, r3
 8001058:	f006 fc52 	bl	8007900 <calloc>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
		if(layer->biases_2==NULL){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <OL_allocateMemory+0x124>
			layer->OL_ERROR = CALLOC_BIASES_2;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2205      	movs	r2, #5
 8001070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}

		if(layer->ALGORITHM == MODE_CWR){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001078:	2b02      	cmp	r3, #2
 800107a:	d111      	bne.n	80010a0 <OL_allocateMemory+0x150>
			layer->found_lett = calloc(layer->WIDTH, sizeof(uint8_t));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2101      	movs	r1, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f006 fc3c 	bl	8007900 <calloc>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	631a      	str	r2, [r3, #48]	; 0x30
			if(layer->found_lett==NULL){
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	2b00      	cmp	r3, #0
 8001096:	d103      	bne.n	80010a0 <OL_allocateMemory+0x150>
				layer->OL_ERROR = CALLOC_FOUND_LETT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2206      	movs	r2, #6
 800109c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			}
		}

		if(layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_LWF_batch){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d003      	beq.n	80010b0 <OL_allocateMemory+0x160>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	d111      	bne.n	80010d4 <OL_allocateMemory+0x184>
			layer->y_pred_2 = calloc(layer->WIDTH, sizeof(float));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2104      	movs	r1, #4
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 fc22 	bl	8007900 <calloc>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
			if(layer->y_pred_2==NULL){
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d103      	bne.n	80010d4 <OL_allocateMemory+0x184>
				layer->OL_ERROR = CALLOC_Y_PRED_2;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2208      	movs	r2, #8
 80010d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			}
		}
	}
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <OL_increaseWeightDim>:


/* Use realloc to increase the amount of memory dedicated to the weights  */
void OL_increaseWeightDim(OL_LAYER_STRUCT * layer){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	int h = layer->HEIGHT;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	60fb      	str	r3, [r7, #12]
	int w = layer->WIDTH;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	60bb      	str	r3, [r7, #8]

	layer->weights = realloc(layer->weights, h*w*sizeof(float));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6998      	ldr	r0, [r3, #24]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4619      	mov	r1, r3
 8001100:	f007 fa08 	bl	8008514 <realloc>
 8001104:	4602      	mov	r2, r0
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	619a      	str	r2, [r3, #24]
	if(layer->weights== NULL){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <OL_increaseWeightDim+0x3e>
		layer->OL_ERROR = REALLOC_WEIGHTS;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	220a      	movs	r2, #10
 8001116:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	// set to 0 only the new weights
	for(int i=h*(w-1); i<h*w; i++){
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e00a      	b.n	800113e <OL_increaseWeightDim+0x62>
		layer->weights[i] = 0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699a      	ldr	r2, [r3, #24]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
	for(int i=h*(w-1); i<h*w; i++){
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbed      	blt.n	8001128 <OL_increaseWeightDim+0x4c>
	}

	if(layer->ALGORITHM == MODE_CWR || layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_OL_batch ||
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001150:	2b02      	cmp	r3, #2
 8001152:	d00f      	beq.n	8001174 <OL_increaseWeightDim+0x98>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001158:	2b03      	cmp	r3, #3
 800115a:	d00b      	beq.n	8001174 <OL_increaseWeightDim+0x98>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	2b04      	cmp	r3, #4
 8001162:	d007      	beq.n	8001174 <OL_increaseWeightDim+0x98>
	   layer->ALGORITHM == MODE_OL_V2_batch || layer->ALGORITHM == MODE_LWF_batch){
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	if(layer->ALGORITHM == MODE_CWR || layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_OL_batch ||
 8001168:	2b05      	cmp	r3, #5
 800116a:	d003      	beq.n	8001174 <OL_increaseWeightDim+0x98>
	   layer->ALGORITHM == MODE_OL_V2_batch || layer->ALGORITHM == MODE_LWF_batch){
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	2b06      	cmp	r3, #6
 8001172:	d12d      	bne.n	80011d0 <OL_increaseWeightDim+0xf4>

		layer->weights_2 = realloc(layer->weights_2, h*w*sizeof(float));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4619      	mov	r1, r3
 8001184:	f007 f9c6 	bl	8008514 <realloc>
 8001188:	4602      	mov	r2, r0
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
		if(layer->weights_2== NULL){
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	2b00      	cmp	r3, #0
 8001194:	d103      	bne.n	800119e <OL_increaseWeightDim+0xc2>
			layer->OL_ERROR = REALLOC_WEIGHTS_2;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	220b      	movs	r2, #11
 800119a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}

		// set to 0 new weights
		for(int i=h*(w-1); i<h*w; i++){
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	e00a      	b.n	80011c2 <OL_increaseWeightDim+0xe6>
			layer->weights_2[i] = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
		for(int i=h*(w-1); i<h*w; i++){
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	3301      	adds	r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbed      	blt.n	80011ac <OL_increaseWeightDim+0xd0>
	}

#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <OL_increaseBiasDim>:


/* Use realloc to increase the amount of memory dedicated to the biases  */
void OL_increaseBiasDim(OL_LAYER_STRUCT * layer){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

	int w = layer->WIDTH;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60fb      	str	r3, [r7, #12]

	layer->biases = realloc(layer->biases, w*sizeof(float));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69da      	ldr	r2, [r3, #28]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f007 f98f 	bl	8008514 <realloc>
 80011f6:	4602      	mov	r2, r0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	61da      	str	r2, [r3, #28]
	if(layer->biases==NULL){
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <OL_increaseBiasDim+0x34>
		layer->OL_ERROR = REALLOC_BIASES;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	220c      	movs	r2, #12
 8001208:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->biases[w-1] = 0;				// set to 0 new biases
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69da      	ldr	r2, [r3, #28]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001216:	3b01      	subs	r3, #1
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	601a      	str	r2, [r3, #0]

	if(layer->ALGORITHM==MODE_CWR || layer->ALGORITHM==MODE_LWF || layer->ALGORITHM==MODE_OL_batch  ||
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001226:	2b02      	cmp	r3, #2
 8001228:	d00f      	beq.n	800124a <OL_increaseBiasDim+0x72>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122e:	2b03      	cmp	r3, #3
 8001230:	d00b      	beq.n	800124a <OL_increaseBiasDim+0x72>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	2b04      	cmp	r3, #4
 8001238:	d007      	beq.n	800124a <OL_increaseBiasDim+0x72>
	   layer->ALGORITHM==MODE_OL_V2_batch || layer->ALGORITHM==MODE_LWF_batch){
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	if(layer->ALGORITHM==MODE_CWR || layer->ALGORITHM==MODE_LWF || layer->ALGORITHM==MODE_OL_batch  ||
 800123e:	2b05      	cmp	r3, #5
 8001240:	d003      	beq.n	800124a <OL_increaseBiasDim+0x72>
	   layer->ALGORITHM==MODE_OL_V2_batch || layer->ALGORITHM==MODE_LWF_batch){
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001246:	2b06      	cmp	r3, #6
 8001248:	d11d      	bne.n	8001286 <OL_increaseBiasDim+0xae>

		layer->biases_2 = realloc(layer->biases_2, w*sizeof(float));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4619      	mov	r1, r3
 8001254:	4610      	mov	r0, r2
 8001256:	f007 f95d 	bl	8008514 <realloc>
 800125a:	4602      	mov	r2, r0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
		if(layer->biases_2==NULL){
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d103      	bne.n	8001270 <OL_increaseBiasDim+0x98>
			layer->OL_ERROR = REALLOC_BIASES_2;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	220d      	movs	r2, #13
 800126c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}
		layer->biases_2[w-1] = 0;		// set to 0 new biases
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800127a:	3b01      	subs	r3, #1
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
	}

#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <OL_increaseYtrueDim>:


/* Use realloc to increase the amount of memory dedicated to y_true  */
void OL_increaseYtrueDim(OL_LAYER_STRUCT * layer){
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]

	layer->y_true = realloc(layer->y_true, layer->WIDTH*sizeof(float));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4619      	mov	r1, r3
 80012a2:	4610      	mov	r0, r2
 80012a4:	f007 f936 	bl	8008514 <realloc>
 80012a8:	4602      	mov	r2, r0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
	if(layer->y_true==NULL){
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d103      	bne.n	80012be <OL_increaseYtrueDim+0x30>
		layer->OL_ERROR = REALLOC_Y_TRUE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2211      	movs	r2, #17
 80012ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <OL_increaseLabel>:

/* Use realloc to increase the amount of memory dedicated to the labels  */
void OL_increaseLabel(OL_LAYER_STRUCT * layer, char new_letter){
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]

	int w = layer->WIDTH;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	60fb      	str	r3, [r7, #12]

	layer->label = realloc(layer->label, w*sizeof(char));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f007 f917 	bl	8008514 <realloc>
 80012e6:	4602      	mov	r2, r0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	615a      	str	r2, [r3, #20]
	if(layer->label==NULL){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d103      	bne.n	80012fc <OL_increaseLabel+0x36>
		layer->OL_ERROR = REALLOC_LABEL;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	220e      	movs	r2, #14
 80012f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	layer->label[w-1] = new_letter;		// save in labels the new letter
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3b01      	subs	r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	701a      	strb	r2, [r3, #0]
	OL_updateRAMcounter(layer);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f001 fc2e 	bl	8002b6c <OL_updateRAMcounter>

};
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <OL_increaseYpredDim>:


/* Use realloc to increase the amount of memory dedicated to the y prediction arrays  */
void OL_increaseYpredDim(OL_LAYER_STRUCT * layer){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

	layer->y_pred = realloc(layer->y_pred, layer->WIDTH*sizeof(float));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4619      	mov	r1, r3
 800132c:	4610      	mov	r0, r2
 800132e:	f007 f8f1 	bl	8008514 <realloc>
 8001332:	4602      	mov	r2, r0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	621a      	str	r2, [r3, #32]
	if(layer->y_pred==NULL){
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d103      	bne.n	8001348 <OL_increaseYpredDim+0x30>
		layer->OL_ERROR = REALLOC_Y_PRED;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	220f      	movs	r2, #15
 8001344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	if(layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_LWF_batch){
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134c:	2b03      	cmp	r3, #3
 800134e:	d003      	beq.n	8001358 <OL_increaseYpredDim+0x40>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001354:	2b06      	cmp	r3, #6
 8001356:	d113      	bne.n	8001380 <OL_increaseYpredDim+0x68>
		layer->y_pred_2 = realloc(layer->y_pred_2, layer->WIDTH*sizeof(float));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4619      	mov	r1, r3
 8001364:	4610      	mov	r0, r2
 8001366:	f007 f8d5 	bl	8008514 <realloc>
 800136a:	4602      	mov	r2, r0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
		if(layer->y_pred_2==NULL){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001374:	2b00      	cmp	r3, #0
 8001376:	d103      	bne.n	8001380 <OL_increaseYpredDim+0x68>
			layer->OL_ERROR = REALLOC_Y_PRED_2;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2210      	movs	r2, #16
 800137c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <OL_resetInfo>:




/* Resets the values that are stored in the struct as 'info parameters'  */
void OL_resetInfo(OL_LAYER_STRUCT * layer){
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

	layer->prediction_correct = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	layer->new_class = 0;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	layer->vowel_guess = 'Q';		// Q is a letter that is not in the dataset, is considered the NULL option
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2251      	movs	r2, #81	; 0x51
 80013a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <OL_lettToSoft>:


/* Transforms a letter in an array of 0 and 1. This is used for computing the error committed
 * from the moel since the last layer is a softmax.  */
void OL_lettToSoft(OL_LAYER_STRUCT * layer, char *lett){
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]

	// Check in the label array letter by letter, if the letter is the same put a 1 in the correct position
	for(int i=0; i<layer->WIDTH; i++){
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	e01c      	b.n	80013fe <OL_lettToSoft+0x4a>
		if(lett[0] == layer->label[i]){
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6959      	ldr	r1, [r3, #20]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	440b      	add	r3, r1
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d108      	bne.n	80013e8 <OL_lettToSoft+0x34>
			layer->y_true[i] = 1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e007      	b.n	80013f8 <OL_lettToSoft+0x44>
		}else{
			layer->y_true[i] = 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3301      	adds	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbdd      	blt.n	80013c4 <OL_lettToSoft+0x10>
		}
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <OL_feedForward>:


/* Performs the feed forward operation. It's just a product of matrices  and a sum with an array  */
void OL_feedForward(OL_LAYER_STRUCT * layer, float * weights, float * input, float * bias, float * y_pred){
 8001416:	b480      	push	{r7}
 8001418:	b08b      	sub	sp, #44	; 0x2c
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	603b      	str	r3, [r7, #0]

	int h = layer->HEIGHT;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	61bb      	str	r3, [r7, #24]
	int w = layer->WIDTH;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	617b      	str	r3, [r7, #20]

	// Reset the prediction
	for(int i=0; i<layer->WIDTH; i++){
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	e009      	b.n	800144a <OL_feedForward+0x34>
		y_pred[i]=0;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800143c:	4413      	add	r3, r2
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	3301      	adds	r3, #1
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf0      	blt.n	8001436 <OL_feedForward+0x20>
	}

	// Perform the feed forward
	for(int i=0; i<w; i++){
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
 8001458:	e041      	b.n	80014de <OL_feedForward+0xc8>
		for(int j=0; j< h; j++){
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e023      	b.n	80014a8 <OL_feedForward+0x92>
			y_pred[i] += weights[h*i+j]*input[j];
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001466:	4413      	add	r3, r2
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6a3a      	ldr	r2, [r7, #32]
 8001470:	fb02 f203 	mul.w	r2, r2, r3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	4413      	add	r3, r2
 800147e:	edd3 6a00 	vldr	s13, [r3]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001498:	4413      	add	r3, r2
 800149a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149e:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j< h; j++){
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbd7      	blt.n	8001460 <OL_feedForward+0x4a>
		}
		y_pred[i] += bias[i];
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014b6:	4413      	add	r3, r2
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ce:	4413      	add	r3, r2
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<w; i++){
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	3301      	adds	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
 80014de:	6a3a      	ldr	r2, [r7, #32]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbb9      	blt.n	800145a <OL_feedForward+0x44>
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	372c      	adds	r7, #44	; 0x2c
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <OL_softmax>:


/*Takes a array in input and computes the softmax operation on that array  */
void OL_softmax(OL_LAYER_STRUCT * layer, float * y_pred){
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]

	// Softmax function taken from web

	int size = layer->WIDTH;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	613b      	str	r3, [r7, #16]
    float m, sum, constant;

	  if(((layer->counter-1) % 10 == 0) && (layer->counter >= 100)){
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	1e59      	subs	r1, r3, #1
 800150a:	4b58      	ldr	r3, [pc, #352]	; (800166c <OL_softmax+0x178>)
 800150c:	fb83 2301 	smull	r2, r3, r3, r1
 8001510:	109a      	asrs	r2, r3, #2
 8001512:	17cb      	asrs	r3, r1, #31
 8001514:	1ad2      	subs	r2, r2, r3
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	1aca      	subs	r2, r1, r3
 8001520:	2a00      	cmp	r2, #0
 8001522:	d106      	bne.n	8001532 <OL_softmax+0x3e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b63      	cmp	r3, #99	; 0x63
 800152a:	dd02      	ble.n	8001532 <OL_softmax+0x3e>
		  layer->batch_size = 8;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2208      	movs	r2, #8
 8001530:	711a      	strb	r2, [r3, #4]
	  }

    m = y_pred[0];
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i =0; i<size; i++){
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	e015      	b.n	800156a <OL_softmax+0x76>
    	if(m<y_pred[i]){
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800154e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d505      	bpl.n	8001564 <OL_softmax+0x70>
    		m = y_pred[i];
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i =0; i<size; i++){
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	3301      	adds	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	429a      	cmp	r2, r3
 8001570:	dbe5      	blt.n	800153e <OL_softmax+0x4a>
    	}
    }

    sum = 0;
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
    for (int i=0; i<size; i++){
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	e029      	b.n	80015d2 <OL_softmax+0xde>
    	sum += exp(y_pred[i] - m);
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	4413      	add	r3, r2
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800158e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001592:	ee17 0a90 	vmov	r0, s15
 8001596:	f7fe ffdf 	bl	8000558 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	ec43 2b10 	vmov	d0, r2, r3
 80015a2:	f009 f91d 	bl	800a7e0 <exp>
 80015a6:	ec55 4b10 	vmov	r4, r5, d0
 80015aa:	6a38      	ldr	r0, [r7, #32]
 80015ac:	f7fe ffd4 	bl	8000558 <__aeabi_f2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7fe fe70 	bl	800029c <__adddf3>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff faf8 	bl	8000bb8 <__aeabi_d2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	623b      	str	r3, [r7, #32]
    for (int i=0; i<size; i++){
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	3301      	adds	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbd1      	blt.n	800157e <OL_softmax+0x8a>
    }

    constant = m + log(sum);
 80015da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015dc:	f7fe ffbc 	bl	8000558 <__aeabi_f2d>
 80015e0:	4604      	mov	r4, r0
 80015e2:	460d      	mov	r5, r1
 80015e4:	6a38      	ldr	r0, [r7, #32]
 80015e6:	f7fe ffb7 	bl	8000558 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	ec43 2b10 	vmov	d0, r2, r3
 80015f2:	f009 f945 	bl	800a880 <log>
 80015f6:	ec53 2b10 	vmov	r2, r3, d0
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7fe fe4d 	bl	800029c <__adddf3>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff fad5 	bl	8000bb8 <__aeabi_d2f>
 800160e:	4603      	mov	r3, r0
 8001610:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<size; i++){
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e020      	b.n	800165a <OL_softmax+0x166>
    	y_pred[i] = exp(y_pred[i] - constant);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	4413      	add	r3, r2
 8001620:	ed93 7a00 	vldr	s14, [r3]
 8001624:	edd7 7a03 	vldr	s15, [r7, #12]
 8001628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162c:	ee17 0a90 	vmov	r0, s15
 8001630:	f7fe ff92 	bl	8000558 <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	ec43 2b10 	vmov	d0, r2, r3
 800163c:	f009 f8d0 	bl	800a7e0 <exp>
 8001640:	ec51 0b10 	vmov	r0, r1, d0
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	18d4      	adds	r4, r2, r3
 800164c:	f7ff fab4 	bl	8000bb8 <__aeabi_d2f>
 8001650:	4603      	mov	r3, r0
 8001652:	6023      	str	r3, [r4, #0]
    for(int i=0; i<size; i++){
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbda      	blt.n	8001618 <OL_softmax+0x124>
    }
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bdb0      	pop	{r4, r5, r7, pc}
 800166c:	66666667 	.word	0x66666667

08001670 <OL_checkNewClass>:




/* Check if the letter just received is already known. If not increase dimensions of the layer.  */
void OL_checkNewClass(OL_LAYER_STRUCT * layer, char *letter){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]

	int found = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<layer->WIDTH; i++){
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	e00d      	b.n	80016a0 <OL_checkNewClass+0x30>
		if(letter[0] == layer->label[i]){
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6959      	ldr	r1, [r3, #20]
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	440b      	add	r3, r1
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d101      	bne.n	800169a <OL_checkNewClass+0x2a>
			found = 1;
 8001696:	2301      	movs	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<layer->WIDTH; i++){
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	3301      	adds	r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbec      	blt.n	8001684 <OL_checkNewClass+0x14>
		}
	}

	// If the letter has not been found
	if(found==0){
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d11a      	bne.n	80016e6 <OL_checkNewClass+0x76>
		// Update info
		layer->new_class = 1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		layer->WIDTH = layer->WIDTH+1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60da      	str	r2, [r3, #12]
		// Update dimensions
		OL_increaseLabel(layer, letter[0]);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fdfc 	bl	80012c6 <OL_increaseLabel>
		OL_increaseBiasDim(layer);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fd82 	bl	80011d8 <OL_increaseBiasDim>
		OL_increaseYpredDim(layer);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fe1f 	bl	8001318 <OL_increaseYpredDim>
		OL_increaseYtrueDim(layer);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fdd7 	bl	800128e <OL_increaseYtrueDim>
		OL_increaseWeightDim(layer);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fcfb 	bl	80010dc <OL_increaseWeightDim>
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <OL_compareLabels>:



/* Compare the prediction and the true label. If the max values of both arrays are in the
 * same positition in the array the prediction is correct.  */
void OL_compareLabels(OL_LAYER_STRUCT * layer){
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]

	uint8_t max_pred = 0;	// USed ofr saving the maximum value
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
	uint8_t max_true = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73bb      	strb	r3, [r7, #14]
	uint8_t max_j_pred;		// Used for saving the position where the max value is
	uint8_t max_j_true;

	// Find max of both prediction and true label
	for(int j=0; j<layer->WIDTH; j++){
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	e04a      	b.n	800179a <OL_compareLabels+0xac>
		if(max_true < layer->y_true[j]){
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	d50e      	bpl.n	8001744 <OL_compareLabels+0x56>
			max_j_true = j;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	733b      	strb	r3, [r7, #12]
			max_true = layer->y_true[j];
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800173c:	edc7 7a00 	vstr	s15, [r7]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	73bb      	strb	r3, [r7, #14]
		}
		if(max_pred < layer->y_pred[j]){
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1a      	ldr	r2, [r3, #32]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	d516      	bpl.n	8001794 <OL_compareLabels+0xa6>
			max_j_pred = j;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	737b      	strb	r3, [r7, #13]
			max_pred = layer->y_pred[j];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1a      	ldr	r2, [r3, #32]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177c:	edc7 7a00 	vstr	s15, [r7]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	73fb      	strb	r3, [r7, #15]
			layer->vowel_guess = layer->label[j];
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4413      	add	r3, r2
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	for(int j=0; j<layer->WIDTH; j++){
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	3301      	adds	r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbaf      	blt.n	8001704 <OL_compareLabels+0x16>
		}
	}

	// If the maximum values are in different position of the array -> prediction is WRONG
	if(max_j_true != max_j_pred){
 80017a4:	7b3a      	ldrb	r2, [r7, #12]
 80017a6:	7b7b      	ldrb	r3, [r7, #13]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d004      	beq.n	80017b6 <OL_compareLabels+0xc8>
		layer->prediction_correct = 1;				// wrong
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80017b4:	e003      	b.n	80017be <OL_compareLabels+0xd0>
	}else{
		layer->prediction_correct = 2;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2202      	movs	r2, #2
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	// Used from the LWF algorithm
	if(layer->ALGORITHM == MODE_CWR){
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d10b      	bne.n	80017de <OL_compareLabels+0xf0>
		layer->found_lett[max_j_true] += 1;		// Update the found_lett array
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ca:	7b3b      	ldrb	r3, [r7, #12]
 80017cc:	4413      	add	r3, r2
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	440b      	add	r3, r1
 80017d8:	3201      	adds	r2, #1
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <OL_train>:
// #############################################


/* This function is the most important part of the TinyOL script. Inside here an IF decides which algorithm
 * to apply, thus changing the update of the weights.  */
void OL_train(OL_LAYER_STRUCT * layer, float * input, char *letter){
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b0ae      	sub	sp, #184	; 0xb8
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]

	// Values in common between all algorithms
	int w = layer->WIDTH;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	653b      	str	r3, [r7, #80]	; 0x50
	int h = layer->HEIGHT;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	64fb      	str	r3, [r7, #76]	; 0x4c
	layer->vowel_guess = 0;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e


	// ***************************************************************
	//     ***** OL ALGORITHM      |      ***** OL_V2 ALGORITHM
	if(layer->ALGORITHM == MODE_OL || layer->ALGORITHM == MODE_OL_V2){
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <OL_train+0x32>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001818:	2b01      	cmp	r3, #1
 800181a:	f040 80dd 	bne.w	80019d8 <OL_train+0x1ec>
 800181e:	466b      	mov	r3, sp
 8001820:	461d      	mov	r5, r3

		float cost[w];
 8001822:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001824:	1e63      	subs	r3, r4, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	4623      	mov	r3, r4
 800182a:	4618      	mov	r0, r3
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	014b      	lsls	r3, r1, #5
 800183a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800183e:	0142      	lsls	r2, r0, #5
 8001840:	4623      	mov	r3, r4
 8001842:	4618      	mov	r0, r3
 8001844:	f04f 0100 	mov.w	r1, #0
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	014b      	lsls	r3, r1, #5
 8001852:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001856:	0142      	lsls	r2, r0, #5
 8001858:	4623      	mov	r3, r4
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	3307      	adds	r3, #7
 800185e:	08db      	lsrs	r3, r3, #3
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	ebad 0d03 	sub.w	sp, sp, r3
 8001866:	ab02      	add	r3, sp, #8
 8001868:	3303      	adds	r3, #3
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]

		// Inference with current weights
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6999      	ldr	r1, [r3, #24]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f7ff fdc7 	bl	8001416 <OL_feedForward>

#ifdef DEBUG_SEND_HISTORY
		// Fill the array with the history of PRE SOFTMAX
		for(int k=0; k<8; k++){
 8001888:	2300      	movs	r3, #0
 800188a:	657b      	str	r3, [r7, #84]	; 0x54
 800188c:	e009      	b.n	80018a2 <OL_train+0xb6>
			sendPreSoftmaxUART(layer, k, k*4, msgPreSoftmax);
 800188e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001890:	009a      	lsls	r2, r3, #2
 8001892:	4bae      	ldr	r3, [pc, #696]	; (8001b4c <OL_train+0x360>)
 8001894:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f001 f8e6 	bl	8002a68 <sendPreSoftmaxUART>
		for(int k=0; k<8; k++){
 800189c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189e:	3301      	adds	r3, #1
 80018a0:	657b      	str	r3, [r7, #84]	; 0x54
 80018a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a4:	2b07      	cmp	r3, #7
 80018a6:	ddf2      	ble.n	800188e <OL_train+0xa2>
		}
#endif

		OL_softmax(layer, layer->y_pred);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4619      	mov	r1, r3
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7ff fe20 	bl	80014f4 <OL_softmax>

		int j_start = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	65bb      	str	r3, [r7, #88]	; 0x58
		// If algorithms is OL_V2, don't update the vowels
		if(layer->ALGORITHM == MODE_OL_V2){
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <OL_train+0xd8>
			j_start = 5;
 80018c0:	2305      	movs	r3, #5
 80018c2:	65bb      	str	r3, [r7, #88]	; 0x58
		}

		for(int j=j_start; j<w; j++){
 80018c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018c8:	e077      	b.n	80019ba <OL_train+0x1ce>
			cost[j] = layer->y_pred[j]-layer->y_true[j];			    // Compute the cost
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a1a      	ldr	r2, [r3, #32]
 80018ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	ed93 7a00 	vldr	s14, [r3]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	edc3 7a00 	vstr	s15, [r3]
			if (cost[j]==0) continue;									// If nothing to update skip loop
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	d052      	beq.n	80019b2 <OL_train+0x1c6>

			for(int i=0; i<h; i++){
 800190c:	2300      	movs	r3, #0
 800190e:	663b      	str	r3, [r7, #96]	; 0x60
 8001910:	e02f      	b.n	8001972 <OL_train+0x186>
				layer->weights[j*h+i] -= cost[j]*input[i]*layer->l_rate;	// Update the weights
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001918:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800191a:	fb01 f103 	mul.w	r1, r1, r3
 800191e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001920:	440b      	add	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	edd3 6a00 	vldr	s13, [r3]
 8001936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	4413      	add	r3, r2
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	699a      	ldr	r2, [r3, #24]
 8001954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001956:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001958:	fb01 f103 	mul.w	r1, r1, r3
 800195c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800195e:	440b      	add	r3, r1
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001968:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 800196c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800196e:	3301      	adds	r3, #1
 8001970:	663b      	str	r3, [r7, #96]	; 0x60
 8001972:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001976:	429a      	cmp	r2, r3
 8001978:	dbcb      	blt.n	8001912 <OL_train+0x126>
			}
			layer->biases[j] -= cost[j]*layer->l_rate;					// Update the biases
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	ed93 7a00 	vldr	s14, [r3]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	edd3 6a00 	vldr	s13, [r3]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ac:	edc3 7a00 	vstr	s15, [r3]
 80019b0:	e000      	b.n	80019b4 <OL_train+0x1c8>
			if (cost[j]==0) continue;									// If nothing to update skip loop
 80019b2:	bf00      	nop
		for(int j=j_start; j<w; j++){
 80019b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b6:	3301      	adds	r3, #1
 80019b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019be:	429a      	cmp	r2, r3
 80019c0:	db83      	blt.n	80018ca <OL_train+0xde>
		}

		OL_compareLabels(layer);										// Check if prediction is correct
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff fe93 	bl	80016ee <OL_compareLabels>

		layer->counter +=1;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	46ad      	mov	sp, r5
	if(layer->ALGORITHM == MODE_OL || layer->ALGORITHM == MODE_OL_V2){
 80019d4:	f000 be47 	b.w	8002666 <OL_train+0xe7a>
		OL_updateRAMcounter(layer);
#endif

	// ***************************************************************
	//     ***** OL ALGORITHM BATCH            |      ***** OL_V2 ALGORITHM BATCH
	}else if(layer->ALGORITHM == MODE_OL_batch || layer->ALGORITHM == MODE_OL_V2_batch){
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d004      	beq.n	80019ea <OL_train+0x1fe>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	f040 815f 	bne.w	8001ca8 <OL_train+0x4bc>
 80019ea:	466b      	mov	r3, sp
 80019ec:	461d      	mov	r5, r3

		float cost[w];
 80019ee:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80019f0:	1e63      	subs	r3, r4, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	4623      	mov	r3, r4
 80019f6:	4618      	mov	r0, r3
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	014b      	lsls	r3, r1, #5
 8001a06:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a0a:	0142      	lsls	r2, r0, #5
 8001a0c:	4623      	mov	r3, r4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f04f 0100 	mov.w	r1, #0
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	014b      	lsls	r3, r1, #5
 8001a1e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a22:	0142      	lsls	r2, r0, #5
 8001a24:	4623      	mov	r3, r4
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	3307      	adds	r3, #7
 8001a2a:	08db      	lsrs	r3, r3, #3
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	ebad 0d03 	sub.w	sp, sp, r3
 8001a32:	ab02      	add	r3, sp, #8
 8001a34:	3303      	adds	r3, #3
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]

		// Inference with current weights
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6999      	ldr	r1, [r3, #24]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	69da      	ldr	r2, [r3, #28]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f7ff fce1 	bl	8001416 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff fd4a 	bl	80014f4 <OL_softmax>

		int j_start = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	667b      	str	r3, [r7, #100]	; 0x64
		// If algorithms is OL_V2, don't update the vowels
		if(layer->ALGORITHM == MODE_OL_V2_batch){
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d101      	bne.n	8001a70 <OL_train+0x284>
			j_start = 5;
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	667b      	str	r3, [r7, #100]	; 0x64
		}

		for(int j=j_start; j<w; j++){
 8001a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a74:	e070      	b.n	8001b58 <OL_train+0x36c>
			cost[j] = layer->y_pred[j]-layer->y_true[j];			// Compute the cost
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	ed93 7a00 	vldr	s14, [r3]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	edc3 7a00 	vstr	s15, [r3]
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	d04b      	beq.n	8001b50 <OL_train+0x364>

			for(int i=0; i<h; i++){
 8001ab8:	2300      	movs	r3, #0
 8001aba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001abc:	e02a      	b.n	8001b14 <OL_train+0x328>
				layer->weights_2[j*h+i] += cost[j]*input[i];	// Update weights
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ac4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ac6:	fb01 f103 	mul.w	r1, r1, r3
 8001aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001acc:	440b      	add	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	ed93 7a00 	vldr	s14, [r3]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	edd3 6a00 	vldr	s13, [r3]
 8001ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4413      	add	r3, r2
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001af8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001afa:	fb01 f103 	mul.w	r1, r1, r3
 8001afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b00:	440b      	add	r3, r1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8001b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b10:	3301      	adds	r3, #1
 8001b12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbd0      	blt.n	8001abe <OL_train+0x2d2>
			}
			layer->biases_2[j] += cost[j];					// Update biases
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	ed93 7a00 	vldr	s14, [r3]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b44:	edc3 7a00 	vstr	s15, [r3]
 8001b48:	e003      	b.n	8001b52 <OL_train+0x366>
 8001b4a:	bf00      	nop
 8001b4c:	20001e70 	.word	0x20001e70
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001b50:	bf00      	nop
		for(int j=j_start; j<w; j++){
 8001b52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b54:	3301      	adds	r3, #1
 8001b56:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	db8a      	blt.n	8001a76 <OL_train+0x28a>
		}

		OL_compareLabels(layer);					// Check if prediction is correct or not
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f7ff fdc4 	bl	80016ee <OL_compareLabels>

		// When reached the end of a batch
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size)==0) ){
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8094 	beq.w	8001c98 <OL_train+0x4ac>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	7912      	ldrb	r2, [r2, #4]
 8001b78:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b7c:	fb02 f201 	mul.w	r2, r2, r1
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 8088 	bne.w	8001c98 <OL_train+0x4ac>

			int j_start = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	673b      	str	r3, [r7, #112]	; 0x70

			// If algorithms is OL_V2, don't update the vowels
			if(layer->ALGORITHM == MODE_OL_V2_batch){
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d101      	bne.n	8001b98 <OL_train+0x3ac>
				j_start=5;
 8001b94:	2305      	movs	r3, #5
 8001b96:	673b      	str	r3, [r7, #112]	; 0x70
			}

			for(int j=j_start; j<w; j++){
 8001b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b9a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b9c:	e078      	b.n	8001c90 <OL_train+0x4a4>
				for(int i=0; i<h; i++){
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ba2:	e042      	b.n	8001c2a <OL_train+0x43e>
					layer->weights[j*h+i] -= layer->weights_2[j*h+i]/layer->batch_size*layer->l_rate;	// Update weights
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001baa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001bac:	fb01 f103 	mul.w	r1, r1, r3
 8001bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bb2:	440b      	add	r3, r1
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	ed93 7a00 	vldr	s14, [r3]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001bc4:	fb01 f103 	mul.w	r1, r1, r3
 8001bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bca:	440b      	add	r3, r1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	ed93 6a00 	vldr	s12, [r3]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	791b      	ldrb	r3, [r3, #4]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bf4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001bf6:	fb01 f103 	mul.w	r1, r1, r3
 8001bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bfc:	440b      	add	r3, r1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	edc3 7a00 	vstr	s15, [r3]
					layer->weights_2[j*h+i] = 0;														// Reset
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c12:	fb01 f103 	mul.w	r1, r1, r3
 8001c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c18:	440b      	add	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8001c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c26:	3301      	adds	r3, #1
 8001c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c2a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbb8      	blt.n	8001ba4 <OL_train+0x3b8>
				}
				layer->biases[j] -= layer->biases_2[j]/layer->batch_size*layer->l_rate;				// Update biases
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	ed93 7a00 	vldr	s14, [r3]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	ed93 6a00 	vldr	s12, [r3]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	791b      	ldrb	r3, [r3, #4]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	69da      	ldr	r2, [r3, #28]
 8001c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c76:	edc3 7a00 	vstr	s15, [r3]
				layer->biases_2[j] = 0;																	// Reset
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
			for(int j=j_start; j<w; j++){
 8001c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	677b      	str	r3, [r7, #116]	; 0x74
 8001c90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c94:	429a      	cmp	r2, r3
 8001c96:	db82      	blt.n	8001b9e <OL_train+0x3b2>
			}
		}

		layer->counter +=1;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	46ad      	mov	sp, r5
	}else if(layer->ALGORITHM == MODE_OL_batch || layer->ALGORITHM == MODE_OL_V2_batch){
 8001ca4:	f000 bcdf 	b.w	8002666 <OL_train+0xe7a>
		OL_updateRAMcounter(layer);
#endif

	// *************************************
	// ***** CWR ALGORITHM
	}else if (layer->ALGORITHM == MODE_CWR){
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	f040 81c6 	bne.w	800203e <OL_train+0x852>
 8001cb2:	466b      	mov	r3, sp
 8001cb4:	461d      	mov	r5, r3

		float cost[w];
 8001cb6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001cb8:	1e63      	subs	r3, r4, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f04f 0100 	mov.w	r1, #0
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	014b      	lsls	r3, r1, #5
 8001cce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cd2:	0142      	lsls	r2, r0, #5
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	014b      	lsls	r3, r1, #5
 8001ce6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cea:	0142      	lsls	r2, r0, #5
 8001cec:	4623      	mov	r3, r4
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	3307      	adds	r3, #7
 8001cf2:	08db      	lsrs	r3, r3, #3
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	ebad 0d03 	sub.w	sp, sp, r3
 8001cfa:	ab02      	add	r3, sp, #8
 8001cfc:	3303      	adds	r3, #3
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	623b      	str	r3, [r7, #32]

		// Prediction
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	4613      	mov	r3, r2
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff fb7d 	bl	8001416 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4619      	mov	r1, r3
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff fbe6 	bl	80014f4 <OL_softmax>

		for(int j=0; j<w; j++){
 8001d28:	2300      	movs	r3, #0
 8001d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d2c:	e07e      	b.n	8001e2c <OL_train+0x640>
			cost[j] = layer->y_pred[j]-layer->y_true[j];		  	// Cost computation
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	ed93 7a00 	vldr	s14, [r3]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4e:	6a3a      	ldr	r2, [r7, #32]
 8001d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	edc3 7a00 	vstr	s15, [r3]
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001d5a:	6a3a      	ldr	r2, [r7, #32]
 8001d5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	d059      	beq.n	8001e24 <OL_train+0x638>

			// Back propagation on TW
			for(int i=0; i<h; i++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d76:	e034      	b.n	8001de2 <OL_train+0x5f6>
				layer->weights_2[j*h+i] -= cost[j]*input[i]*layer->l_rate;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d80:	fb01 f103 	mul.w	r1, r1, r3
 8001d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d88:	440b      	add	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	ed93 7a00 	vldr	s14, [r3]
 8001d92:	6a3a      	ldr	r2, [r7, #32]
 8001d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	edd3 6a00 	vldr	s13, [r3]
 8001d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	4413      	add	r3, r2
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001dc2:	fb01 f103 	mul.w	r1, r1, r3
 8001dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dca:	440b      	add	r3, r1
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd4:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8001dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbc5      	blt.n	8001d78 <OL_train+0x58c>
			}
			layer->biases_2[j] -= cost[j]*layer->l_rate;  // Back propagation on TB
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	ed93 7a00 	vldr	s14, [r3]
 8001dfa:	6a3a      	ldr	r2, [r7, #32]
 8001dfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	edd3 6a00 	vldr	s13, [r3]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
 8001e22:	e000      	b.n	8001e26 <OL_train+0x63a>
			if (cost[j]==0) continue;								// If nothing to update skip loop
 8001e24:	bf00      	nop
		for(int j=0; j<w; j++){
 8001e26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e28:	3301      	adds	r3, #1
 8001e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f6ff af7c 	blt.w	8001d2e <OL_train+0x542>
		}

		OL_compareLabels(layer);			// Check if prediction is correct or not
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fc59 	bl	80016ee <OL_compareLabels>


		// When batch ends
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size) == 0) ){
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80f5 	beq.w	8002030 <OL_train+0x844>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	7912      	ldrb	r2, [r2, #4]
 8001e4e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e52:	fb02 f201 	mul.w	r2, r2, r1
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 80e9 	bne.w	8002030 <OL_train+0x844>

			// Update CW
			for(int j=0; j<w; j++){
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e64:	e093      	b.n	8001f8e <OL_train+0x7a2>
				if(layer->found_lett[j] != 0){
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e6e:	4413      	add	r3, r2
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8086 	beq.w	8001f84 <OL_train+0x798>
					for(int i=0; i<h; i++){
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e7e:	e049      	b.n	8001f14 <OL_train+0x728>
						layer->weights[j*h+i] = ((layer->weights[j*h+i]*layer->found_lett[j])+layer->weights_2[j*h+i])/(layer->found_lett[j]+1);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e8a:	fb01 f103 	mul.w	r1, r1, r3
 8001e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e92:	440b      	add	r3, r1
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ebc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ebe:	fb01 f103 	mul.w	r1, r1, r3
 8001ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ec6:	440b      	add	r3, r1
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001edc:	4413      	add	r3, r2
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ef2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ef4:	fb01 f103 	mul.w	r1, r1, r3
 8001ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001efc:	440b      	add	r3, r1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f06:	edc3 7a00 	vstr	s15, [r3]
					for(int i=0; i<h; i++){
 8001f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbb0      	blt.n	8001e80 <OL_train+0x694>
					}
					layer->biases[j] = ((layer->biases[j]*layer->found_lett[j])+layer->biases_2[j])/(layer->found_lett[j]+1);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	ed93 7a00 	vldr	s14, [r3]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f62:	4413      	add	r3, r2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f80:	edc3 7a00 	vstr	s15, [r3]
			for(int j=0; j<w; j++){
 8001f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f94:	429a      	cmp	r2, r3
 8001f96:	f6ff af66 	blt.w	8001e66 <OL_train+0x67a>
				}
			}

			// Reset TW
			for(int j=0; j<w; j++){
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001fa0:	e041      	b.n	8002026 <OL_train+0x83a>
				for(int i=0; i<h; i++){
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fa8:	e01e      	b.n	8001fe8 <OL_train+0x7fc>
					layer->weights_2[j*h+i] = layer->weights[j*h+i];	// reset
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fb2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fb4:	fb01 f103 	mul.w	r1, r1, r3
 8001fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fbc:	440b      	add	r3, r1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	441a      	add	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001fcc:	fb00 f003 	mul.w	r0, r0, r3
 8001fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd4:	4403      	add	r3, r0
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8001fde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fe8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbdb      	blt.n	8001faa <OL_train+0x7be>
				}
				layer->biases_2[j] = layer->biases[j];					// reset
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	441a      	add	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	601a      	str	r2, [r3, #0]
				layer->found_lett[j] = 0;								// reset
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002016:	4413      	add	r3, r2
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<w; j++){
 800201c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002020:	3301      	adds	r3, #1
 8002022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002026:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800202a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800202c:	429a      	cmp	r2, r3
 800202e:	dbb8      	blt.n	8001fa2 <OL_train+0x7b6>
			}
		}

		layer->counter +=1;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	46ad      	mov	sp, r5
#if READ_FREE_RAM==1
		OL_updateRAMcounter(layer);
#endif

	}
};
 800203c:	e313      	b.n	8002666 <OL_train+0xe7a>
	}else if(layer->ALGORITHM == MODE_LWF){
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	2b03      	cmp	r3, #3
 8002044:	f040 8157 	bne.w	80022f6 <OL_train+0xb0a>
 8002048:	466b      	mov	r3, sp
 800204a:	461d      	mov	r5, r3
		float cost_norm[w];
 800204c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800204e:	1e63      	subs	r3, r4, #1
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
 8002052:	4623      	mov	r3, r4
 8002054:	4618      	mov	r0, r3
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	014b      	lsls	r3, r1, #5
 8002064:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002068:	0142      	lsls	r2, r0, #5
 800206a:	4623      	mov	r3, r4
 800206c:	4618      	mov	r0, r3
 800206e:	f04f 0100 	mov.w	r1, #0
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	014b      	lsls	r3, r1, #5
 800207c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002080:	0142      	lsls	r2, r0, #5
 8002082:	4623      	mov	r3, r4
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	3307      	adds	r3, #7
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	ebad 0d03 	sub.w	sp, sp, r3
 8002090:	ab02      	add	r3, sp, #8
 8002092:	3303      	adds	r3, #3
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
		float cost_LWF[w];
 800209a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800209c:	1e63      	subs	r3, r4, #1
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
 80020a0:	4623      	mov	r3, r4
 80020a2:	4618      	mov	r0, r3
 80020a4:	f04f 0100 	mov.w	r1, #0
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	014b      	lsls	r3, r1, #5
 80020b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020b6:	0142      	lsls	r2, r0, #5
 80020b8:	4623      	mov	r3, r4
 80020ba:	4618      	mov	r0, r3
 80020bc:	f04f 0100 	mov.w	r1, #0
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	014b      	lsls	r3, r1, #5
 80020ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020ce:	0142      	lsls	r2, r0, #5
 80020d0:	4623      	mov	r3, r4
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	3307      	adds	r3, #7
 80020d6:	08db      	lsrs	r3, r3, #3
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	ebad 0d03 	sub.w	sp, sp, r3
 80020de:	ab02      	add	r3, sp, #8
 80020e0:	3303      	adds	r3, #3
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		float lambda=0;
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6999      	ldr	r1, [r3, #24]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff f988 	bl	8001416 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4619      	mov	r1, r3
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f7ff f9f1 	bl	80014f4 <OL_softmax>
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff f976 	bl	8001416 <OL_feedForward>
		OL_softmax(layer, layer->y_pred_2);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212e:	4619      	mov	r1, r3
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff f9df 	bl	80014f4 <OL_softmax>
		lambda = 100/(100+layer->counter);					// Update lambda
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	3364      	adds	r3, #100	; 0x64
 800213c:	2264      	movs	r2, #100	; 0x64
 800213e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		for(int j=0; j<w; j++){
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002154:	e0bf      	b.n	80022d6 <OL_train+0xaea>
			cost_norm[j] = layer->y_pred[j]-layer->y_true[j];	// Compute normal cost
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	ed93 7a00 	vldr	s14, [r3]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800217c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	edc3 7a00 	vstr	s15, [r3]
			cost_LWF[j]  = layer->y_pred[j]-layer->y_pred_2[j];	// Compute LWF cost
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021c0:	e04c      	b.n	800225c <OL_train+0xa70>
				layer->weights[j*h+i] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate*input[i];	// Update weights
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80021cc:	fb01 f103 	mul.w	r1, r1, r3
 80021d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021d4:	440b      	add	r3, r1
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	ed93 7a00 	vldr	s14, [r3]
 80021de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	edd3 6a00 	vldr	s13, [r3]
 80021ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80021f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	ed93 6a00 	vldr	s12, [r3]
 800220a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800220e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002212:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4413      	add	r3, r2
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800223a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800223c:	fb01 f103 	mul.w	r1, r1, r3
 8002240:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002244:	440b      	add	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224e:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8002252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002256:	3301      	adds	r3, #1
 8002258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800225c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002262:	429a      	cmp	r2, r3
 8002264:	dbad      	blt.n	80021c2 <OL_train+0x9d6>
			layer->biases[j] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate;					// Update biases
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002278:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	edd3 6a00 	vldr	s13, [r3]
 8002284:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002288:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800228c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002290:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	ed93 6a00 	vldr	s12, [r3]
 80022a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c8:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 80022cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022d0:	3301      	adds	r3, #1
 80022d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022dc:	429a      	cmp	r2, r3
 80022de:	f6ff af3a 	blt.w	8002156 <OL_train+0x96a>
		OL_compareLabels(layer);																	// Check if prediction is correct or not
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff fa03 	bl	80016ee <OL_compareLabels>
		layer->counter +=1;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	46ad      	mov	sp, r5
};
 80022f4:	e1b7      	b.n	8002666 <OL_train+0xe7a>
	}else if(layer->ALGORITHM == MODE_LWF_batch){
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	f040 81b3 	bne.w	8002666 <OL_train+0xe7a>
 8002300:	466b      	mov	r3, sp
 8002302:	461d      	mov	r5, r3
		float cost_norm[w];
 8002304:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002306:	1e63      	subs	r3, r4, #1
 8002308:	64bb      	str	r3, [r7, #72]	; 0x48
 800230a:	4623      	mov	r3, r4
 800230c:	4618      	mov	r0, r3
 800230e:	f04f 0100 	mov.w	r1, #0
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	014b      	lsls	r3, r1, #5
 800231c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002320:	0142      	lsls	r2, r0, #5
 8002322:	4623      	mov	r3, r4
 8002324:	4618      	mov	r0, r3
 8002326:	f04f 0100 	mov.w	r1, #0
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	014b      	lsls	r3, r1, #5
 8002334:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002338:	0142      	lsls	r2, r0, #5
 800233a:	4623      	mov	r3, r4
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3307      	adds	r3, #7
 8002340:	08db      	lsrs	r3, r3, #3
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	ebad 0d03 	sub.w	sp, sp, r3
 8002348:	ab02      	add	r3, sp, #8
 800234a:	3303      	adds	r3, #3
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	647b      	str	r3, [r7, #68]	; 0x44
		float cost_LWF[w];
 8002352:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002354:	1e63      	subs	r3, r4, #1
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
 8002358:	4623      	mov	r3, r4
 800235a:	4618      	mov	r0, r3
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	014b      	lsls	r3, r1, #5
 800236a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800236e:	0142      	lsls	r2, r0, #5
 8002370:	4623      	mov	r3, r4
 8002372:	4618      	mov	r0, r3
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	014b      	lsls	r3, r1, #5
 8002382:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002386:	0142      	lsls	r2, r0, #5
 8002388:	4623      	mov	r3, r4
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	3307      	adds	r3, #7
 800238e:	08db      	lsrs	r3, r3, #3
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	ebad 0d03 	sub.w	sp, sp, r3
 8002396:	ab02      	add	r3, sp, #8
 8002398:	3303      	adds	r3, #3
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6999      	ldr	r1, [r3, #24]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7ff f82f 	bl	8001416 <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4619      	mov	r1, r3
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff f898 	bl	80014f4 <OL_softmax>
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff f81d 	bl	8001416 <OL_feedForward>
		OL_softmax(layer, layer->y_pred_2);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e0:	4619      	mov	r1, r3
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f7ff f886 	bl	80014f4 <OL_softmax>
        if(layer->counter<layer->batch_size){
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	7912      	ldrb	r2, [r2, #4]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	da04      	bge.n	80023fe <OL_train+0xc12>
        	lambda = 1;
 80023f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023fc:	e00c      	b.n	8002418 <OL_train+0xc2c>
        	lambda = layer->batch_size/layer->counter;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	791b      	ldrb	r3, [r3, #4]
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	fb92 f3f3 	sdiv	r3, r2, r3
 800240c:	ee07 3a90 	vmov	s15, r3
 8002410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002414:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		for(int j=0; j<w; j++){
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800241e:	e0bf      	b.n	80025a0 <OL_train+0xdb4>
			cost_norm[j] = layer->y_pred[j]-layer->y_true[j];	// compute normal cost
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	ed93 7a00 	vldr	s14, [r3]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002434:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	edc3 7a00 	vstr	s15, [r3]
			cost_LWF[j]  = layer->y_pred[j]-layer->y_pred_2[j];	// compute LWF cost
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800248a:	e04c      	b.n	8002526 <OL_train+0xd3a>
				layer->weights[j*h+i] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate*input[i];	// Update weights
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002494:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002496:	fb01 f103 	mul.w	r1, r1, r3
 800249a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800249e:	440b      	add	r3, r1
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	edd3 6a00 	vldr	s13, [r3]
 80024b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80024ba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80024be:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	ed93 6a00 	vldr	s12, [r3]
 80024d4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80024d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	4413      	add	r3, r2
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002504:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002506:	fb01 f103 	mul.w	r1, r1, r3
 800250a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800250e:	440b      	add	r3, r1
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002518:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 800251c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002520:	3301      	adds	r3, #1
 8002522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002526:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252c:	429a      	cmp	r2, r3
 800252e:	dbad      	blt.n	800248c <OL_train+0xca0>
			layer->biases[j] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate;					// Update biases
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	edd3 6a00 	vldr	s13, [r3]
 800254e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002552:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002556:	ee76 7a67 	vsub.f32	s15, s12, s15
 800255a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800255e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	ed93 6a00 	vldr	s12, [r3]
 800256c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002570:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002574:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002592:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 8002596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800259a:	3301      	adds	r3, #1
 800259c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025a0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80025a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025a6:	429a      	cmp	r2, r3
 80025a8:	f6ff af3a 	blt.w	8002420 <OL_train+0xc34>
		OL_compareLabels(layer);																	// Check if prediction is correct or not
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff f89e 	bl	80016ee <OL_compareLabels>
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size) == 0) ){
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d04e      	beq.n	8002658 <OL_train+0xe6c>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	7912      	ldrb	r2, [r2, #4]
 80025c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80025c6:	fb02 f201 	mul.w	r2, r2, r1
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d143      	bne.n	8002658 <OL_train+0xe6c>
			for(int j=0; j<w; j++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025d6:	e03a      	b.n	800264e <OL_train+0xe62>
				for(int i=0; i<h; i++){
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025de:	e01e      	b.n	800261e <OL_train+0xe32>
					layer->weights_2[j*h+i] = layer->weights[j*h+i];	// Reset
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025ea:	fb01 f103 	mul.w	r1, r1, r3
 80025ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025f2:	440b      	add	r3, r1
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	441a      	add	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002600:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002602:	fb00 f003 	mul.w	r0, r0, r3
 8002606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800260a:	4403      	add	r3, r0
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002618:	3301      	adds	r3, #1
 800261a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800261e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	429a      	cmp	r2, r3
 8002626:	dbdb      	blt.n	80025e0 <OL_train+0xdf4>
				layer->biases_2[j] = layer->biases[j];					// Reset
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	441a      	add	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	601a      	str	r2, [r3, #0]
			for(int j=0; j<w; j++){
 8002644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002648:	3301      	adds	r3, #1
 800264a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800264e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002654:	429a      	cmp	r2, r3
 8002656:	dbbf      	blt.n	80025d8 <OL_train+0xdec>
		layer->counter +=1;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	46ad      	mov	sp, r5
};
 8002664:	e7ff      	b.n	8002666 <OL_train+0xe7a>
 8002666:	bf00      	nop
 8002668:	37b0      	adds	r7, #176	; 0xb0
 800266a:	46bd      	mov	sp, r7
 800266c:	bdb0      	pop	{r4, r5, r7, pc}
 800266e:	bf00      	nop

08002670 <sendBiasUART>:





void sendBiasUART(OL_LAYER_STRUCT * layer, int j, int i, uint8_t * msgBias){
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]

	msgBias[i]   = 0;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	4413      	add	r3, r2
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
	msgBias[i+1] = 0;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3301      	adds	r3, #1
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
	msgBias[i+2] = 0;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3302      	adds	r3, #2
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	4413      	add	r3, r2
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
	msgBias[i+3] = 0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3303      	adds	r3, #3
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]

	if(j<layer->WIDTH){
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	da55      	bge.n	8002762 <sendBiasUART+0xf2>
		int bias_val = layer->biases[j]*1000000000;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002770 <sendBiasUART+0x100>
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d0:	ee17 3a90 	vmov	r3, s15
 80026d4:	617b      	str	r3, [r7, #20]

		if(bias_val<0){
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	da24      	bge.n	8002726 <sendBiasUART+0xb6>
			bias_val = -bias_val;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	425b      	negs	r3, r3
 80026e0:	617b      	str	r3, [r7, #20]

			msgBias[i]   = bias_val   & byte_1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]
			msgBias[i+1] = (bias_val  & byte_2)>>8;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	1219      	asrs	r1, r3, #8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3301      	adds	r3, #1
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	b2ca      	uxtb	r2, r1
 80026fc:	701a      	strb	r2, [r3, #0]
			msgBias[i+2] = (bias_val  & byte_3)>>16;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1419      	asrs	r1, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3302      	adds	r3, #2
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	4413      	add	r3, r2
 800270a:	b2ca      	uxtb	r2, r1
 800270c:	701a      	strb	r2, [r3, #0]
			msgBias[i+3] = ((bias_val & byte_4) | (0x80000000))>>24;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	0e1b      	lsrs	r3, r3, #24
 8002712:	b2da      	uxtb	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3303      	adds	r3, #3
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	440b      	add	r3, r1
 800271c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]
			msgBias[i+1] = (bias_val & byte_2)>>8;
			msgBias[i+2] = (bias_val & byte_3)>>16;
			msgBias[i+3] = (bias_val & byte_4)>>24;
		}
	}
}
 8002724:	e01d      	b.n	8002762 <sendBiasUART+0xf2>
			msgBias[i]   = bias_val  & byte_1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
			msgBias[i+1] = (bias_val & byte_2)>>8;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	1219      	asrs	r1, r3, #8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3301      	adds	r3, #1
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	4413      	add	r3, r2
 800273e:	b2ca      	uxtb	r2, r1
 8002740:	701a      	strb	r2, [r3, #0]
			msgBias[i+2] = (bias_val & byte_3)>>16;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	1419      	asrs	r1, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3302      	adds	r3, #2
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	b2ca      	uxtb	r2, r1
 8002750:	701a      	strb	r2, [r3, #0]
			msgBias[i+3] = (bias_val & byte_4)>>24;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	0e19      	lsrs	r1, r3, #24
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3303      	adds	r3, #3
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	4413      	add	r3, r2
 800275e:	b2ca      	uxtb	r2, r1
 8002760:	701a      	strb	r2, [r3, #0]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	4e6e6b28 	.word	0x4e6e6b28

08002774 <sendWeightsUART>:




void sendWeightsUART(OL_LAYER_STRUCT * layer, int j, int i, uint8_t * msgWeights){
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]

	msgWeights[i]   = 0;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	4413      	add	r3, r2
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
	msgWeights[i+1] = 0;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3301      	adds	r3, #1
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
	msgWeights[i+2] = 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3302      	adds	r3, #2
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
	msgWeights[i+3] = 0;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3303      	adds	r3, #3
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]

	int weight_val = layer->weights[j]*100000000;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002868 <sendWeightsUART+0xf4>
 80027c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ca:	ee17 3a90 	vmov	r3, s15
 80027ce:	617b      	str	r3, [r7, #20]

	if(weight_val<0){
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	da24      	bge.n	8002820 <sendWeightsUART+0xac>
		weight_val = -weight_val;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	425b      	negs	r3, r3
 80027da:	617b      	str	r3, [r7, #20]

		msgWeights[i]   = weight_val   & byte_1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
		msgWeights[i+1] = (weight_val  & byte_2)>>8;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	1219      	asrs	r1, r3, #8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3301      	adds	r3, #1
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	b2ca      	uxtb	r2, r1
 80027f6:	701a      	strb	r2, [r3, #0]
		msgWeights[i+2] = (weight_val  & byte_3)>>16;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	1419      	asrs	r1, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3302      	adds	r3, #2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	4413      	add	r3, r2
 8002804:	b2ca      	uxtb	r2, r1
 8002806:	701a      	strb	r2, [r3, #0]
		msgWeights[i+3] = ((weight_val & byte_4) | (0x80000000))>>24;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	0e1b      	lsrs	r3, r3, #24
 800280c:	b2da      	uxtb	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3303      	adds	r3, #3
 8002812:	6839      	ldr	r1, [r7, #0]
 8002814:	440b      	add	r3, r1
 8002816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
		msgWeights[i]   = weight_val  & byte_1;
		msgWeights[i+1] = (weight_val & byte_2)>>8;
		msgWeights[i+2] = (weight_val & byte_3)>>16;
		msgWeights[i+3] = (weight_val & byte_4)>>24;
	}
}
 800281e:	e01d      	b.n	800285c <sendWeightsUART+0xe8>
		msgWeights[i]   = weight_val  & byte_1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	4413      	add	r3, r2
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]
		msgWeights[i+1] = (weight_val & byte_2)>>8;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	1219      	asrs	r1, r3, #8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3301      	adds	r3, #1
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	4413      	add	r3, r2
 8002838:	b2ca      	uxtb	r2, r1
 800283a:	701a      	strb	r2, [r3, #0]
		msgWeights[i+2] = (weight_val & byte_3)>>16;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	1419      	asrs	r1, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3302      	adds	r3, #2
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	4413      	add	r3, r2
 8002848:	b2ca      	uxtb	r2, r1
 800284a:	701a      	strb	r2, [r3, #0]
		msgWeights[i+3] = (weight_val & byte_4)>>24;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	0e19      	lsrs	r1, r3, #24
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3303      	adds	r3, #3
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	4413      	add	r3, r2
 8002858:	b2ca      	uxtb	r2, r1
 800285a:	701a      	strb	r2, [r3, #0]
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	4cbebc20 	.word	0x4cbebc20

0800286c <sendFrozenOutUART>:



void sendFrozenOutUART(OL_LAYER_STRUCT * layer, int j, int i, float * out_data, uint8_t * msgFrozenOut){
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]

	msgFrozenOut[i]   = 0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	4413      	add	r3, r2
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
	msgFrozenOut[i+1] = 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3301      	adds	r3, #1
 8002888:	6a3a      	ldr	r2, [r7, #32]
 800288a:	4413      	add	r3, r2
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
	msgFrozenOut[i+2] = 0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3302      	adds	r3, #2
 8002894:	6a3a      	ldr	r2, [r7, #32]
 8002896:	4413      	add	r3, r2
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
	msgFrozenOut[i+3] = 0;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3303      	adds	r3, #3
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	4413      	add	r3, r2
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

	int frozen_val = out_data[j]*1000000;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002960 <sendFrozenOutUART+0xf4>
 80028b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028c0:	ee17 3a90 	vmov	r3, s15
 80028c4:	617b      	str	r3, [r7, #20]

	if(frozen_val<0){
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	da24      	bge.n	8002916 <sendFrozenOutUART+0xaa>
		frozen_val = -frozen_val;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	425b      	negs	r3, r3
 80028d0:	617b      	str	r3, [r7, #20]

		msgFrozenOut[i]   = frozen_val   & byte_1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a3a      	ldr	r2, [r7, #32]
 80028d6:	4413      	add	r3, r2
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
		msgFrozenOut[i+1] = (frozen_val  & byte_2)>>8;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1219      	asrs	r1, r3, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3301      	adds	r3, #1
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	4413      	add	r3, r2
 80028ea:	b2ca      	uxtb	r2, r1
 80028ec:	701a      	strb	r2, [r3, #0]
		msgFrozenOut[i+2] = (frozen_val  & byte_3)>>16;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1419      	asrs	r1, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3302      	adds	r3, #2
 80028f6:	6a3a      	ldr	r2, [r7, #32]
 80028f8:	4413      	add	r3, r2
 80028fa:	b2ca      	uxtb	r2, r1
 80028fc:	701a      	strb	r2, [r3, #0]
		msgFrozenOut[i+3] = ((frozen_val & byte_4) | (0x80000000))>>24;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	0e1b      	lsrs	r3, r3, #24
 8002902:	b2da      	uxtb	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3303      	adds	r3, #3
 8002908:	6a39      	ldr	r1, [r7, #32]
 800290a:	440b      	add	r3, r1
 800290c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]
		msgFrozenOut[i]   = frozen_val  & byte_1;
		msgFrozenOut[i+1] = (frozen_val & byte_2)>>8;
		msgFrozenOut[i+2] = (frozen_val & byte_3)>>16;
		msgFrozenOut[i+3] = (frozen_val & byte_4)>>24;
	}
}
 8002914:	e01d      	b.n	8002952 <sendFrozenOutUART+0xe6>
		msgFrozenOut[i]   = frozen_val  & byte_1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a3a      	ldr	r2, [r7, #32]
 800291a:	4413      	add	r3, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]
		msgFrozenOut[i+1] = (frozen_val & byte_2)>>8;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	1219      	asrs	r1, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3301      	adds	r3, #1
 800292a:	6a3a      	ldr	r2, [r7, #32]
 800292c:	4413      	add	r3, r2
 800292e:	b2ca      	uxtb	r2, r1
 8002930:	701a      	strb	r2, [r3, #0]
		msgFrozenOut[i+2] = (frozen_val & byte_3)>>16;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	1419      	asrs	r1, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3302      	adds	r3, #2
 800293a:	6a3a      	ldr	r2, [r7, #32]
 800293c:	4413      	add	r3, r2
 800293e:	b2ca      	uxtb	r2, r1
 8002940:	701a      	strb	r2, [r3, #0]
		msgFrozenOut[i+3] = (frozen_val & byte_4)>>24;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	0e19      	lsrs	r1, r3, #24
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3303      	adds	r3, #3
 800294a:	6a3a      	ldr	r2, [r7, #32]
 800294c:	4413      	add	r3, r2
 800294e:	b2ca      	uxtb	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	49742400 	.word	0x49742400

08002964 <sendSoftmaxUART>:




void sendSoftmaxUART(OL_LAYER_STRUCT * layer, int j, int i, uint8_t * msgSoftmax){
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]

	msgSoftmax[i]   = 0;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	4413      	add	r3, r2
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
	msgSoftmax[i+1] = 0;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3301      	adds	r3, #1
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
	msgSoftmax[i+2] = 0;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3302      	adds	r3, #2
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4413      	add	r3, r2
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
	msgSoftmax[i+3] = 0;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3303      	adds	r3, #3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	4413      	add	r3, r2
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]

	int softmax_val = layer->y_pred[j]*1000000;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1a      	ldr	r2, [r3, #32]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002a64 <sendSoftmaxUART+0x100>
 80029b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ba:	ee17 3a90 	vmov	r3, s15
 80029be:	617b      	str	r3, [r7, #20]

	if(j<layer->WIDTH){
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	da45      	bge.n	8002a56 <sendSoftmaxUART+0xf2>
		if(softmax_val<0){
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	da24      	bge.n	8002a1a <sendSoftmaxUART+0xb6>
			softmax_val = -softmax_val;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	425b      	negs	r3, r3
 80029d4:	617b      	str	r3, [r7, #20]

			msgSoftmax[i]   = softmax_val   & byte_1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]
			msgSoftmax[i+1] = (softmax_val  & byte_2)>>8;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1219      	asrs	r1, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3301      	adds	r3, #1
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	b2ca      	uxtb	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]
			msgSoftmax[i+2] = (softmax_val  & byte_3)>>16;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	1419      	asrs	r1, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3302      	adds	r3, #2
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	b2ca      	uxtb	r2, r1
 8002a00:	701a      	strb	r2, [r3, #0]
			msgSoftmax[i+3] = ((softmax_val & byte_4) | (0x80000000))>>24;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	0e1b      	lsrs	r3, r3, #24
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3303      	adds	r3, #3
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	440b      	add	r3, r1
 8002a10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]
			msgSoftmax[i+1] = (softmax_val & byte_2)>>8;
			msgSoftmax[i+2] = (softmax_val & byte_3)>>16;
			msgSoftmax[i+3] = (softmax_val & byte_4)>>24;
		}
	}
}
 8002a18:	e01d      	b.n	8002a56 <sendSoftmaxUART+0xf2>
			msgSoftmax[i]   = softmax_val  & byte_1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
			msgSoftmax[i+1] = (softmax_val & byte_2)>>8;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	1219      	asrs	r1, r3, #8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	b2ca      	uxtb	r2, r1
 8002a34:	701a      	strb	r2, [r3, #0]
			msgSoftmax[i+2] = (softmax_val & byte_3)>>16;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	1419      	asrs	r1, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	b2ca      	uxtb	r2, r1
 8002a44:	701a      	strb	r2, [r3, #0]
			msgSoftmax[i+3] = (softmax_val & byte_4)>>24;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	0e19      	lsrs	r1, r3, #24
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3303      	adds	r3, #3
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4413      	add	r3, r2
 8002a52:	b2ca      	uxtb	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	49742400 	.word	0x49742400

08002a68 <sendPreSoftmaxUART>:




void sendPreSoftmaxUART(OL_LAYER_STRUCT * layer, int j, int i, uint8_t * msgPreSoftmax){
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]

	msgPreSoftmax[i]   = 0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
	msgPreSoftmax[i+1] = 0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3301      	adds	r3, #1
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
	msgPreSoftmax[i+2] = 0;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3302      	adds	r3, #2
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
	msgPreSoftmax[i+3] = 0;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3303      	adds	r3, #3
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]

	int preSoftmax_val = layer->y_pred[j]*10000;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a1a      	ldr	r2, [r3, #32]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002b68 <sendPreSoftmaxUART+0x100>
 8002ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002abe:	ee17 3a90 	vmov	r3, s15
 8002ac2:	617b      	str	r3, [r7, #20]

	if(j<layer->WIDTH){
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	da45      	bge.n	8002b5a <sendPreSoftmaxUART+0xf2>
		if(preSoftmax_val<0){
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	da24      	bge.n	8002b1e <sendPreSoftmaxUART+0xb6>
			preSoftmax_val = -preSoftmax_val;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	425b      	negs	r3, r3
 8002ad8:	617b      	str	r3, [r7, #20]

			msgPreSoftmax[i]   = preSoftmax_val   & byte_1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
			msgPreSoftmax[i+1] = (preSoftmax_val  & byte_2)>>8;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	1219      	asrs	r1, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3301      	adds	r3, #1
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	b2ca      	uxtb	r2, r1
 8002af4:	701a      	strb	r2, [r3, #0]
			msgPreSoftmax[i+2] = (preSoftmax_val  & byte_3)>>16;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	1419      	asrs	r1, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3302      	adds	r3, #2
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	b2ca      	uxtb	r2, r1
 8002b04:	701a      	strb	r2, [r3, #0]
			msgPreSoftmax[i+3] = ((preSoftmax_val & byte_4) | (0x80000000))>>24;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	0e1b      	lsrs	r3, r3, #24
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3303      	adds	r3, #3
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	440b      	add	r3, r1
 8002b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]
			msgPreSoftmax[i+1] = (preSoftmax_val & byte_2)>>8;
			msgPreSoftmax[i+2] = (preSoftmax_val & byte_3)>>16;
			msgPreSoftmax[i+3] = (preSoftmax_val & byte_4)>>24;
		}
	}
}
 8002b1c:	e01d      	b.n	8002b5a <sendPreSoftmaxUART+0xf2>
			msgPreSoftmax[i]   = preSoftmax_val  & byte_1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]
			msgPreSoftmax[i+1] = (preSoftmax_val & byte_2)>>8;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	1219      	asrs	r1, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3301      	adds	r3, #1
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	b2ca      	uxtb	r2, r1
 8002b38:	701a      	strb	r2, [r3, #0]
			msgPreSoftmax[i+2] = (preSoftmax_val & byte_3)>>16;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	1419      	asrs	r1, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3302      	adds	r3, #2
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	4413      	add	r3, r2
 8002b46:	b2ca      	uxtb	r2, r1
 8002b48:	701a      	strb	r2, [r3, #0]
			msgPreSoftmax[i+3] = (preSoftmax_val & byte_4)>>24;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	0e19      	lsrs	r1, r3, #24
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3303      	adds	r3, #3
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	b2ca      	uxtb	r2, r1
 8002b58:	701a      	strb	r2, [r3, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	461c4000 	.word	0x461c4000

08002b6c <OL_updateRAMcounter>:





void OL_updateRAMcounter(OL_LAYER_STRUCT * layer){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

	if( (layer->counter>100) && (layer->counter%5==0) ){
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b64      	cmp	r3, #100	; 0x64
 8002b7a:	dd18      	ble.n	8002bae <OL_updateRAMcounter+0x42>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <OL_updateRAMcounter+0x4c>)
 8002b82:	fb83 2301 	smull	r2, r3, r3, r1
 8002b86:	105a      	asrs	r2, r3, #1
 8002b88:	17cb      	asrs	r3, r1, #31
 8002b8a:	1ad2      	subs	r2, r2, r3
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	1aca      	subs	r2, r1, r3
 8002b94:	2a00      	cmp	r2, #0
 8002b96:	d10a      	bne.n	8002bae <OL_updateRAMcounter+0x42>
		int tmp = FreeMem();
 8002b98:	f000 f810 	bl	8002bbc <FreeMem>
 8002b9c:	60f8      	str	r0, [r7, #12]
		if(tmp < layer->freeRAMbytes){
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	da02      	bge.n	8002bae <OL_updateRAMcounter+0x42>
			layer->freeRAMbytes = tmp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	66666667 	.word	0x66666667

08002bbc <FreeMem>:
    struct elem *next;
    char dummy[FREEMEM_CELL-2];
};


int FreeMem(void) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
    int counter;
    struct elem *head, *current, *nextone;
    current = head = (struct elem*) malloc(sizeof(struct elem));
 8002bc2:	2068      	movs	r0, #104	; 0x68
 8002bc4:	f004 fece 	bl	8007964 <malloc>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60bb      	str	r3, [r7, #8]
    if (head == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <FreeMem+0x1e>
        return 0;      /*No memory available.*/
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e022      	b.n	8002c20 <FreeMem+0x64>
    counter = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
   // __disable_irq();
    do {
        counter++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3301      	adds	r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
        current->next = (struct elem*) malloc(sizeof(struct elem));
 8002be4:	2068      	movs	r0, #104	; 0x68
 8002be6:	f004 febd 	bl	8007964 <malloc>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	601a      	str	r2, [r3, #0]
        current = current->next;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60bb      	str	r3, [r7, #8]
    } while (current != NULL);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1ef      	bne.n	8002bde <FreeMem+0x22>
    /* Now counter holds the number of type elem
       structures we were able to allocate. We
       must free them all before returning. */
    current = head;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60bb      	str	r3, [r7, #8]
    do {
        nextone = current->next;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	603b      	str	r3, [r7, #0]
        free(current);
 8002c08:	68b8      	ldr	r0, [r7, #8]
 8002c0a:	f004 feb3 	bl	8007974 <free>
        current = nextone;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	60bb      	str	r3, [r7, #8]
    } while (nextone != NULL);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f4      	bne.n	8002c02 <FreeMem+0x46>
   // __enable_irq();

    return counter*FREEMEM_CELL;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2264      	movs	r2, #100	; 0x64
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <MX_CRC_Init+0x20>)
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <MX_CRC_Init+0x24>)
 8002c30:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002c32:	4805      	ldr	r0, [pc, #20]	; (8002c48 <MX_CRC_Init+0x20>)
 8002c34:	f000 ffd3 	bl	8003bde <HAL_CRC_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002c3e:	f000 fc71 	bl	8003524 <Error_Handler>
  }

}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20001ff4 	.word	0x20001ff4
 8002c4c:	40023000 	.word	0x40023000

08002c50 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <HAL_CRC_MspInit+0x3c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10d      	bne.n	8002c7e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_CRC_MspInit+0x40>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_CRC_MspInit+0x40>)
 8002c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_CRC_MspInit+0x40>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40023000 	.word	0x40023000
 8002c90:	40023800 	.word	0x40023800

08002c94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9a:	f107 0314 	add.w	r3, r7, #20
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a44      	ldr	r2, [pc, #272]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a3d      	ldr	r2, [pc, #244]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a36      	ldr	r2, [pc, #216]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a2f      	ldr	r2, [pc, #188]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <MX_GPIO_Init+0x130>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2120      	movs	r1, #32
 8002d1e:	482a      	ldr	r0, [pc, #168]	; (8002dc8 <MX_GPIO_Init+0x134>)
 8002d20:	f001 f920 	bl	8003f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002d24:	2200      	movs	r2, #0
 8002d26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d2a:	4828      	ldr	r0, [pc, #160]	; (8002dcc <MX_GPIO_Init+0x138>)
 8002d2c:	f001 f91a 	bl	8003f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <MX_GPIO_Init+0x13c>)
 8002d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d3e:	f107 0314 	add.w	r3, r7, #20
 8002d42:	4619      	mov	r1, r3
 8002d44:	4823      	ldr	r0, [pc, #140]	; (8002dd4 <MX_GPIO_Init+0x140>)
 8002d46:	f000 ff89 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4819      	ldr	r0, [pc, #100]	; (8002dc8 <MX_GPIO_Init+0x134>)
 8002d62:	f000 ff7b 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2300      	movs	r3, #0
 8002d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4813      	ldr	r0, [pc, #76]	; (8002dcc <MX_GPIO_Init+0x138>)
 8002d80:	f000 ff6c 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d84:	2320      	movs	r3, #32
 8002d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <MX_GPIO_Init+0x144>)
 8002d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4619      	mov	r1, r3
 8002d96:	480d      	ldr	r0, [pc, #52]	; (8002dcc <MX_GPIO_Init+0x138>)
 8002d98:	f000 ff60 	bl	8003c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	2017      	movs	r0, #23
 8002da2:	f000 fee6 	bl	8003b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002da6:	2017      	movs	r0, #23
 8002da8:	f000 feff 	bl	8003baa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	2028      	movs	r0, #40	; 0x28
 8002db2:	f000 fede 	bl	8003b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002db6:	2028      	movs	r0, #40	; 0x28
 8002db8:	f000 fef7 	bl	8003baa <HAL_NVIC_EnableIRQ>

}
 8002dbc:	bf00      	nop
 8002dbe:	3728      	adds	r7, #40	; 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40020400 	.word	0x40020400
 8002dd0:	10210000 	.word	0x10210000
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	10110000 	.word	0x10110000

08002ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b0ee      	sub	sp, #440	; 0x1b8
 8002de0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002de2:	f000 fd55 	bl	8003890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002de6:	f000 fa9d 	bl	8003324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dea:	f7ff ff53 	bl	8002c94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002dee:	f000 fcab 	bl	8003748 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002df2:	f7ff ff19 	bl	8002c28 <MX_CRC_Init>
  MX_TIM10_Init();
 8002df6:	f000 fc5d 	bl	80036b4 <MX_TIM10_Init>
  MX_X_CUBE_AI_Init();
 8002dfa:	f003 f815 	bl	8005e28 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

#ifdef DEBUG_SEND_HISTORY
  int numeri[10*8] = {46,13,107,3,57,65,127,81,89,70,
 8002dfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e02:	4a94      	ldr	r2, [pc, #592]	; (8003054 <main+0x278>)
 8002e04:	4618      	mov	r0, r3
 8002e06:	4611      	mov	r1, r2
 8002e08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f004 fdb9 	bl	8007984 <memcpy>
  //	MODE_CWR
  //    MODE_LWF
  //	MODE_OL_batch
  //	MODE_OL_V2_batch
  //	MODE_LWF_batch
  OL_layer.ALGORITHM = MODE_OL;
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	2200      	movs	r2, #0
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38

  OL_layer.batch_size = 8;
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	711a      	strb	r2, [r3, #4]

  // Define the learn rate depending on the algorithm
  if(OL_layer.ALGORITHM       == MODE_OL){
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <main+0x52>
	  OL_layer.l_rate = 0.001;
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	4a8b      	ldr	r2, [pc, #556]	; (8003058 <main+0x27c>)
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e02e      	b.n	8002e8c <main+0xb0>
  }else if(OL_layer.ALGORITHM == MODE_OL_batch){
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d103      	bne.n	8002e3e <main+0x62>
	  OL_layer.l_rate = 0.0001;
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	4a88      	ldr	r2, [pc, #544]	; (800305c <main+0x280>)
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e026      	b.n	8002e8c <main+0xb0>
  }else if(OL_layer.ALGORITHM == MODE_OL_V2){
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d103      	bne.n	8002e4e <main+0x72>
	  OL_layer.l_rate = 0.001;
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	4a83      	ldr	r2, [pc, #524]	; (8003058 <main+0x27c>)
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	e01e      	b.n	8002e8c <main+0xb0>
  }else if(OL_layer.ALGORITHM == MODE_OL_V2_batch){
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d103      	bne.n	8002e5e <main+0x82>
	  OL_layer.l_rate = 0.001;
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	4a7f      	ldr	r2, [pc, #508]	; (8003058 <main+0x27c>)
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e016      	b.n	8002e8c <main+0xb0>
  }else if(OL_layer.ALGORITHM == MODE_CWR){
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d103      	bne.n	8002e6e <main+0x92>
	  OL_layer.l_rate = 0.0005;
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4a7d      	ldr	r2, [pc, #500]	; (8003060 <main+0x284>)
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e00e      	b.n	8002e8c <main+0xb0>
  }else if(OL_layer.ALGORITHM == MODE_LWF){
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d103      	bne.n	8002e7e <main+0xa2>
	  OL_layer.l_rate = 0.001;
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	4a77      	ldr	r2, [pc, #476]	; (8003058 <main+0x27c>)
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e006      	b.n	8002e8c <main+0xb0>
  }else if(OL_layer.ALGORITHM == MODE_LWF_batch){
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d102      	bne.n	8002e8c <main+0xb0>
	  OL_layer.l_rate = 0.0007;
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	4a76      	ldr	r2, [pc, #472]	; (8003064 <main+0x288>)
 8002e8a:	601a      	str	r2, [r3, #0]
  }


  // Initialize all the other values in the struct
  // The values below should always stay the same
  OL_layer.WIDTH    	= 5;
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2205      	movs	r2, #5
 8002e90:	60da      	str	r2, [r3, #12]
  OL_layer.HEIGHT   	= AI_NETWORK_OUT_1_SIZE;
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	611a      	str	r2, [r3, #16]
  OL_layer.counter  	= 0;
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  OL_layer.OL_ERROR 	= 0;
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  OL_layer.freeRAMbytes = 100000000;
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	4a6f      	ldr	r2, [pc, #444]	; (8003068 <main+0x28c>)
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44


  // Allocate all the necessary matrices/arrays
  OL_allocateMemory(&OL_layer);
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f84e 	bl	8000f50 <OL_allocateMemory>


  // Fill up labels
  OL_layer.label[0] = 'A';
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	2241      	movs	r2, #65	; 0x41
 8002eba:	701a      	strb	r2, [r3, #0]
  OL_layer.label[1] = 'E';
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	2245      	movs	r2, #69	; 0x45
 8002ec4:	701a      	strb	r2, [r3, #0]
  OL_layer.label[2] = 'I';
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	3302      	adds	r3, #2
 8002ecc:	2249      	movs	r2, #73	; 0x49
 8002ece:	701a      	strb	r2, [r3, #0]
  OL_layer.label[3] = 'O';
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	224f      	movs	r2, #79	; 0x4f
 8002ed8:	701a      	strb	r2, [r3, #0]
  OL_layer.label[4] = 'U';
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	2255      	movs	r2, #85	; 0x55
 8002ee2:	701a      	strb	r2, [r3, #0]

  // Fill up the weight matrix with the weights from the Keras model
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002eea:	e011      	b.n	8002f10 <main+0x134>
  	  OL_layer.weights[i] = saved_weights[i];
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	495c      	ldr	r1, [pc, #368]	; (800306c <main+0x290>)
 8002efa:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	440a      	add	r2, r1
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002f06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	1d3a      	adds	r2, r7, #4
 8002f16:	6912      	ldr	r2, [r2, #16]
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbe3      	blt.n	8002eec <main+0x110>
  }
  // Fill up the biases array with the weights from the Keras model
  for(int i=0; i<OL_layer.WIDTH; i++){
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002f2a:	e011      	b.n	8002f50 <main+0x174>
	  OL_layer.biases[i] = saved_biases[i];
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	494d      	ldr	r1, [pc, #308]	; (8003070 <main+0x294>)
 8002f3a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	440a      	add	r2, r1
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH; i++){
 8002f46:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	dbe7      	blt.n	8002f2c <main+0x150>
  }

  // Fill up weights2 and biases2 only in the case of LWF
  if(OL_layer.ALGORITHM == MODE_LWF || OL_layer.ALGORITHM == MODE_LWF_batch){
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d003      	beq.n	8002f6c <main+0x190>
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d13b      	bne.n	8002fe4 <main+0x208>
	  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f72:	e011      	b.n	8002f98 <main+0x1bc>
	  	  OL_layer.weights_2[i] = saved_weights[i];
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	493a      	ldr	r1, [pc, #232]	; (800306c <main+0x290>)
 8002f82:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002f86:	0092      	lsls	r2, r2, #2
 8002f88:	440a      	add	r2, r1
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002f8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f92:	3301      	adds	r3, #1
 8002f94:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	1d3a      	adds	r2, r7, #4
 8002f9e:	6912      	ldr	r2, [r2, #16]
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbe3      	blt.n	8002f74 <main+0x198>
	  }
	  for(int i=0; i<OL_layer.WIDTH; i++){
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fb2:	e011      	b.n	8002fd8 <main+0x1fc>
		  OL_layer.biases_2[i] = saved_biases[i];
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	492b      	ldr	r1, [pc, #172]	; (8003070 <main+0x294>)
 8002fc2:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002fc6:	0092      	lsls	r2, r2, #2
 8002fc8:	440a      	add	r2, r1
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<OL_layer.WIDTH; i++){
 8002fce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	dbe7      	blt.n	8002fb4 <main+0x1d8>
	  }
  }

  HAL_TIM_Base_Start_IT(&htim10);	// Start the timer for counting inference time (1 timer increment = 10 micro sec)
 8002fe4:	4823      	ldr	r0, [pc, #140]	; (8003074 <main+0x298>)
 8002fe6:	f001 fca0 	bl	800492a <HAL_TIM_Base_Start_IT>
  while (1)
  {


	  // Enable_inference flag is raised at the end of the data communication between pc-STM (see interrupt callbacks at the end of the main)
	  if(enable_inference == 1){
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <main+0x29c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	f040 815e 	bne.w	80032b0 <main+0x4d4>

		  // *************************
		  //                   DATA IN
		  // *************************
		  // Reset the info carried from the OL struct
		  OL_resetInfo(&OL_layer);
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f9c6 	bl	8001388 <OL_resetInfo>

		  // Decode the message received from the UART communication
		  // The message sent from the PC is specifically encoded in a way that allows
		  // to recognize negative values easily -> explained in the readme file
		  uint8_t tmp;
		  for(int k=0; k<600; k++){
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003002:	e05c      	b.n	80030be <main+0x2e2>
			  tmp = msgRxData[k*2];
 8003004:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <main+0x2a0>)
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
			  if((tmp&128) == 128){
 8003012:	f997 318f 	ldrsb.w	r3, [r7, #399]	; 0x18f
 8003016:	2b00      	cmp	r3, #0
 8003018:	da34      	bge.n	8003084 <main+0x2a8>
				  tmp = tmp & 127;
 800301a:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800301e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003022:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
				  in_data[k] = -((tmp << 8) | (msgRxData[(k*2)+1]));
 8003026:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003030:	0052      	lsls	r2, r2, #1
 8003032:	3201      	adds	r2, #1
 8003034:	4911      	ldr	r1, [pc, #68]	; (800307c <main+0x2a0>)
 8003036:	5c8a      	ldrb	r2, [r1, r2]
 8003038:	4313      	orrs	r3, r2
 800303a:	425b      	negs	r3, r3
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003044:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <main+0x2a4>)
 8003046:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	edc3 7a00 	vstr	s15, [r3]
 8003052:	e02f      	b.n	80030b4 <main+0x2d8>
 8003054:	0800b060 	.word	0x0800b060
 8003058:	3a83126f 	.word	0x3a83126f
 800305c:	38d1b717 	.word	0x38d1b717
 8003060:	3a03126f 	.word	0x3a03126f
 8003064:	3a378034 	.word	0x3a378034
 8003068:	05f5e100 	.word	0x05f5e100
 800306c:	20000000 	.word	0x20000000
 8003070:	20000a00 	.word	0x20000a00
 8003074:	20002b60 	.word	0x20002b60
 8003078:	200010c0 	.word	0x200010c0
 800307c:	20001940 	.word	0x20001940
 8003080:	20002000 	.word	0x20002000
			  }else{
				  in_data[k] = (msgRxData[(k*2)] << 8) | (msgRxData[(k*2)+1]);
 8003084:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4a93      	ldr	r2, [pc, #588]	; (80032d8 <main+0x4fc>)
 800308c:	5cd3      	ldrb	r3, [r2, r3]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003094:	0052      	lsls	r2, r2, #1
 8003096:	3201      	adds	r2, #1
 8003098:	498f      	ldr	r1, [pc, #572]	; (80032d8 <main+0x4fc>)
 800309a:	5c8a      	ldrb	r2, [r1, r2]
 800309c:	4313      	orrs	r3, r2
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a6:	4a8d      	ldr	r2, [pc, #564]	; (80032dc <main+0x500>)
 80030a8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	edc3 7a00 	vstr	s15, [r3]
		  for(int k=0; k<600; k++){
 80030b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80030b8:	3301      	adds	r3, #1
 80030ba:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80030be:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80030c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80030c6:	db9d      	blt.n	8003004 <main+0x228>


		  // *************************
		  //                 INFERENCE
		  // *************************
		  timer_counter = 0;										// Reset time
 80030c8:	4b85      	ldr	r3, [pc, #532]	; (80032e0 <main+0x504>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

		  ai_run_v2(&in_data, &out_data);							// Perform inference from frozen model
 80030ce:	4985      	ldr	r1, [pc, #532]	; (80032e4 <main+0x508>)
 80030d0:	4882      	ldr	r0, [pc, #520]	; (80032dc <main+0x500>)
 80030d2:	f002 fe6b 	bl	8005dac <ai_run_v2>

		  inferenceTime_frozen = timer_counter;						// Measure frozen time
 80030d6:	4b82      	ldr	r3, [pc, #520]	; (80032e0 <main+0x504>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a83      	ldr	r2, [pc, #524]	; (80032e8 <main+0x50c>)
 80030dc:	6013      	str	r3, [r2, #0]

		  OL_checkNewClass(&OL_layer, letter);						// Check if the letter is known, otherwise increase dimensions of weight and biases
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	4982      	ldr	r1, [pc, #520]	; (80032ec <main+0x510>)
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fac4 	bl	8001670 <OL_checkNewClass>
		  OL_lettToSoft(&OL_layer, letter);							// Transform the letter char into a hot one encoded softmax array
 80030e8:	1d3b      	adds	r3, r7, #4
 80030ea:	4980      	ldr	r1, [pc, #512]	; (80032ec <main+0x510>)
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe f961 	bl	80013b4 <OL_lettToSoft>

		  OL_train(&OL_layer, out_data, letter);					// Perform training on last captured sample
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	4a7d      	ldr	r2, [pc, #500]	; (80032ec <main+0x510>)
 80030f6:	497b      	ldr	r1, [pc, #492]	; (80032e4 <main+0x508>)
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe fb77 	bl	80017ec <OL_train>

		  inferenceTime_OL = timer_counter-inferenceTime_frozen;	// Measure OL time
 80030fe:	4b78      	ldr	r3, [pc, #480]	; (80032e0 <main+0x504>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b79      	ldr	r3, [pc, #484]	; (80032e8 <main+0x50c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	4a79      	ldr	r2, [pc, #484]	; (80032f0 <main+0x514>)
 800310a:	6013      	str	r3, [r2, #0]

		  // *************************
		  //                  DATA OUT
		  // *************************
		  // Send info data to pc
		  msgInfo[0] = OL_layer.ALGORITHM;									// int
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4b78      	ldr	r3, [pc, #480]	; (80032f4 <main+0x518>)
 8003114:	701a      	strb	r2, [r3, #0]
		  msgInfo[1] = OL_layer.counter;									// int
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	4b75      	ldr	r3, [pc, #468]	; (80032f4 <main+0x518>)
 800311e:	705a      	strb	r2, [r3, #1]
		  msgInfo[2] = (uint8_t)(inferenceTime_frozen & LOW_BYTE); 	 		// int - low byte
 8003120:	4b71      	ldr	r3, [pc, #452]	; (80032e8 <main+0x50c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <main+0x518>)
 8003128:	709a      	strb	r2, [r3, #2]
		  msgInfo[3] = (uint8_t)((inferenceTime_frozen>>8) & LOW_BYTE); 	// int - high byte
 800312a:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <main+0x50c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <main+0x518>)
 8003134:	70da      	strb	r2, [r3, #3]
		  msgInfo[4] = (uint8_t)(inferenceTime_OL & LOW_BYTE);				// int - low byte
 8003136:	4b6e      	ldr	r3, [pc, #440]	; (80032f0 <main+0x514>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <main+0x518>)
 800313e:	711a      	strb	r2, [r3, #4]
		  msgInfo[5] = (uint8_t)((inferenceTime_OL>>8) & LOW_BYTE);			// int - high byte
 8003140:	4b6b      	ldr	r3, [pc, #428]	; (80032f0 <main+0x514>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	b2da      	uxtb	r2, r3
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <main+0x518>)
 800314a:	715a      	strb	r2, [r3, #5]
		  msgInfo[6] = OL_layer.new_class;									// 0 or 1
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003152:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <main+0x518>)
 8003154:	719a      	strb	r2, [r3, #6]
		  msgInfo[7] = OL_layer.prediction_correct;							// 0, 1, 2
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800315c:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <main+0x518>)
 800315e:	71da      	strb	r2, [r3, #7]
		  msgInfo[8] = OL_layer.WIDTH;										// int
 8003160:	1d3b      	adds	r3, r7, #4
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <main+0x518>)
 8003168:	721a      	strb	r2, [r3, #8]
		  msgInfo[9] = OL_layer.vowel_guess;								// char
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8003170:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <main+0x518>)
 8003172:	725a      	strb	r2, [r3, #9]

		  HAL_UART_Transmit(&huart2, (uint8_t*)msgInfo, INFO_LEN, 100);		// Send message
 8003174:	2364      	movs	r3, #100	; 0x64
 8003176:	220a      	movs	r2, #10
 8003178:	495e      	ldr	r1, [pc, #376]	; (80032f4 <main+0x518>)
 800317a:	485f      	ldr	r0, [pc, #380]	; (80032f8 <main+0x51c>)
 800317c:	f001 fe0b 	bl	8004d96 <HAL_UART_Transmit>


#ifdef DEBUG_SEND_HISTORY
		  // Fill the array with the history of BIAS - SOFTMAX - PRE SOFTMAX
		  for(int k=0; k<8; k++){
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8003186:	e016      	b.n	80031b6 <main+0x3da>
			  sendBiasUART(&OL_layer, k, k*4, msgBias);
 8003188:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800318c:	009a      	lsls	r2, r3, #2
 800318e:	1d38      	adds	r0, r7, #4
 8003190:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <main+0x520>)
 8003192:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8003196:	f7ff fa6b 	bl	8002670 <sendBiasUART>
			  sendSoftmaxUART(&OL_layer, k, k*4, msgSoftmax);
 800319a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800319e:	009a      	lsls	r2, r3, #2
 80031a0:	1d38      	adds	r0, r7, #4
 80031a2:	4b57      	ldr	r3, [pc, #348]	; (8003300 <main+0x524>)
 80031a4:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 80031a8:	f7ff fbdc 	bl	8002964 <sendSoftmaxUART>
		  for(int k=0; k<8; k++){
 80031ac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80031b0:	3301      	adds	r3, #1
 80031b2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80031b6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80031ba:	2b07      	cmp	r3, #7
 80031bc:	dde4      	ble.n	8003188 <main+0x3ac>
		  }

		  // Fill the array with the history of WEIGHTS
		  for(int k=0; k<10*8; k++){
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80031c4:	e011      	b.n	80031ea <main+0x40e>
			  sendWeightsUART(&OL_layer, numeri[k], k*4, msgWeights);   // send weight
 80031c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80031ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031d2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	1d38      	adds	r0, r7, #4
 80031da:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <main+0x528>)
 80031dc:	f7ff faca 	bl	8002774 <sendWeightsUART>
		  for(int k=0; k<10*8; k++){
 80031e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80031e4:	3301      	adds	r3, #1
 80031e6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80031ea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80031ee:	2b4f      	cmp	r3, #79	; 0x4f
 80031f0:	dde9      	ble.n	80031c6 <main+0x3ea>
		  }

		  // Fill the array with the history of FROZEN MODEL OUTPUT
		  for(int k=0; k<128; k++){
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80031f8:	e00f      	b.n	800321a <main+0x43e>
			  sendFrozenOutUART(&OL_layer, k, k*4, out_data, msgFrozenOut);
 80031fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80031fe:	009a      	lsls	r2, r3, #2
 8003200:	1d38      	adds	r0, r7, #4
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <main+0x52c>)
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <main+0x508>)
 8003208:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800320c:	f7ff fb2e 	bl	800286c <sendFrozenOutUART>
		  for(int k=0; k<128; k++){
 8003210:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003214:	3301      	adds	r3, #1
 8003216:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800321a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800321e:	2b7f      	cmp	r3, #127	; 0x7f
 8003220:	ddeb      	ble.n	80031fa <main+0x41e>
		  }

		  if(OL_layer.counter <= 942){
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f240 32ae 	movw	r2, #942	; 0x3ae
 800322a:	4293      	cmp	r3, r2
 800322c:	dc22      	bgt.n	8003274 <main+0x498>
			  HAL_Delay(15); 			// Helps the code to not get stuck, no idea why
 800322e:	200f      	movs	r0, #15
 8003230:	f000 fba0 	bl	8003974 <HAL_Delay>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgBias, 8*4, 100);
 8003234:	2364      	movs	r3, #100	; 0x64
 8003236:	2220      	movs	r2, #32
 8003238:	4930      	ldr	r1, [pc, #192]	; (80032fc <main+0x520>)
 800323a:	482f      	ldr	r0, [pc, #188]	; (80032f8 <main+0x51c>)
 800323c:	f001 fdab 	bl	8004d96 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgWeights, 10*8*4, 100);
 8003240:	2364      	movs	r3, #100	; 0x64
 8003242:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003246:	492f      	ldr	r1, [pc, #188]	; (8003304 <main+0x528>)
 8003248:	482b      	ldr	r0, [pc, #172]	; (80032f8 <main+0x51c>)
 800324a:	f001 fda4 	bl	8004d96 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgFrozenOut, 128*4, 100);
 800324e:	2364      	movs	r3, #100	; 0x64
 8003250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003254:	492c      	ldr	r1, [pc, #176]	; (8003308 <main+0x52c>)
 8003256:	4828      	ldr	r0, [pc, #160]	; (80032f8 <main+0x51c>)
 8003258:	f001 fd9d 	bl	8004d96 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgSoftmax, 8*4, 100);
 800325c:	2364      	movs	r3, #100	; 0x64
 800325e:	2220      	movs	r2, #32
 8003260:	4927      	ldr	r1, [pc, #156]	; (8003300 <main+0x524>)
 8003262:	4825      	ldr	r0, [pc, #148]	; (80032f8 <main+0x51c>)
 8003264:	f001 fd97 	bl	8004d96 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgPreSoftmax, 8*4, 100);
 8003268:	2364      	movs	r3, #100	; 0x64
 800326a:	2220      	movs	r2, #32
 800326c:	4927      	ldr	r1, [pc, #156]	; (800330c <main+0x530>)
 800326e:	4822      	ldr	r0, [pc, #136]	; (80032f8 <main+0x51c>)
 8003270:	f001 fd91 	bl	8004d96 <HAL_UART_Transmit>
		  }
#endif

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// LED toggle
 8003274:	2120      	movs	r1, #32
 8003276:	4826      	ldr	r0, [pc, #152]	; (8003310 <main+0x534>)
 8003278:	f000 fe8d 	bl	8003f96 <HAL_GPIO_TogglePin>
		  enable_inference = 0;						// Reset inference flag
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <main+0x538>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

		  if(((OL_layer.counter-1) % 10 == 0) && (OL_layer.counter >= 100)){
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	1e59      	subs	r1, r3, #1
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <main+0x53c>)
 800328a:	fb83 2301 	smull	r2, r3, r3, r1
 800328e:	109a      	asrs	r2, r3, #2
 8003290:	17cb      	asrs	r3, r1, #31
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	1aca      	subs	r2, r1, r3
 800329e:	2a00      	cmp	r2, #0
 80032a0:	d106      	bne.n	80032b0 <main+0x4d4>
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b63      	cmp	r3, #99	; 0x63
 80032a8:	dd02      	ble.n	80032b0 <main+0x4d4>
			  OL_layer.batch_size = 8;
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	2208      	movs	r2, #8
 80032ae:	711a      	strb	r2, [r3, #4]
		  }
	  }

	  HAL_Delay(5); 			// Helps the code to not get stuck
 80032b0:	2005      	movs	r0, #5
 80032b2:	f000 fb5f 	bl	8003974 <HAL_Delay>

	  // If the blue button has been pressed and the cycle inference cycle is finished enable again the interrupt for the infinite cycle
	  if(BlueButton == 1 && enable_inference == 0){
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <main+0x540>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	f47f ae95 	bne.w	8002fea <main+0x20e>
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <main+0x538>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f47f ae90 	bne.w	8002fea <main+0x20e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	// Set high the value for interrupt for infinity cycle
 80032ca:	2201      	movs	r2, #1
 80032cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032d0:	4813      	ldr	r0, [pc, #76]	; (8003320 <main+0x544>)
 80032d2:	f000 fe47 	bl	8003f64 <HAL_GPIO_WritePin>
	  if(enable_inference == 1){
 80032d6:	e688      	b.n	8002fea <main+0x20e>
 80032d8:	20001940 	.word	0x20001940
 80032dc:	20002000 	.word	0x20002000
 80032e0:	200010c8 	.word	0x200010c8
 80032e4:	20002960 	.word	0x20002960
 80032e8:	200010cc 	.word	0x200010cc
 80032ec:	20001ffc 	.word	0x20001ffc
 80032f0:	200010d0 	.word	0x200010d0
 80032f4:	20001714 	.word	0x20001714
 80032f8:	20002ba0 	.word	0x20002ba0
 80032fc:	20001fd4 	.word	0x20001fd4
 8003300:	20001720 	.word	0x20001720
 8003304:	200015d4 	.word	0x200015d4
 8003308:	20001740 	.word	0x20001740
 800330c:	20001e70 	.word	0x20001e70
 8003310:	40020000 	.word	0x40020000
 8003314:	200010c0 	.word	0x200010c0
 8003318:	66666667 	.word	0x66666667
 800331c:	200010c4 	.word	0x200010c4
 8003320:	40020400 	.word	0x40020400

08003324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b094      	sub	sp, #80	; 0x50
 8003328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800332a:	f107 0320 	add.w	r3, r7, #32
 800332e:	2230      	movs	r2, #48	; 0x30
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f004 fb34 	bl	80079a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <SystemClock_Config+0xd0>)
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	4a28      	ldr	r2, [pc, #160]	; (80033f4 <SystemClock_Config+0xd0>)
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003356:	6413      	str	r3, [r2, #64]	; 0x40
 8003358:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <SystemClock_Config+0xd0>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003364:	2300      	movs	r3, #0
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <SystemClock_Config+0xd4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003370:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <SystemClock_Config+0xd4>)
 8003372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <SystemClock_Config+0xd4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003384:	2302      	movs	r3, #2
 8003386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003388:	2301      	movs	r3, #1
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800338c:	2310      	movs	r3, #16
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003390:	2302      	movs	r3, #2
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003394:	2300      	movs	r3, #0
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003398:	2310      	movs	r3, #16
 800339a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800339c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80033a2:	2304      	movs	r3, #4
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033a6:	2307      	movs	r3, #7
 80033a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033aa:	f107 0320 	add.w	r3, r7, #32
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fe24 	bl	8003ffc <HAL_RCC_OscConfig>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80033ba:	f000 f8b3 	bl	8003524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033be:	230f      	movs	r3, #15
 80033c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033c2:	2302      	movs	r3, #2
 80033c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033d4:	f107 030c 	add.w	r3, r7, #12
 80033d8:	2102      	movs	r1, #2
 80033da:	4618      	mov	r0, r3
 80033dc:	f001 f87e 	bl	80044dc <HAL_RCC_ClockConfig>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80033e6:	f000 f89d 	bl	8003524 <Error_Handler>
  }
}
 80033ea:	bf00      	nop
 80033ec:	3750      	adds	r7, #80	; 0x50
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000

080033fc <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



// INTERRUPTS
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]


	if(BlueButton == 0){ 		// Avoid double clicks
 8003406:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d12d      	bne.n	800346a <HAL_GPIO_EXTI_Callback+0x6e>

		// When the blue button is pressed the first time it enables the STM to receive the first input message. Then
		// the STM automatically continues to recive messages from the PC.

		if(GPIO_Pin == B1_Pin){													// If interrupt is blue button
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003414:	d129      	bne.n	800346a <HAL_GPIO_EXTI_Callback+0x6e>

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);								// Toggle LED
 8003416:	2120      	movs	r1, #32
 8003418:	482f      	ldr	r0, [pc, #188]	; (80034d8 <HAL_GPIO_EXTI_Callback+0xdc>)
 800341a:	f000 fdbc 	bl	8003f96 <HAL_GPIO_TogglePin>

			BlueButton = 1;														// Raise blue button flag
 800341e:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]

			msgLen = sprintf(msgDebug, "OK");
 8003424:	492d      	ldr	r1, [pc, #180]	; (80034dc <HAL_GPIO_EXTI_Callback+0xe0>)
 8003426:	482e      	ldr	r0, [pc, #184]	; (80034e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003428:	f005 f88c 	bl	8008544 <siprintf>
 800342c:	4603      	mov	r3, r0
 800342e:	4a2d      	ldr	r2, [pc, #180]	; (80034e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003430:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc message in order to sync, the pc is waiting a msg long 2
 8003432:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29a      	uxth	r2, r3
 8003438:	2364      	movs	r3, #100	; 0x64
 800343a:	4929      	ldr	r1, [pc, #164]	; (80034e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800343c:	482a      	ldr	r0, [pc, #168]	; (80034e8 <HAL_GPIO_EXTI_Callback+0xec>)
 800343e:	f001 fcaa 	bl	8004d96 <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive the array data from the pc - array is long 600
 8003442:	2364      	movs	r3, #100	; 0x64
 8003444:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003448:	4928      	ldr	r1, [pc, #160]	; (80034ec <HAL_GPIO_EXTI_Callback+0xf0>)
 800344a:	4827      	ldr	r0, [pc, #156]	; (80034e8 <HAL_GPIO_EXTI_Callback+0xec>)
 800344c:	f001 fd3c 	bl	8004ec8 <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);	// Receive the label char from the pc - label is long 1
 8003450:	2364      	movs	r3, #100	; 0x64
 8003452:	2201      	movs	r2, #1
 8003454:	4926      	ldr	r1, [pc, #152]	; (80034f0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003456:	4824      	ldr	r0, [pc, #144]	; (80034e8 <HAL_GPIO_EXTI_Callback+0xec>)
 8003458:	f001 fd36 	bl	8004ec8 <HAL_UART_Receive>

			letter[0] = msgRxLett[0];											// Store the received message in the label container
 800345c:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_GPIO_EXTI_Callback+0xf4>)
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003462:	701a      	strb	r2, [r3, #0]

			enable_inference = 1;												// Raise the flag that enables the inference at the next cyle in the while
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
	// to have a signal that notices when the STM finishes an inference.This is done by short cuircuiting 2 GPIOs. In
	// this case I use an output GPIO (B10) and an input interrupt GPIO (B5) for doing this. The output is raised high when
	// the inference in the while loop is finished, the other is an interrupt that is triggered when it reads this signal high.
	// Once the interrupt is triggered the code enters here and it syncs with the PC reading the message through he UART

	if(BlueButton == 1){	// If the blue button has been pressed once
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d12b      	bne.n	80034ca <HAL_GPIO_EXTI_Callback+0xce>

		if(GPIO_Pin == GPIO_PIN_5){	// If the interrupt is the GPIO pin
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	2b20      	cmp	r3, #32
 8003476:	d128      	bne.n	80034ca <HAL_GPIO_EXTI_Callback+0xce>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);				// Set low the GPIO pin that signals the end of a cycle
 8003478:	2200      	movs	r2, #0
 800347a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800347e:	481f      	ldr	r0, [pc, #124]	; (80034fc <HAL_GPIO_EXTI_Callback+0x100>)
 8003480:	f000 fd70 	bl	8003f64 <HAL_GPIO_WritePin>

			msgLen = sprintf(msgDebug, "OK");
 8003484:	4915      	ldr	r1, [pc, #84]	; (80034dc <HAL_GPIO_EXTI_Callback+0xe0>)
 8003486:	4816      	ldr	r0, [pc, #88]	; (80034e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003488:	f005 f85c 	bl	8008544 <siprintf>
 800348c:	4603      	mov	r3, r0
 800348e:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003490:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc sync msg, the pc is waiting a msg long 2, no need to be exactly 'OK'
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b29a      	uxth	r2, r3
 8003498:	2364      	movs	r3, #100	; 0x64
 800349a:	4911      	ldr	r1, [pc, #68]	; (80034e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800349c:	4812      	ldr	r0, [pc, #72]	; (80034e8 <HAL_GPIO_EXTI_Callback+0xec>)
 800349e:	f001 fc7a 	bl	8004d96 <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive the array data from the pc - array is long 600
 80034a2:	2364      	movs	r3, #100	; 0x64
 80034a4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80034a8:	4910      	ldr	r1, [pc, #64]	; (80034ec <HAL_GPIO_EXTI_Callback+0xf0>)
 80034aa:	480f      	ldr	r0, [pc, #60]	; (80034e8 <HAL_GPIO_EXTI_Callback+0xec>)
 80034ac:	f001 fd0c 	bl	8004ec8 <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);	// Receive the label char from the pc - label is long 1
 80034b0:	2364      	movs	r3, #100	; 0x64
 80034b2:	2201      	movs	r2, #1
 80034b4:	490e      	ldr	r1, [pc, #56]	; (80034f0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80034b6:	480c      	ldr	r0, [pc, #48]	; (80034e8 <HAL_GPIO_EXTI_Callback+0xec>)
 80034b8:	f001 fd06 	bl	8004ec8 <HAL_UART_Receive>

			letter[0] = msgRxLett[0];											// Store the received message in the label container
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80034c2:	701a      	strb	r2, [r3, #0]

			enable_inference = 1;												// Raise the flag that enables the inference at the next cyle in the while
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
		}
	}
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200010c4 	.word	0x200010c4
 80034d8:	40020000 	.word	0x40020000
 80034dc:	0800b1a0 	.word	0x0800b1a0
 80034e0:	20001df0 	.word	0x20001df0
 80034e4:	20001e90 	.word	0x20001e90
 80034e8:	20002ba0 	.word	0x20002ba0
 80034ec:	20001940 	.word	0x20001940
 80034f0:	200015d0 	.word	0x200015d0
 80034f4:	20001ffc 	.word	0x20001ffc
 80034f8:	200010c0 	.word	0x200010c0
 80034fc:	40020400 	.word	0x40020400

08003500 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim){
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	timer_counter += 1;	// 10 micro sec has passed
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003510:	6013      	str	r3, [r2, #0]



	// Use this if cycle just for debugging and see how much memory is used after 100 input samples
	//OL_updateFreeRAM();
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	200010c8 	.word	0x200010c8

08003524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003528:	b672      	cpsid	i
}
 800352a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800352c:	e7fe      	b.n	800352c <Error_Handler+0x8>
	...

08003530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_MspInit+0x4c>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_MspInit+0x4c>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <HAL_MspInit+0x4c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_MspInit+0x4c>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_MspInit+0x4c>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_MspInit+0x4c>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800356e:	2007      	movs	r0, #7
 8003570:	f000 faf4 	bl	8003b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800

08003580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <NMI_Handler+0x4>

08003586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800358a:	e7fe      	b.n	800358a <HardFault_Handler+0x4>

0800358c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003590:	e7fe      	b.n	8003590 <MemManage_Handler+0x4>

08003592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003596:	e7fe      	b.n	8003596 <BusFault_Handler+0x4>

08003598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800359c:	e7fe      	b.n	800359c <UsageFault_Handler+0x4>

0800359e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035cc:	f000 f9b2 	bl	8003934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80035d8:	2020      	movs	r0, #32
 80035da:	f000 fcf7 	bl	8003fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80035ea:	f001 f9c2 	bl	8004972 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20002b60 	.word	0x20002b60

080035f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <USART2_IRQHandler+0x10>)
 80035fe:	f001 fd09 	bl	8005014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20002ba0 	.word	0x20002ba0

0800360c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003610:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003614:	f000 fcda 	bl	8003fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}

0800361c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003624:	4a14      	ldr	r2, [pc, #80]	; (8003678 <_sbrk+0x5c>)
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <_sbrk+0x60>)
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003630:	4b13      	ldr	r3, [pc, #76]	; (8003680 <_sbrk+0x64>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <_sbrk+0x64>)
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <_sbrk+0x68>)
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <_sbrk+0x64>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d207      	bcs.n	800365c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800364c:	f004 f960 	bl	8007910 <__errno>
 8003650:	4603      	mov	r3, r0
 8003652:	220c      	movs	r2, #12
 8003654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003656:	f04f 33ff 	mov.w	r3, #4294967295
 800365a:	e009      	b.n	8003670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <_sbrk+0x64>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <_sbrk+0x64>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	4a05      	ldr	r2, [pc, #20]	; (8003680 <_sbrk+0x64>)
 800366c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800366e:	68fb      	ldr	r3, [r7, #12]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20018000 	.word	0x20018000
 800367c:	00001000 	.word	0x00001000
 8003680:	200010d4 	.word	0x200010d4
 8003684:	20002bf8 	.word	0x20002bf8

08003688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <SystemInit+0x28>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <SystemInit+0x28>)
 8003694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <SystemInit+0x28>)
 800369e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036a2:	609a      	str	r2, [r3, #8]
#endif
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <MX_TIM10_Init+0x3c>)
 80036ba:	4a0e      	ldr	r2, [pc, #56]	; (80036f4 <MX_TIM10_Init+0x40>)
 80036bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21-1;
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <MX_TIM10_Init+0x3c>)
 80036c0:	2214      	movs	r2, #20
 80036c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <MX_TIM10_Init+0x3c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 40-1;
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <MX_TIM10_Init+0x3c>)
 80036cc:	2227      	movs	r2, #39	; 0x27
 80036ce:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <MX_TIM10_Init+0x3c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <MX_TIM10_Init+0x3c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80036dc:	4804      	ldr	r0, [pc, #16]	; (80036f0 <MX_TIM10_Init+0x3c>)
 80036de:	f001 f8f9 	bl	80048d4 <HAL_TIM_Base_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80036e8:	f7ff ff1c 	bl	8003524 <Error_Handler>
  }

}
 80036ec:	bf00      	nop
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20002b60 	.word	0x20002b60
 80036f4:	40014400 	.word	0x40014400

080036f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <HAL_TIM_Base_MspInit+0x48>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d115      	bne.n	8003736 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_TIM_Base_MspInit+0x4c>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <HAL_TIM_Base_MspInit+0x4c>)
 8003714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_TIM_Base_MspInit+0x4c>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	2100      	movs	r1, #0
 800372a:	2019      	movs	r0, #25
 800372c:	f000 fa21 	bl	8003b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003730:	2019      	movs	r0, #25
 8003732:	f000 fa3a 	bl	8003baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40014400 	.word	0x40014400
 8003744:	40023800 	.word	0x40023800

08003748 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <MX_USART2_UART_Init+0x4c>)
 800374e:	4a12      	ldr	r2, [pc, #72]	; (8003798 <MX_USART2_UART_Init+0x50>)
 8003750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <MX_USART2_UART_Init+0x4c>)
 8003754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <MX_USART2_UART_Init+0x4c>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <MX_USART2_UART_Init+0x4c>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <MX_USART2_UART_Init+0x4c>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <MX_USART2_UART_Init+0x4c>)
 800376e:	220c      	movs	r2, #12
 8003770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <MX_USART2_UART_Init+0x4c>)
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <MX_USART2_UART_Init+0x4c>)
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800377e:	4805      	ldr	r0, [pc, #20]	; (8003794 <MX_USART2_UART_Init+0x4c>)
 8003780:	f001 fabc 	bl	8004cfc <HAL_UART_Init>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800378a:	f7ff fecb 	bl	8003524 <Error_Handler>
  }

}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20002ba0 	.word	0x20002ba0
 8003798:	40004400 	.word	0x40004400

0800379c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <HAL_UART_MspInit+0x94>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d133      	bne.n	8003826 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <HAL_UART_MspInit+0x98>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <HAL_UART_MspInit+0x98>)
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_UART_MspInit+0x98>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <HAL_UART_MspInit+0x98>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a14      	ldr	r2, [pc, #80]	; (8003834 <HAL_UART_MspInit+0x98>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_UART_MspInit+0x98>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80037f6:	230c      	movs	r3, #12
 80037f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003806:	2307      	movs	r3, #7
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380a:	f107 0314 	add.w	r3, r7, #20
 800380e:	4619      	mov	r1, r3
 8003810:	4809      	ldr	r0, [pc, #36]	; (8003838 <HAL_UART_MspInit+0x9c>)
 8003812:	f000 fa23 	bl	8003c5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003816:	2200      	movs	r2, #0
 8003818:	2100      	movs	r1, #0
 800381a:	2026      	movs	r0, #38	; 0x26
 800381c:	f000 f9a9 	bl	8003b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003820:	2026      	movs	r0, #38	; 0x26
 8003822:	f000 f9c2 	bl	8003baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003826:	bf00      	nop
 8003828:	3728      	adds	r7, #40	; 0x28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40004400 	.word	0x40004400
 8003834:	40023800 	.word	0x40023800
 8003838:	40020000 	.word	0x40020000

0800383c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800383c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003874 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003840:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003842:	e003      	b.n	800384c <LoopCopyDataInit>

08003844 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003846:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003848:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800384a:	3104      	adds	r1, #4

0800384c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800384c:	480b      	ldr	r0, [pc, #44]	; (800387c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003850:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003852:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003854:	d3f6      	bcc.n	8003844 <CopyDataInit>
  ldr  r2, =_sbss
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003858:	e002      	b.n	8003860 <LoopFillZerobss>

0800385a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800385a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800385c:	f842 3b04 	str.w	r3, [r2], #4

08003860 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003860:	4b09      	ldr	r3, [pc, #36]	; (8003888 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003862:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003864:	d3f9      	bcc.n	800385a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003866:	f7ff ff0f 	bl	8003688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386a:	f004 f857 	bl	800791c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800386e:	f7ff fab5 	bl	8002ddc <main>
  bx  lr    
 8003872:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003874:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003878:	08066bf0 	.word	0x08066bf0
  ldr  r0, =_sdata
 800387c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003880:	200010a4 	.word	0x200010a4
  ldr  r2, =_sbss
 8003884:	200010a4 	.word	0x200010a4
  ldr  r3, = _ebss
 8003888:	20002bf4 	.word	0x20002bf4

0800388c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800388c:	e7fe      	b.n	800388c <ADC_IRQHandler>
	...

08003890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <HAL_Init+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <HAL_Init+0x40>)
 800389a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_Init+0x40>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <HAL_Init+0x40>)
 80038a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <HAL_Init+0x40>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <HAL_Init+0x40>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b8:	2003      	movs	r0, #3
 80038ba:	f000 f94f 	bl	8003b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038be:	2000      	movs	r0, #0
 80038c0:	f000 f808 	bl	80038d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038c4:	f7ff fe34 	bl	8003530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023c00 	.word	0x40023c00

080038d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_InitTick+0x54>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_InitTick+0x58>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4619      	mov	r1, r3
 80038e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f967 	bl	8003bc6 <HAL_SYSTICK_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e00e      	b.n	8003920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0f      	cmp	r3, #15
 8003906:	d80a      	bhi.n	800391e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003908:	2200      	movs	r2, #0
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	f000 f92f 	bl	8003b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003914:	4a06      	ldr	r2, [pc, #24]	; (8003930 <HAL_InitTick+0x5c>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000a14 	.word	0x20000a14
 800392c:	20000a1c 	.word	0x20000a1c
 8003930:	20000a18 	.word	0x20000a18

08003934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_IncTick+0x20>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_IncTick+0x24>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4413      	add	r3, r2
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_IncTick+0x24>)
 8003946:	6013      	str	r3, [r2, #0]
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000a1c 	.word	0x20000a1c
 8003958:	20002be0 	.word	0x20002be0

0800395c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return uwTick;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_GetTick+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20002be0 	.word	0x20002be0

08003974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800397c:	f7ff ffee 	bl	800395c <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d005      	beq.n	800399a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_Delay+0x44>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800399a:	bf00      	nop
 800399c:	f7ff ffde 	bl	800395c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d8f7      	bhi.n	800399c <HAL_Delay+0x28>
  {
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000a1c 	.word	0x20000a1c

080039bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <__NVIC_SetPriorityGrouping+0x44>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d8:	4013      	ands	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ee:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <__NVIC_SetPriorityGrouping+0x44>)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	60d3      	str	r3, [r2, #12]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <__NVIC_GetPriorityGrouping+0x18>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	f003 0307 	and.w	r3, r3, #7
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	db0b      	blt.n	8003a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	4907      	ldr	r1, [pc, #28]	; (8003a58 <__NVIC_EnableIRQ+0x38>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2001      	movs	r0, #1
 8003a42:	fa00 f202 	lsl.w	r2, r0, r2
 8003a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000e100 	.word	0xe000e100

08003a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	6039      	str	r1, [r7, #0]
 8003a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	db0a      	blt.n	8003a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	490c      	ldr	r1, [pc, #48]	; (8003aa8 <__NVIC_SetPriority+0x4c>)
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a84:	e00a      	b.n	8003a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	4908      	ldr	r1, [pc, #32]	; (8003aac <__NVIC_SetPriority+0x50>)
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	3b04      	subs	r3, #4
 8003a94:	0112      	lsls	r2, r2, #4
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	440b      	add	r3, r1
 8003a9a:	761a      	strb	r2, [r3, #24]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000e100 	.word	0xe000e100
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f1c3 0307 	rsb	r3, r3, #7
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	bf28      	it	cs
 8003ace:	2304      	movcs	r3, #4
 8003ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d902      	bls.n	8003ae0 <NVIC_EncodePriority+0x30>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3b03      	subs	r3, #3
 8003ade:	e000      	b.n	8003ae2 <NVIC_EncodePriority+0x32>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43da      	mvns	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	401a      	ands	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003af8:	f04f 31ff 	mov.w	r1, #4294967295
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	43d9      	mvns	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b08:	4313      	orrs	r3, r2
         );
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3724      	adds	r7, #36	; 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b28:	d301      	bcc.n	8003b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e00f      	b.n	8003b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b2e:	4a0a      	ldr	r2, [pc, #40]	; (8003b58 <SysTick_Config+0x40>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b36:	210f      	movs	r1, #15
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3c:	f7ff ff8e 	bl	8003a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <SysTick_Config+0x40>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b46:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <SysTick_Config+0x40>)
 8003b48:	2207      	movs	r2, #7
 8003b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	e000e010 	.word	0xe000e010

08003b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff ff29 	bl	80039bc <__NVIC_SetPriorityGrouping>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b086      	sub	sp, #24
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b84:	f7ff ff3e 	bl	8003a04 <__NVIC_GetPriorityGrouping>
 8003b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	6978      	ldr	r0, [r7, #20]
 8003b90:	f7ff ff8e 	bl	8003ab0 <NVIC_EncodePriority>
 8003b94:	4602      	mov	r2, r0
 8003b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ff5d 	bl	8003a5c <__NVIC_SetPriority>
}
 8003ba2:	bf00      	nop
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ff31 	bl	8003a20 <__NVIC_EnableIRQ>
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ffa2 	bl	8003b18 <SysTick_Config>
 8003bd4:	4603      	mov	r3, r0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e00e      	b.n	8003c0e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	795b      	ldrb	r3, [r3, #5]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff f825 	bl	8002c50 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2280      	movs	r2, #128	; 0x80
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e00c      	b.n	8003c4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2205      	movs	r2, #5
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	e159      	b.n	8003f2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c78:	2201      	movs	r2, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	f040 8148 	bne.w	8003f26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_GPIO_Init+0x5a>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d007      	beq.n	8003cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003caa:	2b11      	cmp	r3, #17
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b12      	cmp	r3, #18
 8003cb4:	d130      	bne.n	8003d18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cec:	2201      	movs	r2, #1
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 0201 	and.w	r2, r3, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0xfc>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b12      	cmp	r3, #18
 8003d56:	d123      	bne.n	8003da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	08da      	lsrs	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3208      	adds	r2, #8
 8003d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	220f      	movs	r2, #15
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	08da      	lsrs	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3208      	adds	r2, #8
 8003d9a:	69b9      	ldr	r1, [r7, #24]
 8003d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2203      	movs	r2, #3
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0203 	and.w	r2, r3, #3
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a2 	beq.w	8003f26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <HAL_GPIO_Init+0x2e8>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	4a56      	ldr	r2, [pc, #344]	; (8003f44 <HAL_GPIO_Init+0x2e8>)
 8003dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df0:	6453      	str	r3, [r2, #68]	; 0x44
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <HAL_GPIO_Init+0x2e8>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dfe:	4a52      	ldr	r2, [pc, #328]	; (8003f48 <HAL_GPIO_Init+0x2ec>)
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	3302      	adds	r3, #2
 8003e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	220f      	movs	r2, #15
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a49      	ldr	r2, [pc, #292]	; (8003f4c <HAL_GPIO_Init+0x2f0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d019      	beq.n	8003e5e <HAL_GPIO_Init+0x202>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a48      	ldr	r2, [pc, #288]	; (8003f50 <HAL_GPIO_Init+0x2f4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_GPIO_Init+0x1fe>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a47      	ldr	r2, [pc, #284]	; (8003f54 <HAL_GPIO_Init+0x2f8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00d      	beq.n	8003e56 <HAL_GPIO_Init+0x1fa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a46      	ldr	r2, [pc, #280]	; (8003f58 <HAL_GPIO_Init+0x2fc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <HAL_GPIO_Init+0x1f6>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a45      	ldr	r2, [pc, #276]	; (8003f5c <HAL_GPIO_Init+0x300>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <HAL_GPIO_Init+0x1f2>
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	e008      	b.n	8003e60 <HAL_GPIO_Init+0x204>
 8003e4e:	2307      	movs	r3, #7
 8003e50:	e006      	b.n	8003e60 <HAL_GPIO_Init+0x204>
 8003e52:	2303      	movs	r3, #3
 8003e54:	e004      	b.n	8003e60 <HAL_GPIO_Init+0x204>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e002      	b.n	8003e60 <HAL_GPIO_Init+0x204>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_GPIO_Init+0x204>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	f002 0203 	and.w	r2, r2, #3
 8003e66:	0092      	lsls	r2, r2, #2
 8003e68:	4093      	lsls	r3, r2
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e70:	4935      	ldr	r1, [pc, #212]	; (8003f48 <HAL_GPIO_Init+0x2ec>)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	3302      	adds	r3, #2
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e7e:	4b38      	ldr	r3, [pc, #224]	; (8003f60 <HAL_GPIO_Init+0x304>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ea2:	4a2f      	ldr	r2, [pc, #188]	; (8003f60 <HAL_GPIO_Init+0x304>)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	; (8003f60 <HAL_GPIO_Init+0x304>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ecc:	4a24      	ldr	r2, [pc, #144]	; (8003f60 <HAL_GPIO_Init+0x304>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ed2:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <HAL_GPIO_Init+0x304>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ef6:	4a1a      	ldr	r2, [pc, #104]	; (8003f60 <HAL_GPIO_Init+0x304>)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003efc:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <HAL_GPIO_Init+0x304>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f20:	4a0f      	ldr	r2, [pc, #60]	; (8003f60 <HAL_GPIO_Init+0x304>)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b0f      	cmp	r3, #15
 8003f30:	f67f aea2 	bls.w	8003c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40013800 	.word	0x40013800
 8003f4c:	40020000 	.word	0x40020000
 8003f50:	40020400 	.word	0x40020400
 8003f54:	40020800 	.word	0x40020800
 8003f58:	40020c00 	.word	0x40020c00
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40013c00 	.word	0x40013c00

08003f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
 8003f70:	4613      	mov	r3, r2
 8003f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f74:	787b      	ldrb	r3, [r7, #1]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f7a:	887a      	ldrh	r2, [r7, #2]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f80:	e003      	b.n	8003f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f82:	887b      	ldrh	r3, [r7, #2]
 8003f84:	041a      	lsls	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	619a      	str	r2, [r3, #24]
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	887b      	ldrh	r3, [r7, #2]
 8003fa8:	401a      	ands	r2, r3
 8003faa:	887b      	ldrh	r3, [r7, #2]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d104      	bne.n	8003fba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003fb0:	887b      	ldrh	r3, [r7, #2]
 8003fb2:	041a      	lsls	r2, r3, #16
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003fb8:	e002      	b.n	8003fc0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d006      	beq.n	8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fe2:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fa06 	bl	80033fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40013c00 	.word	0x40013c00

08003ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e25b      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d075      	beq.n	8004106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800401a:	4ba3      	ldr	r3, [pc, #652]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b04      	cmp	r3, #4
 8004024:	d00c      	beq.n	8004040 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004026:	4ba0      	ldr	r3, [pc, #640]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402e:	2b08      	cmp	r3, #8
 8004030:	d112      	bne.n	8004058 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004032:	4b9d      	ldr	r3, [pc, #628]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800403e:	d10b      	bne.n	8004058 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	4b99      	ldr	r3, [pc, #612]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d05b      	beq.n	8004104 <HAL_RCC_OscConfig+0x108>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d157      	bne.n	8004104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e236      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d106      	bne.n	8004070 <HAL_RCC_OscConfig+0x74>
 8004062:	4b91      	ldr	r3, [pc, #580]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a90      	ldr	r2, [pc, #576]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e01d      	b.n	80040ac <HAL_RCC_OscConfig+0xb0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0x98>
 800407a:	4b8b      	ldr	r3, [pc, #556]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a8a      	ldr	r2, [pc, #552]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b88      	ldr	r3, [pc, #544]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a87      	ldr	r2, [pc, #540]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e00b      	b.n	80040ac <HAL_RCC_OscConfig+0xb0>
 8004094:	4b84      	ldr	r3, [pc, #528]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a83      	ldr	r2, [pc, #524]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800409a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4b81      	ldr	r3, [pc, #516]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a80      	ldr	r2, [pc, #512]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d013      	beq.n	80040dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7ff fc52 	bl	800395c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040bc:	f7ff fc4e 	bl	800395c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1fb      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b76      	ldr	r3, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0xc0>
 80040da:	e014      	b.n	8004106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7ff fc3e 	bl	800395c <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e4:	f7ff fc3a 	bl	800395c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e1e7      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	4b6c      	ldr	r3, [pc, #432]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0xe8>
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d063      	beq.n	80041da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004112:	4b65      	ldr	r3, [pc, #404]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411e:	4b62      	ldr	r3, [pc, #392]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004126:	2b08      	cmp	r3, #8
 8004128:	d11c      	bne.n	8004164 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412a:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d116      	bne.n	8004164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004136:	4b5c      	ldr	r3, [pc, #368]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_RCC_OscConfig+0x152>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e1bb      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b56      	ldr	r3, [pc, #344]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4952      	ldr	r1, [pc, #328]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004162:	e03a      	b.n	80041da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d020      	beq.n	80041ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <HAL_RCC_OscConfig+0x2b0>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7ff fbf3 	bl	800395c <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417a:	f7ff fbef 	bl	800395c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e19c      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	4b46      	ldr	r3, [pc, #280]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004198:	4b43      	ldr	r3, [pc, #268]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4940      	ldr	r1, [pc, #256]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
 80041ac:	e015      	b.n	80041da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ae:	4b3f      	ldr	r3, [pc, #252]	; (80042ac <HAL_RCC_OscConfig+0x2b0>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7ff fbd2 	bl	800395c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041bc:	f7ff fbce 	bl	800395c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e17b      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d030      	beq.n	8004248 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ee:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <HAL_RCC_OscConfig+0x2b4>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7ff fbb2 	bl	800395c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fc:	f7ff fbae 	bl	800395c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e15b      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x200>
 800421a:	e015      	b.n	8004248 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800421c:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <HAL_RCC_OscConfig+0x2b4>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004222:	f7ff fb9b 	bl	800395c <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422a:	f7ff fb97 	bl	800395c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e144      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800423e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80a0 	beq.w	8004396 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004256:	2300      	movs	r3, #0
 8004258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10f      	bne.n	8004286 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	4a0e      	ldr	r2, [pc, #56]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004274:	6413      	str	r3, [r2, #64]	; 0x40
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_OscConfig+0x2b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d121      	bne.n	80042d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_RCC_OscConfig+0x2b8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <HAL_RCC_OscConfig+0x2b8>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429e:	f7ff fb5d 	bl	800395c <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	e011      	b.n	80042ca <HAL_RCC_OscConfig+0x2ce>
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470000 	.word	0x42470000
 80042b0:	42470e80 	.word	0x42470e80
 80042b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b8:	f7ff fb50 	bl	800395c <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0fd      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ca:	4b81      	ldr	r3, [pc, #516]	; (80044d0 <HAL_RCC_OscConfig+0x4d4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d106      	bne.n	80042ec <HAL_RCC_OscConfig+0x2f0>
 80042de:	4b7d      	ldr	r3, [pc, #500]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a7c      	ldr	r2, [pc, #496]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ea:	e01c      	b.n	8004326 <HAL_RCC_OscConfig+0x32a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b05      	cmp	r3, #5
 80042f2:	d10c      	bne.n	800430e <HAL_RCC_OscConfig+0x312>
 80042f4:	4b77      	ldr	r3, [pc, #476]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	4a76      	ldr	r2, [pc, #472]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 80042fa:	f043 0304 	orr.w	r3, r3, #4
 80042fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004300:	4b74      	ldr	r3, [pc, #464]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	4a73      	ldr	r2, [pc, #460]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	6713      	str	r3, [r2, #112]	; 0x70
 800430c:	e00b      	b.n	8004326 <HAL_RCC_OscConfig+0x32a>
 800430e:	4b71      	ldr	r3, [pc, #452]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a70      	ldr	r2, [pc, #448]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
 800431a:	4b6e      	ldr	r3, [pc, #440]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	4a6d      	ldr	r2, [pc, #436]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 8004320:	f023 0304 	bic.w	r3, r3, #4
 8004324:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d015      	beq.n	800435a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7ff fb15 	bl	800395c <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004334:	e00a      	b.n	800434c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7ff fb11 	bl	800395c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0bc      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434c:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ee      	beq.n	8004336 <HAL_RCC_OscConfig+0x33a>
 8004358:	e014      	b.n	8004384 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435a:	f7ff faff 	bl	800395c <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004360:	e00a      	b.n	8004378 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7ff fafb 	bl	800395c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004370:	4293      	cmp	r3, r2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e0a6      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004378:	4b56      	ldr	r3, [pc, #344]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1ee      	bne.n	8004362 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d105      	bne.n	8004396 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438a:	4b52      	ldr	r3, [pc, #328]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	4a51      	ldr	r2, [pc, #324]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 8004390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 8092 	beq.w	80044c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043a0:	4b4c      	ldr	r3, [pc, #304]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d05c      	beq.n	8004466 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d141      	bne.n	8004438 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b4:	4b48      	ldr	r3, [pc, #288]	; (80044d8 <HAL_RCC_OscConfig+0x4dc>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7ff facf 	bl	800395c <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c2:	f7ff facb 	bl	800395c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e078      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d4:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f0      	bne.n	80043c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	019b      	lsls	r3, r3, #6
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	3b01      	subs	r3, #1
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	061b      	lsls	r3, r3, #24
 8004404:	4933      	ldr	r1, [pc, #204]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800440a:	4b33      	ldr	r3, [pc, #204]	; (80044d8 <HAL_RCC_OscConfig+0x4dc>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7ff faa4 	bl	800395c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004418:	f7ff faa0 	bl	800395c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e04d      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442a:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x41c>
 8004436:	e045      	b.n	80044c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <HAL_RCC_OscConfig+0x4dc>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7ff fa8d 	bl	800395c <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004446:	f7ff fa89 	bl	800395c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e036      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004458:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <HAL_RCC_OscConfig+0x44a>
 8004464:	e02e      	b.n	80044c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e029      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <HAL_RCC_OscConfig+0x4d8>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	429a      	cmp	r2, r3
 8004484:	d11c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d115      	bne.n	80044c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800449a:	4013      	ands	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10d      	bne.n	80044c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d106      	bne.n	80044c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40007000 	.word	0x40007000
 80044d4:	40023800 	.word	0x40023800
 80044d8:	42470060 	.word	0x42470060

080044dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0cc      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b68      	ldr	r3, [pc, #416]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d90c      	bls.n	8004518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b65      	ldr	r3, [pc, #404]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b63      	ldr	r3, [pc, #396]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0b8      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004530:	4b59      	ldr	r3, [pc, #356]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a58      	ldr	r2, [pc, #352]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800453a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004548:	4b53      	ldr	r3, [pc, #332]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a52      	ldr	r2, [pc, #328]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b50      	ldr	r3, [pc, #320]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	494d      	ldr	r1, [pc, #308]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d044      	beq.n	80045fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d119      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	2b03      	cmp	r3, #3
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459a:	4b3f      	ldr	r3, [pc, #252]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e06f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e067      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	4b37      	ldr	r3, [pc, #220]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4934      	ldr	r1, [pc, #208]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045cc:	f7ff f9c6 	bl	800395c <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7ff f9c2 	bl	800395c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 020c 	and.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1eb      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d20c      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b22      	ldr	r3, [pc, #136]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e032      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4916      	ldr	r1, [pc, #88]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	490e      	ldr	r1, [pc, #56]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004662:	f000 f821 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004666:	4602      	mov	r2, r0
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	490a      	ldr	r1, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	5ccb      	ldrb	r3, [r1, r3]
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff f926 	bl	80038d4 <HAL_InitTick>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00
 8004698:	40023800 	.word	0x40023800
 800469c:	0800b378 	.word	0x0800b378
 80046a0:	20000a14 	.word	0x20000a14
 80046a4:	20000a18 	.word	0x20000a18

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	2300      	movs	r3, #0
 80046ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c0:	4b67      	ldr	r3, [pc, #412]	; (8004860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d00d      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x40>
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	f200 80bd 	bhi.w	800484c <HAL_RCC_GetSysClockFreq+0x1a4>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x34>
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046da:	e0b7      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b61      	ldr	r3, [pc, #388]	; (8004864 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046de:	60bb      	str	r3, [r7, #8]
       break;
 80046e0:	e0b7      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e2:	4b61      	ldr	r3, [pc, #388]	; (8004868 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80046e4:	60bb      	str	r3, [r7, #8]
      break;
 80046e6:	e0b4      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e8:	4b5d      	ldr	r3, [pc, #372]	; (8004860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046f2:	4b5b      	ldr	r3, [pc, #364]	; (8004860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d04d      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fe:	4b58      	ldr	r3, [pc, #352]	; (8004860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	099b      	lsrs	r3, r3, #6
 8004704:	461a      	mov	r2, r3
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	ea02 0800 	and.w	r8, r2, r0
 8004716:	ea03 0901 	and.w	r9, r3, r1
 800471a:	4640      	mov	r0, r8
 800471c:	4649      	mov	r1, r9
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	014b      	lsls	r3, r1, #5
 8004728:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800472c:	0142      	lsls	r2, r0, #5
 800472e:	4610      	mov	r0, r2
 8004730:	4619      	mov	r1, r3
 8004732:	ebb0 0008 	subs.w	r0, r0, r8
 8004736:	eb61 0109 	sbc.w	r1, r1, r9
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	018b      	lsls	r3, r1, #6
 8004744:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004748:	0182      	lsls	r2, r0, #6
 800474a:	1a12      	subs	r2, r2, r0
 800474c:	eb63 0301 	sbc.w	r3, r3, r1
 8004750:	f04f 0000 	mov.w	r0, #0
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	00d9      	lsls	r1, r3, #3
 800475a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800475e:	00d0      	lsls	r0, r2, #3
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	eb12 0208 	adds.w	r2, r2, r8
 8004768:	eb43 0309 	adc.w	r3, r3, r9
 800476c:	f04f 0000 	mov.w	r0, #0
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	0259      	lsls	r1, r3, #9
 8004776:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800477a:	0250      	lsls	r0, r2, #9
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4610      	mov	r0, r2
 8004782:	4619      	mov	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	461a      	mov	r2, r3
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	f7fc fa64 	bl	8000c58 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4613      	mov	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e04a      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479a:	4b31      	ldr	r3, [pc, #196]	; (8004860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	099b      	lsrs	r3, r3, #6
 80047a0:	461a      	mov	r2, r3
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	ea02 0400 	and.w	r4, r2, r0
 80047b2:	ea03 0501 	and.w	r5, r3, r1
 80047b6:	4620      	mov	r0, r4
 80047b8:	4629      	mov	r1, r5
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	014b      	lsls	r3, r1, #5
 80047c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047c8:	0142      	lsls	r2, r0, #5
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	1b00      	subs	r0, r0, r4
 80047d0:	eb61 0105 	sbc.w	r1, r1, r5
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	018b      	lsls	r3, r1, #6
 80047de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047e2:	0182      	lsls	r2, r0, #6
 80047e4:	1a12      	subs	r2, r2, r0
 80047e6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ea:	f04f 0000 	mov.w	r0, #0
 80047ee:	f04f 0100 	mov.w	r1, #0
 80047f2:	00d9      	lsls	r1, r3, #3
 80047f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047f8:	00d0      	lsls	r0, r2, #3
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	1912      	adds	r2, r2, r4
 8004800:	eb45 0303 	adc.w	r3, r5, r3
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	0299      	lsls	r1, r3, #10
 800480e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004812:	0290      	lsls	r0, r2, #10
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4610      	mov	r0, r2
 800481a:	4619      	mov	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	461a      	mov	r2, r3
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	f7fc fa18 	bl	8000c58 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4613      	mov	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	3301      	adds	r3, #1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	60bb      	str	r3, [r7, #8]
      break;
 800484a:	e002      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800484e:	60bb      	str	r3, [r7, #8]
      break;
 8004850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004852:	68bb      	ldr	r3, [r7, #8]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800485e:	bf00      	nop
 8004860:	40023800 	.word	0x40023800
 8004864:	00f42400 	.word	0x00f42400
 8004868:	007a1200 	.word	0x007a1200

0800486c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <HAL_RCC_GetHCLKFreq+0x14>)
 8004872:	681b      	ldr	r3, [r3, #0]
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000a14 	.word	0x20000a14

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004888:	f7ff fff0 	bl	800486c <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	0a9b      	lsrs	r3, r3, #10
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4903      	ldr	r1, [pc, #12]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40023800 	.word	0x40023800
 80048a8:	0800b388 	.word	0x0800b388

080048ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048b0:	f7ff ffdc 	bl	800486c <HAL_RCC_GetHCLKFreq>
 80048b4:	4602      	mov	r2, r0
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	0b5b      	lsrs	r3, r3, #13
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	4903      	ldr	r1, [pc, #12]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c2:	5ccb      	ldrb	r3, [r1, r3]
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40023800 	.word	0x40023800
 80048d0:	0800b388 	.word	0x0800b388

080048d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e01d      	b.n	8004922 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fe fefc 	bl	80036f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f000 f95e 	bl	8004bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b06      	cmp	r3, #6
 8004952:	d007      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b02      	cmp	r3, #2
 8004986:	d122      	bne.n	80049ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d11b      	bne.n	80049ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 0202 	mvn.w	r2, #2
 800499e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8ee 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 80049ba:	e005      	b.n	80049c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f8e0 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8f1 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d122      	bne.n	8004a22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d11b      	bne.n	8004a22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0204 	mvn.w	r2, #4
 80049f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8c4 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 8004a0e:	e005      	b.n	8004a1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f8b6 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f8c7 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d122      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d11b      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0208 	mvn.w	r2, #8
 8004a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f89a 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 8004a62:	e005      	b.n	8004a70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f88c 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f89d 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d122      	bne.n	8004aca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d11b      	bne.n	8004aca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0210 	mvn.w	r2, #16
 8004a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2208      	movs	r2, #8
 8004aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f870 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 8004ab6:	e005      	b.n	8004ac4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f862 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f873 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10e      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0201 	mvn.w	r2, #1
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fe fd05 	bl	8003500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	2b80      	cmp	r3, #128	; 0x80
 8004b02:	d10e      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d107      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8e3 	bl	8004ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d10e      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d107      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f838 	bl	8004bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d10e      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d107      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f06f 0220 	mvn.w	r2, #32
 8004b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8ad 	bl	8004cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a34      	ldr	r2, [pc, #208]	; (8004cb8 <TIM_Base_SetConfig+0xe4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00f      	beq.n	8004c0c <TIM_Base_SetConfig+0x38>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d00b      	beq.n	8004c0c <TIM_Base_SetConfig+0x38>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a31      	ldr	r2, [pc, #196]	; (8004cbc <TIM_Base_SetConfig+0xe8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_Base_SetConfig+0x38>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a30      	ldr	r2, [pc, #192]	; (8004cc0 <TIM_Base_SetConfig+0xec>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0x38>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a2f      	ldr	r2, [pc, #188]	; (8004cc4 <TIM_Base_SetConfig+0xf0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d108      	bne.n	8004c1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <TIM_Base_SetConfig+0xe4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01b      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d017      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <TIM_Base_SetConfig+0xe8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <TIM_Base_SetConfig+0xec>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <TIM_Base_SetConfig+0xf0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <TIM_Base_SetConfig+0xf4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <TIM_Base_SetConfig+0xf8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <TIM_Base_SetConfig+0xfc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <TIM_Base_SetConfig+0xe4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d103      	bne.n	8004ca4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e03f      	b.n	8004d8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fe fd3a 	bl	800379c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2224      	movs	r2, #36	; 0x24
 8004d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fbf1 	bl	8005528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b088      	sub	sp, #32
 8004d9a:	af02      	add	r7, sp, #8
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	4613      	mov	r3, r2
 8004da4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	f040 8083 	bne.w	8004ebe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_UART_Transmit+0x2e>
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e07b      	b.n	8004ec0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Transmit+0x40>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e074      	b.n	8004ec0 <HAL_UART_Transmit+0x12a>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2221      	movs	r2, #33	; 0x21
 8004de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004dec:	f7fe fdb6 	bl	800395c <HAL_GetTick>
 8004df0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	88fa      	ldrh	r2, [r7, #6]
 8004df6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004e06:	e042      	b.n	8004e8e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	d122      	bne.n	8004e66 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fa10 	bl	8005250 <UART_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e042      	b.n	8004ec0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e4c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d103      	bne.n	8004e5e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	3302      	adds	r3, #2
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	e017      	b.n	8004e8e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	3301      	adds	r3, #1
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	e013      	b.n	8004e8e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2180      	movs	r1, #128	; 0x80
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f9ed 	bl	8005250 <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e01f      	b.n	8004ec0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	60ba      	str	r2, [r7, #8]
 8004e86:	781a      	ldrb	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1b7      	bne.n	8004e08 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2140      	movs	r1, #64	; 0x40
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f9d4 	bl	8005250 <UART_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e006      	b.n	8004ec0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e000      	b.n	8004ec0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004ebe:	2302      	movs	r3, #2
  }
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	f040 8090 	bne.w	800500a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_UART_Receive+0x2e>
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e088      	b.n	800500c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_UART_Receive+0x40>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e081      	b.n	800500c <HAL_UART_Receive+0x144>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2222      	movs	r2, #34	; 0x22
 8004f1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f1e:	f7fe fd1d 	bl	800395c <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	88fa      	ldrh	r2, [r7, #6]
 8004f2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004f38:	e05c      	b.n	8004ff4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f50:	d12b      	bne.n	8004faa <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2120      	movs	r1, #32
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f977 	bl	8005250 <UART_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e04f      	b.n	800500c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10c      	bne.n	8004f92 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	e030      	b.n	8004ff4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	e024      	b.n	8004ff4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2120      	movs	r1, #32
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f94b 	bl	8005250 <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e023      	b.n	800500c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d108      	bne.n	8004fde <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6859      	ldr	r1, [r3, #4]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	60ba      	str	r2, [r7, #8]
 8004fd8:	b2ca      	uxtb	r2, r1
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	e00a      	b.n	8004ff4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	1c59      	adds	r1, r3, #1
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d19d      	bne.n	8004f3a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	e000      	b.n	800500c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800500a:	2302      	movs	r3, #2
  }
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10d      	bne.n	8005066 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_UART_IRQHandler+0x52>
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9e0 	bl	8005424 <UART_Receive_IT>
      return;
 8005064:	e0d0      	b.n	8005208 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80b0 	beq.w	80051ce <HAL_UART_IRQHandler+0x1ba>
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d105      	bne.n	8005084 <HAL_UART_IRQHandler+0x70>
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80a5 	beq.w	80051ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_UART_IRQHandler+0x90>
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	f043 0201 	orr.w	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_UART_IRQHandler+0xb0>
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050bc:	f043 0202 	orr.w	r2, r3, #2
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_UART_IRQHandler+0xd0>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	f043 0204 	orr.w	r2, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00f      	beq.n	800510e <HAL_UART_IRQHandler+0xfa>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <HAL_UART_IRQHandler+0xee>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	f043 0208 	orr.w	r2, r3, #8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d077      	beq.n	8005206 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <HAL_UART_IRQHandler+0x11c>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f97a 	bl	8005424 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <HAL_UART_IRQHandler+0x144>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d031      	beq.n	80051bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f8c3 	bl	80052e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d123      	bne.n	80051b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005180:	2b00      	cmp	r3, #0
 8005182:	d013      	beq.n	80051ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005188:	4a21      	ldr	r2, [pc, #132]	; (8005210 <HAL_UART_IRQHandler+0x1fc>)
 800518a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	4618      	mov	r0, r3
 8005192:	f7fe fd40 	bl	8003c16 <HAL_DMA_Abort_IT>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d016      	beq.n	80051ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051a6:	4610      	mov	r0, r2
 80051a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051aa:	e00e      	b.n	80051ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f845 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b2:	e00a      	b.n	80051ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f841 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ba:	e006      	b.n	80051ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f83d 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80051c8:	e01d      	b.n	8005206 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ca:	bf00      	nop
    return;
 80051cc:	e01b      	b.n	8005206 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_UART_IRQHandler+0x1d6>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f8b0 	bl	8005348 <UART_Transmit_IT>
    return;
 80051e8:	e00e      	b.n	8005208 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <HAL_UART_IRQHandler+0x1f4>
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8f8 	bl	80053f4 <UART_EndTransmit_IT>
    return;
 8005204:	e000      	b.n	8005208 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005206:	bf00      	nop
  }
}
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	08005321 	.word	0x08005321

08005214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005260:	e02c      	b.n	80052bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005268:	d028      	beq.n	80052bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <UART_WaitOnFlagUntilTimeout+0x30>
 8005270:	f7fe fb74 	bl	800395c <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d21d      	bcs.n	80052bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800528e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e00f      	b.n	80052dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d0c3      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff ff7e 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b21      	cmp	r3, #33	; 0x21
 800535a:	d144      	bne.n	80053e6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005364:	d11a      	bne.n	800539c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	1c9a      	adds	r2, r3, #2
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	621a      	str	r2, [r3, #32]
 800538e:	e00e      	b.n	80053ae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	621a      	str	r2, [r3, #32]
 800539a:	e008      	b.n	80053ae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	1c59      	adds	r1, r3, #1
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6211      	str	r1, [r2, #32]
 80053a6:	781a      	ldrb	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	4619      	mov	r1, r3
 80053bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10f      	bne.n	80053e2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053e6:	2302      	movs	r3, #2
  }
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800540a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fefd 	bl	8005214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b22      	cmp	r3, #34	; 0x22
 8005436:	d171      	bne.n	800551c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005440:	d123      	bne.n	800548a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10e      	bne.n	800546e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	1c9a      	adds	r2, r3, #2
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28
 800546c:	e029      	b.n	80054c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	b29b      	uxth	r3, r3
 8005476:	b2db      	uxtb	r3, r3
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	629a      	str	r2, [r3, #40]	; 0x28
 8005488:	e01b      	b.n	80054c2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6858      	ldr	r0, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	1c59      	adds	r1, r3, #1
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6291      	str	r1, [r2, #40]	; 0x28
 80054a2:	b2c2      	uxtb	r2, r0
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e00c      	b.n	80054c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	1c58      	adds	r0, r3, #1
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	6288      	str	r0, [r1, #40]	; 0x28
 80054ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4619      	mov	r1, r3
 80054d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d120      	bne.n	8005518 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0220 	bic.w	r2, r2, #32
 80054e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fe8a 	bl	8005228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e002      	b.n	800551e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	b0bd      	sub	sp, #244	; 0xf4
 800552e:	af00      	add	r7, sp, #0
 8005530:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005544:	68d9      	ldr	r1, [r3, #12]
 8005546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	ea40 0301 	orr.w	r3, r0, r1
 8005550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	431a      	orrs	r2, r3
 8005560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	431a      	orrs	r2, r3
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005580:	f021 010c 	bic.w	r1, r1, #12
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800558e:	430b      	orrs	r3, r1
 8005590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a2:	6999      	ldr	r1, [r3, #24]
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	ea40 0301 	orr.w	r3, r0, r1
 80055ae:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ba:	f040 81a5 	bne.w	8005908 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4bcd      	ldr	r3, [pc, #820]	; (80058fc <UART_SetConfig+0x3d4>)
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d006      	beq.n	80055d8 <UART_SetConfig+0xb0>
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	4bcb      	ldr	r3, [pc, #812]	; (8005900 <UART_SetConfig+0x3d8>)
 80055d2:	429a      	cmp	r2, r3
 80055d4:	f040 80cb 	bne.w	800576e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055d8:	f7ff f968 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 80055dc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055e4:	461c      	mov	r4, r3
 80055e6:	f04f 0500 	mov.w	r5, #0
 80055ea:	4622      	mov	r2, r4
 80055ec:	462b      	mov	r3, r5
 80055ee:	1891      	adds	r1, r2, r2
 80055f0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80055f4:	415b      	adcs	r3, r3
 80055f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80055fe:	1912      	adds	r2, r2, r4
 8005600:	eb45 0303 	adc.w	r3, r5, r3
 8005604:	f04f 0000 	mov.w	r0, #0
 8005608:	f04f 0100 	mov.w	r1, #0
 800560c:	00d9      	lsls	r1, r3, #3
 800560e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005612:	00d0      	lsls	r0, r2, #3
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	1911      	adds	r1, r2, r4
 800561a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800561e:	416b      	adcs	r3, r5
 8005620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	461a      	mov	r2, r3
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	1891      	adds	r1, r2, r2
 8005632:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005636:	415b      	adcs	r3, r3
 8005638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800563c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005640:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005644:	f7fb fb08 	bl	8000c58 <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4bad      	ldr	r3, [pc, #692]	; (8005904 <UART_SetConfig+0x3dc>)
 800564e:	fba3 2302 	umull	r2, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	011e      	lsls	r6, r3, #4
 8005656:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800565a:	461c      	mov	r4, r3
 800565c:	f04f 0500 	mov.w	r5, #0
 8005660:	4622      	mov	r2, r4
 8005662:	462b      	mov	r3, r5
 8005664:	1891      	adds	r1, r2, r2
 8005666:	67b9      	str	r1, [r7, #120]	; 0x78
 8005668:	415b      	adcs	r3, r3
 800566a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800566c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005670:	1912      	adds	r2, r2, r4
 8005672:	eb45 0303 	adc.w	r3, r5, r3
 8005676:	f04f 0000 	mov.w	r0, #0
 800567a:	f04f 0100 	mov.w	r1, #0
 800567e:	00d9      	lsls	r1, r3, #3
 8005680:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005684:	00d0      	lsls	r0, r2, #3
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	1911      	adds	r1, r2, r4
 800568c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005690:	416b      	adcs	r3, r5
 8005692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	461a      	mov	r2, r3
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	1891      	adds	r1, r2, r2
 80056a4:	6739      	str	r1, [r7, #112]	; 0x70
 80056a6:	415b      	adcs	r3, r3
 80056a8:	677b      	str	r3, [r7, #116]	; 0x74
 80056aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80056ae:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80056b2:	f7fb fad1 	bl	8000c58 <__aeabi_uldivmod>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4b92      	ldr	r3, [pc, #584]	; (8005904 <UART_SetConfig+0x3dc>)
 80056bc:	fba3 1302 	umull	r1, r3, r3, r2
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	2164      	movs	r1, #100	; 0x64
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	3332      	adds	r3, #50	; 0x32
 80056ce:	4a8d      	ldr	r2, [pc, #564]	; (8005904 <UART_SetConfig+0x3dc>)
 80056d0:	fba2 2303 	umull	r2, r3, r2, r3
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056dc:	441e      	add	r6, r3
 80056de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056e2:	4618      	mov	r0, r3
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	1894      	adds	r4, r2, r2
 80056ee:	66bc      	str	r4, [r7, #104]	; 0x68
 80056f0:	415b      	adcs	r3, r3
 80056f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80056f8:	1812      	adds	r2, r2, r0
 80056fa:	eb41 0303 	adc.w	r3, r1, r3
 80056fe:	f04f 0400 	mov.w	r4, #0
 8005702:	f04f 0500 	mov.w	r5, #0
 8005706:	00dd      	lsls	r5, r3, #3
 8005708:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800570c:	00d4      	lsls	r4, r2, #3
 800570e:	4622      	mov	r2, r4
 8005710:	462b      	mov	r3, r5
 8005712:	1814      	adds	r4, r2, r0
 8005714:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005718:	414b      	adcs	r3, r1
 800571a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	461a      	mov	r2, r3
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	1891      	adds	r1, r2, r2
 800572c:	6639      	str	r1, [r7, #96]	; 0x60
 800572e:	415b      	adcs	r3, r3
 8005730:	667b      	str	r3, [r7, #100]	; 0x64
 8005732:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800573a:	f7fb fa8d 	bl	8000c58 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4b70      	ldr	r3, [pc, #448]	; (8005904 <UART_SetConfig+0x3dc>)
 8005744:	fba3 1302 	umull	r1, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	2164      	movs	r1, #100	; 0x64
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	3332      	adds	r3, #50	; 0x32
 8005756:	4a6b      	ldr	r2, [pc, #428]	; (8005904 <UART_SetConfig+0x3dc>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 0207 	and.w	r2, r3, #7
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4432      	add	r2, r6
 800576a:	609a      	str	r2, [r3, #8]
 800576c:	e26d      	b.n	8005c4a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800576e:	f7ff f889 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8005772:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005776:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800577a:	461c      	mov	r4, r3
 800577c:	f04f 0500 	mov.w	r5, #0
 8005780:	4622      	mov	r2, r4
 8005782:	462b      	mov	r3, r5
 8005784:	1891      	adds	r1, r2, r2
 8005786:	65b9      	str	r1, [r7, #88]	; 0x58
 8005788:	415b      	adcs	r3, r3
 800578a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800578c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005790:	1912      	adds	r2, r2, r4
 8005792:	eb45 0303 	adc.w	r3, r5, r3
 8005796:	f04f 0000 	mov.w	r0, #0
 800579a:	f04f 0100 	mov.w	r1, #0
 800579e:	00d9      	lsls	r1, r3, #3
 80057a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057a4:	00d0      	lsls	r0, r2, #3
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	1911      	adds	r1, r2, r4
 80057ac:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80057b0:	416b      	adcs	r3, r5
 80057b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	461a      	mov	r2, r3
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	1891      	adds	r1, r2, r2
 80057c4:	6539      	str	r1, [r7, #80]	; 0x50
 80057c6:	415b      	adcs	r3, r3
 80057c8:	657b      	str	r3, [r7, #84]	; 0x54
 80057ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057ce:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80057d2:	f7fb fa41 	bl	8000c58 <__aeabi_uldivmod>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4b4a      	ldr	r3, [pc, #296]	; (8005904 <UART_SetConfig+0x3dc>)
 80057dc:	fba3 2302 	umull	r2, r3, r3, r2
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	011e      	lsls	r6, r3, #4
 80057e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057e8:	461c      	mov	r4, r3
 80057ea:	f04f 0500 	mov.w	r5, #0
 80057ee:	4622      	mov	r2, r4
 80057f0:	462b      	mov	r3, r5
 80057f2:	1891      	adds	r1, r2, r2
 80057f4:	64b9      	str	r1, [r7, #72]	; 0x48
 80057f6:	415b      	adcs	r3, r3
 80057f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057fe:	1912      	adds	r2, r2, r4
 8005800:	eb45 0303 	adc.w	r3, r5, r3
 8005804:	f04f 0000 	mov.w	r0, #0
 8005808:	f04f 0100 	mov.w	r1, #0
 800580c:	00d9      	lsls	r1, r3, #3
 800580e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005812:	00d0      	lsls	r0, r2, #3
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	1911      	adds	r1, r2, r4
 800581a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800581e:	416b      	adcs	r3, r5
 8005820:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	461a      	mov	r2, r3
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	1891      	adds	r1, r2, r2
 8005832:	6439      	str	r1, [r7, #64]	; 0x40
 8005834:	415b      	adcs	r3, r3
 8005836:	647b      	str	r3, [r7, #68]	; 0x44
 8005838:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800583c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005840:	f7fb fa0a 	bl	8000c58 <__aeabi_uldivmod>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4b2e      	ldr	r3, [pc, #184]	; (8005904 <UART_SetConfig+0x3dc>)
 800584a:	fba3 1302 	umull	r1, r3, r3, r2
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	2164      	movs	r1, #100	; 0x64
 8005852:	fb01 f303 	mul.w	r3, r1, r3
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	3332      	adds	r3, #50	; 0x32
 800585c:	4a29      	ldr	r2, [pc, #164]	; (8005904 <UART_SetConfig+0x3dc>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800586a:	441e      	add	r6, r3
 800586c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005870:	4618      	mov	r0, r3
 8005872:	f04f 0100 	mov.w	r1, #0
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	1894      	adds	r4, r2, r2
 800587c:	63bc      	str	r4, [r7, #56]	; 0x38
 800587e:	415b      	adcs	r3, r3
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005882:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005886:	1812      	adds	r2, r2, r0
 8005888:	eb41 0303 	adc.w	r3, r1, r3
 800588c:	f04f 0400 	mov.w	r4, #0
 8005890:	f04f 0500 	mov.w	r5, #0
 8005894:	00dd      	lsls	r5, r3, #3
 8005896:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800589a:	00d4      	lsls	r4, r2, #3
 800589c:	4622      	mov	r2, r4
 800589e:	462b      	mov	r3, r5
 80058a0:	1814      	adds	r4, r2, r0
 80058a2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80058a6:	414b      	adcs	r3, r1
 80058a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	1891      	adds	r1, r2, r2
 80058ba:	6339      	str	r1, [r7, #48]	; 0x30
 80058bc:	415b      	adcs	r3, r3
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
 80058c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058c4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058c8:	f7fb f9c6 	bl	8000c58 <__aeabi_uldivmod>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <UART_SetConfig+0x3dc>)
 80058d2:	fba3 1302 	umull	r1, r3, r3, r2
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	2164      	movs	r1, #100	; 0x64
 80058da:	fb01 f303 	mul.w	r3, r1, r3
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	3332      	adds	r3, #50	; 0x32
 80058e4:	4a07      	ldr	r2, [pc, #28]	; (8005904 <UART_SetConfig+0x3dc>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	f003 0207 	and.w	r2, r3, #7
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4432      	add	r2, r6
 80058f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80058fa:	e1a6      	b.n	8005c4a <UART_SetConfig+0x722>
 80058fc:	40011000 	.word	0x40011000
 8005900:	40011400 	.word	0x40011400
 8005904:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4bd1      	ldr	r3, [pc, #836]	; (8005c54 <UART_SetConfig+0x72c>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d006      	beq.n	8005922 <UART_SetConfig+0x3fa>
 8005914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	4bcf      	ldr	r3, [pc, #828]	; (8005c58 <UART_SetConfig+0x730>)
 800591c:	429a      	cmp	r2, r3
 800591e:	f040 80ca 	bne.w	8005ab6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005922:	f7fe ffc3 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8005926:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800592a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800592e:	461c      	mov	r4, r3
 8005930:	f04f 0500 	mov.w	r5, #0
 8005934:	4622      	mov	r2, r4
 8005936:	462b      	mov	r3, r5
 8005938:	1891      	adds	r1, r2, r2
 800593a:	62b9      	str	r1, [r7, #40]	; 0x28
 800593c:	415b      	adcs	r3, r3
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005940:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005944:	1912      	adds	r2, r2, r4
 8005946:	eb45 0303 	adc.w	r3, r5, r3
 800594a:	f04f 0000 	mov.w	r0, #0
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	00d9      	lsls	r1, r3, #3
 8005954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005958:	00d0      	lsls	r0, r2, #3
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	eb12 0a04 	adds.w	sl, r2, r4
 8005962:	eb43 0b05 	adc.w	fp, r3, r5
 8005966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	4618      	mov	r0, r3
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	008b      	lsls	r3, r1, #2
 800597c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005980:	0082      	lsls	r2, r0, #2
 8005982:	4650      	mov	r0, sl
 8005984:	4659      	mov	r1, fp
 8005986:	f7fb f967 	bl	8000c58 <__aeabi_uldivmod>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4bb3      	ldr	r3, [pc, #716]	; (8005c5c <UART_SetConfig+0x734>)
 8005990:	fba3 2302 	umull	r2, r3, r3, r2
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	011e      	lsls	r6, r3, #4
 8005998:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800599c:	4618      	mov	r0, r3
 800599e:	f04f 0100 	mov.w	r1, #0
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	1894      	adds	r4, r2, r2
 80059a8:	623c      	str	r4, [r7, #32]
 80059aa:	415b      	adcs	r3, r3
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
 80059ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059b2:	1812      	adds	r2, r2, r0
 80059b4:	eb41 0303 	adc.w	r3, r1, r3
 80059b8:	f04f 0400 	mov.w	r4, #0
 80059bc:	f04f 0500 	mov.w	r5, #0
 80059c0:	00dd      	lsls	r5, r3, #3
 80059c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059c6:	00d4      	lsls	r4, r2, #3
 80059c8:	4622      	mov	r2, r4
 80059ca:	462b      	mov	r3, r5
 80059cc:	1814      	adds	r4, r2, r0
 80059ce:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80059d2:	414b      	adcs	r3, r1
 80059d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4618      	mov	r0, r3
 80059e0:	f04f 0100 	mov.w	r1, #0
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	008b      	lsls	r3, r1, #2
 80059ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059f2:	0082      	lsls	r2, r0, #2
 80059f4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80059f8:	f7fb f92e 	bl	8000c58 <__aeabi_uldivmod>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4b96      	ldr	r3, [pc, #600]	; (8005c5c <UART_SetConfig+0x734>)
 8005a02:	fba3 1302 	umull	r1, r3, r3, r2
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	2164      	movs	r1, #100	; 0x64
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	3332      	adds	r3, #50	; 0x32
 8005a14:	4a91      	ldr	r2, [pc, #580]	; (8005c5c <UART_SetConfig+0x734>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a20:	441e      	add	r6, r3
 8005a22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a26:	4618      	mov	r0, r3
 8005a28:	f04f 0100 	mov.w	r1, #0
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	1894      	adds	r4, r2, r2
 8005a32:	61bc      	str	r4, [r7, #24]
 8005a34:	415b      	adcs	r3, r3
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a3c:	1812      	adds	r2, r2, r0
 8005a3e:	eb41 0303 	adc.w	r3, r1, r3
 8005a42:	f04f 0400 	mov.w	r4, #0
 8005a46:	f04f 0500 	mov.w	r5, #0
 8005a4a:	00dd      	lsls	r5, r3, #3
 8005a4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a50:	00d4      	lsls	r4, r2, #3
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	1814      	adds	r4, r2, r0
 8005a58:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005a5c:	414b      	adcs	r3, r1
 8005a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f04f 0100 	mov.w	r1, #0
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	008b      	lsls	r3, r1, #2
 8005a78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a7c:	0082      	lsls	r2, r0, #2
 8005a7e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005a82:	f7fb f8e9 	bl	8000c58 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4b74      	ldr	r3, [pc, #464]	; (8005c5c <UART_SetConfig+0x734>)
 8005a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	2164      	movs	r1, #100	; 0x64
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	3332      	adds	r3, #50	; 0x32
 8005a9e:	4a6f      	ldr	r2, [pc, #444]	; (8005c5c <UART_SetConfig+0x734>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4432      	add	r2, r6
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	e0c9      	b.n	8005c4a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ab6:	f7fe fee5 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8005aba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005abe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ac2:	461c      	mov	r4, r3
 8005ac4:	f04f 0500 	mov.w	r5, #0
 8005ac8:	4622      	mov	r2, r4
 8005aca:	462b      	mov	r3, r5
 8005acc:	1891      	adds	r1, r2, r2
 8005ace:	6139      	str	r1, [r7, #16]
 8005ad0:	415b      	adcs	r3, r3
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ad8:	1912      	adds	r2, r2, r4
 8005ada:	eb45 0303 	adc.w	r3, r5, r3
 8005ade:	f04f 0000 	mov.w	r0, #0
 8005ae2:	f04f 0100 	mov.w	r1, #0
 8005ae6:	00d9      	lsls	r1, r3, #3
 8005ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aec:	00d0      	lsls	r0, r2, #3
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	eb12 0804 	adds.w	r8, r2, r4
 8005af6:	eb43 0905 	adc.w	r9, r3, r5
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f04f 0100 	mov.w	r1, #0
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	008b      	lsls	r3, r1, #2
 8005b10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b14:	0082      	lsls	r2, r0, #2
 8005b16:	4640      	mov	r0, r8
 8005b18:	4649      	mov	r1, r9
 8005b1a:	f7fb f89d 	bl	8000c58 <__aeabi_uldivmod>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4b4e      	ldr	r3, [pc, #312]	; (8005c5c <UART_SetConfig+0x734>)
 8005b24:	fba3 2302 	umull	r2, r3, r3, r2
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	011e      	lsls	r6, r3, #4
 8005b2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b30:	4618      	mov	r0, r3
 8005b32:	f04f 0100 	mov.w	r1, #0
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	1894      	adds	r4, r2, r2
 8005b3c:	60bc      	str	r4, [r7, #8]
 8005b3e:	415b      	adcs	r3, r3
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b46:	1812      	adds	r2, r2, r0
 8005b48:	eb41 0303 	adc.w	r3, r1, r3
 8005b4c:	f04f 0400 	mov.w	r4, #0
 8005b50:	f04f 0500 	mov.w	r5, #0
 8005b54:	00dd      	lsls	r5, r3, #3
 8005b56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b5a:	00d4      	lsls	r4, r2, #3
 8005b5c:	4622      	mov	r2, r4
 8005b5e:	462b      	mov	r3, r5
 8005b60:	1814      	adds	r4, r2, r0
 8005b62:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005b66:	414b      	adcs	r3, r1
 8005b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f04f 0100 	mov.w	r1, #0
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	008b      	lsls	r3, r1, #2
 8005b82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b86:	0082      	lsls	r2, r0, #2
 8005b88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b8c:	f7fb f864 	bl	8000c58 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4b31      	ldr	r3, [pc, #196]	; (8005c5c <UART_SetConfig+0x734>)
 8005b96:	fba3 1302 	umull	r1, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2164      	movs	r1, #100	; 0x64
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	3332      	adds	r3, #50	; 0x32
 8005ba8:	4a2c      	ldr	r2, [pc, #176]	; (8005c5c <UART_SetConfig+0x734>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb4:	441e      	add	r6, r3
 8005bb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f04f 0100 	mov.w	r1, #0
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	1894      	adds	r4, r2, r2
 8005bc6:	603c      	str	r4, [r7, #0]
 8005bc8:	415b      	adcs	r3, r3
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd0:	1812      	adds	r2, r2, r0
 8005bd2:	eb41 0303 	adc.w	r3, r1, r3
 8005bd6:	f04f 0400 	mov.w	r4, #0
 8005bda:	f04f 0500 	mov.w	r5, #0
 8005bde:	00dd      	lsls	r5, r3, #3
 8005be0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005be4:	00d4      	lsls	r4, r2, #3
 8005be6:	4622      	mov	r2, r4
 8005be8:	462b      	mov	r3, r5
 8005bea:	1814      	adds	r4, r2, r0
 8005bec:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005bf0:	414b      	adcs	r3, r1
 8005bf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f04f 0100 	mov.w	r1, #0
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	008b      	lsls	r3, r1, #2
 8005c0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c10:	0082      	lsls	r2, r0, #2
 8005c12:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005c16:	f7fb f81f 	bl	8000c58 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <UART_SetConfig+0x734>)
 8005c20:	fba3 1302 	umull	r1, r3, r3, r2
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	2164      	movs	r1, #100	; 0x64
 8005c28:	fb01 f303 	mul.w	r3, r1, r3
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	3332      	adds	r3, #50	; 0x32
 8005c32:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <UART_SetConfig+0x734>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	f003 020f 	and.w	r2, r3, #15
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4432      	add	r2, r6
 8005c46:	609a      	str	r2, [r3, #8]
}
 8005c48:	e7ff      	b.n	8005c4a <UART_SetConfig+0x722>
 8005c4a:	bf00      	nop
 8005c4c:	37f4      	adds	r7, #244	; 0xf4
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c54:	40011000 	.word	0x40011000
 8005c58:	40011400 	.word	0x40011400
 8005c5c:	51eb851f 	.word	0x51eb851f

08005c60 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8005c70:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005c72:	461a      	mov	r2, r3
        err.type, err.code);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	4806      	ldr	r0, [pc, #24]	; (8005c98 <ai_log_err+0x38>)
 8005c7e:	f002 fbbb 	bl	80083f8 <iprintf>
 8005c82:	e008      	b.n	8005c96 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8005c84:	793b      	ldrb	r3, [r7, #4]
 8005c86:	4619      	mov	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4802      	ldr	r0, [pc, #8]	; (8005c9c <ai_log_err+0x3c>)
 8005c92:	f002 fbb1 	bl	80083f8 <iprintf>

  do {} while (1);
 8005c96:	e7fe      	b.n	8005c96 <ai_log_err+0x36>
 8005c98:	0800b1a4 	.word	0x0800b1a4
 8005c9c:	0800b1d8 	.word	0x0800b1d8

08005ca0 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b090      	sub	sp, #64	; 0x40
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8005caa:	2100      	movs	r1, #0
 8005cac:	4837      	ldr	r0, [pc, #220]	; (8005d8c <ai_boostrap+0xec>)
 8005cae:	f000 f9d1 	bl	8006054 <ai_network_create>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 8005cb6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d006      	beq.n	8005ccc <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 8005cbe:	4934      	ldr	r1, [pc, #208]	; (8005d90 <ai_boostrap+0xf0>)
 8005cc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005cc2:	f7ff ffcd 	bl	8005c60 <ai_log_err>
    return -1;
 8005cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cca:	e05b      	b.n	8005d84 <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8005ccc:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <ai_boostrap+0xf4>)
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	823b      	strh	r3, [r7, #16]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	827b      	strh	r3, [r7, #18]
 8005cd8:	2301      	movs	r3, #1
 8005cda:	82bb      	strh	r3, [r7, #20]
 8005cdc:	4b2e      	ldr	r3, [pc, #184]	; (8005d98 <ai_boostrap+0xf8>)
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	623b      	str	r3, [r7, #32]
 8005ce8:	4b2c      	ldr	r3, [pc, #176]	; (8005d9c <ai_boostrap+0xfc>)
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	2301      	movs	r3, #1
 8005cee:	853b      	strh	r3, [r7, #40]	; 0x28
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
 8005d02:	2300      	movs	r3, #0
 8005d04:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 8005d06:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <ai_boostrap+0xec>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f107 020c 	add.w	r2, r7, #12
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 f9c1 	bl	8006098 <ai_network_init>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f083 0301 	eor.w	r3, r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 8005d22:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <ai_boostrap+0xec>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f988 	bl	800603c <ai_network_get_error>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 8005d30:	491b      	ldr	r1, [pc, #108]	; (8005da0 <ai_boostrap+0x100>)
 8005d32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005d34:	f7ff ff94 	bl	8005c60 <ai_log_err>
      return -1;
 8005d38:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3c:	e022      	b.n	8005d84 <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <ai_boostrap+0xec>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4918      	ldr	r1, [pc, #96]	; (8005da4 <ai_boostrap+0x104>)
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 f91b 	bl	8005f80 <ai_network_get_info>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f083 0301 	eor.w	r3, r3, #1
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d015      	beq.n	8005d82 <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <ai_boostrap+0xec>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f96e 	bl	800603c <ai_network_get_error>
 8005d60:	4603      	mov	r3, r0
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 8005d64:	4910      	ldr	r1, [pc, #64]	; (8005da8 <ai_boostrap+0x108>)
 8005d66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005d68:	f7ff ff7a 	bl	8005c60 <ai_log_err>
    ai_network_destroy(network);
 8005d6c:	4b07      	ldr	r3, [pc, #28]	; (8005d8c <ai_boostrap+0xec>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f985 	bl	8006080 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <ai_boostrap+0xec>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
    return -3;
 8005d7c:	f06f 0302 	mvn.w	r3, #2
 8005d80:	e000      	b.n	8005d84 <ai_boostrap+0xe4>
  }

  return 0;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3740      	adds	r7, #64	; 0x40
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	200010d8 	.word	0x200010d8
 8005d90:	0800b208 	.word	0x0800b208
 8005d94:	40040440 	.word	0x40040440
 8005d98:	0005b400 	.word	0x0005b400
 8005d9c:	00040440 	.word	0x00040440
 8005da0:	0800b21c 	.word	0x0800b21c
 8005da4:	200010dc 	.word	0x200010dc
 8005da8:	0800b22c 	.word	0x0800b22c

08005dac <ai_run_v2>:

  return 0;
}

/* USER CODE BEGIN 2 */
int ai_run_v2(void *in_data, void *out_data){
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
	ai_i32 nbatch;
	ai_error err;

	/* Parameters checking */
	if (!in_data || !out_data || !network)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d006      	beq.n	8005dca <ai_run_v2+0x1e>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <ai_run_v2+0x1e>
 8005dc2:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <ai_run_v2+0x74>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <ai_run_v2+0x24>
		return -1;
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	e022      	b.n	8005e16 <ai_run_v2+0x6a>

	ai_buffer *ai_input = network_info.inputs;
 8005dd0:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <ai_run_v2+0x78>)
 8005dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd4:	617b      	str	r3, [r7, #20]
	ai_buffer *ai_output = network_info.outputs;
 8005dd6:	4b13      	ldr	r3, [pc, #76]	; (8005e24 <ai_run_v2+0x78>)
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	613b      	str	r3, [r7, #16]

	/* Initialize input/output buffer handlers */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	611a      	str	r2, [r3, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	611a      	str	r2, [r3, #16]

	/* 2 - Perform the inference */
	nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <ai_run_v2+0x74>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	6979      	ldr	r1, [r7, #20]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f990 	bl	8006116 <ai_network_run>
 8005df6:	60f8      	str	r0, [r7, #12]
	if (nbatch != 1) {
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d00a      	beq.n	8005e14 <ai_run_v2+0x68>
		err = ai_network_get_error(network);
 8005dfe:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <ai_run_v2+0x74>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f91a 	bl	800603c <ai_network_get_error>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	60bb      	str	r3, [r7, #8]
		// ...
		return err.code;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005e12:	e000      	b.n	8005e16 <ai_run_v2+0x6a>
	}


  return 0;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	200010d8 	.word	0x200010d8
 8005e24:	200010dc 	.word	0x200010dc

08005e28 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005e2c:	4805      	ldr	r0, [pc, #20]	; (8005e44 <MX_X_CUBE_AI_Init+0x1c>)
 8005e2e:	f002 fb69 	bl	8008504 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 8005e32:	f000 f981 	bl	8006138 <ai_network_data_weights_get>
 8005e36:	4603      	mov	r3, r0
 8005e38:	4903      	ldr	r1, [pc, #12]	; (8005e48 <MX_X_CUBE_AI_Init+0x20>)
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff ff30 	bl	8005ca0 <ai_boostrap>
    /* USER CODE END 5 */
}
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	0800b254 	.word	0x0800b254
 8005e48:	20001150 	.word	0x20001150

08005e4c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	3303      	adds	r3, #3
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8005e62:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <network_configure_activations+0x68>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <network_configure_activations+0x68>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	60da      	str	r2, [r3, #12]
    input_layer_output_array.data = AI_PTR(activations + 0);
 8005e6e:	4a12      	ldr	r2, [pc, #72]	; (8005eb8 <network_configure_activations+0x6c>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6093      	str	r3, [r2, #8]
    input_layer_output_array.data_start = AI_PTR(activations + 0);
 8005e74:	4a10      	ldr	r2, [pc, #64]	; (8005eb8 <network_configure_activations+0x6c>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	60d3      	str	r3, [r2, #12]
    input_layer_nl_output_array.data = AI_PTR(activations + 0);
 8005e7a:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <network_configure_activations+0x70>)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6093      	str	r3, [r2, #8]
    input_layer_nl_output_array.data_start = AI_PTR(activations + 0);
 8005e80:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <network_configure_activations+0x70>)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	60d3      	str	r3, [r2, #12]
    hidden1_output_array.data = AI_PTR(activations + 512);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005e8c:	4a0c      	ldr	r2, [pc, #48]	; (8005ec0 <network_configure_activations+0x74>)
 8005e8e:	6093      	str	r3, [r2, #8]
    hidden1_output_array.data_start = AI_PTR(activations + 512);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005e96:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <network_configure_activations+0x74>)
 8005e98:	60d3      	str	r3, [r2, #12]
    hidden1_nl_output_array.data = AI_PTR(NULL);
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <network_configure_activations+0x78>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]
    hidden1_nl_output_array.data_start = AI_PTR(NULL);
 8005ea0:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <network_configure_activations+0x78>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8005ea6:	2301      	movs	r3, #1
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	20000a84 	.word	0x20000a84
 8005eb8:	20000a94 	.word	0x20000a94
 8005ebc:	20000aa4 	.word	0x20000aa4
 8005ec0:	20000ab4 	.word	0x20000ab4
 8005ec4:	20000ac4 	.word	0x20000ac4

08005ec8 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    input_layer_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ed8:	4b25      	ldr	r3, [pc, #148]	; (8005f70 <network_configure_weights+0xa8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ee0:	4a23      	ldr	r2, [pc, #140]	; (8005f70 <network_configure_weights+0xa8>)
 8005ee2:	6013      	str	r3, [r2, #0]
    input_layer_weights_array.data = AI_PTR(weights + 0);
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <network_configure_weights+0xa8>)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6093      	str	r3, [r2, #8]
    input_layer_weights_array.data_start = AI_PTR(weights + 0);
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <network_configure_weights+0xa8>)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	60d3      	str	r3, [r2, #12]
    input_layer_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ef0:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <network_configure_weights+0xac>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef8:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <network_configure_weights+0xac>)
 8005efa:	6013      	str	r3, [r2, #0]
    input_layer_bias_array.data = AI_PTR(weights + 307200);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005f02:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <network_configure_weights+0xac>)
 8005f04:	6093      	str	r3, [r2, #8]
    input_layer_bias_array.data_start = AI_PTR(weights + 307200);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005f0c:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <network_configure_weights+0xac>)
 8005f0e:	60d3      	str	r3, [r2, #12]
    hidden1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f10:	4b19      	ldr	r3, [pc, #100]	; (8005f78 <network_configure_weights+0xb0>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f18:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <network_configure_weights+0xb0>)
 8005f1a:	6013      	str	r3, [r2, #0]
    hidden1_weights_array.data = AI_PTR(weights + 307712);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005f22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005f26:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <network_configure_weights+0xb0>)
 8005f28:	6093      	str	r3, [r2, #8]
    hidden1_weights_array.data_start = AI_PTR(weights + 307712);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005f30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005f34:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <network_configure_weights+0xb0>)
 8005f36:	60d3      	str	r3, [r2, #12]
    hidden1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f38:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <network_configure_weights+0xb4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f40:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <network_configure_weights+0xb4>)
 8005f42:	6013      	str	r3, [r2, #0]
    hidden1_bias_array.data = AI_PTR(weights + 373248);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 8005f4a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005f4e:	4a0b      	ldr	r2, [pc, #44]	; (8005f7c <network_configure_weights+0xb4>)
 8005f50:	6093      	str	r3, [r2, #8]
    hidden1_bias_array.data_start = AI_PTR(weights + 373248);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 8005f58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005f5c:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <network_configure_weights+0xb4>)
 8005f5e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8005f60:	2301      	movs	r3, #1
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20000ad4 	.word	0x20000ad4
 8005f74:	20000ae4 	.word	0x20000ae4
 8005f78:	20000af4 	.word	0x20000af4
 8005f7c:	20000b04 	.word	0x20000b04

08005f80 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b0a0      	sub	sp, #128	; 0x80
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f9f8 	bl	8006380 <ai_platform_context_acquire>
 8005f90:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d041      	beq.n	800601c <ai_network_get_info+0x9c>
 8005f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d03e      	beq.n	800601c <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 8005f9e:	f107 0308 	add.w	r3, r7, #8
 8005fa2:	2274      	movs	r2, #116	; 0x74
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 fcfa 	bl	80079a0 <memset>
 8005fac:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <ai_network_get_info+0xa8>)
 8005fae:	60bb      	str	r3, [r7, #8]
 8005fb0:	4b1e      	ldr	r3, [pc, #120]	; (800602c <ai_network_get_info+0xac>)
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <ai_network_get_info+0xb0>)
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <ai_network_get_info+0xb4>)
 8005fba:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005fbc:	f000 f934 	bl	8006228 <ai_platform_runtime_get_revision>
 8005fc0:	4603      	mov	r3, r0
    ai_network_report r = {
 8005fc2:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005fc4:	f000 f952 	bl	800626c <ai_platform_runtime_get_version>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8005fcc:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <ai_network_get_info+0xb8>)
 8005fce:	623b      	str	r3, [r7, #32]
 8005fd0:	2306      	movs	r3, #6
 8005fd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8005fd6:	f000 f96b 	bl	80062b0 <ai_platform_api_get_version>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005fde:	f000 f99b 	bl	8006318 <ai_platform_interface_api_get_version>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 8005fe6:	f44f 33b7 	mov.w	r3, #93696	; 0x16e00
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005fec:	f107 0308 	add.w	r3, r7, #8
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa20 	bl	8006438 <ai_platform_api_get_network_report>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f083 0301 	eor.w	r3, r3, #1
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <ai_network_get_info+0x88>
 8006004:	2300      	movs	r3, #0
 8006006:	e00a      	b.n	800601e <ai_network_get_info+0x9e>

    *report = r;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f107 0308 	add.w	r3, r7, #8
 8006010:	2274      	movs	r2, #116	; 0x74
 8006012:	4619      	mov	r1, r3
 8006014:	f001 fcb6 	bl	8007984 <memcpy>
    return true;
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <ai_network_get_info+0x9e>
  }

  return false;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3780      	adds	r7, #128	; 0x80
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	0800b310 	.word	0x0800b310
 800602c:	0800b318 	.word	0x0800b318
 8006030:	0800b33c 	.word	0x0800b33c
 8006034:	0800b358 	.word	0x0800b358
 8006038:	0800b370 	.word	0x0800b370

0800603c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f9c5 	bl	80063d4 <ai_platform_network_get_error>
 800604a:	4603      	mov	r3, r0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af02      	add	r7, sp, #8
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800605e:	2300      	movs	r3, #0
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	2304      	movs	r3, #4
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	2301      	movs	r3, #1
 8006068:	4a04      	ldr	r2, [pc, #16]	; (800607c <ai_network_create+0x28>)
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fad9 	bl	8006624 <ai_platform_network_create>
 8006072:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000a20 	.word	0x20000a20

08006080 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fb3d 	bl	8006708 <ai_platform_network_destroy>
 800608e:	4603      	mov	r3, r0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fb61 	bl	800676c <ai_platform_network_init>
 80060aa:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <ai_network_init+0x1e>
 80060b2:	2300      	movs	r3, #0
 80060b4:	e02b      	b.n	800610e <ai_network_init+0x76>

  ai_bool ok = true;
 80060b6:	2301      	movs	r3, #1
 80060b8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff ff02 	bl	8005ec8 <network_configure_weights>
 80060c4:	4603      	mov	r3, r0
 80060c6:	461a      	mov	r2, r3
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	3318      	adds	r3, #24
 80060da:	4619      	mov	r1, r3
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff feb5 	bl	8005e4c <network_configure_activations>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
 80060e6:	7afb      	ldrb	r3, [r7, #11]
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bf14      	ite	ne
 80060ee:	2301      	movne	r3, #1
 80060f0:	2300      	moveq	r3, #0
 80060f2:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fbab 	bl	8006850 <ai_platform_network_post_init>
 80060fa:	4603      	mov	r3, r0
 80060fc:	461a      	mov	r2, r3
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	4013      	ands	r3, r2
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf14      	ite	ne
 8006106:	2301      	movne	r3, #1
 8006108:	2300      	moveq	r3, #0
 800610a:	72fb      	strb	r3, [r7, #11]

  return ok;
 800610c:	7afb      	ldrb	r3, [r7, #11]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fbde 	bl	80068e8 <ai_platform_network_process>
 800612c:	4603      	mov	r3, r0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
    0x87, 0xbb, 0xce, 0x35, 0x0d, 0xbc, 0x0f, 0x8a, 0x4e, 0x3b,
    0xc5, 0x2a, 0xe4, 0x3b, 0x8d, 0xcc, 0x7a, 0xbb, 0x97, 0x90,
    0x25, 0xbc, 0x11, 0x2e, 0x42, 0x3b, 0x49, 0x0b, 0x4d, 0xba,
    0x59, 0x09, 0x9b, 0xbb, 0xef, 0xb7, 0x8c, 0x3b, 0x0e, 0x67,
    0x90, 0xbc, 0x24, 0x06, 0xab, 0x3a, 0x10, 0xe4, 0x17, 0xbc  };
  return AI_HANDLE_PTR(s_network_weights);
 800613c:	4b02      	ldr	r3, [pc, #8]	; (8006148 <ai_network_data_weights_get+0x10>)
}
 800613e:	4618      	mov	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	0800b3c0 	.word	0x0800b3c0

0800614c <_ai_platform_get_io_buffers_info>:
 800614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006150:	2400      	movs	r4, #0
 8006152:	b083      	sub	sp, #12
 8006154:	4606      	mov	r6, r0
 8006156:	4688      	mov	r8, r1
 8006158:	46a3      	mov	fp, r4
 800615a:	f04f 0a18 	mov.w	sl, #24
 800615e:	f04f 0901 	mov.w	r9, #1
 8006162:	b2a0      	uxth	r0, r4
 8006164:	b936      	cbnz	r6, 8006174 <_ai_platform_get_io_buffers_info+0x28>
 8006166:	2800      	cmp	r0, #0
 8006168:	d03b      	beq.n	80061e2 <_ai_platform_get_io_buffers_info+0x96>
 800616a:	68b3      	ldr	r3, [r6, #8]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f8c8 3000 	str.w	r3, [r8]
 8006172:	e036      	b.n	80061e2 <_ai_platform_get_io_buffers_info+0x96>
 8006174:	8833      	ldrh	r3, [r6, #0]
 8006176:	429c      	cmp	r4, r3
 8006178:	d2f5      	bcs.n	8006166 <_ai_platform_get_io_buffers_info+0x1a>
 800617a:	6873      	ldr	r3, [r6, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0f2      	beq.n	8006166 <_ai_platform_get_io_buffers_info+0x1a>
 8006180:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8006184:	2d00      	cmp	r5, #0
 8006186:	d0ee      	beq.n	8006166 <_ai_platform_get_io_buffers_info+0x1a>
 8006188:	68b3      	ldr	r3, [r6, #8]
 800618a:	69aa      	ldr	r2, [r5, #24]
 800618c:	6859      	ldr	r1, [r3, #4]
 800618e:	6810      	ldr	r0, [r2, #0]
 8006190:	689f      	ldr	r7, [r3, #8]
 8006192:	9101      	str	r1, [sp, #4]
 8006194:	f001 fb46 	bl	8007824 <ai_array_to_buffer_fmt>
 8006198:	9901      	ldr	r1, [sp, #4]
 800619a:	fb0a f304 	mul.w	r3, sl, r4
 800619e:	18ca      	adds	r2, r1, r3
 80061a0:	50c8      	str	r0, [r1, r3]
 80061a2:	f8a2 9004 	strh.w	r9, [r2, #4]
 80061a6:	68eb      	ldr	r3, [r5, #12]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	80d3      	strh	r3, [r2, #6]
 80061ac:	68eb      	ldr	r3, [r5, #12]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	8113      	strh	r3, [r2, #8]
 80061b2:	68eb      	ldr	r3, [r5, #12]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	60d3      	str	r3, [r2, #12]
 80061b8:	69ab      	ldr	r3, [r5, #24]
 80061ba:	00e1      	lsls	r1, r4, #3
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	6113      	str	r3, [r2, #16]
 80061c0:	1878      	adds	r0, r7, r1
 80061c2:	b150      	cbz	r0, 80061da <_ai_platform_get_io_buffers_info+0x8e>
 80061c4:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	6043      	str	r3, [r0, #4]
 80061cc:	b11b      	cbz	r3, 80061d6 <_ai_platform_get_io_buffers_info+0x8a>
 80061ce:	885b      	ldrh	r3, [r3, #2]
 80061d0:	3300      	adds	r3, #0
 80061d2:	bf18      	it	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	507b      	str	r3, [r7, r1]
 80061d8:	b903      	cbnz	r3, 80061dc <_ai_platform_get_io_buffers_info+0x90>
 80061da:	2000      	movs	r0, #0
 80061dc:	6150      	str	r0, [r2, #20]
 80061de:	3401      	adds	r4, #1
 80061e0:	e7bf      	b.n	8006162 <_ai_platform_get_io_buffers_info+0x16>
 80061e2:	b003      	add	sp, #12
 80061e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080061e8 <_platform_network_state_setup.isra.1>:
 80061e8:	b430      	push	{r4, r5}
 80061ea:	68dd      	ldr	r5, [r3, #12]
 80061ec:	695c      	ldr	r4, [r3, #20]
 80061ee:	68ed      	ldr	r5, [r5, #12]
 80061f0:	68e4      	ldr	r4, [r4, #12]
 80061f2:	fb04 f405 	mul.w	r4, r4, r5
 80061f6:	6084      	str	r4, [r0, #8]
 80061f8:	8809      	ldrh	r1, [r1, #0]
 80061fa:	fb04 f401 	mul.w	r4, r4, r1
 80061fe:	60c4      	str	r4, [r0, #12]
 8006200:	6811      	ldr	r1, [r2, #0]
 8006202:	6041      	str	r1, [r0, #4]
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	4414      	add	r4, r2
 8006208:	6004      	str	r4, [r0, #0]
 800620a:	699a      	ldr	r2, [r3, #24]
 800620c:	6814      	ldr	r4, [r2, #0]
 800620e:	00a4      	lsls	r4, r4, #2
 8006210:	d407      	bmi.n	8006222 <_platform_network_state_setup.isra.1+0x3a>
 8006212:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8006216:	1b64      	subs	r4, r4, r5
 8006218:	4421      	add	r1, r4
 800621a:	6091      	str	r1, [r2, #8]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	6842      	ldr	r2, [r0, #4]
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	bc30      	pop	{r4, r5}
 8006224:	4770      	bx	lr
	...

08006228 <ai_platform_runtime_get_revision>:
 8006228:	490a      	ldr	r1, [pc, #40]	; (8006254 <ai_platform_runtime_get_revision+0x2c>)
 800622a:	4a0b      	ldr	r2, [pc, #44]	; (8006258 <ai_platform_runtime_get_revision+0x30>)
 800622c:	680b      	ldr	r3, [r1, #0]
 800622e:	2001      	movs	r0, #1
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	600b      	str	r3, [r1, #0]
 8006236:	4613      	mov	r3, r2
 8006238:	6010      	str	r0, [r2, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	2a00      	cmp	r2, #0
 800623e:	d1fc      	bne.n	800623a <ai_platform_runtime_get_revision+0x12>
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <ai_platform_runtime_get_revision+0x34>)
 8006242:	4a07      	ldr	r2, [pc, #28]	; (8006260 <ai_platform_runtime_get_revision+0x38>)
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <ai_platform_runtime_get_revision+0x3c>)
 800624a:	429a      	cmp	r2, r3
 800624c:	d000      	beq.n	8006250 <ai_platform_runtime_get_revision+0x28>
 800624e:	e7fe      	b.n	800624e <ai_platform_runtime_get_revision+0x26>
 8006250:	4805      	ldr	r0, [pc, #20]	; (8006268 <ai_platform_runtime_get_revision+0x40>)
 8006252:	4770      	bx	lr
 8006254:	e0002000 	.word	0xe0002000
 8006258:	40023008 	.word	0x40023008
 800625c:	40023000 	.word	0x40023000
 8006260:	f407a5c2 	.word	0xf407a5c2
 8006264:	b5e8b5cd 	.word	0xb5e8b5cd
 8006268:	080667c0 	.word	0x080667c0

0800626c <ai_platform_runtime_get_version>:
 800626c:	490b      	ldr	r1, [pc, #44]	; (800629c <ai_platform_runtime_get_version+0x30>)
 800626e:	4a0c      	ldr	r2, [pc, #48]	; (80062a0 <ai_platform_runtime_get_version+0x34>)
 8006270:	680b      	ldr	r3, [r1, #0]
 8006272:	2001      	movs	r0, #1
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	600b      	str	r3, [r1, #0]
 800627a:	b082      	sub	sp, #8
 800627c:	4613      	mov	r3, r2
 800627e:	6010      	str	r0, [r2, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	2a00      	cmp	r2, #0
 8006284:	d1fc      	bne.n	8006280 <ai_platform_runtime_get_version+0x14>
 8006286:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <ai_platform_runtime_get_version+0x38>)
 8006288:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <ai_platform_runtime_get_version+0x3c>)
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b07      	ldr	r3, [pc, #28]	; (80062ac <ai_platform_runtime_get_version+0x40>)
 8006290:	429a      	cmp	r2, r3
 8006292:	d000      	beq.n	8006296 <ai_platform_runtime_get_version+0x2a>
 8006294:	e7fe      	b.n	8006294 <ai_platform_runtime_get_version+0x28>
 8006296:	2006      	movs	r0, #6
 8006298:	b002      	add	sp, #8
 800629a:	4770      	bx	lr
 800629c:	e0002000 	.word	0xe0002000
 80062a0:	40023008 	.word	0x40023008
 80062a4:	40023000 	.word	0x40023000
 80062a8:	f407a5c2 	.word	0xf407a5c2
 80062ac:	b5e8b5cd 	.word	0xb5e8b5cd

080062b0 <ai_platform_api_get_version>:
 80062b0:	4913      	ldr	r1, [pc, #76]	; (8006300 <ai_platform_api_get_version+0x50>)
 80062b2:	4a14      	ldr	r2, [pc, #80]	; (8006304 <ai_platform_api_get_version+0x54>)
 80062b4:	680b      	ldr	r3, [r1, #0]
 80062b6:	2001      	movs	r0, #1
 80062b8:	f023 0301 	bic.w	r3, r3, #1
 80062bc:	600b      	str	r3, [r1, #0]
 80062be:	b082      	sub	sp, #8
 80062c0:	4613      	mov	r3, r2
 80062c2:	6010      	str	r0, [r2, #0]
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d1fc      	bne.n	80062c4 <ai_platform_api_get_version+0x14>
 80062ca:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <ai_platform_api_get_version+0x58>)
 80062cc:	4a0f      	ldr	r2, [pc, #60]	; (800630c <ai_platform_api_get_version+0x5c>)
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <ai_platform_api_get_version+0x60>)
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d000      	beq.n	80062da <ai_platform_api_get_version+0x2a>
 80062d8:	e7fe      	b.n	80062d8 <ai_platform_api_get_version+0x28>
 80062da:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <ai_platform_api_get_version+0x64>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	f362 0007 	bfi	r0, r2, #0, #8
 80062e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80062e8:	f362 200f 	bfi	r0, r2, #8, #8
 80062ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80062f0:	f362 4017 	bfi	r0, r2, #16, #8
 80062f4:	0e1b      	lsrs	r3, r3, #24
 80062f6:	f363 601f 	bfi	r0, r3, #24, #8
 80062fa:	b002      	add	sp, #8
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	e0002000 	.word	0xe0002000
 8006304:	40023008 	.word	0x40023008
 8006308:	40023000 	.word	0x40023000
 800630c:	f407a5c2 	.word	0xf407a5c2
 8006310:	b5e8b5cd 	.word	0xb5e8b5cd
 8006314:	080667c4 	.word	0x080667c4

08006318 <ai_platform_interface_api_get_version>:
 8006318:	4913      	ldr	r1, [pc, #76]	; (8006368 <ai_platform_interface_api_get_version+0x50>)
 800631a:	4a14      	ldr	r2, [pc, #80]	; (800636c <ai_platform_interface_api_get_version+0x54>)
 800631c:	680b      	ldr	r3, [r1, #0]
 800631e:	2001      	movs	r0, #1
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	600b      	str	r3, [r1, #0]
 8006326:	b082      	sub	sp, #8
 8006328:	4613      	mov	r3, r2
 800632a:	6010      	str	r0, [r2, #0]
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	2800      	cmp	r0, #0
 8006330:	d1fc      	bne.n	800632c <ai_platform_interface_api_get_version+0x14>
 8006332:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <ai_platform_interface_api_get_version+0x58>)
 8006334:	4a0f      	ldr	r2, [pc, #60]	; (8006374 <ai_platform_interface_api_get_version+0x5c>)
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <ai_platform_interface_api_get_version+0x60>)
 800633c:	429a      	cmp	r2, r3
 800633e:	d000      	beq.n	8006342 <ai_platform_interface_api_get_version+0x2a>
 8006340:	e7fe      	b.n	8006340 <ai_platform_interface_api_get_version+0x28>
 8006342:	4b0e      	ldr	r3, [pc, #56]	; (800637c <ai_platform_interface_api_get_version+0x64>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	f362 0007 	bfi	r0, r2, #0, #8
 800634c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006350:	f362 200f 	bfi	r0, r2, #8, #8
 8006354:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006358:	f362 4017 	bfi	r0, r2, #16, #8
 800635c:	0e1b      	lsrs	r3, r3, #24
 800635e:	f363 601f 	bfi	r0, r3, #24, #8
 8006362:	b002      	add	sp, #8
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	e0002000 	.word	0xe0002000
 800636c:	40023008 	.word	0x40023008
 8006370:	40023000 	.word	0x40023000
 8006374:	f407a5c2 	.word	0xf407a5c2
 8006378:	b5e8b5cd 	.word	0xb5e8b5cd
 800637c:	080667c8 	.word	0x080667c8

08006380 <ai_platform_context_acquire>:
 8006380:	b410      	push	{r4}
 8006382:	b120      	cbz	r0, 800638e <ai_platform_context_acquire+0xe>
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <ai_platform_context_acquire+0x3c>)
 8006386:	6802      	ldr	r2, [r0, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	bf18      	it	ne
 800638c:	2000      	movne	r0, #0
 800638e:	490c      	ldr	r1, [pc, #48]	; (80063c0 <ai_platform_context_acquire+0x40>)
 8006390:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <ai_platform_context_acquire+0x44>)
 8006392:	680b      	ldr	r3, [r1, #0]
 8006394:	2401      	movs	r4, #1
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	600b      	str	r3, [r1, #0]
 800639c:	4613      	mov	r3, r2
 800639e:	6014      	str	r4, [r2, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	d1fc      	bne.n	80063a0 <ai_platform_context_acquire+0x20>
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <ai_platform_context_acquire+0x48>)
 80063a8:	4a08      	ldr	r2, [pc, #32]	; (80063cc <ai_platform_context_acquire+0x4c>)
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <ai_platform_context_acquire+0x50>)
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d000      	beq.n	80063b6 <ai_platform_context_acquire+0x36>
 80063b4:	e7fe      	b.n	80063b4 <ai_platform_context_acquire+0x34>
 80063b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	a1c00100 	.word	0xa1c00100
 80063c0:	e0002000 	.word	0xe0002000
 80063c4:	40023008 	.word	0x40023008
 80063c8:	40023000 	.word	0x40023000
 80063cc:	f407a5c2 	.word	0xf407a5c2
 80063d0:	b5e8b5cd 	.word	0xb5e8b5cd

080063d4 <ai_platform_network_get_error>:
 80063d4:	b410      	push	{r4}
 80063d6:	b120      	cbz	r0, 80063e2 <ai_platform_network_get_error+0xe>
 80063d8:	4b11      	ldr	r3, [pc, #68]	; (8006420 <ai_platform_network_get_error+0x4c>)
 80063da:	6802      	ldr	r2, [r0, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	bf18      	it	ne
 80063e0:	2000      	movne	r0, #0
 80063e2:	4910      	ldr	r1, [pc, #64]	; (8006424 <ai_platform_network_get_error+0x50>)
 80063e4:	4a10      	ldr	r2, [pc, #64]	; (8006428 <ai_platform_network_get_error+0x54>)
 80063e6:	680b      	ldr	r3, [r1, #0]
 80063e8:	2401      	movs	r4, #1
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	600b      	str	r3, [r1, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	6014      	str	r4, [r2, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	d1fc      	bne.n	80063f4 <ai_platform_network_get_error+0x20>
 80063fa:	4b0c      	ldr	r3, [pc, #48]	; (800642c <ai_platform_network_get_error+0x58>)
 80063fc:	4a0c      	ldr	r2, [pc, #48]	; (8006430 <ai_platform_network_get_error+0x5c>)
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <ai_platform_network_get_error+0x60>)
 8006404:	429a      	cmp	r2, r3
 8006406:	d000      	beq.n	800640a <ai_platform_network_get_error+0x36>
 8006408:	e7fe      	b.n	8006408 <ai_platform_network_get_error+0x34>
 800640a:	b120      	cbz	r0, 8006416 <ai_platform_network_get_error+0x42>
 800640c:	3010      	adds	r0, #16
 800640e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006412:	f000 bc75 	b.w	8006d00 <core_get_error>
 8006416:	f241 0010 	movw	r0, #4112	; 0x1010
 800641a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	a1c00100 	.word	0xa1c00100
 8006424:	e0002000 	.word	0xe0002000
 8006428:	40023008 	.word	0x40023008
 800642c:	40023000 	.word	0x40023000
 8006430:	f407a5c2 	.word	0xf407a5c2
 8006434:	b5e8b5cd 	.word	0xb5e8b5cd

08006438 <ai_platform_api_get_network_report>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	460c      	mov	r4, r1
 800643c:	4605      	mov	r5, r0
 800643e:	b120      	cbz	r0, 800644a <ai_platform_api_get_network_report+0x12>
 8006440:	4b71      	ldr	r3, [pc, #452]	; (8006608 <ai_platform_api_get_network_report+0x1d0>)
 8006442:	6802      	ldr	r2, [r0, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	bf18      	it	ne
 8006448:	2500      	movne	r5, #0
 800644a:	4970      	ldr	r1, [pc, #448]	; (800660c <ai_platform_api_get_network_report+0x1d4>)
 800644c:	4a70      	ldr	r2, [pc, #448]	; (8006610 <ai_platform_api_get_network_report+0x1d8>)
 800644e:	680b      	ldr	r3, [r1, #0]
 8006450:	2001      	movs	r0, #1
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	600b      	str	r3, [r1, #0]
 8006458:	4611      	mov	r1, r2
 800645a:	6010      	str	r0, [r2, #0]
 800645c:	680b      	ldr	r3, [r1, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1fc      	bne.n	800645c <ai_platform_api_get_network_report+0x24>
 8006462:	4a6c      	ldr	r2, [pc, #432]	; (8006614 <ai_platform_api_get_network_report+0x1dc>)
 8006464:	496c      	ldr	r1, [pc, #432]	; (8006618 <ai_platform_api_get_network_report+0x1e0>)
 8006466:	6011      	str	r1, [r2, #0]
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	4a6c      	ldr	r2, [pc, #432]	; (800661c <ai_platform_api_get_network_report+0x1e4>)
 800646c:	4291      	cmp	r1, r2
 800646e:	d000      	beq.n	8006472 <ai_platform_api_get_network_report+0x3a>
 8006470:	e7fe      	b.n	8006470 <ai_platform_api_get_network_report+0x38>
 8006472:	2d00      	cmp	r5, #0
 8006474:	d062      	beq.n	800653c <ai_platform_api_get_network_report+0x104>
 8006476:	2c00      	cmp	r4, #0
 8006478:	d062      	beq.n	8006540 <ai_platform_api_get_network_report+0x108>
 800647a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800647c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800647e:	2a00      	cmp	r2, #0
 8006480:	d056      	beq.n	8006530 <ai_platform_api_get_network_report+0xf8>
 8006482:	2301      	movs	r3, #1
 8006484:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006486:	6913      	ldr	r3, [r2, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	d00c      	beq.n	80064a6 <ai_platform_api_get_network_report+0x6e>
 800648c:	b15b      	cbz	r3, 80064a6 <ai_platform_api_get_network_report+0x6e>
 800648e:	2202      	movs	r2, #2
 8006490:	e003      	b.n	800649a <ai_platform_api_get_network_report+0x62>
 8006492:	1c50      	adds	r0, r2, #1
 8006494:	460b      	mov	r3, r1
 8006496:	b121      	cbz	r1, 80064a2 <ai_platform_api_get_network_report+0x6a>
 8006498:	4602      	mov	r2, r0
 800649a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800649c:	6919      	ldr	r1, [r3, #16]
 800649e:	4299      	cmp	r1, r3
 80064a0:	d1f7      	bne.n	8006492 <ai_platform_api_get_network_report+0x5a>
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	d044      	beq.n	8006530 <ai_platform_api_get_network_report+0xf8>
 80064a6:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 80064aa:	b100      	cbz	r0, 80064ae <ai_platform_api_get_network_report+0x76>
 80064ac:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80064ae:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80064b2:	f7ff fe4b 	bl	800614c <_ai_platform_get_io_buffers_info>
 80064b6:	4606      	mov	r6, r0
 80064b8:	8620      	strh	r0, [r4, #48]	; 0x30
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d05f      	beq.n	800657e <ai_platform_api_get_network_report+0x146>
 80064be:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	bf8a      	itet	hi
 80064c6:	6ce8      	ldrhi	r0, [r5, #76]	; 0x4c
 80064c8:	2000      	movls	r0, #0
 80064ca:	300c      	addhi	r0, #12
 80064cc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80064d0:	f7ff fe3c 	bl	800614c <_ai_platform_get_io_buffers_info>
 80064d4:	4606      	mov	r6, r0
 80064d6:	8660      	strh	r0, [r4, #50]	; 0x32
 80064d8:	2800      	cmp	r0, #0
 80064da:	d048      	beq.n	800656e <ai_platform_api_get_network_report+0x136>
 80064dc:	686b      	ldr	r3, [r5, #4]
 80064de:	6723      	str	r3, [r4, #112]	; 0x70
 80064e0:	f105 0730 	add.w	r7, r5, #48	; 0x30
 80064e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80064e6:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80064ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80064ec:	e897 0003 	ldmia.w	r7, {r0, r1}
 80064f0:	e886 0003 	stmia.w	r6, {r0, r1}
 80064f4:	f105 0718 	add.w	r7, r5, #24
 80064f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80064fa:	f104 0654 	add.w	r6, r4, #84	; 0x54
 80064fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006500:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006504:	e886 0003 	stmia.w	r6, {r0, r1}
 8006508:	4a40      	ldr	r2, [pc, #256]	; (800660c <ai_platform_api_get_network_report+0x1d4>)
 800650a:	4941      	ldr	r1, [pc, #260]	; (8006610 <ai_platform_api_get_network_report+0x1d8>)
 800650c:	6813      	ldr	r3, [r2, #0]
 800650e:	2001      	movs	r0, #1
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	460a      	mov	r2, r1
 8006518:	6008      	str	r0, [r1, #0]
 800651a:	6813      	ldr	r3, [r2, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1fc      	bne.n	800651a <ai_platform_api_get_network_report+0xe2>
 8006520:	4b3c      	ldr	r3, [pc, #240]	; (8006614 <ai_platform_api_get_network_report+0x1dc>)
 8006522:	493d      	ldr	r1, [pc, #244]	; (8006618 <ai_platform_api_get_network_report+0x1e0>)
 8006524:	6019      	str	r1, [r3, #0]
 8006526:	6819      	ldr	r1, [r3, #0]
 8006528:	4b3c      	ldr	r3, [pc, #240]	; (800661c <ai_platform_api_get_network_report+0x1e4>)
 800652a:	4299      	cmp	r1, r3
 800652c:	d00a      	beq.n	8006544 <ai_platform_api_get_network_report+0x10c>
 800652e:	e7fe      	b.n	800652e <ai_platform_api_get_network_report+0xf6>
 8006530:	f105 0010 	add.w	r0, r5, #16
 8006534:	2218      	movs	r2, #24
 8006536:	2111      	movs	r1, #17
 8006538:	f000 fbe8 	bl	8006d0c <core_set_error>
 800653c:	2000      	movs	r0, #0
 800653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006540:	4620      	mov	r0, r4
 8006542:	e7fc      	b.n	800653e <ai_platform_api_get_network_report+0x106>
 8006544:	4b36      	ldr	r3, [pc, #216]	; (8006620 <ai_platform_api_get_network_report+0x1e8>)
 8006546:	4831      	ldr	r0, [pc, #196]	; (800660c <ai_platform_api_get_network_report+0x1d4>)
 8006548:	6123      	str	r3, [r4, #16]
 800654a:	6803      	ldr	r3, [r0, #0]
 800654c:	4930      	ldr	r1, [pc, #192]	; (8006610 <ai_platform_api_get_network_report+0x1d8>)
 800654e:	f023 0301 	bic.w	r3, r3, #1
 8006552:	6003      	str	r3, [r0, #0]
 8006554:	2301      	movs	r3, #1
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	680b      	ldr	r3, [r1, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1fc      	bne.n	8006558 <ai_platform_api_get_network_report+0x120>
 800655e:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <ai_platform_api_get_network_report+0x1dc>)
 8006560:	4a2d      	ldr	r2, [pc, #180]	; (8006618 <ai_platform_api_get_network_report+0x1e0>)
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b2d      	ldr	r3, [pc, #180]	; (800661c <ai_platform_api_get_network_report+0x1e4>)
 8006568:	429a      	cmp	r2, r3
 800656a:	d010      	beq.n	800658e <ai_platform_api_get_network_report+0x156>
 800656c:	e7fe      	b.n	800656c <ai_platform_api_get_network_report+0x134>
 800656e:	f105 0010 	add.w	r0, r5, #16
 8006572:	2218      	movs	r2, #24
 8006574:	2113      	movs	r1, #19
 8006576:	f000 fbc9 	bl	8006d0c <core_set_error>
 800657a:	4630      	mov	r0, r6
 800657c:	e7df      	b.n	800653e <ai_platform_api_get_network_report+0x106>
 800657e:	f105 0010 	add.w	r0, r5, #16
 8006582:	2218      	movs	r2, #24
 8006584:	2112      	movs	r1, #18
 8006586:	f000 fbc1 	bl	8006d0c <core_set_error>
 800658a:	4630      	mov	r0, r6
 800658c:	e7d7      	b.n	800653e <ai_platform_api_get_network_report+0x106>
 800658e:	2306      	movs	r3, #6
 8006590:	481e      	ldr	r0, [pc, #120]	; (800660c <ai_platform_api_get_network_report+0x1d4>)
 8006592:	6163      	str	r3, [r4, #20]
 8006594:	6803      	ldr	r3, [r0, #0]
 8006596:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <ai_platform_api_get_network_report+0x1d8>)
 8006598:	f023 0301 	bic.w	r3, r3, #1
 800659c:	6003      	str	r3, [r0, #0]
 800659e:	2301      	movs	r3, #1
 80065a0:	600b      	str	r3, [r1, #0]
 80065a2:	6813      	ldr	r3, [r2, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1fc      	bne.n	80065a2 <ai_platform_api_get_network_report+0x16a>
 80065a8:	4b1a      	ldr	r3, [pc, #104]	; (8006614 <ai_platform_api_get_network_report+0x1dc>)
 80065aa:	491b      	ldr	r1, [pc, #108]	; (8006618 <ai_platform_api_get_network_report+0x1e0>)
 80065ac:	6019      	str	r1, [r3, #0]
 80065ae:	6819      	ldr	r1, [r3, #0]
 80065b0:	4b1a      	ldr	r3, [pc, #104]	; (800661c <ai_platform_api_get_network_report+0x1e4>)
 80065b2:	4299      	cmp	r1, r3
 80065b4:	d000      	beq.n	80065b8 <ai_platform_api_get_network_report+0x180>
 80065b6:	e7fe      	b.n	80065b6 <ai_platform_api_get_network_report+0x17e>
 80065b8:	f240 1301 	movw	r3, #257	; 0x101
 80065bc:	4913      	ldr	r1, [pc, #76]	; (800660c <ai_platform_api_get_network_report+0x1d4>)
 80065be:	6263      	str	r3, [r4, #36]	; 0x24
 80065c0:	680b      	ldr	r3, [r1, #0]
 80065c2:	4813      	ldr	r0, [pc, #76]	; (8006610 <ai_platform_api_get_network_report+0x1d8>)
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	600b      	str	r3, [r1, #0]
 80065ca:	2301      	movs	r3, #1
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	6802      	ldr	r2, [r0, #0]
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d1fc      	bne.n	80065ce <ai_platform_api_get_network_report+0x196>
 80065d4:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <ai_platform_api_get_network_report+0x1dc>)
 80065d6:	4910      	ldr	r1, [pc, #64]	; (8006618 <ai_platform_api_get_network_report+0x1e0>)
 80065d8:	6019      	str	r1, [r3, #0]
 80065da:	6819      	ldr	r1, [r3, #0]
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <ai_platform_api_get_network_report+0x1e4>)
 80065de:	4299      	cmp	r1, r3
 80065e0:	d000      	beq.n	80065e4 <ai_platform_api_get_network_report+0x1ac>
 80065e2:	e7fe      	b.n	80065e2 <ai_platform_api_get_network_report+0x1aa>
 80065e4:	f240 4301 	movw	r3, #1025	; 0x401
 80065e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ea:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80065ec:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 80065f0:	0e19      	lsrs	r1, r3, #24
 80065f2:	0c1a      	lsrs	r2, r3, #16
 80065f4:	0a1b      	lsrs	r3, r3, #8
 80065f6:	f884 1020 	strb.w	r1, [r4, #32]
 80065fa:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 80065fe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8006602:	2001      	movs	r0, #1
 8006604:	e79b      	b.n	800653e <ai_platform_api_get_network_report+0x106>
 8006606:	bf00      	nop
 8006608:	a1c00100 	.word	0xa1c00100
 800660c:	e0002000 	.word	0xe0002000
 8006610:	40023008 	.word	0x40023008
 8006614:	40023000 	.word	0x40023000
 8006618:	f407a5c2 	.word	0xf407a5c2
 800661c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006620:	080667c0 	.word	0x080667c0

08006624 <ai_platform_network_create>:
 8006624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006628:	4f30      	ldr	r7, [pc, #192]	; (80066ec <ai_platform_network_create+0xc8>)
 800662a:	4e31      	ldr	r6, [pc, #196]	; (80066f0 <ai_platform_network_create+0xcc>)
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	b083      	sub	sp, #12
 8006630:	f021 0101 	bic.w	r1, r1, #1
 8006634:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8006638:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800663c:	6039      	str	r1, [r7, #0]
 800663e:	2101      	movs	r1, #1
 8006640:	6031      	str	r1, [r6, #0]
 8006642:	6831      	ldr	r1, [r6, #0]
 8006644:	2900      	cmp	r1, #0
 8006646:	d1fc      	bne.n	8006642 <ai_platform_network_create+0x1e>
 8006648:	492a      	ldr	r1, [pc, #168]	; (80066f4 <ai_platform_network_create+0xd0>)
 800664a:	4d2b      	ldr	r5, [pc, #172]	; (80066f8 <ai_platform_network_create+0xd4>)
 800664c:	600d      	str	r5, [r1, #0]
 800664e:	680d      	ldr	r5, [r1, #0]
 8006650:	492a      	ldr	r1, [pc, #168]	; (80066fc <ai_platform_network_create+0xd8>)
 8006652:	428d      	cmp	r5, r1
 8006654:	d000      	beq.n	8006658 <ai_platform_network_create+0x34>
 8006656:	e7fe      	b.n	8006656 <ai_platform_network_create+0x32>
 8006658:	b1e0      	cbz	r0, 8006694 <ai_platform_network_create+0x70>
 800665a:	4680      	mov	r8, r0
 800665c:	461d      	mov	r5, r3
 800665e:	4b28      	ldr	r3, [pc, #160]	; (8006700 <ai_platform_network_create+0xdc>)
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	f8c8 2000 	str.w	r2, [r8]
 8006666:	4617      	mov	r7, r2
 8006668:	f000 fb48 	bl	8006cfc <core_init>
 800666c:	b1b8      	cbz	r0, 800669e <ai_platform_network_create+0x7a>
 800666e:	4a1f      	ldr	r2, [pc, #124]	; (80066ec <ai_platform_network_create+0xc8>)
 8006670:	491f      	ldr	r1, [pc, #124]	; (80066f0 <ai_platform_network_create+0xcc>)
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	2301      	movs	r3, #1
 800667c:	6033      	str	r3, [r6, #0]
 800667e:	680e      	ldr	r6, [r1, #0]
 8006680:	2e00      	cmp	r6, #0
 8006682:	d1fc      	bne.n	800667e <ai_platform_network_create+0x5a>
 8006684:	4b1b      	ldr	r3, [pc, #108]	; (80066f4 <ai_platform_network_create+0xd0>)
 8006686:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <ai_platform_network_create+0xd4>)
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <ai_platform_network_create+0xd8>)
 800668e:	429a      	cmp	r2, r3
 8006690:	d016      	beq.n	80066c0 <ai_platform_network_create+0x9c>
 8006692:	e7fe      	b.n	8006692 <ai_platform_network_create+0x6e>
 8006694:	f241 0010 	movw	r0, #4112	; 0x1010
 8006698:	b003      	add	sp, #12
 800669a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800669e:	062d      	lsls	r5, r5, #24
 80066a0:	0424      	lsls	r4, r4, #16
 80066a2:	2130      	movs	r1, #48	; 0x30
 80066a4:	2300      	movs	r3, #0
 80066a6:	f8c8 3000 	str.w	r3, [r8]
 80066aa:	2210      	movs	r2, #16
 80066ac:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 80066b0:	2000      	movs	r0, #0
 80066b2:	432b      	orrs	r3, r5
 80066b4:	f361 0007 	bfi	r0, r1, #0, #8
 80066b8:	663b      	str	r3, [r7, #96]	; 0x60
 80066ba:	f362 201f 	bfi	r0, r2, #8, #24
 80066be:	e7eb      	b.n	8006698 <ai_platform_network_create+0x74>
 80066c0:	062d      	lsls	r5, r5, #24
 80066c2:	0424      	lsls	r4, r4, #16
 80066c4:	ea45 0304 	orr.w	r3, r5, r4
 80066c8:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80066cc:	d001      	beq.n	80066d2 <ai_platform_network_create+0xae>
 80066ce:	2101      	movs	r1, #1
 80066d0:	e7e8      	b.n	80066a4 <ai_platform_network_create+0x80>
 80066d2:	a802      	add	r0, sp, #8
 80066d4:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <ai_platform_network_create+0xe0>)
 80066d6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80066da:	f000 ffe7 	bl	80076ac <ai_check_custom_types>
 80066de:	b110      	cbz	r0, 80066e6 <ai_platform_network_create+0xc2>
 80066e0:	4632      	mov	r2, r6
 80066e2:	4631      	mov	r1, r6
 80066e4:	e7e2      	b.n	80066ac <ai_platform_network_create+0x88>
 80066e6:	2102      	movs	r1, #2
 80066e8:	e7dc      	b.n	80066a4 <ai_platform_network_create+0x80>
 80066ea:	bf00      	nop
 80066ec:	e0002000 	.word	0xe0002000
 80066f0:	40023008 	.word	0x40023008
 80066f4:	40023000 	.word	0x40023000
 80066f8:	f407a5c2 	.word	0xf407a5c2
 80066fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006700:	a1c00100 	.word	0xa1c00100
 8006704:	84048403 	.word	0x84048403

08006708 <ai_platform_network_destroy>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	b1d8      	cbz	r0, 8006744 <ai_platform_network_destroy+0x3c>
 800670c:	4a11      	ldr	r2, [pc, #68]	; (8006754 <ai_platform_network_destroy+0x4c>)
 800670e:	6803      	ldr	r3, [r0, #0]
 8006710:	4293      	cmp	r3, r2
 8006712:	bf0c      	ite	eq
 8006714:	4603      	moveq	r3, r0
 8006716:	2300      	movne	r3, #0
 8006718:	4c0f      	ldr	r4, [pc, #60]	; (8006758 <ai_platform_network_destroy+0x50>)
 800671a:	4910      	ldr	r1, [pc, #64]	; (800675c <ai_platform_network_destroy+0x54>)
 800671c:	6822      	ldr	r2, [r4, #0]
 800671e:	2501      	movs	r5, #1
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	6022      	str	r2, [r4, #0]
 8006726:	460a      	mov	r2, r1
 8006728:	600d      	str	r5, [r1, #0]
 800672a:	6814      	ldr	r4, [r2, #0]
 800672c:	2c00      	cmp	r4, #0
 800672e:	d1fc      	bne.n	800672a <ai_platform_network_destroy+0x22>
 8006730:	4a0b      	ldr	r2, [pc, #44]	; (8006760 <ai_platform_network_destroy+0x58>)
 8006732:	490c      	ldr	r1, [pc, #48]	; (8006764 <ai_platform_network_destroy+0x5c>)
 8006734:	6011      	str	r1, [r2, #0]
 8006736:	6811      	ldr	r1, [r2, #0]
 8006738:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <ai_platform_network_destroy+0x60>)
 800673a:	4291      	cmp	r1, r2
 800673c:	d000      	beq.n	8006740 <ai_platform_network_destroy+0x38>
 800673e:	e7fe      	b.n	800673e <ai_platform_network_destroy+0x36>
 8006740:	b913      	cbnz	r3, 8006748 <ai_platform_network_destroy+0x40>
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	4603      	mov	r3, r0
 8006746:	e7e7      	b.n	8006718 <ai_platform_network_destroy+0x10>
 8006748:	4618      	mov	r0, r3
 800674a:	f001 f853 	bl	80077f4 <ai_layers_destroy_all>
 800674e:	4620      	mov	r0, r4
 8006750:	bd38      	pop	{r3, r4, r5, pc}
 8006752:	bf00      	nop
 8006754:	a1c00100 	.word	0xa1c00100
 8006758:	e0002000 	.word	0xe0002000
 800675c:	40023008 	.word	0x40023008
 8006760:	40023000 	.word	0x40023000
 8006764:	f407a5c2 	.word	0xf407a5c2
 8006768:	b5e8b5cd 	.word	0xb5e8b5cd

0800676c <ai_platform_network_init>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	460c      	mov	r4, r1
 8006770:	4605      	mov	r5, r0
 8006772:	b120      	cbz	r0, 800677e <ai_platform_network_init+0x12>
 8006774:	4b30      	ldr	r3, [pc, #192]	; (8006838 <ai_platform_network_init+0xcc>)
 8006776:	6802      	ldr	r2, [r0, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	bf18      	it	ne
 800677c:	2500      	movne	r5, #0
 800677e:	492f      	ldr	r1, [pc, #188]	; (800683c <ai_platform_network_init+0xd0>)
 8006780:	4a2f      	ldr	r2, [pc, #188]	; (8006840 <ai_platform_network_init+0xd4>)
 8006782:	680b      	ldr	r3, [r1, #0]
 8006784:	2001      	movs	r0, #1
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	600b      	str	r3, [r1, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	6010      	str	r0, [r2, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	2a00      	cmp	r2, #0
 8006794:	d1fc      	bne.n	8006790 <ai_platform_network_init+0x24>
 8006796:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <ai_platform_network_init+0xd8>)
 8006798:	4a2b      	ldr	r2, [pc, #172]	; (8006848 <ai_platform_network_init+0xdc>)
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b2b      	ldr	r3, [pc, #172]	; (800684c <ai_platform_network_init+0xe0>)
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d000      	beq.n	80067a6 <ai_platform_network_init+0x3a>
 80067a4:	e7fe      	b.n	80067a4 <ai_platform_network_init+0x38>
 80067a6:	b1dd      	cbz	r5, 80067e0 <ai_platform_network_init+0x74>
 80067a8:	b1e4      	cbz	r4, 80067e4 <ai_platform_network_init+0x78>
 80067aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80067ac:	6926      	ldr	r6, [r4, #16]
 80067ae:	b30f      	cbz	r7, 80067f4 <ai_platform_network_init+0x88>
 80067b0:	b38e      	cbz	r6, 8006816 <ai_platform_network_init+0xaa>
 80067b2:	4627      	mov	r7, r4
 80067b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80067b6:	f105 0618 	add.w	r6, r5, #24
 80067ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80067bc:	e897 0003 	ldmia.w	r7, {r0, r1}
 80067c0:	e886 0003 	stmia.w	r6, {r0, r1}
 80067c4:	3418      	adds	r4, #24
 80067c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067c8:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80067cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80067ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067d2:	2303      	movs	r3, #3
 80067d4:	e886 0003 	stmia.w	r6, {r0, r1}
 80067d8:	60eb      	str	r3, [r5, #12]
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 ff90 	bl	8007700 <ai_layers_init_all>
 80067e0:	4628      	mov	r0, r5
 80067e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e4:	f105 0010 	add.w	r0, r5, #16
 80067e8:	2211      	movs	r2, #17
 80067ea:	2110      	movs	r1, #16
 80067ec:	4625      	mov	r5, r4
 80067ee:	f000 fa8d 	bl	8006d0c <core_set_error>
 80067f2:	e7f5      	b.n	80067e0 <ai_platform_network_init+0x74>
 80067f4:	8c21      	ldrh	r1, [r4, #32]
 80067f6:	8be2      	ldrh	r2, [r4, #30]
 80067f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067fa:	fb02 f201 	mul.w	r2, r2, r1
 80067fe:	fb03 f302 	mul.w	r3, r3, r2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0d4      	beq.n	80067b0 <ai_platform_network_init+0x44>
 8006806:	f105 0010 	add.w	r0, r5, #16
 800680a:	2213      	movs	r2, #19
 800680c:	2110      	movs	r1, #16
 800680e:	463d      	mov	r5, r7
 8006810:	f000 fa7c 	bl	8006d0c <core_set_error>
 8006814:	e7e4      	b.n	80067e0 <ai_platform_network_init+0x74>
 8006816:	8921      	ldrh	r1, [r4, #8]
 8006818:	88e2      	ldrh	r2, [r4, #6]
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	fb02 f201 	mul.w	r2, r2, r1
 8006820:	fb03 f302 	mul.w	r3, r3, r2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0c4      	beq.n	80067b2 <ai_platform_network_init+0x46>
 8006828:	f105 0010 	add.w	r0, r5, #16
 800682c:	2212      	movs	r2, #18
 800682e:	2110      	movs	r1, #16
 8006830:	4635      	mov	r5, r6
 8006832:	f000 fa6b 	bl	8006d0c <core_set_error>
 8006836:	e7d3      	b.n	80067e0 <ai_platform_network_init+0x74>
 8006838:	a1c00100 	.word	0xa1c00100
 800683c:	e0002000 	.word	0xe0002000
 8006840:	40023008 	.word	0x40023008
 8006844:	40023000 	.word	0x40023000
 8006848:	f407a5c2 	.word	0xf407a5c2
 800684c:	b5e8b5cd 	.word	0xb5e8b5cd

08006850 <ai_platform_network_post_init>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4604      	mov	r4, r0
 8006854:	b120      	cbz	r0, 8006860 <ai_platform_network_post_init+0x10>
 8006856:	4b1e      	ldr	r3, [pc, #120]	; (80068d0 <ai_platform_network_post_init+0x80>)
 8006858:	6802      	ldr	r2, [r0, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	bf18      	it	ne
 800685e:	2400      	movne	r4, #0
 8006860:	491c      	ldr	r1, [pc, #112]	; (80068d4 <ai_platform_network_post_init+0x84>)
 8006862:	4a1d      	ldr	r2, [pc, #116]	; (80068d8 <ai_platform_network_post_init+0x88>)
 8006864:	680b      	ldr	r3, [r1, #0]
 8006866:	2001      	movs	r0, #1
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	600b      	str	r3, [r1, #0]
 800686e:	4613      	mov	r3, r2
 8006870:	6010      	str	r0, [r2, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	2a00      	cmp	r2, #0
 8006876:	d1fc      	bne.n	8006872 <ai_platform_network_post_init+0x22>
 8006878:	4b18      	ldr	r3, [pc, #96]	; (80068dc <ai_platform_network_post_init+0x8c>)
 800687a:	4a19      	ldr	r2, [pc, #100]	; (80068e0 <ai_platform_network_post_init+0x90>)
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b18      	ldr	r3, [pc, #96]	; (80068e4 <ai_platform_network_post_init+0x94>)
 8006882:	429a      	cmp	r2, r3
 8006884:	d000      	beq.n	8006888 <ai_platform_network_post_init+0x38>
 8006886:	e7fe      	b.n	8006886 <ai_platform_network_post_init+0x36>
 8006888:	b1bc      	cbz	r4, 80068ba <ai_platform_network_post_init+0x6a>
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	f013 0502 	ands.w	r5, r3, #2
 8006890:	d015      	beq.n	80068be <ai_platform_network_post_init+0x6e>
 8006892:	4620      	mov	r0, r4
 8006894:	f000 ff48 	bl	8007728 <ai_layers_post_init_all>
 8006898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800689a:	b163      	cbz	r3, 80068b6 <ai_platform_network_post_init+0x66>
 800689c:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800689e:	b91d      	cbnz	r5, 80068a8 <ai_platform_network_post_init+0x58>
 80068a0:	e009      	b.n	80068b6 <ai_platform_network_post_init+0x66>
 80068a2:	461d      	mov	r5, r3
 80068a4:	b13b      	cbz	r3, 80068b6 <ai_platform_network_post_init+0x66>
 80068a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068a8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80068aa:	4629      	mov	r1, r5
 80068ac:	2000      	movs	r0, #0
 80068ae:	4798      	blx	r3
 80068b0:	692b      	ldr	r3, [r5, #16]
 80068b2:	42ab      	cmp	r3, r5
 80068b4:	d1f5      	bne.n	80068a2 <ai_platform_network_post_init+0x52>
 80068b6:	2001      	movs	r0, #1
 80068b8:	bd38      	pop	{r3, r4, r5, pc}
 80068ba:	4620      	mov	r0, r4
 80068bc:	bd38      	pop	{r3, r4, r5, pc}
 80068be:	f104 0010 	add.w	r0, r4, #16
 80068c2:	2210      	movs	r2, #16
 80068c4:	2111      	movs	r1, #17
 80068c6:	f000 fa21 	bl	8006d0c <core_set_error>
 80068ca:	4628      	mov	r0, r5
 80068cc:	bd38      	pop	{r3, r4, r5, pc}
 80068ce:	bf00      	nop
 80068d0:	a1c00100 	.word	0xa1c00100
 80068d4:	e0002000 	.word	0xe0002000
 80068d8:	40023008 	.word	0x40023008
 80068dc:	40023000 	.word	0x40023000
 80068e0:	f407a5c2 	.word	0xf407a5c2
 80068e4:	b5e8b5cd 	.word	0xb5e8b5cd

080068e8 <ai_platform_network_process>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	b083      	sub	sp, #12
 80068ee:	4604      	mov	r4, r0
 80068f0:	9201      	str	r2, [sp, #4]
 80068f2:	b120      	cbz	r0, 80068fe <ai_platform_network_process+0x16>
 80068f4:	4ba5      	ldr	r3, [pc, #660]	; (8006b8c <ai_platform_network_process+0x2a4>)
 80068f6:	6802      	ldr	r2, [r0, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	bf18      	it	ne
 80068fc:	2400      	movne	r4, #0
 80068fe:	48a4      	ldr	r0, [pc, #656]	; (8006b90 <ai_platform_network_process+0x2a8>)
 8006900:	4ba4      	ldr	r3, [pc, #656]	; (8006b94 <ai_platform_network_process+0x2ac>)
 8006902:	6802      	ldr	r2, [r0, #0]
 8006904:	f022 0201 	bic.w	r2, r2, #1
 8006908:	6002      	str	r2, [r0, #0]
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	2a00      	cmp	r2, #0
 8006912:	d1fc      	bne.n	800690e <ai_platform_network_process+0x26>
 8006914:	4ba0      	ldr	r3, [pc, #640]	; (8006b98 <ai_platform_network_process+0x2b0>)
 8006916:	4aa1      	ldr	r2, [pc, #644]	; (8006b9c <ai_platform_network_process+0x2b4>)
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4ba0      	ldr	r3, [pc, #640]	; (8006ba0 <ai_platform_network_process+0x2b8>)
 800691e:	429a      	cmp	r2, r3
 8006920:	d000      	beq.n	8006924 <ai_platform_network_process+0x3c>
 8006922:	e7fe      	b.n	8006922 <ai_platform_network_process+0x3a>
 8006924:	2c00      	cmp	r4, #0
 8006926:	d066      	beq.n	80069f6 <ai_platform_network_process+0x10e>
 8006928:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 800692c:	b107      	cbz	r7, 8006930 <ai_platform_network_process+0x48>
 800692e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8006930:	68e3      	ldr	r3, [r4, #12]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	2600      	movs	r6, #0
 8006938:	2b03      	cmp	r3, #3
 800693a:	6166      	str	r6, [r4, #20]
 800693c:	f040 80fe 	bne.w	8006b3c <ai_platform_network_process+0x254>
 8006940:	2900      	cmp	r1, #0
 8006942:	d07f      	beq.n	8006a44 <ai_platform_network_process+0x15c>
 8006944:	2f00      	cmp	r7, #0
 8006946:	d07d      	beq.n	8006a44 <ai_platform_network_process+0x15c>
 8006948:	883b      	ldrh	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d07a      	beq.n	8006a44 <ai_platform_network_process+0x15c>
 800694e:	460d      	mov	r5, r1
 8006950:	46a0      	mov	r8, r4
 8006952:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8006956:	429e      	cmp	r6, r3
 8006958:	d27d      	bcs.n	8006a56 <ai_platform_network_process+0x16e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d07a      	beq.n	8006a56 <ai_platform_network_process+0x16e>
 8006960:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8006964:	2c00      	cmp	r4, #0
 8006966:	d076      	beq.n	8006a56 <ai_platform_network_process+0x16e>
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8006970:	d067      	beq.n	8006a42 <ai_platform_network_process+0x15a>
 8006972:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8006976:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800697a:	69a0      	ldr	r0, [r4, #24]
 800697c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8006980:	6841      	ldr	r1, [r0, #4]
 8006982:	fb0b f30e 	mul.w	r3, fp, lr
 8006986:	fb0c f303 	mul.w	r3, ip, r3
 800698a:	4299      	cmp	r1, r3
 800698c:	d350      	bcc.n	8006a30 <ai_platform_network_process+0x148>
 800698e:	68e3      	ldr	r3, [r4, #12]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	455a      	cmp	r2, fp
 8006994:	d14c      	bne.n	8006a30 <ai_platform_network_process+0x148>
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	4572      	cmp	r2, lr
 800699a:	d149      	bne.n	8006a30 <ai_platform_network_process+0x148>
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	459c      	cmp	ip, r3
 80069a0:	d146      	bne.n	8006a30 <ai_platform_network_process+0x148>
 80069a2:	6800      	ldr	r0, [r0, #0]
 80069a4:	f000 ff8a 	bl	80078bc <ai_array_get_byte_size>
 80069a8:	68e2      	ldr	r2, [r4, #12]
 80069aa:	6963      	ldr	r3, [r4, #20]
 80069ac:	68d2      	ldr	r2, [r2, #12]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	fb03 f302 	mul.w	r3, r3, r2
 80069b4:	4298      	cmp	r0, r3
 80069b6:	d33b      	bcc.n	8006a30 <ai_platform_network_process+0x148>
 80069b8:	69a3      	ldr	r3, [r4, #24]
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	f000 ff32 	bl	8007824 <ai_array_to_buffer_fmt>
 80069c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80069c4:	4043      	eors	r3, r0
 80069c6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80069ca:	d128      	bne.n	8006a1e <ai_platform_network_process+0x136>
 80069cc:	68eb      	ldr	r3, [r5, #12]
 80069ce:	b1f3      	cbz	r3, 8006a0e <ai_platform_network_process+0x126>
 80069d0:	f8b5 b000 	ldrh.w	fp, [r5]
 80069d4:	f1bb 0f00 	cmp.w	fp, #0
 80069d8:	d012      	beq.n	8006a00 <ai_platform_network_process+0x118>
 80069da:	4623      	mov	r3, r4
 80069dc:	f105 020c 	add.w	r2, r5, #12
 80069e0:	4629      	mov	r1, r5
 80069e2:	4650      	mov	r0, sl
 80069e4:	f7ff fc00 	bl	80061e8 <_platform_network_state_setup.isra.1>
 80069e8:	45d9      	cmp	r9, fp
 80069ea:	883b      	ldrh	r3, [r7, #0]
 80069ec:	bf38      	it	cc
 80069ee:	46d9      	movcc	r9, fp
 80069f0:	3601      	adds	r6, #1
 80069f2:	3518      	adds	r5, #24
 80069f4:	e7af      	b.n	8006956 <ai_platform_network_process+0x6e>
 80069f6:	46a3      	mov	fp, r4
 80069f8:	4658      	mov	r0, fp
 80069fa:	b003      	add	sp, #12
 80069fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a00:	f108 0010 	add.w	r0, r8, #16
 8006a04:	2221      	movs	r2, #33	; 0x21
 8006a06:	2112      	movs	r1, #18
 8006a08:	f000 f980 	bl	8006d0c <core_set_error>
 8006a0c:	e7f4      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006a0e:	f108 0010 	add.w	r0, r8, #16
 8006a12:	2217      	movs	r2, #23
 8006a14:	2112      	movs	r1, #18
 8006a16:	469b      	mov	fp, r3
 8006a18:	f000 f978 	bl	8006d0c <core_set_error>
 8006a1c:	e7ec      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006a1e:	f108 0010 	add.w	r0, r8, #16
 8006a22:	2219      	movs	r2, #25
 8006a24:	2112      	movs	r1, #18
 8006a26:	f000 f971 	bl	8006d0c <core_set_error>
 8006a2a:	f04f 0b00 	mov.w	fp, #0
 8006a2e:	e7e3      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006a30:	f108 0010 	add.w	r0, r8, #16
 8006a34:	2218      	movs	r2, #24
 8006a36:	2112      	movs	r1, #18
 8006a38:	f000 f968 	bl	8006d0c <core_set_error>
 8006a3c:	f04f 0b00 	mov.w	fp, #0
 8006a40:	e7da      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006a42:	4644      	mov	r4, r8
 8006a44:	f104 0010 	add.w	r0, r4, #16
 8006a48:	2217      	movs	r2, #23
 8006a4a:	2112      	movs	r1, #18
 8006a4c:	f000 f95e 	bl	8006d0c <core_set_error>
 8006a50:	f04f 0b00 	mov.w	fp, #0
 8006a54:	e7d0      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006a56:	9a01      	ldr	r2, [sp, #4]
 8006a58:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8006a5c:	4644      	mov	r4, r8
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	f000 80a2 	beq.w	8006ba8 <ai_platform_network_process+0x2c0>
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	f240 8140 	bls.w	8006cea <ai_platform_network_process+0x402>
 8006a6a:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8006a6e:	f118 0f0c 	cmn.w	r8, #12
 8006a72:	f000 813a 	beq.w	8006cea <ai_platform_network_process+0x402>
 8006a76:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8135 	beq.w	8006cea <ai_platform_network_process+0x402>
 8006a80:	9d01      	ldr	r5, [sp, #4]
 8006a82:	2700      	movs	r7, #0
 8006a84:	3504      	adds	r5, #4
 8006a86:	429f      	cmp	r7, r3
 8006a88:	f080 808c 	bcs.w	8006ba4 <ai_platform_network_process+0x2bc>
 8006a8c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8087 	beq.w	8006ba4 <ai_platform_network_process+0x2bc>
 8006a96:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8006a9a:	2e00      	cmp	r6, #0
 8006a9c:	f000 8082 	beq.w	8006ba4 <ai_platform_network_process+0x2bc>
 8006aa0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8006aaa:	d067      	beq.n	8006b7c <ai_platform_network_process+0x294>
 8006aac:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8006ab0:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8006ab4:	69b0      	ldr	r0, [r6, #24]
 8006ab6:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8006aba:	6841      	ldr	r1, [r0, #4]
 8006abc:	fb0b f30e 	mul.w	r3, fp, lr
 8006ac0:	fb0c f303 	mul.w	r3, ip, r3
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	f0c0 8110 	bcc.w	8006cea <ai_platform_network_process+0x402>
 8006aca:	68f3      	ldr	r3, [r6, #12]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	455a      	cmp	r2, fp
 8006ad0:	f040 810b 	bne.w	8006cea <ai_platform_network_process+0x402>
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	4572      	cmp	r2, lr
 8006ad8:	f040 8107 	bne.w	8006cea <ai_platform_network_process+0x402>
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	459c      	cmp	ip, r3
 8006ae0:	f040 8103 	bne.w	8006cea <ai_platform_network_process+0x402>
 8006ae4:	6800      	ldr	r0, [r0, #0]
 8006ae6:	f000 fee9 	bl	80078bc <ai_array_get_byte_size>
 8006aea:	68f2      	ldr	r2, [r6, #12]
 8006aec:	6973      	ldr	r3, [r6, #20]
 8006aee:	68d2      	ldr	r2, [r2, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	fb03 f302 	mul.w	r3, r3, r2
 8006af6:	4298      	cmp	r0, r3
 8006af8:	f0c0 80f7 	bcc.w	8006cea <ai_platform_network_process+0x402>
 8006afc:	69b3      	ldr	r3, [r6, #24]
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	f000 fe90 	bl	8007824 <ai_array_to_buffer_fmt>
 8006b04:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8006b08:	4043      	eors	r3, r0
 8006b0a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006b0e:	d12c      	bne.n	8006b6a <ai_platform_network_process+0x282>
 8006b10:	68eb      	ldr	r3, [r5, #12]
 8006b12:	b313      	cbz	r3, 8006b5a <ai_platform_network_process+0x272>
 8006b14:	f8b5 b000 	ldrh.w	fp, [r5]
 8006b18:	f1bb 0f00 	cmp.w	fp, #0
 8006b1c:	d016      	beq.n	8006b4c <ai_platform_network_process+0x264>
 8006b1e:	4633      	mov	r3, r6
 8006b20:	f105 020c 	add.w	r2, r5, #12
 8006b24:	4629      	mov	r1, r5
 8006b26:	4650      	mov	r0, sl
 8006b28:	f7ff fb5e 	bl	80061e8 <_platform_network_state_setup.isra.1>
 8006b2c:	45d9      	cmp	r9, fp
 8006b2e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006b32:	bf38      	it	cc
 8006b34:	46d9      	movcc	r9, fp
 8006b36:	3701      	adds	r7, #1
 8006b38:	3518      	adds	r5, #24
 8006b3a:	e7a4      	b.n	8006a86 <ai_platform_network_process+0x19e>
 8006b3c:	f104 0010 	add.w	r0, r4, #16
 8006b40:	2230      	movs	r2, #48	; 0x30
 8006b42:	2111      	movs	r1, #17
 8006b44:	f000 f8e2 	bl	8006d0c <core_set_error>
 8006b48:	46b3      	mov	fp, r6
 8006b4a:	e755      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006b4c:	f104 0010 	add.w	r0, r4, #16
 8006b50:	2221      	movs	r2, #33	; 0x21
 8006b52:	2113      	movs	r1, #19
 8006b54:	f000 f8da 	bl	8006d0c <core_set_error>
 8006b58:	e74e      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006b5a:	f104 0010 	add.w	r0, r4, #16
 8006b5e:	2217      	movs	r2, #23
 8006b60:	2113      	movs	r1, #19
 8006b62:	469b      	mov	fp, r3
 8006b64:	f000 f8d2 	bl	8006d0c <core_set_error>
 8006b68:	e746      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006b6a:	f104 0010 	add.w	r0, r4, #16
 8006b6e:	2219      	movs	r2, #25
 8006b70:	2113      	movs	r1, #19
 8006b72:	f000 f8cb 	bl	8006d0c <core_set_error>
 8006b76:	f04f 0b00 	mov.w	fp, #0
 8006b7a:	e73d      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006b7c:	f104 0010 	add.w	r0, r4, #16
 8006b80:	2217      	movs	r2, #23
 8006b82:	2113      	movs	r1, #19
 8006b84:	f000 f8c2 	bl	8006d0c <core_set_error>
 8006b88:	46d3      	mov	fp, sl
 8006b8a:	e735      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006b8c:	a1c00100 	.word	0xa1c00100
 8006b90:	e0002000 	.word	0xe0002000
 8006b94:	40023008 	.word	0x40023008
 8006b98:	40023000 	.word	0x40023000
 8006b9c:	f407a5c2 	.word	0xf407a5c2
 8006ba0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ba4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8006ba8:	f8a4 9014 	strh.w	r9, [r4, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8099 	beq.w	8006ce4 <ai_platform_network_process+0x3fc>
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006bb6:	f240 8093 	bls.w	8006ce0 <ai_platform_network_process+0x3f8>
 8006bba:	f105 070c 	add.w	r7, r5, #12
 8006bbe:	8ae0      	ldrh	r0, [r4, #22]
 8006bc0:	8aa3      	ldrh	r3, [r4, #20]
 8006bc2:	4283      	cmp	r3, r0
 8006bc4:	d977      	bls.n	8006cb6 <ai_platform_network_process+0x3ce>
 8006bc6:	46a3      	mov	fp, r4
 8006bc8:	2d00      	cmp	r5, #0
 8006bca:	d032      	beq.n	8006c32 <ai_platform_network_process+0x34a>
 8006bcc:	882b      	ldrh	r3, [r5, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d02f      	beq.n	8006c32 <ai_platform_network_process+0x34a>
 8006bd2:	686b      	ldr	r3, [r5, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d02c      	beq.n	8006c32 <ai_platform_network_process+0x34a>
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f04f 0800 	mov.w	r8, #0
 8006bde:	b343      	cbz	r3, 8006c32 <ai_platform_network_process+0x34a>
 8006be0:	68a9      	ldr	r1, [r5, #8]
 8006be2:	699a      	ldr	r2, [r3, #24]
 8006be4:	f8d1 a000 	ldr.w	sl, [r1]
 8006be8:	6814      	ldr	r4, [r2, #0]
 8006bea:	6890      	ldr	r0, [r2, #8]
 8006bec:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8006bf0:	eb0a 0609 	add.w	r6, sl, r9
 8006bf4:	00a4      	lsls	r4, r4, #2
 8006bf6:	6871      	ldr	r1, [r6, #4]
 8006bf8:	d45f      	bmi.n	8006cba <ai_platform_network_process+0x3d2>
 8006bfa:	68d4      	ldr	r4, [r2, #12]
 8006bfc:	1b00      	subs	r0, r0, r4
 8006bfe:	4401      	add	r1, r0
 8006c00:	6091      	str	r1, [r2, #8]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	6872      	ldr	r2, [r6, #4]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8006c0c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006c10:	440b      	add	r3, r1
 8006c12:	4293      	cmp	r3, r2
 8006c14:	bf24      	itt	cs
 8006c16:	68f3      	ldrcs	r3, [r6, #12]
 8006c18:	1ad3      	subcs	r3, r2, r3
 8006c1a:	6073      	str	r3, [r6, #4]
 8006c1c:	882b      	ldrh	r3, [r5, #0]
 8006c1e:	f108 0801 	add.w	r8, r8, #1
 8006c22:	4598      	cmp	r8, r3
 8006c24:	d205      	bcs.n	8006c32 <ai_platform_network_process+0x34a>
 8006c26:	686b      	ldr	r3, [r5, #4]
 8006c28:	b11b      	cbz	r3, 8006c32 <ai_platform_network_process+0x34a>
 8006c2a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1d6      	bne.n	8006be0 <ai_platform_network_process+0x2f8>
 8006c32:	4658      	mov	r0, fp
 8006c34:	f000 fd90 	bl	8007758 <ai_layers_forward_all>
 8006c38:	2f00      	cmp	r7, #0
 8006c3a:	d032      	beq.n	8006ca2 <ai_platform_network_process+0x3ba>
 8006c3c:	883b      	ldrh	r3, [r7, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d02f      	beq.n	8006ca2 <ai_platform_network_process+0x3ba>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	b36b      	cbz	r3, 8006ca2 <ai_platform_network_process+0x3ba>
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	b358      	cbz	r0, 8006ca2 <ai_platform_network_process+0x3ba>
 8006c4a:	f04f 0800 	mov.w	r8, #0
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6981      	ldr	r1, [r0, #24]
 8006c52:	f8d3 a000 	ldr.w	sl, [r3]
 8006c56:	680c      	ldr	r4, [r1, #0]
 8006c58:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8006c5c:	eb0a 0609 	add.w	r6, sl, r9
 8006c60:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8006c64:	00a4      	lsls	r4, r4, #2
 8006c66:	eb0c 0302 	add.w	r3, ip, r2
 8006c6a:	d42a      	bmi.n	8006cc2 <ai_platform_network_process+0x3da>
 8006c6c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	bf24      	itt	cs
 8006c74:	68f3      	ldrcs	r3, [r6, #12]
 8006c76:	1ad3      	subcs	r3, r2, r3
 8006c78:	6073      	str	r3, [r6, #4]
 8006c7a:	6981      	ldr	r1, [r0, #24]
 8006c7c:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8006c80:	1b12      	subs	r2, r2, r4
 8006c82:	4413      	add	r3, r2
 8006c84:	608b      	str	r3, [r1, #8]
 8006c86:	6983      	ldr	r3, [r0, #24]
 8006c88:	6872      	ldr	r2, [r6, #4]
 8006c8a:	60da      	str	r2, [r3, #12]
 8006c8c:	883b      	ldrh	r3, [r7, #0]
 8006c8e:	f108 0801 	add.w	r8, r8, #1
 8006c92:	4598      	cmp	r8, r3
 8006c94:	d205      	bcs.n	8006ca2 <ai_platform_network_process+0x3ba>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	b11b      	cbz	r3, 8006ca2 <ai_platform_network_process+0x3ba>
 8006c9a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d1d5      	bne.n	8006c4e <ai_platform_network_process+0x366>
 8006ca2:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8006ca6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006caa:	3001      	adds	r0, #1
 8006cac:	b280      	uxth	r0, r0
 8006cae:	4283      	cmp	r3, r0
 8006cb0:	f8ab 0016 	strh.w	r0, [fp, #22]
 8006cb4:	d888      	bhi.n	8006bc8 <ai_platform_network_process+0x2e0>
 8006cb6:	4683      	mov	fp, r0
 8006cb8:	e69e      	b.n	80069f8 <ai_platform_network_process+0x110>
 8006cba:	68b2      	ldr	r2, [r6, #8]
 8006cbc:	f000 fe62 	bl	8007984 <memcpy>
 8006cc0:	e7a2      	b.n	8006c08 <ai_platform_network_process+0x320>
 8006cc2:	6889      	ldr	r1, [r1, #8]
 8006cc4:	4660      	mov	r0, ip
 8006cc6:	f000 fe5d 	bl	8007984 <memcpy>
 8006cca:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8006cce:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006cd2:	440b      	add	r3, r1
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	bf24      	itt	cs
 8006cd8:	68f3      	ldrcs	r3, [r6, #12]
 8006cda:	1ad3      	subcs	r3, r2, r3
 8006cdc:	6073      	str	r3, [r6, #4]
 8006cde:	e7d5      	b.n	8006c8c <ai_platform_network_process+0x3a4>
 8006ce0:	2700      	movs	r7, #0
 8006ce2:	e76c      	b.n	8006bbe <ai_platform_network_process+0x2d6>
 8006ce4:	461d      	mov	r5, r3
 8006ce6:	461f      	mov	r7, r3
 8006ce8:	e769      	b.n	8006bbe <ai_platform_network_process+0x2d6>
 8006cea:	f104 0010 	add.w	r0, r4, #16
 8006cee:	2218      	movs	r2, #24
 8006cf0:	2113      	movs	r1, #19
 8006cf2:	f000 f80b 	bl	8006d0c <core_set_error>
 8006cf6:	f04f 0b00 	mov.w	fp, #0
 8006cfa:	e67d      	b.n	80069f8 <ai_platform_network_process+0x110>

08006cfc <core_init>:
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	4770      	bx	lr

08006d00 <core_get_error>:
 8006d00:	4603      	mov	r3, r0
 8006d02:	2200      	movs	r2, #0
 8006d04:	6800      	ldr	r0, [r0, #0]
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop

08006d0c <core_set_error>:
 8006d0c:	7803      	ldrb	r3, [r0, #0]
 8006d0e:	b933      	cbnz	r3, 8006d1e <core_set_error+0x12>
 8006d10:	7001      	strb	r1, [r0, #0]
 8006d12:	6803      	ldr	r3, [r0, #0]
 8006d14:	f362 231f 	bfi	r3, r2, #8, #24
 8006d18:	6003      	str	r3, [r0, #0]
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	4770      	bx	lr
 8006d1e:	2000      	movs	r0, #0
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop

08006d24 <ai_dict8_dot_array_f32>:
 8006d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d28:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006d2c:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8006d30:	f000 80c0 	beq.w	8006eb4 <ai_dict8_dot_array_f32+0x190>
 8006d34:	f101 0408 	add.w	r4, r1, #8
 8006d38:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006d3c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8006ebc <ai_dict8_dot_array_f32+0x198>
 8006d40:	eb04 0e09 	add.w	lr, r4, r9
 8006d44:	f103 0520 	add.w	r5, r3, #32
 8006d48:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8006d4c:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8006d50:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8006d54:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8006d58:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8006d5c:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8006d60:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8006d64:	ed55 3a04 	vldr	s7, [r5, #-16]
 8006d68:	ed55 4a03 	vldr	s9, [r5, #-12]
 8006d6c:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006d70:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006d74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006d78:	edd6 7a00 	vldr	s15, [r6]
 8006d7c:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8006d80:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006d84:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006d88:	ed9a 3a00 	vldr	s6, [sl]
 8006d8c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8006d90:	eee3 7a05 	vfma.f32	s15, s6, s10
 8006d94:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006d98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006d9c:	ed97 3a00 	vldr	s6, [r7]
 8006da0:	ed96 5a00 	vldr	s10, [r6]
 8006da4:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8006da8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8006dac:	eee3 7a04 	vfma.f32	s15, s6, s8
 8006db0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006db4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006db8:	ed9a 3a00 	vldr	s6, [sl]
 8006dbc:	ed96 4a00 	vldr	s8, [r6]
 8006dc0:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8006dc4:	eee5 7a06 	vfma.f32	s15, s10, s12
 8006dc8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006dcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006dd0:	ed97 5a00 	vldr	s10, [r7]
 8006dd4:	ed96 6a00 	vldr	s12, [r6]
 8006dd8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006ddc:	3408      	adds	r4, #8
 8006dde:	45a6      	cmp	lr, r4
 8006de0:	f105 0520 	add.w	r5, r5, #32
 8006de4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006de8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006dec:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006df4:	d1a8      	bne.n	8006d48 <ai_dict8_dot_array_f32+0x24>
 8006df6:	4449      	add	r1, r9
 8006df8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8006dfc:	f01c 0c07 	ands.w	ip, ip, #7
 8006e00:	d050      	beq.n	8006ea4 <ai_dict8_dot_array_f32+0x180>
 8006e02:	780c      	ldrb	r4, [r1, #0]
 8006e04:	edd3 6a00 	vldr	s13, [r3]
 8006e08:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006e0c:	edd4 7a00 	vldr	s15, [r4]
 8006e10:	f1bc 0f01 	cmp.w	ip, #1
 8006e14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e18:	d044      	beq.n	8006ea4 <ai_dict8_dot_array_f32+0x180>
 8006e1a:	784c      	ldrb	r4, [r1, #1]
 8006e1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006e20:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006e24:	edd4 7a00 	vldr	s15, [r4]
 8006e28:	f1bc 0f02 	cmp.w	ip, #2
 8006e2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e30:	d038      	beq.n	8006ea4 <ai_dict8_dot_array_f32+0x180>
 8006e32:	788c      	ldrb	r4, [r1, #2]
 8006e34:	edd3 6a02 	vldr	s13, [r3, #8]
 8006e38:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006e3c:	edd4 7a00 	vldr	s15, [r4]
 8006e40:	f1bc 0f03 	cmp.w	ip, #3
 8006e44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e48:	d02c      	beq.n	8006ea4 <ai_dict8_dot_array_f32+0x180>
 8006e4a:	78cc      	ldrb	r4, [r1, #3]
 8006e4c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006e50:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006e54:	edd4 7a00 	vldr	s15, [r4]
 8006e58:	f1bc 0f04 	cmp.w	ip, #4
 8006e5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e60:	d020      	beq.n	8006ea4 <ai_dict8_dot_array_f32+0x180>
 8006e62:	790c      	ldrb	r4, [r1, #4]
 8006e64:	edd3 6a04 	vldr	s13, [r3, #16]
 8006e68:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006e6c:	edd4 7a00 	vldr	s15, [r4]
 8006e70:	f1bc 0f05 	cmp.w	ip, #5
 8006e74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e78:	d014      	beq.n	8006ea4 <ai_dict8_dot_array_f32+0x180>
 8006e7a:	794c      	ldrb	r4, [r1, #5]
 8006e7c:	edd3 6a05 	vldr	s13, [r3, #20]
 8006e80:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006e84:	edd4 7a00 	vldr	s15, [r4]
 8006e88:	f1bc 0f06 	cmp.w	ip, #6
 8006e8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e90:	d008      	beq.n	8006ea4 <ai_dict8_dot_array_f32+0x180>
 8006e92:	7989      	ldrb	r1, [r1, #6]
 8006e94:	edd3 7a06 	vldr	s15, [r3, #24]
 8006e98:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006e9c:	edd2 6a00 	vldr	s13, [r2]
 8006ea0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ea4:	edd0 7a00 	vldr	s15, [r0]
 8006ea8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eac:	ed80 7a00 	vstr	s14, [r0]
 8006eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb4:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8006ebc <ai_dict8_dot_array_f32+0x198>
 8006eb8:	e7a0      	b.n	8006dfc <ai_dict8_dot_array_f32+0xd8>
 8006eba:	bf00      	nop
 8006ebc:	00000000 	.word	0x00000000

08006ec0 <ai_dict4_dot_array_f32>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ec6:	f027 0c01 	bic.w	ip, r7, #1
 8006eca:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8006ece:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8006ed2:	f000 80ae 	beq.w	8007032 <ai_dict4_dot_array_f32+0x172>
 8006ed6:	1d0d      	adds	r5, r1, #4
 8006ed8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8006edc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007038 <ai_dict4_dot_array_f32+0x178>
 8006ee0:	eb05 0e09 	add.w	lr, r5, r9
 8006ee4:	f103 0420 	add.w	r4, r3, #32
 8006ee8:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8006eec:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8006ef0:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8006ef4:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8006ef8:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8006efc:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8006f00:	ed14 5a04 	vldr	s10, [r4, #-16]
 8006f04:	ed54 5a03 	vldr	s11, [r4, #-12]
 8006f08:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006f0c:	ed54 6a01 	vldr	s13, [r4, #-4]
 8006f10:	f006 0a0f 	and.w	sl, r6, #15
 8006f14:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006f18:	edda 7a00 	vldr	s15, [sl]
 8006f1c:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8006f20:	0936      	lsrs	r6, r6, #4
 8006f22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006f26:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006f2a:	ed96 3a00 	vldr	s6, [r6]
 8006f2e:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8006f32:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006f36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006f3a:	f00b 0b0f 	and.w	fp, fp, #15
 8006f3e:	edd6 3a00 	vldr	s7, [r6]
 8006f42:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8006f46:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006f4a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8006f4e:	3504      	adds	r5, #4
 8006f50:	ed9b 4a00 	vldr	s8, [fp]
 8006f54:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8006f58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006f5c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8006f60:	f00a 0a0f 	and.w	sl, sl, #15
 8006f64:	eddb 4a00 	vldr	s9, [fp]
 8006f68:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006f6c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006f70:	45ae      	cmp	lr, r5
 8006f72:	ed9a 5a00 	vldr	s10, [sl]
 8006f76:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8006f7a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006f7e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006f82:	f006 060f 	and.w	r6, r6, #15
 8006f86:	edda 5a00 	vldr	s11, [sl]
 8006f8a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006f8e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006f92:	f104 0420 	add.w	r4, r4, #32
 8006f96:	ed96 6a00 	vldr	s12, [r6]
 8006f9a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fa2:	d1a1      	bne.n	8006ee8 <ai_dict4_dot_array_f32+0x28>
 8006fa4:	4449      	add	r1, r9
 8006fa6:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8006faa:	459c      	cmp	ip, r3
 8006fac:	d92d      	bls.n	800700a <ai_dict4_dot_array_f32+0x14a>
 8006fae:	f10c 0c07 	add.w	ip, ip, #7
 8006fb2:	f103 0508 	add.w	r5, r3, #8
 8006fb6:	ebac 0c05 	sub.w	ip, ip, r5
 8006fba:	f02c 0407 	bic.w	r4, ip, #7
 8006fbe:	f103 0810 	add.w	r8, r3, #16
 8006fc2:	44a0      	add	r8, r4
 8006fc4:	f101 3eff 	add.w	lr, r1, #4294967295
 8006fc8:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8006fcc:	ed15 6a01 	vldr	s12, [r5, #-4]
 8006fd0:	ed55 6a02 	vldr	s13, [r5, #-8]
 8006fd4:	f004 060f 	and.w	r6, r4, #15
 8006fd8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006fdc:	0924      	lsrs	r4, r4, #4
 8006fde:	edd6 7a00 	vldr	s15, [r6]
 8006fe2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006fe6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006fea:	ed94 6a00 	vldr	s12, [r4]
 8006fee:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006ff2:	3508      	adds	r5, #8
 8006ff4:	45a8      	cmp	r8, r5
 8006ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ffa:	d1e5      	bne.n	8006fc8 <ai_dict4_dot_array_f32+0x108>
 8006ffc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007000:	f10c 0c01 	add.w	ip, ip, #1
 8007004:	4461      	add	r1, ip
 8007006:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800700a:	07fc      	lsls	r4, r7, #31
 800700c:	d509      	bpl.n	8007022 <ai_dict4_dot_array_f32+0x162>
 800700e:	7809      	ldrb	r1, [r1, #0]
 8007010:	edd3 7a00 	vldr	s15, [r3]
 8007014:	090b      	lsrs	r3, r1, #4
 8007016:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800701a:	edd2 6a00 	vldr	s13, [r2]
 800701e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007022:	edd0 7a00 	vldr	s15, [r0]
 8007026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800702a:	ed80 7a00 	vstr	s14, [r0]
 800702e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007032:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007038 <ai_dict4_dot_array_f32+0x178>
 8007036:	e7b8      	b.n	8006faa <ai_dict4_dot_array_f32+0xea>
 8007038:	00000000 	.word	0x00000000

0800703c <forward_dense>:
 800703c:	6982      	ldr	r2, [r0, #24]
 800703e:	8813      	ldrh	r3, [r2, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 81ca 	beq.w	80073da <forward_dense+0x39e>
 8007046:	6852      	ldr	r2, [r2, #4]
 8007048:	6850      	ldr	r0, [r2, #4]
 800704a:	b100      	cbz	r0, 800704e <forward_dense+0x12>
 800704c:	6800      	ldr	r0, [r0, #0]
 800704e:	2b01      	cmp	r3, #1
 8007050:	f240 81c0 	bls.w	80073d4 <forward_dense+0x398>
 8007054:	6911      	ldr	r1, [r2, #16]
 8007056:	b101      	cbz	r1, 800705a <forward_dense+0x1e>
 8007058:	6809      	ldr	r1, [r1, #0]
 800705a:	2b02      	cmp	r3, #2
 800705c:	f000 81bf 	beq.w	80073de <forward_dense+0x3a2>
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	ed2d 8b10 	vpush	{d8-d15}
 8007068:	69d3      	ldr	r3, [r2, #28]
 800706a:	b091      	sub	sp, #68	; 0x44
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 820b 	beq.w	8007488 <forward_dense+0x44c>
 8007072:	681c      	ldr	r4, [r3, #0]
 8007074:	9408      	str	r4, [sp, #32]
 8007076:	f112 0418 	adds.w	r4, r2, #24
 800707a:	f000 81df 	beq.w	800743c <forward_dense+0x400>
 800707e:	8b12      	ldrh	r2, [r2, #24]
 8007080:	2a01      	cmp	r2, #1
 8007082:	f240 81fe 	bls.w	8007482 <forward_dense+0x446>
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 81da 	beq.w	8007440 <forward_dense+0x404>
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	9306      	str	r3, [sp, #24]
 8007090:	9b08      	ldr	r3, [sp, #32]
 8007092:	68cc      	ldr	r4, [r1, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	68c5      	ldr	r5, [r0, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800709e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80070a2:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 80070a6:	f3c2 5541 	ubfx	r5, r2, #21, #2
 80070aa:	fa4c f505 	asr.w	r5, ip, r5
 80070ae:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80070b2:	950b      	str	r5, [sp, #44]	; 0x2c
 80070b4:	2a04      	cmp	r2, #4
 80070b6:	fb07 f506 	mul.w	r5, r7, r6
 80070ba:	6864      	ldr	r4, [r4, #4]
 80070bc:	9507      	str	r5, [sp, #28]
 80070be:	f000 81dd 	beq.w	800747c <forward_dense+0x440>
 80070c2:	2a08      	cmp	r2, #8
 80070c4:	f000 81da 	beq.w	800747c <forward_dense+0x440>
 80070c8:	f04f 0a00 	mov.w	sl, #0
 80070cc:	698a      	ldr	r2, [r1, #24]
 80070ce:	6981      	ldr	r1, [r0, #24]
 80070d0:	6890      	ldr	r0, [r2, #8]
 80070d2:	9a08      	ldr	r2, [sp, #32]
 80070d4:	9004      	str	r0, [sp, #16]
 80070d6:	6952      	ldr	r2, [r2, #20]
 80070d8:	688f      	ldr	r7, [r1, #8]
 80070da:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80070de:	00a2      	lsls	r2, r4, #2
 80070e0:	9209      	str	r2, [sp, #36]	; 0x24
 80070e2:	1886      	adds	r6, r0, r2
 80070e4:	9a07      	ldr	r2, [sp, #28]
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	f000 81c3 	beq.w	8007472 <forward_dense+0x436>
 80070ec:	f1a8 0210 	sub.w	r2, r8, #16
 80070f0:	0912      	lsrs	r2, r2, #4
 80070f2:	3201      	adds	r2, #1
 80070f4:	0192      	lsls	r2, r2, #6
 80070f6:	920c      	str	r2, [sp, #48]	; 0x30
 80070f8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80070fc:	920a      	str	r2, [sp, #40]	; 0x28
 80070fe:	689d      	ldr	r5, [r3, #8]
 8007100:	9b06      	ldr	r3, [sp, #24]
 8007102:	eddf aad0 	vldr	s21, [pc, #832]	; 8007444 <forward_dense+0x408>
 8007106:	2200      	movs	r2, #0
 8007108:	9205      	str	r2, [sp, #20]
 800710a:	f008 020f 	and.w	r2, r8, #15
 800710e:	920d      	str	r2, [sp, #52]	; 0x34
 8007110:	2b00      	cmp	r3, #0
 8007112:	d043      	beq.n	800719c <forward_dense+0x160>
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	689c      	ldr	r4, [r3, #8]
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	f1ba 0f00 	cmp.w	sl, #0
 800711e:	d042      	beq.n	80071a6 <forward_dense+0x16a>
 8007120:	42b3      	cmp	r3, r6
 8007122:	d22a      	bcs.n	800717a <forward_dense+0x13e>
 8007124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007126:	469b      	mov	fp, r3
 8007128:	ab0f      	add	r3, sp, #60	; 0x3c
 800712a:	9303      	str	r3, [sp, #12]
 800712c:	2a04      	cmp	r2, #4
 800712e:	4633      	mov	r3, r6
 8007130:	4646      	mov	r6, r8
 8007132:	4698      	mov	r8, r3
 8007134:	f000 8156 	beq.w	80073e4 <forward_dense+0x3a8>
 8007138:	2c00      	cmp	r4, #0
 800713a:	f000 8185 	beq.w	8007448 <forward_dense+0x40c>
 800713e:	f8d4 c000 	ldr.w	ip, [r4]
 8007142:	9803      	ldr	r0, [sp, #12]
 8007144:	9600      	str	r6, [sp, #0]
 8007146:	463b      	mov	r3, r7
 8007148:	4629      	mov	r1, r5
 800714a:	4652      	mov	r2, sl
 800714c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8007150:	f7ff fde8 	bl	8006d24 <ai_dict8_dot_array_f32>
 8007154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007156:	f84b 3b04 	str.w	r3, [fp], #4
 800715a:	45c3      	cmp	fp, r8
 800715c:	f104 0404 	add.w	r4, r4, #4
 8007160:	444d      	add	r5, r9
 8007162:	d3e9      	bcc.n	8007138 <forward_dense+0xfc>
 8007164:	4643      	mov	r3, r8
 8007166:	46b0      	mov	r8, r6
 8007168:	461e      	mov	r6, r3
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	43d3      	mvns	r3, r2
 800716e:	4433      	add	r3, r6
 8007170:	f023 0303 	bic.w	r3, r3, #3
 8007174:	3304      	adds	r3, #4
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800717c:	9b05      	ldr	r3, [sp, #20]
 800717e:	4417      	add	r7, r2
 8007180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007182:	4416      	add	r6, r2
 8007184:	9a07      	ldr	r2, [sp, #28]
 8007186:	3301      	adds	r3, #1
 8007188:	4293      	cmp	r3, r2
 800718a:	9305      	str	r3, [sp, #20]
 800718c:	f000 8171 	beq.w	8007472 <forward_dense+0x436>
 8007190:	9b08      	ldr	r3, [sp, #32]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	689d      	ldr	r5, [r3, #8]
 8007196:	9b06      	ldr	r3, [sp, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1bb      	bne.n	8007114 <forward_dense+0xd8>
 800719c:	461c      	mov	r4, r3
 800719e:	9b04      	ldr	r3, [sp, #16]
 80071a0:	f1ba 0f00 	cmp.w	sl, #0
 80071a4:	d1bc      	bne.n	8007120 <forward_dense+0xe4>
 80071a6:	42b3      	cmp	r3, r6
 80071a8:	d2e7      	bcs.n	800717a <forward_dense+0x13e>
 80071aa:	4618      	mov	r0, r3
 80071ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071ae:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80071b2:	eb07 0c03 	add.w	ip, r7, r3
 80071b6:	469e      	mov	lr, r3
 80071b8:	2c00      	cmp	r4, #0
 80071ba:	f000 80ff 	beq.w	80073bc <forward_dense+0x380>
 80071be:	f1b8 0f0f 	cmp.w	r8, #15
 80071c2:	edd4 fa00 	vldr	s31, [r4]
 80071c6:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8007444 <forward_dense+0x408>
 80071ca:	f104 0404 	add.w	r4, r4, #4
 80071ce:	f240 80fd 	bls.w	80073cc <forward_dense+0x390>
 80071d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80071d6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80071da:	4641      	mov	r1, r8
 80071dc:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80071e0:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80071e4:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 80071e8:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 80071ec:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 80071f0:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 80071f4:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 80071f8:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 80071fc:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8007200:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8007204:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8007208:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800720c:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8007210:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8007214:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8007218:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800721c:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8007220:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8007224:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8007228:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800722c:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8007230:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8007234:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8007238:	ed13 4a04 	vldr	s8, [r3, #-16]
 800723c:	ed52 4a04 	vldr	s9, [r2, #-16]
 8007240:	ed12 5a03 	vldr	s10, [r2, #-12]
 8007244:	ed53 5a03 	vldr	s11, [r3, #-12]
 8007248:	ed12 6a02 	vldr	s12, [r2, #-8]
 800724c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8007250:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8007254:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8007258:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800725c:	3910      	subs	r1, #16
 800725e:	290f      	cmp	r1, #15
 8007260:	ed53 ea01 	vldr	s29, [r3, #-4]
 8007264:	ed12 ea01 	vldr	s28, [r2, #-4]
 8007268:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800726c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007270:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007274:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8007278:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800727c:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8007280:	eee9 7a89 	vfma.f32	s15, s19, s18
 8007284:	eee8 7a88 	vfma.f32	s15, s17, s16
 8007288:	eee0 7a20 	vfma.f32	s15, s0, s1
 800728c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007290:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007294:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007298:	eee4 7a24 	vfma.f32	s15, s8, s9
 800729c:	eee5 7a25 	vfma.f32	s15, s10, s11
 80072a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80072a4:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80072a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80072ac:	d896      	bhi.n	80071dc <forward_dense+0x1a0>
 80072ae:	eb05 010e 	add.w	r1, r5, lr
 80072b2:	465b      	mov	r3, fp
 80072b4:	4662      	mov	r2, ip
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d075      	beq.n	80073a6 <forward_dense+0x36a>
 80072ba:	ed91 7a00 	vldr	s14, [r1]
 80072be:	edd2 7a00 	vldr	s15, [r2]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80072c8:	d06d      	beq.n	80073a6 <forward_dense+0x36a>
 80072ca:	ed91 7a01 	vldr	s14, [r1, #4]
 80072ce:	edd2 7a01 	vldr	s15, [r2, #4]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80072d8:	d065      	beq.n	80073a6 <forward_dense+0x36a>
 80072da:	ed91 7a02 	vldr	s14, [r1, #8]
 80072de:	edd2 7a02 	vldr	s15, [r2, #8]
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80072e8:	d05d      	beq.n	80073a6 <forward_dense+0x36a>
 80072ea:	ed91 7a03 	vldr	s14, [r1, #12]
 80072ee:	edd2 7a03 	vldr	s15, [r2, #12]
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80072f8:	d055      	beq.n	80073a6 <forward_dense+0x36a>
 80072fa:	ed91 7a04 	vldr	s14, [r1, #16]
 80072fe:	edd2 7a04 	vldr	s15, [r2, #16]
 8007302:	2b05      	cmp	r3, #5
 8007304:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007308:	d04d      	beq.n	80073a6 <forward_dense+0x36a>
 800730a:	ed91 7a05 	vldr	s14, [r1, #20]
 800730e:	edd2 7a05 	vldr	s15, [r2, #20]
 8007312:	2b06      	cmp	r3, #6
 8007314:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007318:	d045      	beq.n	80073a6 <forward_dense+0x36a>
 800731a:	ed91 7a06 	vldr	s14, [r1, #24]
 800731e:	edd2 7a06 	vldr	s15, [r2, #24]
 8007322:	2b07      	cmp	r3, #7
 8007324:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007328:	d03d      	beq.n	80073a6 <forward_dense+0x36a>
 800732a:	ed91 7a07 	vldr	s14, [r1, #28]
 800732e:	edd2 7a07 	vldr	s15, [r2, #28]
 8007332:	2b08      	cmp	r3, #8
 8007334:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007338:	d035      	beq.n	80073a6 <forward_dense+0x36a>
 800733a:	ed91 7a08 	vldr	s14, [r1, #32]
 800733e:	edd2 7a08 	vldr	s15, [r2, #32]
 8007342:	2b09      	cmp	r3, #9
 8007344:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007348:	d02d      	beq.n	80073a6 <forward_dense+0x36a>
 800734a:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800734e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007352:	2b0a      	cmp	r3, #10
 8007354:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007358:	d025      	beq.n	80073a6 <forward_dense+0x36a>
 800735a:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800735e:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007362:	2b0b      	cmp	r3, #11
 8007364:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007368:	d01d      	beq.n	80073a6 <forward_dense+0x36a>
 800736a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800736e:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007372:	2b0c      	cmp	r3, #12
 8007374:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007378:	d015      	beq.n	80073a6 <forward_dense+0x36a>
 800737a:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800737e:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007382:	2b0d      	cmp	r3, #13
 8007384:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007388:	d00d      	beq.n	80073a6 <forward_dense+0x36a>
 800738a:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800738e:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007392:	2b0e      	cmp	r3, #14
 8007394:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007398:	d005      	beq.n	80073a6 <forward_dense+0x36a>
 800739a:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800739e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80073a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80073a6:	444d      	add	r5, r9
 80073a8:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80073ac:	ece0 6a01 	vstmia	r0!, {s13}
 80073b0:	42b0      	cmp	r0, r6
 80073b2:	f4bf aeda 	bcs.w	800716a <forward_dense+0x12e>
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	f47f af01 	bne.w	80071be <forward_dense+0x182>
 80073bc:	f1b8 0f0f 	cmp.w	r8, #15
 80073c0:	eef0 fa6a 	vmov.f32	s31, s21
 80073c4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007444 <forward_dense+0x408>
 80073c8:	f63f af03 	bhi.w	80071d2 <forward_dense+0x196>
 80073cc:	4643      	mov	r3, r8
 80073ce:	4629      	mov	r1, r5
 80073d0:	463a      	mov	r2, r7
 80073d2:	e770      	b.n	80072b6 <forward_dense+0x27a>
 80073d4:	2300      	movs	r3, #0
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	deff      	udf	#255	; 0xff
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	deff      	udf	#255	; 0xff
 80073de:	2300      	movs	r3, #0
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	deff      	udf	#255	; 0xff
 80073e4:	b1ac      	cbz	r4, 8007412 <forward_dense+0x3d6>
 80073e6:	f8d4 c000 	ldr.w	ip, [r4]
 80073ea:	9803      	ldr	r0, [sp, #12]
 80073ec:	9600      	str	r6, [sp, #0]
 80073ee:	463b      	mov	r3, r7
 80073f0:	4629      	mov	r1, r5
 80073f2:	4652      	mov	r2, sl
 80073f4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80073f8:	f7ff fd62 	bl	8006ec0 <ai_dict4_dot_array_f32>
 80073fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073fe:	f84b 3b04 	str.w	r3, [fp], #4
 8007402:	45c3      	cmp	fp, r8
 8007404:	f104 0404 	add.w	r4, r4, #4
 8007408:	444d      	add	r5, r9
 800740a:	f4bf aeab 	bcs.w	8007164 <forward_dense+0x128>
 800740e:	2c00      	cmp	r4, #0
 8007410:	d1e9      	bne.n	80073e6 <forward_dense+0x3aa>
 8007412:	4634      	mov	r4, r6
 8007414:	4646      	mov	r6, r8
 8007416:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800741a:	9400      	str	r4, [sp, #0]
 800741c:	463b      	mov	r3, r7
 800741e:	4629      	mov	r1, r5
 8007420:	4652      	mov	r2, sl
 8007422:	4640      	mov	r0, r8
 8007424:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8007428:	f7ff fd4a 	bl	8006ec0 <ai_dict4_dot_array_f32>
 800742c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800742e:	f84b 3b04 	str.w	r3, [fp], #4
 8007432:	45b3      	cmp	fp, r6
 8007434:	444d      	add	r5, r9
 8007436:	d3f0      	bcc.n	800741a <forward_dense+0x3de>
 8007438:	46a0      	mov	r8, r4
 800743a:	e696      	b.n	800716a <forward_dense+0x12e>
 800743c:	9406      	str	r4, [sp, #24]
 800743e:	e627      	b.n	8007090 <forward_dense+0x54>
 8007440:	9306      	str	r3, [sp, #24]
 8007442:	e625      	b.n	8007090 <forward_dense+0x54>
 8007444:	00000000 	.word	0x00000000
 8007448:	4634      	mov	r4, r6
 800744a:	4646      	mov	r6, r8
 800744c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007450:	9400      	str	r4, [sp, #0]
 8007452:	463b      	mov	r3, r7
 8007454:	4629      	mov	r1, r5
 8007456:	4652      	mov	r2, sl
 8007458:	4640      	mov	r0, r8
 800745a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800745e:	f7ff fc61 	bl	8006d24 <ai_dict8_dot_array_f32>
 8007462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007464:	f84b 3b04 	str.w	r3, [fp], #4
 8007468:	45b3      	cmp	fp, r6
 800746a:	444d      	add	r5, r9
 800746c:	d3f0      	bcc.n	8007450 <forward_dense+0x414>
 800746e:	46a0      	mov	r8, r4
 8007470:	e67b      	b.n	800716a <forward_dense+0x12e>
 8007472:	b011      	add	sp, #68	; 0x44
 8007474:	ecbd 8b10 	vpop	{d8-d15}
 8007478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8007480:	e624      	b.n	80070cc <forward_dense+0x90>
 8007482:	2300      	movs	r3, #0
 8007484:	9306      	str	r3, [sp, #24]
 8007486:	e603      	b.n	8007090 <forward_dense+0x54>
 8007488:	9308      	str	r3, [sp, #32]
 800748a:	e5f4      	b.n	8007076 <forward_dense+0x3a>

0800748c <nl_func_relu_generic_array_f32>:
 800748c:	b430      	push	{r4, r5}
 800748e:	6989      	ldr	r1, [r1, #24]
 8007490:	6980      	ldr	r0, [r0, #24]
 8007492:	edd3 6a02 	vldr	s13, [r3, #8]
 8007496:	688c      	ldr	r4, [r1, #8]
 8007498:	6880      	ldr	r0, [r0, #8]
 800749a:	ed93 7a00 	vldr	s14, [r3]
 800749e:	ed93 6a01 	vldr	s12, [r3, #4]
 80074a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80074a6:	3a01      	subs	r2, #1
 80074a8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80074ac:	0092      	lsls	r2, r2, #2
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	4410      	add	r0, r2
 80074b4:	4422      	add	r2, r4
 80074b6:	d421      	bmi.n	80074fc <nl_func_relu_generic_array_f32+0x70>
 80074b8:	4294      	cmp	r4, r2
 80074ba:	d83d      	bhi.n	8007538 <nl_func_relu_generic_array_f32+0xac>
 80074bc:	1d13      	adds	r3, r2, #4
 80074be:	1d02      	adds	r2, r0, #4
 80074c0:	e010      	b.n	80074e4 <nl_func_relu_generic_array_f32+0x58>
 80074c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ca:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80074ce:	d501      	bpl.n	80074d4 <nl_func_relu_generic_array_f32+0x48>
 80074d0:	ee65 7a86 	vmul.f32	s15, s11, s12
 80074d4:	ed62 7a01 	vstmdb	r2!, {s15}
 80074d8:	6888      	ldr	r0, [r1, #8]
 80074da:	f1a3 0408 	sub.w	r4, r3, #8
 80074de:	4284      	cmp	r4, r0
 80074e0:	462b      	mov	r3, r5
 80074e2:	d329      	bcc.n	8007538 <nl_func_relu_generic_array_f32+0xac>
 80074e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80074e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80074ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f0:	f1a3 0504 	sub.w	r5, r3, #4
 80074f4:	d4e5      	bmi.n	80074c2 <nl_func_relu_generic_array_f32+0x36>
 80074f6:	eef0 7a66 	vmov.f32	s15, s13
 80074fa:	e7eb      	b.n	80074d4 <nl_func_relu_generic_array_f32+0x48>
 80074fc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007504:	d01a      	beq.n	800753c <nl_func_relu_generic_array_f32+0xb0>
 8007506:	4294      	cmp	r4, r2
 8007508:	d816      	bhi.n	8007538 <nl_func_relu_generic_array_f32+0xac>
 800750a:	1d13      	adds	r3, r2, #4
 800750c:	1d02      	adds	r2, r0, #4
 800750e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007512:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800751a:	f1a3 0408 	sub.w	r4, r3, #8
 800751e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007522:	f1a3 0004 	sub.w	r0, r3, #4
 8007526:	ee66 6a86 	vmul.f32	s13, s13, s12
 800752a:	4623      	mov	r3, r4
 800752c:	d51e      	bpl.n	800756c <nl_func_relu_generic_array_f32+0xe0>
 800752e:	ed62 6a01 	vstmdb	r2!, {s13}
 8007532:	688b      	ldr	r3, [r1, #8]
 8007534:	42a3      	cmp	r3, r4
 8007536:	d91e      	bls.n	8007576 <nl_func_relu_generic_array_f32+0xea>
 8007538:	bc30      	pop	{r4, r5}
 800753a:	4770      	bx	lr
 800753c:	4294      	cmp	r4, r2
 800753e:	d8fb      	bhi.n	8007538 <nl_func_relu_generic_array_f32+0xac>
 8007540:	1d13      	adds	r3, r2, #4
 8007542:	2500      	movs	r5, #0
 8007544:	1d02      	adds	r2, r0, #4
 8007546:	ed53 7a01 	vldr	s15, [r3, #-4]
 800754a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800754e:	f1a3 0408 	sub.w	r4, r3, #8
 8007552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007556:	f1a3 0004 	sub.w	r0, r3, #4
 800755a:	4623      	mov	r3, r4
 800755c:	db0d      	blt.n	800757a <nl_func_relu_generic_array_f32+0xee>
 800755e:	ed62 7a01 	vstmdb	r2!, {s15}
 8007562:	688b      	ldr	r3, [r1, #8]
 8007564:	42a3      	cmp	r3, r4
 8007566:	d8e7      	bhi.n	8007538 <nl_func_relu_generic_array_f32+0xac>
 8007568:	4603      	mov	r3, r0
 800756a:	e7ec      	b.n	8007546 <nl_func_relu_generic_array_f32+0xba>
 800756c:	ed62 7a01 	vstmdb	r2!, {s15}
 8007570:	688c      	ldr	r4, [r1, #8]
 8007572:	429c      	cmp	r4, r3
 8007574:	d8e0      	bhi.n	8007538 <nl_func_relu_generic_array_f32+0xac>
 8007576:	4603      	mov	r3, r0
 8007578:	e7c9      	b.n	800750e <nl_func_relu_generic_array_f32+0x82>
 800757a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800757e:	688c      	ldr	r4, [r1, #8]
 8007580:	429c      	cmp	r4, r3
 8007582:	d8d9      	bhi.n	8007538 <nl_func_relu_generic_array_f32+0xac>
 8007584:	4603      	mov	r3, r0
 8007586:	e7de      	b.n	8007546 <nl_func_relu_generic_array_f32+0xba>

08007588 <forward_relu>:
 8007588:	6982      	ldr	r2, [r0, #24]
 800758a:	8813      	ldrh	r3, [r2, #0]
 800758c:	b333      	cbz	r3, 80075dc <forward_relu+0x54>
 800758e:	6852      	ldr	r2, [r2, #4]
 8007590:	6851      	ldr	r1, [r2, #4]
 8007592:	b101      	cbz	r1, 8007596 <forward_relu+0xe>
 8007594:	6809      	ldr	r1, [r1, #0]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d91d      	bls.n	80075d6 <forward_relu+0x4e>
 800759a:	b4f0      	push	{r4, r5, r6, r7}
 800759c:	6917      	ldr	r7, [r2, #16]
 800759e:	b107      	cbz	r7, 80075a2 <forward_relu+0x1a>
 80075a0:	683f      	ldr	r7, [r7, #0]
 80075a2:	688c      	ldr	r4, [r1, #8]
 80075a4:	69c3      	ldr	r3, [r0, #28]
 80075a6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d044      	beq.n	8007638 <forward_relu+0xb0>
 80075ae:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80075b2:	2d01      	cmp	r5, #1
 80075b4:	d014      	beq.n	80075e0 <forward_relu+0x58>
 80075b6:	2c00      	cmp	r4, #0
 80075b8:	d074      	beq.n	80076a4 <forward_relu+0x11c>
 80075ba:	68ce      	ldr	r6, [r1, #12]
 80075bc:	2201      	movs	r2, #1
 80075be:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80075c2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075c6:	42a6      	cmp	r6, r4
 80075c8:	fb05 f202 	mul.w	r2, r5, r2
 80075cc:	d1f9      	bne.n	80075c2 <forward_relu+0x3a>
 80075ce:	4638      	mov	r0, r7
 80075d0:	bcf0      	pop	{r4, r5, r6, r7}
 80075d2:	f7ff bf5b 	b.w	800748c <nl_func_relu_generic_array_f32>
 80075d6:	2300      	movs	r3, #0
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	deff      	udf	#255	; 0xff
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	deff      	udf	#255	; 0xff
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	6988      	ldr	r0, [r1, #24]
 80075e4:	6896      	ldr	r6, [r2, #8]
 80075e6:	ed93 7a00 	vldr	s14, [r3]
 80075ea:	6882      	ldr	r2, [r0, #8]
 80075ec:	b184      	cbz	r4, 8007610 <forward_relu+0x88>
 80075ee:	68cf      	ldr	r7, [r1, #12]
 80075f0:	462b      	mov	r3, r5
 80075f2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80075f6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80075fa:	42a7      	cmp	r7, r4
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	d1f9      	bne.n	80075f6 <forward_relu+0x6e>
 8007602:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007606:	3b01      	subs	r3, #1
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	18d2      	adds	r2, r2, r3
 800760c:	441e      	add	r6, r3
 800760e:	d23f      	bcs.n	8007690 <forward_relu+0x108>
 8007610:	1d13      	adds	r3, r2, #4
 8007612:	2500      	movs	r5, #0
 8007614:	1d32      	adds	r2, r6, #4
 8007616:	ed53 7a01 	vldr	s15, [r3, #-4]
 800761a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007622:	f1a3 0104 	sub.w	r1, r3, #4
 8007626:	d835      	bhi.n	8007694 <forward_relu+0x10c>
 8007628:	ed62 7a01 	vstmdb	r2!, {s15}
 800762c:	6884      	ldr	r4, [r0, #8]
 800762e:	3b08      	subs	r3, #8
 8007630:	429c      	cmp	r4, r3
 8007632:	d82d      	bhi.n	8007690 <forward_relu+0x108>
 8007634:	460b      	mov	r3, r1
 8007636:	e7ee      	b.n	8007616 <forward_relu+0x8e>
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	698d      	ldr	r5, [r1, #24]
 800763c:	6898      	ldr	r0, [r3, #8]
 800763e:	68ab      	ldr	r3, [r5, #8]
 8007640:	b184      	cbz	r4, 8007664 <forward_relu+0xdc>
 8007642:	68ce      	ldr	r6, [r1, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800764a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800764e:	42a6      	cmp	r6, r4
 8007650:	fb01 f202 	mul.w	r2, r1, r2
 8007654:	d1f9      	bne.n	800764a <forward_relu+0xc2>
 8007656:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800765a:	3a01      	subs	r2, #1
 800765c:	0092      	lsls	r2, r2, #2
 800765e:	189b      	adds	r3, r3, r2
 8007660:	4410      	add	r0, r2
 8007662:	d215      	bcs.n	8007690 <forward_relu+0x108>
 8007664:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80076a8 <forward_relu+0x120>
 8007668:	3304      	adds	r3, #4
 800766a:	1d01      	adds	r1, r0, #4
 800766c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007678:	bfb8      	it	lt
 800767a:	eef0 7a47 	vmovlt.f32	s15, s14
 800767e:	ed61 7a01 	vstmdb	r1!, {s15}
 8007682:	68a8      	ldr	r0, [r5, #8]
 8007684:	f1a3 0208 	sub.w	r2, r3, #8
 8007688:	4290      	cmp	r0, r2
 800768a:	f1a3 0304 	sub.w	r3, r3, #4
 800768e:	d9ed      	bls.n	800766c <forward_relu+0xe4>
 8007690:	bcf0      	pop	{r4, r5, r6, r7}
 8007692:	4770      	bx	lr
 8007694:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007698:	6884      	ldr	r4, [r0, #8]
 800769a:	3b08      	subs	r3, #8
 800769c:	429c      	cmp	r4, r3
 800769e:	d8f7      	bhi.n	8007690 <forward_relu+0x108>
 80076a0:	460b      	mov	r3, r1
 80076a2:	e7b8      	b.n	8007616 <forward_relu+0x8e>
 80076a4:	2201      	movs	r2, #1
 80076a6:	e792      	b.n	80075ce <forward_relu+0x46>
 80076a8:	00000000 	.word	0x00000000

080076ac <ai_check_custom_types>:
 80076ac:	4b13      	ldr	r3, [pc, #76]	; (80076fc <ai_check_custom_types+0x50>)
 80076ae:	b082      	sub	sp, #8
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	b118      	cbz	r0, 80076be <ai_check_custom_types+0x12>
 80076b6:	7803      	ldrb	r3, [r0, #0]
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d002      	beq.n	80076c2 <ai_check_custom_types+0x16>
 80076bc:	2000      	movs	r0, #0
 80076be:	b002      	add	sp, #8
 80076c0:	4770      	bx	lr
 80076c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d004      	beq.n	80076d4 <ai_check_custom_types+0x28>
 80076ca:	2001      	movs	r0, #1
 80076cc:	f080 0001 	eor.w	r0, r0, #1
 80076d0:	b002      	add	sp, #8
 80076d2:	4770      	bx	lr
 80076d4:	7842      	ldrb	r2, [r0, #1]
 80076d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80076da:	429a      	cmp	r2, r3
 80076dc:	f100 0001 	add.w	r0, r0, #1
 80076e0:	d1f3      	bne.n	80076ca <ai_check_custom_types+0x1e>
 80076e2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80076e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d1ed      	bne.n	80076ca <ai_check_custom_types+0x1e>
 80076ee:	7842      	ldrb	r2, [r0, #1]
 80076f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d1e8      	bne.n	80076ca <ai_check_custom_types+0x1e>
 80076f8:	2000      	movs	r0, #0
 80076fa:	e7e7      	b.n	80076cc <ai_check_custom_types+0x20>
 80076fc:	0800b374 	.word	0x0800b374

08007700 <ai_layers_init_all>:
 8007700:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007702:	b17a      	cbz	r2, 8007724 <ai_layers_init_all+0x24>
 8007704:	6913      	ldr	r3, [r2, #16]
 8007706:	60d0      	str	r0, [r2, #12]
 8007708:	429a      	cmp	r2, r3
 800770a:	f04f 0201 	mov.w	r2, #1
 800770e:	d009      	beq.n	8007724 <ai_layers_init_all+0x24>
 8007710:	b143      	cbz	r3, 8007724 <ai_layers_init_all+0x24>
 8007712:	6919      	ldr	r1, [r3, #16]
 8007714:	60d8      	str	r0, [r3, #12]
 8007716:	4299      	cmp	r1, r3
 8007718:	f102 0201 	add.w	r2, r2, #1
 800771c:	d002      	beq.n	8007724 <ai_layers_init_all+0x24>
 800771e:	460b      	mov	r3, r1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1f6      	bne.n	8007712 <ai_layers_init_all+0x12>
 8007724:	4610      	mov	r0, r2
 8007726:	4770      	bx	lr

08007728 <ai_layers_post_init_all>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800772c:	b18c      	cbz	r4, 8007752 <ai_layers_post_init_all+0x2a>
 800772e:	2500      	movs	r5, #0
 8007730:	6863      	ldr	r3, [r4, #4]
 8007732:	f013 0f01 	tst.w	r3, #1
 8007736:	4620      	mov	r0, r4
 8007738:	d003      	beq.n	8007742 <ai_layers_post_init_all+0x1a>
 800773a:	6a23      	ldr	r3, [r4, #32]
 800773c:	b10b      	cbz	r3, 8007742 <ai_layers_post_init_all+0x1a>
 800773e:	4798      	blx	r3
 8007740:	3501      	adds	r5, #1
 8007742:	6923      	ldr	r3, [r4, #16]
 8007744:	42a3      	cmp	r3, r4
 8007746:	d002      	beq.n	800774e <ai_layers_post_init_all+0x26>
 8007748:	461c      	mov	r4, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <ai_layers_post_init_all+0x8>
 800774e:	4628      	mov	r0, r5
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	4625      	mov	r5, r4
 8007754:	e7fb      	b.n	800774e <ai_layers_post_init_all+0x26>
 8007756:	bf00      	nop

08007758 <ai_layers_forward_all>:
 8007758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800775e:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8007760:	4604      	mov	r4, r0
 8007762:	2f00      	cmp	r7, #0
 8007764:	d02c      	beq.n	80077c0 <ai_layers_forward_all+0x68>
 8007766:	2d00      	cmp	r5, #0
 8007768:	d03f      	beq.n	80077ea <ai_layers_forward_all+0x92>
 800776a:	6545      	str	r5, [r0, #84]	; 0x54
 800776c:	4629      	mov	r1, r5
 800776e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007770:	2001      	movs	r0, #1
 8007772:	47b8      	blx	r7
 8007774:	2600      	movs	r6, #0
 8007776:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007778:	46b0      	mov	r8, r6
 800777a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800777c:	2002      	movs	r0, #2
 800777e:	47b8      	blx	r7
 8007780:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8007782:	696b      	ldr	r3, [r5, #20]
 8007784:	4628      	mov	r0, r5
 8007786:	4798      	blx	r3
 8007788:	692b      	ldr	r3, [r5, #16]
 800778a:	429d      	cmp	r5, r3
 800778c:	f04f 0003 	mov.w	r0, #3
 8007790:	4619      	mov	r1, r3
 8007792:	d009      	beq.n	80077a8 <ai_layers_forward_all+0x50>
 8007794:	6563      	str	r3, [r4, #84]	; 0x54
 8007796:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007798:	47b8      	blx	r7
 800779a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800779c:	3601      	adds	r6, #1
 800779e:	2900      	cmp	r1, #0
 80077a0:	d1eb      	bne.n	800777a <ai_layers_forward_all+0x22>
 80077a2:	4630      	mov	r0, r6
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a8:	2100      	movs	r1, #0
 80077aa:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 80077ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80077b0:	47b8      	blx	r7
 80077b2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80077b4:	3601      	adds	r6, #1
 80077b6:	2900      	cmp	r1, #0
 80077b8:	d1df      	bne.n	800777a <ai_layers_forward_all+0x22>
 80077ba:	4630      	mov	r0, r6
 80077bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c0:	b19d      	cbz	r5, 80077ea <ai_layers_forward_all+0x92>
 80077c2:	6545      	str	r5, [r0, #84]	; 0x54
 80077c4:	463e      	mov	r6, r7
 80077c6:	696b      	ldr	r3, [r5, #20]
 80077c8:	4628      	mov	r0, r5
 80077ca:	4798      	blx	r3
 80077cc:	692b      	ldr	r3, [r5, #16]
 80077ce:	42ab      	cmp	r3, r5
 80077d0:	f106 0601 	add.w	r6, r6, #1
 80077d4:	d004      	beq.n	80077e0 <ai_layers_forward_all+0x88>
 80077d6:	6563      	str	r3, [r4, #84]	; 0x54
 80077d8:	461d      	mov	r5, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f3      	bne.n	80077c6 <ai_layers_forward_all+0x6e>
 80077de:	e7e0      	b.n	80077a2 <ai_layers_forward_all+0x4a>
 80077e0:	2300      	movs	r3, #0
 80077e2:	6563      	str	r3, [r4, #84]	; 0x54
 80077e4:	4630      	mov	r0, r6
 80077e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ea:	462e      	mov	r6, r5
 80077ec:	4630      	mov	r0, r6
 80077ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f2:	bf00      	nop

080077f4 <ai_layers_destroy_all>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80077f8:	b18c      	cbz	r4, 800781e <ai_layers_destroy_all+0x2a>
 80077fa:	2500      	movs	r5, #0
 80077fc:	6863      	ldr	r3, [r4, #4]
 80077fe:	f013 0f04 	tst.w	r3, #4
 8007802:	4620      	mov	r0, r4
 8007804:	d003      	beq.n	800780e <ai_layers_destroy_all+0x1a>
 8007806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007808:	b10b      	cbz	r3, 800780e <ai_layers_destroy_all+0x1a>
 800780a:	4798      	blx	r3
 800780c:	3501      	adds	r5, #1
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	42a3      	cmp	r3, r4
 8007812:	d002      	beq.n	800781a <ai_layers_destroy_all+0x26>
 8007814:	461c      	mov	r4, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f0      	bne.n	80077fc <ai_layers_destroy_all+0x8>
 800781a:	4628      	mov	r0, r5
 800781c:	bd38      	pop	{r3, r4, r5, pc}
 800781e:	4625      	mov	r5, r4
 8007820:	e7fb      	b.n	800781a <ai_layers_destroy_all+0x26>
 8007822:	bf00      	nop

08007824 <ai_array_to_buffer_fmt>:
 8007824:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007828:	2b02      	cmp	r3, #2
 800782a:	d02e      	beq.n	800788a <ai_array_to_buffer_fmt+0x66>
 800782c:	4a1b      	ldr	r2, [pc, #108]	; (800789c <ai_array_to_buffer_fmt+0x78>)
 800782e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8007832:	4293      	cmp	r3, r2
 8007834:	d00e      	beq.n	8007854 <ai_array_to_buffer_fmt+0x30>
 8007836:	dd11      	ble.n	800785c <ai_array_to_buffer_fmt+0x38>
 8007838:	4a19      	ldr	r2, [pc, #100]	; (80078a0 <ai_array_to_buffer_fmt+0x7c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00a      	beq.n	8007854 <ai_array_to_buffer_fmt+0x30>
 800783e:	dd18      	ble.n	8007872 <ai_array_to_buffer_fmt+0x4e>
 8007840:	4a18      	ldr	r2, [pc, #96]	; (80078a4 <ai_array_to_buffer_fmt+0x80>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d006      	beq.n	8007854 <ai_array_to_buffer_fmt+0x30>
 8007846:	4a18      	ldr	r2, [pc, #96]	; (80078a8 <ai_array_to_buffer_fmt+0x84>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <ai_array_to_buffer_fmt+0x30>
 800784c:	4a17      	ldr	r2, [pc, #92]	; (80078ac <ai_array_to_buffer_fmt+0x88>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d000      	beq.n	8007854 <ai_array_to_buffer_fmt+0x30>
 8007852:	2340      	movs	r3, #64	; 0x40
 8007854:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007858:	4318      	orrs	r0, r3
 800785a:	4770      	bx	lr
 800785c:	4a14      	ldr	r2, [pc, #80]	; (80078b0 <ai_array_to_buffer_fmt+0x8c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d0f8      	beq.n	8007854 <ai_array_to_buffer_fmt+0x30>
 8007862:	dd06      	ble.n	8007872 <ai_array_to_buffer_fmt+0x4e>
 8007864:	4a13      	ldr	r2, [pc, #76]	; (80078b4 <ai_array_to_buffer_fmt+0x90>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d0f4      	beq.n	8007854 <ai_array_to_buffer_fmt+0x30>
 800786a:	320f      	adds	r2, #15
 800786c:	4293      	cmp	r3, r2
 800786e:	d0f1      	beq.n	8007854 <ai_array_to_buffer_fmt+0x30>
 8007870:	e7ef      	b.n	8007852 <ai_array_to_buffer_fmt+0x2e>
 8007872:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8007876:	4293      	cmp	r3, r2
 8007878:	d0ec      	beq.n	8007854 <ai_array_to_buffer_fmt+0x30>
 800787a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800787e:	4293      	cmp	r3, r2
 8007880:	d1e7      	bne.n	8007852 <ai_array_to_buffer_fmt+0x2e>
 8007882:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007886:	4318      	orrs	r0, r3
 8007888:	4770      	bx	lr
 800788a:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <ai_array_to_buffer_fmt+0x94>)
 800788c:	4003      	ands	r3, r0
 800788e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007892:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007896:	4318      	orrs	r0, r3
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	00060440 	.word	0x00060440
 80078a0:	00840447 	.word	0x00840447
 80078a4:	0084084f 	.word	0x0084084f
 80078a8:	01821040 	.word	0x01821040
 80078ac:	00840840 	.word	0x00840840
 80078b0:	00040447 	.word	0x00040447
 80078b4:	00040840 	.word	0x00040840
 80078b8:	00803fff 	.word	0x00803fff

080078bc <ai_array_get_byte_size>:
 80078bc:	b1c1      	cbz	r1, 80078f0 <ai_array_get_byte_size+0x34>
 80078be:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80078c2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80078c6:	4413      	add	r3, r2
 80078c8:	fb01 f103 	mul.w	r1, r1, r3
 80078cc:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80078d0:	3107      	adds	r1, #7
 80078d2:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80078d6:	f021 0107 	bic.w	r1, r1, #7
 80078da:	2804      	cmp	r0, #4
 80078dc:	fa21 f102 	lsr.w	r1, r1, r2
 80078e0:	d008      	beq.n	80078f4 <ai_array_get_byte_size+0x38>
 80078e2:	2808      	cmp	r0, #8
 80078e4:	d101      	bne.n	80078ea <ai_array_get_byte_size+0x2e>
 80078e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80078ea:	3107      	adds	r1, #7
 80078ec:	08c8      	lsrs	r0, r1, #3
 80078ee:	4770      	bx	lr
 80078f0:	4608      	mov	r0, r1
 80078f2:	4770      	bx	lr
 80078f4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80078f8:	3107      	adds	r1, #7
 80078fa:	08c8      	lsrs	r0, r1, #3
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop

08007900 <calloc>:
 8007900:	4b02      	ldr	r3, [pc, #8]	; (800790c <calloc+0xc>)
 8007902:	460a      	mov	r2, r1
 8007904:	4601      	mov	r1, r0
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	f000 b852 	b.w	80079b0 <_calloc_r>
 800790c:	20000ed0 	.word	0x20000ed0

08007910 <__errno>:
 8007910:	4b01      	ldr	r3, [pc, #4]	; (8007918 <__errno+0x8>)
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	20000ed0 	.word	0x20000ed0

0800791c <__libc_init_array>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4d0d      	ldr	r5, [pc, #52]	; (8007954 <__libc_init_array+0x38>)
 8007920:	4c0d      	ldr	r4, [pc, #52]	; (8007958 <__libc_init_array+0x3c>)
 8007922:	1b64      	subs	r4, r4, r5
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	2600      	movs	r6, #0
 8007928:	42a6      	cmp	r6, r4
 800792a:	d109      	bne.n	8007940 <__libc_init_array+0x24>
 800792c:	4d0b      	ldr	r5, [pc, #44]	; (800795c <__libc_init_array+0x40>)
 800792e:	4c0c      	ldr	r4, [pc, #48]	; (8007960 <__libc_init_array+0x44>)
 8007930:	f003 fb7c 	bl	800b02c <_init>
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	2600      	movs	r6, #0
 800793a:	42a6      	cmp	r6, r4
 800793c:	d105      	bne.n	800794a <__libc_init_array+0x2e>
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	f855 3b04 	ldr.w	r3, [r5], #4
 8007944:	4798      	blx	r3
 8007946:	3601      	adds	r6, #1
 8007948:	e7ee      	b.n	8007928 <__libc_init_array+0xc>
 800794a:	f855 3b04 	ldr.w	r3, [r5], #4
 800794e:	4798      	blx	r3
 8007950:	3601      	adds	r6, #1
 8007952:	e7f2      	b.n	800793a <__libc_init_array+0x1e>
 8007954:	08066be8 	.word	0x08066be8
 8007958:	08066be8 	.word	0x08066be8
 800795c:	08066be8 	.word	0x08066be8
 8007960:	08066bec 	.word	0x08066bec

08007964 <malloc>:
 8007964:	4b02      	ldr	r3, [pc, #8]	; (8007970 <malloc+0xc>)
 8007966:	4601      	mov	r1, r0
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	f000 b881 	b.w	8007a70 <_malloc_r>
 800796e:	bf00      	nop
 8007970:	20000ed0 	.word	0x20000ed0

08007974 <free>:
 8007974:	4b02      	ldr	r3, [pc, #8]	; (8007980 <free+0xc>)
 8007976:	4601      	mov	r1, r0
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f000 b829 	b.w	80079d0 <_free_r>
 800797e:	bf00      	nop
 8007980:	20000ed0 	.word	0x20000ed0

08007984 <memcpy>:
 8007984:	440a      	add	r2, r1
 8007986:	4291      	cmp	r1, r2
 8007988:	f100 33ff 	add.w	r3, r0, #4294967295
 800798c:	d100      	bne.n	8007990 <memcpy+0xc>
 800798e:	4770      	bx	lr
 8007990:	b510      	push	{r4, lr}
 8007992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799a:	4291      	cmp	r1, r2
 800799c:	d1f9      	bne.n	8007992 <memcpy+0xe>
 800799e:	bd10      	pop	{r4, pc}

080079a0 <memset>:
 80079a0:	4402      	add	r2, r0
 80079a2:	4603      	mov	r3, r0
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d100      	bne.n	80079aa <memset+0xa>
 80079a8:	4770      	bx	lr
 80079aa:	f803 1b01 	strb.w	r1, [r3], #1
 80079ae:	e7f9      	b.n	80079a4 <memset+0x4>

080079b0 <_calloc_r>:
 80079b0:	b513      	push	{r0, r1, r4, lr}
 80079b2:	434a      	muls	r2, r1
 80079b4:	4611      	mov	r1, r2
 80079b6:	9201      	str	r2, [sp, #4]
 80079b8:	f000 f85a 	bl	8007a70 <_malloc_r>
 80079bc:	4604      	mov	r4, r0
 80079be:	b118      	cbz	r0, 80079c8 <_calloc_r+0x18>
 80079c0:	9a01      	ldr	r2, [sp, #4]
 80079c2:	2100      	movs	r1, #0
 80079c4:	f7ff ffec 	bl	80079a0 <memset>
 80079c8:	4620      	mov	r0, r4
 80079ca:	b002      	add	sp, #8
 80079cc:	bd10      	pop	{r4, pc}
	...

080079d0 <_free_r>:
 80079d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079d2:	2900      	cmp	r1, #0
 80079d4:	d048      	beq.n	8007a68 <_free_r+0x98>
 80079d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079da:	9001      	str	r0, [sp, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f1a1 0404 	sub.w	r4, r1, #4
 80079e2:	bfb8      	it	lt
 80079e4:	18e4      	addlt	r4, r4, r3
 80079e6:	f001 ff2b 	bl	8009840 <__malloc_lock>
 80079ea:	4a20      	ldr	r2, [pc, #128]	; (8007a6c <_free_r+0x9c>)
 80079ec:	9801      	ldr	r0, [sp, #4]
 80079ee:	6813      	ldr	r3, [r2, #0]
 80079f0:	4615      	mov	r5, r2
 80079f2:	b933      	cbnz	r3, 8007a02 <_free_r+0x32>
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	6014      	str	r4, [r2, #0]
 80079f8:	b003      	add	sp, #12
 80079fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079fe:	f001 bf25 	b.w	800984c <__malloc_unlock>
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	d90b      	bls.n	8007a1e <_free_r+0x4e>
 8007a06:	6821      	ldr	r1, [r4, #0]
 8007a08:	1862      	adds	r2, r4, r1
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bf04      	itt	eq
 8007a0e:	681a      	ldreq	r2, [r3, #0]
 8007a10:	685b      	ldreq	r3, [r3, #4]
 8007a12:	6063      	str	r3, [r4, #4]
 8007a14:	bf04      	itt	eq
 8007a16:	1852      	addeq	r2, r2, r1
 8007a18:	6022      	streq	r2, [r4, #0]
 8007a1a:	602c      	str	r4, [r5, #0]
 8007a1c:	e7ec      	b.n	80079f8 <_free_r+0x28>
 8007a1e:	461a      	mov	r2, r3
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b10b      	cbz	r3, 8007a28 <_free_r+0x58>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d9fa      	bls.n	8007a1e <_free_r+0x4e>
 8007a28:	6811      	ldr	r1, [r2, #0]
 8007a2a:	1855      	adds	r5, r2, r1
 8007a2c:	42a5      	cmp	r5, r4
 8007a2e:	d10b      	bne.n	8007a48 <_free_r+0x78>
 8007a30:	6824      	ldr	r4, [r4, #0]
 8007a32:	4421      	add	r1, r4
 8007a34:	1854      	adds	r4, r2, r1
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	d1dd      	bne.n	80079f8 <_free_r+0x28>
 8007a3c:	681c      	ldr	r4, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	6053      	str	r3, [r2, #4]
 8007a42:	4421      	add	r1, r4
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	e7d7      	b.n	80079f8 <_free_r+0x28>
 8007a48:	d902      	bls.n	8007a50 <_free_r+0x80>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	e7d3      	b.n	80079f8 <_free_r+0x28>
 8007a50:	6825      	ldr	r5, [r4, #0]
 8007a52:	1961      	adds	r1, r4, r5
 8007a54:	428b      	cmp	r3, r1
 8007a56:	bf04      	itt	eq
 8007a58:	6819      	ldreq	r1, [r3, #0]
 8007a5a:	685b      	ldreq	r3, [r3, #4]
 8007a5c:	6063      	str	r3, [r4, #4]
 8007a5e:	bf04      	itt	eq
 8007a60:	1949      	addeq	r1, r1, r5
 8007a62:	6021      	streq	r1, [r4, #0]
 8007a64:	6054      	str	r4, [r2, #4]
 8007a66:	e7c7      	b.n	80079f8 <_free_r+0x28>
 8007a68:	b003      	add	sp, #12
 8007a6a:	bd30      	pop	{r4, r5, pc}
 8007a6c:	200015c8 	.word	0x200015c8

08007a70 <_malloc_r>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	1ccd      	adds	r5, r1, #3
 8007a74:	f025 0503 	bic.w	r5, r5, #3
 8007a78:	3508      	adds	r5, #8
 8007a7a:	2d0c      	cmp	r5, #12
 8007a7c:	bf38      	it	cc
 8007a7e:	250c      	movcc	r5, #12
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	4606      	mov	r6, r0
 8007a84:	db01      	blt.n	8007a8a <_malloc_r+0x1a>
 8007a86:	42a9      	cmp	r1, r5
 8007a88:	d903      	bls.n	8007a92 <_malloc_r+0x22>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	6033      	str	r3, [r6, #0]
 8007a8e:	2000      	movs	r0, #0
 8007a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a92:	f001 fed5 	bl	8009840 <__malloc_lock>
 8007a96:	4921      	ldr	r1, [pc, #132]	; (8007b1c <_malloc_r+0xac>)
 8007a98:	680a      	ldr	r2, [r1, #0]
 8007a9a:	4614      	mov	r4, r2
 8007a9c:	b99c      	cbnz	r4, 8007ac6 <_malloc_r+0x56>
 8007a9e:	4f20      	ldr	r7, [pc, #128]	; (8007b20 <_malloc_r+0xb0>)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	b923      	cbnz	r3, 8007aae <_malloc_r+0x3e>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f000 fd3c 	bl	8008524 <_sbrk_r>
 8007aac:	6038      	str	r0, [r7, #0]
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f000 fd37 	bl	8008524 <_sbrk_r>
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	d123      	bne.n	8007b02 <_malloc_r+0x92>
 8007aba:	230c      	movs	r3, #12
 8007abc:	6033      	str	r3, [r6, #0]
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f001 fec4 	bl	800984c <__malloc_unlock>
 8007ac4:	e7e3      	b.n	8007a8e <_malloc_r+0x1e>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	1b5b      	subs	r3, r3, r5
 8007aca:	d417      	bmi.n	8007afc <_malloc_r+0x8c>
 8007acc:	2b0b      	cmp	r3, #11
 8007ace:	d903      	bls.n	8007ad8 <_malloc_r+0x68>
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	441c      	add	r4, r3
 8007ad4:	6025      	str	r5, [r4, #0]
 8007ad6:	e004      	b.n	8007ae2 <_malloc_r+0x72>
 8007ad8:	6863      	ldr	r3, [r4, #4]
 8007ada:	42a2      	cmp	r2, r4
 8007adc:	bf0c      	ite	eq
 8007ade:	600b      	streq	r3, [r1, #0]
 8007ae0:	6053      	strne	r3, [r2, #4]
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f001 feb2 	bl	800984c <__malloc_unlock>
 8007ae8:	f104 000b 	add.w	r0, r4, #11
 8007aec:	1d23      	adds	r3, r4, #4
 8007aee:	f020 0007 	bic.w	r0, r0, #7
 8007af2:	1ac2      	subs	r2, r0, r3
 8007af4:	d0cc      	beq.n	8007a90 <_malloc_r+0x20>
 8007af6:	1a1b      	subs	r3, r3, r0
 8007af8:	50a3      	str	r3, [r4, r2]
 8007afa:	e7c9      	b.n	8007a90 <_malloc_r+0x20>
 8007afc:	4622      	mov	r2, r4
 8007afe:	6864      	ldr	r4, [r4, #4]
 8007b00:	e7cc      	b.n	8007a9c <_malloc_r+0x2c>
 8007b02:	1cc4      	adds	r4, r0, #3
 8007b04:	f024 0403 	bic.w	r4, r4, #3
 8007b08:	42a0      	cmp	r0, r4
 8007b0a:	d0e3      	beq.n	8007ad4 <_malloc_r+0x64>
 8007b0c:	1a21      	subs	r1, r4, r0
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f000 fd08 	bl	8008524 <_sbrk_r>
 8007b14:	3001      	adds	r0, #1
 8007b16:	d1dd      	bne.n	8007ad4 <_malloc_r+0x64>
 8007b18:	e7cf      	b.n	8007aba <_malloc_r+0x4a>
 8007b1a:	bf00      	nop
 8007b1c:	200015c8 	.word	0x200015c8
 8007b20:	200015cc 	.word	0x200015cc

08007b24 <__cvt>:
 8007b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	ec55 4b10 	vmov	r4, r5, d0
 8007b2c:	2d00      	cmp	r5, #0
 8007b2e:	460e      	mov	r6, r1
 8007b30:	4619      	mov	r1, r3
 8007b32:	462b      	mov	r3, r5
 8007b34:	bfbb      	ittet	lt
 8007b36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b3a:	461d      	movlt	r5, r3
 8007b3c:	2300      	movge	r3, #0
 8007b3e:	232d      	movlt	r3, #45	; 0x2d
 8007b40:	700b      	strb	r3, [r1, #0]
 8007b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b48:	4691      	mov	r9, r2
 8007b4a:	f023 0820 	bic.w	r8, r3, #32
 8007b4e:	bfbc      	itt	lt
 8007b50:	4622      	movlt	r2, r4
 8007b52:	4614      	movlt	r4, r2
 8007b54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b58:	d005      	beq.n	8007b66 <__cvt+0x42>
 8007b5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b5e:	d100      	bne.n	8007b62 <__cvt+0x3e>
 8007b60:	3601      	adds	r6, #1
 8007b62:	2102      	movs	r1, #2
 8007b64:	e000      	b.n	8007b68 <__cvt+0x44>
 8007b66:	2103      	movs	r1, #3
 8007b68:	ab03      	add	r3, sp, #12
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	ab02      	add	r3, sp, #8
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	ec45 4b10 	vmov	d0, r4, r5
 8007b74:	4653      	mov	r3, sl
 8007b76:	4632      	mov	r2, r6
 8007b78:	f000 fe52 	bl	8008820 <_dtoa_r>
 8007b7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b80:	4607      	mov	r7, r0
 8007b82:	d102      	bne.n	8007b8a <__cvt+0x66>
 8007b84:	f019 0f01 	tst.w	r9, #1
 8007b88:	d022      	beq.n	8007bd0 <__cvt+0xac>
 8007b8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b8e:	eb07 0906 	add.w	r9, r7, r6
 8007b92:	d110      	bne.n	8007bb6 <__cvt+0x92>
 8007b94:	783b      	ldrb	r3, [r7, #0]
 8007b96:	2b30      	cmp	r3, #48	; 0x30
 8007b98:	d10a      	bne.n	8007bb0 <__cvt+0x8c>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 ff99 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ba6:	b918      	cbnz	r0, 8007bb0 <__cvt+0x8c>
 8007ba8:	f1c6 0601 	rsb	r6, r6, #1
 8007bac:	f8ca 6000 	str.w	r6, [sl]
 8007bb0:	f8da 3000 	ldr.w	r3, [sl]
 8007bb4:	4499      	add	r9, r3
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4620      	mov	r0, r4
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	f7f8 ff8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bc2:	b108      	cbz	r0, 8007bc8 <__cvt+0xa4>
 8007bc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bc8:	2230      	movs	r2, #48	; 0x30
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	454b      	cmp	r3, r9
 8007bce:	d307      	bcc.n	8007be0 <__cvt+0xbc>
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bd4:	1bdb      	subs	r3, r3, r7
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	b004      	add	sp, #16
 8007bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be0:	1c59      	adds	r1, r3, #1
 8007be2:	9103      	str	r1, [sp, #12]
 8007be4:	701a      	strb	r2, [r3, #0]
 8007be6:	e7f0      	b.n	8007bca <__cvt+0xa6>

08007be8 <__exponent>:
 8007be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bea:	4603      	mov	r3, r0
 8007bec:	2900      	cmp	r1, #0
 8007bee:	bfb8      	it	lt
 8007bf0:	4249      	neglt	r1, r1
 8007bf2:	f803 2b02 	strb.w	r2, [r3], #2
 8007bf6:	bfb4      	ite	lt
 8007bf8:	222d      	movlt	r2, #45	; 0x2d
 8007bfa:	222b      	movge	r2, #43	; 0x2b
 8007bfc:	2909      	cmp	r1, #9
 8007bfe:	7042      	strb	r2, [r0, #1]
 8007c00:	dd2a      	ble.n	8007c58 <__exponent+0x70>
 8007c02:	f10d 0407 	add.w	r4, sp, #7
 8007c06:	46a4      	mov	ip, r4
 8007c08:	270a      	movs	r7, #10
 8007c0a:	46a6      	mov	lr, r4
 8007c0c:	460a      	mov	r2, r1
 8007c0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c12:	fb07 1516 	mls	r5, r7, r6, r1
 8007c16:	3530      	adds	r5, #48	; 0x30
 8007c18:	2a63      	cmp	r2, #99	; 0x63
 8007c1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c22:	4631      	mov	r1, r6
 8007c24:	dcf1      	bgt.n	8007c0a <__exponent+0x22>
 8007c26:	3130      	adds	r1, #48	; 0x30
 8007c28:	f1ae 0502 	sub.w	r5, lr, #2
 8007c2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c30:	1c44      	adds	r4, r0, #1
 8007c32:	4629      	mov	r1, r5
 8007c34:	4561      	cmp	r1, ip
 8007c36:	d30a      	bcc.n	8007c4e <__exponent+0x66>
 8007c38:	f10d 0209 	add.w	r2, sp, #9
 8007c3c:	eba2 020e 	sub.w	r2, r2, lr
 8007c40:	4565      	cmp	r5, ip
 8007c42:	bf88      	it	hi
 8007c44:	2200      	movhi	r2, #0
 8007c46:	4413      	add	r3, r2
 8007c48:	1a18      	subs	r0, r3, r0
 8007c4a:	b003      	add	sp, #12
 8007c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c56:	e7ed      	b.n	8007c34 <__exponent+0x4c>
 8007c58:	2330      	movs	r3, #48	; 0x30
 8007c5a:	3130      	adds	r1, #48	; 0x30
 8007c5c:	7083      	strb	r3, [r0, #2]
 8007c5e:	70c1      	strb	r1, [r0, #3]
 8007c60:	1d03      	adds	r3, r0, #4
 8007c62:	e7f1      	b.n	8007c48 <__exponent+0x60>

08007c64 <_printf_float>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	ed2d 8b02 	vpush	{d8}
 8007c6c:	b08d      	sub	sp, #52	; 0x34
 8007c6e:	460c      	mov	r4, r1
 8007c70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c74:	4616      	mov	r6, r2
 8007c76:	461f      	mov	r7, r3
 8007c78:	4605      	mov	r5, r0
 8007c7a:	f001 fd75 	bl	8009768 <_localeconv_r>
 8007c7e:	f8d0 a000 	ldr.w	sl, [r0]
 8007c82:	4650      	mov	r0, sl
 8007c84:	f7f8 faac 	bl	80001e0 <strlen>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	9305      	str	r3, [sp, #20]
 8007c90:	f8d8 3000 	ldr.w	r3, [r8]
 8007c94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c98:	3307      	adds	r3, #7
 8007c9a:	f023 0307 	bic.w	r3, r3, #7
 8007c9e:	f103 0208 	add.w	r2, r3, #8
 8007ca2:	f8c8 2000 	str.w	r2, [r8]
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cb6:	9307      	str	r3, [sp, #28]
 8007cb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cbc:	ee08 0a10 	vmov	s16, r0
 8007cc0:	4b9f      	ldr	r3, [pc, #636]	; (8007f40 <_printf_float+0x2dc>)
 8007cc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cca:	f7f8 ff37 	bl	8000b3c <__aeabi_dcmpun>
 8007cce:	bb88      	cbnz	r0, 8007d34 <_printf_float+0xd0>
 8007cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cd4:	4b9a      	ldr	r3, [pc, #616]	; (8007f40 <_printf_float+0x2dc>)
 8007cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cda:	f7f8 ff11 	bl	8000b00 <__aeabi_dcmple>
 8007cde:	bb48      	cbnz	r0, 8007d34 <_printf_float+0xd0>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	f7f8 ff00 	bl	8000aec <__aeabi_dcmplt>
 8007cec:	b110      	cbz	r0, 8007cf4 <_printf_float+0x90>
 8007cee:	232d      	movs	r3, #45	; 0x2d
 8007cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf4:	4b93      	ldr	r3, [pc, #588]	; (8007f44 <_printf_float+0x2e0>)
 8007cf6:	4894      	ldr	r0, [pc, #592]	; (8007f48 <_printf_float+0x2e4>)
 8007cf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cfc:	bf94      	ite	ls
 8007cfe:	4698      	movls	r8, r3
 8007d00:	4680      	movhi	r8, r0
 8007d02:	2303      	movs	r3, #3
 8007d04:	6123      	str	r3, [r4, #16]
 8007d06:	9b05      	ldr	r3, [sp, #20]
 8007d08:	f023 0204 	bic.w	r2, r3, #4
 8007d0c:	6022      	str	r2, [r4, #0]
 8007d0e:	f04f 0900 	mov.w	r9, #0
 8007d12:	9700      	str	r7, [sp, #0]
 8007d14:	4633      	mov	r3, r6
 8007d16:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f000 f9d8 	bl	80080d0 <_printf_common>
 8007d20:	3001      	adds	r0, #1
 8007d22:	f040 8090 	bne.w	8007e46 <_printf_float+0x1e2>
 8007d26:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2a:	b00d      	add	sp, #52	; 0x34
 8007d2c:	ecbd 8b02 	vpop	{d8}
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	4642      	mov	r2, r8
 8007d36:	464b      	mov	r3, r9
 8007d38:	4640      	mov	r0, r8
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	f7f8 fefe 	bl	8000b3c <__aeabi_dcmpun>
 8007d40:	b140      	cbz	r0, 8007d54 <_printf_float+0xf0>
 8007d42:	464b      	mov	r3, r9
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bfbc      	itt	lt
 8007d48:	232d      	movlt	r3, #45	; 0x2d
 8007d4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d4e:	487f      	ldr	r0, [pc, #508]	; (8007f4c <_printf_float+0x2e8>)
 8007d50:	4b7f      	ldr	r3, [pc, #508]	; (8007f50 <_printf_float+0x2ec>)
 8007d52:	e7d1      	b.n	8007cf8 <_printf_float+0x94>
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d5a:	9206      	str	r2, [sp, #24]
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	d13f      	bne.n	8007de0 <_printf_float+0x17c>
 8007d60:	2306      	movs	r3, #6
 8007d62:	6063      	str	r3, [r4, #4]
 8007d64:	9b05      	ldr	r3, [sp, #20]
 8007d66:	6861      	ldr	r1, [r4, #4]
 8007d68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9303      	str	r3, [sp, #12]
 8007d70:	ab0a      	add	r3, sp, #40	; 0x28
 8007d72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d76:	ab09      	add	r3, sp, #36	; 0x24
 8007d78:	ec49 8b10 	vmov	d0, r8, r9
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	6022      	str	r2, [r4, #0]
 8007d80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d84:	4628      	mov	r0, r5
 8007d86:	f7ff fecd 	bl	8007b24 <__cvt>
 8007d8a:	9b06      	ldr	r3, [sp, #24]
 8007d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d8e:	2b47      	cmp	r3, #71	; 0x47
 8007d90:	4680      	mov	r8, r0
 8007d92:	d108      	bne.n	8007da6 <_printf_float+0x142>
 8007d94:	1cc8      	adds	r0, r1, #3
 8007d96:	db02      	blt.n	8007d9e <_printf_float+0x13a>
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	4299      	cmp	r1, r3
 8007d9c:	dd41      	ble.n	8007e22 <_printf_float+0x1be>
 8007d9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007da2:	fa5f fb8b 	uxtb.w	fp, fp
 8007da6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007daa:	d820      	bhi.n	8007dee <_printf_float+0x18a>
 8007dac:	3901      	subs	r1, #1
 8007dae:	465a      	mov	r2, fp
 8007db0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007db4:	9109      	str	r1, [sp, #36]	; 0x24
 8007db6:	f7ff ff17 	bl	8007be8 <__exponent>
 8007dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dbc:	1813      	adds	r3, r2, r0
 8007dbe:	2a01      	cmp	r2, #1
 8007dc0:	4681      	mov	r9, r0
 8007dc2:	6123      	str	r3, [r4, #16]
 8007dc4:	dc02      	bgt.n	8007dcc <_printf_float+0x168>
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	07d2      	lsls	r2, r2, #31
 8007dca:	d501      	bpl.n	8007dd0 <_printf_float+0x16c>
 8007dcc:	3301      	adds	r3, #1
 8007dce:	6123      	str	r3, [r4, #16]
 8007dd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d09c      	beq.n	8007d12 <_printf_float+0xae>
 8007dd8:	232d      	movs	r3, #45	; 0x2d
 8007dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dde:	e798      	b.n	8007d12 <_printf_float+0xae>
 8007de0:	9a06      	ldr	r2, [sp, #24]
 8007de2:	2a47      	cmp	r2, #71	; 0x47
 8007de4:	d1be      	bne.n	8007d64 <_printf_float+0x100>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1bc      	bne.n	8007d64 <_printf_float+0x100>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e7b9      	b.n	8007d62 <_printf_float+0xfe>
 8007dee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007df2:	d118      	bne.n	8007e26 <_printf_float+0x1c2>
 8007df4:	2900      	cmp	r1, #0
 8007df6:	6863      	ldr	r3, [r4, #4]
 8007df8:	dd0b      	ble.n	8007e12 <_printf_float+0x1ae>
 8007dfa:	6121      	str	r1, [r4, #16]
 8007dfc:	b913      	cbnz	r3, 8007e04 <_printf_float+0x1a0>
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	07d0      	lsls	r0, r2, #31
 8007e02:	d502      	bpl.n	8007e0a <_printf_float+0x1a6>
 8007e04:	3301      	adds	r3, #1
 8007e06:	440b      	add	r3, r1
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e0c:	f04f 0900 	mov.w	r9, #0
 8007e10:	e7de      	b.n	8007dd0 <_printf_float+0x16c>
 8007e12:	b913      	cbnz	r3, 8007e1a <_printf_float+0x1b6>
 8007e14:	6822      	ldr	r2, [r4, #0]
 8007e16:	07d2      	lsls	r2, r2, #31
 8007e18:	d501      	bpl.n	8007e1e <_printf_float+0x1ba>
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	e7f4      	b.n	8007e08 <_printf_float+0x1a4>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e7f2      	b.n	8007e08 <_printf_float+0x1a4>
 8007e22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	db05      	blt.n	8007e38 <_printf_float+0x1d4>
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	6121      	str	r1, [r4, #16]
 8007e30:	07d8      	lsls	r0, r3, #31
 8007e32:	d5ea      	bpl.n	8007e0a <_printf_float+0x1a6>
 8007e34:	1c4b      	adds	r3, r1, #1
 8007e36:	e7e7      	b.n	8007e08 <_printf_float+0x1a4>
 8007e38:	2900      	cmp	r1, #0
 8007e3a:	bfd4      	ite	le
 8007e3c:	f1c1 0202 	rsble	r2, r1, #2
 8007e40:	2201      	movgt	r2, #1
 8007e42:	4413      	add	r3, r2
 8007e44:	e7e0      	b.n	8007e08 <_printf_float+0x1a4>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	055a      	lsls	r2, r3, #21
 8007e4a:	d407      	bmi.n	8007e5c <_printf_float+0x1f8>
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	4642      	mov	r2, r8
 8007e50:	4631      	mov	r1, r6
 8007e52:	4628      	mov	r0, r5
 8007e54:	47b8      	blx	r7
 8007e56:	3001      	adds	r0, #1
 8007e58:	d12c      	bne.n	8007eb4 <_printf_float+0x250>
 8007e5a:	e764      	b.n	8007d26 <_printf_float+0xc2>
 8007e5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e60:	f240 80e0 	bls.w	8008024 <_printf_float+0x3c0>
 8007e64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f7f8 fe34 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d034      	beq.n	8007ede <_printf_float+0x27a>
 8007e74:	4a37      	ldr	r2, [pc, #220]	; (8007f54 <_printf_float+0x2f0>)
 8007e76:	2301      	movs	r3, #1
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	f43f af51 	beq.w	8007d26 <_printf_float+0xc2>
 8007e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	db02      	blt.n	8007e92 <_printf_float+0x22e>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	07d8      	lsls	r0, r3, #31
 8007e90:	d510      	bpl.n	8007eb4 <_printf_float+0x250>
 8007e92:	ee18 3a10 	vmov	r3, s16
 8007e96:	4652      	mov	r2, sl
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	47b8      	blx	r7
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	f43f af41 	beq.w	8007d26 <_printf_float+0xc2>
 8007ea4:	f04f 0800 	mov.w	r8, #0
 8007ea8:	f104 091a 	add.w	r9, r4, #26
 8007eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	4543      	cmp	r3, r8
 8007eb2:	dc09      	bgt.n	8007ec8 <_printf_float+0x264>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	079b      	lsls	r3, r3, #30
 8007eb8:	f100 8105 	bmi.w	80080c6 <_printf_float+0x462>
 8007ebc:	68e0      	ldr	r0, [r4, #12]
 8007ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec0:	4298      	cmp	r0, r3
 8007ec2:	bfb8      	it	lt
 8007ec4:	4618      	movlt	r0, r3
 8007ec6:	e730      	b.n	8007d2a <_printf_float+0xc6>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	464a      	mov	r2, r9
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f43f af27 	beq.w	8007d26 <_printf_float+0xc2>
 8007ed8:	f108 0801 	add.w	r8, r8, #1
 8007edc:	e7e6      	b.n	8007eac <_printf_float+0x248>
 8007ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	dc39      	bgt.n	8007f58 <_printf_float+0x2f4>
 8007ee4:	4a1b      	ldr	r2, [pc, #108]	; (8007f54 <_printf_float+0x2f0>)
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f af19 	beq.w	8007d26 <_printf_float+0xc2>
 8007ef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	d102      	bne.n	8007f02 <_printf_float+0x29e>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	07d9      	lsls	r1, r3, #31
 8007f00:	d5d8      	bpl.n	8007eb4 <_printf_float+0x250>
 8007f02:	ee18 3a10 	vmov	r3, s16
 8007f06:	4652      	mov	r2, sl
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	47b8      	blx	r7
 8007f0e:	3001      	adds	r0, #1
 8007f10:	f43f af09 	beq.w	8007d26 <_printf_float+0xc2>
 8007f14:	f04f 0900 	mov.w	r9, #0
 8007f18:	f104 0a1a 	add.w	sl, r4, #26
 8007f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1e:	425b      	negs	r3, r3
 8007f20:	454b      	cmp	r3, r9
 8007f22:	dc01      	bgt.n	8007f28 <_printf_float+0x2c4>
 8007f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f26:	e792      	b.n	8007e4e <_printf_float+0x1ea>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4652      	mov	r2, sl
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b8      	blx	r7
 8007f32:	3001      	adds	r0, #1
 8007f34:	f43f aef7 	beq.w	8007d26 <_printf_float+0xc2>
 8007f38:	f109 0901 	add.w	r9, r9, #1
 8007f3c:	e7ee      	b.n	8007f1c <_printf_float+0x2b8>
 8007f3e:	bf00      	nop
 8007f40:	7fefffff 	.word	0x7fefffff
 8007f44:	080667d0 	.word	0x080667d0
 8007f48:	080667d4 	.word	0x080667d4
 8007f4c:	080667dc 	.word	0x080667dc
 8007f50:	080667d8 	.word	0x080667d8
 8007f54:	080667e0 	.word	0x080667e0
 8007f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	bfa8      	it	ge
 8007f60:	461a      	movge	r2, r3
 8007f62:	2a00      	cmp	r2, #0
 8007f64:	4691      	mov	r9, r2
 8007f66:	dc37      	bgt.n	8007fd8 <_printf_float+0x374>
 8007f68:	f04f 0b00 	mov.w	fp, #0
 8007f6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f70:	f104 021a 	add.w	r2, r4, #26
 8007f74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f76:	9305      	str	r3, [sp, #20]
 8007f78:	eba3 0309 	sub.w	r3, r3, r9
 8007f7c:	455b      	cmp	r3, fp
 8007f7e:	dc33      	bgt.n	8007fe8 <_printf_float+0x384>
 8007f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f84:	429a      	cmp	r2, r3
 8007f86:	db3b      	blt.n	8008000 <_printf_float+0x39c>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	07da      	lsls	r2, r3, #31
 8007f8c:	d438      	bmi.n	8008000 <_printf_float+0x39c>
 8007f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f90:	9b05      	ldr	r3, [sp, #20]
 8007f92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	eba2 0901 	sub.w	r9, r2, r1
 8007f9a:	4599      	cmp	r9, r3
 8007f9c:	bfa8      	it	ge
 8007f9e:	4699      	movge	r9, r3
 8007fa0:	f1b9 0f00 	cmp.w	r9, #0
 8007fa4:	dc35      	bgt.n	8008012 <_printf_float+0x3ae>
 8007fa6:	f04f 0800 	mov.w	r8, #0
 8007faa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fae:	f104 0a1a 	add.w	sl, r4, #26
 8007fb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	eba3 0309 	sub.w	r3, r3, r9
 8007fbc:	4543      	cmp	r3, r8
 8007fbe:	f77f af79 	ble.w	8007eb4 <_printf_float+0x250>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b8      	blx	r7
 8007fcc:	3001      	adds	r0, #1
 8007fce:	f43f aeaa 	beq.w	8007d26 <_printf_float+0xc2>
 8007fd2:	f108 0801 	add.w	r8, r8, #1
 8007fd6:	e7ec      	b.n	8007fb2 <_printf_float+0x34e>
 8007fd8:	4613      	mov	r3, r2
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4642      	mov	r2, r8
 8007fde:	4628      	mov	r0, r5
 8007fe0:	47b8      	blx	r7
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	d1c0      	bne.n	8007f68 <_printf_float+0x304>
 8007fe6:	e69e      	b.n	8007d26 <_printf_float+0xc2>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	4631      	mov	r1, r6
 8007fec:	4628      	mov	r0, r5
 8007fee:	9205      	str	r2, [sp, #20]
 8007ff0:	47b8      	blx	r7
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	f43f ae97 	beq.w	8007d26 <_printf_float+0xc2>
 8007ff8:	9a05      	ldr	r2, [sp, #20]
 8007ffa:	f10b 0b01 	add.w	fp, fp, #1
 8007ffe:	e7b9      	b.n	8007f74 <_printf_float+0x310>
 8008000:	ee18 3a10 	vmov	r3, s16
 8008004:	4652      	mov	r2, sl
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	d1be      	bne.n	8007f8e <_printf_float+0x32a>
 8008010:	e689      	b.n	8007d26 <_printf_float+0xc2>
 8008012:	9a05      	ldr	r2, [sp, #20]
 8008014:	464b      	mov	r3, r9
 8008016:	4442      	add	r2, r8
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	47b8      	blx	r7
 800801e:	3001      	adds	r0, #1
 8008020:	d1c1      	bne.n	8007fa6 <_printf_float+0x342>
 8008022:	e680      	b.n	8007d26 <_printf_float+0xc2>
 8008024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008026:	2a01      	cmp	r2, #1
 8008028:	dc01      	bgt.n	800802e <_printf_float+0x3ca>
 800802a:	07db      	lsls	r3, r3, #31
 800802c:	d538      	bpl.n	80080a0 <_printf_float+0x43c>
 800802e:	2301      	movs	r3, #1
 8008030:	4642      	mov	r2, r8
 8008032:	4631      	mov	r1, r6
 8008034:	4628      	mov	r0, r5
 8008036:	47b8      	blx	r7
 8008038:	3001      	adds	r0, #1
 800803a:	f43f ae74 	beq.w	8007d26 <_printf_float+0xc2>
 800803e:	ee18 3a10 	vmov	r3, s16
 8008042:	4652      	mov	r2, sl
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	47b8      	blx	r7
 800804a:	3001      	adds	r0, #1
 800804c:	f43f ae6b 	beq.w	8007d26 <_printf_float+0xc2>
 8008050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008054:	2200      	movs	r2, #0
 8008056:	2300      	movs	r3, #0
 8008058:	f7f8 fd3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800805c:	b9d8      	cbnz	r0, 8008096 <_printf_float+0x432>
 800805e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008060:	f108 0201 	add.w	r2, r8, #1
 8008064:	3b01      	subs	r3, #1
 8008066:	4631      	mov	r1, r6
 8008068:	4628      	mov	r0, r5
 800806a:	47b8      	blx	r7
 800806c:	3001      	adds	r0, #1
 800806e:	d10e      	bne.n	800808e <_printf_float+0x42a>
 8008070:	e659      	b.n	8007d26 <_printf_float+0xc2>
 8008072:	2301      	movs	r3, #1
 8008074:	4652      	mov	r2, sl
 8008076:	4631      	mov	r1, r6
 8008078:	4628      	mov	r0, r5
 800807a:	47b8      	blx	r7
 800807c:	3001      	adds	r0, #1
 800807e:	f43f ae52 	beq.w	8007d26 <_printf_float+0xc2>
 8008082:	f108 0801 	add.w	r8, r8, #1
 8008086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008088:	3b01      	subs	r3, #1
 800808a:	4543      	cmp	r3, r8
 800808c:	dcf1      	bgt.n	8008072 <_printf_float+0x40e>
 800808e:	464b      	mov	r3, r9
 8008090:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008094:	e6dc      	b.n	8007e50 <_printf_float+0x1ec>
 8008096:	f04f 0800 	mov.w	r8, #0
 800809a:	f104 0a1a 	add.w	sl, r4, #26
 800809e:	e7f2      	b.n	8008086 <_printf_float+0x422>
 80080a0:	2301      	movs	r3, #1
 80080a2:	4642      	mov	r2, r8
 80080a4:	e7df      	b.n	8008066 <_printf_float+0x402>
 80080a6:	2301      	movs	r3, #1
 80080a8:	464a      	mov	r2, r9
 80080aa:	4631      	mov	r1, r6
 80080ac:	4628      	mov	r0, r5
 80080ae:	47b8      	blx	r7
 80080b0:	3001      	adds	r0, #1
 80080b2:	f43f ae38 	beq.w	8007d26 <_printf_float+0xc2>
 80080b6:	f108 0801 	add.w	r8, r8, #1
 80080ba:	68e3      	ldr	r3, [r4, #12]
 80080bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080be:	1a5b      	subs	r3, r3, r1
 80080c0:	4543      	cmp	r3, r8
 80080c2:	dcf0      	bgt.n	80080a6 <_printf_float+0x442>
 80080c4:	e6fa      	b.n	8007ebc <_printf_float+0x258>
 80080c6:	f04f 0800 	mov.w	r8, #0
 80080ca:	f104 0919 	add.w	r9, r4, #25
 80080ce:	e7f4      	b.n	80080ba <_printf_float+0x456>

080080d0 <_printf_common>:
 80080d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	4616      	mov	r6, r2
 80080d6:	4699      	mov	r9, r3
 80080d8:	688a      	ldr	r2, [r1, #8]
 80080da:	690b      	ldr	r3, [r1, #16]
 80080dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080e0:	4293      	cmp	r3, r2
 80080e2:	bfb8      	it	lt
 80080e4:	4613      	movlt	r3, r2
 80080e6:	6033      	str	r3, [r6, #0]
 80080e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080ec:	4607      	mov	r7, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	b10a      	cbz	r2, 80080f6 <_printf_common+0x26>
 80080f2:	3301      	adds	r3, #1
 80080f4:	6033      	str	r3, [r6, #0]
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	0699      	lsls	r1, r3, #26
 80080fa:	bf42      	ittt	mi
 80080fc:	6833      	ldrmi	r3, [r6, #0]
 80080fe:	3302      	addmi	r3, #2
 8008100:	6033      	strmi	r3, [r6, #0]
 8008102:	6825      	ldr	r5, [r4, #0]
 8008104:	f015 0506 	ands.w	r5, r5, #6
 8008108:	d106      	bne.n	8008118 <_printf_common+0x48>
 800810a:	f104 0a19 	add.w	sl, r4, #25
 800810e:	68e3      	ldr	r3, [r4, #12]
 8008110:	6832      	ldr	r2, [r6, #0]
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	42ab      	cmp	r3, r5
 8008116:	dc26      	bgt.n	8008166 <_printf_common+0x96>
 8008118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800811c:	1e13      	subs	r3, r2, #0
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	bf18      	it	ne
 8008122:	2301      	movne	r3, #1
 8008124:	0692      	lsls	r2, r2, #26
 8008126:	d42b      	bmi.n	8008180 <_printf_common+0xb0>
 8008128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800812c:	4649      	mov	r1, r9
 800812e:	4638      	mov	r0, r7
 8008130:	47c0      	blx	r8
 8008132:	3001      	adds	r0, #1
 8008134:	d01e      	beq.n	8008174 <_printf_common+0xa4>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	68e5      	ldr	r5, [r4, #12]
 800813a:	6832      	ldr	r2, [r6, #0]
 800813c:	f003 0306 	and.w	r3, r3, #6
 8008140:	2b04      	cmp	r3, #4
 8008142:	bf08      	it	eq
 8008144:	1aad      	subeq	r5, r5, r2
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	6922      	ldr	r2, [r4, #16]
 800814a:	bf0c      	ite	eq
 800814c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008150:	2500      	movne	r5, #0
 8008152:	4293      	cmp	r3, r2
 8008154:	bfc4      	itt	gt
 8008156:	1a9b      	subgt	r3, r3, r2
 8008158:	18ed      	addgt	r5, r5, r3
 800815a:	2600      	movs	r6, #0
 800815c:	341a      	adds	r4, #26
 800815e:	42b5      	cmp	r5, r6
 8008160:	d11a      	bne.n	8008198 <_printf_common+0xc8>
 8008162:	2000      	movs	r0, #0
 8008164:	e008      	b.n	8008178 <_printf_common+0xa8>
 8008166:	2301      	movs	r3, #1
 8008168:	4652      	mov	r2, sl
 800816a:	4649      	mov	r1, r9
 800816c:	4638      	mov	r0, r7
 800816e:	47c0      	blx	r8
 8008170:	3001      	adds	r0, #1
 8008172:	d103      	bne.n	800817c <_printf_common+0xac>
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800817c:	3501      	adds	r5, #1
 800817e:	e7c6      	b.n	800810e <_printf_common+0x3e>
 8008180:	18e1      	adds	r1, r4, r3
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	2030      	movs	r0, #48	; 0x30
 8008186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800818a:	4422      	add	r2, r4
 800818c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008194:	3302      	adds	r3, #2
 8008196:	e7c7      	b.n	8008128 <_printf_common+0x58>
 8008198:	2301      	movs	r3, #1
 800819a:	4622      	mov	r2, r4
 800819c:	4649      	mov	r1, r9
 800819e:	4638      	mov	r0, r7
 80081a0:	47c0      	blx	r8
 80081a2:	3001      	adds	r0, #1
 80081a4:	d0e6      	beq.n	8008174 <_printf_common+0xa4>
 80081a6:	3601      	adds	r6, #1
 80081a8:	e7d9      	b.n	800815e <_printf_common+0x8e>
	...

080081ac <_printf_i>:
 80081ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	460c      	mov	r4, r1
 80081b2:	4691      	mov	r9, r2
 80081b4:	7e27      	ldrb	r7, [r4, #24]
 80081b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081b8:	2f78      	cmp	r7, #120	; 0x78
 80081ba:	4680      	mov	r8, r0
 80081bc:	469a      	mov	sl, r3
 80081be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081c2:	d807      	bhi.n	80081d4 <_printf_i+0x28>
 80081c4:	2f62      	cmp	r7, #98	; 0x62
 80081c6:	d80a      	bhi.n	80081de <_printf_i+0x32>
 80081c8:	2f00      	cmp	r7, #0
 80081ca:	f000 80d8 	beq.w	800837e <_printf_i+0x1d2>
 80081ce:	2f58      	cmp	r7, #88	; 0x58
 80081d0:	f000 80a3 	beq.w	800831a <_printf_i+0x16e>
 80081d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081dc:	e03a      	b.n	8008254 <_printf_i+0xa8>
 80081de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081e2:	2b15      	cmp	r3, #21
 80081e4:	d8f6      	bhi.n	80081d4 <_printf_i+0x28>
 80081e6:	a001      	add	r0, pc, #4	; (adr r0, 80081ec <_printf_i+0x40>)
 80081e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081ec:	08008245 	.word	0x08008245
 80081f0:	08008259 	.word	0x08008259
 80081f4:	080081d5 	.word	0x080081d5
 80081f8:	080081d5 	.word	0x080081d5
 80081fc:	080081d5 	.word	0x080081d5
 8008200:	080081d5 	.word	0x080081d5
 8008204:	08008259 	.word	0x08008259
 8008208:	080081d5 	.word	0x080081d5
 800820c:	080081d5 	.word	0x080081d5
 8008210:	080081d5 	.word	0x080081d5
 8008214:	080081d5 	.word	0x080081d5
 8008218:	08008365 	.word	0x08008365
 800821c:	08008289 	.word	0x08008289
 8008220:	08008347 	.word	0x08008347
 8008224:	080081d5 	.word	0x080081d5
 8008228:	080081d5 	.word	0x080081d5
 800822c:	08008387 	.word	0x08008387
 8008230:	080081d5 	.word	0x080081d5
 8008234:	08008289 	.word	0x08008289
 8008238:	080081d5 	.word	0x080081d5
 800823c:	080081d5 	.word	0x080081d5
 8008240:	0800834f 	.word	0x0800834f
 8008244:	680b      	ldr	r3, [r1, #0]
 8008246:	1d1a      	adds	r2, r3, #4
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	600a      	str	r2, [r1, #0]
 800824c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008254:	2301      	movs	r3, #1
 8008256:	e0a3      	b.n	80083a0 <_printf_i+0x1f4>
 8008258:	6825      	ldr	r5, [r4, #0]
 800825a:	6808      	ldr	r0, [r1, #0]
 800825c:	062e      	lsls	r6, r5, #24
 800825e:	f100 0304 	add.w	r3, r0, #4
 8008262:	d50a      	bpl.n	800827a <_printf_i+0xce>
 8008264:	6805      	ldr	r5, [r0, #0]
 8008266:	600b      	str	r3, [r1, #0]
 8008268:	2d00      	cmp	r5, #0
 800826a:	da03      	bge.n	8008274 <_printf_i+0xc8>
 800826c:	232d      	movs	r3, #45	; 0x2d
 800826e:	426d      	negs	r5, r5
 8008270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008274:	485e      	ldr	r0, [pc, #376]	; (80083f0 <_printf_i+0x244>)
 8008276:	230a      	movs	r3, #10
 8008278:	e019      	b.n	80082ae <_printf_i+0x102>
 800827a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800827e:	6805      	ldr	r5, [r0, #0]
 8008280:	600b      	str	r3, [r1, #0]
 8008282:	bf18      	it	ne
 8008284:	b22d      	sxthne	r5, r5
 8008286:	e7ef      	b.n	8008268 <_printf_i+0xbc>
 8008288:	680b      	ldr	r3, [r1, #0]
 800828a:	6825      	ldr	r5, [r4, #0]
 800828c:	1d18      	adds	r0, r3, #4
 800828e:	6008      	str	r0, [r1, #0]
 8008290:	0628      	lsls	r0, r5, #24
 8008292:	d501      	bpl.n	8008298 <_printf_i+0xec>
 8008294:	681d      	ldr	r5, [r3, #0]
 8008296:	e002      	b.n	800829e <_printf_i+0xf2>
 8008298:	0669      	lsls	r1, r5, #25
 800829a:	d5fb      	bpl.n	8008294 <_printf_i+0xe8>
 800829c:	881d      	ldrh	r5, [r3, #0]
 800829e:	4854      	ldr	r0, [pc, #336]	; (80083f0 <_printf_i+0x244>)
 80082a0:	2f6f      	cmp	r7, #111	; 0x6f
 80082a2:	bf0c      	ite	eq
 80082a4:	2308      	moveq	r3, #8
 80082a6:	230a      	movne	r3, #10
 80082a8:	2100      	movs	r1, #0
 80082aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ae:	6866      	ldr	r6, [r4, #4]
 80082b0:	60a6      	str	r6, [r4, #8]
 80082b2:	2e00      	cmp	r6, #0
 80082b4:	bfa2      	ittt	ge
 80082b6:	6821      	ldrge	r1, [r4, #0]
 80082b8:	f021 0104 	bicge.w	r1, r1, #4
 80082bc:	6021      	strge	r1, [r4, #0]
 80082be:	b90d      	cbnz	r5, 80082c4 <_printf_i+0x118>
 80082c0:	2e00      	cmp	r6, #0
 80082c2:	d04d      	beq.n	8008360 <_printf_i+0x1b4>
 80082c4:	4616      	mov	r6, r2
 80082c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80082ca:	fb03 5711 	mls	r7, r3, r1, r5
 80082ce:	5dc7      	ldrb	r7, [r0, r7]
 80082d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082d4:	462f      	mov	r7, r5
 80082d6:	42bb      	cmp	r3, r7
 80082d8:	460d      	mov	r5, r1
 80082da:	d9f4      	bls.n	80082c6 <_printf_i+0x11a>
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d10b      	bne.n	80082f8 <_printf_i+0x14c>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	07df      	lsls	r7, r3, #31
 80082e4:	d508      	bpl.n	80082f8 <_printf_i+0x14c>
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	6861      	ldr	r1, [r4, #4]
 80082ea:	4299      	cmp	r1, r3
 80082ec:	bfde      	ittt	le
 80082ee:	2330      	movle	r3, #48	; 0x30
 80082f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082f8:	1b92      	subs	r2, r2, r6
 80082fa:	6122      	str	r2, [r4, #16]
 80082fc:	f8cd a000 	str.w	sl, [sp]
 8008300:	464b      	mov	r3, r9
 8008302:	aa03      	add	r2, sp, #12
 8008304:	4621      	mov	r1, r4
 8008306:	4640      	mov	r0, r8
 8008308:	f7ff fee2 	bl	80080d0 <_printf_common>
 800830c:	3001      	adds	r0, #1
 800830e:	d14c      	bne.n	80083aa <_printf_i+0x1fe>
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	b004      	add	sp, #16
 8008316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831a:	4835      	ldr	r0, [pc, #212]	; (80083f0 <_printf_i+0x244>)
 800831c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	680e      	ldr	r6, [r1, #0]
 8008324:	061f      	lsls	r7, r3, #24
 8008326:	f856 5b04 	ldr.w	r5, [r6], #4
 800832a:	600e      	str	r6, [r1, #0]
 800832c:	d514      	bpl.n	8008358 <_printf_i+0x1ac>
 800832e:	07d9      	lsls	r1, r3, #31
 8008330:	bf44      	itt	mi
 8008332:	f043 0320 	orrmi.w	r3, r3, #32
 8008336:	6023      	strmi	r3, [r4, #0]
 8008338:	b91d      	cbnz	r5, 8008342 <_printf_i+0x196>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	f023 0320 	bic.w	r3, r3, #32
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	2310      	movs	r3, #16
 8008344:	e7b0      	b.n	80082a8 <_printf_i+0xfc>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	f043 0320 	orr.w	r3, r3, #32
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	2378      	movs	r3, #120	; 0x78
 8008350:	4828      	ldr	r0, [pc, #160]	; (80083f4 <_printf_i+0x248>)
 8008352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008356:	e7e3      	b.n	8008320 <_printf_i+0x174>
 8008358:	065e      	lsls	r6, r3, #25
 800835a:	bf48      	it	mi
 800835c:	b2ad      	uxthmi	r5, r5
 800835e:	e7e6      	b.n	800832e <_printf_i+0x182>
 8008360:	4616      	mov	r6, r2
 8008362:	e7bb      	b.n	80082dc <_printf_i+0x130>
 8008364:	680b      	ldr	r3, [r1, #0]
 8008366:	6826      	ldr	r6, [r4, #0]
 8008368:	6960      	ldr	r0, [r4, #20]
 800836a:	1d1d      	adds	r5, r3, #4
 800836c:	600d      	str	r5, [r1, #0]
 800836e:	0635      	lsls	r5, r6, #24
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	d501      	bpl.n	8008378 <_printf_i+0x1cc>
 8008374:	6018      	str	r0, [r3, #0]
 8008376:	e002      	b.n	800837e <_printf_i+0x1d2>
 8008378:	0671      	lsls	r1, r6, #25
 800837a:	d5fb      	bpl.n	8008374 <_printf_i+0x1c8>
 800837c:	8018      	strh	r0, [r3, #0]
 800837e:	2300      	movs	r3, #0
 8008380:	6123      	str	r3, [r4, #16]
 8008382:	4616      	mov	r6, r2
 8008384:	e7ba      	b.n	80082fc <_printf_i+0x150>
 8008386:	680b      	ldr	r3, [r1, #0]
 8008388:	1d1a      	adds	r2, r3, #4
 800838a:	600a      	str	r2, [r1, #0]
 800838c:	681e      	ldr	r6, [r3, #0]
 800838e:	6862      	ldr	r2, [r4, #4]
 8008390:	2100      	movs	r1, #0
 8008392:	4630      	mov	r0, r6
 8008394:	f7f7 ff2c 	bl	80001f0 <memchr>
 8008398:	b108      	cbz	r0, 800839e <_printf_i+0x1f2>
 800839a:	1b80      	subs	r0, r0, r6
 800839c:	6060      	str	r0, [r4, #4]
 800839e:	6863      	ldr	r3, [r4, #4]
 80083a0:	6123      	str	r3, [r4, #16]
 80083a2:	2300      	movs	r3, #0
 80083a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a8:	e7a8      	b.n	80082fc <_printf_i+0x150>
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	4632      	mov	r2, r6
 80083ae:	4649      	mov	r1, r9
 80083b0:	4640      	mov	r0, r8
 80083b2:	47d0      	blx	sl
 80083b4:	3001      	adds	r0, #1
 80083b6:	d0ab      	beq.n	8008310 <_printf_i+0x164>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	079b      	lsls	r3, r3, #30
 80083bc:	d413      	bmi.n	80083e6 <_printf_i+0x23a>
 80083be:	68e0      	ldr	r0, [r4, #12]
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	4298      	cmp	r0, r3
 80083c4:	bfb8      	it	lt
 80083c6:	4618      	movlt	r0, r3
 80083c8:	e7a4      	b.n	8008314 <_printf_i+0x168>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4632      	mov	r2, r6
 80083ce:	4649      	mov	r1, r9
 80083d0:	4640      	mov	r0, r8
 80083d2:	47d0      	blx	sl
 80083d4:	3001      	adds	r0, #1
 80083d6:	d09b      	beq.n	8008310 <_printf_i+0x164>
 80083d8:	3501      	adds	r5, #1
 80083da:	68e3      	ldr	r3, [r4, #12]
 80083dc:	9903      	ldr	r1, [sp, #12]
 80083de:	1a5b      	subs	r3, r3, r1
 80083e0:	42ab      	cmp	r3, r5
 80083e2:	dcf2      	bgt.n	80083ca <_printf_i+0x21e>
 80083e4:	e7eb      	b.n	80083be <_printf_i+0x212>
 80083e6:	2500      	movs	r5, #0
 80083e8:	f104 0619 	add.w	r6, r4, #25
 80083ec:	e7f5      	b.n	80083da <_printf_i+0x22e>
 80083ee:	bf00      	nop
 80083f0:	080667e2 	.word	0x080667e2
 80083f4:	080667f3 	.word	0x080667f3

080083f8 <iprintf>:
 80083f8:	b40f      	push	{r0, r1, r2, r3}
 80083fa:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <iprintf+0x2c>)
 80083fc:	b513      	push	{r0, r1, r4, lr}
 80083fe:	681c      	ldr	r4, [r3, #0]
 8008400:	b124      	cbz	r4, 800840c <iprintf+0x14>
 8008402:	69a3      	ldr	r3, [r4, #24]
 8008404:	b913      	cbnz	r3, 800840c <iprintf+0x14>
 8008406:	4620      	mov	r0, r4
 8008408:	f001 f910 	bl	800962c <__sinit>
 800840c:	ab05      	add	r3, sp, #20
 800840e:	9a04      	ldr	r2, [sp, #16]
 8008410:	68a1      	ldr	r1, [r4, #8]
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	4620      	mov	r0, r4
 8008416:	f001 ff49 	bl	800a2ac <_vfiprintf_r>
 800841a:	b002      	add	sp, #8
 800841c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008420:	b004      	add	sp, #16
 8008422:	4770      	bx	lr
 8008424:	20000ed0 	.word	0x20000ed0

08008428 <_puts_r>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	460e      	mov	r6, r1
 800842c:	4605      	mov	r5, r0
 800842e:	b118      	cbz	r0, 8008438 <_puts_r+0x10>
 8008430:	6983      	ldr	r3, [r0, #24]
 8008432:	b90b      	cbnz	r3, 8008438 <_puts_r+0x10>
 8008434:	f001 f8fa 	bl	800962c <__sinit>
 8008438:	69ab      	ldr	r3, [r5, #24]
 800843a:	68ac      	ldr	r4, [r5, #8]
 800843c:	b913      	cbnz	r3, 8008444 <_puts_r+0x1c>
 800843e:	4628      	mov	r0, r5
 8008440:	f001 f8f4 	bl	800962c <__sinit>
 8008444:	4b2c      	ldr	r3, [pc, #176]	; (80084f8 <_puts_r+0xd0>)
 8008446:	429c      	cmp	r4, r3
 8008448:	d120      	bne.n	800848c <_puts_r+0x64>
 800844a:	686c      	ldr	r4, [r5, #4]
 800844c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800844e:	07db      	lsls	r3, r3, #31
 8008450:	d405      	bmi.n	800845e <_puts_r+0x36>
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	0598      	lsls	r0, r3, #22
 8008456:	d402      	bmi.n	800845e <_puts_r+0x36>
 8008458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800845a:	f001 f98a 	bl	8009772 <__retarget_lock_acquire_recursive>
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	0719      	lsls	r1, r3, #28
 8008462:	d51d      	bpl.n	80084a0 <_puts_r+0x78>
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	b1db      	cbz	r3, 80084a0 <_puts_r+0x78>
 8008468:	3e01      	subs	r6, #1
 800846a:	68a3      	ldr	r3, [r4, #8]
 800846c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008470:	3b01      	subs	r3, #1
 8008472:	60a3      	str	r3, [r4, #8]
 8008474:	bb39      	cbnz	r1, 80084c6 <_puts_r+0x9e>
 8008476:	2b00      	cmp	r3, #0
 8008478:	da38      	bge.n	80084ec <_puts_r+0xc4>
 800847a:	4622      	mov	r2, r4
 800847c:	210a      	movs	r1, #10
 800847e:	4628      	mov	r0, r5
 8008480:	f000 f880 	bl	8008584 <__swbuf_r>
 8008484:	3001      	adds	r0, #1
 8008486:	d011      	beq.n	80084ac <_puts_r+0x84>
 8008488:	250a      	movs	r5, #10
 800848a:	e011      	b.n	80084b0 <_puts_r+0x88>
 800848c:	4b1b      	ldr	r3, [pc, #108]	; (80084fc <_puts_r+0xd4>)
 800848e:	429c      	cmp	r4, r3
 8008490:	d101      	bne.n	8008496 <_puts_r+0x6e>
 8008492:	68ac      	ldr	r4, [r5, #8]
 8008494:	e7da      	b.n	800844c <_puts_r+0x24>
 8008496:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <_puts_r+0xd8>)
 8008498:	429c      	cmp	r4, r3
 800849a:	bf08      	it	eq
 800849c:	68ec      	ldreq	r4, [r5, #12]
 800849e:	e7d5      	b.n	800844c <_puts_r+0x24>
 80084a0:	4621      	mov	r1, r4
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 f8c0 	bl	8008628 <__swsetup_r>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d0dd      	beq.n	8008468 <_puts_r+0x40>
 80084ac:	f04f 35ff 	mov.w	r5, #4294967295
 80084b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084b2:	07da      	lsls	r2, r3, #31
 80084b4:	d405      	bmi.n	80084c2 <_puts_r+0x9a>
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	059b      	lsls	r3, r3, #22
 80084ba:	d402      	bmi.n	80084c2 <_puts_r+0x9a>
 80084bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084be:	f001 f959 	bl	8009774 <__retarget_lock_release_recursive>
 80084c2:	4628      	mov	r0, r5
 80084c4:	bd70      	pop	{r4, r5, r6, pc}
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da04      	bge.n	80084d4 <_puts_r+0xac>
 80084ca:	69a2      	ldr	r2, [r4, #24]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	dc06      	bgt.n	80084de <_puts_r+0xb6>
 80084d0:	290a      	cmp	r1, #10
 80084d2:	d004      	beq.n	80084de <_puts_r+0xb6>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	6022      	str	r2, [r4, #0]
 80084da:	7019      	strb	r1, [r3, #0]
 80084dc:	e7c5      	b.n	800846a <_puts_r+0x42>
 80084de:	4622      	mov	r2, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 f84f 	bl	8008584 <__swbuf_r>
 80084e6:	3001      	adds	r0, #1
 80084e8:	d1bf      	bne.n	800846a <_puts_r+0x42>
 80084ea:	e7df      	b.n	80084ac <_puts_r+0x84>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	250a      	movs	r5, #10
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	701d      	strb	r5, [r3, #0]
 80084f6:	e7db      	b.n	80084b0 <_puts_r+0x88>
 80084f8:	080668b8 	.word	0x080668b8
 80084fc:	080668d8 	.word	0x080668d8
 8008500:	08066898 	.word	0x08066898

08008504 <puts>:
 8008504:	4b02      	ldr	r3, [pc, #8]	; (8008510 <puts+0xc>)
 8008506:	4601      	mov	r1, r0
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	f7ff bf8d 	b.w	8008428 <_puts_r>
 800850e:	bf00      	nop
 8008510:	20000ed0 	.word	0x20000ed0

08008514 <realloc>:
 8008514:	4b02      	ldr	r3, [pc, #8]	; (8008520 <realloc+0xc>)
 8008516:	460a      	mov	r2, r1
 8008518:	4601      	mov	r1, r0
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	f001 bd1a 	b.w	8009f54 <_realloc_r>
 8008520:	20000ed0 	.word	0x20000ed0

08008524 <_sbrk_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d06      	ldr	r5, [pc, #24]	; (8008540 <_sbrk_r+0x1c>)
 8008528:	2300      	movs	r3, #0
 800852a:	4604      	mov	r4, r0
 800852c:	4608      	mov	r0, r1
 800852e:	602b      	str	r3, [r5, #0]
 8008530:	f7fb f874 	bl	800361c <_sbrk>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d102      	bne.n	800853e <_sbrk_r+0x1a>
 8008538:	682b      	ldr	r3, [r5, #0]
 800853a:	b103      	cbz	r3, 800853e <_sbrk_r+0x1a>
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	bd38      	pop	{r3, r4, r5, pc}
 8008540:	20002bf0 	.word	0x20002bf0

08008544 <siprintf>:
 8008544:	b40e      	push	{r1, r2, r3}
 8008546:	b500      	push	{lr}
 8008548:	b09c      	sub	sp, #112	; 0x70
 800854a:	ab1d      	add	r3, sp, #116	; 0x74
 800854c:	9002      	str	r0, [sp, #8]
 800854e:	9006      	str	r0, [sp, #24]
 8008550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008554:	4809      	ldr	r0, [pc, #36]	; (800857c <siprintf+0x38>)
 8008556:	9107      	str	r1, [sp, #28]
 8008558:	9104      	str	r1, [sp, #16]
 800855a:	4909      	ldr	r1, [pc, #36]	; (8008580 <siprintf+0x3c>)
 800855c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008560:	9105      	str	r1, [sp, #20]
 8008562:	6800      	ldr	r0, [r0, #0]
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	a902      	add	r1, sp, #8
 8008568:	f001 fd76 	bl	800a058 <_svfiprintf_r>
 800856c:	9b02      	ldr	r3, [sp, #8]
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	b01c      	add	sp, #112	; 0x70
 8008574:	f85d eb04 	ldr.w	lr, [sp], #4
 8008578:	b003      	add	sp, #12
 800857a:	4770      	bx	lr
 800857c:	20000ed0 	.word	0x20000ed0
 8008580:	ffff0208 	.word	0xffff0208

08008584 <__swbuf_r>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	460e      	mov	r6, r1
 8008588:	4614      	mov	r4, r2
 800858a:	4605      	mov	r5, r0
 800858c:	b118      	cbz	r0, 8008596 <__swbuf_r+0x12>
 800858e:	6983      	ldr	r3, [r0, #24]
 8008590:	b90b      	cbnz	r3, 8008596 <__swbuf_r+0x12>
 8008592:	f001 f84b 	bl	800962c <__sinit>
 8008596:	4b21      	ldr	r3, [pc, #132]	; (800861c <__swbuf_r+0x98>)
 8008598:	429c      	cmp	r4, r3
 800859a:	d12b      	bne.n	80085f4 <__swbuf_r+0x70>
 800859c:	686c      	ldr	r4, [r5, #4]
 800859e:	69a3      	ldr	r3, [r4, #24]
 80085a0:	60a3      	str	r3, [r4, #8]
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	071a      	lsls	r2, r3, #28
 80085a6:	d52f      	bpl.n	8008608 <__swbuf_r+0x84>
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	b36b      	cbz	r3, 8008608 <__swbuf_r+0x84>
 80085ac:	6923      	ldr	r3, [r4, #16]
 80085ae:	6820      	ldr	r0, [r4, #0]
 80085b0:	1ac0      	subs	r0, r0, r3
 80085b2:	6963      	ldr	r3, [r4, #20]
 80085b4:	b2f6      	uxtb	r6, r6
 80085b6:	4283      	cmp	r3, r0
 80085b8:	4637      	mov	r7, r6
 80085ba:	dc04      	bgt.n	80085c6 <__swbuf_r+0x42>
 80085bc:	4621      	mov	r1, r4
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 ffa0 	bl	8009504 <_fflush_r>
 80085c4:	bb30      	cbnz	r0, 8008614 <__swbuf_r+0x90>
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	60a3      	str	r3, [r4, #8]
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	6022      	str	r2, [r4, #0]
 80085d2:	701e      	strb	r6, [r3, #0]
 80085d4:	6963      	ldr	r3, [r4, #20]
 80085d6:	3001      	adds	r0, #1
 80085d8:	4283      	cmp	r3, r0
 80085da:	d004      	beq.n	80085e6 <__swbuf_r+0x62>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	07db      	lsls	r3, r3, #31
 80085e0:	d506      	bpl.n	80085f0 <__swbuf_r+0x6c>
 80085e2:	2e0a      	cmp	r6, #10
 80085e4:	d104      	bne.n	80085f0 <__swbuf_r+0x6c>
 80085e6:	4621      	mov	r1, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 ff8b 	bl	8009504 <_fflush_r>
 80085ee:	b988      	cbnz	r0, 8008614 <__swbuf_r+0x90>
 80085f0:	4638      	mov	r0, r7
 80085f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <__swbuf_r+0x9c>)
 80085f6:	429c      	cmp	r4, r3
 80085f8:	d101      	bne.n	80085fe <__swbuf_r+0x7a>
 80085fa:	68ac      	ldr	r4, [r5, #8]
 80085fc:	e7cf      	b.n	800859e <__swbuf_r+0x1a>
 80085fe:	4b09      	ldr	r3, [pc, #36]	; (8008624 <__swbuf_r+0xa0>)
 8008600:	429c      	cmp	r4, r3
 8008602:	bf08      	it	eq
 8008604:	68ec      	ldreq	r4, [r5, #12]
 8008606:	e7ca      	b.n	800859e <__swbuf_r+0x1a>
 8008608:	4621      	mov	r1, r4
 800860a:	4628      	mov	r0, r5
 800860c:	f000 f80c 	bl	8008628 <__swsetup_r>
 8008610:	2800      	cmp	r0, #0
 8008612:	d0cb      	beq.n	80085ac <__swbuf_r+0x28>
 8008614:	f04f 37ff 	mov.w	r7, #4294967295
 8008618:	e7ea      	b.n	80085f0 <__swbuf_r+0x6c>
 800861a:	bf00      	nop
 800861c:	080668b8 	.word	0x080668b8
 8008620:	080668d8 	.word	0x080668d8
 8008624:	08066898 	.word	0x08066898

08008628 <__swsetup_r>:
 8008628:	4b32      	ldr	r3, [pc, #200]	; (80086f4 <__swsetup_r+0xcc>)
 800862a:	b570      	push	{r4, r5, r6, lr}
 800862c:	681d      	ldr	r5, [r3, #0]
 800862e:	4606      	mov	r6, r0
 8008630:	460c      	mov	r4, r1
 8008632:	b125      	cbz	r5, 800863e <__swsetup_r+0x16>
 8008634:	69ab      	ldr	r3, [r5, #24]
 8008636:	b913      	cbnz	r3, 800863e <__swsetup_r+0x16>
 8008638:	4628      	mov	r0, r5
 800863a:	f000 fff7 	bl	800962c <__sinit>
 800863e:	4b2e      	ldr	r3, [pc, #184]	; (80086f8 <__swsetup_r+0xd0>)
 8008640:	429c      	cmp	r4, r3
 8008642:	d10f      	bne.n	8008664 <__swsetup_r+0x3c>
 8008644:	686c      	ldr	r4, [r5, #4]
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800864c:	0719      	lsls	r1, r3, #28
 800864e:	d42c      	bmi.n	80086aa <__swsetup_r+0x82>
 8008650:	06dd      	lsls	r5, r3, #27
 8008652:	d411      	bmi.n	8008678 <__swsetup_r+0x50>
 8008654:	2309      	movs	r3, #9
 8008656:	6033      	str	r3, [r6, #0]
 8008658:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800865c:	81a3      	strh	r3, [r4, #12]
 800865e:	f04f 30ff 	mov.w	r0, #4294967295
 8008662:	e03e      	b.n	80086e2 <__swsetup_r+0xba>
 8008664:	4b25      	ldr	r3, [pc, #148]	; (80086fc <__swsetup_r+0xd4>)
 8008666:	429c      	cmp	r4, r3
 8008668:	d101      	bne.n	800866e <__swsetup_r+0x46>
 800866a:	68ac      	ldr	r4, [r5, #8]
 800866c:	e7eb      	b.n	8008646 <__swsetup_r+0x1e>
 800866e:	4b24      	ldr	r3, [pc, #144]	; (8008700 <__swsetup_r+0xd8>)
 8008670:	429c      	cmp	r4, r3
 8008672:	bf08      	it	eq
 8008674:	68ec      	ldreq	r4, [r5, #12]
 8008676:	e7e6      	b.n	8008646 <__swsetup_r+0x1e>
 8008678:	0758      	lsls	r0, r3, #29
 800867a:	d512      	bpl.n	80086a2 <__swsetup_r+0x7a>
 800867c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800867e:	b141      	cbz	r1, 8008692 <__swsetup_r+0x6a>
 8008680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008684:	4299      	cmp	r1, r3
 8008686:	d002      	beq.n	800868e <__swsetup_r+0x66>
 8008688:	4630      	mov	r0, r6
 800868a:	f7ff f9a1 	bl	80079d0 <_free_r>
 800868e:	2300      	movs	r3, #0
 8008690:	6363      	str	r3, [r4, #52]	; 0x34
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	2300      	movs	r3, #0
 800869c:	6063      	str	r3, [r4, #4]
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	f043 0308 	orr.w	r3, r3, #8
 80086a8:	81a3      	strh	r3, [r4, #12]
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	b94b      	cbnz	r3, 80086c2 <__swsetup_r+0x9a>
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b8:	d003      	beq.n	80086c2 <__swsetup_r+0x9a>
 80086ba:	4621      	mov	r1, r4
 80086bc:	4630      	mov	r0, r6
 80086be:	f001 f87f 	bl	80097c0 <__smakebuf_r>
 80086c2:	89a0      	ldrh	r0, [r4, #12]
 80086c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086c8:	f010 0301 	ands.w	r3, r0, #1
 80086cc:	d00a      	beq.n	80086e4 <__swsetup_r+0xbc>
 80086ce:	2300      	movs	r3, #0
 80086d0:	60a3      	str	r3, [r4, #8]
 80086d2:	6963      	ldr	r3, [r4, #20]
 80086d4:	425b      	negs	r3, r3
 80086d6:	61a3      	str	r3, [r4, #24]
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	b943      	cbnz	r3, 80086ee <__swsetup_r+0xc6>
 80086dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086e0:	d1ba      	bne.n	8008658 <__swsetup_r+0x30>
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	0781      	lsls	r1, r0, #30
 80086e6:	bf58      	it	pl
 80086e8:	6963      	ldrpl	r3, [r4, #20]
 80086ea:	60a3      	str	r3, [r4, #8]
 80086ec:	e7f4      	b.n	80086d8 <__swsetup_r+0xb0>
 80086ee:	2000      	movs	r0, #0
 80086f0:	e7f7      	b.n	80086e2 <__swsetup_r+0xba>
 80086f2:	bf00      	nop
 80086f4:	20000ed0 	.word	0x20000ed0
 80086f8:	080668b8 	.word	0x080668b8
 80086fc:	080668d8 	.word	0x080668d8
 8008700:	08066898 	.word	0x08066898

08008704 <quorem>:
 8008704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	6903      	ldr	r3, [r0, #16]
 800870a:	690c      	ldr	r4, [r1, #16]
 800870c:	42a3      	cmp	r3, r4
 800870e:	4607      	mov	r7, r0
 8008710:	f2c0 8081 	blt.w	8008816 <quorem+0x112>
 8008714:	3c01      	subs	r4, #1
 8008716:	f101 0814 	add.w	r8, r1, #20
 800871a:	f100 0514 	add.w	r5, r0, #20
 800871e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800872c:	3301      	adds	r3, #1
 800872e:	429a      	cmp	r2, r3
 8008730:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008734:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008738:	fbb2 f6f3 	udiv	r6, r2, r3
 800873c:	d331      	bcc.n	80087a2 <quorem+0x9e>
 800873e:	f04f 0e00 	mov.w	lr, #0
 8008742:	4640      	mov	r0, r8
 8008744:	46ac      	mov	ip, r5
 8008746:	46f2      	mov	sl, lr
 8008748:	f850 2b04 	ldr.w	r2, [r0], #4
 800874c:	b293      	uxth	r3, r2
 800874e:	fb06 e303 	mla	r3, r6, r3, lr
 8008752:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008756:	b29b      	uxth	r3, r3
 8008758:	ebaa 0303 	sub.w	r3, sl, r3
 800875c:	0c12      	lsrs	r2, r2, #16
 800875e:	f8dc a000 	ldr.w	sl, [ip]
 8008762:	fb06 e202 	mla	r2, r6, r2, lr
 8008766:	fa13 f38a 	uxtah	r3, r3, sl
 800876a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800876e:	fa1f fa82 	uxth.w	sl, r2
 8008772:	f8dc 2000 	ldr.w	r2, [ip]
 8008776:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800877a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800877e:	b29b      	uxth	r3, r3
 8008780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008784:	4581      	cmp	r9, r0
 8008786:	f84c 3b04 	str.w	r3, [ip], #4
 800878a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800878e:	d2db      	bcs.n	8008748 <quorem+0x44>
 8008790:	f855 300b 	ldr.w	r3, [r5, fp]
 8008794:	b92b      	cbnz	r3, 80087a2 <quorem+0x9e>
 8008796:	9b01      	ldr	r3, [sp, #4]
 8008798:	3b04      	subs	r3, #4
 800879a:	429d      	cmp	r5, r3
 800879c:	461a      	mov	r2, r3
 800879e:	d32e      	bcc.n	80087fe <quorem+0xfa>
 80087a0:	613c      	str	r4, [r7, #16]
 80087a2:	4638      	mov	r0, r7
 80087a4:	f001 fad6 	bl	8009d54 <__mcmp>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	db24      	blt.n	80087f6 <quorem+0xf2>
 80087ac:	3601      	adds	r6, #1
 80087ae:	4628      	mov	r0, r5
 80087b0:	f04f 0c00 	mov.w	ip, #0
 80087b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80087b8:	f8d0 e000 	ldr.w	lr, [r0]
 80087bc:	b293      	uxth	r3, r2
 80087be:	ebac 0303 	sub.w	r3, ip, r3
 80087c2:	0c12      	lsrs	r2, r2, #16
 80087c4:	fa13 f38e 	uxtah	r3, r3, lr
 80087c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087d6:	45c1      	cmp	r9, r8
 80087d8:	f840 3b04 	str.w	r3, [r0], #4
 80087dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087e0:	d2e8      	bcs.n	80087b4 <quorem+0xb0>
 80087e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087ea:	b922      	cbnz	r2, 80087f6 <quorem+0xf2>
 80087ec:	3b04      	subs	r3, #4
 80087ee:	429d      	cmp	r5, r3
 80087f0:	461a      	mov	r2, r3
 80087f2:	d30a      	bcc.n	800880a <quorem+0x106>
 80087f4:	613c      	str	r4, [r7, #16]
 80087f6:	4630      	mov	r0, r6
 80087f8:	b003      	add	sp, #12
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	6812      	ldr	r2, [r2, #0]
 8008800:	3b04      	subs	r3, #4
 8008802:	2a00      	cmp	r2, #0
 8008804:	d1cc      	bne.n	80087a0 <quorem+0x9c>
 8008806:	3c01      	subs	r4, #1
 8008808:	e7c7      	b.n	800879a <quorem+0x96>
 800880a:	6812      	ldr	r2, [r2, #0]
 800880c:	3b04      	subs	r3, #4
 800880e:	2a00      	cmp	r2, #0
 8008810:	d1f0      	bne.n	80087f4 <quorem+0xf0>
 8008812:	3c01      	subs	r4, #1
 8008814:	e7eb      	b.n	80087ee <quorem+0xea>
 8008816:	2000      	movs	r0, #0
 8008818:	e7ee      	b.n	80087f8 <quorem+0xf4>
 800881a:	0000      	movs	r0, r0
 800881c:	0000      	movs	r0, r0
	...

08008820 <_dtoa_r>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	ed2d 8b02 	vpush	{d8}
 8008828:	ec57 6b10 	vmov	r6, r7, d0
 800882c:	b095      	sub	sp, #84	; 0x54
 800882e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008830:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008834:	9105      	str	r1, [sp, #20]
 8008836:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800883a:	4604      	mov	r4, r0
 800883c:	9209      	str	r2, [sp, #36]	; 0x24
 800883e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008840:	b975      	cbnz	r5, 8008860 <_dtoa_r+0x40>
 8008842:	2010      	movs	r0, #16
 8008844:	f7ff f88e 	bl	8007964 <malloc>
 8008848:	4602      	mov	r2, r0
 800884a:	6260      	str	r0, [r4, #36]	; 0x24
 800884c:	b920      	cbnz	r0, 8008858 <_dtoa_r+0x38>
 800884e:	4bb2      	ldr	r3, [pc, #712]	; (8008b18 <_dtoa_r+0x2f8>)
 8008850:	21ea      	movs	r1, #234	; 0xea
 8008852:	48b2      	ldr	r0, [pc, #712]	; (8008b1c <_dtoa_r+0x2fc>)
 8008854:	f001 feb0 	bl	800a5b8 <__assert_func>
 8008858:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800885c:	6005      	str	r5, [r0, #0]
 800885e:	60c5      	str	r5, [r0, #12]
 8008860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008862:	6819      	ldr	r1, [r3, #0]
 8008864:	b151      	cbz	r1, 800887c <_dtoa_r+0x5c>
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	604a      	str	r2, [r1, #4]
 800886a:	2301      	movs	r3, #1
 800886c:	4093      	lsls	r3, r2
 800886e:	608b      	str	r3, [r1, #8]
 8008870:	4620      	mov	r0, r4
 8008872:	f001 f831 	bl	80098d8 <_Bfree>
 8008876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	1e3b      	subs	r3, r7, #0
 800887e:	bfb9      	ittee	lt
 8008880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008884:	9303      	strlt	r3, [sp, #12]
 8008886:	2300      	movge	r3, #0
 8008888:	f8c8 3000 	strge.w	r3, [r8]
 800888c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008890:	4ba3      	ldr	r3, [pc, #652]	; (8008b20 <_dtoa_r+0x300>)
 8008892:	bfbc      	itt	lt
 8008894:	2201      	movlt	r2, #1
 8008896:	f8c8 2000 	strlt.w	r2, [r8]
 800889a:	ea33 0309 	bics.w	r3, r3, r9
 800889e:	d11b      	bne.n	80088d8 <_dtoa_r+0xb8>
 80088a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088ac:	4333      	orrs	r3, r6
 80088ae:	f000 857a 	beq.w	80093a6 <_dtoa_r+0xb86>
 80088b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088b4:	b963      	cbnz	r3, 80088d0 <_dtoa_r+0xb0>
 80088b6:	4b9b      	ldr	r3, [pc, #620]	; (8008b24 <_dtoa_r+0x304>)
 80088b8:	e024      	b.n	8008904 <_dtoa_r+0xe4>
 80088ba:	4b9b      	ldr	r3, [pc, #620]	; (8008b28 <_dtoa_r+0x308>)
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	3308      	adds	r3, #8
 80088c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	9800      	ldr	r0, [sp, #0]
 80088c6:	b015      	add	sp, #84	; 0x54
 80088c8:	ecbd 8b02 	vpop	{d8}
 80088cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d0:	4b94      	ldr	r3, [pc, #592]	; (8008b24 <_dtoa_r+0x304>)
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	3303      	adds	r3, #3
 80088d6:	e7f3      	b.n	80088c0 <_dtoa_r+0xa0>
 80088d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088dc:	2200      	movs	r2, #0
 80088de:	ec51 0b17 	vmov	r0, r1, d7
 80088e2:	2300      	movs	r3, #0
 80088e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80088e8:	f7f8 f8f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80088ec:	4680      	mov	r8, r0
 80088ee:	b158      	cbz	r0, 8008908 <_dtoa_r+0xe8>
 80088f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088f2:	2301      	movs	r3, #1
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8551 	beq.w	80093a0 <_dtoa_r+0xb80>
 80088fe:	488b      	ldr	r0, [pc, #556]	; (8008b2c <_dtoa_r+0x30c>)
 8008900:	6018      	str	r0, [r3, #0]
 8008902:	1e43      	subs	r3, r0, #1
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	e7dd      	b.n	80088c4 <_dtoa_r+0xa4>
 8008908:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800890c:	aa12      	add	r2, sp, #72	; 0x48
 800890e:	a913      	add	r1, sp, #76	; 0x4c
 8008910:	4620      	mov	r0, r4
 8008912:	f001 fac3 	bl	8009e9c <__d2b>
 8008916:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800891a:	4683      	mov	fp, r0
 800891c:	2d00      	cmp	r5, #0
 800891e:	d07c      	beq.n	8008a1a <_dtoa_r+0x1fa>
 8008920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008922:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800892a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800892e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008932:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008936:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800893a:	4b7d      	ldr	r3, [pc, #500]	; (8008b30 <_dtoa_r+0x310>)
 800893c:	2200      	movs	r2, #0
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	f7f7 fca9 	bl	8000298 <__aeabi_dsub>
 8008946:	a36e      	add	r3, pc, #440	; (adr r3, 8008b00 <_dtoa_r+0x2e0>)
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f7f7 fe5c 	bl	8000608 <__aeabi_dmul>
 8008950:	a36d      	add	r3, pc, #436	; (adr r3, 8008b08 <_dtoa_r+0x2e8>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f7f7 fca1 	bl	800029c <__adddf3>
 800895a:	4606      	mov	r6, r0
 800895c:	4628      	mov	r0, r5
 800895e:	460f      	mov	r7, r1
 8008960:	f7f7 fde8 	bl	8000534 <__aeabi_i2d>
 8008964:	a36a      	add	r3, pc, #424	; (adr r3, 8008b10 <_dtoa_r+0x2f0>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	f7f7 fe4d 	bl	8000608 <__aeabi_dmul>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4630      	mov	r0, r6
 8008974:	4639      	mov	r1, r7
 8008976:	f7f7 fc91 	bl	800029c <__adddf3>
 800897a:	4606      	mov	r6, r0
 800897c:	460f      	mov	r7, r1
 800897e:	f7f8 f8f3 	bl	8000b68 <__aeabi_d2iz>
 8008982:	2200      	movs	r2, #0
 8008984:	4682      	mov	sl, r0
 8008986:	2300      	movs	r3, #0
 8008988:	4630      	mov	r0, r6
 800898a:	4639      	mov	r1, r7
 800898c:	f7f8 f8ae 	bl	8000aec <__aeabi_dcmplt>
 8008990:	b148      	cbz	r0, 80089a6 <_dtoa_r+0x186>
 8008992:	4650      	mov	r0, sl
 8008994:	f7f7 fdce 	bl	8000534 <__aeabi_i2d>
 8008998:	4632      	mov	r2, r6
 800899a:	463b      	mov	r3, r7
 800899c:	f7f8 f89c 	bl	8000ad8 <__aeabi_dcmpeq>
 80089a0:	b908      	cbnz	r0, 80089a6 <_dtoa_r+0x186>
 80089a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089a6:	f1ba 0f16 	cmp.w	sl, #22
 80089aa:	d854      	bhi.n	8008a56 <_dtoa_r+0x236>
 80089ac:	4b61      	ldr	r3, [pc, #388]	; (8008b34 <_dtoa_r+0x314>)
 80089ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089ba:	f7f8 f897 	bl	8000aec <__aeabi_dcmplt>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d04b      	beq.n	8008a5a <_dtoa_r+0x23a>
 80089c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089c6:	2300      	movs	r3, #0
 80089c8:	930e      	str	r3, [sp, #56]	; 0x38
 80089ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089cc:	1b5d      	subs	r5, r3, r5
 80089ce:	1e6b      	subs	r3, r5, #1
 80089d0:	9304      	str	r3, [sp, #16]
 80089d2:	bf43      	ittte	mi
 80089d4:	2300      	movmi	r3, #0
 80089d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80089da:	9304      	strmi	r3, [sp, #16]
 80089dc:	f04f 0800 	movpl.w	r8, #0
 80089e0:	f1ba 0f00 	cmp.w	sl, #0
 80089e4:	db3b      	blt.n	8008a5e <_dtoa_r+0x23e>
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80089ec:	4453      	add	r3, sl
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	2300      	movs	r3, #0
 80089f2:	9306      	str	r3, [sp, #24]
 80089f4:	9b05      	ldr	r3, [sp, #20]
 80089f6:	2b09      	cmp	r3, #9
 80089f8:	d869      	bhi.n	8008ace <_dtoa_r+0x2ae>
 80089fa:	2b05      	cmp	r3, #5
 80089fc:	bfc4      	itt	gt
 80089fe:	3b04      	subgt	r3, #4
 8008a00:	9305      	strgt	r3, [sp, #20]
 8008a02:	9b05      	ldr	r3, [sp, #20]
 8008a04:	f1a3 0302 	sub.w	r3, r3, #2
 8008a08:	bfcc      	ite	gt
 8008a0a:	2500      	movgt	r5, #0
 8008a0c:	2501      	movle	r5, #1
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d869      	bhi.n	8008ae6 <_dtoa_r+0x2c6>
 8008a12:	e8df f003 	tbb	[pc, r3]
 8008a16:	4e2c      	.short	0x4e2c
 8008a18:	5a4c      	.short	0x5a4c
 8008a1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008a1e:	441d      	add	r5, r3
 8008a20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a24:	2b20      	cmp	r3, #32
 8008a26:	bfc1      	itttt	gt
 8008a28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a30:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a38:	bfda      	itte	le
 8008a3a:	f1c3 0320 	rsble	r3, r3, #32
 8008a3e:	fa06 f003 	lslle.w	r0, r6, r3
 8008a42:	4318      	orrgt	r0, r3
 8008a44:	f7f7 fd66 	bl	8000514 <__aeabi_ui2d>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a50:	3d01      	subs	r5, #1
 8008a52:	9310      	str	r3, [sp, #64]	; 0x40
 8008a54:	e771      	b.n	800893a <_dtoa_r+0x11a>
 8008a56:	2301      	movs	r3, #1
 8008a58:	e7b6      	b.n	80089c8 <_dtoa_r+0x1a8>
 8008a5a:	900e      	str	r0, [sp, #56]	; 0x38
 8008a5c:	e7b5      	b.n	80089ca <_dtoa_r+0x1aa>
 8008a5e:	f1ca 0300 	rsb	r3, sl, #0
 8008a62:	9306      	str	r3, [sp, #24]
 8008a64:	2300      	movs	r3, #0
 8008a66:	eba8 080a 	sub.w	r8, r8, sl
 8008a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8008a6c:	e7c2      	b.n	80089f4 <_dtoa_r+0x1d4>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9308      	str	r3, [sp, #32]
 8008a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dc39      	bgt.n	8008aec <_dtoa_r+0x2cc>
 8008a78:	f04f 0901 	mov.w	r9, #1
 8008a7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a80:	464b      	mov	r3, r9
 8008a82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a88:	2200      	movs	r2, #0
 8008a8a:	6042      	str	r2, [r0, #4]
 8008a8c:	2204      	movs	r2, #4
 8008a8e:	f102 0614 	add.w	r6, r2, #20
 8008a92:	429e      	cmp	r6, r3
 8008a94:	6841      	ldr	r1, [r0, #4]
 8008a96:	d92f      	bls.n	8008af8 <_dtoa_r+0x2d8>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 fedd 	bl	8009858 <_Balloc>
 8008a9e:	9000      	str	r0, [sp, #0]
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d14b      	bne.n	8008b3c <_dtoa_r+0x31c>
 8008aa4:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <_dtoa_r+0x318>)
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008aac:	e6d1      	b.n	8008852 <_dtoa_r+0x32>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e7de      	b.n	8008a70 <_dtoa_r+0x250>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9308      	str	r3, [sp, #32]
 8008ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab8:	eb0a 0903 	add.w	r9, sl, r3
 8008abc:	f109 0301 	add.w	r3, r9, #1
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	bfb8      	it	lt
 8008ac6:	2301      	movlt	r3, #1
 8008ac8:	e7dd      	b.n	8008a86 <_dtoa_r+0x266>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e7f2      	b.n	8008ab4 <_dtoa_r+0x294>
 8008ace:	2501      	movs	r5, #1
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9305      	str	r3, [sp, #20]
 8008ad4:	9508      	str	r5, [sp, #32]
 8008ad6:	f04f 39ff 	mov.w	r9, #4294967295
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ae0:	2312      	movs	r3, #18
 8008ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ae4:	e7cf      	b.n	8008a86 <_dtoa_r+0x266>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	9308      	str	r3, [sp, #32]
 8008aea:	e7f4      	b.n	8008ad6 <_dtoa_r+0x2b6>
 8008aec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008af0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008af4:	464b      	mov	r3, r9
 8008af6:	e7c6      	b.n	8008a86 <_dtoa_r+0x266>
 8008af8:	3101      	adds	r1, #1
 8008afa:	6041      	str	r1, [r0, #4]
 8008afc:	0052      	lsls	r2, r2, #1
 8008afe:	e7c6      	b.n	8008a8e <_dtoa_r+0x26e>
 8008b00:	636f4361 	.word	0x636f4361
 8008b04:	3fd287a7 	.word	0x3fd287a7
 8008b08:	8b60c8b3 	.word	0x8b60c8b3
 8008b0c:	3fc68a28 	.word	0x3fc68a28
 8008b10:	509f79fb 	.word	0x509f79fb
 8008b14:	3fd34413 	.word	0x3fd34413
 8008b18:	08066811 	.word	0x08066811
 8008b1c:	08066828 	.word	0x08066828
 8008b20:	7ff00000 	.word	0x7ff00000
 8008b24:	0806680d 	.word	0x0806680d
 8008b28:	08066804 	.word	0x08066804
 8008b2c:	080667e1 	.word	0x080667e1
 8008b30:	3ff80000 	.word	0x3ff80000
 8008b34:	08066980 	.word	0x08066980
 8008b38:	08066887 	.word	0x08066887
 8008b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b3e:	9a00      	ldr	r2, [sp, #0]
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	9b01      	ldr	r3, [sp, #4]
 8008b44:	2b0e      	cmp	r3, #14
 8008b46:	f200 80ad 	bhi.w	8008ca4 <_dtoa_r+0x484>
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	f000 80aa 	beq.w	8008ca4 <_dtoa_r+0x484>
 8008b50:	f1ba 0f00 	cmp.w	sl, #0
 8008b54:	dd36      	ble.n	8008bc4 <_dtoa_r+0x3a4>
 8008b56:	4ac3      	ldr	r2, [pc, #780]	; (8008e64 <_dtoa_r+0x644>)
 8008b58:	f00a 030f 	and.w	r3, sl, #15
 8008b5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b60:	ed93 7b00 	vldr	d7, [r3]
 8008b64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008b6c:	eeb0 8a47 	vmov.f32	s16, s14
 8008b70:	eef0 8a67 	vmov.f32	s17, s15
 8008b74:	d016      	beq.n	8008ba4 <_dtoa_r+0x384>
 8008b76:	4bbc      	ldr	r3, [pc, #752]	; (8008e68 <_dtoa_r+0x648>)
 8008b78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b80:	f7f7 fe6c 	bl	800085c <__aeabi_ddiv>
 8008b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b88:	f007 070f 	and.w	r7, r7, #15
 8008b8c:	2503      	movs	r5, #3
 8008b8e:	4eb6      	ldr	r6, [pc, #728]	; (8008e68 <_dtoa_r+0x648>)
 8008b90:	b957      	cbnz	r7, 8008ba8 <_dtoa_r+0x388>
 8008b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b96:	ec53 2b18 	vmov	r2, r3, d8
 8008b9a:	f7f7 fe5f 	bl	800085c <__aeabi_ddiv>
 8008b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ba2:	e029      	b.n	8008bf8 <_dtoa_r+0x3d8>
 8008ba4:	2502      	movs	r5, #2
 8008ba6:	e7f2      	b.n	8008b8e <_dtoa_r+0x36e>
 8008ba8:	07f9      	lsls	r1, r7, #31
 8008baa:	d508      	bpl.n	8008bbe <_dtoa_r+0x39e>
 8008bac:	ec51 0b18 	vmov	r0, r1, d8
 8008bb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bb4:	f7f7 fd28 	bl	8000608 <__aeabi_dmul>
 8008bb8:	ec41 0b18 	vmov	d8, r0, r1
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	107f      	asrs	r7, r7, #1
 8008bc0:	3608      	adds	r6, #8
 8008bc2:	e7e5      	b.n	8008b90 <_dtoa_r+0x370>
 8008bc4:	f000 80a6 	beq.w	8008d14 <_dtoa_r+0x4f4>
 8008bc8:	f1ca 0600 	rsb	r6, sl, #0
 8008bcc:	4ba5      	ldr	r3, [pc, #660]	; (8008e64 <_dtoa_r+0x644>)
 8008bce:	4fa6      	ldr	r7, [pc, #664]	; (8008e68 <_dtoa_r+0x648>)
 8008bd0:	f006 020f 	and.w	r2, r6, #15
 8008bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008be0:	f7f7 fd12 	bl	8000608 <__aeabi_dmul>
 8008be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be8:	1136      	asrs	r6, r6, #4
 8008bea:	2300      	movs	r3, #0
 8008bec:	2502      	movs	r5, #2
 8008bee:	2e00      	cmp	r6, #0
 8008bf0:	f040 8085 	bne.w	8008cfe <_dtoa_r+0x4de>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1d2      	bne.n	8008b9e <_dtoa_r+0x37e>
 8008bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 808c 	beq.w	8008d18 <_dtoa_r+0x4f8>
 8008c00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c04:	4b99      	ldr	r3, [pc, #612]	; (8008e6c <_dtoa_r+0x64c>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	4630      	mov	r0, r6
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	f7f7 ff6e 	bl	8000aec <__aeabi_dcmplt>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	f000 8081 	beq.w	8008d18 <_dtoa_r+0x4f8>
 8008c16:	9b01      	ldr	r3, [sp, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d07d      	beq.n	8008d18 <_dtoa_r+0x4f8>
 8008c1c:	f1b9 0f00 	cmp.w	r9, #0
 8008c20:	dd3c      	ble.n	8008c9c <_dtoa_r+0x47c>
 8008c22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c26:	9307      	str	r3, [sp, #28]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	4b91      	ldr	r3, [pc, #580]	; (8008e70 <_dtoa_r+0x650>)
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	4639      	mov	r1, r7
 8008c30:	f7f7 fcea 	bl	8000608 <__aeabi_dmul>
 8008c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c38:	3501      	adds	r5, #1
 8008c3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008c3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c42:	4628      	mov	r0, r5
 8008c44:	f7f7 fc76 	bl	8000534 <__aeabi_i2d>
 8008c48:	4632      	mov	r2, r6
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	f7f7 fcdc 	bl	8000608 <__aeabi_dmul>
 8008c50:	4b88      	ldr	r3, [pc, #544]	; (8008e74 <_dtoa_r+0x654>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	f7f7 fb22 	bl	800029c <__adddf3>
 8008c58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d15c      	bne.n	8008d22 <_dtoa_r+0x502>
 8008c68:	4b83      	ldr	r3, [pc, #524]	; (8008e78 <_dtoa_r+0x658>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 fb12 	bl	8000298 <__aeabi_dsub>
 8008c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c78:	4606      	mov	r6, r0
 8008c7a:	460f      	mov	r7, r1
 8008c7c:	f7f7 ff54 	bl	8000b28 <__aeabi_dcmpgt>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	f040 8296 	bne.w	80091b2 <_dtoa_r+0x992>
 8008c86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 ff2b 	bl	8000aec <__aeabi_dcmplt>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f040 8288 	bne.w	80091ac <_dtoa_r+0x98c>
 8008c9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f2c0 8158 	blt.w	8008f5c <_dtoa_r+0x73c>
 8008cac:	f1ba 0f0e 	cmp.w	sl, #14
 8008cb0:	f300 8154 	bgt.w	8008f5c <_dtoa_r+0x73c>
 8008cb4:	4b6b      	ldr	r3, [pc, #428]	; (8008e64 <_dtoa_r+0x644>)
 8008cb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f280 80e3 	bge.w	8008e8c <_dtoa_r+0x66c>
 8008cc6:	9b01      	ldr	r3, [sp, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f300 80df 	bgt.w	8008e8c <_dtoa_r+0x66c>
 8008cce:	f040 826d 	bne.w	80091ac <_dtoa_r+0x98c>
 8008cd2:	4b69      	ldr	r3, [pc, #420]	; (8008e78 <_dtoa_r+0x658>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	4649      	mov	r1, r9
 8008cda:	f7f7 fc95 	bl	8000608 <__aeabi_dmul>
 8008cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ce2:	f7f7 ff17 	bl	8000b14 <__aeabi_dcmpge>
 8008ce6:	9e01      	ldr	r6, [sp, #4]
 8008ce8:	4637      	mov	r7, r6
 8008cea:	2800      	cmp	r0, #0
 8008cec:	f040 8243 	bne.w	8009176 <_dtoa_r+0x956>
 8008cf0:	9d00      	ldr	r5, [sp, #0]
 8008cf2:	2331      	movs	r3, #49	; 0x31
 8008cf4:	f805 3b01 	strb.w	r3, [r5], #1
 8008cf8:	f10a 0a01 	add.w	sl, sl, #1
 8008cfc:	e23f      	b.n	800917e <_dtoa_r+0x95e>
 8008cfe:	07f2      	lsls	r2, r6, #31
 8008d00:	d505      	bpl.n	8008d0e <_dtoa_r+0x4ee>
 8008d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d06:	f7f7 fc7f 	bl	8000608 <__aeabi_dmul>
 8008d0a:	3501      	adds	r5, #1
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	1076      	asrs	r6, r6, #1
 8008d10:	3708      	adds	r7, #8
 8008d12:	e76c      	b.n	8008bee <_dtoa_r+0x3ce>
 8008d14:	2502      	movs	r5, #2
 8008d16:	e76f      	b.n	8008bf8 <_dtoa_r+0x3d8>
 8008d18:	9b01      	ldr	r3, [sp, #4]
 8008d1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d20:	e78d      	b.n	8008c3e <_dtoa_r+0x41e>
 8008d22:	9900      	ldr	r1, [sp, #0]
 8008d24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d28:	4b4e      	ldr	r3, [pc, #312]	; (8008e64 <_dtoa_r+0x644>)
 8008d2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d2e:	4401      	add	r1, r0
 8008d30:	9102      	str	r1, [sp, #8]
 8008d32:	9908      	ldr	r1, [sp, #32]
 8008d34:	eeb0 8a47 	vmov.f32	s16, s14
 8008d38:	eef0 8a67 	vmov.f32	s17, s15
 8008d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d44:	2900      	cmp	r1, #0
 8008d46:	d045      	beq.n	8008dd4 <_dtoa_r+0x5b4>
 8008d48:	494c      	ldr	r1, [pc, #304]	; (8008e7c <_dtoa_r+0x65c>)
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f7f7 fd86 	bl	800085c <__aeabi_ddiv>
 8008d50:	ec53 2b18 	vmov	r2, r3, d8
 8008d54:	f7f7 faa0 	bl	8000298 <__aeabi_dsub>
 8008d58:	9d00      	ldr	r5, [sp, #0]
 8008d5a:	ec41 0b18 	vmov	d8, r0, r1
 8008d5e:	4639      	mov	r1, r7
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7f7 ff01 	bl	8000b68 <__aeabi_d2iz>
 8008d66:	900c      	str	r0, [sp, #48]	; 0x30
 8008d68:	f7f7 fbe4 	bl	8000534 <__aeabi_i2d>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4630      	mov	r0, r6
 8008d72:	4639      	mov	r1, r7
 8008d74:	f7f7 fa90 	bl	8000298 <__aeabi_dsub>
 8008d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d7a:	3330      	adds	r3, #48	; 0x30
 8008d7c:	f805 3b01 	strb.w	r3, [r5], #1
 8008d80:	ec53 2b18 	vmov	r2, r3, d8
 8008d84:	4606      	mov	r6, r0
 8008d86:	460f      	mov	r7, r1
 8008d88:	f7f7 feb0 	bl	8000aec <__aeabi_dcmplt>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d165      	bne.n	8008e5c <_dtoa_r+0x63c>
 8008d90:	4632      	mov	r2, r6
 8008d92:	463b      	mov	r3, r7
 8008d94:	4935      	ldr	r1, [pc, #212]	; (8008e6c <_dtoa_r+0x64c>)
 8008d96:	2000      	movs	r0, #0
 8008d98:	f7f7 fa7e 	bl	8000298 <__aeabi_dsub>
 8008d9c:	ec53 2b18 	vmov	r2, r3, d8
 8008da0:	f7f7 fea4 	bl	8000aec <__aeabi_dcmplt>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f040 80b9 	bne.w	8008f1c <_dtoa_r+0x6fc>
 8008daa:	9b02      	ldr	r3, [sp, #8]
 8008dac:	429d      	cmp	r5, r3
 8008dae:	f43f af75 	beq.w	8008c9c <_dtoa_r+0x47c>
 8008db2:	4b2f      	ldr	r3, [pc, #188]	; (8008e70 <_dtoa_r+0x650>)
 8008db4:	ec51 0b18 	vmov	r0, r1, d8
 8008db8:	2200      	movs	r2, #0
 8008dba:	f7f7 fc25 	bl	8000608 <__aeabi_dmul>
 8008dbe:	4b2c      	ldr	r3, [pc, #176]	; (8008e70 <_dtoa_r+0x650>)
 8008dc0:	ec41 0b18 	vmov	d8, r0, r1
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	4639      	mov	r1, r7
 8008dca:	f7f7 fc1d 	bl	8000608 <__aeabi_dmul>
 8008dce:	4606      	mov	r6, r0
 8008dd0:	460f      	mov	r7, r1
 8008dd2:	e7c4      	b.n	8008d5e <_dtoa_r+0x53e>
 8008dd4:	ec51 0b17 	vmov	r0, r1, d7
 8008dd8:	f7f7 fc16 	bl	8000608 <__aeabi_dmul>
 8008ddc:	9b02      	ldr	r3, [sp, #8]
 8008dde:	9d00      	ldr	r5, [sp, #0]
 8008de0:	930c      	str	r3, [sp, #48]	; 0x30
 8008de2:	ec41 0b18 	vmov	d8, r0, r1
 8008de6:	4639      	mov	r1, r7
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7f7 febd 	bl	8000b68 <__aeabi_d2iz>
 8008dee:	9011      	str	r0, [sp, #68]	; 0x44
 8008df0:	f7f7 fba0 	bl	8000534 <__aeabi_i2d>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 fa4c 	bl	8000298 <__aeabi_dsub>
 8008e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e02:	3330      	adds	r3, #48	; 0x30
 8008e04:	f805 3b01 	strb.w	r3, [r5], #1
 8008e08:	9b02      	ldr	r3, [sp, #8]
 8008e0a:	429d      	cmp	r5, r3
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	460f      	mov	r7, r1
 8008e10:	f04f 0200 	mov.w	r2, #0
 8008e14:	d134      	bne.n	8008e80 <_dtoa_r+0x660>
 8008e16:	4b19      	ldr	r3, [pc, #100]	; (8008e7c <_dtoa_r+0x65c>)
 8008e18:	ec51 0b18 	vmov	r0, r1, d8
 8008e1c:	f7f7 fa3e 	bl	800029c <__adddf3>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4630      	mov	r0, r6
 8008e26:	4639      	mov	r1, r7
 8008e28:	f7f7 fe7e 	bl	8000b28 <__aeabi_dcmpgt>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d175      	bne.n	8008f1c <_dtoa_r+0x6fc>
 8008e30:	ec53 2b18 	vmov	r2, r3, d8
 8008e34:	4911      	ldr	r1, [pc, #68]	; (8008e7c <_dtoa_r+0x65c>)
 8008e36:	2000      	movs	r0, #0
 8008e38:	f7f7 fa2e 	bl	8000298 <__aeabi_dsub>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4630      	mov	r0, r6
 8008e42:	4639      	mov	r1, r7
 8008e44:	f7f7 fe52 	bl	8000aec <__aeabi_dcmplt>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	f43f af27 	beq.w	8008c9c <_dtoa_r+0x47c>
 8008e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e50:	1e6b      	subs	r3, r5, #1
 8008e52:	930c      	str	r3, [sp, #48]	; 0x30
 8008e54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e58:	2b30      	cmp	r3, #48	; 0x30
 8008e5a:	d0f8      	beq.n	8008e4e <_dtoa_r+0x62e>
 8008e5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008e60:	e04a      	b.n	8008ef8 <_dtoa_r+0x6d8>
 8008e62:	bf00      	nop
 8008e64:	08066980 	.word	0x08066980
 8008e68:	08066958 	.word	0x08066958
 8008e6c:	3ff00000 	.word	0x3ff00000
 8008e70:	40240000 	.word	0x40240000
 8008e74:	401c0000 	.word	0x401c0000
 8008e78:	40140000 	.word	0x40140000
 8008e7c:	3fe00000 	.word	0x3fe00000
 8008e80:	4baf      	ldr	r3, [pc, #700]	; (8009140 <_dtoa_r+0x920>)
 8008e82:	f7f7 fbc1 	bl	8000608 <__aeabi_dmul>
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	e7ac      	b.n	8008de6 <_dtoa_r+0x5c6>
 8008e8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e90:	9d00      	ldr	r5, [sp, #0]
 8008e92:	4642      	mov	r2, r8
 8008e94:	464b      	mov	r3, r9
 8008e96:	4630      	mov	r0, r6
 8008e98:	4639      	mov	r1, r7
 8008e9a:	f7f7 fcdf 	bl	800085c <__aeabi_ddiv>
 8008e9e:	f7f7 fe63 	bl	8000b68 <__aeabi_d2iz>
 8008ea2:	9002      	str	r0, [sp, #8]
 8008ea4:	f7f7 fb46 	bl	8000534 <__aeabi_i2d>
 8008ea8:	4642      	mov	r2, r8
 8008eaa:	464b      	mov	r3, r9
 8008eac:	f7f7 fbac 	bl	8000608 <__aeabi_dmul>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	f7f7 f9ee 	bl	8000298 <__aeabi_dsub>
 8008ebc:	9e02      	ldr	r6, [sp, #8]
 8008ebe:	9f01      	ldr	r7, [sp, #4]
 8008ec0:	3630      	adds	r6, #48	; 0x30
 8008ec2:	f805 6b01 	strb.w	r6, [r5], #1
 8008ec6:	9e00      	ldr	r6, [sp, #0]
 8008ec8:	1bae      	subs	r6, r5, r6
 8008eca:	42b7      	cmp	r7, r6
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	d137      	bne.n	8008f42 <_dtoa_r+0x722>
 8008ed2:	f7f7 f9e3 	bl	800029c <__adddf3>
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	464b      	mov	r3, r9
 8008eda:	4606      	mov	r6, r0
 8008edc:	460f      	mov	r7, r1
 8008ede:	f7f7 fe23 	bl	8000b28 <__aeabi_dcmpgt>
 8008ee2:	b9c8      	cbnz	r0, 8008f18 <_dtoa_r+0x6f8>
 8008ee4:	4642      	mov	r2, r8
 8008ee6:	464b      	mov	r3, r9
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	f7f7 fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ef0:	b110      	cbz	r0, 8008ef8 <_dtoa_r+0x6d8>
 8008ef2:	9b02      	ldr	r3, [sp, #8]
 8008ef4:	07d9      	lsls	r1, r3, #31
 8008ef6:	d40f      	bmi.n	8008f18 <_dtoa_r+0x6f8>
 8008ef8:	4620      	mov	r0, r4
 8008efa:	4659      	mov	r1, fp
 8008efc:	f000 fcec 	bl	80098d8 <_Bfree>
 8008f00:	2300      	movs	r3, #0
 8008f02:	702b      	strb	r3, [r5, #0]
 8008f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f06:	f10a 0001 	add.w	r0, sl, #1
 8008f0a:	6018      	str	r0, [r3, #0]
 8008f0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f43f acd8 	beq.w	80088c4 <_dtoa_r+0xa4>
 8008f14:	601d      	str	r5, [r3, #0]
 8008f16:	e4d5      	b.n	80088c4 <_dtoa_r+0xa4>
 8008f18:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f1c:	462b      	mov	r3, r5
 8008f1e:	461d      	mov	r5, r3
 8008f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f24:	2a39      	cmp	r2, #57	; 0x39
 8008f26:	d108      	bne.n	8008f3a <_dtoa_r+0x71a>
 8008f28:	9a00      	ldr	r2, [sp, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d1f7      	bne.n	8008f1e <_dtoa_r+0x6fe>
 8008f2e:	9a07      	ldr	r2, [sp, #28]
 8008f30:	9900      	ldr	r1, [sp, #0]
 8008f32:	3201      	adds	r2, #1
 8008f34:	9207      	str	r2, [sp, #28]
 8008f36:	2230      	movs	r2, #48	; 0x30
 8008f38:	700a      	strb	r2, [r1, #0]
 8008f3a:	781a      	ldrb	r2, [r3, #0]
 8008f3c:	3201      	adds	r2, #1
 8008f3e:	701a      	strb	r2, [r3, #0]
 8008f40:	e78c      	b.n	8008e5c <_dtoa_r+0x63c>
 8008f42:	4b7f      	ldr	r3, [pc, #508]	; (8009140 <_dtoa_r+0x920>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	f7f7 fb5f 	bl	8000608 <__aeabi_dmul>
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4606      	mov	r6, r0
 8008f50:	460f      	mov	r7, r1
 8008f52:	f7f7 fdc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d09b      	beq.n	8008e92 <_dtoa_r+0x672>
 8008f5a:	e7cd      	b.n	8008ef8 <_dtoa_r+0x6d8>
 8008f5c:	9a08      	ldr	r2, [sp, #32]
 8008f5e:	2a00      	cmp	r2, #0
 8008f60:	f000 80c4 	beq.w	80090ec <_dtoa_r+0x8cc>
 8008f64:	9a05      	ldr	r2, [sp, #20]
 8008f66:	2a01      	cmp	r2, #1
 8008f68:	f300 80a8 	bgt.w	80090bc <_dtoa_r+0x89c>
 8008f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f6e:	2a00      	cmp	r2, #0
 8008f70:	f000 80a0 	beq.w	80090b4 <_dtoa_r+0x894>
 8008f74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f78:	9e06      	ldr	r6, [sp, #24]
 8008f7a:	4645      	mov	r5, r8
 8008f7c:	9a04      	ldr	r2, [sp, #16]
 8008f7e:	2101      	movs	r1, #1
 8008f80:	441a      	add	r2, r3
 8008f82:	4620      	mov	r0, r4
 8008f84:	4498      	add	r8, r3
 8008f86:	9204      	str	r2, [sp, #16]
 8008f88:	f000 fd62 	bl	8009a50 <__i2b>
 8008f8c:	4607      	mov	r7, r0
 8008f8e:	2d00      	cmp	r5, #0
 8008f90:	dd0b      	ble.n	8008faa <_dtoa_r+0x78a>
 8008f92:	9b04      	ldr	r3, [sp, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dd08      	ble.n	8008faa <_dtoa_r+0x78a>
 8008f98:	42ab      	cmp	r3, r5
 8008f9a:	9a04      	ldr	r2, [sp, #16]
 8008f9c:	bfa8      	it	ge
 8008f9e:	462b      	movge	r3, r5
 8008fa0:	eba8 0803 	sub.w	r8, r8, r3
 8008fa4:	1aed      	subs	r5, r5, r3
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	b1fb      	cbz	r3, 8008fee <_dtoa_r+0x7ce>
 8008fae:	9b08      	ldr	r3, [sp, #32]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 809f 	beq.w	80090f4 <_dtoa_r+0x8d4>
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	dd11      	ble.n	8008fde <_dtoa_r+0x7be>
 8008fba:	4639      	mov	r1, r7
 8008fbc:	4632      	mov	r2, r6
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 fe02 	bl	8009bc8 <__pow5mult>
 8008fc4:	465a      	mov	r2, fp
 8008fc6:	4601      	mov	r1, r0
 8008fc8:	4607      	mov	r7, r0
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 fd56 	bl	8009a7c <__multiply>
 8008fd0:	4659      	mov	r1, fp
 8008fd2:	9007      	str	r0, [sp, #28]
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f000 fc7f 	bl	80098d8 <_Bfree>
 8008fda:	9b07      	ldr	r3, [sp, #28]
 8008fdc:	469b      	mov	fp, r3
 8008fde:	9b06      	ldr	r3, [sp, #24]
 8008fe0:	1b9a      	subs	r2, r3, r6
 8008fe2:	d004      	beq.n	8008fee <_dtoa_r+0x7ce>
 8008fe4:	4659      	mov	r1, fp
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fdee 	bl	8009bc8 <__pow5mult>
 8008fec:	4683      	mov	fp, r0
 8008fee:	2101      	movs	r1, #1
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fd2d 	bl	8009a50 <__i2b>
 8008ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	dd7c      	ble.n	80090f8 <_dtoa_r+0x8d8>
 8008ffe:	461a      	mov	r2, r3
 8009000:	4601      	mov	r1, r0
 8009002:	4620      	mov	r0, r4
 8009004:	f000 fde0 	bl	8009bc8 <__pow5mult>
 8009008:	9b05      	ldr	r3, [sp, #20]
 800900a:	2b01      	cmp	r3, #1
 800900c:	4606      	mov	r6, r0
 800900e:	dd76      	ble.n	80090fe <_dtoa_r+0x8de>
 8009010:	2300      	movs	r3, #0
 8009012:	9306      	str	r3, [sp, #24]
 8009014:	6933      	ldr	r3, [r6, #16]
 8009016:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800901a:	6918      	ldr	r0, [r3, #16]
 800901c:	f000 fcc8 	bl	80099b0 <__hi0bits>
 8009020:	f1c0 0020 	rsb	r0, r0, #32
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	4418      	add	r0, r3
 8009028:	f010 001f 	ands.w	r0, r0, #31
 800902c:	f000 8086 	beq.w	800913c <_dtoa_r+0x91c>
 8009030:	f1c0 0320 	rsb	r3, r0, #32
 8009034:	2b04      	cmp	r3, #4
 8009036:	dd7f      	ble.n	8009138 <_dtoa_r+0x918>
 8009038:	f1c0 001c 	rsb	r0, r0, #28
 800903c:	9b04      	ldr	r3, [sp, #16]
 800903e:	4403      	add	r3, r0
 8009040:	4480      	add	r8, r0
 8009042:	4405      	add	r5, r0
 8009044:	9304      	str	r3, [sp, #16]
 8009046:	f1b8 0f00 	cmp.w	r8, #0
 800904a:	dd05      	ble.n	8009058 <_dtoa_r+0x838>
 800904c:	4659      	mov	r1, fp
 800904e:	4642      	mov	r2, r8
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fe13 	bl	8009c7c <__lshift>
 8009056:	4683      	mov	fp, r0
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	dd05      	ble.n	800906a <_dtoa_r+0x84a>
 800905e:	4631      	mov	r1, r6
 8009060:	461a      	mov	r2, r3
 8009062:	4620      	mov	r0, r4
 8009064:	f000 fe0a 	bl	8009c7c <__lshift>
 8009068:	4606      	mov	r6, r0
 800906a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800906c:	2b00      	cmp	r3, #0
 800906e:	d069      	beq.n	8009144 <_dtoa_r+0x924>
 8009070:	4631      	mov	r1, r6
 8009072:	4658      	mov	r0, fp
 8009074:	f000 fe6e 	bl	8009d54 <__mcmp>
 8009078:	2800      	cmp	r0, #0
 800907a:	da63      	bge.n	8009144 <_dtoa_r+0x924>
 800907c:	2300      	movs	r3, #0
 800907e:	4659      	mov	r1, fp
 8009080:	220a      	movs	r2, #10
 8009082:	4620      	mov	r0, r4
 8009084:	f000 fc4a 	bl	800991c <__multadd>
 8009088:	9b08      	ldr	r3, [sp, #32]
 800908a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800908e:	4683      	mov	fp, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 818f 	beq.w	80093b4 <_dtoa_r+0xb94>
 8009096:	4639      	mov	r1, r7
 8009098:	2300      	movs	r3, #0
 800909a:	220a      	movs	r2, #10
 800909c:	4620      	mov	r0, r4
 800909e:	f000 fc3d 	bl	800991c <__multadd>
 80090a2:	f1b9 0f00 	cmp.w	r9, #0
 80090a6:	4607      	mov	r7, r0
 80090a8:	f300 808e 	bgt.w	80091c8 <_dtoa_r+0x9a8>
 80090ac:	9b05      	ldr	r3, [sp, #20]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	dc50      	bgt.n	8009154 <_dtoa_r+0x934>
 80090b2:	e089      	b.n	80091c8 <_dtoa_r+0x9a8>
 80090b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090ba:	e75d      	b.n	8008f78 <_dtoa_r+0x758>
 80090bc:	9b01      	ldr	r3, [sp, #4]
 80090be:	1e5e      	subs	r6, r3, #1
 80090c0:	9b06      	ldr	r3, [sp, #24]
 80090c2:	42b3      	cmp	r3, r6
 80090c4:	bfbf      	itttt	lt
 80090c6:	9b06      	ldrlt	r3, [sp, #24]
 80090c8:	9606      	strlt	r6, [sp, #24]
 80090ca:	1af2      	sublt	r2, r6, r3
 80090cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80090ce:	bfb6      	itet	lt
 80090d0:	189b      	addlt	r3, r3, r2
 80090d2:	1b9e      	subge	r6, r3, r6
 80090d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80090d6:	9b01      	ldr	r3, [sp, #4]
 80090d8:	bfb8      	it	lt
 80090da:	2600      	movlt	r6, #0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bfb5      	itete	lt
 80090e0:	eba8 0503 	sublt.w	r5, r8, r3
 80090e4:	9b01      	ldrge	r3, [sp, #4]
 80090e6:	2300      	movlt	r3, #0
 80090e8:	4645      	movge	r5, r8
 80090ea:	e747      	b.n	8008f7c <_dtoa_r+0x75c>
 80090ec:	9e06      	ldr	r6, [sp, #24]
 80090ee:	9f08      	ldr	r7, [sp, #32]
 80090f0:	4645      	mov	r5, r8
 80090f2:	e74c      	b.n	8008f8e <_dtoa_r+0x76e>
 80090f4:	9a06      	ldr	r2, [sp, #24]
 80090f6:	e775      	b.n	8008fe4 <_dtoa_r+0x7c4>
 80090f8:	9b05      	ldr	r3, [sp, #20]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	dc18      	bgt.n	8009130 <_dtoa_r+0x910>
 80090fe:	9b02      	ldr	r3, [sp, #8]
 8009100:	b9b3      	cbnz	r3, 8009130 <_dtoa_r+0x910>
 8009102:	9b03      	ldr	r3, [sp, #12]
 8009104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009108:	b9a3      	cbnz	r3, 8009134 <_dtoa_r+0x914>
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009110:	0d1b      	lsrs	r3, r3, #20
 8009112:	051b      	lsls	r3, r3, #20
 8009114:	b12b      	cbz	r3, 8009122 <_dtoa_r+0x902>
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	3301      	adds	r3, #1
 800911a:	9304      	str	r3, [sp, #16]
 800911c:	f108 0801 	add.w	r8, r8, #1
 8009120:	2301      	movs	r3, #1
 8009122:	9306      	str	r3, [sp, #24]
 8009124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009126:	2b00      	cmp	r3, #0
 8009128:	f47f af74 	bne.w	8009014 <_dtoa_r+0x7f4>
 800912c:	2001      	movs	r0, #1
 800912e:	e779      	b.n	8009024 <_dtoa_r+0x804>
 8009130:	2300      	movs	r3, #0
 8009132:	e7f6      	b.n	8009122 <_dtoa_r+0x902>
 8009134:	9b02      	ldr	r3, [sp, #8]
 8009136:	e7f4      	b.n	8009122 <_dtoa_r+0x902>
 8009138:	d085      	beq.n	8009046 <_dtoa_r+0x826>
 800913a:	4618      	mov	r0, r3
 800913c:	301c      	adds	r0, #28
 800913e:	e77d      	b.n	800903c <_dtoa_r+0x81c>
 8009140:	40240000 	.word	0x40240000
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	dc38      	bgt.n	80091bc <_dtoa_r+0x99c>
 800914a:	9b05      	ldr	r3, [sp, #20]
 800914c:	2b02      	cmp	r3, #2
 800914e:	dd35      	ble.n	80091bc <_dtoa_r+0x99c>
 8009150:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009154:	f1b9 0f00 	cmp.w	r9, #0
 8009158:	d10d      	bne.n	8009176 <_dtoa_r+0x956>
 800915a:	4631      	mov	r1, r6
 800915c:	464b      	mov	r3, r9
 800915e:	2205      	movs	r2, #5
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fbdb 	bl	800991c <__multadd>
 8009166:	4601      	mov	r1, r0
 8009168:	4606      	mov	r6, r0
 800916a:	4658      	mov	r0, fp
 800916c:	f000 fdf2 	bl	8009d54 <__mcmp>
 8009170:	2800      	cmp	r0, #0
 8009172:	f73f adbd 	bgt.w	8008cf0 <_dtoa_r+0x4d0>
 8009176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009178:	9d00      	ldr	r5, [sp, #0]
 800917a:	ea6f 0a03 	mvn.w	sl, r3
 800917e:	f04f 0800 	mov.w	r8, #0
 8009182:	4631      	mov	r1, r6
 8009184:	4620      	mov	r0, r4
 8009186:	f000 fba7 	bl	80098d8 <_Bfree>
 800918a:	2f00      	cmp	r7, #0
 800918c:	f43f aeb4 	beq.w	8008ef8 <_dtoa_r+0x6d8>
 8009190:	f1b8 0f00 	cmp.w	r8, #0
 8009194:	d005      	beq.n	80091a2 <_dtoa_r+0x982>
 8009196:	45b8      	cmp	r8, r7
 8009198:	d003      	beq.n	80091a2 <_dtoa_r+0x982>
 800919a:	4641      	mov	r1, r8
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fb9b 	bl	80098d8 <_Bfree>
 80091a2:	4639      	mov	r1, r7
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fb97 	bl	80098d8 <_Bfree>
 80091aa:	e6a5      	b.n	8008ef8 <_dtoa_r+0x6d8>
 80091ac:	2600      	movs	r6, #0
 80091ae:	4637      	mov	r7, r6
 80091b0:	e7e1      	b.n	8009176 <_dtoa_r+0x956>
 80091b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80091b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80091b8:	4637      	mov	r7, r6
 80091ba:	e599      	b.n	8008cf0 <_dtoa_r+0x4d0>
 80091bc:	9b08      	ldr	r3, [sp, #32]
 80091be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 80fd 	beq.w	80093c2 <_dtoa_r+0xba2>
 80091c8:	2d00      	cmp	r5, #0
 80091ca:	dd05      	ble.n	80091d8 <_dtoa_r+0x9b8>
 80091cc:	4639      	mov	r1, r7
 80091ce:	462a      	mov	r2, r5
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 fd53 	bl	8009c7c <__lshift>
 80091d6:	4607      	mov	r7, r0
 80091d8:	9b06      	ldr	r3, [sp, #24]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d05c      	beq.n	8009298 <_dtoa_r+0xa78>
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fb39 	bl	8009858 <_Balloc>
 80091e6:	4605      	mov	r5, r0
 80091e8:	b928      	cbnz	r0, 80091f6 <_dtoa_r+0x9d6>
 80091ea:	4b80      	ldr	r3, [pc, #512]	; (80093ec <_dtoa_r+0xbcc>)
 80091ec:	4602      	mov	r2, r0
 80091ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091f2:	f7ff bb2e 	b.w	8008852 <_dtoa_r+0x32>
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	3202      	adds	r2, #2
 80091fa:	0092      	lsls	r2, r2, #2
 80091fc:	f107 010c 	add.w	r1, r7, #12
 8009200:	300c      	adds	r0, #12
 8009202:	f7fe fbbf 	bl	8007984 <memcpy>
 8009206:	2201      	movs	r2, #1
 8009208:	4629      	mov	r1, r5
 800920a:	4620      	mov	r0, r4
 800920c:	f000 fd36 	bl	8009c7c <__lshift>
 8009210:	9b00      	ldr	r3, [sp, #0]
 8009212:	3301      	adds	r3, #1
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	9b00      	ldr	r3, [sp, #0]
 8009218:	444b      	add	r3, r9
 800921a:	9307      	str	r3, [sp, #28]
 800921c:	9b02      	ldr	r3, [sp, #8]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	46b8      	mov	r8, r7
 8009224:	9306      	str	r3, [sp, #24]
 8009226:	4607      	mov	r7, r0
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	4631      	mov	r1, r6
 800922c:	3b01      	subs	r3, #1
 800922e:	4658      	mov	r0, fp
 8009230:	9302      	str	r3, [sp, #8]
 8009232:	f7ff fa67 	bl	8008704 <quorem>
 8009236:	4603      	mov	r3, r0
 8009238:	3330      	adds	r3, #48	; 0x30
 800923a:	9004      	str	r0, [sp, #16]
 800923c:	4641      	mov	r1, r8
 800923e:	4658      	mov	r0, fp
 8009240:	9308      	str	r3, [sp, #32]
 8009242:	f000 fd87 	bl	8009d54 <__mcmp>
 8009246:	463a      	mov	r2, r7
 8009248:	4681      	mov	r9, r0
 800924a:	4631      	mov	r1, r6
 800924c:	4620      	mov	r0, r4
 800924e:	f000 fd9d 	bl	8009d8c <__mdiff>
 8009252:	68c2      	ldr	r2, [r0, #12]
 8009254:	9b08      	ldr	r3, [sp, #32]
 8009256:	4605      	mov	r5, r0
 8009258:	bb02      	cbnz	r2, 800929c <_dtoa_r+0xa7c>
 800925a:	4601      	mov	r1, r0
 800925c:	4658      	mov	r0, fp
 800925e:	f000 fd79 	bl	8009d54 <__mcmp>
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	4602      	mov	r2, r0
 8009266:	4629      	mov	r1, r5
 8009268:	4620      	mov	r0, r4
 800926a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800926e:	f000 fb33 	bl	80098d8 <_Bfree>
 8009272:	9b05      	ldr	r3, [sp, #20]
 8009274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009276:	9d01      	ldr	r5, [sp, #4]
 8009278:	ea43 0102 	orr.w	r1, r3, r2
 800927c:	9b06      	ldr	r3, [sp, #24]
 800927e:	430b      	orrs	r3, r1
 8009280:	9b08      	ldr	r3, [sp, #32]
 8009282:	d10d      	bne.n	80092a0 <_dtoa_r+0xa80>
 8009284:	2b39      	cmp	r3, #57	; 0x39
 8009286:	d029      	beq.n	80092dc <_dtoa_r+0xabc>
 8009288:	f1b9 0f00 	cmp.w	r9, #0
 800928c:	dd01      	ble.n	8009292 <_dtoa_r+0xa72>
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	3331      	adds	r3, #49	; 0x31
 8009292:	9a02      	ldr	r2, [sp, #8]
 8009294:	7013      	strb	r3, [r2, #0]
 8009296:	e774      	b.n	8009182 <_dtoa_r+0x962>
 8009298:	4638      	mov	r0, r7
 800929a:	e7b9      	b.n	8009210 <_dtoa_r+0x9f0>
 800929c:	2201      	movs	r2, #1
 800929e:	e7e2      	b.n	8009266 <_dtoa_r+0xa46>
 80092a0:	f1b9 0f00 	cmp.w	r9, #0
 80092a4:	db06      	blt.n	80092b4 <_dtoa_r+0xa94>
 80092a6:	9905      	ldr	r1, [sp, #20]
 80092a8:	ea41 0909 	orr.w	r9, r1, r9
 80092ac:	9906      	ldr	r1, [sp, #24]
 80092ae:	ea59 0101 	orrs.w	r1, r9, r1
 80092b2:	d120      	bne.n	80092f6 <_dtoa_r+0xad6>
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	ddec      	ble.n	8009292 <_dtoa_r+0xa72>
 80092b8:	4659      	mov	r1, fp
 80092ba:	2201      	movs	r2, #1
 80092bc:	4620      	mov	r0, r4
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	f000 fcdc 	bl	8009c7c <__lshift>
 80092c4:	4631      	mov	r1, r6
 80092c6:	4683      	mov	fp, r0
 80092c8:	f000 fd44 	bl	8009d54 <__mcmp>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	9b01      	ldr	r3, [sp, #4]
 80092d0:	dc02      	bgt.n	80092d8 <_dtoa_r+0xab8>
 80092d2:	d1de      	bne.n	8009292 <_dtoa_r+0xa72>
 80092d4:	07da      	lsls	r2, r3, #31
 80092d6:	d5dc      	bpl.n	8009292 <_dtoa_r+0xa72>
 80092d8:	2b39      	cmp	r3, #57	; 0x39
 80092da:	d1d8      	bne.n	800928e <_dtoa_r+0xa6e>
 80092dc:	9a02      	ldr	r2, [sp, #8]
 80092de:	2339      	movs	r3, #57	; 0x39
 80092e0:	7013      	strb	r3, [r2, #0]
 80092e2:	462b      	mov	r3, r5
 80092e4:	461d      	mov	r5, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092ec:	2a39      	cmp	r2, #57	; 0x39
 80092ee:	d050      	beq.n	8009392 <_dtoa_r+0xb72>
 80092f0:	3201      	adds	r2, #1
 80092f2:	701a      	strb	r2, [r3, #0]
 80092f4:	e745      	b.n	8009182 <_dtoa_r+0x962>
 80092f6:	2a00      	cmp	r2, #0
 80092f8:	dd03      	ble.n	8009302 <_dtoa_r+0xae2>
 80092fa:	2b39      	cmp	r3, #57	; 0x39
 80092fc:	d0ee      	beq.n	80092dc <_dtoa_r+0xabc>
 80092fe:	3301      	adds	r3, #1
 8009300:	e7c7      	b.n	8009292 <_dtoa_r+0xa72>
 8009302:	9a01      	ldr	r2, [sp, #4]
 8009304:	9907      	ldr	r1, [sp, #28]
 8009306:	f802 3c01 	strb.w	r3, [r2, #-1]
 800930a:	428a      	cmp	r2, r1
 800930c:	d02a      	beq.n	8009364 <_dtoa_r+0xb44>
 800930e:	4659      	mov	r1, fp
 8009310:	2300      	movs	r3, #0
 8009312:	220a      	movs	r2, #10
 8009314:	4620      	mov	r0, r4
 8009316:	f000 fb01 	bl	800991c <__multadd>
 800931a:	45b8      	cmp	r8, r7
 800931c:	4683      	mov	fp, r0
 800931e:	f04f 0300 	mov.w	r3, #0
 8009322:	f04f 020a 	mov.w	r2, #10
 8009326:	4641      	mov	r1, r8
 8009328:	4620      	mov	r0, r4
 800932a:	d107      	bne.n	800933c <_dtoa_r+0xb1c>
 800932c:	f000 faf6 	bl	800991c <__multadd>
 8009330:	4680      	mov	r8, r0
 8009332:	4607      	mov	r7, r0
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	3301      	adds	r3, #1
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	e775      	b.n	8009228 <_dtoa_r+0xa08>
 800933c:	f000 faee 	bl	800991c <__multadd>
 8009340:	4639      	mov	r1, r7
 8009342:	4680      	mov	r8, r0
 8009344:	2300      	movs	r3, #0
 8009346:	220a      	movs	r2, #10
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fae7 	bl	800991c <__multadd>
 800934e:	4607      	mov	r7, r0
 8009350:	e7f0      	b.n	8009334 <_dtoa_r+0xb14>
 8009352:	f1b9 0f00 	cmp.w	r9, #0
 8009356:	9a00      	ldr	r2, [sp, #0]
 8009358:	bfcc      	ite	gt
 800935a:	464d      	movgt	r5, r9
 800935c:	2501      	movle	r5, #1
 800935e:	4415      	add	r5, r2
 8009360:	f04f 0800 	mov.w	r8, #0
 8009364:	4659      	mov	r1, fp
 8009366:	2201      	movs	r2, #1
 8009368:	4620      	mov	r0, r4
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	f000 fc86 	bl	8009c7c <__lshift>
 8009370:	4631      	mov	r1, r6
 8009372:	4683      	mov	fp, r0
 8009374:	f000 fcee 	bl	8009d54 <__mcmp>
 8009378:	2800      	cmp	r0, #0
 800937a:	dcb2      	bgt.n	80092e2 <_dtoa_r+0xac2>
 800937c:	d102      	bne.n	8009384 <_dtoa_r+0xb64>
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	07db      	lsls	r3, r3, #31
 8009382:	d4ae      	bmi.n	80092e2 <_dtoa_r+0xac2>
 8009384:	462b      	mov	r3, r5
 8009386:	461d      	mov	r5, r3
 8009388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800938c:	2a30      	cmp	r2, #48	; 0x30
 800938e:	d0fa      	beq.n	8009386 <_dtoa_r+0xb66>
 8009390:	e6f7      	b.n	8009182 <_dtoa_r+0x962>
 8009392:	9a00      	ldr	r2, [sp, #0]
 8009394:	429a      	cmp	r2, r3
 8009396:	d1a5      	bne.n	80092e4 <_dtoa_r+0xac4>
 8009398:	f10a 0a01 	add.w	sl, sl, #1
 800939c:	2331      	movs	r3, #49	; 0x31
 800939e:	e779      	b.n	8009294 <_dtoa_r+0xa74>
 80093a0:	4b13      	ldr	r3, [pc, #76]	; (80093f0 <_dtoa_r+0xbd0>)
 80093a2:	f7ff baaf 	b.w	8008904 <_dtoa_r+0xe4>
 80093a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f47f aa86 	bne.w	80088ba <_dtoa_r+0x9a>
 80093ae:	4b11      	ldr	r3, [pc, #68]	; (80093f4 <_dtoa_r+0xbd4>)
 80093b0:	f7ff baa8 	b.w	8008904 <_dtoa_r+0xe4>
 80093b4:	f1b9 0f00 	cmp.w	r9, #0
 80093b8:	dc03      	bgt.n	80093c2 <_dtoa_r+0xba2>
 80093ba:	9b05      	ldr	r3, [sp, #20]
 80093bc:	2b02      	cmp	r3, #2
 80093be:	f73f aec9 	bgt.w	8009154 <_dtoa_r+0x934>
 80093c2:	9d00      	ldr	r5, [sp, #0]
 80093c4:	4631      	mov	r1, r6
 80093c6:	4658      	mov	r0, fp
 80093c8:	f7ff f99c 	bl	8008704 <quorem>
 80093cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093d0:	f805 3b01 	strb.w	r3, [r5], #1
 80093d4:	9a00      	ldr	r2, [sp, #0]
 80093d6:	1aaa      	subs	r2, r5, r2
 80093d8:	4591      	cmp	r9, r2
 80093da:	ddba      	ble.n	8009352 <_dtoa_r+0xb32>
 80093dc:	4659      	mov	r1, fp
 80093de:	2300      	movs	r3, #0
 80093e0:	220a      	movs	r2, #10
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fa9a 	bl	800991c <__multadd>
 80093e8:	4683      	mov	fp, r0
 80093ea:	e7eb      	b.n	80093c4 <_dtoa_r+0xba4>
 80093ec:	08066887 	.word	0x08066887
 80093f0:	080667e0 	.word	0x080667e0
 80093f4:	08066804 	.word	0x08066804

080093f8 <__sflush_r>:
 80093f8:	898a      	ldrh	r2, [r1, #12]
 80093fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fe:	4605      	mov	r5, r0
 8009400:	0710      	lsls	r0, r2, #28
 8009402:	460c      	mov	r4, r1
 8009404:	d458      	bmi.n	80094b8 <__sflush_r+0xc0>
 8009406:	684b      	ldr	r3, [r1, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	dc05      	bgt.n	8009418 <__sflush_r+0x20>
 800940c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800940e:	2b00      	cmp	r3, #0
 8009410:	dc02      	bgt.n	8009418 <__sflush_r+0x20>
 8009412:	2000      	movs	r0, #0
 8009414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800941a:	2e00      	cmp	r6, #0
 800941c:	d0f9      	beq.n	8009412 <__sflush_r+0x1a>
 800941e:	2300      	movs	r3, #0
 8009420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009424:	682f      	ldr	r7, [r5, #0]
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	d032      	beq.n	8009490 <__sflush_r+0x98>
 800942a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	075a      	lsls	r2, r3, #29
 8009430:	d505      	bpl.n	800943e <__sflush_r+0x46>
 8009432:	6863      	ldr	r3, [r4, #4]
 8009434:	1ac0      	subs	r0, r0, r3
 8009436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009438:	b10b      	cbz	r3, 800943e <__sflush_r+0x46>
 800943a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800943c:	1ac0      	subs	r0, r0, r3
 800943e:	2300      	movs	r3, #0
 8009440:	4602      	mov	r2, r0
 8009442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009444:	6a21      	ldr	r1, [r4, #32]
 8009446:	4628      	mov	r0, r5
 8009448:	47b0      	blx	r6
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	d106      	bne.n	800945e <__sflush_r+0x66>
 8009450:	6829      	ldr	r1, [r5, #0]
 8009452:	291d      	cmp	r1, #29
 8009454:	d82c      	bhi.n	80094b0 <__sflush_r+0xb8>
 8009456:	4a2a      	ldr	r2, [pc, #168]	; (8009500 <__sflush_r+0x108>)
 8009458:	40ca      	lsrs	r2, r1
 800945a:	07d6      	lsls	r6, r2, #31
 800945c:	d528      	bpl.n	80094b0 <__sflush_r+0xb8>
 800945e:	2200      	movs	r2, #0
 8009460:	6062      	str	r2, [r4, #4]
 8009462:	04d9      	lsls	r1, r3, #19
 8009464:	6922      	ldr	r2, [r4, #16]
 8009466:	6022      	str	r2, [r4, #0]
 8009468:	d504      	bpl.n	8009474 <__sflush_r+0x7c>
 800946a:	1c42      	adds	r2, r0, #1
 800946c:	d101      	bne.n	8009472 <__sflush_r+0x7a>
 800946e:	682b      	ldr	r3, [r5, #0]
 8009470:	b903      	cbnz	r3, 8009474 <__sflush_r+0x7c>
 8009472:	6560      	str	r0, [r4, #84]	; 0x54
 8009474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009476:	602f      	str	r7, [r5, #0]
 8009478:	2900      	cmp	r1, #0
 800947a:	d0ca      	beq.n	8009412 <__sflush_r+0x1a>
 800947c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009480:	4299      	cmp	r1, r3
 8009482:	d002      	beq.n	800948a <__sflush_r+0x92>
 8009484:	4628      	mov	r0, r5
 8009486:	f7fe faa3 	bl	80079d0 <_free_r>
 800948a:	2000      	movs	r0, #0
 800948c:	6360      	str	r0, [r4, #52]	; 0x34
 800948e:	e7c1      	b.n	8009414 <__sflush_r+0x1c>
 8009490:	6a21      	ldr	r1, [r4, #32]
 8009492:	2301      	movs	r3, #1
 8009494:	4628      	mov	r0, r5
 8009496:	47b0      	blx	r6
 8009498:	1c41      	adds	r1, r0, #1
 800949a:	d1c7      	bne.n	800942c <__sflush_r+0x34>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0c4      	beq.n	800942c <__sflush_r+0x34>
 80094a2:	2b1d      	cmp	r3, #29
 80094a4:	d001      	beq.n	80094aa <__sflush_r+0xb2>
 80094a6:	2b16      	cmp	r3, #22
 80094a8:	d101      	bne.n	80094ae <__sflush_r+0xb6>
 80094aa:	602f      	str	r7, [r5, #0]
 80094ac:	e7b1      	b.n	8009412 <__sflush_r+0x1a>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	e7ad      	b.n	8009414 <__sflush_r+0x1c>
 80094b8:	690f      	ldr	r7, [r1, #16]
 80094ba:	2f00      	cmp	r7, #0
 80094bc:	d0a9      	beq.n	8009412 <__sflush_r+0x1a>
 80094be:	0793      	lsls	r3, r2, #30
 80094c0:	680e      	ldr	r6, [r1, #0]
 80094c2:	bf08      	it	eq
 80094c4:	694b      	ldreq	r3, [r1, #20]
 80094c6:	600f      	str	r7, [r1, #0]
 80094c8:	bf18      	it	ne
 80094ca:	2300      	movne	r3, #0
 80094cc:	eba6 0807 	sub.w	r8, r6, r7
 80094d0:	608b      	str	r3, [r1, #8]
 80094d2:	f1b8 0f00 	cmp.w	r8, #0
 80094d6:	dd9c      	ble.n	8009412 <__sflush_r+0x1a>
 80094d8:	6a21      	ldr	r1, [r4, #32]
 80094da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094dc:	4643      	mov	r3, r8
 80094de:	463a      	mov	r2, r7
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b0      	blx	r6
 80094e4:	2800      	cmp	r0, #0
 80094e6:	dc06      	bgt.n	80094f6 <__sflush_r+0xfe>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295
 80094f4:	e78e      	b.n	8009414 <__sflush_r+0x1c>
 80094f6:	4407      	add	r7, r0
 80094f8:	eba8 0800 	sub.w	r8, r8, r0
 80094fc:	e7e9      	b.n	80094d2 <__sflush_r+0xda>
 80094fe:	bf00      	nop
 8009500:	20400001 	.word	0x20400001

08009504 <_fflush_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	690b      	ldr	r3, [r1, #16]
 8009508:	4605      	mov	r5, r0
 800950a:	460c      	mov	r4, r1
 800950c:	b913      	cbnz	r3, 8009514 <_fflush_r+0x10>
 800950e:	2500      	movs	r5, #0
 8009510:	4628      	mov	r0, r5
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	b118      	cbz	r0, 800951e <_fflush_r+0x1a>
 8009516:	6983      	ldr	r3, [r0, #24]
 8009518:	b90b      	cbnz	r3, 800951e <_fflush_r+0x1a>
 800951a:	f000 f887 	bl	800962c <__sinit>
 800951e:	4b14      	ldr	r3, [pc, #80]	; (8009570 <_fflush_r+0x6c>)
 8009520:	429c      	cmp	r4, r3
 8009522:	d11b      	bne.n	800955c <_fflush_r+0x58>
 8009524:	686c      	ldr	r4, [r5, #4]
 8009526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0ef      	beq.n	800950e <_fflush_r+0xa>
 800952e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009530:	07d0      	lsls	r0, r2, #31
 8009532:	d404      	bmi.n	800953e <_fflush_r+0x3a>
 8009534:	0599      	lsls	r1, r3, #22
 8009536:	d402      	bmi.n	800953e <_fflush_r+0x3a>
 8009538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800953a:	f000 f91a 	bl	8009772 <__retarget_lock_acquire_recursive>
 800953e:	4628      	mov	r0, r5
 8009540:	4621      	mov	r1, r4
 8009542:	f7ff ff59 	bl	80093f8 <__sflush_r>
 8009546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009548:	07da      	lsls	r2, r3, #31
 800954a:	4605      	mov	r5, r0
 800954c:	d4e0      	bmi.n	8009510 <_fflush_r+0xc>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	059b      	lsls	r3, r3, #22
 8009552:	d4dd      	bmi.n	8009510 <_fflush_r+0xc>
 8009554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009556:	f000 f90d 	bl	8009774 <__retarget_lock_release_recursive>
 800955a:	e7d9      	b.n	8009510 <_fflush_r+0xc>
 800955c:	4b05      	ldr	r3, [pc, #20]	; (8009574 <_fflush_r+0x70>)
 800955e:	429c      	cmp	r4, r3
 8009560:	d101      	bne.n	8009566 <_fflush_r+0x62>
 8009562:	68ac      	ldr	r4, [r5, #8]
 8009564:	e7df      	b.n	8009526 <_fflush_r+0x22>
 8009566:	4b04      	ldr	r3, [pc, #16]	; (8009578 <_fflush_r+0x74>)
 8009568:	429c      	cmp	r4, r3
 800956a:	bf08      	it	eq
 800956c:	68ec      	ldreq	r4, [r5, #12]
 800956e:	e7da      	b.n	8009526 <_fflush_r+0x22>
 8009570:	080668b8 	.word	0x080668b8
 8009574:	080668d8 	.word	0x080668d8
 8009578:	08066898 	.word	0x08066898

0800957c <std>:
 800957c:	2300      	movs	r3, #0
 800957e:	b510      	push	{r4, lr}
 8009580:	4604      	mov	r4, r0
 8009582:	e9c0 3300 	strd	r3, r3, [r0]
 8009586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800958a:	6083      	str	r3, [r0, #8]
 800958c:	8181      	strh	r1, [r0, #12]
 800958e:	6643      	str	r3, [r0, #100]	; 0x64
 8009590:	81c2      	strh	r2, [r0, #14]
 8009592:	6183      	str	r3, [r0, #24]
 8009594:	4619      	mov	r1, r3
 8009596:	2208      	movs	r2, #8
 8009598:	305c      	adds	r0, #92	; 0x5c
 800959a:	f7fe fa01 	bl	80079a0 <memset>
 800959e:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <std+0x38>)
 80095a0:	6263      	str	r3, [r4, #36]	; 0x24
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <std+0x3c>)
 80095a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <std+0x40>)
 80095a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095aa:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <std+0x44>)
 80095ac:	6224      	str	r4, [r4, #32]
 80095ae:	6323      	str	r3, [r4, #48]	; 0x30
 80095b0:	bd10      	pop	{r4, pc}
 80095b2:	bf00      	nop
 80095b4:	0800a50d 	.word	0x0800a50d
 80095b8:	0800a52f 	.word	0x0800a52f
 80095bc:	0800a567 	.word	0x0800a567
 80095c0:	0800a58b 	.word	0x0800a58b

080095c4 <_cleanup_r>:
 80095c4:	4901      	ldr	r1, [pc, #4]	; (80095cc <_cleanup_r+0x8>)
 80095c6:	f000 b8af 	b.w	8009728 <_fwalk_reent>
 80095ca:	bf00      	nop
 80095cc:	08009505 	.word	0x08009505

080095d0 <__sfmoreglue>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	1e4a      	subs	r2, r1, #1
 80095d4:	2568      	movs	r5, #104	; 0x68
 80095d6:	4355      	muls	r5, r2
 80095d8:	460e      	mov	r6, r1
 80095da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095de:	f7fe fa47 	bl	8007a70 <_malloc_r>
 80095e2:	4604      	mov	r4, r0
 80095e4:	b140      	cbz	r0, 80095f8 <__sfmoreglue+0x28>
 80095e6:	2100      	movs	r1, #0
 80095e8:	e9c0 1600 	strd	r1, r6, [r0]
 80095ec:	300c      	adds	r0, #12
 80095ee:	60a0      	str	r0, [r4, #8]
 80095f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095f4:	f7fe f9d4 	bl	80079a0 <memset>
 80095f8:	4620      	mov	r0, r4
 80095fa:	bd70      	pop	{r4, r5, r6, pc}

080095fc <__sfp_lock_acquire>:
 80095fc:	4801      	ldr	r0, [pc, #4]	; (8009604 <__sfp_lock_acquire+0x8>)
 80095fe:	f000 b8b8 	b.w	8009772 <__retarget_lock_acquire_recursive>
 8009602:	bf00      	nop
 8009604:	20002bec 	.word	0x20002bec

08009608 <__sfp_lock_release>:
 8009608:	4801      	ldr	r0, [pc, #4]	; (8009610 <__sfp_lock_release+0x8>)
 800960a:	f000 b8b3 	b.w	8009774 <__retarget_lock_release_recursive>
 800960e:	bf00      	nop
 8009610:	20002bec 	.word	0x20002bec

08009614 <__sinit_lock_acquire>:
 8009614:	4801      	ldr	r0, [pc, #4]	; (800961c <__sinit_lock_acquire+0x8>)
 8009616:	f000 b8ac 	b.w	8009772 <__retarget_lock_acquire_recursive>
 800961a:	bf00      	nop
 800961c:	20002be7 	.word	0x20002be7

08009620 <__sinit_lock_release>:
 8009620:	4801      	ldr	r0, [pc, #4]	; (8009628 <__sinit_lock_release+0x8>)
 8009622:	f000 b8a7 	b.w	8009774 <__retarget_lock_release_recursive>
 8009626:	bf00      	nop
 8009628:	20002be7 	.word	0x20002be7

0800962c <__sinit>:
 800962c:	b510      	push	{r4, lr}
 800962e:	4604      	mov	r4, r0
 8009630:	f7ff fff0 	bl	8009614 <__sinit_lock_acquire>
 8009634:	69a3      	ldr	r3, [r4, #24]
 8009636:	b11b      	cbz	r3, 8009640 <__sinit+0x14>
 8009638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800963c:	f7ff bff0 	b.w	8009620 <__sinit_lock_release>
 8009640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009644:	6523      	str	r3, [r4, #80]	; 0x50
 8009646:	4b13      	ldr	r3, [pc, #76]	; (8009694 <__sinit+0x68>)
 8009648:	4a13      	ldr	r2, [pc, #76]	; (8009698 <__sinit+0x6c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	62a2      	str	r2, [r4, #40]	; 0x28
 800964e:	42a3      	cmp	r3, r4
 8009650:	bf04      	itt	eq
 8009652:	2301      	moveq	r3, #1
 8009654:	61a3      	streq	r3, [r4, #24]
 8009656:	4620      	mov	r0, r4
 8009658:	f000 f820 	bl	800969c <__sfp>
 800965c:	6060      	str	r0, [r4, #4]
 800965e:	4620      	mov	r0, r4
 8009660:	f000 f81c 	bl	800969c <__sfp>
 8009664:	60a0      	str	r0, [r4, #8]
 8009666:	4620      	mov	r0, r4
 8009668:	f000 f818 	bl	800969c <__sfp>
 800966c:	2200      	movs	r2, #0
 800966e:	60e0      	str	r0, [r4, #12]
 8009670:	2104      	movs	r1, #4
 8009672:	6860      	ldr	r0, [r4, #4]
 8009674:	f7ff ff82 	bl	800957c <std>
 8009678:	68a0      	ldr	r0, [r4, #8]
 800967a:	2201      	movs	r2, #1
 800967c:	2109      	movs	r1, #9
 800967e:	f7ff ff7d 	bl	800957c <std>
 8009682:	68e0      	ldr	r0, [r4, #12]
 8009684:	2202      	movs	r2, #2
 8009686:	2112      	movs	r1, #18
 8009688:	f7ff ff78 	bl	800957c <std>
 800968c:	2301      	movs	r3, #1
 800968e:	61a3      	str	r3, [r4, #24]
 8009690:	e7d2      	b.n	8009638 <__sinit+0xc>
 8009692:	bf00      	nop
 8009694:	080667cc 	.word	0x080667cc
 8009698:	080095c5 	.word	0x080095c5

0800969c <__sfp>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	4607      	mov	r7, r0
 80096a0:	f7ff ffac 	bl	80095fc <__sfp_lock_acquire>
 80096a4:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <__sfp+0x84>)
 80096a6:	681e      	ldr	r6, [r3, #0]
 80096a8:	69b3      	ldr	r3, [r6, #24]
 80096aa:	b913      	cbnz	r3, 80096b2 <__sfp+0x16>
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff ffbd 	bl	800962c <__sinit>
 80096b2:	3648      	adds	r6, #72	; 0x48
 80096b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	d503      	bpl.n	80096c4 <__sfp+0x28>
 80096bc:	6833      	ldr	r3, [r6, #0]
 80096be:	b30b      	cbz	r3, 8009704 <__sfp+0x68>
 80096c0:	6836      	ldr	r6, [r6, #0]
 80096c2:	e7f7      	b.n	80096b4 <__sfp+0x18>
 80096c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096c8:	b9d5      	cbnz	r5, 8009700 <__sfp+0x64>
 80096ca:	4b16      	ldr	r3, [pc, #88]	; (8009724 <__sfp+0x88>)
 80096cc:	60e3      	str	r3, [r4, #12]
 80096ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096d2:	6665      	str	r5, [r4, #100]	; 0x64
 80096d4:	f000 f84c 	bl	8009770 <__retarget_lock_init_recursive>
 80096d8:	f7ff ff96 	bl	8009608 <__sfp_lock_release>
 80096dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096e4:	6025      	str	r5, [r4, #0]
 80096e6:	61a5      	str	r5, [r4, #24]
 80096e8:	2208      	movs	r2, #8
 80096ea:	4629      	mov	r1, r5
 80096ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096f0:	f7fe f956 	bl	80079a0 <memset>
 80096f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096fc:	4620      	mov	r0, r4
 80096fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009700:	3468      	adds	r4, #104	; 0x68
 8009702:	e7d9      	b.n	80096b8 <__sfp+0x1c>
 8009704:	2104      	movs	r1, #4
 8009706:	4638      	mov	r0, r7
 8009708:	f7ff ff62 	bl	80095d0 <__sfmoreglue>
 800970c:	4604      	mov	r4, r0
 800970e:	6030      	str	r0, [r6, #0]
 8009710:	2800      	cmp	r0, #0
 8009712:	d1d5      	bne.n	80096c0 <__sfp+0x24>
 8009714:	f7ff ff78 	bl	8009608 <__sfp_lock_release>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	e7ee      	b.n	80096fc <__sfp+0x60>
 800971e:	bf00      	nop
 8009720:	080667cc 	.word	0x080667cc
 8009724:	ffff0001 	.word	0xffff0001

08009728 <_fwalk_reent>:
 8009728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800972c:	4606      	mov	r6, r0
 800972e:	4688      	mov	r8, r1
 8009730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009734:	2700      	movs	r7, #0
 8009736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800973a:	f1b9 0901 	subs.w	r9, r9, #1
 800973e:	d505      	bpl.n	800974c <_fwalk_reent+0x24>
 8009740:	6824      	ldr	r4, [r4, #0]
 8009742:	2c00      	cmp	r4, #0
 8009744:	d1f7      	bne.n	8009736 <_fwalk_reent+0xe>
 8009746:	4638      	mov	r0, r7
 8009748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974c:	89ab      	ldrh	r3, [r5, #12]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d907      	bls.n	8009762 <_fwalk_reent+0x3a>
 8009752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009756:	3301      	adds	r3, #1
 8009758:	d003      	beq.n	8009762 <_fwalk_reent+0x3a>
 800975a:	4629      	mov	r1, r5
 800975c:	4630      	mov	r0, r6
 800975e:	47c0      	blx	r8
 8009760:	4307      	orrs	r7, r0
 8009762:	3568      	adds	r5, #104	; 0x68
 8009764:	e7e9      	b.n	800973a <_fwalk_reent+0x12>
	...

08009768 <_localeconv_r>:
 8009768:	4800      	ldr	r0, [pc, #0]	; (800976c <_localeconv_r+0x4>)
 800976a:	4770      	bx	lr
 800976c:	20001024 	.word	0x20001024

08009770 <__retarget_lock_init_recursive>:
 8009770:	4770      	bx	lr

08009772 <__retarget_lock_acquire_recursive>:
 8009772:	4770      	bx	lr

08009774 <__retarget_lock_release_recursive>:
 8009774:	4770      	bx	lr

08009776 <__swhatbuf_r>:
 8009776:	b570      	push	{r4, r5, r6, lr}
 8009778:	460e      	mov	r6, r1
 800977a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977e:	2900      	cmp	r1, #0
 8009780:	b096      	sub	sp, #88	; 0x58
 8009782:	4614      	mov	r4, r2
 8009784:	461d      	mov	r5, r3
 8009786:	da07      	bge.n	8009798 <__swhatbuf_r+0x22>
 8009788:	2300      	movs	r3, #0
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	89b3      	ldrh	r3, [r6, #12]
 800978e:	061a      	lsls	r2, r3, #24
 8009790:	d410      	bmi.n	80097b4 <__swhatbuf_r+0x3e>
 8009792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009796:	e00e      	b.n	80097b6 <__swhatbuf_r+0x40>
 8009798:	466a      	mov	r2, sp
 800979a:	f000 ff4d 	bl	800a638 <_fstat_r>
 800979e:	2800      	cmp	r0, #0
 80097a0:	dbf2      	blt.n	8009788 <__swhatbuf_r+0x12>
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097ac:	425a      	negs	r2, r3
 80097ae:	415a      	adcs	r2, r3
 80097b0:	602a      	str	r2, [r5, #0]
 80097b2:	e7ee      	b.n	8009792 <__swhatbuf_r+0x1c>
 80097b4:	2340      	movs	r3, #64	; 0x40
 80097b6:	2000      	movs	r0, #0
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	b016      	add	sp, #88	; 0x58
 80097bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080097c0 <__smakebuf_r>:
 80097c0:	898b      	ldrh	r3, [r1, #12]
 80097c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097c4:	079d      	lsls	r5, r3, #30
 80097c6:	4606      	mov	r6, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	d507      	bpl.n	80097dc <__smakebuf_r+0x1c>
 80097cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	6123      	str	r3, [r4, #16]
 80097d4:	2301      	movs	r3, #1
 80097d6:	6163      	str	r3, [r4, #20]
 80097d8:	b002      	add	sp, #8
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	ab01      	add	r3, sp, #4
 80097de:	466a      	mov	r2, sp
 80097e0:	f7ff ffc9 	bl	8009776 <__swhatbuf_r>
 80097e4:	9900      	ldr	r1, [sp, #0]
 80097e6:	4605      	mov	r5, r0
 80097e8:	4630      	mov	r0, r6
 80097ea:	f7fe f941 	bl	8007a70 <_malloc_r>
 80097ee:	b948      	cbnz	r0, 8009804 <__smakebuf_r+0x44>
 80097f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f4:	059a      	lsls	r2, r3, #22
 80097f6:	d4ef      	bmi.n	80097d8 <__smakebuf_r+0x18>
 80097f8:	f023 0303 	bic.w	r3, r3, #3
 80097fc:	f043 0302 	orr.w	r3, r3, #2
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	e7e3      	b.n	80097cc <__smakebuf_r+0xc>
 8009804:	4b0d      	ldr	r3, [pc, #52]	; (800983c <__smakebuf_r+0x7c>)
 8009806:	62b3      	str	r3, [r6, #40]	; 0x28
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	6020      	str	r0, [r4, #0]
 800980c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	9b00      	ldr	r3, [sp, #0]
 8009814:	6163      	str	r3, [r4, #20]
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	6120      	str	r0, [r4, #16]
 800981a:	b15b      	cbz	r3, 8009834 <__smakebuf_r+0x74>
 800981c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009820:	4630      	mov	r0, r6
 8009822:	f000 ff1b 	bl	800a65c <_isatty_r>
 8009826:	b128      	cbz	r0, 8009834 <__smakebuf_r+0x74>
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	f043 0301 	orr.w	r3, r3, #1
 8009832:	81a3      	strh	r3, [r4, #12]
 8009834:	89a0      	ldrh	r0, [r4, #12]
 8009836:	4305      	orrs	r5, r0
 8009838:	81a5      	strh	r5, [r4, #12]
 800983a:	e7cd      	b.n	80097d8 <__smakebuf_r+0x18>
 800983c:	080095c5 	.word	0x080095c5

08009840 <__malloc_lock>:
 8009840:	4801      	ldr	r0, [pc, #4]	; (8009848 <__malloc_lock+0x8>)
 8009842:	f7ff bf96 	b.w	8009772 <__retarget_lock_acquire_recursive>
 8009846:	bf00      	nop
 8009848:	20002be8 	.word	0x20002be8

0800984c <__malloc_unlock>:
 800984c:	4801      	ldr	r0, [pc, #4]	; (8009854 <__malloc_unlock+0x8>)
 800984e:	f7ff bf91 	b.w	8009774 <__retarget_lock_release_recursive>
 8009852:	bf00      	nop
 8009854:	20002be8 	.word	0x20002be8

08009858 <_Balloc>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800985c:	4604      	mov	r4, r0
 800985e:	460d      	mov	r5, r1
 8009860:	b976      	cbnz	r6, 8009880 <_Balloc+0x28>
 8009862:	2010      	movs	r0, #16
 8009864:	f7fe f87e 	bl	8007964 <malloc>
 8009868:	4602      	mov	r2, r0
 800986a:	6260      	str	r0, [r4, #36]	; 0x24
 800986c:	b920      	cbnz	r0, 8009878 <_Balloc+0x20>
 800986e:	4b18      	ldr	r3, [pc, #96]	; (80098d0 <_Balloc+0x78>)
 8009870:	4818      	ldr	r0, [pc, #96]	; (80098d4 <_Balloc+0x7c>)
 8009872:	2166      	movs	r1, #102	; 0x66
 8009874:	f000 fea0 	bl	800a5b8 <__assert_func>
 8009878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800987c:	6006      	str	r6, [r0, #0]
 800987e:	60c6      	str	r6, [r0, #12]
 8009880:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009882:	68f3      	ldr	r3, [r6, #12]
 8009884:	b183      	cbz	r3, 80098a8 <_Balloc+0x50>
 8009886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800988e:	b9b8      	cbnz	r0, 80098c0 <_Balloc+0x68>
 8009890:	2101      	movs	r1, #1
 8009892:	fa01 f605 	lsl.w	r6, r1, r5
 8009896:	1d72      	adds	r2, r6, #5
 8009898:	0092      	lsls	r2, r2, #2
 800989a:	4620      	mov	r0, r4
 800989c:	f7fe f888 	bl	80079b0 <_calloc_r>
 80098a0:	b160      	cbz	r0, 80098bc <_Balloc+0x64>
 80098a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098a6:	e00e      	b.n	80098c6 <_Balloc+0x6e>
 80098a8:	2221      	movs	r2, #33	; 0x21
 80098aa:	2104      	movs	r1, #4
 80098ac:	4620      	mov	r0, r4
 80098ae:	f7fe f87f 	bl	80079b0 <_calloc_r>
 80098b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b4:	60f0      	str	r0, [r6, #12]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e4      	bne.n	8009886 <_Balloc+0x2e>
 80098bc:	2000      	movs	r0, #0
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	6802      	ldr	r2, [r0, #0]
 80098c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098c6:	2300      	movs	r3, #0
 80098c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098cc:	e7f7      	b.n	80098be <_Balloc+0x66>
 80098ce:	bf00      	nop
 80098d0:	08066811 	.word	0x08066811
 80098d4:	080668f8 	.word	0x080668f8

080098d8 <_Bfree>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098dc:	4605      	mov	r5, r0
 80098de:	460c      	mov	r4, r1
 80098e0:	b976      	cbnz	r6, 8009900 <_Bfree+0x28>
 80098e2:	2010      	movs	r0, #16
 80098e4:	f7fe f83e 	bl	8007964 <malloc>
 80098e8:	4602      	mov	r2, r0
 80098ea:	6268      	str	r0, [r5, #36]	; 0x24
 80098ec:	b920      	cbnz	r0, 80098f8 <_Bfree+0x20>
 80098ee:	4b09      	ldr	r3, [pc, #36]	; (8009914 <_Bfree+0x3c>)
 80098f0:	4809      	ldr	r0, [pc, #36]	; (8009918 <_Bfree+0x40>)
 80098f2:	218a      	movs	r1, #138	; 0x8a
 80098f4:	f000 fe60 	bl	800a5b8 <__assert_func>
 80098f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098fc:	6006      	str	r6, [r0, #0]
 80098fe:	60c6      	str	r6, [r0, #12]
 8009900:	b13c      	cbz	r4, 8009912 <_Bfree+0x3a>
 8009902:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009904:	6862      	ldr	r2, [r4, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800990c:	6021      	str	r1, [r4, #0]
 800990e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009912:	bd70      	pop	{r4, r5, r6, pc}
 8009914:	08066811 	.word	0x08066811
 8009918:	080668f8 	.word	0x080668f8

0800991c <__multadd>:
 800991c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009920:	690e      	ldr	r6, [r1, #16]
 8009922:	4607      	mov	r7, r0
 8009924:	4698      	mov	r8, r3
 8009926:	460c      	mov	r4, r1
 8009928:	f101 0014 	add.w	r0, r1, #20
 800992c:	2300      	movs	r3, #0
 800992e:	6805      	ldr	r5, [r0, #0]
 8009930:	b2a9      	uxth	r1, r5
 8009932:	fb02 8101 	mla	r1, r2, r1, r8
 8009936:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800993a:	0c2d      	lsrs	r5, r5, #16
 800993c:	fb02 c505 	mla	r5, r2, r5, ip
 8009940:	b289      	uxth	r1, r1
 8009942:	3301      	adds	r3, #1
 8009944:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009948:	429e      	cmp	r6, r3
 800994a:	f840 1b04 	str.w	r1, [r0], #4
 800994e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009952:	dcec      	bgt.n	800992e <__multadd+0x12>
 8009954:	f1b8 0f00 	cmp.w	r8, #0
 8009958:	d022      	beq.n	80099a0 <__multadd+0x84>
 800995a:	68a3      	ldr	r3, [r4, #8]
 800995c:	42b3      	cmp	r3, r6
 800995e:	dc19      	bgt.n	8009994 <__multadd+0x78>
 8009960:	6861      	ldr	r1, [r4, #4]
 8009962:	4638      	mov	r0, r7
 8009964:	3101      	adds	r1, #1
 8009966:	f7ff ff77 	bl	8009858 <_Balloc>
 800996a:	4605      	mov	r5, r0
 800996c:	b928      	cbnz	r0, 800997a <__multadd+0x5e>
 800996e:	4602      	mov	r2, r0
 8009970:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <__multadd+0x8c>)
 8009972:	480e      	ldr	r0, [pc, #56]	; (80099ac <__multadd+0x90>)
 8009974:	21b5      	movs	r1, #181	; 0xb5
 8009976:	f000 fe1f 	bl	800a5b8 <__assert_func>
 800997a:	6922      	ldr	r2, [r4, #16]
 800997c:	3202      	adds	r2, #2
 800997e:	f104 010c 	add.w	r1, r4, #12
 8009982:	0092      	lsls	r2, r2, #2
 8009984:	300c      	adds	r0, #12
 8009986:	f7fd fffd 	bl	8007984 <memcpy>
 800998a:	4621      	mov	r1, r4
 800998c:	4638      	mov	r0, r7
 800998e:	f7ff ffa3 	bl	80098d8 <_Bfree>
 8009992:	462c      	mov	r4, r5
 8009994:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009998:	3601      	adds	r6, #1
 800999a:	f8c3 8014 	str.w	r8, [r3, #20]
 800999e:	6126      	str	r6, [r4, #16]
 80099a0:	4620      	mov	r0, r4
 80099a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a6:	bf00      	nop
 80099a8:	08066887 	.word	0x08066887
 80099ac:	080668f8 	.word	0x080668f8

080099b0 <__hi0bits>:
 80099b0:	0c03      	lsrs	r3, r0, #16
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	b9d3      	cbnz	r3, 80099ec <__hi0bits+0x3c>
 80099b6:	0400      	lsls	r0, r0, #16
 80099b8:	2310      	movs	r3, #16
 80099ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099be:	bf04      	itt	eq
 80099c0:	0200      	lsleq	r0, r0, #8
 80099c2:	3308      	addeq	r3, #8
 80099c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099c8:	bf04      	itt	eq
 80099ca:	0100      	lsleq	r0, r0, #4
 80099cc:	3304      	addeq	r3, #4
 80099ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099d2:	bf04      	itt	eq
 80099d4:	0080      	lsleq	r0, r0, #2
 80099d6:	3302      	addeq	r3, #2
 80099d8:	2800      	cmp	r0, #0
 80099da:	db05      	blt.n	80099e8 <__hi0bits+0x38>
 80099dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099e0:	f103 0301 	add.w	r3, r3, #1
 80099e4:	bf08      	it	eq
 80099e6:	2320      	moveq	r3, #32
 80099e8:	4618      	mov	r0, r3
 80099ea:	4770      	bx	lr
 80099ec:	2300      	movs	r3, #0
 80099ee:	e7e4      	b.n	80099ba <__hi0bits+0xa>

080099f0 <__lo0bits>:
 80099f0:	6803      	ldr	r3, [r0, #0]
 80099f2:	f013 0207 	ands.w	r2, r3, #7
 80099f6:	4601      	mov	r1, r0
 80099f8:	d00b      	beq.n	8009a12 <__lo0bits+0x22>
 80099fa:	07da      	lsls	r2, r3, #31
 80099fc:	d424      	bmi.n	8009a48 <__lo0bits+0x58>
 80099fe:	0798      	lsls	r0, r3, #30
 8009a00:	bf49      	itett	mi
 8009a02:	085b      	lsrmi	r3, r3, #1
 8009a04:	089b      	lsrpl	r3, r3, #2
 8009a06:	2001      	movmi	r0, #1
 8009a08:	600b      	strmi	r3, [r1, #0]
 8009a0a:	bf5c      	itt	pl
 8009a0c:	600b      	strpl	r3, [r1, #0]
 8009a0e:	2002      	movpl	r0, #2
 8009a10:	4770      	bx	lr
 8009a12:	b298      	uxth	r0, r3
 8009a14:	b9b0      	cbnz	r0, 8009a44 <__lo0bits+0x54>
 8009a16:	0c1b      	lsrs	r3, r3, #16
 8009a18:	2010      	movs	r0, #16
 8009a1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a1e:	bf04      	itt	eq
 8009a20:	0a1b      	lsreq	r3, r3, #8
 8009a22:	3008      	addeq	r0, #8
 8009a24:	071a      	lsls	r2, r3, #28
 8009a26:	bf04      	itt	eq
 8009a28:	091b      	lsreq	r3, r3, #4
 8009a2a:	3004      	addeq	r0, #4
 8009a2c:	079a      	lsls	r2, r3, #30
 8009a2e:	bf04      	itt	eq
 8009a30:	089b      	lsreq	r3, r3, #2
 8009a32:	3002      	addeq	r0, #2
 8009a34:	07da      	lsls	r2, r3, #31
 8009a36:	d403      	bmi.n	8009a40 <__lo0bits+0x50>
 8009a38:	085b      	lsrs	r3, r3, #1
 8009a3a:	f100 0001 	add.w	r0, r0, #1
 8009a3e:	d005      	beq.n	8009a4c <__lo0bits+0x5c>
 8009a40:	600b      	str	r3, [r1, #0]
 8009a42:	4770      	bx	lr
 8009a44:	4610      	mov	r0, r2
 8009a46:	e7e8      	b.n	8009a1a <__lo0bits+0x2a>
 8009a48:	2000      	movs	r0, #0
 8009a4a:	4770      	bx	lr
 8009a4c:	2020      	movs	r0, #32
 8009a4e:	4770      	bx	lr

08009a50 <__i2b>:
 8009a50:	b510      	push	{r4, lr}
 8009a52:	460c      	mov	r4, r1
 8009a54:	2101      	movs	r1, #1
 8009a56:	f7ff feff 	bl	8009858 <_Balloc>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	b928      	cbnz	r0, 8009a6a <__i2b+0x1a>
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <__i2b+0x24>)
 8009a60:	4805      	ldr	r0, [pc, #20]	; (8009a78 <__i2b+0x28>)
 8009a62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a66:	f000 fda7 	bl	800a5b8 <__assert_func>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	6144      	str	r4, [r0, #20]
 8009a6e:	6103      	str	r3, [r0, #16]
 8009a70:	bd10      	pop	{r4, pc}
 8009a72:	bf00      	nop
 8009a74:	08066887 	.word	0x08066887
 8009a78:	080668f8 	.word	0x080668f8

08009a7c <__multiply>:
 8009a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a80:	4614      	mov	r4, r2
 8009a82:	690a      	ldr	r2, [r1, #16]
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	bfb8      	it	lt
 8009a8a:	460b      	movlt	r3, r1
 8009a8c:	460d      	mov	r5, r1
 8009a8e:	bfbc      	itt	lt
 8009a90:	4625      	movlt	r5, r4
 8009a92:	461c      	movlt	r4, r3
 8009a94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a9c:	68ab      	ldr	r3, [r5, #8]
 8009a9e:	6869      	ldr	r1, [r5, #4]
 8009aa0:	eb0a 0709 	add.w	r7, sl, r9
 8009aa4:	42bb      	cmp	r3, r7
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	bfb8      	it	lt
 8009aaa:	3101      	addlt	r1, #1
 8009aac:	f7ff fed4 	bl	8009858 <_Balloc>
 8009ab0:	b930      	cbnz	r0, 8009ac0 <__multiply+0x44>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	4b42      	ldr	r3, [pc, #264]	; (8009bc0 <__multiply+0x144>)
 8009ab6:	4843      	ldr	r0, [pc, #268]	; (8009bc4 <__multiply+0x148>)
 8009ab8:	f240 115d 	movw	r1, #349	; 0x15d
 8009abc:	f000 fd7c 	bl	800a5b8 <__assert_func>
 8009ac0:	f100 0614 	add.w	r6, r0, #20
 8009ac4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009ac8:	4633      	mov	r3, r6
 8009aca:	2200      	movs	r2, #0
 8009acc:	4543      	cmp	r3, r8
 8009ace:	d31e      	bcc.n	8009b0e <__multiply+0x92>
 8009ad0:	f105 0c14 	add.w	ip, r5, #20
 8009ad4:	f104 0314 	add.w	r3, r4, #20
 8009ad8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009adc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009ae0:	9202      	str	r2, [sp, #8]
 8009ae2:	ebac 0205 	sub.w	r2, ip, r5
 8009ae6:	3a15      	subs	r2, #21
 8009ae8:	f022 0203 	bic.w	r2, r2, #3
 8009aec:	3204      	adds	r2, #4
 8009aee:	f105 0115 	add.w	r1, r5, #21
 8009af2:	458c      	cmp	ip, r1
 8009af4:	bf38      	it	cc
 8009af6:	2204      	movcc	r2, #4
 8009af8:	9201      	str	r2, [sp, #4]
 8009afa:	9a02      	ldr	r2, [sp, #8]
 8009afc:	9303      	str	r3, [sp, #12]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d808      	bhi.n	8009b14 <__multiply+0x98>
 8009b02:	2f00      	cmp	r7, #0
 8009b04:	dc55      	bgt.n	8009bb2 <__multiply+0x136>
 8009b06:	6107      	str	r7, [r0, #16]
 8009b08:	b005      	add	sp, #20
 8009b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0e:	f843 2b04 	str.w	r2, [r3], #4
 8009b12:	e7db      	b.n	8009acc <__multiply+0x50>
 8009b14:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b18:	f1ba 0f00 	cmp.w	sl, #0
 8009b1c:	d020      	beq.n	8009b60 <__multiply+0xe4>
 8009b1e:	f105 0e14 	add.w	lr, r5, #20
 8009b22:	46b1      	mov	r9, r6
 8009b24:	2200      	movs	r2, #0
 8009b26:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009b2a:	f8d9 b000 	ldr.w	fp, [r9]
 8009b2e:	b2a1      	uxth	r1, r4
 8009b30:	fa1f fb8b 	uxth.w	fp, fp
 8009b34:	fb0a b101 	mla	r1, sl, r1, fp
 8009b38:	4411      	add	r1, r2
 8009b3a:	f8d9 2000 	ldr.w	r2, [r9]
 8009b3e:	0c24      	lsrs	r4, r4, #16
 8009b40:	0c12      	lsrs	r2, r2, #16
 8009b42:	fb0a 2404 	mla	r4, sl, r4, r2
 8009b46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009b4a:	b289      	uxth	r1, r1
 8009b4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009b50:	45f4      	cmp	ip, lr
 8009b52:	f849 1b04 	str.w	r1, [r9], #4
 8009b56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009b5a:	d8e4      	bhi.n	8009b26 <__multiply+0xaa>
 8009b5c:	9901      	ldr	r1, [sp, #4]
 8009b5e:	5072      	str	r2, [r6, r1]
 8009b60:	9a03      	ldr	r2, [sp, #12]
 8009b62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b66:	3304      	adds	r3, #4
 8009b68:	f1b9 0f00 	cmp.w	r9, #0
 8009b6c:	d01f      	beq.n	8009bae <__multiply+0x132>
 8009b6e:	6834      	ldr	r4, [r6, #0]
 8009b70:	f105 0114 	add.w	r1, r5, #20
 8009b74:	46b6      	mov	lr, r6
 8009b76:	f04f 0a00 	mov.w	sl, #0
 8009b7a:	880a      	ldrh	r2, [r1, #0]
 8009b7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b80:	fb09 b202 	mla	r2, r9, r2, fp
 8009b84:	4492      	add	sl, r2
 8009b86:	b2a4      	uxth	r4, r4
 8009b88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b8c:	f84e 4b04 	str.w	r4, [lr], #4
 8009b90:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b94:	f8be 2000 	ldrh.w	r2, [lr]
 8009b98:	0c24      	lsrs	r4, r4, #16
 8009b9a:	fb09 2404 	mla	r4, r9, r4, r2
 8009b9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ba2:	458c      	cmp	ip, r1
 8009ba4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ba8:	d8e7      	bhi.n	8009b7a <__multiply+0xfe>
 8009baa:	9a01      	ldr	r2, [sp, #4]
 8009bac:	50b4      	str	r4, [r6, r2]
 8009bae:	3604      	adds	r6, #4
 8009bb0:	e7a3      	b.n	8009afa <__multiply+0x7e>
 8009bb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1a5      	bne.n	8009b06 <__multiply+0x8a>
 8009bba:	3f01      	subs	r7, #1
 8009bbc:	e7a1      	b.n	8009b02 <__multiply+0x86>
 8009bbe:	bf00      	nop
 8009bc0:	08066887 	.word	0x08066887
 8009bc4:	080668f8 	.word	0x080668f8

08009bc8 <__pow5mult>:
 8009bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bcc:	4615      	mov	r5, r2
 8009bce:	f012 0203 	ands.w	r2, r2, #3
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	d007      	beq.n	8009be8 <__pow5mult+0x20>
 8009bd8:	4c25      	ldr	r4, [pc, #148]	; (8009c70 <__pow5mult+0xa8>)
 8009bda:	3a01      	subs	r2, #1
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009be2:	f7ff fe9b 	bl	800991c <__multadd>
 8009be6:	4607      	mov	r7, r0
 8009be8:	10ad      	asrs	r5, r5, #2
 8009bea:	d03d      	beq.n	8009c68 <__pow5mult+0xa0>
 8009bec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bee:	b97c      	cbnz	r4, 8009c10 <__pow5mult+0x48>
 8009bf0:	2010      	movs	r0, #16
 8009bf2:	f7fd feb7 	bl	8007964 <malloc>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	6270      	str	r0, [r6, #36]	; 0x24
 8009bfa:	b928      	cbnz	r0, 8009c08 <__pow5mult+0x40>
 8009bfc:	4b1d      	ldr	r3, [pc, #116]	; (8009c74 <__pow5mult+0xac>)
 8009bfe:	481e      	ldr	r0, [pc, #120]	; (8009c78 <__pow5mult+0xb0>)
 8009c00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c04:	f000 fcd8 	bl	800a5b8 <__assert_func>
 8009c08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c0c:	6004      	str	r4, [r0, #0]
 8009c0e:	60c4      	str	r4, [r0, #12]
 8009c10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c18:	b94c      	cbnz	r4, 8009c2e <__pow5mult+0x66>
 8009c1a:	f240 2171 	movw	r1, #625	; 0x271
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7ff ff16 	bl	8009a50 <__i2b>
 8009c24:	2300      	movs	r3, #0
 8009c26:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	6003      	str	r3, [r0, #0]
 8009c2e:	f04f 0900 	mov.w	r9, #0
 8009c32:	07eb      	lsls	r3, r5, #31
 8009c34:	d50a      	bpl.n	8009c4c <__pow5mult+0x84>
 8009c36:	4639      	mov	r1, r7
 8009c38:	4622      	mov	r2, r4
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f7ff ff1e 	bl	8009a7c <__multiply>
 8009c40:	4639      	mov	r1, r7
 8009c42:	4680      	mov	r8, r0
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7ff fe47 	bl	80098d8 <_Bfree>
 8009c4a:	4647      	mov	r7, r8
 8009c4c:	106d      	asrs	r5, r5, #1
 8009c4e:	d00b      	beq.n	8009c68 <__pow5mult+0xa0>
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	b938      	cbnz	r0, 8009c64 <__pow5mult+0x9c>
 8009c54:	4622      	mov	r2, r4
 8009c56:	4621      	mov	r1, r4
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7ff ff0f 	bl	8009a7c <__multiply>
 8009c5e:	6020      	str	r0, [r4, #0]
 8009c60:	f8c0 9000 	str.w	r9, [r0]
 8009c64:	4604      	mov	r4, r0
 8009c66:	e7e4      	b.n	8009c32 <__pow5mult+0x6a>
 8009c68:	4638      	mov	r0, r7
 8009c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6e:	bf00      	nop
 8009c70:	08066a48 	.word	0x08066a48
 8009c74:	08066811 	.word	0x08066811
 8009c78:	080668f8 	.word	0x080668f8

08009c7c <__lshift>:
 8009c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c80:	460c      	mov	r4, r1
 8009c82:	6849      	ldr	r1, [r1, #4]
 8009c84:	6923      	ldr	r3, [r4, #16]
 8009c86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c8a:	68a3      	ldr	r3, [r4, #8]
 8009c8c:	4607      	mov	r7, r0
 8009c8e:	4691      	mov	r9, r2
 8009c90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c94:	f108 0601 	add.w	r6, r8, #1
 8009c98:	42b3      	cmp	r3, r6
 8009c9a:	db0b      	blt.n	8009cb4 <__lshift+0x38>
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7ff fddb 	bl	8009858 <_Balloc>
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	b948      	cbnz	r0, 8009cba <__lshift+0x3e>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	4b28      	ldr	r3, [pc, #160]	; (8009d4c <__lshift+0xd0>)
 8009caa:	4829      	ldr	r0, [pc, #164]	; (8009d50 <__lshift+0xd4>)
 8009cac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009cb0:	f000 fc82 	bl	800a5b8 <__assert_func>
 8009cb4:	3101      	adds	r1, #1
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	e7ee      	b.n	8009c98 <__lshift+0x1c>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f100 0114 	add.w	r1, r0, #20
 8009cc0:	f100 0210 	add.w	r2, r0, #16
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	4553      	cmp	r3, sl
 8009cc8:	db33      	blt.n	8009d32 <__lshift+0xb6>
 8009cca:	6920      	ldr	r0, [r4, #16]
 8009ccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cd0:	f104 0314 	add.w	r3, r4, #20
 8009cd4:	f019 091f 	ands.w	r9, r9, #31
 8009cd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ce0:	d02b      	beq.n	8009d3a <__lshift+0xbe>
 8009ce2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ce6:	468a      	mov	sl, r1
 8009ce8:	2200      	movs	r2, #0
 8009cea:	6818      	ldr	r0, [r3, #0]
 8009cec:	fa00 f009 	lsl.w	r0, r0, r9
 8009cf0:	4302      	orrs	r2, r0
 8009cf2:	f84a 2b04 	str.w	r2, [sl], #4
 8009cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cfa:	459c      	cmp	ip, r3
 8009cfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d00:	d8f3      	bhi.n	8009cea <__lshift+0x6e>
 8009d02:	ebac 0304 	sub.w	r3, ip, r4
 8009d06:	3b15      	subs	r3, #21
 8009d08:	f023 0303 	bic.w	r3, r3, #3
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	f104 0015 	add.w	r0, r4, #21
 8009d12:	4584      	cmp	ip, r0
 8009d14:	bf38      	it	cc
 8009d16:	2304      	movcc	r3, #4
 8009d18:	50ca      	str	r2, [r1, r3]
 8009d1a:	b10a      	cbz	r2, 8009d20 <__lshift+0xa4>
 8009d1c:	f108 0602 	add.w	r6, r8, #2
 8009d20:	3e01      	subs	r6, #1
 8009d22:	4638      	mov	r0, r7
 8009d24:	612e      	str	r6, [r5, #16]
 8009d26:	4621      	mov	r1, r4
 8009d28:	f7ff fdd6 	bl	80098d8 <_Bfree>
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d36:	3301      	adds	r3, #1
 8009d38:	e7c5      	b.n	8009cc6 <__lshift+0x4a>
 8009d3a:	3904      	subs	r1, #4
 8009d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d44:	459c      	cmp	ip, r3
 8009d46:	d8f9      	bhi.n	8009d3c <__lshift+0xc0>
 8009d48:	e7ea      	b.n	8009d20 <__lshift+0xa4>
 8009d4a:	bf00      	nop
 8009d4c:	08066887 	.word	0x08066887
 8009d50:	080668f8 	.word	0x080668f8

08009d54 <__mcmp>:
 8009d54:	b530      	push	{r4, r5, lr}
 8009d56:	6902      	ldr	r2, [r0, #16]
 8009d58:	690c      	ldr	r4, [r1, #16]
 8009d5a:	1b12      	subs	r2, r2, r4
 8009d5c:	d10e      	bne.n	8009d7c <__mcmp+0x28>
 8009d5e:	f100 0314 	add.w	r3, r0, #20
 8009d62:	3114      	adds	r1, #20
 8009d64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d74:	42a5      	cmp	r5, r4
 8009d76:	d003      	beq.n	8009d80 <__mcmp+0x2c>
 8009d78:	d305      	bcc.n	8009d86 <__mcmp+0x32>
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	bd30      	pop	{r4, r5, pc}
 8009d80:	4283      	cmp	r3, r0
 8009d82:	d3f3      	bcc.n	8009d6c <__mcmp+0x18>
 8009d84:	e7fa      	b.n	8009d7c <__mcmp+0x28>
 8009d86:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8a:	e7f7      	b.n	8009d7c <__mcmp+0x28>

08009d8c <__mdiff>:
 8009d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	460c      	mov	r4, r1
 8009d92:	4606      	mov	r6, r0
 8009d94:	4611      	mov	r1, r2
 8009d96:	4620      	mov	r0, r4
 8009d98:	4617      	mov	r7, r2
 8009d9a:	f7ff ffdb 	bl	8009d54 <__mcmp>
 8009d9e:	1e05      	subs	r5, r0, #0
 8009da0:	d110      	bne.n	8009dc4 <__mdiff+0x38>
 8009da2:	4629      	mov	r1, r5
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7ff fd57 	bl	8009858 <_Balloc>
 8009daa:	b930      	cbnz	r0, 8009dba <__mdiff+0x2e>
 8009dac:	4b39      	ldr	r3, [pc, #228]	; (8009e94 <__mdiff+0x108>)
 8009dae:	4602      	mov	r2, r0
 8009db0:	f240 2132 	movw	r1, #562	; 0x232
 8009db4:	4838      	ldr	r0, [pc, #224]	; (8009e98 <__mdiff+0x10c>)
 8009db6:	f000 fbff 	bl	800a5b8 <__assert_func>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	bfa4      	itt	ge
 8009dc6:	463b      	movge	r3, r7
 8009dc8:	4627      	movge	r7, r4
 8009dca:	4630      	mov	r0, r6
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	bfa6      	itte	ge
 8009dd0:	461c      	movge	r4, r3
 8009dd2:	2500      	movge	r5, #0
 8009dd4:	2501      	movlt	r5, #1
 8009dd6:	f7ff fd3f 	bl	8009858 <_Balloc>
 8009dda:	b920      	cbnz	r0, 8009de6 <__mdiff+0x5a>
 8009ddc:	4b2d      	ldr	r3, [pc, #180]	; (8009e94 <__mdiff+0x108>)
 8009dde:	4602      	mov	r2, r0
 8009de0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009de4:	e7e6      	b.n	8009db4 <__mdiff+0x28>
 8009de6:	693e      	ldr	r6, [r7, #16]
 8009de8:	60c5      	str	r5, [r0, #12]
 8009dea:	6925      	ldr	r5, [r4, #16]
 8009dec:	f107 0114 	add.w	r1, r7, #20
 8009df0:	f104 0914 	add.w	r9, r4, #20
 8009df4:	f100 0e14 	add.w	lr, r0, #20
 8009df8:	f107 0210 	add.w	r2, r7, #16
 8009dfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009e00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009e04:	46f2      	mov	sl, lr
 8009e06:	2700      	movs	r7, #0
 8009e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e10:	fa1f f883 	uxth.w	r8, r3
 8009e14:	fa17 f78b 	uxtah	r7, r7, fp
 8009e18:	0c1b      	lsrs	r3, r3, #16
 8009e1a:	eba7 0808 	sub.w	r8, r7, r8
 8009e1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e26:	fa1f f888 	uxth.w	r8, r8
 8009e2a:	141f      	asrs	r7, r3, #16
 8009e2c:	454d      	cmp	r5, r9
 8009e2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e32:	f84a 3b04 	str.w	r3, [sl], #4
 8009e36:	d8e7      	bhi.n	8009e08 <__mdiff+0x7c>
 8009e38:	1b2b      	subs	r3, r5, r4
 8009e3a:	3b15      	subs	r3, #21
 8009e3c:	f023 0303 	bic.w	r3, r3, #3
 8009e40:	3304      	adds	r3, #4
 8009e42:	3415      	adds	r4, #21
 8009e44:	42a5      	cmp	r5, r4
 8009e46:	bf38      	it	cc
 8009e48:	2304      	movcc	r3, #4
 8009e4a:	4419      	add	r1, r3
 8009e4c:	4473      	add	r3, lr
 8009e4e:	469e      	mov	lr, r3
 8009e50:	460d      	mov	r5, r1
 8009e52:	4565      	cmp	r5, ip
 8009e54:	d30e      	bcc.n	8009e74 <__mdiff+0xe8>
 8009e56:	f10c 0203 	add.w	r2, ip, #3
 8009e5a:	1a52      	subs	r2, r2, r1
 8009e5c:	f022 0203 	bic.w	r2, r2, #3
 8009e60:	3903      	subs	r1, #3
 8009e62:	458c      	cmp	ip, r1
 8009e64:	bf38      	it	cc
 8009e66:	2200      	movcc	r2, #0
 8009e68:	441a      	add	r2, r3
 8009e6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e6e:	b17b      	cbz	r3, 8009e90 <__mdiff+0x104>
 8009e70:	6106      	str	r6, [r0, #16]
 8009e72:	e7a5      	b.n	8009dc0 <__mdiff+0x34>
 8009e74:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e78:	fa17 f488 	uxtah	r4, r7, r8
 8009e7c:	1422      	asrs	r2, r4, #16
 8009e7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009e82:	b2a4      	uxth	r4, r4
 8009e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e88:	f84e 4b04 	str.w	r4, [lr], #4
 8009e8c:	1417      	asrs	r7, r2, #16
 8009e8e:	e7e0      	b.n	8009e52 <__mdiff+0xc6>
 8009e90:	3e01      	subs	r6, #1
 8009e92:	e7ea      	b.n	8009e6a <__mdiff+0xde>
 8009e94:	08066887 	.word	0x08066887
 8009e98:	080668f8 	.word	0x080668f8

08009e9c <__d2b>:
 8009e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ea0:	4689      	mov	r9, r1
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	ec57 6b10 	vmov	r6, r7, d0
 8009ea8:	4690      	mov	r8, r2
 8009eaa:	f7ff fcd5 	bl	8009858 <_Balloc>
 8009eae:	4604      	mov	r4, r0
 8009eb0:	b930      	cbnz	r0, 8009ec0 <__d2b+0x24>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	4b25      	ldr	r3, [pc, #148]	; (8009f4c <__d2b+0xb0>)
 8009eb6:	4826      	ldr	r0, [pc, #152]	; (8009f50 <__d2b+0xb4>)
 8009eb8:	f240 310a 	movw	r1, #778	; 0x30a
 8009ebc:	f000 fb7c 	bl	800a5b8 <__assert_func>
 8009ec0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ec8:	bb35      	cbnz	r5, 8009f18 <__d2b+0x7c>
 8009eca:	2e00      	cmp	r6, #0
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	d028      	beq.n	8009f22 <__d2b+0x86>
 8009ed0:	4668      	mov	r0, sp
 8009ed2:	9600      	str	r6, [sp, #0]
 8009ed4:	f7ff fd8c 	bl	80099f0 <__lo0bits>
 8009ed8:	9900      	ldr	r1, [sp, #0]
 8009eda:	b300      	cbz	r0, 8009f1e <__d2b+0x82>
 8009edc:	9a01      	ldr	r2, [sp, #4]
 8009ede:	f1c0 0320 	rsb	r3, r0, #32
 8009ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee6:	430b      	orrs	r3, r1
 8009ee8:	40c2      	lsrs	r2, r0
 8009eea:	6163      	str	r3, [r4, #20]
 8009eec:	9201      	str	r2, [sp, #4]
 8009eee:	9b01      	ldr	r3, [sp, #4]
 8009ef0:	61a3      	str	r3, [r4, #24]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bf14      	ite	ne
 8009ef6:	2202      	movne	r2, #2
 8009ef8:	2201      	moveq	r2, #1
 8009efa:	6122      	str	r2, [r4, #16]
 8009efc:	b1d5      	cbz	r5, 8009f34 <__d2b+0x98>
 8009efe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f02:	4405      	add	r5, r0
 8009f04:	f8c9 5000 	str.w	r5, [r9]
 8009f08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f0c:	f8c8 0000 	str.w	r0, [r8]
 8009f10:	4620      	mov	r0, r4
 8009f12:	b003      	add	sp, #12
 8009f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f1c:	e7d5      	b.n	8009eca <__d2b+0x2e>
 8009f1e:	6161      	str	r1, [r4, #20]
 8009f20:	e7e5      	b.n	8009eee <__d2b+0x52>
 8009f22:	a801      	add	r0, sp, #4
 8009f24:	f7ff fd64 	bl	80099f0 <__lo0bits>
 8009f28:	9b01      	ldr	r3, [sp, #4]
 8009f2a:	6163      	str	r3, [r4, #20]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	6122      	str	r2, [r4, #16]
 8009f30:	3020      	adds	r0, #32
 8009f32:	e7e3      	b.n	8009efc <__d2b+0x60>
 8009f34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f3c:	f8c9 0000 	str.w	r0, [r9]
 8009f40:	6918      	ldr	r0, [r3, #16]
 8009f42:	f7ff fd35 	bl	80099b0 <__hi0bits>
 8009f46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f4a:	e7df      	b.n	8009f0c <__d2b+0x70>
 8009f4c:	08066887 	.word	0x08066887
 8009f50:	080668f8 	.word	0x080668f8

08009f54 <_realloc_r>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	4607      	mov	r7, r0
 8009f58:	4614      	mov	r4, r2
 8009f5a:	460e      	mov	r6, r1
 8009f5c:	b921      	cbnz	r1, 8009f68 <_realloc_r+0x14>
 8009f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f62:	4611      	mov	r1, r2
 8009f64:	f7fd bd84 	b.w	8007a70 <_malloc_r>
 8009f68:	b922      	cbnz	r2, 8009f74 <_realloc_r+0x20>
 8009f6a:	f7fd fd31 	bl	80079d0 <_free_r>
 8009f6e:	4625      	mov	r5, r4
 8009f70:	4628      	mov	r0, r5
 8009f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f74:	f000 fbc0 	bl	800a6f8 <_malloc_usable_size_r>
 8009f78:	42a0      	cmp	r0, r4
 8009f7a:	d20f      	bcs.n	8009f9c <_realloc_r+0x48>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4638      	mov	r0, r7
 8009f80:	f7fd fd76 	bl	8007a70 <_malloc_r>
 8009f84:	4605      	mov	r5, r0
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d0f2      	beq.n	8009f70 <_realloc_r+0x1c>
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	f7fd fcf9 	bl	8007984 <memcpy>
 8009f92:	4631      	mov	r1, r6
 8009f94:	4638      	mov	r0, r7
 8009f96:	f7fd fd1b 	bl	80079d0 <_free_r>
 8009f9a:	e7e9      	b.n	8009f70 <_realloc_r+0x1c>
 8009f9c:	4635      	mov	r5, r6
 8009f9e:	e7e7      	b.n	8009f70 <_realloc_r+0x1c>

08009fa0 <__ssputs_r>:
 8009fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	688e      	ldr	r6, [r1, #8]
 8009fa6:	429e      	cmp	r6, r3
 8009fa8:	4682      	mov	sl, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	4690      	mov	r8, r2
 8009fae:	461f      	mov	r7, r3
 8009fb0:	d838      	bhi.n	800a024 <__ssputs_r+0x84>
 8009fb2:	898a      	ldrh	r2, [r1, #12]
 8009fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fb8:	d032      	beq.n	800a020 <__ssputs_r+0x80>
 8009fba:	6825      	ldr	r5, [r4, #0]
 8009fbc:	6909      	ldr	r1, [r1, #16]
 8009fbe:	eba5 0901 	sub.w	r9, r5, r1
 8009fc2:	6965      	ldr	r5, [r4, #20]
 8009fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fcc:	3301      	adds	r3, #1
 8009fce:	444b      	add	r3, r9
 8009fd0:	106d      	asrs	r5, r5, #1
 8009fd2:	429d      	cmp	r5, r3
 8009fd4:	bf38      	it	cc
 8009fd6:	461d      	movcc	r5, r3
 8009fd8:	0553      	lsls	r3, r2, #21
 8009fda:	d531      	bpl.n	800a040 <__ssputs_r+0xa0>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	f7fd fd47 	bl	8007a70 <_malloc_r>
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	b950      	cbnz	r0, 8009ffc <__ssputs_r+0x5c>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	f8ca 3000 	str.w	r3, [sl]
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffc:	6921      	ldr	r1, [r4, #16]
 8009ffe:	464a      	mov	r2, r9
 800a000:	f7fd fcc0 	bl	8007984 <memcpy>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00e:	81a3      	strh	r3, [r4, #12]
 800a010:	6126      	str	r6, [r4, #16]
 800a012:	6165      	str	r5, [r4, #20]
 800a014:	444e      	add	r6, r9
 800a016:	eba5 0509 	sub.w	r5, r5, r9
 800a01a:	6026      	str	r6, [r4, #0]
 800a01c:	60a5      	str	r5, [r4, #8]
 800a01e:	463e      	mov	r6, r7
 800a020:	42be      	cmp	r6, r7
 800a022:	d900      	bls.n	800a026 <__ssputs_r+0x86>
 800a024:	463e      	mov	r6, r7
 800a026:	4632      	mov	r2, r6
 800a028:	6820      	ldr	r0, [r4, #0]
 800a02a:	4641      	mov	r1, r8
 800a02c:	f000 fb4a 	bl	800a6c4 <memmove>
 800a030:	68a3      	ldr	r3, [r4, #8]
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	1b9b      	subs	r3, r3, r6
 800a036:	4432      	add	r2, r6
 800a038:	60a3      	str	r3, [r4, #8]
 800a03a:	6022      	str	r2, [r4, #0]
 800a03c:	2000      	movs	r0, #0
 800a03e:	e7db      	b.n	8009ff8 <__ssputs_r+0x58>
 800a040:	462a      	mov	r2, r5
 800a042:	f7ff ff87 	bl	8009f54 <_realloc_r>
 800a046:	4606      	mov	r6, r0
 800a048:	2800      	cmp	r0, #0
 800a04a:	d1e1      	bne.n	800a010 <__ssputs_r+0x70>
 800a04c:	6921      	ldr	r1, [r4, #16]
 800a04e:	4650      	mov	r0, sl
 800a050:	f7fd fcbe 	bl	80079d0 <_free_r>
 800a054:	e7c7      	b.n	8009fe6 <__ssputs_r+0x46>
	...

0800a058 <_svfiprintf_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	4698      	mov	r8, r3
 800a05e:	898b      	ldrh	r3, [r1, #12]
 800a060:	061b      	lsls	r3, r3, #24
 800a062:	b09d      	sub	sp, #116	; 0x74
 800a064:	4607      	mov	r7, r0
 800a066:	460d      	mov	r5, r1
 800a068:	4614      	mov	r4, r2
 800a06a:	d50e      	bpl.n	800a08a <_svfiprintf_r+0x32>
 800a06c:	690b      	ldr	r3, [r1, #16]
 800a06e:	b963      	cbnz	r3, 800a08a <_svfiprintf_r+0x32>
 800a070:	2140      	movs	r1, #64	; 0x40
 800a072:	f7fd fcfd 	bl	8007a70 <_malloc_r>
 800a076:	6028      	str	r0, [r5, #0]
 800a078:	6128      	str	r0, [r5, #16]
 800a07a:	b920      	cbnz	r0, 800a086 <_svfiprintf_r+0x2e>
 800a07c:	230c      	movs	r3, #12
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	f04f 30ff 	mov.w	r0, #4294967295
 800a084:	e0d1      	b.n	800a22a <_svfiprintf_r+0x1d2>
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	616b      	str	r3, [r5, #20]
 800a08a:	2300      	movs	r3, #0
 800a08c:	9309      	str	r3, [sp, #36]	; 0x24
 800a08e:	2320      	movs	r3, #32
 800a090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a094:	f8cd 800c 	str.w	r8, [sp, #12]
 800a098:	2330      	movs	r3, #48	; 0x30
 800a09a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a244 <_svfiprintf_r+0x1ec>
 800a09e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0a2:	f04f 0901 	mov.w	r9, #1
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	469a      	mov	sl, r3
 800a0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ae:	b10a      	cbz	r2, 800a0b4 <_svfiprintf_r+0x5c>
 800a0b0:	2a25      	cmp	r2, #37	; 0x25
 800a0b2:	d1f9      	bne.n	800a0a8 <_svfiprintf_r+0x50>
 800a0b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0b8:	d00b      	beq.n	800a0d2 <_svfiprintf_r+0x7a>
 800a0ba:	465b      	mov	r3, fp
 800a0bc:	4622      	mov	r2, r4
 800a0be:	4629      	mov	r1, r5
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff ff6d 	bl	8009fa0 <__ssputs_r>
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f000 80aa 	beq.w	800a220 <_svfiprintf_r+0x1c8>
 800a0cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ce:	445a      	add	r2, fp
 800a0d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 80a2 	beq.w	800a220 <_svfiprintf_r+0x1c8>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0e6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	9307      	str	r3, [sp, #28]
 800a0ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0f4:	4654      	mov	r4, sl
 800a0f6:	2205      	movs	r2, #5
 800a0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fc:	4851      	ldr	r0, [pc, #324]	; (800a244 <_svfiprintf_r+0x1ec>)
 800a0fe:	f7f6 f877 	bl	80001f0 <memchr>
 800a102:	9a04      	ldr	r2, [sp, #16]
 800a104:	b9d8      	cbnz	r0, 800a13e <_svfiprintf_r+0xe6>
 800a106:	06d0      	lsls	r0, r2, #27
 800a108:	bf44      	itt	mi
 800a10a:	2320      	movmi	r3, #32
 800a10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a110:	0711      	lsls	r1, r2, #28
 800a112:	bf44      	itt	mi
 800a114:	232b      	movmi	r3, #43	; 0x2b
 800a116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11a:	f89a 3000 	ldrb.w	r3, [sl]
 800a11e:	2b2a      	cmp	r3, #42	; 0x2a
 800a120:	d015      	beq.n	800a14e <_svfiprintf_r+0xf6>
 800a122:	9a07      	ldr	r2, [sp, #28]
 800a124:	4654      	mov	r4, sl
 800a126:	2000      	movs	r0, #0
 800a128:	f04f 0c0a 	mov.w	ip, #10
 800a12c:	4621      	mov	r1, r4
 800a12e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a132:	3b30      	subs	r3, #48	; 0x30
 800a134:	2b09      	cmp	r3, #9
 800a136:	d94e      	bls.n	800a1d6 <_svfiprintf_r+0x17e>
 800a138:	b1b0      	cbz	r0, 800a168 <_svfiprintf_r+0x110>
 800a13a:	9207      	str	r2, [sp, #28]
 800a13c:	e014      	b.n	800a168 <_svfiprintf_r+0x110>
 800a13e:	eba0 0308 	sub.w	r3, r0, r8
 800a142:	fa09 f303 	lsl.w	r3, r9, r3
 800a146:	4313      	orrs	r3, r2
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	46a2      	mov	sl, r4
 800a14c:	e7d2      	b.n	800a0f4 <_svfiprintf_r+0x9c>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	1d19      	adds	r1, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9103      	str	r1, [sp, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	bfbb      	ittet	lt
 800a15a:	425b      	neglt	r3, r3
 800a15c:	f042 0202 	orrlt.w	r2, r2, #2
 800a160:	9307      	strge	r3, [sp, #28]
 800a162:	9307      	strlt	r3, [sp, #28]
 800a164:	bfb8      	it	lt
 800a166:	9204      	strlt	r2, [sp, #16]
 800a168:	7823      	ldrb	r3, [r4, #0]
 800a16a:	2b2e      	cmp	r3, #46	; 0x2e
 800a16c:	d10c      	bne.n	800a188 <_svfiprintf_r+0x130>
 800a16e:	7863      	ldrb	r3, [r4, #1]
 800a170:	2b2a      	cmp	r3, #42	; 0x2a
 800a172:	d135      	bne.n	800a1e0 <_svfiprintf_r+0x188>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	1d1a      	adds	r2, r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	9203      	str	r2, [sp, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bfb8      	it	lt
 800a180:	f04f 33ff 	movlt.w	r3, #4294967295
 800a184:	3402      	adds	r4, #2
 800a186:	9305      	str	r3, [sp, #20]
 800a188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a254 <_svfiprintf_r+0x1fc>
 800a18c:	7821      	ldrb	r1, [r4, #0]
 800a18e:	2203      	movs	r2, #3
 800a190:	4650      	mov	r0, sl
 800a192:	f7f6 f82d 	bl	80001f0 <memchr>
 800a196:	b140      	cbz	r0, 800a1aa <_svfiprintf_r+0x152>
 800a198:	2340      	movs	r3, #64	; 0x40
 800a19a:	eba0 000a 	sub.w	r0, r0, sl
 800a19e:	fa03 f000 	lsl.w	r0, r3, r0
 800a1a2:	9b04      	ldr	r3, [sp, #16]
 800a1a4:	4303      	orrs	r3, r0
 800a1a6:	3401      	adds	r4, #1
 800a1a8:	9304      	str	r3, [sp, #16]
 800a1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ae:	4826      	ldr	r0, [pc, #152]	; (800a248 <_svfiprintf_r+0x1f0>)
 800a1b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1b4:	2206      	movs	r2, #6
 800a1b6:	f7f6 f81b 	bl	80001f0 <memchr>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d038      	beq.n	800a230 <_svfiprintf_r+0x1d8>
 800a1be:	4b23      	ldr	r3, [pc, #140]	; (800a24c <_svfiprintf_r+0x1f4>)
 800a1c0:	bb1b      	cbnz	r3, 800a20a <_svfiprintf_r+0x1b2>
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	3307      	adds	r3, #7
 800a1c6:	f023 0307 	bic.w	r3, r3, #7
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	9303      	str	r3, [sp, #12]
 800a1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d0:	4433      	add	r3, r6
 800a1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d4:	e767      	b.n	800a0a6 <_svfiprintf_r+0x4e>
 800a1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1da:	460c      	mov	r4, r1
 800a1dc:	2001      	movs	r0, #1
 800a1de:	e7a5      	b.n	800a12c <_svfiprintf_r+0xd4>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	3401      	adds	r4, #1
 800a1e4:	9305      	str	r3, [sp, #20]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	f04f 0c0a 	mov.w	ip, #10
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f2:	3a30      	subs	r2, #48	; 0x30
 800a1f4:	2a09      	cmp	r2, #9
 800a1f6:	d903      	bls.n	800a200 <_svfiprintf_r+0x1a8>
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0c5      	beq.n	800a188 <_svfiprintf_r+0x130>
 800a1fc:	9105      	str	r1, [sp, #20]
 800a1fe:	e7c3      	b.n	800a188 <_svfiprintf_r+0x130>
 800a200:	fb0c 2101 	mla	r1, ip, r1, r2
 800a204:	4604      	mov	r4, r0
 800a206:	2301      	movs	r3, #1
 800a208:	e7f0      	b.n	800a1ec <_svfiprintf_r+0x194>
 800a20a:	ab03      	add	r3, sp, #12
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	462a      	mov	r2, r5
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <_svfiprintf_r+0x1f8>)
 800a212:	a904      	add	r1, sp, #16
 800a214:	4638      	mov	r0, r7
 800a216:	f7fd fd25 	bl	8007c64 <_printf_float>
 800a21a:	1c42      	adds	r2, r0, #1
 800a21c:	4606      	mov	r6, r0
 800a21e:	d1d6      	bne.n	800a1ce <_svfiprintf_r+0x176>
 800a220:	89ab      	ldrh	r3, [r5, #12]
 800a222:	065b      	lsls	r3, r3, #25
 800a224:	f53f af2c 	bmi.w	800a080 <_svfiprintf_r+0x28>
 800a228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a22a:	b01d      	add	sp, #116	; 0x74
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a230:	ab03      	add	r3, sp, #12
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	462a      	mov	r2, r5
 800a236:	4b06      	ldr	r3, [pc, #24]	; (800a250 <_svfiprintf_r+0x1f8>)
 800a238:	a904      	add	r1, sp, #16
 800a23a:	4638      	mov	r0, r7
 800a23c:	f7fd ffb6 	bl	80081ac <_printf_i>
 800a240:	e7eb      	b.n	800a21a <_svfiprintf_r+0x1c2>
 800a242:	bf00      	nop
 800a244:	08066a54 	.word	0x08066a54
 800a248:	08066a5e 	.word	0x08066a5e
 800a24c:	08007c65 	.word	0x08007c65
 800a250:	08009fa1 	.word	0x08009fa1
 800a254:	08066a5a 	.word	0x08066a5a

0800a258 <__sfputc_r>:
 800a258:	6893      	ldr	r3, [r2, #8]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	b410      	push	{r4}
 800a260:	6093      	str	r3, [r2, #8]
 800a262:	da08      	bge.n	800a276 <__sfputc_r+0x1e>
 800a264:	6994      	ldr	r4, [r2, #24]
 800a266:	42a3      	cmp	r3, r4
 800a268:	db01      	blt.n	800a26e <__sfputc_r+0x16>
 800a26a:	290a      	cmp	r1, #10
 800a26c:	d103      	bne.n	800a276 <__sfputc_r+0x1e>
 800a26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a272:	f7fe b987 	b.w	8008584 <__swbuf_r>
 800a276:	6813      	ldr	r3, [r2, #0]
 800a278:	1c58      	adds	r0, r3, #1
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	7019      	strb	r1, [r3, #0]
 800a27e:	4608      	mov	r0, r1
 800a280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <__sfputs_r>:
 800a286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	4614      	mov	r4, r2
 800a28e:	18d5      	adds	r5, r2, r3
 800a290:	42ac      	cmp	r4, r5
 800a292:	d101      	bne.n	800a298 <__sfputs_r+0x12>
 800a294:	2000      	movs	r0, #0
 800a296:	e007      	b.n	800a2a8 <__sfputs_r+0x22>
 800a298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29c:	463a      	mov	r2, r7
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ffda 	bl	800a258 <__sfputc_r>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d1f3      	bne.n	800a290 <__sfputs_r+0xa>
 800a2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2ac <_vfiprintf_r>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	460d      	mov	r5, r1
 800a2b2:	b09d      	sub	sp, #116	; 0x74
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	4698      	mov	r8, r3
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	b118      	cbz	r0, 800a2c4 <_vfiprintf_r+0x18>
 800a2bc:	6983      	ldr	r3, [r0, #24]
 800a2be:	b90b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x18>
 800a2c0:	f7ff f9b4 	bl	800962c <__sinit>
 800a2c4:	4b89      	ldr	r3, [pc, #548]	; (800a4ec <_vfiprintf_r+0x240>)
 800a2c6:	429d      	cmp	r5, r3
 800a2c8:	d11b      	bne.n	800a302 <_vfiprintf_r+0x56>
 800a2ca:	6875      	ldr	r5, [r6, #4]
 800a2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ce:	07d9      	lsls	r1, r3, #31
 800a2d0:	d405      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	059a      	lsls	r2, r3, #22
 800a2d6:	d402      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2da:	f7ff fa4a 	bl	8009772 <__retarget_lock_acquire_recursive>
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	071b      	lsls	r3, r3, #28
 800a2e2:	d501      	bpl.n	800a2e8 <_vfiprintf_r+0x3c>
 800a2e4:	692b      	ldr	r3, [r5, #16]
 800a2e6:	b9eb      	cbnz	r3, 800a324 <_vfiprintf_r+0x78>
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f7fe f99c 	bl	8008628 <__swsetup_r>
 800a2f0:	b1c0      	cbz	r0, 800a324 <_vfiprintf_r+0x78>
 800a2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2f4:	07dc      	lsls	r4, r3, #31
 800a2f6:	d50e      	bpl.n	800a316 <_vfiprintf_r+0x6a>
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	b01d      	add	sp, #116	; 0x74
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a302:	4b7b      	ldr	r3, [pc, #492]	; (800a4f0 <_vfiprintf_r+0x244>)
 800a304:	429d      	cmp	r5, r3
 800a306:	d101      	bne.n	800a30c <_vfiprintf_r+0x60>
 800a308:	68b5      	ldr	r5, [r6, #8]
 800a30a:	e7df      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a30c:	4b79      	ldr	r3, [pc, #484]	; (800a4f4 <_vfiprintf_r+0x248>)
 800a30e:	429d      	cmp	r5, r3
 800a310:	bf08      	it	eq
 800a312:	68f5      	ldreq	r5, [r6, #12]
 800a314:	e7da      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	0598      	lsls	r0, r3, #22
 800a31a:	d4ed      	bmi.n	800a2f8 <_vfiprintf_r+0x4c>
 800a31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a31e:	f7ff fa29 	bl	8009774 <__retarget_lock_release_recursive>
 800a322:	e7e9      	b.n	800a2f8 <_vfiprintf_r+0x4c>
 800a324:	2300      	movs	r3, #0
 800a326:	9309      	str	r3, [sp, #36]	; 0x24
 800a328:	2320      	movs	r3, #32
 800a32a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a332:	2330      	movs	r3, #48	; 0x30
 800a334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4f8 <_vfiprintf_r+0x24c>
 800a338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	4623      	mov	r3, r4
 800a342:	469a      	mov	sl, r3
 800a344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a348:	b10a      	cbz	r2, 800a34e <_vfiprintf_r+0xa2>
 800a34a:	2a25      	cmp	r2, #37	; 0x25
 800a34c:	d1f9      	bne.n	800a342 <_vfiprintf_r+0x96>
 800a34e:	ebba 0b04 	subs.w	fp, sl, r4
 800a352:	d00b      	beq.n	800a36c <_vfiprintf_r+0xc0>
 800a354:	465b      	mov	r3, fp
 800a356:	4622      	mov	r2, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff ff93 	bl	800a286 <__sfputs_r>
 800a360:	3001      	adds	r0, #1
 800a362:	f000 80aa 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a368:	445a      	add	r2, fp
 800a36a:	9209      	str	r2, [sp, #36]	; 0x24
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 80a2 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a376:	2300      	movs	r3, #0
 800a378:	f04f 32ff 	mov.w	r2, #4294967295
 800a37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a380:	f10a 0a01 	add.w	sl, sl, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a38c:	931a      	str	r3, [sp, #104]	; 0x68
 800a38e:	4654      	mov	r4, sl
 800a390:	2205      	movs	r2, #5
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	4858      	ldr	r0, [pc, #352]	; (800a4f8 <_vfiprintf_r+0x24c>)
 800a398:	f7f5 ff2a 	bl	80001f0 <memchr>
 800a39c:	9a04      	ldr	r2, [sp, #16]
 800a39e:	b9d8      	cbnz	r0, 800a3d8 <_vfiprintf_r+0x12c>
 800a3a0:	06d1      	lsls	r1, r2, #27
 800a3a2:	bf44      	itt	mi
 800a3a4:	2320      	movmi	r3, #32
 800a3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3aa:	0713      	lsls	r3, r2, #28
 800a3ac:	bf44      	itt	mi
 800a3ae:	232b      	movmi	r3, #43	; 0x2b
 800a3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ba:	d015      	beq.n	800a3e8 <_vfiprintf_r+0x13c>
 800a3bc:	9a07      	ldr	r2, [sp, #28]
 800a3be:	4654      	mov	r4, sl
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3cc:	3b30      	subs	r3, #48	; 0x30
 800a3ce:	2b09      	cmp	r3, #9
 800a3d0:	d94e      	bls.n	800a470 <_vfiprintf_r+0x1c4>
 800a3d2:	b1b0      	cbz	r0, 800a402 <_vfiprintf_r+0x156>
 800a3d4:	9207      	str	r2, [sp, #28]
 800a3d6:	e014      	b.n	800a402 <_vfiprintf_r+0x156>
 800a3d8:	eba0 0308 	sub.w	r3, r0, r8
 800a3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	46a2      	mov	sl, r4
 800a3e6:	e7d2      	b.n	800a38e <_vfiprintf_r+0xe2>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	1d19      	adds	r1, r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	9103      	str	r1, [sp, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfbb      	ittet	lt
 800a3f4:	425b      	neglt	r3, r3
 800a3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3fa:	9307      	strge	r3, [sp, #28]
 800a3fc:	9307      	strlt	r3, [sp, #28]
 800a3fe:	bfb8      	it	lt
 800a400:	9204      	strlt	r2, [sp, #16]
 800a402:	7823      	ldrb	r3, [r4, #0]
 800a404:	2b2e      	cmp	r3, #46	; 0x2e
 800a406:	d10c      	bne.n	800a422 <_vfiprintf_r+0x176>
 800a408:	7863      	ldrb	r3, [r4, #1]
 800a40a:	2b2a      	cmp	r3, #42	; 0x2a
 800a40c:	d135      	bne.n	800a47a <_vfiprintf_r+0x1ce>
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	1d1a      	adds	r2, r3, #4
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	9203      	str	r2, [sp, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	bfb8      	it	lt
 800a41a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a41e:	3402      	adds	r4, #2
 800a420:	9305      	str	r3, [sp, #20]
 800a422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a508 <_vfiprintf_r+0x25c>
 800a426:	7821      	ldrb	r1, [r4, #0]
 800a428:	2203      	movs	r2, #3
 800a42a:	4650      	mov	r0, sl
 800a42c:	f7f5 fee0 	bl	80001f0 <memchr>
 800a430:	b140      	cbz	r0, 800a444 <_vfiprintf_r+0x198>
 800a432:	2340      	movs	r3, #64	; 0x40
 800a434:	eba0 000a 	sub.w	r0, r0, sl
 800a438:	fa03 f000 	lsl.w	r0, r3, r0
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	4303      	orrs	r3, r0
 800a440:	3401      	adds	r4, #1
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a448:	482c      	ldr	r0, [pc, #176]	; (800a4fc <_vfiprintf_r+0x250>)
 800a44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a44e:	2206      	movs	r2, #6
 800a450:	f7f5 fece 	bl	80001f0 <memchr>
 800a454:	2800      	cmp	r0, #0
 800a456:	d03f      	beq.n	800a4d8 <_vfiprintf_r+0x22c>
 800a458:	4b29      	ldr	r3, [pc, #164]	; (800a500 <_vfiprintf_r+0x254>)
 800a45a:	bb1b      	cbnz	r3, 800a4a4 <_vfiprintf_r+0x1f8>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	3307      	adds	r3, #7
 800a460:	f023 0307 	bic.w	r3, r3, #7
 800a464:	3308      	adds	r3, #8
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46a:	443b      	add	r3, r7
 800a46c:	9309      	str	r3, [sp, #36]	; 0x24
 800a46e:	e767      	b.n	800a340 <_vfiprintf_r+0x94>
 800a470:	fb0c 3202 	mla	r2, ip, r2, r3
 800a474:	460c      	mov	r4, r1
 800a476:	2001      	movs	r0, #1
 800a478:	e7a5      	b.n	800a3c6 <_vfiprintf_r+0x11a>
 800a47a:	2300      	movs	r3, #0
 800a47c:	3401      	adds	r4, #1
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	4619      	mov	r1, r3
 800a482:	f04f 0c0a 	mov.w	ip, #10
 800a486:	4620      	mov	r0, r4
 800a488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48c:	3a30      	subs	r2, #48	; 0x30
 800a48e:	2a09      	cmp	r2, #9
 800a490:	d903      	bls.n	800a49a <_vfiprintf_r+0x1ee>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0c5      	beq.n	800a422 <_vfiprintf_r+0x176>
 800a496:	9105      	str	r1, [sp, #20]
 800a498:	e7c3      	b.n	800a422 <_vfiprintf_r+0x176>
 800a49a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a49e:	4604      	mov	r4, r0
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7f0      	b.n	800a486 <_vfiprintf_r+0x1da>
 800a4a4:	ab03      	add	r3, sp, #12
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4b16      	ldr	r3, [pc, #88]	; (800a504 <_vfiprintf_r+0x258>)
 800a4ac:	a904      	add	r1, sp, #16
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7fd fbd8 	bl	8007c64 <_printf_float>
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	1c78      	adds	r0, r7, #1
 800a4b8:	d1d6      	bne.n	800a468 <_vfiprintf_r+0x1bc>
 800a4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4bc:	07d9      	lsls	r1, r3, #31
 800a4be:	d405      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c0:	89ab      	ldrh	r3, [r5, #12]
 800a4c2:	059a      	lsls	r2, r3, #22
 800a4c4:	d402      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4c8:	f7ff f954 	bl	8009774 <__retarget_lock_release_recursive>
 800a4cc:	89ab      	ldrh	r3, [r5, #12]
 800a4ce:	065b      	lsls	r3, r3, #25
 800a4d0:	f53f af12 	bmi.w	800a2f8 <_vfiprintf_r+0x4c>
 800a4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4d6:	e711      	b.n	800a2fc <_vfiprintf_r+0x50>
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4b09      	ldr	r3, [pc, #36]	; (800a504 <_vfiprintf_r+0x258>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7fd fe62 	bl	80081ac <_printf_i>
 800a4e8:	e7e4      	b.n	800a4b4 <_vfiprintf_r+0x208>
 800a4ea:	bf00      	nop
 800a4ec:	080668b8 	.word	0x080668b8
 800a4f0:	080668d8 	.word	0x080668d8
 800a4f4:	08066898 	.word	0x08066898
 800a4f8:	08066a54 	.word	0x08066a54
 800a4fc:	08066a5e 	.word	0x08066a5e
 800a500:	08007c65 	.word	0x08007c65
 800a504:	0800a287 	.word	0x0800a287
 800a508:	08066a5a 	.word	0x08066a5a

0800a50c <__sread>:
 800a50c:	b510      	push	{r4, lr}
 800a50e:	460c      	mov	r4, r1
 800a510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a514:	f000 f8f8 	bl	800a708 <_read_r>
 800a518:	2800      	cmp	r0, #0
 800a51a:	bfab      	itete	ge
 800a51c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a51e:	89a3      	ldrhlt	r3, [r4, #12]
 800a520:	181b      	addge	r3, r3, r0
 800a522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a526:	bfac      	ite	ge
 800a528:	6563      	strge	r3, [r4, #84]	; 0x54
 800a52a:	81a3      	strhlt	r3, [r4, #12]
 800a52c:	bd10      	pop	{r4, pc}

0800a52e <__swrite>:
 800a52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a532:	461f      	mov	r7, r3
 800a534:	898b      	ldrh	r3, [r1, #12]
 800a536:	05db      	lsls	r3, r3, #23
 800a538:	4605      	mov	r5, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	4616      	mov	r6, r2
 800a53e:	d505      	bpl.n	800a54c <__swrite+0x1e>
 800a540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a544:	2302      	movs	r3, #2
 800a546:	2200      	movs	r2, #0
 800a548:	f000 f898 	bl	800a67c <_lseek_r>
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a556:	81a3      	strh	r3, [r4, #12]
 800a558:	4632      	mov	r2, r6
 800a55a:	463b      	mov	r3, r7
 800a55c:	4628      	mov	r0, r5
 800a55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a562:	f000 b817 	b.w	800a594 <_write_r>

0800a566 <__sseek>:
 800a566:	b510      	push	{r4, lr}
 800a568:	460c      	mov	r4, r1
 800a56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a56e:	f000 f885 	bl	800a67c <_lseek_r>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	bf15      	itete	ne
 800a578:	6560      	strne	r0, [r4, #84]	; 0x54
 800a57a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a57e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a582:	81a3      	strheq	r3, [r4, #12]
 800a584:	bf18      	it	ne
 800a586:	81a3      	strhne	r3, [r4, #12]
 800a588:	bd10      	pop	{r4, pc}

0800a58a <__sclose>:
 800a58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58e:	f000 b831 	b.w	800a5f4 <_close_r>
	...

0800a594 <_write_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	4d07      	ldr	r5, [pc, #28]	; (800a5b4 <_write_r+0x20>)
 800a598:	4604      	mov	r4, r0
 800a59a:	4608      	mov	r0, r1
 800a59c:	4611      	mov	r1, r2
 800a59e:	2200      	movs	r2, #0
 800a5a0:	602a      	str	r2, [r5, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f000 fd38 	bl	800b018 <_write>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_write_r+0x1e>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_write_r+0x1e>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	20002bf0 	.word	0x20002bf0

0800a5b8 <__assert_func>:
 800a5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ba:	4614      	mov	r4, r2
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <__assert_func+0x2c>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4605      	mov	r5, r0
 800a5c4:	68d8      	ldr	r0, [r3, #12]
 800a5c6:	b14c      	cbz	r4, 800a5dc <__assert_func+0x24>
 800a5c8:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <__assert_func+0x30>)
 800a5ca:	9100      	str	r1, [sp, #0]
 800a5cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5d0:	4906      	ldr	r1, [pc, #24]	; (800a5ec <__assert_func+0x34>)
 800a5d2:	462b      	mov	r3, r5
 800a5d4:	f000 f81e 	bl	800a614 <fiprintf>
 800a5d8:	f000 f8b5 	bl	800a746 <abort>
 800a5dc:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <__assert_func+0x38>)
 800a5de:	461c      	mov	r4, r3
 800a5e0:	e7f3      	b.n	800a5ca <__assert_func+0x12>
 800a5e2:	bf00      	nop
 800a5e4:	20000ed0 	.word	0x20000ed0
 800a5e8:	08066a65 	.word	0x08066a65
 800a5ec:	08066a72 	.word	0x08066a72
 800a5f0:	08066aa0 	.word	0x08066aa0

0800a5f4 <_close_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d06      	ldr	r5, [pc, #24]	; (800a610 <_close_r+0x1c>)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	602b      	str	r3, [r5, #0]
 800a600:	f000 fcd2 	bl	800afa8 <_close>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_close_r+0x1a>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_close_r+0x1a>
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	20002bf0 	.word	0x20002bf0

0800a614 <fiprintf>:
 800a614:	b40e      	push	{r1, r2, r3}
 800a616:	b503      	push	{r0, r1, lr}
 800a618:	4601      	mov	r1, r0
 800a61a:	ab03      	add	r3, sp, #12
 800a61c:	4805      	ldr	r0, [pc, #20]	; (800a634 <fiprintf+0x20>)
 800a61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a622:	6800      	ldr	r0, [r0, #0]
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	f7ff fe41 	bl	800a2ac <_vfiprintf_r>
 800a62a:	b002      	add	sp, #8
 800a62c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a630:	b003      	add	sp, #12
 800a632:	4770      	bx	lr
 800a634:	20000ed0 	.word	0x20000ed0

0800a638 <_fstat_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	; (800a658 <_fstat_r+0x20>)
 800a63c:	2300      	movs	r3, #0
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f000 fcb7 	bl	800afb8 <_fstat>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d102      	bne.n	800a654 <_fstat_r+0x1c>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	b103      	cbz	r3, 800a654 <_fstat_r+0x1c>
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	bd38      	pop	{r3, r4, r5, pc}
 800a656:	bf00      	nop
 800a658:	20002bf0 	.word	0x20002bf0

0800a65c <_isatty_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4d06      	ldr	r5, [pc, #24]	; (800a678 <_isatty_r+0x1c>)
 800a660:	2300      	movs	r3, #0
 800a662:	4604      	mov	r4, r0
 800a664:	4608      	mov	r0, r1
 800a666:	602b      	str	r3, [r5, #0]
 800a668:	f000 fcb6 	bl	800afd8 <_isatty>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_isatty_r+0x1a>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_isatty_r+0x1a>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	20002bf0 	.word	0x20002bf0

0800a67c <_lseek_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4d07      	ldr	r5, [pc, #28]	; (800a69c <_lseek_r+0x20>)
 800a680:	4604      	mov	r4, r0
 800a682:	4608      	mov	r0, r1
 800a684:	4611      	mov	r1, r2
 800a686:	2200      	movs	r2, #0
 800a688:	602a      	str	r2, [r5, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	f000 fcb4 	bl	800aff8 <_lseek>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_lseek_r+0x1e>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b103      	cbz	r3, 800a69a <_lseek_r+0x1e>
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20002bf0 	.word	0x20002bf0

0800a6a0 <__ascii_mbtowc>:
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	b901      	cbnz	r1, 800a6a6 <__ascii_mbtowc+0x6>
 800a6a4:	a901      	add	r1, sp, #4
 800a6a6:	b142      	cbz	r2, 800a6ba <__ascii_mbtowc+0x1a>
 800a6a8:	b14b      	cbz	r3, 800a6be <__ascii_mbtowc+0x1e>
 800a6aa:	7813      	ldrb	r3, [r2, #0]
 800a6ac:	600b      	str	r3, [r1, #0]
 800a6ae:	7812      	ldrb	r2, [r2, #0]
 800a6b0:	1e10      	subs	r0, r2, #0
 800a6b2:	bf18      	it	ne
 800a6b4:	2001      	movne	r0, #1
 800a6b6:	b002      	add	sp, #8
 800a6b8:	4770      	bx	lr
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	e7fb      	b.n	800a6b6 <__ascii_mbtowc+0x16>
 800a6be:	f06f 0001 	mvn.w	r0, #1
 800a6c2:	e7f8      	b.n	800a6b6 <__ascii_mbtowc+0x16>

0800a6c4 <memmove>:
 800a6c4:	4288      	cmp	r0, r1
 800a6c6:	b510      	push	{r4, lr}
 800a6c8:	eb01 0402 	add.w	r4, r1, r2
 800a6cc:	d902      	bls.n	800a6d4 <memmove+0x10>
 800a6ce:	4284      	cmp	r4, r0
 800a6d0:	4623      	mov	r3, r4
 800a6d2:	d807      	bhi.n	800a6e4 <memmove+0x20>
 800a6d4:	1e43      	subs	r3, r0, #1
 800a6d6:	42a1      	cmp	r1, r4
 800a6d8:	d008      	beq.n	800a6ec <memmove+0x28>
 800a6da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6e2:	e7f8      	b.n	800a6d6 <memmove+0x12>
 800a6e4:	4402      	add	r2, r0
 800a6e6:	4601      	mov	r1, r0
 800a6e8:	428a      	cmp	r2, r1
 800a6ea:	d100      	bne.n	800a6ee <memmove+0x2a>
 800a6ec:	bd10      	pop	{r4, pc}
 800a6ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6f6:	e7f7      	b.n	800a6e8 <memmove+0x24>

0800a6f8 <_malloc_usable_size_r>:
 800a6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6fc:	1f18      	subs	r0, r3, #4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	bfbc      	itt	lt
 800a702:	580b      	ldrlt	r3, [r1, r0]
 800a704:	18c0      	addlt	r0, r0, r3
 800a706:	4770      	bx	lr

0800a708 <_read_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d07      	ldr	r5, [pc, #28]	; (800a728 <_read_r+0x20>)
 800a70c:	4604      	mov	r4, r0
 800a70e:	4608      	mov	r0, r1
 800a710:	4611      	mov	r1, r2
 800a712:	2200      	movs	r2, #0
 800a714:	602a      	str	r2, [r5, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	f000 fc76 	bl	800b008 <_read>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_read_r+0x1e>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_read_r+0x1e>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	20002bf0 	.word	0x20002bf0

0800a72c <__ascii_wctomb>:
 800a72c:	b149      	cbz	r1, 800a742 <__ascii_wctomb+0x16>
 800a72e:	2aff      	cmp	r2, #255	; 0xff
 800a730:	bf85      	ittet	hi
 800a732:	238a      	movhi	r3, #138	; 0x8a
 800a734:	6003      	strhi	r3, [r0, #0]
 800a736:	700a      	strbls	r2, [r1, #0]
 800a738:	f04f 30ff 	movhi.w	r0, #4294967295
 800a73c:	bf98      	it	ls
 800a73e:	2001      	movls	r0, #1
 800a740:	4770      	bx	lr
 800a742:	4608      	mov	r0, r1
 800a744:	4770      	bx	lr

0800a746 <abort>:
 800a746:	b508      	push	{r3, lr}
 800a748:	2006      	movs	r0, #6
 800a74a:	f000 f82b 	bl	800a7a4 <raise>
 800a74e:	2001      	movs	r0, #1
 800a750:	f000 fc6a 	bl	800b028 <_exit>

0800a754 <_raise_r>:
 800a754:	291f      	cmp	r1, #31
 800a756:	b538      	push	{r3, r4, r5, lr}
 800a758:	4604      	mov	r4, r0
 800a75a:	460d      	mov	r5, r1
 800a75c:	d904      	bls.n	800a768 <_raise_r+0x14>
 800a75e:	2316      	movs	r3, #22
 800a760:	6003      	str	r3, [r0, #0]
 800a762:	f04f 30ff 	mov.w	r0, #4294967295
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a76a:	b112      	cbz	r2, 800a772 <_raise_r+0x1e>
 800a76c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a770:	b94b      	cbnz	r3, 800a786 <_raise_r+0x32>
 800a772:	4620      	mov	r0, r4
 800a774:	f000 f830 	bl	800a7d8 <_getpid_r>
 800a778:	462a      	mov	r2, r5
 800a77a:	4601      	mov	r1, r0
 800a77c:	4620      	mov	r0, r4
 800a77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a782:	f000 b817 	b.w	800a7b4 <_kill_r>
 800a786:	2b01      	cmp	r3, #1
 800a788:	d00a      	beq.n	800a7a0 <_raise_r+0x4c>
 800a78a:	1c59      	adds	r1, r3, #1
 800a78c:	d103      	bne.n	800a796 <_raise_r+0x42>
 800a78e:	2316      	movs	r3, #22
 800a790:	6003      	str	r3, [r0, #0]
 800a792:	2001      	movs	r0, #1
 800a794:	e7e7      	b.n	800a766 <_raise_r+0x12>
 800a796:	2400      	movs	r4, #0
 800a798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a79c:	4628      	mov	r0, r5
 800a79e:	4798      	blx	r3
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	e7e0      	b.n	800a766 <_raise_r+0x12>

0800a7a4 <raise>:
 800a7a4:	4b02      	ldr	r3, [pc, #8]	; (800a7b0 <raise+0xc>)
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	f7ff bfd3 	b.w	800a754 <_raise_r>
 800a7ae:	bf00      	nop
 800a7b0:	20000ed0 	.word	0x20000ed0

0800a7b4 <_kill_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4d07      	ldr	r5, [pc, #28]	; (800a7d4 <_kill_r+0x20>)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	4611      	mov	r1, r2
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	f000 fc11 	bl	800afe8 <_kill>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d102      	bne.n	800a7d0 <_kill_r+0x1c>
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	b103      	cbz	r3, 800a7d0 <_kill_r+0x1c>
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	bd38      	pop	{r3, r4, r5, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20002bf0 	.word	0x20002bf0

0800a7d8 <_getpid_r>:
 800a7d8:	f000 bbf6 	b.w	800afc8 <_getpid>
 800a7dc:	0000      	movs	r0, r0
	...

0800a7e0 <exp>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	ed2d 8b02 	vpush	{d8}
 800a7e6:	ec55 4b10 	vmov	r4, r5, d0
 800a7ea:	f000 f891 	bl	800a910 <__ieee754_exp>
 800a7ee:	4b22      	ldr	r3, [pc, #136]	; (800a878 <exp+0x98>)
 800a7f0:	eeb0 8a40 	vmov.f32	s16, s0
 800a7f4:	eef0 8a60 	vmov.f32	s17, s1
 800a7f8:	f993 3000 	ldrsb.w	r3, [r3]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	d012      	beq.n	800a826 <exp+0x46>
 800a800:	ec45 4b10 	vmov	d0, r4, r5
 800a804:	f000 fbba 	bl	800af7c <finite>
 800a808:	b168      	cbz	r0, 800a826 <exp+0x46>
 800a80a:	a313      	add	r3, pc, #76	; (adr r3, 800a858 <exp+0x78>)
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	4620      	mov	r0, r4
 800a812:	4629      	mov	r1, r5
 800a814:	f7f6 f988 	bl	8000b28 <__aeabi_dcmpgt>
 800a818:	b160      	cbz	r0, 800a834 <exp+0x54>
 800a81a:	f7fd f879 	bl	8007910 <__errno>
 800a81e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800a860 <exp+0x80>
 800a822:	2322      	movs	r3, #34	; 0x22
 800a824:	6003      	str	r3, [r0, #0]
 800a826:	eeb0 0a48 	vmov.f32	s0, s16
 800a82a:	eef0 0a68 	vmov.f32	s1, s17
 800a82e:	ecbd 8b02 	vpop	{d8}
 800a832:	bd38      	pop	{r3, r4, r5, pc}
 800a834:	a30c      	add	r3, pc, #48	; (adr r3, 800a868 <exp+0x88>)
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	4620      	mov	r0, r4
 800a83c:	4629      	mov	r1, r5
 800a83e:	f7f6 f955 	bl	8000aec <__aeabi_dcmplt>
 800a842:	2800      	cmp	r0, #0
 800a844:	d0ef      	beq.n	800a826 <exp+0x46>
 800a846:	f7fd f863 	bl	8007910 <__errno>
 800a84a:	2322      	movs	r3, #34	; 0x22
 800a84c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800a870 <exp+0x90>
 800a850:	6003      	str	r3, [r0, #0]
 800a852:	e7e8      	b.n	800a826 <exp+0x46>
 800a854:	f3af 8000 	nop.w
 800a858:	fefa39ef 	.word	0xfefa39ef
 800a85c:	40862e42 	.word	0x40862e42
 800a860:	00000000 	.word	0x00000000
 800a864:	7ff00000 	.word	0x7ff00000
 800a868:	d52d3051 	.word	0xd52d3051
 800a86c:	c0874910 	.word	0xc0874910
	...
 800a878:	200010a0 	.word	0x200010a0
 800a87c:	00000000 	.word	0x00000000

0800a880 <log>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	ed2d 8b02 	vpush	{d8}
 800a886:	ec55 4b10 	vmov	r4, r5, d0
 800a88a:	f000 f9bd 	bl	800ac08 <__ieee754_log>
 800a88e:	4b1e      	ldr	r3, [pc, #120]	; (800a908 <log+0x88>)
 800a890:	eeb0 8a40 	vmov.f32	s16, s0
 800a894:	eef0 8a60 	vmov.f32	s17, s1
 800a898:	f993 3000 	ldrsb.w	r3, [r3]
 800a89c:	3301      	adds	r3, #1
 800a89e:	d01a      	beq.n	800a8d6 <log+0x56>
 800a8a0:	4622      	mov	r2, r4
 800a8a2:	462b      	mov	r3, r5
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f6 f948 	bl	8000b3c <__aeabi_dcmpun>
 800a8ac:	b998      	cbnz	r0, 800a8d6 <log+0x56>
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	f7f6 f937 	bl	8000b28 <__aeabi_dcmpgt>
 800a8ba:	b960      	cbnz	r0, 800a8d6 <log+0x56>
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2300      	movs	r3, #0
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7f6 f908 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8c8:	b160      	cbz	r0, 800a8e4 <log+0x64>
 800a8ca:	f7fd f821 	bl	8007910 <__errno>
 800a8ce:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800a900 <log+0x80>
 800a8d2:	2322      	movs	r3, #34	; 0x22
 800a8d4:	6003      	str	r3, [r0, #0]
 800a8d6:	eeb0 0a48 	vmov.f32	s0, s16
 800a8da:	eef0 0a68 	vmov.f32	s1, s17
 800a8de:	ecbd 8b02 	vpop	{d8}
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	f7fd f814 	bl	8007910 <__errno>
 800a8e8:	ecbd 8b02 	vpop	{d8}
 800a8ec:	2321      	movs	r3, #33	; 0x21
 800a8ee:	6003      	str	r3, [r0, #0]
 800a8f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8f4:	4805      	ldr	r0, [pc, #20]	; (800a90c <log+0x8c>)
 800a8f6:	f000 bb4f 	b.w	800af98 <nan>
 800a8fa:	bf00      	nop
 800a8fc:	f3af 8000 	nop.w
 800a900:	00000000 	.word	0x00000000
 800a904:	fff00000 	.word	0xfff00000
 800a908:	200010a0 	.word	0x200010a0
 800a90c:	08066aa0 	.word	0x08066aa0

0800a910 <__ieee754_exp>:
 800a910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a914:	ec55 4b10 	vmov	r4, r5, d0
 800a918:	49b1      	ldr	r1, [pc, #708]	; (800abe0 <__ieee754_exp+0x2d0>)
 800a91a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a91e:	428b      	cmp	r3, r1
 800a920:	ed2d 8b04 	vpush	{d8-d9}
 800a924:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800a928:	d937      	bls.n	800a99a <__ieee754_exp+0x8a>
 800a92a:	49ae      	ldr	r1, [pc, #696]	; (800abe4 <__ieee754_exp+0x2d4>)
 800a92c:	428b      	cmp	r3, r1
 800a92e:	d916      	bls.n	800a95e <__ieee754_exp+0x4e>
 800a930:	ee10 3a10 	vmov	r3, s0
 800a934:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800a938:	4313      	orrs	r3, r2
 800a93a:	d009      	beq.n	800a950 <__ieee754_exp+0x40>
 800a93c:	ee10 2a10 	vmov	r2, s0
 800a940:	462b      	mov	r3, r5
 800a942:	4620      	mov	r0, r4
 800a944:	4629      	mov	r1, r5
 800a946:	f7f5 fca9 	bl	800029c <__adddf3>
 800a94a:	4604      	mov	r4, r0
 800a94c:	460d      	mov	r5, r1
 800a94e:	e000      	b.n	800a952 <__ieee754_exp+0x42>
 800a950:	bb06      	cbnz	r6, 800a994 <__ieee754_exp+0x84>
 800a952:	ecbd 8b04 	vpop	{d8-d9}
 800a956:	ec45 4b10 	vmov	d0, r4, r5
 800a95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95e:	a38a      	add	r3, pc, #552	; (adr r3, 800ab88 <__ieee754_exp+0x278>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	ee10 0a10 	vmov	r0, s0
 800a968:	4629      	mov	r1, r5
 800a96a:	f7f6 f8dd 	bl	8000b28 <__aeabi_dcmpgt>
 800a96e:	b138      	cbz	r0, 800a980 <__ieee754_exp+0x70>
 800a970:	a387      	add	r3, pc, #540	; (adr r3, 800ab90 <__ieee754_exp+0x280>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	4610      	mov	r0, r2
 800a978:	4619      	mov	r1, r3
 800a97a:	f7f5 fe45 	bl	8000608 <__aeabi_dmul>
 800a97e:	e7e4      	b.n	800a94a <__ieee754_exp+0x3a>
 800a980:	a385      	add	r3, pc, #532	; (adr r3, 800ab98 <__ieee754_exp+0x288>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	4620      	mov	r0, r4
 800a988:	4629      	mov	r1, r5
 800a98a:	f7f6 f8af 	bl	8000aec <__aeabi_dcmplt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	f000 8087 	beq.w	800aaa2 <__ieee754_exp+0x192>
 800a994:	2400      	movs	r4, #0
 800a996:	2500      	movs	r5, #0
 800a998:	e7db      	b.n	800a952 <__ieee754_exp+0x42>
 800a99a:	4a93      	ldr	r2, [pc, #588]	; (800abe8 <__ieee754_exp+0x2d8>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	f240 80ac 	bls.w	800aafa <__ieee754_exp+0x1ea>
 800a9a2:	4a92      	ldr	r2, [pc, #584]	; (800abec <__ieee754_exp+0x2dc>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d87c      	bhi.n	800aaa2 <__ieee754_exp+0x192>
 800a9a8:	4b91      	ldr	r3, [pc, #580]	; (800abf0 <__ieee754_exp+0x2e0>)
 800a9aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	ee10 0a10 	vmov	r0, s0
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	f7f5 fc6e 	bl	8000298 <__aeabi_dsub>
 800a9bc:	4b8d      	ldr	r3, [pc, #564]	; (800abf4 <__ieee754_exp+0x2e4>)
 800a9be:	00f7      	lsls	r7, r6, #3
 800a9c0:	443b      	add	r3, r7
 800a9c2:	ed93 7b00 	vldr	d7, [r3]
 800a9c6:	f1c6 0a01 	rsb	sl, r6, #1
 800a9ca:	4680      	mov	r8, r0
 800a9cc:	4689      	mov	r9, r1
 800a9ce:	ebaa 0a06 	sub.w	sl, sl, r6
 800a9d2:	eeb0 8a47 	vmov.f32	s16, s14
 800a9d6:	eef0 8a67 	vmov.f32	s17, s15
 800a9da:	ec53 2b18 	vmov	r2, r3, d8
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f5 fc59 	bl	8000298 <__aeabi_dsub>
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	460d      	mov	r5, r1
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	462b      	mov	r3, r5
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	f7f5 fe09 	bl	8000608 <__aeabi_dmul>
 800a9f6:	a36a      	add	r3, pc, #424	; (adr r3, 800aba0 <__ieee754_exp+0x290>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	460f      	mov	r7, r1
 800aa00:	f7f5 fe02 	bl	8000608 <__aeabi_dmul>
 800aa04:	a368      	add	r3, pc, #416	; (adr r3, 800aba8 <__ieee754_exp+0x298>)
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	f7f5 fc45 	bl	8000298 <__aeabi_dsub>
 800aa0e:	4632      	mov	r2, r6
 800aa10:	463b      	mov	r3, r7
 800aa12:	f7f5 fdf9 	bl	8000608 <__aeabi_dmul>
 800aa16:	a366      	add	r3, pc, #408	; (adr r3, 800abb0 <__ieee754_exp+0x2a0>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fc3e 	bl	800029c <__adddf3>
 800aa20:	4632      	mov	r2, r6
 800aa22:	463b      	mov	r3, r7
 800aa24:	f7f5 fdf0 	bl	8000608 <__aeabi_dmul>
 800aa28:	a363      	add	r3, pc, #396	; (adr r3, 800abb8 <__ieee754_exp+0x2a8>)
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 fc33 	bl	8000298 <__aeabi_dsub>
 800aa32:	4632      	mov	r2, r6
 800aa34:	463b      	mov	r3, r7
 800aa36:	f7f5 fde7 	bl	8000608 <__aeabi_dmul>
 800aa3a:	a361      	add	r3, pc, #388	; (adr r3, 800abc0 <__ieee754_exp+0x2b0>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fc2c 	bl	800029c <__adddf3>
 800aa44:	4632      	mov	r2, r6
 800aa46:	463b      	mov	r3, r7
 800aa48:	f7f5 fdde 	bl	8000608 <__aeabi_dmul>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4620      	mov	r0, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	f7f5 fc20 	bl	8000298 <__aeabi_dsub>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	4620      	mov	r0, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7f5 fdd0 	bl	8000608 <__aeabi_dmul>
 800aa68:	ec41 0b19 	vmov	d9, r0, r1
 800aa6c:	f1ba 0f00 	cmp.w	sl, #0
 800aa70:	d15d      	bne.n	800ab2e <__ieee754_exp+0x21e>
 800aa72:	2200      	movs	r2, #0
 800aa74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa78:	4630      	mov	r0, r6
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	f7f5 fc0c 	bl	8000298 <__aeabi_dsub>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	ec51 0b19 	vmov	r0, r1, d9
 800aa88:	f7f5 fee8 	bl	800085c <__aeabi_ddiv>
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	462b      	mov	r3, r5
 800aa90:	f7f5 fc02 	bl	8000298 <__aeabi_dsub>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	2000      	movs	r0, #0
 800aa9a:	4957      	ldr	r1, [pc, #348]	; (800abf8 <__ieee754_exp+0x2e8>)
 800aa9c:	f7f5 fbfc 	bl	8000298 <__aeabi_dsub>
 800aaa0:	e753      	b.n	800a94a <__ieee754_exp+0x3a>
 800aaa2:	4856      	ldr	r0, [pc, #344]	; (800abfc <__ieee754_exp+0x2ec>)
 800aaa4:	a348      	add	r3, pc, #288	; (adr r3, 800abc8 <__ieee754_exp+0x2b8>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800aaae:	4629      	mov	r1, r5
 800aab0:	4620      	mov	r0, r4
 800aab2:	f7f5 fda9 	bl	8000608 <__aeabi_dmul>
 800aab6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aaba:	f7f5 fbef 	bl	800029c <__adddf3>
 800aabe:	f7f6 f853 	bl	8000b68 <__aeabi_d2iz>
 800aac2:	4682      	mov	sl, r0
 800aac4:	f7f5 fd36 	bl	8000534 <__aeabi_i2d>
 800aac8:	a341      	add	r3, pc, #260	; (adr r3, 800abd0 <__ieee754_exp+0x2c0>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	4606      	mov	r6, r0
 800aad0:	460f      	mov	r7, r1
 800aad2:	f7f5 fd99 	bl	8000608 <__aeabi_dmul>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4620      	mov	r0, r4
 800aadc:	4629      	mov	r1, r5
 800aade:	f7f5 fbdb 	bl	8000298 <__aeabi_dsub>
 800aae2:	a33d      	add	r3, pc, #244	; (adr r3, 800abd8 <__ieee754_exp+0x2c8>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	4680      	mov	r8, r0
 800aaea:	4689      	mov	r9, r1
 800aaec:	4630      	mov	r0, r6
 800aaee:	4639      	mov	r1, r7
 800aaf0:	f7f5 fd8a 	bl	8000608 <__aeabi_dmul>
 800aaf4:	ec41 0b18 	vmov	d8, r0, r1
 800aaf8:	e76f      	b.n	800a9da <__ieee754_exp+0xca>
 800aafa:	4a41      	ldr	r2, [pc, #260]	; (800ac00 <__ieee754_exp+0x2f0>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d811      	bhi.n	800ab24 <__ieee754_exp+0x214>
 800ab00:	a323      	add	r3, pc, #140	; (adr r3, 800ab90 <__ieee754_exp+0x280>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	ee10 0a10 	vmov	r0, s0
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	f7f5 fbc6 	bl	800029c <__adddf3>
 800ab10:	4b39      	ldr	r3, [pc, #228]	; (800abf8 <__ieee754_exp+0x2e8>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	f7f6 f808 	bl	8000b28 <__aeabi_dcmpgt>
 800ab18:	b138      	cbz	r0, 800ab2a <__ieee754_exp+0x21a>
 800ab1a:	4b37      	ldr	r3, [pc, #220]	; (800abf8 <__ieee754_exp+0x2e8>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4620      	mov	r0, r4
 800ab20:	4629      	mov	r1, r5
 800ab22:	e710      	b.n	800a946 <__ieee754_exp+0x36>
 800ab24:	f04f 0a00 	mov.w	sl, #0
 800ab28:	e75f      	b.n	800a9ea <__ieee754_exp+0xda>
 800ab2a:	4682      	mov	sl, r0
 800ab2c:	e75d      	b.n	800a9ea <__ieee754_exp+0xda>
 800ab2e:	4632      	mov	r2, r6
 800ab30:	463b      	mov	r3, r7
 800ab32:	2000      	movs	r0, #0
 800ab34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ab38:	f7f5 fbae 	bl	8000298 <__aeabi_dsub>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	ec51 0b19 	vmov	r0, r1, d9
 800ab44:	f7f5 fe8a 	bl	800085c <__aeabi_ddiv>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	ec51 0b18 	vmov	r0, r1, d8
 800ab50:	f7f5 fba2 	bl	8000298 <__aeabi_dsub>
 800ab54:	4642      	mov	r2, r8
 800ab56:	464b      	mov	r3, r9
 800ab58:	f7f5 fb9e 	bl	8000298 <__aeabi_dsub>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	2000      	movs	r0, #0
 800ab62:	4925      	ldr	r1, [pc, #148]	; (800abf8 <__ieee754_exp+0x2e8>)
 800ab64:	f7f5 fb98 	bl	8000298 <__aeabi_dsub>
 800ab68:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800ab6c:	4592      	cmp	sl, r2
 800ab6e:	db02      	blt.n	800ab76 <__ieee754_exp+0x266>
 800ab70:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ab74:	e6e9      	b.n	800a94a <__ieee754_exp+0x3a>
 800ab76:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ab7a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800ab84:	e6f9      	b.n	800a97a <__ieee754_exp+0x6a>
 800ab86:	bf00      	nop
 800ab88:	fefa39ef 	.word	0xfefa39ef
 800ab8c:	40862e42 	.word	0x40862e42
 800ab90:	8800759c 	.word	0x8800759c
 800ab94:	7e37e43c 	.word	0x7e37e43c
 800ab98:	d52d3051 	.word	0xd52d3051
 800ab9c:	c0874910 	.word	0xc0874910
 800aba0:	72bea4d0 	.word	0x72bea4d0
 800aba4:	3e663769 	.word	0x3e663769
 800aba8:	c5d26bf1 	.word	0xc5d26bf1
 800abac:	3ebbbd41 	.word	0x3ebbbd41
 800abb0:	af25de2c 	.word	0xaf25de2c
 800abb4:	3f11566a 	.word	0x3f11566a
 800abb8:	16bebd93 	.word	0x16bebd93
 800abbc:	3f66c16c 	.word	0x3f66c16c
 800abc0:	5555553e 	.word	0x5555553e
 800abc4:	3fc55555 	.word	0x3fc55555
 800abc8:	652b82fe 	.word	0x652b82fe
 800abcc:	3ff71547 	.word	0x3ff71547
 800abd0:	fee00000 	.word	0xfee00000
 800abd4:	3fe62e42 	.word	0x3fe62e42
 800abd8:	35793c76 	.word	0x35793c76
 800abdc:	3dea39ef 	.word	0x3dea39ef
 800abe0:	40862e41 	.word	0x40862e41
 800abe4:	7fefffff 	.word	0x7fefffff
 800abe8:	3fd62e42 	.word	0x3fd62e42
 800abec:	3ff0a2b1 	.word	0x3ff0a2b1
 800abf0:	08066bc0 	.word	0x08066bc0
 800abf4:	08066bd0 	.word	0x08066bd0
 800abf8:	3ff00000 	.word	0x3ff00000
 800abfc:	08066bb0 	.word	0x08066bb0
 800ac00:	3e2fffff 	.word	0x3e2fffff
 800ac04:	00000000 	.word	0x00000000

0800ac08 <__ieee754_log>:
 800ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	ec51 0b10 	vmov	r0, r1, d0
 800ac10:	ed2d 8b04 	vpush	{d8-d9}
 800ac14:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ac18:	b083      	sub	sp, #12
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	da29      	bge.n	800ac72 <__ieee754_log+0x6a>
 800ac1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac22:	4303      	orrs	r3, r0
 800ac24:	ee10 2a10 	vmov	r2, s0
 800ac28:	d10c      	bne.n	800ac44 <__ieee754_log+0x3c>
 800ac2a:	49cf      	ldr	r1, [pc, #828]	; (800af68 <__ieee754_log+0x360>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2300      	movs	r3, #0
 800ac30:	2000      	movs	r0, #0
 800ac32:	f7f5 fe13 	bl	800085c <__aeabi_ddiv>
 800ac36:	ec41 0b10 	vmov	d0, r0, r1
 800ac3a:	b003      	add	sp, #12
 800ac3c:	ecbd 8b04 	vpop	{d8-d9}
 800ac40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac44:	2900      	cmp	r1, #0
 800ac46:	da05      	bge.n	800ac54 <__ieee754_log+0x4c>
 800ac48:	460b      	mov	r3, r1
 800ac4a:	f7f5 fb25 	bl	8000298 <__aeabi_dsub>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2300      	movs	r3, #0
 800ac52:	e7ee      	b.n	800ac32 <__ieee754_log+0x2a>
 800ac54:	4bc5      	ldr	r3, [pc, #788]	; (800af6c <__ieee754_log+0x364>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	f7f5 fcd6 	bl	8000608 <__aeabi_dmul>
 800ac5c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ac60:	460d      	mov	r5, r1
 800ac62:	4ac3      	ldr	r2, [pc, #780]	; (800af70 <__ieee754_log+0x368>)
 800ac64:	4295      	cmp	r5, r2
 800ac66:	dd06      	ble.n	800ac76 <__ieee754_log+0x6e>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	f7f5 fb16 	bl	800029c <__adddf3>
 800ac70:	e7e1      	b.n	800ac36 <__ieee754_log+0x2e>
 800ac72:	2300      	movs	r3, #0
 800ac74:	e7f5      	b.n	800ac62 <__ieee754_log+0x5a>
 800ac76:	152c      	asrs	r4, r5, #20
 800ac78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac7c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ac80:	441c      	add	r4, r3
 800ac82:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ac86:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ac8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac8e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ac92:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ac96:	ea42 0105 	orr.w	r1, r2, r5
 800ac9a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ac9e:	2200      	movs	r2, #0
 800aca0:	4bb4      	ldr	r3, [pc, #720]	; (800af74 <__ieee754_log+0x36c>)
 800aca2:	f7f5 faf9 	bl	8000298 <__aeabi_dsub>
 800aca6:	1cab      	adds	r3, r5, #2
 800aca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acac:	2b02      	cmp	r3, #2
 800acae:	4682      	mov	sl, r0
 800acb0:	468b      	mov	fp, r1
 800acb2:	f04f 0200 	mov.w	r2, #0
 800acb6:	dc53      	bgt.n	800ad60 <__ieee754_log+0x158>
 800acb8:	2300      	movs	r3, #0
 800acba:	f7f5 ff0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800acbe:	b1d0      	cbz	r0, 800acf6 <__ieee754_log+0xee>
 800acc0:	2c00      	cmp	r4, #0
 800acc2:	f000 8122 	beq.w	800af0a <__ieee754_log+0x302>
 800acc6:	4620      	mov	r0, r4
 800acc8:	f7f5 fc34 	bl	8000534 <__aeabi_i2d>
 800accc:	a390      	add	r3, pc, #576	; (adr r3, 800af10 <__ieee754_log+0x308>)
 800acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd2:	4606      	mov	r6, r0
 800acd4:	460f      	mov	r7, r1
 800acd6:	f7f5 fc97 	bl	8000608 <__aeabi_dmul>
 800acda:	a38f      	add	r3, pc, #572	; (adr r3, 800af18 <__ieee754_log+0x310>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	4604      	mov	r4, r0
 800ace2:	460d      	mov	r5, r1
 800ace4:	4630      	mov	r0, r6
 800ace6:	4639      	mov	r1, r7
 800ace8:	f7f5 fc8e 	bl	8000608 <__aeabi_dmul>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4620      	mov	r0, r4
 800acf2:	4629      	mov	r1, r5
 800acf4:	e7ba      	b.n	800ac6c <__ieee754_log+0x64>
 800acf6:	a38a      	add	r3, pc, #552	; (adr r3, 800af20 <__ieee754_log+0x318>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	4650      	mov	r0, sl
 800acfe:	4659      	mov	r1, fp
 800ad00:	f7f5 fc82 	bl	8000608 <__aeabi_dmul>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	2000      	movs	r0, #0
 800ad0a:	499b      	ldr	r1, [pc, #620]	; (800af78 <__ieee754_log+0x370>)
 800ad0c:	f7f5 fac4 	bl	8000298 <__aeabi_dsub>
 800ad10:	4652      	mov	r2, sl
 800ad12:	4606      	mov	r6, r0
 800ad14:	460f      	mov	r7, r1
 800ad16:	465b      	mov	r3, fp
 800ad18:	4650      	mov	r0, sl
 800ad1a:	4659      	mov	r1, fp
 800ad1c:	f7f5 fc74 	bl	8000608 <__aeabi_dmul>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4630      	mov	r0, r6
 800ad26:	4639      	mov	r1, r7
 800ad28:	f7f5 fc6e 	bl	8000608 <__aeabi_dmul>
 800ad2c:	4606      	mov	r6, r0
 800ad2e:	460f      	mov	r7, r1
 800ad30:	b914      	cbnz	r4, 800ad38 <__ieee754_log+0x130>
 800ad32:	4632      	mov	r2, r6
 800ad34:	463b      	mov	r3, r7
 800ad36:	e0a2      	b.n	800ae7e <__ieee754_log+0x276>
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f7f5 fbfb 	bl	8000534 <__aeabi_i2d>
 800ad3e:	a374      	add	r3, pc, #464	; (adr r3, 800af10 <__ieee754_log+0x308>)
 800ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad44:	4680      	mov	r8, r0
 800ad46:	4689      	mov	r9, r1
 800ad48:	f7f5 fc5e 	bl	8000608 <__aeabi_dmul>
 800ad4c:	a372      	add	r3, pc, #456	; (adr r3, 800af18 <__ieee754_log+0x310>)
 800ad4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad52:	4604      	mov	r4, r0
 800ad54:	460d      	mov	r5, r1
 800ad56:	4640      	mov	r0, r8
 800ad58:	4649      	mov	r1, r9
 800ad5a:	f7f5 fc55 	bl	8000608 <__aeabi_dmul>
 800ad5e:	e0a7      	b.n	800aeb0 <__ieee754_log+0x2a8>
 800ad60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad64:	f7f5 fa9a 	bl	800029c <__adddf3>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4650      	mov	r0, sl
 800ad6e:	4659      	mov	r1, fp
 800ad70:	f7f5 fd74 	bl	800085c <__aeabi_ddiv>
 800ad74:	ec41 0b18 	vmov	d8, r0, r1
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f7f5 fbdb 	bl	8000534 <__aeabi_i2d>
 800ad7e:	ec53 2b18 	vmov	r2, r3, d8
 800ad82:	ec41 0b19 	vmov	d9, r0, r1
 800ad86:	ec51 0b18 	vmov	r0, r1, d8
 800ad8a:	f7f5 fc3d 	bl	8000608 <__aeabi_dmul>
 800ad8e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ad92:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	4689      	mov	r9, r1
 800ada0:	f7f5 fc32 	bl	8000608 <__aeabi_dmul>
 800ada4:	a360      	add	r3, pc, #384	; (adr r3, 800af28 <__ieee754_log+0x320>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	4606      	mov	r6, r0
 800adac:	460f      	mov	r7, r1
 800adae:	f7f5 fc2b 	bl	8000608 <__aeabi_dmul>
 800adb2:	a35f      	add	r3, pc, #380	; (adr r3, 800af30 <__ieee754_log+0x328>)
 800adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb8:	f7f5 fa70 	bl	800029c <__adddf3>
 800adbc:	4632      	mov	r2, r6
 800adbe:	463b      	mov	r3, r7
 800adc0:	f7f5 fc22 	bl	8000608 <__aeabi_dmul>
 800adc4:	a35c      	add	r3, pc, #368	; (adr r3, 800af38 <__ieee754_log+0x330>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f7f5 fa67 	bl	800029c <__adddf3>
 800adce:	4632      	mov	r2, r6
 800add0:	463b      	mov	r3, r7
 800add2:	f7f5 fc19 	bl	8000608 <__aeabi_dmul>
 800add6:	a35a      	add	r3, pc, #360	; (adr r3, 800af40 <__ieee754_log+0x338>)
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	f7f5 fa5e 	bl	800029c <__adddf3>
 800ade0:	4642      	mov	r2, r8
 800ade2:	464b      	mov	r3, r9
 800ade4:	f7f5 fc10 	bl	8000608 <__aeabi_dmul>
 800ade8:	a357      	add	r3, pc, #348	; (adr r3, 800af48 <__ieee754_log+0x340>)
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	4680      	mov	r8, r0
 800adf0:	4689      	mov	r9, r1
 800adf2:	4630      	mov	r0, r6
 800adf4:	4639      	mov	r1, r7
 800adf6:	f7f5 fc07 	bl	8000608 <__aeabi_dmul>
 800adfa:	a355      	add	r3, pc, #340	; (adr r3, 800af50 <__ieee754_log+0x348>)
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	f7f5 fa4c 	bl	800029c <__adddf3>
 800ae04:	4632      	mov	r2, r6
 800ae06:	463b      	mov	r3, r7
 800ae08:	f7f5 fbfe 	bl	8000608 <__aeabi_dmul>
 800ae0c:	a352      	add	r3, pc, #328	; (adr r3, 800af58 <__ieee754_log+0x350>)
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	f7f5 fa43 	bl	800029c <__adddf3>
 800ae16:	4632      	mov	r2, r6
 800ae18:	463b      	mov	r3, r7
 800ae1a:	f7f5 fbf5 	bl	8000608 <__aeabi_dmul>
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4602      	mov	r2, r0
 800ae22:	4649      	mov	r1, r9
 800ae24:	4640      	mov	r0, r8
 800ae26:	f7f5 fa39 	bl	800029c <__adddf3>
 800ae2a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	3551      	adds	r5, #81	; 0x51
 800ae32:	431d      	orrs	r5, r3
 800ae34:	2d00      	cmp	r5, #0
 800ae36:	4680      	mov	r8, r0
 800ae38:	4689      	mov	r9, r1
 800ae3a:	dd48      	ble.n	800aece <__ieee754_log+0x2c6>
 800ae3c:	4b4e      	ldr	r3, [pc, #312]	; (800af78 <__ieee754_log+0x370>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	4650      	mov	r0, sl
 800ae42:	4659      	mov	r1, fp
 800ae44:	f7f5 fbe0 	bl	8000608 <__aeabi_dmul>
 800ae48:	4652      	mov	r2, sl
 800ae4a:	465b      	mov	r3, fp
 800ae4c:	f7f5 fbdc 	bl	8000608 <__aeabi_dmul>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4606      	mov	r6, r0
 800ae56:	460f      	mov	r7, r1
 800ae58:	4640      	mov	r0, r8
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	f7f5 fa1e 	bl	800029c <__adddf3>
 800ae60:	ec53 2b18 	vmov	r2, r3, d8
 800ae64:	f7f5 fbd0 	bl	8000608 <__aeabi_dmul>
 800ae68:	4680      	mov	r8, r0
 800ae6a:	4689      	mov	r9, r1
 800ae6c:	b964      	cbnz	r4, 800ae88 <__ieee754_log+0x280>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	4630      	mov	r0, r6
 800ae74:	4639      	mov	r1, r7
 800ae76:	f7f5 fa0f 	bl	8000298 <__aeabi_dsub>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4650      	mov	r0, sl
 800ae80:	4659      	mov	r1, fp
 800ae82:	f7f5 fa09 	bl	8000298 <__aeabi_dsub>
 800ae86:	e6d6      	b.n	800ac36 <__ieee754_log+0x2e>
 800ae88:	a321      	add	r3, pc, #132	; (adr r3, 800af10 <__ieee754_log+0x308>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	ec51 0b19 	vmov	r0, r1, d9
 800ae92:	f7f5 fbb9 	bl	8000608 <__aeabi_dmul>
 800ae96:	a320      	add	r3, pc, #128	; (adr r3, 800af18 <__ieee754_log+0x310>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	460d      	mov	r5, r1
 800aea0:	ec51 0b19 	vmov	r0, r1, d9
 800aea4:	f7f5 fbb0 	bl	8000608 <__aeabi_dmul>
 800aea8:	4642      	mov	r2, r8
 800aeaa:	464b      	mov	r3, r9
 800aeac:	f7f5 f9f6 	bl	800029c <__adddf3>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	f7f5 f9ee 	bl	8000298 <__aeabi_dsub>
 800aebc:	4652      	mov	r2, sl
 800aebe:	465b      	mov	r3, fp
 800aec0:	f7f5 f9ea 	bl	8000298 <__aeabi_dsub>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4620      	mov	r0, r4
 800aeca:	4629      	mov	r1, r5
 800aecc:	e7d9      	b.n	800ae82 <__ieee754_log+0x27a>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	4650      	mov	r0, sl
 800aed4:	4659      	mov	r1, fp
 800aed6:	f7f5 f9df 	bl	8000298 <__aeabi_dsub>
 800aeda:	ec53 2b18 	vmov	r2, r3, d8
 800aede:	f7f5 fb93 	bl	8000608 <__aeabi_dmul>
 800aee2:	4606      	mov	r6, r0
 800aee4:	460f      	mov	r7, r1
 800aee6:	2c00      	cmp	r4, #0
 800aee8:	f43f af23 	beq.w	800ad32 <__ieee754_log+0x12a>
 800aeec:	a308      	add	r3, pc, #32	; (adr r3, 800af10 <__ieee754_log+0x308>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	ec51 0b19 	vmov	r0, r1, d9
 800aef6:	f7f5 fb87 	bl	8000608 <__aeabi_dmul>
 800aefa:	a307      	add	r3, pc, #28	; (adr r3, 800af18 <__ieee754_log+0x310>)
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	4604      	mov	r4, r0
 800af02:	460d      	mov	r5, r1
 800af04:	ec51 0b19 	vmov	r0, r1, d9
 800af08:	e727      	b.n	800ad5a <__ieee754_log+0x152>
 800af0a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800af60 <__ieee754_log+0x358>
 800af0e:	e694      	b.n	800ac3a <__ieee754_log+0x32>
 800af10:	fee00000 	.word	0xfee00000
 800af14:	3fe62e42 	.word	0x3fe62e42
 800af18:	35793c76 	.word	0x35793c76
 800af1c:	3dea39ef 	.word	0x3dea39ef
 800af20:	55555555 	.word	0x55555555
 800af24:	3fd55555 	.word	0x3fd55555
 800af28:	df3e5244 	.word	0xdf3e5244
 800af2c:	3fc2f112 	.word	0x3fc2f112
 800af30:	96cb03de 	.word	0x96cb03de
 800af34:	3fc74664 	.word	0x3fc74664
 800af38:	94229359 	.word	0x94229359
 800af3c:	3fd24924 	.word	0x3fd24924
 800af40:	55555593 	.word	0x55555593
 800af44:	3fe55555 	.word	0x3fe55555
 800af48:	d078c69f 	.word	0xd078c69f
 800af4c:	3fc39a09 	.word	0x3fc39a09
 800af50:	1d8e78af 	.word	0x1d8e78af
 800af54:	3fcc71c5 	.word	0x3fcc71c5
 800af58:	9997fa04 	.word	0x9997fa04
 800af5c:	3fd99999 	.word	0x3fd99999
	...
 800af68:	c3500000 	.word	0xc3500000
 800af6c:	43500000 	.word	0x43500000
 800af70:	7fefffff 	.word	0x7fefffff
 800af74:	3ff00000 	.word	0x3ff00000
 800af78:	3fe00000 	.word	0x3fe00000

0800af7c <finite>:
 800af7c:	b082      	sub	sp, #8
 800af7e:	ed8d 0b00 	vstr	d0, [sp]
 800af82:	9801      	ldr	r0, [sp, #4]
 800af84:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800af88:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800af8c:	0fc0      	lsrs	r0, r0, #31
 800af8e:	b002      	add	sp, #8
 800af90:	4770      	bx	lr
 800af92:	0000      	movs	r0, r0
 800af94:	0000      	movs	r0, r0
	...

0800af98 <nan>:
 800af98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800afa0 <nan+0x8>
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	00000000 	.word	0x00000000
 800afa4:	7ff80000 	.word	0x7ff80000

0800afa8 <_close>:
 800afa8:	4b02      	ldr	r3, [pc, #8]	; (800afb4 <_close+0xc>)
 800afaa:	2258      	movs	r2, #88	; 0x58
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	f04f 30ff 	mov.w	r0, #4294967295
 800afb2:	4770      	bx	lr
 800afb4:	20002bf0 	.word	0x20002bf0

0800afb8 <_fstat>:
 800afb8:	4b02      	ldr	r3, [pc, #8]	; (800afc4 <_fstat+0xc>)
 800afba:	2258      	movs	r2, #88	; 0x58
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	f04f 30ff 	mov.w	r0, #4294967295
 800afc2:	4770      	bx	lr
 800afc4:	20002bf0 	.word	0x20002bf0

0800afc8 <_getpid>:
 800afc8:	4b02      	ldr	r3, [pc, #8]	; (800afd4 <_getpid+0xc>)
 800afca:	2258      	movs	r2, #88	; 0x58
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	f04f 30ff 	mov.w	r0, #4294967295
 800afd2:	4770      	bx	lr
 800afd4:	20002bf0 	.word	0x20002bf0

0800afd8 <_isatty>:
 800afd8:	4b02      	ldr	r3, [pc, #8]	; (800afe4 <_isatty+0xc>)
 800afda:	2258      	movs	r2, #88	; 0x58
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	2000      	movs	r0, #0
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	20002bf0 	.word	0x20002bf0

0800afe8 <_kill>:
 800afe8:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <_kill+0xc>)
 800afea:	2258      	movs	r2, #88	; 0x58
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	f04f 30ff 	mov.w	r0, #4294967295
 800aff2:	4770      	bx	lr
 800aff4:	20002bf0 	.word	0x20002bf0

0800aff8 <_lseek>:
 800aff8:	4b02      	ldr	r3, [pc, #8]	; (800b004 <_lseek+0xc>)
 800affa:	2258      	movs	r2, #88	; 0x58
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	f04f 30ff 	mov.w	r0, #4294967295
 800b002:	4770      	bx	lr
 800b004:	20002bf0 	.word	0x20002bf0

0800b008 <_read>:
 800b008:	4b02      	ldr	r3, [pc, #8]	; (800b014 <_read+0xc>)
 800b00a:	2258      	movs	r2, #88	; 0x58
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	f04f 30ff 	mov.w	r0, #4294967295
 800b012:	4770      	bx	lr
 800b014:	20002bf0 	.word	0x20002bf0

0800b018 <_write>:
 800b018:	4b02      	ldr	r3, [pc, #8]	; (800b024 <_write+0xc>)
 800b01a:	2258      	movs	r2, #88	; 0x58
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	f04f 30ff 	mov.w	r0, #4294967295
 800b022:	4770      	bx	lr
 800b024:	20002bf0 	.word	0x20002bf0

0800b028 <_exit>:
 800b028:	e7fe      	b.n	800b028 <_exit>
	...

0800b02c <_init>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	bf00      	nop
 800b030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b032:	bc08      	pop	{r3}
 800b034:	469e      	mov	lr, r3
 800b036:	4770      	bx	lr

0800b038 <_fini>:
 800b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03a:	bf00      	nop
 800b03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03e:	bc08      	pop	{r3}
 800b040:	469e      	mov	lr, r3
 800b042:	4770      	bx	lr
