
TinyOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a038  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005b928  0800a1e0  0800a1e0  0001a1e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08065b08  08065b08  000810a4  2**0
                  CONTENTS
  4 .ARM          00000008  08065b08  08065b08  00075b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08065b10  08065b10  000810a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08065b10  08065b10  00075b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08065b14  08065b14  00075b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010a4  20000000  08065b18  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001664  200010a4  08066bbc  000810a4  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  20002708  08066bbc  00082708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000810a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012283  00000000  00000000  000810d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b57  00000000  00000000  00093357  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00095eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  00096cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019a14  00000000  00000000  00097958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dae3  00000000  00000000  000b136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097bd7  00000000  00000000  000bee4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156a26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ec  00000000  00000000  00156aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  0015b390  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0015b42c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200010a4 	.word	0x200010a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1c0 	.word	0x0800a1c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200010a8 	.word	0x200010a8
 80001dc:	0800a1c0 	.word	0x0800a1c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <OL_allocateMemory>:
//      FUNCTIONS RELATED TO MEMORY ALLOCATION
// #############################################


/*  Allocates all the matrices and arrays needed for the bare minimum functions.  */
void OL_allocateMemory(OL_LAYER_STRUCT * layer){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

	layer->weights = calloc(layer->WIDTH*layer->HEIGHT, sizeof(float));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6912      	ldr	r2, [r2, #16]
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f006 f8c2 	bl	80070f8 <calloc>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
	if(layer->weights==NULL){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d103      	bne.n	8000f8c <OL_allocateMemory+0x34>
		  layer->OL_ERROR = CALLOC_WEIGHTS;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->biases = calloc(layer->WIDTH, sizeof(float));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	2104      	movs	r1, #4
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 f8b0 	bl	80070f8 <calloc>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	61da      	str	r2, [r3, #28]
	if(layer->biases==NULL){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d103      	bne.n	8000fb0 <OL_allocateMemory+0x58>
	  layer->OL_ERROR = CALLOC_BIASES;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->label = calloc(layer->WIDTH, sizeof(char));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f006 f89e 	bl	80070f8 <calloc>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	615a      	str	r2, [r3, #20]
	if(layer->label==NULL){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <OL_allocateMemory+0x7c>
	  layer->OL_ERROR = CALLOC_LABEL;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->y_pred = calloc(layer->WIDTH, sizeof(float));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f006 f88c 	bl	80070f8 <calloc>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	621a      	str	r2, [r3, #32]
	if(layer->y_pred==NULL){
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <OL_allocateMemory+0xa0>
	  layer->OL_ERROR = CALLOC_Y_PRED;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->y_true = calloc(layer->WIDTH, sizeof(float));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f006 f87a 	bl	80070f8 <calloc>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
	if(layer->y_true== NULL){
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <OL_allocateMemory+0xc4>
	  layer->OL_ERROR = CALLOC_Y_TRUE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2207      	movs	r2, #7
 8001018:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}


	if( layer->ALGORITHM!=MODE_OL && layer->ALGORITHM!=MODE_OL_V2 ){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001020:	2b00      	cmp	r3, #0
 8001022:	d05b      	beq.n	80010dc <OL_allocateMemory+0x184>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001028:	2b01      	cmp	r3, #1
 800102a:	d057      	beq.n	80010dc <OL_allocateMemory+0x184>

		layer->weights_2 = calloc(layer->WIDTH*layer->HEIGHT, sizeof(float));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6912      	ldr	r2, [r2, #16]
 8001034:	fb02 f303 	mul.w	r3, r2, r3
 8001038:	2104      	movs	r1, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f006 f85c 	bl	80070f8 <calloc>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
		if(layer->weights_2==NULL){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	2b00      	cmp	r3, #0
 800104e:	d103      	bne.n	8001058 <OL_allocateMemory+0x100>
			layer->OL_ERROR = CALLOC_WEIGHTS_2;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}

		layer->biases_2 = calloc(layer->WIDTH, sizeof(float));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2104      	movs	r1, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f006 f84a 	bl	80070f8 <calloc>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
		if(layer->biases_2==NULL){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	d103      	bne.n	800107c <OL_allocateMemory+0x124>
			layer->OL_ERROR = CALLOC_BIASES_2;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2205      	movs	r2, #5
 8001078:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}

		if(layer->ALGORITHM == MODE_CWR){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001080:	2b02      	cmp	r3, #2
 8001082:	d111      	bne.n	80010a8 <OL_allocateMemory+0x150>
			layer->found_lett = calloc(layer->WIDTH, sizeof(uint8_t));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2101      	movs	r1, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f006 f834 	bl	80070f8 <calloc>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
			if(layer->found_lett==NULL){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <OL_allocateMemory+0x150>
				layer->OL_ERROR = CALLOC_FOUND_LETT;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2206      	movs	r2, #6
 80010a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			}
		}

		if(layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_LWF_batch){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d003      	beq.n	80010b8 <OL_allocateMemory+0x160>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b4:	2b06      	cmp	r3, #6
 80010b6:	d111      	bne.n	80010dc <OL_allocateMemory+0x184>
			layer->y_pred_2 = calloc(layer->WIDTH, sizeof(float));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2104      	movs	r1, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 f81a 	bl	80070f8 <calloc>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
			if(layer->y_pred_2==NULL){
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <OL_allocateMemory+0x184>
				layer->OL_ERROR = CALLOC_Y_PRED_2;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2208      	movs	r2, #8
 80010d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			}
		}
	}
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <OL_increaseWeightDim>:


/* Use realloc to increase the amount of memory dedicated to the weights  */
void OL_increaseWeightDim(OL_LAYER_STRUCT * layer){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

	int h = layer->HEIGHT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	60fb      	str	r3, [r7, #12]
	int w = layer->WIDTH;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	60bb      	str	r3, [r7, #8]

	layer->weights = realloc(layer->weights, h*w*sizeof(float));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6998      	ldr	r0, [r3, #24]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4619      	mov	r1, r3
 8001108:	f006 fdda 	bl	8007cc0 <realloc>
 800110c:	4602      	mov	r2, r0
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	619a      	str	r2, [r3, #24]
	if(layer->weights== NULL){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <OL_increaseWeightDim+0x3e>
		layer->OL_ERROR = REALLOC_WEIGHTS;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	220a      	movs	r2, #10
 800111e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	// set to 0 only the new weights
	for(int i=h*(w-1); i<h*w; i++){
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e00a      	b.n	8001146 <OL_increaseWeightDim+0x62>
		layer->weights[i] = 0;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	699a      	ldr	r2, [r3, #24]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
	for(int i=h*(w-1); i<h*w; i++){
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	fb02 f303 	mul.w	r3, r2, r3
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbed      	blt.n	8001130 <OL_increaseWeightDim+0x4c>
	}

	if(layer->ALGORITHM == MODE_CWR || layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_OL_batch ||
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001158:	2b02      	cmp	r3, #2
 800115a:	d00f      	beq.n	800117c <OL_increaseWeightDim+0x98>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	2b03      	cmp	r3, #3
 8001162:	d00b      	beq.n	800117c <OL_increaseWeightDim+0x98>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001168:	2b04      	cmp	r3, #4
 800116a:	d007      	beq.n	800117c <OL_increaseWeightDim+0x98>
	   layer->ALGORITHM == MODE_OL_V2_batch || layer->ALGORITHM == MODE_LWF_batch){
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	if(layer->ALGORITHM == MODE_CWR || layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_OL_batch ||
 8001170:	2b05      	cmp	r3, #5
 8001172:	d003      	beq.n	800117c <OL_increaseWeightDim+0x98>
	   layer->ALGORITHM == MODE_OL_V2_batch || layer->ALGORITHM == MODE_LWF_batch){
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001178:	2b06      	cmp	r3, #6
 800117a:	d12d      	bne.n	80011d8 <OL_increaseWeightDim+0xf4>

		layer->weights_2 = realloc(layer->weights_2, h*w*sizeof(float));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	f006 fd98 	bl	8007cc0 <realloc>
 8001190:	4602      	mov	r2, r0
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
		if(layer->weights_2== NULL){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119a:	2b00      	cmp	r3, #0
 800119c:	d103      	bne.n	80011a6 <OL_increaseWeightDim+0xc2>
			layer->OL_ERROR = REALLOC_WEIGHTS_2;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	220b      	movs	r2, #11
 80011a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}

		// set to 0 new weights
		for(int i=h*(w-1); i<h*w; i++){
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	e00a      	b.n	80011ca <OL_increaseWeightDim+0xe6>
			layer->weights_2[i] = 0;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
		for(int i=h*(w-1); i<h*w; i++){
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	3301      	adds	r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbed      	blt.n	80011b4 <OL_increaseWeightDim+0xd0>
	}

#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <OL_increaseBiasDim>:


/* Use realloc to increase the amount of memory dedicated to the biases  */
void OL_increaseBiasDim(OL_LAYER_STRUCT * layer){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	int w = layer->WIDTH;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60fb      	str	r3, [r7, #12]

	layer->biases = realloc(layer->biases, w*sizeof(float));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69da      	ldr	r2, [r3, #28]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4619      	mov	r1, r3
 80011f8:	4610      	mov	r0, r2
 80011fa:	f006 fd61 	bl	8007cc0 <realloc>
 80011fe:	4602      	mov	r2, r0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61da      	str	r2, [r3, #28]
	if(layer->biases==NULL){
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d103      	bne.n	8001214 <OL_increaseBiasDim+0x34>
		layer->OL_ERROR = REALLOC_BIASES;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	220c      	movs	r2, #12
 8001210:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	layer->biases[w-1] = 0;				// set to 0 new biases
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69da      	ldr	r2, [r3, #28]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800121e:	3b01      	subs	r3, #1
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	601a      	str	r2, [r3, #0]

	if(layer->ALGORITHM==MODE_CWR || layer->ALGORITHM==MODE_LWF || layer->ALGORITHM==MODE_OL_batch  ||
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122e:	2b02      	cmp	r3, #2
 8001230:	d00f      	beq.n	8001252 <OL_increaseBiasDim+0x72>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	2b03      	cmp	r3, #3
 8001238:	d00b      	beq.n	8001252 <OL_increaseBiasDim+0x72>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123e:	2b04      	cmp	r3, #4
 8001240:	d007      	beq.n	8001252 <OL_increaseBiasDim+0x72>
	   layer->ALGORITHM==MODE_OL_V2_batch || layer->ALGORITHM==MODE_LWF_batch){
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	if(layer->ALGORITHM==MODE_CWR || layer->ALGORITHM==MODE_LWF || layer->ALGORITHM==MODE_OL_batch  ||
 8001246:	2b05      	cmp	r3, #5
 8001248:	d003      	beq.n	8001252 <OL_increaseBiasDim+0x72>
	   layer->ALGORITHM==MODE_OL_V2_batch || layer->ALGORITHM==MODE_LWF_batch){
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124e:	2b06      	cmp	r3, #6
 8001250:	d11d      	bne.n	800128e <OL_increaseBiasDim+0xae>

		layer->biases_2 = realloc(layer->biases_2, w*sizeof(float));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f006 fd2f 	bl	8007cc0 <realloc>
 8001262:	4602      	mov	r2, r0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
		if(layer->biases_2==NULL){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	2b00      	cmp	r3, #0
 800126e:	d103      	bne.n	8001278 <OL_increaseBiasDim+0x98>
			layer->OL_ERROR = REALLOC_BIASES_2;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	220d      	movs	r2, #13
 8001274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}
		layer->biases_2[w-1] = 0;		// set to 0 new biases
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001282:	3b01      	subs	r3, #1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
	}

#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <OL_increaseYtrueDim>:


/* Use realloc to increase the amount of memory dedicated to y_true  */
void OL_increaseYtrueDim(OL_LAYER_STRUCT * layer){
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]

	layer->y_true = realloc(layer->y_true, layer->WIDTH*sizeof(float));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4619      	mov	r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	f006 fd08 	bl	8007cc0 <realloc>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
	if(layer->y_true==NULL){
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <OL_increaseYtrueDim+0x30>
		layer->OL_ERROR = REALLOC_Y_TRUE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2211      	movs	r2, #17
 80012c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <OL_increaseLabel>:

/* Use realloc to increase the amount of memory dedicated to the labels  */
void OL_increaseLabel(OL_LAYER_STRUCT * layer, char new_letter){
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	70fb      	strb	r3, [r7, #3]

	int w = layer->WIDTH;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	60fb      	str	r3, [r7, #12]

	layer->label = realloc(layer->label, w*sizeof(char));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f006 fce9 	bl	8007cc0 <realloc>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	615a      	str	r2, [r3, #20]
	if(layer->label==NULL){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <OL_increaseLabel+0x36>
		layer->OL_ERROR = REALLOC_LABEL;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	220e      	movs	r2, #14
 8001300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	layer->label[w-1] = new_letter;		// save in labels the new letter
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695a      	ldr	r2, [r3, #20]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3b01      	subs	r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	78fa      	ldrb	r2, [r7, #3]
 8001310:	701a      	strb	r2, [r3, #0]
	OL_updateRAMcounter(layer);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f83c 	bl	8001390 <OL_updateRAMcounter>

};
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <OL_increaseYpredDim>:


/* Use realloc to increase the amount of memory dedicated to the y prediction arrays  */
void OL_increaseYpredDim(OL_LAYER_STRUCT * layer){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	layer->y_pred = realloc(layer->y_pred, layer->WIDTH*sizeof(float));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1a      	ldr	r2, [r3, #32]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4619      	mov	r1, r3
 8001334:	4610      	mov	r0, r2
 8001336:	f006 fcc3 	bl	8007cc0 <realloc>
 800133a:	4602      	mov	r2, r0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	621a      	str	r2, [r3, #32]
	if(layer->y_pred==NULL){
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <OL_increaseYpredDim+0x30>
		layer->OL_ERROR = REALLOC_Y_PRED;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	220f      	movs	r2, #15
 800134c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	if(layer->ALGORITHM == MODE_LWF || layer->ALGORITHM == MODE_LWF_batch){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001354:	2b03      	cmp	r3, #3
 8001356:	d003      	beq.n	8001360 <OL_increaseYpredDim+0x40>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135c:	2b06      	cmp	r3, #6
 800135e:	d113      	bne.n	8001388 <OL_increaseYpredDim+0x68>
		layer->y_pred_2 = realloc(layer->y_pred_2, layer->WIDTH*sizeof(float));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f006 fca7 	bl	8007cc0 <realloc>
 8001372:	4602      	mov	r2, r0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	635a      	str	r2, [r3, #52]	; 0x34
		if(layer->y_pred_2==NULL){
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <OL_increaseYpredDim+0x68>
			layer->OL_ERROR = REALLOC_Y_PRED_2;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2210      	movs	r2, #16
 8001384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <OL_updateRAMcounter>:
// #############################################
// #############################################



void OL_updateRAMcounter(OL_LAYER_STRUCT * layer){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

	if( (layer->counter>100) && (layer->counter%5==0) ){
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	dd18      	ble.n	80013d2 <OL_updateRAMcounter+0x42>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6899      	ldr	r1, [r3, #8]
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <OL_updateRAMcounter+0x4c>)
 80013a6:	fb83 2301 	smull	r2, r3, r3, r1
 80013aa:	105a      	asrs	r2, r3, #1
 80013ac:	17cb      	asrs	r3, r1, #31
 80013ae:	1ad2      	subs	r2, r2, r3
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	1aca      	subs	r2, r1, r3
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d10a      	bne.n	80013d2 <OL_updateRAMcounter+0x42>
		int tmp = FreeMem();
 80013bc:	f001 f912 	bl	80025e4 <FreeMem>
 80013c0:	60f8      	str	r0, [r7, #12]
		if(tmp < layer->freeRAMbytes){
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	da02      	bge.n	80013d2 <OL_updateRAMcounter+0x42>
			layer->freeRAMbytes = tmp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	66666667 	.word	0x66666667

080013e0 <OL_resetInfo>:


/* Resets the values that are stored in the struct as 'info parameters'  */
void OL_resetInfo(OL_LAYER_STRUCT * layer){
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

	layer->prediction_correct = 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	layer->new_class = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	layer->vowel_guess = 'Q';		// Q is a letter that is not in the dataset, is considered the NULL option
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2251      	movs	r2, #81	; 0x51
 80013fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <OL_lettToSoft>:


/* Transforms a letter in an array of 0 and 1. This is used for computing the error committed
 * from the moel since the last layer is a softmax.  */
void OL_lettToSoft(OL_LAYER_STRUCT * layer, char *lett){
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]

	// Check in the label array letter by letter, if the letter is the same put a 1 in the correct position
	for(int i=0; i<layer->WIDTH; i++){
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e01c      	b.n	8001456 <OL_lettToSoft+0x4a>
		if(lett[0] == layer->label[i]){
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6959      	ldr	r1, [r3, #20]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	440b      	add	r3, r1
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d108      	bne.n	8001440 <OL_lettToSoft+0x34>
			layer->y_true[i] = 1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e007      	b.n	8001450 <OL_lettToSoft+0x44>
		}else{
			layer->y_true[i] = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3301      	adds	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	dbdd      	blt.n	800141c <OL_lettToSoft+0x10>
		}
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <OL_feedForward>:


/* Performs the feed forward operation. It's just a product of matrices  and a sum with an array  */
void OL_feedForward(OL_LAYER_STRUCT * layer, float * weights, float * input, float * bias, float * y_pred){
 800146c:	b480      	push	{r7}
 800146e:	b08b      	sub	sp, #44	; 0x2c
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]

	int h = layer->HEIGHT;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	61bb      	str	r3, [r7, #24]
	int w = layer->WIDTH;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	617b      	str	r3, [r7, #20]

	// Reset the prediction
	for(int i=0; i<layer->WIDTH; i++){
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	e009      	b.n	80014a0 <OL_feedForward+0x34>
		y_pred[i]=0;
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001492:	4413      	add	r3, r2
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	3301      	adds	r3, #1
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbf0      	blt.n	800148c <OL_feedForward+0x20>
	}

	// Perform the feed forward
	for(int i=0; i<w; i++){
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
 80014ae:	e041      	b.n	8001534 <OL_feedForward+0xc8>
		for(int j=0; j< h; j++){
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e023      	b.n	80014fe <OL_feedForward+0x92>
			y_pred[i] += weights[h*i+j]*input[j];
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014bc:	4413      	add	r3, r2
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	fb02 f203 	mul.w	r2, r2, r3
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	edd3 6a00 	vldr	s13, [r3]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ee:	4413      	add	r3, r2
 80014f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f4:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j< h; j++){
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	3301      	adds	r3, #1
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbd7      	blt.n	80014b6 <OL_feedForward+0x4a>
		}
		y_pred[i] += bias[i];
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800150c:	4413      	add	r3, r2
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	4413      	add	r3, r2
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001524:	4413      	add	r3, r2
 8001526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<w; i++){
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	3301      	adds	r3, #1
 8001532:	623b      	str	r3, [r7, #32]
 8001534:	6a3a      	ldr	r2, [r7, #32]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	dbb9      	blt.n	80014b0 <OL_feedForward+0x44>
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 800153c:	bf00      	nop
 800153e:	372c      	adds	r7, #44	; 0x2c
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <OL_softmax>:


/*Takes a array in input and computes the softmax operation on that array  */
void OL_softmax(OL_LAYER_STRUCT * layer, float * y_pred){
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	b08b      	sub	sp, #44	; 0x2c
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]

	// Softmax function taken from web

	int size = layer->WIDTH;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	613b      	str	r3, [r7, #16]
    float m, sum, constant;

    m = y_pred[0];
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i =0; i<size; i++){
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e015      	b.n	8001590 <OL_softmax+0x48>
    	if(m<y_pred[i]){
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	4413      	add	r3, r2
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	d505      	bpl.n	800158a <OL_softmax+0x42>
    		m = y_pred[i];
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	4413      	add	r3, r2
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i =0; i<size; i++){
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbe5      	blt.n	8001564 <OL_softmax+0x1c>
    	}
    }

    sum = 0;
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
    for (int i=0; i<size; i++){
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	e02b      	b.n	80015fc <OL_softmax+0xb4>
    	sum += exp(y_pred[i] - m);
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	ed93 7a00 	vldr	s14, [r3]
 80015b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b8:	ee17 0a90 	vmov	r0, s15
 80015bc:	f7fe ffcc 	bl	8000558 <__aeabi_f2d>
 80015c0:	4603      	mov	r3, r0
 80015c2:	460c      	mov	r4, r1
 80015c4:	ec44 3b10 	vmov	d0, r3, r4
 80015c8:	f008 f99a 	bl	8009900 <exp>
 80015cc:	ec56 5b10 	vmov	r5, r6, d0
 80015d0:	6a38      	ldr	r0, [r7, #32]
 80015d2:	f7fe ffc1 	bl	8000558 <__aeabi_f2d>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	461a      	mov	r2, r3
 80015dc:	4623      	mov	r3, r4
 80015de:	4628      	mov	r0, r5
 80015e0:	4631      	mov	r1, r6
 80015e2:	f7fe fe5b 	bl	800029c <__adddf3>
 80015e6:	4603      	mov	r3, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	4618      	mov	r0, r3
 80015ec:	4621      	mov	r1, r4
 80015ee:	f7ff fae3 	bl	8000bb8 <__aeabi_d2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	623b      	str	r3, [r7, #32]
    for (int i=0; i<size; i++){
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbcf      	blt.n	80015a4 <OL_softmax+0x5c>
    }

    constant = m + log(sum);
 8001604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001606:	f7fe ffa7 	bl	8000558 <__aeabi_f2d>
 800160a:	4604      	mov	r4, r0
 800160c:	460d      	mov	r5, r1
 800160e:	6a38      	ldr	r0, [r7, #32]
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	ec43 2b10 	vmov	d0, r2, r3
 800161c:	f008 f9ec 	bl	80099f8 <log>
 8001620:	ec53 2b10 	vmov	r2, r3, d0
 8001624:	4620      	mov	r0, r4
 8001626:	4629      	mov	r1, r5
 8001628:	f7fe fe38 	bl	800029c <__adddf3>
 800162c:	4603      	mov	r3, r0
 800162e:	460c      	mov	r4, r1
 8001630:	4618      	mov	r0, r3
 8001632:	4621      	mov	r1, r4
 8001634:	f7ff fac0 	bl	8000bb8 <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<size; i++){
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e020      	b.n	8001684 <OL_softmax+0x13c>
    	y_pred[i] = exp(y_pred[i] - constant);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	4413      	add	r3, r2
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	ee17 0a90 	vmov	r0, s15
 800165a:	f7fe ff7d 	bl	8000558 <__aeabi_f2d>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	ec44 3b10 	vmov	d0, r3, r4
 8001666:	f008 f94b 	bl	8009900 <exp>
 800166a:	ec51 0b10 	vmov	r0, r1, d0
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	18d4      	adds	r4, r2, r3
 8001676:	f7ff fa9f 	bl	8000bb8 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	6023      	str	r3, [r4, #0]
    for(int i=0; i<size; i++){
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbda      	blt.n	8001642 <OL_softmax+0xfa>
    }
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 800168c:	bf00      	nop
 800168e:	372c      	adds	r7, #44	; 0x2c
 8001690:	46bd      	mov	sp, r7
 8001692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001694 <OL_checkNewClass>:




/* Check if the letter just received is already known. If not increase dimensions of the layer.  */
void OL_checkNewClass(OL_LAYER_STRUCT * layer, char *letter){
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]

	int found = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<layer->WIDTH; i++){
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	e00d      	b.n	80016c4 <OL_checkNewClass+0x30>
		if(letter[0] == layer->label[i]){
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	781a      	ldrb	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6959      	ldr	r1, [r3, #20]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	440b      	add	r3, r1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d101      	bne.n	80016be <OL_checkNewClass+0x2a>
			found = 1;
 80016ba:	2301      	movs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<layer->WIDTH; i++){
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbec      	blt.n	80016a8 <OL_checkNewClass+0x14>
		}
	}

	// If the letter has not been found
	if(found==0){
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11a      	bne.n	800170a <OL_checkNewClass+0x76>
		// Update info
		layer->new_class = 1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		layer->WIDTH = layer->WIDTH+1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60da      	str	r2, [r3, #12]
		// Update dimensions
		OL_increaseLabel(layer, letter[0]);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fdee 	bl	80012ce <OL_increaseLabel>
		OL_increaseBiasDim(layer);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fd74 	bl	80011e0 <OL_increaseBiasDim>
		OL_increaseYpredDim(layer);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fe11 	bl	8001320 <OL_increaseYpredDim>
		OL_increaseYtrueDim(layer);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fdc9 	bl	8001296 <OL_increaseYtrueDim>
		OL_increaseWeightDim(layer);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fced 	bl	80010e4 <OL_increaseWeightDim>
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <OL_compareLabels>:



/* Compare the prediction and the true label. If the max values of both arrays are in the
 * same positition in the array the prediction is correct.  */
void OL_compareLabels(OL_LAYER_STRUCT * layer){
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]

	uint8_t max_pred = 0;	// USed ofr saving the maximum value
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
	uint8_t max_true = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	73bb      	strb	r3, [r7, #14]
	uint8_t max_j_pred;		// Used for saving the position where the max value is
	uint8_t max_j_true;

	// Find max of both prediction and true label
	for(int j=0; j<layer->WIDTH; j++){
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	e04a      	b.n	80017be <OL_compareLabels+0xac>
		if(max_true < layer->y_true[j]){
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d50e      	bpl.n	8001768 <OL_compareLabels+0x56>
			max_j_true = j;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	733b      	strb	r3, [r7, #12]
			max_true = layer->y_true[j];
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001760:	edc7 7a00 	vstr	s15, [r7]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	73bb      	strb	r3, [r7, #14]
		}
		if(max_pred < layer->y_pred[j]){
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1a      	ldr	r2, [r3, #32]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d516      	bpl.n	80017b8 <OL_compareLabels+0xa6>
			max_j_pred = j;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	737b      	strb	r3, [r7, #13]
			max_pred = layer->y_pred[j];
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a0:	edc7 7a00 	vstr	s15, [r7]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	73fb      	strb	r3, [r7, #15]
			layer->vowel_guess = layer->label[j];
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4413      	add	r3, r2
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	for(int j=0; j<layer->WIDTH; j++){
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbaf      	blt.n	8001728 <OL_compareLabels+0x16>
		}
	}

	// If the maximum values are in different position of the array -> prediction is WRONG
	if(max_j_true != max_j_pred){
 80017c8:	7b3a      	ldrb	r2, [r7, #12]
 80017ca:	7b7b      	ldrb	r3, [r7, #13]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d004      	beq.n	80017da <OL_compareLabels+0xc8>
		layer->prediction_correct = 1;				// wrong
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80017d8:	e003      	b.n	80017e2 <OL_compareLabels+0xd0>
	}else{
		layer->prediction_correct = 2;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2202      	movs	r2, #2
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	// Used from the LWF algorithm
	if(layer->ALGORITHM == MODE_CWR){
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d10b      	bne.n	8001802 <OL_compareLabels+0xf0>
		layer->found_lett[max_j_true] += 1;		// Update the found_lett array
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ee:	7b3b      	ldrb	r3, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f8:	7b3b      	ldrb	r3, [r7, #12]
 80017fa:	440b      	add	r3, r1
 80017fc:	3201      	adds	r2, #1
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]
	}
#if READ_FREE_RAM==1
	OL_updateRAMcounter(layer);
#endif
};
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <OL_train>:
// #############################################


/* This function is the most important part of the TinyOL script. Inside here an IF decides which algorithm
 * to apply, thus changing the update of the weights.  */
void OL_train(OL_LAYER_STRUCT * layer, float * input, char *letter){
 800180e:	b5b0      	push	{r4, r5, r7, lr}
 8001810:	b0ac      	sub	sp, #176	; 0xb0
 8001812:	af02      	add	r7, sp, #8
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]

	// Values in common between all algorithms
	int w = layer->WIDTH;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	653b      	str	r3, [r7, #80]	; 0x50
	int h = layer->HEIGHT;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	64fb      	str	r3, [r7, #76]	; 0x4c
	layer->vowel_guess = 0;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e


	// ***************************************************************
	//     ***** OL ALGORITHM      |      ***** OL_V2 ALGORITHM
	if(layer->ALGORITHM == MODE_OL || layer->ALGORITHM == MODE_OL_V2){
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <OL_train+0x32>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183a:	2b01      	cmp	r3, #1
 800183c:	f040 80c1 	bne.w	80019c2 <OL_train+0x1b4>
 8001840:	466b      	mov	r3, sp
 8001842:	461d      	mov	r5, r3

		float cost[w];
 8001844:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001846:	1e43      	subs	r3, r0, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	4603      	mov	r3, r0
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	f04f 0400 	mov.w	r4, #0
 800185a:	0154      	lsls	r4, r2, #5
 800185c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001860:	014b      	lsls	r3, r1, #5
 8001862:	4603      	mov	r3, r0
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f04f 0400 	mov.w	r4, #0
 8001872:	0154      	lsls	r4, r2, #5
 8001874:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001878:	014b      	lsls	r3, r1, #5
 800187a:	4603      	mov	r3, r0
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	3303      	adds	r3, #3
 8001880:	3307      	adds	r3, #7
 8001882:	08db      	lsrs	r3, r3, #3
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	ebad 0d03 	sub.w	sp, sp, r3
 800188a:	ab02      	add	r3, sp, #8
 800188c:	3303      	adds	r3, #3
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

		// Inference with current weights
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6999      	ldr	r1, [r3, #24]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	69da      	ldr	r2, [r3, #28]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	4613      	mov	r3, r2
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff fde0 	bl	800146c <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4619      	mov	r1, r3
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff fe48 	bl	8001548 <OL_softmax>

		int j_start = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	657b      	str	r3, [r7, #84]	; 0x54

		// If algorithms is OL_V2, don't update the vowels
		if(layer->ALGORITHM == MODE_OL_V2){
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <OL_train+0xba>
			j_start = 5;
 80018c4:	2305      	movs	r3, #5
 80018c6:	657b      	str	r3, [r7, #84]	; 0x54
		}

		for(int j=j_start; j<w; j++){
 80018c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80018cc:	e06a      	b.n	80019a4 <OL_train+0x196>
			cost[j] = layer->y_pred[j]-layer->y_true[j];			    // Compute the cost
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	ed93 7a00 	vldr	s14, [r3]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	edc3 7a00 	vstr	s15, [r3]

			for(int i=0; i<h; i++){
 80018fa:	2300      	movs	r3, #0
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018fe:	e02f      	b.n	8001960 <OL_train+0x152>
				layer->weights[j*h+i] -= cost[j]*input[i]*layer->l_rate;	// Update the weights
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001906:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001908:	fb01 f103 	mul.w	r1, r1, r3
 800190c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800190e:	440b      	add	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	ed93 7a00 	vldr	s14, [r3]
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	edd3 6a00 	vldr	s13, [r3]
 8001924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	4413      	add	r3, r2
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001944:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001946:	fb01 f103 	mul.w	r1, r1, r3
 800194a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800194c:	440b      	add	r3, r1
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001956:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 800195a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195c:	3301      	adds	r3, #1
 800195e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001960:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001964:	429a      	cmp	r2, r3
 8001966:	dbcb      	blt.n	8001900 <OL_train+0xf2>
			}
			layer->biases[j] -= cost[j]*layer->l_rate;					// Update the biases
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	69da      	ldr	r2, [r3, #28]
 800196c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	ed93 7a00 	vldr	s14, [r3]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	edd3 6a00 	vldr	s13, [r3]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	edc3 7a00 	vstr	s15, [r3]
		for(int j=j_start; j<w; j++){
 800199e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019a0:	3301      	adds	r3, #1
 80019a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80019a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019a8:	429a      	cmp	r2, r3
 80019aa:	db90      	blt.n	80018ce <OL_train+0xc0>
		}

		OL_compareLabels(layer);										// Check if prediction is correct
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff feb0 	bl	8001712 <OL_compareLabels>

		layer->counter +=1;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	46ad      	mov	sp, r5
	if(layer->ALGORITHM == MODE_OL || layer->ALGORITHM == MODE_OL_V2){
 80019be:	f000 be0d 	b.w	80025dc <OL_train+0xdce>
		OL_updateRAMcounter(layer);
#endif

	// ***************************************************************
	//     ***** OL ALGORITHM BATCH            |      ***** OL_V2 ALGORITHM BATCH
	}else if(layer->ALGORITHM == MODE_OL_batch || layer->ALGORITHM == MODE_OL_V2_batch){
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d004      	beq.n	80019d4 <OL_train+0x1c6>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	f040 8148 	bne.w	8001c64 <OL_train+0x456>
 80019d4:	466b      	mov	r3, sp
 80019d6:	461d      	mov	r5, r3

		float cost[w];
 80019d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80019da:	1e43      	subs	r3, r0, #1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	4603      	mov	r3, r0
 80019e0:	4619      	mov	r1, r3
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f04f 0400 	mov.w	r4, #0
 80019ee:	0154      	lsls	r4, r2, #5
 80019f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019f4:	014b      	lsls	r3, r1, #5
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	f04f 0400 	mov.w	r4, #0
 8001a06:	0154      	lsls	r4, r2, #5
 8001a08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a0c:	014b      	lsls	r3, r1, #5
 8001a0e:	4603      	mov	r3, r0
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	3303      	adds	r3, #3
 8001a14:	3307      	adds	r3, #7
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	ebad 0d03 	sub.w	sp, sp, r3
 8001a1e:	ab02      	add	r3, sp, #8
 8001a20:	3303      	adds	r3, #3
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	61bb      	str	r3, [r7, #24]

		// Inference with current weights
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6999      	ldr	r1, [r3, #24]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff fd16 	bl	800146c <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4619      	mov	r1, r3
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff fd7e 	bl	8001548 <OL_softmax>

		for(int j=0; j<w; j++){
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8001a50:	e060      	b.n	8001b14 <OL_train+0x306>
			cost[j] = layer->y_pred[j]-layer->y_true[j];			// Compute the cost
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	ed93 7a00 	vldr	s14, [r3]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	edc3 7a00 	vstr	s15, [r3]

			for(int i=0; i<h; i++){
 8001a7e:	2300      	movs	r3, #0
 8001a80:	667b      	str	r3, [r7, #100]	; 0x64
 8001a82:	e02a      	b.n	8001ada <OL_train+0x2cc>
				layer->weights_2[j*h+i] += cost[j]*input[i];	// Update weights
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001a8c:	fb01 f103 	mul.w	r1, r1, r3
 8001a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a92:	440b      	add	r3, r1
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	edd3 6a00 	vldr	s13, [r3]
 8001aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	4413      	add	r3, r2
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001abe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ac0:	fb01 f103 	mul.w	r1, r1, r3
 8001ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ac6:	440b      	add	r3, r1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8001ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8001ada:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbd0      	blt.n	8001a84 <OL_train+0x276>
			}
			layer->biases_2[j] += cost[j];					// Update biases
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	ed93 7a00 	vldr	s14, [r3]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 8001b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b10:	3301      	adds	r3, #1
 8001b12:	663b      	str	r3, [r7, #96]	; 0x60
 8001b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	db9a      	blt.n	8001a52 <OL_train+0x244>
		}

		OL_compareLabels(layer);					// Check if prediction is correct or not
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7ff fdf8 	bl	8001712 <OL_compareLabels>

		// When reached the end of a batch
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size)==0) ){
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8094 	beq.w	8001c54 <OL_train+0x446>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	7912      	ldrb	r2, [r2, #4]
 8001b34:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b38:	fb02 f201 	mul.w	r2, r2, r1
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 8088 	bne.w	8001c54 <OL_train+0x446>

			int j_start = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	66bb      	str	r3, [r7, #104]	; 0x68

			// If algorithms is OL_V2, don't update the vowels
			if(layer->ALGORITHM == MODE_OL_V2_batch){
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d101      	bne.n	8001b54 <OL_train+0x346>
				j_start=5;
 8001b50:	2305      	movs	r3, #5
 8001b52:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			for(int j=j_start; j<w; j++){
 8001b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b58:	e078      	b.n	8001c4c <OL_train+0x43e>
				for(int i=0; i<h; i++){
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	673b      	str	r3, [r7, #112]	; 0x70
 8001b5e:	e042      	b.n	8001be6 <OL_train+0x3d8>
					layer->weights[j*h+i] -= layer->weights_2[j*h+i]/layer->batch_size*layer->l_rate;	// Update weights
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b68:	fb01 f103 	mul.w	r1, r1, r3
 8001b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b6e:	440b      	add	r3, r1
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b80:	fb01 f103 	mul.w	r1, r1, r3
 8001b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b86:	440b      	add	r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	ed93 6a00 	vldr	s12, [r3]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001bb2:	fb01 f103 	mul.w	r1, r1, r3
 8001bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bb8:	440b      	add	r3, r1
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc2:	edc3 7a00 	vstr	s15, [r3]
					layer->weights_2[j*h+i] = 0;														// Reset
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bcc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001bce:	fb01 f103 	mul.w	r1, r1, r3
 8001bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bd4:	440b      	add	r3, r1
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8001be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001be2:	3301      	adds	r3, #1
 8001be4:	673b      	str	r3, [r7, #112]	; 0x70
 8001be6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bea:	429a      	cmp	r2, r3
 8001bec:	dbb8      	blt.n	8001b60 <OL_train+0x352>
				}
				layer->biases[j] -= layer->biases_2[j]/layer->batch_size*layer->l_rate;				// Update biases
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	ed93 7a00 	vldr	s14, [r3]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	ed93 6a00 	vldr	s12, [r3]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	791b      	ldrb	r3, [r3, #4]
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c16:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	69da      	ldr	r2, [r3, #28]
 8001c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c32:	edc3 7a00 	vstr	s15, [r3]
				layer->biases_2[j] = 0;																	// Reset
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
			for(int j=j_start; j<w; j++){
 8001c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c48:	3301      	adds	r3, #1
 8001c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c50:	429a      	cmp	r2, r3
 8001c52:	db82      	blt.n	8001b5a <OL_train+0x34c>
			}
		}

		layer->counter +=1;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	46ad      	mov	sp, r5
	}else if(layer->ALGORITHM == MODE_OL_batch || layer->ALGORITHM == MODE_OL_V2_batch){
 8001c60:	f000 bcbc 	b.w	80025dc <OL_train+0xdce>
		OL_updateRAMcounter(layer);
#endif

	// *************************************
	// ***** CWR ALGORITHM
	}else if (layer->ALGORITHM == MODE_CWR){
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	f040 81a2 	bne.w	8001fb2 <OL_train+0x7a4>
 8001c6e:	466b      	mov	r3, sp
 8001c70:	461d      	mov	r5, r3

		float cost[w];
 8001c72:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c74:	1e43      	subs	r3, r0, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	f04f 0400 	mov.w	r4, #0
 8001c88:	0154      	lsls	r4, r2, #5
 8001c8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c8e:	014b      	lsls	r3, r1, #5
 8001c90:	4603      	mov	r3, r0
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	f04f 0400 	mov.w	r4, #0
 8001ca0:	0154      	lsls	r4, r2, #5
 8001ca2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ca6:	014b      	lsls	r3, r1, #5
 8001ca8:	4603      	mov	r3, r0
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	3303      	adds	r3, #3
 8001cae:	3307      	adds	r3, #7
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	ebad 0d03 	sub.w	sp, sp, r3
 8001cb8:	ab02      	add	r3, sp, #8
 8001cba:	3303      	adds	r3, #3
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	623b      	str	r3, [r7, #32]

		// Prediction
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff fbc9 	bl	800146c <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7ff fc31 	bl	8001548 <OL_softmax>

		for(int j=0; j<w; j++){
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	677b      	str	r3, [r7, #116]	; 0x74
 8001cea:	e06a      	b.n	8001dc2 <OL_train+0x5b4>
			cost[j] = layer->y_pred[j]-layer->y_true[j];		  // Cost computation
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	ed93 7a00 	vldr	s14, [r3]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0c:	6a3a      	ldr	r2, [r7, #32]
 8001d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	edc3 7a00 	vstr	s15, [r3]

			// Back propagation on TW
			for(int i=0; i<h; i++){
 8001d18:	2300      	movs	r3, #0
 8001d1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d1c:	e02f      	b.n	8001d7e <OL_train+0x570>
				layer->weights_2[j*h+i] -= cost[j]*input[i]*layer->l_rate;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d26:	fb01 f103 	mul.w	r1, r1, r3
 8001d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d2c:	440b      	add	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	ed93 7a00 	vldr	s14, [r3]
 8001d36:	6a3a      	ldr	r2, [r7, #32]
 8001d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	edd3 6a00 	vldr	s13, [r3]
 8001d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	4413      	add	r3, r2
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d64:	fb01 f103 	mul.w	r1, r1, r3
 8001d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6a:	440b      	add	r3, r1
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d74:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8001d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d82:	429a      	cmp	r2, r3
 8001d84:	dbcb      	blt.n	8001d1e <OL_train+0x510>
			}
			layer->biases_2[j] -= cost[j]*layer->l_rate;  // Back propagation on TB
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	ed93 7a00 	vldr	s14, [r3]
 8001d94:	6a3a      	ldr	r2, [r7, #32]
 8001d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	edd3 6a00 	vldr	s13, [r3]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db8:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 8001dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	677b      	str	r3, [r7, #116]	; 0x74
 8001dc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	db90      	blt.n	8001cec <OL_train+0x4de>
		}

		OL_compareLabels(layer);			// Check if prediction is correct or not
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fca1 	bl	8001712 <OL_compareLabels>


		// When batch ends
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size) == 0) ){
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80e5 	beq.w	8001fa4 <OL_train+0x796>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	7912      	ldrb	r2, [r2, #4]
 8001de2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001de6:	fb02 f201 	mul.w	r2, r2, r1
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f040 80d9 	bne.w	8001fa4 <OL_train+0x796>

			// Update CW
			for(int j=0; j<w; j++){
 8001df2:	2300      	movs	r3, #0
 8001df4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001df6:	e085      	b.n	8001f04 <OL_train+0x6f6>
				if(layer->found_lett[j] != 0){
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dfe:	4413      	add	r3, r2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d07b      	beq.n	8001efe <OL_train+0x6f0>
					for(int i=0; i<h; i++){
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e0c:	e044      	b.n	8001e98 <OL_train+0x68a>
						layer->weights[j*h+i] = ((layer->weights[j*h+i]*layer->found_lett[j])+layer->weights_2[j*h+i])/(layer->found_lett[j]+1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e16:	fb01 f103 	mul.w	r1, r1, r3
 8001e1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e1e:	440b      	add	r3, r1
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	ed93 7a00 	vldr	s14, [r3]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e46:	fb01 f103 	mul.w	r1, r1, r3
 8001e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e4e:	440b      	add	r3, r1
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e78:	fb01 f103 	mul.w	r1, r1, r3
 8001e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e80:	440b      	add	r3, r1
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8a:	edc3 7a00 	vstr	s15, [r3]
					for(int i=0; i<h; i++){
 8001e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e92:	3301      	adds	r3, #1
 8001e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	dbb5      	blt.n	8001e0e <OL_train+0x600>
					}
					layer->biases[j] = ((layer->biases[j]*layer->found_lett[j])+layer->biases_2[j])/(layer->found_lett[j]+1);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	ed93 7a00 	vldr	s14, [r3]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efa:	edc3 7a00 	vstr	s15, [r3]
			for(int j=0; j<w; j++){
 8001efe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f00:	3301      	adds	r3, #1
 8001f02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f6ff af75 	blt.w	8001df8 <OL_train+0x5ea>
				}
			}

			// Reset TW
			for(int j=0; j<w; j++){
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f14:	e041      	b.n	8001f9a <OL_train+0x78c>
				for(int i=0; i<h; i++){
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f1c:	e01e      	b.n	8001f5c <OL_train+0x74e>
					layer->weights_2[j*h+i] = layer->weights[j*h+i];	// reset
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f28:	fb01 f103 	mul.w	r1, r1, r3
 8001f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f30:	440b      	add	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f3e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f40:	fb00 f003 	mul.w	r0, r0, r3
 8001f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f48:	4403      	add	r3, r0
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 8001f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f56:	3301      	adds	r3, #1
 8001f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f5c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f62:	429a      	cmp	r2, r3
 8001f64:	dbdb      	blt.n	8001f1e <OL_train+0x710>
				}
				layer->biases_2[j] = layer->biases[j];					// reset
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	441a      	add	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	601a      	str	r2, [r3, #0]
				layer->found_lett[j] = 0;								// reset
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f8a:	4413      	add	r3, r2
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<w; j++){
 8001f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f94:	3301      	adds	r3, #1
 8001f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dbb8      	blt.n	8001f16 <OL_train+0x708>
			}
		}

		layer->counter +=1;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	46ad      	mov	sp, r5
#if READ_FREE_RAM==1
		OL_updateRAMcounter(layer);
#endif

	}
};
 8001fb0:	e314      	b.n	80025dc <OL_train+0xdce>
	}else if(layer->ALGORITHM == MODE_LWF){
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	f040 8156 	bne.w	8002268 <OL_train+0xa5a>
 8001fbc:	466b      	mov	r3, sp
 8001fbe:	461d      	mov	r5, r3
		float cost_norm[w];
 8001fc0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001fc2:	1e43      	subs	r3, r0, #1
 8001fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	f04f 0400 	mov.w	r4, #0
 8001fd6:	0154      	lsls	r4, r2, #5
 8001fd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fdc:	014b      	lsls	r3, r1, #5
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	f04f 0400 	mov.w	r4, #0
 8001fee:	0154      	lsls	r4, r2, #5
 8001ff0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ff4:	014b      	lsls	r3, r1, #5
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	3303      	adds	r3, #3
 8001ffc:	3307      	adds	r3, #7
 8001ffe:	08db      	lsrs	r3, r3, #3
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	ebad 0d03 	sub.w	sp, sp, r3
 8002006:	ab02      	add	r3, sp, #8
 8002008:	3303      	adds	r3, #3
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	637b      	str	r3, [r7, #52]	; 0x34
		float cost_LWF[w];
 8002010:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002012:	1e43      	subs	r3, r0, #1
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
 8002016:	4603      	mov	r3, r0
 8002018:	4619      	mov	r1, r3
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	f04f 0400 	mov.w	r4, #0
 8002026:	0154      	lsls	r4, r2, #5
 8002028:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800202c:	014b      	lsls	r3, r1, #5
 800202e:	4603      	mov	r3, r0
 8002030:	4619      	mov	r1, r3
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	f04f 0400 	mov.w	r4, #0
 800203e:	0154      	lsls	r4, r2, #5
 8002040:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002044:	014b      	lsls	r3, r1, #5
 8002046:	4603      	mov	r3, r0
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3303      	adds	r3, #3
 800204c:	3307      	adds	r3, #7
 800204e:	08db      	lsrs	r3, r3, #3
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	ebad 0d03 	sub.w	sp, sp, r3
 8002056:	ab02      	add	r3, sp, #8
 8002058:	3303      	adds	r3, #3
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6999      	ldr	r1, [r3, #24]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7ff f9fa 	bl	800146c <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4619      	mov	r1, r3
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff fa62 	bl	8001548 <OL_softmax>
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7ff f9e8 	bl	800146c <OL_feedForward>
		OL_softmax(layer, layer->y_pred_2);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a0:	4619      	mov	r1, r3
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7ff fa50 	bl	8001548 <OL_softmax>
		lambda = 100/(100+layer->counter);					// Update lambda
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	3364      	adds	r3, #100	; 0x64
 80020ae:	2264      	movs	r2, #100	; 0x64
 80020b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020bc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		for(int j=0; j<w; j++){
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80020c6:	e0bf      	b.n	8002248 <OL_train+0xa3a>
			cost_norm[j] = layer->y_pred[j]  -layer->y_true[j];	// Compute normal cost
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a1a      	ldr	r2, [r3, #32]
 80020cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	ed93 7a00 	vldr	s14, [r3]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	edc3 7a00 	vstr	s15, [r3]
			cost_LWF[j]  = layer->y_pred_2[j]-layer->y_true[j];	// Compute LWF cost
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	ed93 7a00 	vldr	s14, [r3]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800210e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002132:	e04c      	b.n	80021ce <OL_train+0x9c0>
				layer->weights[j*h+i] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate*input[i];	// Update weights
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800213c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800213e:	fb01 f103 	mul.w	r1, r1, r3
 8002142:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002146:	440b      	add	r3, r1
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	edd3 6a00 	vldr	s13, [r3]
 800215e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002162:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002166:	ee76 7a67 	vsub.f32	s15, s12, s15
 800216a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800216e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002170:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	ed93 6a00 	vldr	s12, [r3]
 800217c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002180:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002184:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	4413      	add	r3, r2
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80021ae:	fb01 f103 	mul.w	r1, r1, r3
 80021b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021b6:	440b      	add	r3, r1
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c0:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 80021c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021c8:	3301      	adds	r3, #1
 80021ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80021d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dbad      	blt.n	8002134 <OL_train+0x926>
			layer->biases[j] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate;					// Update biases
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	ed93 7a00 	vldr	s14, [r3]
 80021e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	edd3 6a00 	vldr	s13, [r3]
 80021f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80021fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002202:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	ed93 6a00 	vldr	s12, [r3]
 8002214:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002218:	ee66 7a27 	vmul.f32	s15, s12, s15
 800221c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223a:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 800223e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002242:	3301      	adds	r3, #1
 8002244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002248:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800224c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800224e:	429a      	cmp	r2, r3
 8002250:	f6ff af3a 	blt.w	80020c8 <OL_train+0x8ba>
		OL_compareLabels(layer);																	// Check if prediction is correct or not
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fa5c 	bl	8001712 <OL_compareLabels>
		layer->counter +=1;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	46ad      	mov	sp, r5
};
 8002266:	e1b9      	b.n	80025dc <OL_train+0xdce>
	}else if(layer->ALGORITHM == MODE_LWF_batch){
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	2b06      	cmp	r3, #6
 800226e:	f040 81b5 	bne.w	80025dc <OL_train+0xdce>
 8002272:	466b      	mov	r3, sp
 8002274:	461d      	mov	r5, r3
		float cost_norm[w];
 8002276:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002278:	1e43      	subs	r3, r0, #1
 800227a:	64bb      	str	r3, [r7, #72]	; 0x48
 800227c:	4603      	mov	r3, r0
 800227e:	4619      	mov	r1, r3
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	f04f 0400 	mov.w	r4, #0
 800228c:	0154      	lsls	r4, r2, #5
 800228e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002292:	014b      	lsls	r3, r1, #5
 8002294:	4603      	mov	r3, r0
 8002296:	4619      	mov	r1, r3
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	f04f 0400 	mov.w	r4, #0
 80022a4:	0154      	lsls	r4, r2, #5
 80022a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022aa:	014b      	lsls	r3, r1, #5
 80022ac:	4603      	mov	r3, r0
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	3303      	adds	r3, #3
 80022b2:	3307      	adds	r3, #7
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	ebad 0d03 	sub.w	sp, sp, r3
 80022bc:	ab02      	add	r3, sp, #8
 80022be:	3303      	adds	r3, #3
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	647b      	str	r3, [r7, #68]	; 0x44
		float cost_LWF[w];
 80022c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80022c8:	1e43      	subs	r3, r0, #1
 80022ca:	643b      	str	r3, [r7, #64]	; 0x40
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	f04f 0400 	mov.w	r4, #0
 80022dc:	0154      	lsls	r4, r2, #5
 80022de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022e2:	014b      	lsls	r3, r1, #5
 80022e4:	4603      	mov	r3, r0
 80022e6:	4619      	mov	r1, r3
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	f04f 0400 	mov.w	r4, #0
 80022f4:	0154      	lsls	r4, r2, #5
 80022f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022fa:	014b      	lsls	r3, r1, #5
 80022fc:	4603      	mov	r3, r0
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	3303      	adds	r3, #3
 8002302:	3307      	adds	r3, #7
 8002304:	08db      	lsrs	r3, r3, #3
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	ebad 0d03 	sub.w	sp, sp, r3
 800230c:	ab02      	add	r3, sp, #8
 800230e:	3303      	adds	r3, #3
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
		OL_feedForward(layer, layer->weights, input, layer->biases, layer->y_pred);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6999      	ldr	r1, [r3, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff f89f 	bl	800146c <OL_feedForward>
		OL_softmax(layer, layer->y_pred);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4619      	mov	r1, r3
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff f907 	bl	8001548 <OL_softmax>
		OL_feedForward(layer, layer->weights_2, input, layer->biases_2, layer->y_pred_2);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff f88d 	bl	800146c <OL_feedForward>
		OL_softmax(layer, layer->y_pred_2);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	4619      	mov	r1, r3
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff f8f5 	bl	8001548 <OL_softmax>
        if(layer->counter<layer->batch_size){
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	7912      	ldrb	r2, [r2, #4]
 8002366:	4293      	cmp	r3, r2
 8002368:	da04      	bge.n	8002374 <OL_train+0xb66>
        	lambda = 1;
 800236a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800236e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002372:	e00c      	b.n	800238e <OL_train+0xb80>
        	lambda = layer->batch_size/layer->counter;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	791b      	ldrb	r3, [r3, #4]
 8002378:	461a      	mov	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		for(int j=0; j<w; j++){
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002394:	e0bf      	b.n	8002516 <OL_train+0xd08>
			cost_norm[j] = layer->y_pred[j]  -layer->y_true[j];	// compute normal cost
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	edc3 7a00 	vstr	s15, [r3]
			cost_LWF[j]  = layer->y_pred_2[j]-layer->y_true[j];	// compute LWF cost
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	ed93 7a00 	vldr	s14, [r3]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002400:	e04c      	b.n	800249c <OL_train+0xc8e>
				layer->weights[j*h+i] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate*input[i];	// Update weights
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800240a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800240c:	fb01 f103 	mul.w	r1, r1, r3
 8002410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002414:	440b      	add	r3, r1
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	ed93 7a00 	vldr	s14, [r3]
 800241e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	edd3 6a00 	vldr	s13, [r3]
 800242c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002430:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002434:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002438:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800243c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800243e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	ed93 6a00 	vldr	s12, [r3]
 800244a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800244e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002452:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4413      	add	r3, r2
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800247a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800247c:	fb01 f103 	mul.w	r1, r1, r3
 8002480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002484:	440b      	add	r3, r1
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248e:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<h; i++){
 8002492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002496:	3301      	adds	r3, #1
 8002498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800249c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80024a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbad      	blt.n	8002402 <OL_train+0xbf4>
			layer->biases[j] -= (cost_norm[j]*(1-lambda)+cost_LWF[j]*lambda)*layer->l_rate;					// Update biases
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	ed93 7a00 	vldr	s14, [r3]
 80024b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	edd3 6a00 	vldr	s13, [r3]
 80024c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80024c8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80024cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	ed93 6a00 	vldr	s12, [r3]
 80024e2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80024e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002508:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<w; j++){
 800250c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002510:	3301      	adds	r3, #1
 8002512:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002516:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800251a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251c:	429a      	cmp	r2, r3
 800251e:	f6ff af3a 	blt.w	8002396 <OL_train+0xb88>
		OL_compareLabels(layer);																	// Check if prediction is correct or not
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff f8f5 	bl	8001712 <OL_compareLabels>
		if( (layer->counter != 0) && ((layer->counter % layer->batch_size) == 0) ){
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d04e      	beq.n	80025ce <OL_train+0xdc0>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	7912      	ldrb	r2, [r2, #4]
 8002538:	fb93 f1f2 	sdiv	r1, r3, r2
 800253c:	fb02 f201 	mul.w	r2, r2, r1
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d143      	bne.n	80025ce <OL_train+0xdc0>
			for(int j=0; j<w; j++){
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800254c:	e03a      	b.n	80025c4 <OL_train+0xdb6>
				for(int i=0; i<h; i++){
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002554:	e01e      	b.n	8002594 <OL_train+0xd86>
					layer->weights_2[j*h+i] = layer->weights[j*h+i];	// Reset
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800255e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002560:	fb01 f103 	mul.w	r1, r1, r3
 8002564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002568:	440b      	add	r3, r1
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	441a      	add	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002576:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002578:	fb00 f003 	mul.w	r0, r0, r3
 800257c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002580:	4403      	add	r3, r0
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	601a      	str	r2, [r3, #0]
				for(int i=0; i<h; i++){
 800258a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800258e:	3301      	adds	r3, #1
 8002590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002594:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800259a:	429a      	cmp	r2, r3
 800259c:	dbdb      	blt.n	8002556 <OL_train+0xd48>
				layer->biases_2[j] = layer->biases[j];					// Reset
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	441a      	add	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	601a      	str	r2, [r3, #0]
			for(int j=0; j<w; j++){
 80025ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025be:	3301      	adds	r3, #1
 80025c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80025c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dbbf      	blt.n	800254e <OL_train+0xd40>
		layer->counter +=1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	46ad      	mov	sp, r5
};
 80025da:	e7ff      	b.n	80025dc <OL_train+0xdce>
 80025dc:	bf00      	nop
 80025de:	37a8      	adds	r7, #168	; 0xa8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bdb0      	pop	{r4, r5, r7, pc}

080025e4 <FreeMem>:
    struct elem *next;
    char dummy[FREEMEM_CELL-2];
};


int FreeMem(void) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
    int counter;
    struct elem *head, *current, *nextone;
    current = head = (struct elem*) malloc(sizeof(struct elem));
 80025ea:	2068      	movs	r0, #104	; 0x68
 80025ec:	f004 fdb6 	bl	800715c <malloc>
 80025f0:	4603      	mov	r3, r0
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60bb      	str	r3, [r7, #8]
    if (head == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <FreeMem+0x1e>
        return 0;      /*No memory available.*/
 80025fe:	2300      	movs	r3, #0
 8002600:	e022      	b.n	8002648 <FreeMem+0x64>
    counter = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
   // __disable_irq();
    do {
        counter++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3301      	adds	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
        current->next = (struct elem*) malloc(sizeof(struct elem));
 800260c:	2068      	movs	r0, #104	; 0x68
 800260e:	f004 fda5 	bl	800715c <malloc>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	601a      	str	r2, [r3, #0]
        current = current->next;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60bb      	str	r3, [r7, #8]
    } while (current != NULL);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ef      	bne.n	8002606 <FreeMem+0x22>
    /* Now counter holds the number of type elem
       structures we were able to allocate. We
       must free them all before returning. */
    current = head;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60bb      	str	r3, [r7, #8]
    do {
        nextone = current->next;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	603b      	str	r3, [r7, #0]
        free(current);
 8002630:	68b8      	ldr	r0, [r7, #8]
 8002632:	f004 fd9b 	bl	800716c <free>
        current = nextone;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	60bb      	str	r3, [r7, #8]
    } while (nextone != NULL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f4      	bne.n	800262a <FreeMem+0x46>
   // __enable_irq();

    return counter*FREEMEM_CELL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2264      	movs	r2, #100	; 0x64
 8002644:	fb02 f303 	mul.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_CRC_Init+0x20>)
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <MX_CRC_Init+0x24>)
 8002658:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_CRC_Init+0x20>)
 800265c:	f000 fee7 	bl	800342e <HAL_CRC_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002666:	f000 fb89 	bl	8002d7c <Error_Handler>
  }

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20001b14 	.word	0x20001b14
 8002674:	40023000 	.word	0x40023000

08002678 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <HAL_CRC_MspInit+0x3c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10d      	bne.n	80026a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_CRC_MspInit+0x40>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <HAL_CRC_MspInit+0x40>)
 8002694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_CRC_MspInit+0x40>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40023000 	.word	0x40023000
 80026b8:	40023800 	.word	0x40023800

080026bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	4b45      	ldr	r3, [pc, #276]	; (80027ec <MX_GPIO_Init+0x130>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a44      	ldr	r2, [pc, #272]	; (80027ec <MX_GPIO_Init+0x130>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b42      	ldr	r3, [pc, #264]	; (80027ec <MX_GPIO_Init+0x130>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <MX_GPIO_Init+0x130>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a3d      	ldr	r2, [pc, #244]	; (80027ec <MX_GPIO_Init+0x130>)
 80026f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <MX_GPIO_Init+0x130>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <MX_GPIO_Init+0x130>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a36      	ldr	r2, [pc, #216]	; (80027ec <MX_GPIO_Init+0x130>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b34      	ldr	r3, [pc, #208]	; (80027ec <MX_GPIO_Init+0x130>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	4b30      	ldr	r3, [pc, #192]	; (80027ec <MX_GPIO_Init+0x130>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <MX_GPIO_Init+0x130>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <MX_GPIO_Init+0x130>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	2120      	movs	r1, #32
 8002746:	482a      	ldr	r0, [pc, #168]	; (80027f0 <MX_GPIO_Init+0x134>)
 8002748:	f001 f832 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002752:	4828      	ldr	r0, [pc, #160]	; (80027f4 <MX_GPIO_Init+0x138>)
 8002754:	f001 f82c 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800275e:	4b26      	ldr	r3, [pc, #152]	; (80027f8 <MX_GPIO_Init+0x13c>)
 8002760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	4823      	ldr	r0, [pc, #140]	; (80027fc <MX_GPIO_Init+0x140>)
 800276e:	f000 fe9d 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002772:	2320      	movs	r3, #32
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	4819      	ldr	r0, [pc, #100]	; (80027f0 <MX_GPIO_Init+0x134>)
 800278a:	f000 fe8f 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800278e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002794:	2301      	movs	r3, #1
 8002796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4619      	mov	r1, r3
 80027a6:	4813      	ldr	r0, [pc, #76]	; (80027f4 <MX_GPIO_Init+0x138>)
 80027a8:	f000 fe80 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027ac:	2320      	movs	r3, #32
 80027ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <MX_GPIO_Init+0x144>)
 80027b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	480d      	ldr	r0, [pc, #52]	; (80027f4 <MX_GPIO_Init+0x138>)
 80027c0:	f000 fe74 	bl	80034ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	2017      	movs	r0, #23
 80027ca:	f000 fdfa 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027ce:	2017      	movs	r0, #23
 80027d0:	f000 fe13 	bl	80033fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	2028      	movs	r0, #40	; 0x28
 80027da:	f000 fdf2 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027de:	2028      	movs	r0, #40	; 0x28
 80027e0:	f000 fe0b 	bl	80033fa <HAL_NVIC_EnableIRQ>

}
 80027e4:	bf00      	nop
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	10210000 	.word	0x10210000
 80027fc:	40020800 	.word	0x40020800
 8002800:	10110000 	.word	0x10110000

08002804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b098      	sub	sp, #96	; 0x60
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800280a:	f000 fc6b 	bl	80030e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800280e:	f000 f9b1 	bl	8002b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002812:	f7ff ff53 	bl	80026bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002816:	f000 fbc1 	bl	8002f9c <MX_USART2_UART_Init>
  MX_CRC_Init();
 800281a:	f7ff ff19 	bl	8002650 <MX_CRC_Init>
  MX_TIM10_Init();
 800281e:	f000 fb73 	bl	8002f08 <MX_TIM10_Init>
  MX_X_CUBE_AI_Init();
 8002822:	f002 fefd 	bl	8005620 <MX_X_CUBE_AI_Init>
  //	MODE_CWR
  //    MODE_LWF
  //	MODE_OL_batch
  //	MODE_OL_V2_batch
  //	MODE_LWF_batch
  OL_layer.ALGORITHM = MODE_OL;
 8002826:	2300      	movs	r3, #0
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38

  OL_layer.batch_size = 8;
 800282a:	2308      	movs	r3, #8
 800282c:	713b      	strb	r3, [r7, #4]

  // Define the learn rate depending on the algorithm
  if(OL_layer.ALGORITHM       == MODE_OL){
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <main+0x36>
	  OL_layer.l_rate = 0.00005; // 0.00005
 8002834:	4b6e      	ldr	r3, [pc, #440]	; (80029f0 <main+0x1ec>)
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	e022      	b.n	8002880 <main+0x7c>
  }else if(OL_layer.ALGORITHM == MODE_OL_batch){
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	2b04      	cmp	r3, #4
 800283e:	d102      	bne.n	8002846 <main+0x42>
	  OL_layer.l_rate = 0.001;   //0.001
 8002840:	4b6c      	ldr	r3, [pc, #432]	; (80029f4 <main+0x1f0>)
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	e01c      	b.n	8002880 <main+0x7c>
  }else if(OL_layer.ALGORITHM == MODE_OL_V2){
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	2b01      	cmp	r3, #1
 800284a:	d102      	bne.n	8002852 <main+0x4e>
	  OL_layer.l_rate = 0.0001; // 0.0001;
 800284c:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <main+0x1f4>)
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	e016      	b.n	8002880 <main+0x7c>
  }else if(OL_layer.ALGORITHM == MODE_OL_V2_batch){
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	2b05      	cmp	r3, #5
 8002856:	d102      	bne.n	800285e <main+0x5a>
	  OL_layer.l_rate = 0.001; //0.001;
 8002858:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <main+0x1f0>)
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	e010      	b.n	8002880 <main+0x7c>
  }else if(OL_layer.ALGORITHM == MODE_CWR){
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	2b02      	cmp	r3, #2
 8002862:	d102      	bne.n	800286a <main+0x66>
	  OL_layer.l_rate = 0.0009;  //0.0009
 8002864:	4b65      	ldr	r3, [pc, #404]	; (80029fc <main+0x1f8>)
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	e00a      	b.n	8002880 <main+0x7c>
  }else if(OL_layer.ALGORITHM == MODE_LWF){
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	2b03      	cmp	r3, #3
 800286e:	d102      	bne.n	8002876 <main+0x72>
	  OL_layer.l_rate = 0.0007; //0.0007
 8002870:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <main+0x1fc>)
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	e004      	b.n	8002880 <main+0x7c>
  }else if(OL_layer.ALGORITHM == MODE_LWF_batch){
 8002876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002878:	2b06      	cmp	r3, #6
 800287a:	d101      	bne.n	8002880 <main+0x7c>
	  OL_layer.l_rate = 0.0005; //0.0005
 800287c:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <main+0x200>)
 800287e:	603b      	str	r3, [r7, #0]
  }


  // Initialize all the other values in the struct
  // The values below should always stay the same
  OL_layer.WIDTH    	= 5;
 8002880:	2305      	movs	r3, #5
 8002882:	60fb      	str	r3, [r7, #12]
  OL_layer.HEIGHT   	= AI_NETWORK_OUT_1_SIZE;
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	613b      	str	r3, [r7, #16]
  OL_layer.counter  	= 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  OL_layer.OL_ERROR 	= 0;
 800288c:	2300      	movs	r3, #0
 800288e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  OL_layer.freeRAMbytes = 100000000;
 8002892:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <main+0x204>)
 8002894:	647b      	str	r3, [r7, #68]	; 0x44


  // Allocate all the necessary matrices/arrays
  OL_allocateMemory(&OL_layer);
 8002896:	463b      	mov	r3, r7
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fb5d 	bl	8000f58 <OL_allocateMemory>


  // Fill up labels
  OL_layer.label[0] = 'A';
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2241      	movs	r2, #65	; 0x41
 80028a2:	701a      	strb	r2, [r3, #0]
  OL_layer.label[1] = 'E';
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	2245      	movs	r2, #69	; 0x45
 80028aa:	701a      	strb	r2, [r3, #0]
  OL_layer.label[2] = 'I';
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3302      	adds	r3, #2
 80028b0:	2249      	movs	r2, #73	; 0x49
 80028b2:	701a      	strb	r2, [r3, #0]
  OL_layer.label[3] = 'O';
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3303      	adds	r3, #3
 80028b8:	224f      	movs	r2, #79	; 0x4f
 80028ba:	701a      	strb	r2, [r3, #0]
  OL_layer.label[4] = 'U';
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3304      	adds	r3, #4
 80028c0:	2255      	movs	r2, #85	; 0x55
 80028c2:	701a      	strb	r2, [r3, #0]

  // Fill up the weight matrix with the weights from the Keras model
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 80028c4:	2300      	movs	r3, #0
 80028c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028c8:	e00c      	b.n	80028e4 <main+0xe0>
  	  OL_layer.weights[i] = saved_weights[i];
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	494e      	ldr	r1, [pc, #312]	; (8002a0c <main+0x208>)
 80028d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	440a      	add	r2, r1
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 80028de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e0:	3301      	adds	r3, #1
 80028e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80028ee:	429a      	cmp	r2, r3
 80028f0:	dbeb      	blt.n	80028ca <main+0xc6>
  }
  // Fill up the biases array with the weights from the Keras model
  for(int i=0; i<OL_layer.WIDTH; i++){
 80028f2:	2300      	movs	r3, #0
 80028f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80028f6:	e00c      	b.n	8002912 <main+0x10e>
	  OL_layer.biases[i] = saved_biases[i];
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	4943      	ldr	r1, [pc, #268]	; (8002a10 <main+0x20c>)
 8002902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002904:	0092      	lsls	r2, r2, #2
 8002906:	440a      	add	r2, r1
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH; i++){
 800290c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800290e:	3301      	adds	r3, #1
 8002910:	65bb      	str	r3, [r7, #88]	; 0x58
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002916:	429a      	cmp	r2, r3
 8002918:	dbee      	blt.n	80028f8 <main+0xf4>
  }

  // Fill up weights2 and biases2 only in the case of LWF
  if(OL_layer.ALGORITHM == MODE_LWF || OL_layer.ALGORITHM == MODE_LWF_batch){
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	2b03      	cmp	r3, #3
 800291e:	d002      	beq.n	8002926 <main+0x122>
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	2b06      	cmp	r3, #6
 8002924:	d12a      	bne.n	800297c <main+0x178>
	  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002926:	2300      	movs	r3, #0
 8002928:	657b      	str	r3, [r7, #84]	; 0x54
 800292a:	e00c      	b.n	8002946 <main+0x142>
	  	  OL_layer.weights_2[i] = saved_weights[i];
 800292c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800292e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	4935      	ldr	r1, [pc, #212]	; (8002a0c <main+0x208>)
 8002936:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002938:	0092      	lsls	r2, r2, #2
 800293a:	440a      	add	r2, r1
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	3301      	adds	r3, #1
 8002944:	657b      	str	r3, [r7, #84]	; 0x54
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002950:	429a      	cmp	r2, r3
 8002952:	dbeb      	blt.n	800292c <main+0x128>
	  }
	  for(int i=0; i<OL_layer.WIDTH; i++){
 8002954:	2300      	movs	r3, #0
 8002956:	653b      	str	r3, [r7, #80]	; 0x50
 8002958:	e00c      	b.n	8002974 <main+0x170>
		  OL_layer.biases_2[i] = saved_biases[i];
 800295a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800295c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	492b      	ldr	r1, [pc, #172]	; (8002a10 <main+0x20c>)
 8002964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	440a      	add	r2, r1
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<OL_layer.WIDTH; i++){
 800296e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002970:	3301      	adds	r3, #1
 8002972:	653b      	str	r3, [r7, #80]	; 0x50
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002978:	429a      	cmp	r2, r3
 800297a:	dbee      	blt.n	800295a <main+0x156>
	  }
  }

  HAL_TIM_Base_Start_IT(&htim10);	// Start the timer for counting inference time (1 timer increment = 10 micro sec)
 800297c:	4825      	ldr	r0, [pc, #148]	; (8002a14 <main+0x210>)
 800297e:	f001 fbf0 	bl	8004162 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(OL_layer.counter == 200){
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2bc8      	cmp	r3, #200	; 0xc8
 8002986:	d101      	bne.n	800298c <main+0x188>
		  OL_layer.batch_size = 8;
 8002988:	2308      	movs	r3, #8
 800298a:	713b      	strb	r3, [r7, #4]
	  }

	  // Enable_inference flag is raised at the end of the data communication between pc-STM (see interrupt callbacks at the end of the main)
	  if(enable_inference == 1){
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <main+0x214>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	f040 80c0 	bne.w	8002b16 <main+0x312>

		  // *************************
		  //                   DATA IN
		  // *************************
		  // Reset the info carried from the OL struct
		  OL_resetInfo(&OL_layer);
 8002996:	463b      	mov	r3, r7
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fd21 	bl	80013e0 <OL_resetInfo>

		  // Decode the message received from the UART communication
		  // The message sent from the PC is specifically encoded in a way that allows
		  // to recognize negative values easily -> explained in the readme file
		  uint8_t tmp;
		  for(int k=0; k<600; k++){
 800299e:	2300      	movs	r3, #0
 80029a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a2:	e057      	b.n	8002a54 <main+0x250>
			  tmp = msgRxData[k*2];
 80029a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <main+0x218>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			  if((tmp&128) == 128){
 80029b0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da35      	bge.n	8002a24 <main+0x220>
				  tmp = tmp & 127;
 80029b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80029bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				  in_data[k] = -((tmp << 8) | (msgRxData[(k*2)+1]));
 80029c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029cc:	0052      	lsls	r2, r2, #1
 80029ce:	3201      	adds	r2, #1
 80029d0:	4912      	ldr	r1, [pc, #72]	; (8002a1c <main+0x218>)
 80029d2:	5c8a      	ldrb	r2, [r1, r2]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	425b      	negs	r3, r3
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e0:	4a0f      	ldr	r2, [pc, #60]	; (8002a20 <main+0x21c>)
 80029e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	edc3 7a00 	vstr	s15, [r3]
 80029ec:	e02f      	b.n	8002a4e <main+0x24a>
 80029ee:	bf00      	nop
 80029f0:	3851b717 	.word	0x3851b717
 80029f4:	3a83126f 	.word	0x3a83126f
 80029f8:	38d1b717 	.word	0x38d1b717
 80029fc:	3a6bedfa 	.word	0x3a6bedfa
 8002a00:	3a378034 	.word	0x3a378034
 8002a04:	3a03126f 	.word	0x3a03126f
 8002a08:	05f5e100 	.word	0x05f5e100
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000a00 	.word	0x20000a00
 8002a14:	20002680 	.word	0x20002680
 8002a18:	200010c0 	.word	0x200010c0
 8002a1c:	200015e0 	.word	0x200015e0
 8002a20:	20001b20 	.word	0x20001b20
			  }else{
				  in_data[k] = (msgRxData[(k*2)] << 8) | (msgRxData[(k*2)+1]);
 8002a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4a45      	ldr	r2, [pc, #276]	; (8002b40 <main+0x33c>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a30:	0052      	lsls	r2, r2, #1
 8002a32:	3201      	adds	r2, #1
 8002a34:	4942      	ldr	r1, [pc, #264]	; (8002b40 <main+0x33c>)
 8002a36:	5c8a      	ldrb	r2, [r1, r2]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a42:	4a40      	ldr	r2, [pc, #256]	; (8002b44 <main+0x340>)
 8002a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	edc3 7a00 	vstr	s15, [r3]
		  for(int k=0; k<600; k++){
 8002a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a50:	3301      	adds	r3, #1
 8002a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a56:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002a5a:	dba3      	blt.n	80029a4 <main+0x1a0>


		  // *************************
		  //                 INFERENCE
		  // *************************
		  timer_counter = 0;										// Reset time
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <main+0x344>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

		  ai_run_v2(&in_data, &out_data);							// Perform inference from frozen model
 8002a62:	493a      	ldr	r1, [pc, #232]	; (8002b4c <main+0x348>)
 8002a64:	4837      	ldr	r0, [pc, #220]	; (8002b44 <main+0x340>)
 8002a66:	f002 fd9d 	bl	80055a4 <ai_run_v2>

		  inferenceTime_frozen = timer_counter;						// Measure frozen time
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <main+0x344>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <main+0x34c>)
 8002a70:	6013      	str	r3, [r2, #0]

		  OL_checkNewClass(&OL_layer, letter);						// Check if the letter is known, otherwise increase dimensions of weight and biases
 8002a72:	463b      	mov	r3, r7
 8002a74:	4937      	ldr	r1, [pc, #220]	; (8002b54 <main+0x350>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fe0c 	bl	8001694 <OL_checkNewClass>
		  OL_lettToSoft(&OL_layer, letter);							// Transform the letter char into a hot one encoded softmax array
 8002a7c:	463b      	mov	r3, r7
 8002a7e:	4935      	ldr	r1, [pc, #212]	; (8002b54 <main+0x350>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fcc3 	bl	800140c <OL_lettToSoft>

		  OL_train(&OL_layer, out_data, letter);					// Perform training on last captured sample
 8002a86:	463b      	mov	r3, r7
 8002a88:	4a32      	ldr	r2, [pc, #200]	; (8002b54 <main+0x350>)
 8002a8a:	4930      	ldr	r1, [pc, #192]	; (8002b4c <main+0x348>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe febe 	bl	800180e <OL_train>

		  inferenceTime_OL = timer_counter-inferenceTime_frozen;	// Measure OL time
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <main+0x344>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <main+0x34c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	4a2e      	ldr	r2, [pc, #184]	; (8002b58 <main+0x354>)
 8002a9e:	6013      	str	r3, [r2, #0]

		  // *************************
		  //                  DATA OUT
		  // *************************
		  // Send info data to pc
		  msgInfo[0] = OL_layer.ALGORITHM;									// int
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <main+0x358>)
 8002aa6:	701a      	strb	r2, [r3, #0]
		  msgInfo[1] = OL_layer.counter;									// int
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <main+0x358>)
 8002aae:	705a      	strb	r2, [r3, #1]
		  msgInfo[2] = (uint8_t)(inferenceTime_frozen & LOW_BYTE); 	 		// int - low byte
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <main+0x34c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <main+0x358>)
 8002ab8:	709a      	strb	r2, [r3, #2]
		  msgInfo[3] = (uint8_t)((inferenceTime_frozen>>8) & LOW_BYTE); 	// int - high byte
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <main+0x34c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <main+0x358>)
 8002ac4:	70da      	strb	r2, [r3, #3]
		  msgInfo[4] = (uint8_t)(inferenceTime_OL & LOW_BYTE);				// int - low byte
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <main+0x354>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <main+0x358>)
 8002ace:	711a      	strb	r2, [r3, #4]
		  msgInfo[5] = (uint8_t)((inferenceTime_OL>>8) & LOW_BYTE);			// int - high byte
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <main+0x354>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <main+0x358>)
 8002ada:	715a      	strb	r2, [r3, #5]
		  msgInfo[6] = OL_layer.new_class;									// 0 or 1
 8002adc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <main+0x358>)
 8002ae2:	719a      	strb	r2, [r3, #6]
		  msgInfo[7] = OL_layer.prediction_correct;							// 0, 1, 2
 8002ae4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <main+0x358>)
 8002aea:	71da      	strb	r2, [r3, #7]
		  msgInfo[8] = OL_layer.WIDTH;										// int
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <main+0x358>)
 8002af2:	721a      	strb	r2, [r3, #8]
		  msgInfo[9] = OL_layer.vowel_guess;								// char
 8002af4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <main+0x358>)
 8002afa:	725a      	strb	r2, [r3, #9]

		  HAL_UART_Transmit(&huart2, (uint8_t*)msgInfo, INFO_LEN, 100);		// Send message
 8002afc:	2364      	movs	r3, #100	; 0x64
 8002afe:	220a      	movs	r2, #10
 8002b00:	4916      	ldr	r1, [pc, #88]	; (8002b5c <main+0x358>)
 8002b02:	4817      	ldr	r0, [pc, #92]	; (8002b60 <main+0x35c>)
 8002b04:	f001 fd63 	bl	80045ce <HAL_UART_Transmit>

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// LED toggle
 8002b08:	2120      	movs	r1, #32
 8002b0a:	4816      	ldr	r0, [pc, #88]	; (8002b64 <main+0x360>)
 8002b0c:	f000 fe69 	bl	80037e2 <HAL_GPIO_TogglePin>
		  enable_inference = 0;						// Reset inference flag
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <main+0x364>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(5); 			// Helps the code to not get stuck
 8002b16:	2005      	movs	r0, #5
 8002b18:	f000 fb56 	bl	80031c8 <HAL_Delay>

	  // If the blue button has been pressed and the cycle inference cycle is finished enable again the interrupt for the infinite cycle
	  if(BlueButton == 1 && enable_inference == 0){
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <main+0x368>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f47f af2e 	bne.w	8002982 <main+0x17e>
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <main+0x364>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f47f af29 	bne.w	8002982 <main+0x17e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	// Set high the value for interrupt for infinity cycle
 8002b30:	2201      	movs	r2, #1
 8002b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b36:	480e      	ldr	r0, [pc, #56]	; (8002b70 <main+0x36c>)
 8002b38:	f000 fe3a 	bl	80037b0 <HAL_GPIO_WritePin>
	  if(OL_layer.counter == 200){
 8002b3c:	e721      	b.n	8002982 <main+0x17e>
 8002b3e:	bf00      	nop
 8002b40:	200015e0 	.word	0x200015e0
 8002b44:	20001b20 	.word	0x20001b20
 8002b48:	200010c8 	.word	0x200010c8
 8002b4c:	20002480 	.word	0x20002480
 8002b50:	200010cc 	.word	0x200010cc
 8002b54:	20001b1c 	.word	0x20001b1c
 8002b58:	200010d0 	.word	0x200010d0
 8002b5c:	200015d4 	.word	0x200015d4
 8002b60:	200026c0 	.word	0x200026c0
 8002b64:	40020000 	.word	0x40020000
 8002b68:	200010c0 	.word	0x200010c0
 8002b6c:	200010c4 	.word	0x200010c4
 8002b70:	40020400 	.word	0x40020400

08002b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b094      	sub	sp, #80	; 0x50
 8002b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b7a:	f107 0320 	add.w	r3, r7, #32
 8002b7e:	2230      	movs	r2, #48	; 0x30
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 fb05 	bl	8007192 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <SystemClock_Config+0xd0>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <SystemClock_Config+0xd0>)
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba8:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <SystemClock_Config+0xd0>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <SystemClock_Config+0xd4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bc0:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <SystemClock_Config+0xd4>)
 8002bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <SystemClock_Config+0xd4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bdc:	2310      	movs	r3, #16
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002be0:	2302      	movs	r3, #2
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002be4:	2300      	movs	r3, #0
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002be8:	2310      	movs	r3, #16
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002bec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002bf0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bfa:	f107 0320 	add.w	r3, r7, #32
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fe22 	bl	8003848 <HAL_RCC_OscConfig>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c0a:	f000 f8b7 	bl	8002d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c0e:	230f      	movs	r3, #15
 8002c10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c12:	2302      	movs	r3, #2
 8002c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c24:	f107 030c 	add.w	r3, r7, #12
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 f87c 	bl	8003d28 <HAL_RCC_ClockConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002c36:	f000 f8a1 	bl	8002d7c <Error_Handler>
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3750      	adds	r7, #80	; 0x50
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40007000 	.word	0x40007000

08002c4c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



// INTERRUPTS
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	80fb      	strh	r3, [r7, #6]


	if(BlueButton == 0){ 		// Avoid double clicks
 8002c56:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d12f      	bne.n	8002cbe <HAL_GPIO_EXTI_Callback+0x72>

		// When the blue button is pressed the first time it enables the STM to receive the first input message. Then
		// the STM automatically continues to recive messages from the PC.

		if(GPIO_Pin == B1_Pin){													// If interrupt is blue button
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c64:	d12b      	bne.n	8002cbe <HAL_GPIO_EXTI_Callback+0x72>

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);								// Toggle LED
 8002c66:	2120      	movs	r1, #32
 8002c68:	4831      	ldr	r0, [pc, #196]	; (8002d30 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002c6a:	f000 fdba 	bl	80037e2 <HAL_GPIO_TogglePin>

			BlueButton = 1;														// Raise blue button flag
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]

			msgLen = sprintf(msgDebug, "OK");
 8002c74:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002c76:	4a30      	ldr	r2, [pc, #192]	; (8002d38 <HAL_GPIO_EXTI_Callback+0xec>)
 8002c78:	8811      	ldrh	r1, [r2, #0]
 8002c7a:	7892      	ldrb	r2, [r2, #2]
 8002c7c:	8019      	strh	r1, [r3, #0]
 8002c7e:	709a      	strb	r2, [r3, #2]
 8002c80:	2202      	movs	r2, #2
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8002c84:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc message in order to sync, the pc is waiting a msg long 2
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	2364      	movs	r3, #100	; 0x64
 8002c8e:	4929      	ldr	r1, [pc, #164]	; (8002d34 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002c90:	482b      	ldr	r0, [pc, #172]	; (8002d40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002c92:	f001 fc9c 	bl	80045ce <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive the array data from the pc - array is long 600
 8002c96:	2364      	movs	r3, #100	; 0x64
 8002c98:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002c9c:	4929      	ldr	r1, [pc, #164]	; (8002d44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002c9e:	4828      	ldr	r0, [pc, #160]	; (8002d40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002ca0:	f001 fd2e 	bl	8004700 <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);	// Receive the label char from the pc - label is long 1
 8002ca4:	2364      	movs	r3, #100	; 0x64
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4927      	ldr	r1, [pc, #156]	; (8002d48 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002caa:	4825      	ldr	r0, [pc, #148]	; (8002d40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002cac:	f001 fd28 	bl	8004700 <HAL_UART_Receive>

			letter[0] = msgRxLett[0];											// Store the received message in the label container
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <HAL_GPIO_EXTI_Callback+0x100>)
 8002cb6:	701a      	strb	r2, [r3, #0]

			enable_inference = 1;												// Raise the flag that enables the inference at the next cyle in the while
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_GPIO_EXTI_Callback+0x104>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
	// to have a signal that notices when the STM finishes an inference.This is done by short cuircuiting 2 GPIOs. In
	// this case I use an output GPIO (B10) and an input interrupt GPIO (B5) for doing this. The output is raised high when
	// the inference in the while loop is finished, the other is an interrupt that is triggered when it reads this signal high.
	// Once the interrupt is triggered the code enters here and it syncs with the PC reading the message through he UART

	if(BlueButton == 1){	// If the blue button has been pressed once
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d12d      	bne.n	8002d22 <HAL_GPIO_EXTI_Callback+0xd6>

		if(GPIO_Pin == GPIO_PIN_5){	// If the interrupt is the GPIO pin
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d12a      	bne.n	8002d22 <HAL_GPIO_EXTI_Callback+0xd6>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);				// Set low the GPIO pin that signals the end of a cycle
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cd2:	4820      	ldr	r0, [pc, #128]	; (8002d54 <HAL_GPIO_EXTI_Callback+0x108>)
 8002cd4:	f000 fd6c 	bl	80037b0 <HAL_GPIO_WritePin>

			msgLen = sprintf(msgDebug, "OK");
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <HAL_GPIO_EXTI_Callback+0xec>)
 8002cdc:	8811      	ldrh	r1, [r2, #0]
 8002cde:	7892      	ldrb	r2, [r2, #2]
 8002ce0:	8019      	strh	r1, [r3, #0]
 8002ce2:	709a      	strb	r2, [r3, #2]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8002ce8:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc sync msg, the pc is waiting a msg long 2, no need to be exactly 'OK'
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	2364      	movs	r3, #100	; 0x64
 8002cf2:	4910      	ldr	r1, [pc, #64]	; (8002d34 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002cf4:	4812      	ldr	r0, [pc, #72]	; (8002d40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002cf6:	f001 fc6a 	bl	80045ce <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive the array data from the pc - array is long 600
 8002cfa:	2364      	movs	r3, #100	; 0x64
 8002cfc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002d00:	4910      	ldr	r1, [pc, #64]	; (8002d44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d02:	480f      	ldr	r0, [pc, #60]	; (8002d40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002d04:	f001 fcfc 	bl	8004700 <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);	// Receive the label char from the pc - label is long 1
 8002d08:	2364      	movs	r3, #100	; 0x64
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	490e      	ldr	r1, [pc, #56]	; (8002d48 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d0e:	480c      	ldr	r0, [pc, #48]	; (8002d40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002d10:	f001 fcf6 	bl	8004700 <HAL_UART_Receive>

			letter[0] = msgRxLett[0];											// Store the received message in the label container
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_GPIO_EXTI_Callback+0x100>)
 8002d1a:	701a      	strb	r2, [r3, #0]

			enable_inference = 1;												// Raise the flag that enables the inference at the next cyle in the while
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_GPIO_EXTI_Callback+0x104>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200010c4 	.word	0x200010c4
 8002d30:	40020000 	.word	0x40020000
 8002d34:	20001a90 	.word	0x20001a90
 8002d38:	0800a1e0 	.word	0x0800a1e0
 8002d3c:	20001b10 	.word	0x20001b10
 8002d40:	200026c0 	.word	0x200026c0
 8002d44:	200015e0 	.word	0x200015e0
 8002d48:	200015d0 	.word	0x200015d0
 8002d4c:	20001b1c 	.word	0x20001b1c
 8002d50:	200010c0 	.word	0x200010c0
 8002d54:	40020400 	.word	0x40020400

08002d58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim){
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	timer_counter += 1;	// 10 micro sec has passed
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d68:	6013      	str	r3, [r2, #0]



	// Use this if cycle just for debugging and see how much memory is used after 100 input samples
	//OL_updateFreeRAM();
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	200010c8 	.word	0x200010c8

08002d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d82:	e7fe      	b.n	8002d82 <Error_Handler+0x6>

08002d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d98:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002dc2:	2007      	movs	r0, #7
 8002dc4:	f000 faf2 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <NMI_Handler+0x4>

08002dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <HardFault_Handler+0x4>

08002de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <MemManage_Handler+0x4>

08002de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <BusFault_Handler+0x4>

08002dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <UsageFault_Handler+0x4>

08002df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e20:	f000 f9b2 	bl	8003188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002e2c:	2020      	movs	r0, #32
 8002e2e:	f000 fcf3 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e3e:	f001 f9b4 	bl	80041aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20002680 	.word	0x20002680

08002e4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <USART2_IRQHandler+0x10>)
 8002e52:	f001 fcfb 	bl	800484c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200026c0 	.word	0x200026c0

08002e60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e68:	f000 fcd6 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e78:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <_sbrk+0x5c>)
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <_sbrk+0x60>)
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <_sbrk+0x64>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <_sbrk+0x64>)
 8002e8e:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <_sbrk+0x68>)
 8002e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d207      	bcs.n	8002eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea0:	f004 f932 	bl	8007108 <__errno>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002eae:	e009      	b.n	8002ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <_sbrk+0x64>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <_sbrk+0x64>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <_sbrk+0x64>)
 8002ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20018000 	.word	0x20018000
 8002ed0:	00001000 	.word	0x00001000
 8002ed4:	200010d4 	.word	0x200010d4
 8002ed8:	20002708 	.word	0x20002708

08002edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <SystemInit+0x28>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <SystemInit+0x28>)
 8002ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <SystemInit+0x28>)
 8002ef2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ef6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <MX_TIM10_Init+0x3c>)
 8002f0e:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <MX_TIM10_Init+0x40>)
 8002f10:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21-1;
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <MX_TIM10_Init+0x3c>)
 8002f14:	2214      	movs	r2, #20
 8002f16:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <MX_TIM10_Init+0x3c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 40-1;
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <MX_TIM10_Init+0x3c>)
 8002f20:	2227      	movs	r2, #39	; 0x27
 8002f22:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <MX_TIM10_Init+0x3c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <MX_TIM10_Init+0x3c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002f30:	4804      	ldr	r0, [pc, #16]	; (8002f44 <MX_TIM10_Init+0x3c>)
 8002f32:	f001 f8eb 	bl	800410c <HAL_TIM_Base_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002f3c:	f7ff ff1e 	bl	8002d7c <Error_Handler>
  }

}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20002680 	.word	0x20002680
 8002f48:	40014400 	.word	0x40014400

08002f4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_TIM_Base_MspInit+0x48>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d115      	bne.n	8002f8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_TIM_Base_MspInit+0x4c>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <HAL_TIM_Base_MspInit+0x4c>)
 8002f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_TIM_Base_MspInit+0x4c>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2019      	movs	r0, #25
 8002f80:	f000 fa1f 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f84:	2019      	movs	r0, #25
 8002f86:	f000 fa38 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40014400 	.word	0x40014400
 8002f98:	40023800 	.word	0x40023800

08002f9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <MX_USART2_UART_Init+0x50>)
 8002fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fd2:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fd4:	f001 faae 	bl	8004534 <HAL_UART_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fde:	f7ff fecd 	bl	8002d7c <Error_Handler>
  }

}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200026c0 	.word	0x200026c0
 8002fec:	40004400 	.word	0x40004400

08002ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_UART_MspInit+0x94>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d133      	bne.n	800307a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_UART_MspInit+0x98>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <HAL_UART_MspInit+0x98>)
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_UART_MspInit+0x98>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_UART_MspInit+0x98>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a14      	ldr	r2, [pc, #80]	; (8003088 <HAL_UART_MspInit+0x98>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_UART_MspInit+0x98>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800304a:	230c      	movs	r3, #12
 800304c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304e:	2302      	movs	r3, #2
 8003050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800305a:	2307      	movs	r3, #7
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305e:	f107 0314 	add.w	r3, r7, #20
 8003062:	4619      	mov	r1, r3
 8003064:	4809      	ldr	r0, [pc, #36]	; (800308c <HAL_UART_MspInit+0x9c>)
 8003066:	f000 fa21 	bl	80034ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	2026      	movs	r0, #38	; 0x26
 8003070:	f000 f9a7 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003074:	2026      	movs	r0, #38	; 0x26
 8003076:	f000 f9c0 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800307a:	bf00      	nop
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40004400 	.word	0x40004400
 8003088:	40023800 	.word	0x40023800
 800308c:	40020000 	.word	0x40020000

08003090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003094:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003096:	e003      	b.n	80030a0 <LoopCopyDataInit>

08003098 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800309a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800309c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800309e:	3104      	adds	r1, #4

080030a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030a8:	d3f6      	bcc.n	8003098 <CopyDataInit>
  ldr  r2, =_sbss
 80030aa:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030ac:	e002      	b.n	80030b4 <LoopFillZerobss>

080030ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030b0:	f842 3b04 	str.w	r3, [r2], #4

080030b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030b8:	d3f9      	bcc.n	80030ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ba:	f7ff ff0f 	bl	8002edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030be:	f004 f829 	bl	8007114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030c2:	f7ff fb9f 	bl	8002804 <main>
  bx  lr    
 80030c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030c8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80030cc:	08065b18 	.word	0x08065b18
  ldr  r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030d4:	200010a4 	.word	0x200010a4
  ldr  r2, =_sbss
 80030d8:	200010a4 	.word	0x200010a4
  ldr  r3, = _ebss
 80030dc:	20002708 	.word	0x20002708

080030e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e0:	e7fe      	b.n	80030e0 <ADC_IRQHandler>
	...

080030e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_Init+0x40>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <HAL_Init+0x40>)
 80030ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_Init+0x40>)
 80030fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_Init+0x40>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800310c:	2003      	movs	r0, #3
 800310e:	f000 f94d 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003112:	2000      	movs	r0, #0
 8003114:	f000 f808 	bl	8003128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003118:	f7ff fe34 	bl	8002d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00

08003128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_InitTick+0x54>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_InitTick+0x58>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f965 	bl	8003416 <HAL_SYSTICK_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e00e      	b.n	8003174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b0f      	cmp	r3, #15
 800315a:	d80a      	bhi.n	8003172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800315c:	2200      	movs	r2, #0
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	f000 f92d 	bl	80033c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003168:	4a06      	ldr	r2, [pc, #24]	; (8003184 <HAL_InitTick+0x5c>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000a14 	.word	0x20000a14
 8003180:	20000a1c 	.word	0x20000a1c
 8003184:	20000a18 	.word	0x20000a18

08003188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x20>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_IncTick+0x24>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4413      	add	r3, r2
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_IncTick+0x24>)
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000a1c 	.word	0x20000a1c
 80031ac:	20002700 	.word	0x20002700

080031b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return uwTick;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_GetTick+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20002700 	.word	0x20002700

080031c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff ffee 	bl	80031b0 <HAL_GetTick>
 80031d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d005      	beq.n	80031ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_Delay+0x40>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ee:	bf00      	nop
 80031f0:	f7ff ffde 	bl	80031b0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d8f7      	bhi.n	80031f0 <HAL_Delay+0x28>
  {
  }
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000a1c 	.word	0x20000a1c

0800320c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323e:	4a04      	ldr	r2, [pc, #16]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	60d3      	str	r3, [r2, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <__NVIC_GetPriorityGrouping+0x18>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	f003 0307 	and.w	r3, r3, #7
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db0b      	blt.n	800329a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	4907      	ldr	r1, [pc, #28]	; (80032a8 <__NVIC_EnableIRQ+0x38>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	db0a      	blt.n	80032d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	490c      	ldr	r1, [pc, #48]	; (80032f8 <__NVIC_SetPriority+0x4c>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	440b      	add	r3, r1
 80032d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d4:	e00a      	b.n	80032ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4908      	ldr	r1, [pc, #32]	; (80032fc <__NVIC_SetPriority+0x50>)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3b04      	subs	r3, #4
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	440b      	add	r3, r1
 80032ea:	761a      	strb	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f1c3 0307 	rsb	r3, r3, #7
 800331a:	2b04      	cmp	r3, #4
 800331c:	bf28      	it	cs
 800331e:	2304      	movcs	r3, #4
 8003320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3304      	adds	r3, #4
 8003326:	2b06      	cmp	r3, #6
 8003328:	d902      	bls.n	8003330 <NVIC_EncodePriority+0x30>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3b03      	subs	r3, #3
 800332e:	e000      	b.n	8003332 <NVIC_EncodePriority+0x32>
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	401a      	ands	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003348:	f04f 31ff 	mov.w	r1, #4294967295
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43d9      	mvns	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	4313      	orrs	r3, r2
         );
}
 800335a:	4618      	mov	r0, r3
 800335c:	3724      	adds	r7, #36	; 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003378:	d301      	bcc.n	800337e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337a:	2301      	movs	r3, #1
 800337c:	e00f      	b.n	800339e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <SysTick_Config+0x40>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003386:	210f      	movs	r1, #15
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f7ff ff8e 	bl	80032ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <SysTick_Config+0x40>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <SysTick_Config+0x40>)
 8003398:	2207      	movs	r2, #7
 800339a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff29 	bl	800320c <__NVIC_SetPriorityGrouping>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff ff3e 	bl	8003254 <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ff8e 	bl	8003300 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff5d 	bl	80032ac <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff31 	bl	8003270 <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffa2 	bl	8003368 <SysTick_Config>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e00e      	b.n	800345e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	795b      	ldrb	r3, [r3, #5]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff f911 	bl	8002678 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d004      	beq.n	8003484 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e00c      	b.n	800349e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2205      	movs	r2, #5
 8003488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	; 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e159      	b.n	800377c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034c8:	2201      	movs	r2, #1
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	f040 8148 	bne.w	8003776 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d00b      	beq.n	8003506 <HAL_GPIO_Init+0x5a>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d007      	beq.n	8003506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034fa:	2b11      	cmp	r3, #17
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b12      	cmp	r3, #18
 8003504:	d130      	bne.n	8003568 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	2203      	movs	r2, #3
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800353c:	2201      	movs	r2, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 0201 	and.w	r2, r3, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0xfc>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b12      	cmp	r3, #18
 80035a6:	d123      	bne.n	80035f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	08da      	lsrs	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3208      	adds	r2, #8
 80035b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	220f      	movs	r2, #15
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	08da      	lsrs	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3208      	adds	r2, #8
 80035ea:	69b9      	ldr	r1, [r7, #24]
 80035ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	2203      	movs	r2, #3
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0203 	and.w	r2, r3, #3
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a2 	beq.w	8003776 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	4b56      	ldr	r3, [pc, #344]	; (8003790 <HAL_GPIO_Init+0x2e4>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	4a55      	ldr	r2, [pc, #340]	; (8003790 <HAL_GPIO_Init+0x2e4>)
 800363c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003640:	6453      	str	r3, [r2, #68]	; 0x44
 8003642:	4b53      	ldr	r3, [pc, #332]	; (8003790 <HAL_GPIO_Init+0x2e4>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800364e:	4a51      	ldr	r2, [pc, #324]	; (8003794 <HAL_GPIO_Init+0x2e8>)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	3302      	adds	r3, #2
 8003656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	220f      	movs	r2, #15
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a48      	ldr	r2, [pc, #288]	; (8003798 <HAL_GPIO_Init+0x2ec>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d019      	beq.n	80036ae <HAL_GPIO_Init+0x202>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a47      	ldr	r2, [pc, #284]	; (800379c <HAL_GPIO_Init+0x2f0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_GPIO_Init+0x1fe>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a46      	ldr	r2, [pc, #280]	; (80037a0 <HAL_GPIO_Init+0x2f4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00d      	beq.n	80036a6 <HAL_GPIO_Init+0x1fa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a45      	ldr	r2, [pc, #276]	; (80037a4 <HAL_GPIO_Init+0x2f8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <HAL_GPIO_Init+0x1f6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a44      	ldr	r2, [pc, #272]	; (80037a8 <HAL_GPIO_Init+0x2fc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_GPIO_Init+0x1f2>
 800369a:	2304      	movs	r3, #4
 800369c:	e008      	b.n	80036b0 <HAL_GPIO_Init+0x204>
 800369e:	2307      	movs	r3, #7
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x204>
 80036a2:	2303      	movs	r3, #3
 80036a4:	e004      	b.n	80036b0 <HAL_GPIO_Init+0x204>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_Init+0x204>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x204>
 80036ae:	2300      	movs	r3, #0
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f002 0203 	and.w	r2, r2, #3
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	4093      	lsls	r3, r2
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036c0:	4934      	ldr	r1, [pc, #208]	; (8003794 <HAL_GPIO_Init+0x2e8>)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_GPIO_Init+0x300>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f2:	4a2e      	ldr	r2, [pc, #184]	; (80037ac <HAL_GPIO_Init+0x300>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036f8:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <HAL_GPIO_Init+0x300>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800371c:	4a23      	ldr	r2, [pc, #140]	; (80037ac <HAL_GPIO_Init+0x300>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <HAL_GPIO_Init+0x300>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003746:	4a19      	ldr	r2, [pc, #100]	; (80037ac <HAL_GPIO_Init+0x300>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <HAL_GPIO_Init+0x300>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003770:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <HAL_GPIO_Init+0x300>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3301      	adds	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	f67f aea2 	bls.w	80034c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003784:	bf00      	nop
 8003786:	3724      	adds	r7, #36	; 0x24
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40023800 	.word	0x40023800
 8003794:	40013800 	.word	0x40013800
 8003798:	40020000 	.word	0x40020000
 800379c:	40020400 	.word	0x40020400
 80037a0:	40020800 	.word	0x40020800
 80037a4:	40020c00 	.word	0x40020c00
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40013c00 	.word	0x40013c00

080037b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
 80037bc:	4613      	mov	r3, r2
 80037be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c0:	787b      	ldrb	r3, [r7, #1]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037cc:	e003      	b.n	80037d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ce:	887b      	ldrh	r3, [r7, #2]
 80037d0:	041a      	lsls	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	619a      	str	r2, [r3, #24]
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	401a      	ands	r2, r3
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d104      	bne.n	8003806 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	041a      	lsls	r2, r3, #16
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003804:	e002      	b.n	800380c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	619a      	str	r2, [r3, #24]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fa08 	bl	8002c4c <HAL_GPIO_EXTI_Callback>
  }
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40013c00 	.word	0x40013c00

08003848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e25b      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d075      	beq.n	8003952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003866:	4ba3      	ldr	r3, [pc, #652]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b04      	cmp	r3, #4
 8003870:	d00c      	beq.n	800388c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003872:	4ba0      	ldr	r3, [pc, #640]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800387a:	2b08      	cmp	r3, #8
 800387c:	d112      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387e:	4b9d      	ldr	r3, [pc, #628]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	4b99      	ldr	r3, [pc, #612]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d05b      	beq.n	8003950 <HAL_RCC_OscConfig+0x108>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d157      	bne.n	8003950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e236      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x74>
 80038ae:	4b91      	ldr	r3, [pc, #580]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a90      	ldr	r2, [pc, #576]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e01d      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x98>
 80038c6:	4b8b      	ldr	r3, [pc, #556]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a8a      	ldr	r2, [pc, #552]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a87      	ldr	r2, [pc, #540]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038e0:	4b84      	ldr	r3, [pc, #528]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a83      	ldr	r2, [pc, #524]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7ff fc56 	bl	80031b0 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003908:	f7ff fc52 	bl	80031b0 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1fb      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0xc0>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7ff fc42 	bl	80031b0 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003930:	f7ff fc3e 	bl	80031b0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e1e7      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	4b6c      	ldr	r3, [pc, #432]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0xe8>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d063      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395e:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396a:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003972:	2b08      	cmp	r3, #8
 8003974:	d11c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d116      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003982:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e1bb      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399a:	4b56      	ldr	r3, [pc, #344]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4952      	ldr	r1, [pc, #328]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	e03a      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b8:	4b4f      	ldr	r3, [pc, #316]	; (8003af8 <HAL_RCC_OscConfig+0x2b0>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7ff fbf7 	bl	80031b0 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c6:	f7ff fbf3 	bl	80031b0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e19c      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4940      	ldr	r1, [pc, #256]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
 80039f8:	e015      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b3f      	ldr	r3, [pc, #252]	; (8003af8 <HAL_RCC_OscConfig+0x2b0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7ff fbd6 	bl	80031b0 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a08:	f7ff fbd2 	bl	80031b0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e17b      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d030      	beq.n	8003a94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3a:	4b30      	ldr	r3, [pc, #192]	; (8003afc <HAL_RCC_OscConfig+0x2b4>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7ff fbb6 	bl	80031b0 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a48:	f7ff fbb2 	bl	80031b0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e15b      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x200>
 8003a66:	e015      	b.n	8003a94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a68:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_OscConfig+0x2b4>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7ff fb9f 	bl	80031b0 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a76:	f7ff fb9b 	bl	80031b0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e144      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a0 	beq.w	8003be2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10f      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	4a0e      	ldr	r2, [pc, #56]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_OscConfig+0x2b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d121      	bne.n	8003b22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_RCC_OscConfig+0x2b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <HAL_RCC_OscConfig+0x2b8>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aea:	f7ff fb61 	bl	80031b0 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	e011      	b.n	8003b16 <HAL_RCC_OscConfig+0x2ce>
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	42470000 	.word	0x42470000
 8003afc:	42470e80 	.word	0x42470e80
 8003b00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7ff fb54 	bl	80031b0 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e0fd      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b81      	ldr	r3, [pc, #516]	; (8003d1c <HAL_RCC_OscConfig+0x4d4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2f0>
 8003b2a:	4b7d      	ldr	r3, [pc, #500]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a7c      	ldr	r2, [pc, #496]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
 8003b36:	e01c      	b.n	8003b72 <HAL_RCC_OscConfig+0x32a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d10c      	bne.n	8003b5a <HAL_RCC_OscConfig+0x312>
 8003b40:	4b77      	ldr	r3, [pc, #476]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	4a76      	ldr	r2, [pc, #472]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b46:	f043 0304 	orr.w	r3, r3, #4
 8003b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4c:	4b74      	ldr	r3, [pc, #464]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a73      	ldr	r2, [pc, #460]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
 8003b58:	e00b      	b.n	8003b72 <HAL_RCC_OscConfig+0x32a>
 8003b5a:	4b71      	ldr	r3, [pc, #452]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a70      	ldr	r2, [pc, #448]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	4b6e      	ldr	r3, [pc, #440]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a6d      	ldr	r2, [pc, #436]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d015      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7ff fb19 	bl	80031b0 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7ff fb15 	bl	80031b0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e0bc      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ee      	beq.n	8003b82 <HAL_RCC_OscConfig+0x33a>
 8003ba4:	e014      	b.n	8003bd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7ff fb03 	bl	80031b0 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7ff faff 	bl	80031b0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0a6      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	4b56      	ldr	r3, [pc, #344]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ee      	bne.n	8003bae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd6:	4b52      	ldr	r3, [pc, #328]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a51      	ldr	r2, [pc, #324]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8092 	beq.w	8003d10 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d05c      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d141      	bne.n	8003c84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c00:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <HAL_RCC_OscConfig+0x4dc>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7ff fad3 	bl	80031b0 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7ff facf 	bl	80031b0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e078      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c20:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f0      	bne.n	8003c0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	019b      	lsls	r3, r3, #6
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	3b01      	subs	r3, #1
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	4933      	ldr	r1, [pc, #204]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c56:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <HAL_RCC_OscConfig+0x4dc>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7ff faa8 	bl	80031b0 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c64:	f7ff faa4 	bl	80031b0 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e04d      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x41c>
 8003c82:	e045      	b.n	8003d10 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c84:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <HAL_RCC_OscConfig+0x4dc>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7ff fa91 	bl	80031b0 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c92:	f7ff fa8d 	bl	80031b0 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e036      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x44a>
 8003cb0:	e02e      	b.n	8003d10 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e029      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cbe:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_RCC_OscConfig+0x4d8>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d11c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d115      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d10d      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	40023800 	.word	0x40023800
 8003d24:	42470060 	.word	0x42470060

08003d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0cc      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b68      	ldr	r3, [pc, #416]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d90c      	bls.n	8003d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b65      	ldr	r3, [pc, #404]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0b8      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d020      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d7c:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a58      	ldr	r2, [pc, #352]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a52      	ldr	r2, [pc, #328]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	494d      	ldr	r1, [pc, #308]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d044      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d119      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e07f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de6:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df6:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e067      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f023 0203 	bic.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4934      	ldr	r1, [pc, #208]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e18:	f7ff f9ca 	bl	80031b0 <HAL_GetTick>
 8003e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e20:	f7ff f9c6 	bl	80031b0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e04f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 020c 	and.w	r2, r3, #12
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d1eb      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d20c      	bcs.n	8003e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e032      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4916      	ldr	r1, [pc, #88]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	490e      	ldr	r1, [pc, #56]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eae:	f000 f821 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	5cd3      	ldrb	r3, [r2, r3]
 8003ec2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff f92a 	bl	8003128 <HAL_InitTick>

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023c00 	.word	0x40023c00
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800a3b8 	.word	0x0800a3b8
 8003eec:	20000a14 	.word	0x20000a14
 8003ef0:	20000a18 	.word	0x20000a18

08003ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f0a:	4b63      	ldr	r3, [pc, #396]	; (8004098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d007      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x32>
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d008      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x38>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 80b4 	bne.w	8004088 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f20:	4b5e      	ldr	r3, [pc, #376]	; (800409c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f22:	60bb      	str	r3, [r7, #8]
       break;
 8003f24:	e0b3      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f26:	4b5e      	ldr	r3, [pc, #376]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f28:	60bb      	str	r3, [r7, #8]
      break;
 8003f2a:	e0b0      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f2c:	4b5a      	ldr	r3, [pc, #360]	; (8004098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f36:	4b58      	ldr	r3, [pc, #352]	; (8004098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04a      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b55      	ldr	r3, [pc, #340]	; (8004098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	f04f 0400 	mov.w	r4, #0
 8003f4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	ea03 0501 	and.w	r5, r3, r1
 8003f58:	ea04 0602 	and.w	r6, r4, r2
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	4632      	mov	r2, r6
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	f04f 0400 	mov.w	r4, #0
 8003f68:	0154      	lsls	r4, r2, #5
 8003f6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f6e:	014b      	lsls	r3, r1, #5
 8003f70:	4619      	mov	r1, r3
 8003f72:	4622      	mov	r2, r4
 8003f74:	1b49      	subs	r1, r1, r5
 8003f76:	eb62 0206 	sbc.w	r2, r2, r6
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	f04f 0400 	mov.w	r4, #0
 8003f82:	0194      	lsls	r4, r2, #6
 8003f84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f88:	018b      	lsls	r3, r1, #6
 8003f8a:	1a5b      	subs	r3, r3, r1
 8003f8c:	eb64 0402 	sbc.w	r4, r4, r2
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	00e2      	lsls	r2, r4, #3
 8003f9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f9e:	00d9      	lsls	r1, r3, #3
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4614      	mov	r4, r2
 8003fa4:	195b      	adds	r3, r3, r5
 8003fa6:	eb44 0406 	adc.w	r4, r4, r6
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	0262      	lsls	r2, r4, #9
 8003fb4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003fb8:	0259      	lsls	r1, r3, #9
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f04f 0400 	mov.w	r4, #0
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4623      	mov	r3, r4
 8003fcc:	f7fc fe44 	bl	8000c58 <__aeabi_uldivmod>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e049      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd8:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	f04f 0400 	mov.w	r4, #0
 8003fe2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	ea03 0501 	and.w	r5, r3, r1
 8003fee:	ea04 0602 	and.w	r6, r4, r2
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	4632      	mov	r2, r6
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	f04f 0400 	mov.w	r4, #0
 8003ffe:	0154      	lsls	r4, r2, #5
 8004000:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004004:	014b      	lsls	r3, r1, #5
 8004006:	4619      	mov	r1, r3
 8004008:	4622      	mov	r2, r4
 800400a:	1b49      	subs	r1, r1, r5
 800400c:	eb62 0206 	sbc.w	r2, r2, r6
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	f04f 0400 	mov.w	r4, #0
 8004018:	0194      	lsls	r4, r2, #6
 800401a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800401e:	018b      	lsls	r3, r1, #6
 8004020:	1a5b      	subs	r3, r3, r1
 8004022:	eb64 0402 	sbc.w	r4, r4, r2
 8004026:	f04f 0100 	mov.w	r1, #0
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	00e2      	lsls	r2, r4, #3
 8004030:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004034:	00d9      	lsls	r1, r3, #3
 8004036:	460b      	mov	r3, r1
 8004038:	4614      	mov	r4, r2
 800403a:	195b      	adds	r3, r3, r5
 800403c:	eb44 0406 	adc.w	r4, r4, r6
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	02a2      	lsls	r2, r4, #10
 800404a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800404e:	0299      	lsls	r1, r3, #10
 8004050:	460b      	mov	r3, r1
 8004052:	4614      	mov	r4, r2
 8004054:	4618      	mov	r0, r3
 8004056:	4621      	mov	r1, r4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f04f 0400 	mov.w	r4, #0
 800405e:	461a      	mov	r2, r3
 8004060:	4623      	mov	r3, r4
 8004062:	f7fc fdf9 	bl	8000c58 <__aeabi_uldivmod>
 8004066:	4603      	mov	r3, r0
 8004068:	460c      	mov	r4, r1
 800406a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	3301      	adds	r3, #1
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	60bb      	str	r3, [r7, #8]
      break;
 8004086:	e002      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800408a:	60bb      	str	r3, [r7, #8]
      break;
 800408c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800408e:	68bb      	ldr	r3, [r7, #8]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	00f42400 	.word	0x00f42400
 80040a0:	007a1200 	.word	0x007a1200

080040a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000a14 	.word	0x20000a14

080040bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040c0:	f7ff fff0 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 80040c4:	4601      	mov	r1, r0
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	0a9b      	lsrs	r3, r3, #10
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d2:	5cd3      	ldrb	r3, [r2, r3]
 80040d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40023800 	.word	0x40023800
 80040e0:	0800a3c8 	.word	0x0800a3c8

080040e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040e8:	f7ff ffdc 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 80040ec:	4601      	mov	r1, r0
 80040ee:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	0b5b      	lsrs	r3, r3, #13
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4a03      	ldr	r2, [pc, #12]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040fa:	5cd3      	ldrb	r3, [r2, r3]
 80040fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40023800 	.word	0x40023800
 8004108:	0800a3c8 	.word	0x0800a3c8

0800410c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e01d      	b.n	800415a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fe ff0a 	bl	8002f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f000 f95e 	bl	800440c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d007      	beq.n	800419c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d122      	bne.n	8004206 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d11b      	bne.n	8004206 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f06f 0202 	mvn.w	r2, #2
 80041d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f8ee 	bl	80043ce <HAL_TIM_IC_CaptureCallback>
 80041f2:	e005      	b.n	8004200 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f8e0 	bl	80043ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8f1 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d122      	bne.n	800425a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b04      	cmp	r3, #4
 8004220:	d11b      	bne.n	800425a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0204 	mvn.w	r2, #4
 800422a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8c4 	bl	80043ce <HAL_TIM_IC_CaptureCallback>
 8004246:	e005      	b.n	8004254 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f8b6 	bl	80043ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8c7 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b08      	cmp	r3, #8
 8004266:	d122      	bne.n	80042ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b08      	cmp	r3, #8
 8004274:	d11b      	bne.n	80042ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f06f 0208 	mvn.w	r2, #8
 800427e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2204      	movs	r2, #4
 8004284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f89a 	bl	80043ce <HAL_TIM_IC_CaptureCallback>
 800429a:	e005      	b.n	80042a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f88c 	bl	80043ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f89d 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d122      	bne.n	8004302 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d11b      	bne.n	8004302 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f06f 0210 	mvn.w	r2, #16
 80042d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2208      	movs	r2, #8
 80042d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f870 	bl	80043ce <HAL_TIM_IC_CaptureCallback>
 80042ee:	e005      	b.n	80042fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f862 	bl	80043ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f873 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10e      	bne.n	800432e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d107      	bne.n	800432e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f06f 0201 	mvn.w	r2, #1
 8004326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fe fd15 	bl	8002d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b80      	cmp	r3, #128	; 0x80
 800433a:	d10e      	bne.n	800435a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b80      	cmp	r3, #128	; 0x80
 8004348:	d107      	bne.n	800435a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8e3 	bl	8004520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d10e      	bne.n	8004386 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d107      	bne.n	8004386 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800437e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f838 	bl	80043f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b20      	cmp	r3, #32
 8004392:	d10e      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d107      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f06f 0220 	mvn.w	r2, #32
 80043aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f8ad 	bl	800450c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a34      	ldr	r2, [pc, #208]	; (80044f0 <TIM_Base_SetConfig+0xe4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00f      	beq.n	8004444 <TIM_Base_SetConfig+0x38>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442a:	d00b      	beq.n	8004444 <TIM_Base_SetConfig+0x38>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a31      	ldr	r2, [pc, #196]	; (80044f4 <TIM_Base_SetConfig+0xe8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d007      	beq.n	8004444 <TIM_Base_SetConfig+0x38>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a30      	ldr	r2, [pc, #192]	; (80044f8 <TIM_Base_SetConfig+0xec>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d003      	beq.n	8004444 <TIM_Base_SetConfig+0x38>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a2f      	ldr	r2, [pc, #188]	; (80044fc <TIM_Base_SetConfig+0xf0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d108      	bne.n	8004456 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <TIM_Base_SetConfig+0xe4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01b      	beq.n	8004496 <TIM_Base_SetConfig+0x8a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004464:	d017      	beq.n	8004496 <TIM_Base_SetConfig+0x8a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a22      	ldr	r2, [pc, #136]	; (80044f4 <TIM_Base_SetConfig+0xe8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <TIM_Base_SetConfig+0x8a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a21      	ldr	r2, [pc, #132]	; (80044f8 <TIM_Base_SetConfig+0xec>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00f      	beq.n	8004496 <TIM_Base_SetConfig+0x8a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <TIM_Base_SetConfig+0xf0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00b      	beq.n	8004496 <TIM_Base_SetConfig+0x8a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <TIM_Base_SetConfig+0xf4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d007      	beq.n	8004496 <TIM_Base_SetConfig+0x8a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <TIM_Base_SetConfig+0xf8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <TIM_Base_SetConfig+0x8a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <TIM_Base_SetConfig+0xfc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d108      	bne.n	80044a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <TIM_Base_SetConfig+0xe4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	615a      	str	r2, [r3, #20]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40010000 	.word	0x40010000
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800

0800450c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e03f      	b.n	80045c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fd48 	bl	8002ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fbf1 	bl	8004d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800458c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695a      	ldr	r2, [r3, #20]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800459c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af02      	add	r7, sp, #8
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	f040 8083 	bne.w	80046f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_UART_Transmit+0x2e>
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e07b      	b.n	80046f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_UART_Transmit+0x40>
 800460a:	2302      	movs	r3, #2
 800460c:	e074      	b.n	80046f8 <HAL_UART_Transmit+0x12a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2221      	movs	r2, #33	; 0x21
 8004620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004624:	f7fe fdc4 	bl	80031b0 <HAL_GetTick>
 8004628:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	88fa      	ldrh	r2, [r7, #6]
 800462e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800463e:	e042      	b.n	80046c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d122      	bne.n	800469e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2200      	movs	r2, #0
 8004660:	2180      	movs	r1, #128	; 0x80
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fa10 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e042      	b.n	80046f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004684:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	3302      	adds	r3, #2
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	e017      	b.n	80046c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	3301      	adds	r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	e013      	b.n	80046c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2180      	movs	r1, #128	; 0x80
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f9ed 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e01f      	b.n	80046f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	60ba      	str	r2, [r7, #8]
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1b7      	bne.n	8004640 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2200      	movs	r2, #0
 80046d8:	2140      	movs	r1, #64	; 0x40
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f9d4 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e006      	b.n	80046f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e000      	b.n	80046f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b20      	cmp	r3, #32
 800471e:	f040 8090 	bne.w	8004842 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_UART_Receive+0x2e>
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e088      	b.n	8004844 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_UART_Receive+0x40>
 800473c:	2302      	movs	r3, #2
 800473e:	e081      	b.n	8004844 <HAL_UART_Receive+0x144>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2222      	movs	r2, #34	; 0x22
 8004752:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004756:	f7fe fd2b 	bl	80031b0 <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	88fa      	ldrh	r2, [r7, #6]
 8004766:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004770:	e05c      	b.n	800482c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004788:	d12b      	bne.n	80047e2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2200      	movs	r2, #0
 8004792:	2120      	movs	r1, #32
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f977 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e04f      	b.n	8004844 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10c      	bne.n	80047ca <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047bc:	b29a      	uxth	r2, r3
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	3302      	adds	r3, #2
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	e030      	b.n	800482c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	3301      	adds	r3, #1
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	e024      	b.n	800482c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	2120      	movs	r1, #32
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f94b 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e023      	b.n	8004844 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d108      	bne.n	8004816 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	60ba      	str	r2, [r7, #8]
 8004810:	b2ca      	uxtb	r2, r1
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e00a      	b.n	800482c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	1c59      	adds	r1, r3, #1
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d19d      	bne.n	8004772 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10d      	bne.n	800489e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_UART_IRQHandler+0x52>
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9e0 	bl	8004c5c <UART_Receive_IT>
      return;
 800489c:	e0d1      	b.n	8004a42 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80b0 	beq.w	8004a06 <HAL_UART_IRQHandler+0x1ba>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <HAL_UART_IRQHandler+0x70>
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80a5 	beq.w	8004a06 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_UART_IRQHandler+0x90>
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	f043 0201 	orr.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_UART_IRQHandler+0xb0>
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	f043 0202 	orr.w	r2, r3, #2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_UART_IRQHandler+0xd0>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	f043 0204 	orr.w	r2, r3, #4
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00f      	beq.n	8004946 <HAL_UART_IRQHandler+0xfa>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <HAL_UART_IRQHandler+0xee>
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d078      	beq.n	8004a40 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_UART_IRQHandler+0x11c>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f97a 	bl	8004c5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <HAL_UART_IRQHandler+0x144>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d031      	beq.n	80049f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f8c3 	bl	8004b1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a0:	2b40      	cmp	r3, #64	; 0x40
 80049a2:	d123      	bne.n	80049ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d013      	beq.n	80049e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <HAL_UART_IRQHandler+0x1fc>)
 80049c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe fd4c 	bl	8003466 <HAL_DMA_Abort_IT>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d016      	beq.n	8004a02 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049de:	4610      	mov	r0, r2
 80049e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e2:	e00e      	b.n	8004a02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f845 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ea:	e00a      	b.n	8004a02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f841 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f2:	e006      	b.n	8004a02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f83d 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a00:	e01e      	b.n	8004a40 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a02:	bf00      	nop
    return;
 8004a04:	e01c      	b.n	8004a40 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1d6>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f8b0 	bl	8004b80 <UART_Transmit_IT>
    return;
 8004a20:	e00f      	b.n	8004a42 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_UART_IRQHandler+0x1f6>
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8f8 	bl	8004c2c <UART_EndTransmit_IT>
    return;
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004a40:	bf00      	nop
  }
}
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	08004b59 	.word	0x08004b59

08004a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a98:	e02c      	b.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d028      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004aa8:	f7fe fb82 	bl	80031b0 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d21d      	bcs.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ac6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e00f      	b.n	8004b14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d0c3      	beq.n	8004a9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff ff7e 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b21      	cmp	r3, #33	; 0x21
 8004b92:	d144      	bne.n	8004c1e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d11a      	bne.n	8004bd4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	1c9a      	adds	r2, r3, #2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]
 8004bc6:	e00e      	b.n	8004be6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]
 8004bd2:	e008      	b.n	8004be6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6211      	str	r1, [r2, #32]
 8004bde:	781a      	ldrb	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fefd 	bl	8004a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b22      	cmp	r3, #34	; 0x22
 8004c6e:	d171      	bne.n	8004d54 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c78:	d123      	bne.n	8004cc2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10e      	bne.n	8004ca6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	1c9a      	adds	r2, r3, #2
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ca4:	e029      	b.n	8004cfa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc0:	e01b      	b.n	8004cfa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6858      	ldr	r0, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	1c59      	adds	r1, r3, #1
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6291      	str	r1, [r2, #40]	; 0x28
 8004cda:	b2c2      	uxtb	r2, r0
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e00c      	b.n	8004cfa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	1c58      	adds	r0, r3, #1
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	6288      	str	r0, [r1, #40]	; 0x28
 8004cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4619      	mov	r1, r3
 8004d08:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d120      	bne.n	8004d50 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0220 	bic.w	r2, r2, #32
 8004d1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fe8a 	bl	8004a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e002      	b.n	8004d56 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004da2:	f023 030c 	bic.w	r3, r3, #12
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dce:	f040 818b 	bne.w	80050e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4ac1      	ldr	r2, [pc, #772]	; (80050dc <UART_SetConfig+0x37c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d005      	beq.n	8004de8 <UART_SetConfig+0x88>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4abf      	ldr	r2, [pc, #764]	; (80050e0 <UART_SetConfig+0x380>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	f040 80bd 	bne.w	8004f62 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004de8:	f7ff f97c 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 8004dec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	461d      	mov	r5, r3
 8004df2:	f04f 0600 	mov.w	r6, #0
 8004df6:	46a8      	mov	r8, r5
 8004df8:	46b1      	mov	r9, r6
 8004dfa:	eb18 0308 	adds.w	r3, r8, r8
 8004dfe:	eb49 0409 	adc.w	r4, r9, r9
 8004e02:	4698      	mov	r8, r3
 8004e04:	46a1      	mov	r9, r4
 8004e06:	eb18 0805 	adds.w	r8, r8, r5
 8004e0a:	eb49 0906 	adc.w	r9, r9, r6
 8004e0e:	f04f 0100 	mov.w	r1, #0
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e22:	4688      	mov	r8, r1
 8004e24:	4691      	mov	r9, r2
 8004e26:	eb18 0005 	adds.w	r0, r8, r5
 8004e2a:	eb49 0106 	adc.w	r1, r9, r6
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	461d      	mov	r5, r3
 8004e34:	f04f 0600 	mov.w	r6, #0
 8004e38:	196b      	adds	r3, r5, r5
 8004e3a:	eb46 0406 	adc.w	r4, r6, r6
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4623      	mov	r3, r4
 8004e42:	f7fb ff09 	bl	8000c58 <__aeabi_uldivmod>
 8004e46:	4603      	mov	r3, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4ba5      	ldr	r3, [pc, #660]	; (80050e4 <UART_SetConfig+0x384>)
 8004e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	461d      	mov	r5, r3
 8004e5c:	f04f 0600 	mov.w	r6, #0
 8004e60:	46a9      	mov	r9, r5
 8004e62:	46b2      	mov	sl, r6
 8004e64:	eb19 0309 	adds.w	r3, r9, r9
 8004e68:	eb4a 040a 	adc.w	r4, sl, sl
 8004e6c:	4699      	mov	r9, r3
 8004e6e:	46a2      	mov	sl, r4
 8004e70:	eb19 0905 	adds.w	r9, r9, r5
 8004e74:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e78:	f04f 0100 	mov.w	r1, #0
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e8c:	4689      	mov	r9, r1
 8004e8e:	4692      	mov	sl, r2
 8004e90:	eb19 0005 	adds.w	r0, r9, r5
 8004e94:	eb4a 0106 	adc.w	r1, sl, r6
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	461d      	mov	r5, r3
 8004e9e:	f04f 0600 	mov.w	r6, #0
 8004ea2:	196b      	adds	r3, r5, r5
 8004ea4:	eb46 0406 	adc.w	r4, r6, r6
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	f7fb fed4 	bl	8000c58 <__aeabi_uldivmod>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b8b      	ldr	r3, [pc, #556]	; (80050e4 <UART_SetConfig+0x384>)
 8004eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	2164      	movs	r1, #100	; 0x64
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	3332      	adds	r3, #50	; 0x32
 8004eca:	4a86      	ldr	r2, [pc, #536]	; (80050e4 <UART_SetConfig+0x384>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ed8:	4498      	add	r8, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	461d      	mov	r5, r3
 8004ede:	f04f 0600 	mov.w	r6, #0
 8004ee2:	46a9      	mov	r9, r5
 8004ee4:	46b2      	mov	sl, r6
 8004ee6:	eb19 0309 	adds.w	r3, r9, r9
 8004eea:	eb4a 040a 	adc.w	r4, sl, sl
 8004eee:	4699      	mov	r9, r3
 8004ef0:	46a2      	mov	sl, r4
 8004ef2:	eb19 0905 	adds.w	r9, r9, r5
 8004ef6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f0e:	4689      	mov	r9, r1
 8004f10:	4692      	mov	sl, r2
 8004f12:	eb19 0005 	adds.w	r0, r9, r5
 8004f16:	eb4a 0106 	adc.w	r1, sl, r6
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	461d      	mov	r5, r3
 8004f20:	f04f 0600 	mov.w	r6, #0
 8004f24:	196b      	adds	r3, r5, r5
 8004f26:	eb46 0406 	adc.w	r4, r6, r6
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4623      	mov	r3, r4
 8004f2e:	f7fb fe93 	bl	8000c58 <__aeabi_uldivmod>
 8004f32:	4603      	mov	r3, r0
 8004f34:	460c      	mov	r4, r1
 8004f36:	461a      	mov	r2, r3
 8004f38:	4b6a      	ldr	r3, [pc, #424]	; (80050e4 <UART_SetConfig+0x384>)
 8004f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	2164      	movs	r1, #100	; 0x64
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	3332      	adds	r3, #50	; 0x32
 8004f4c:	4a65      	ldr	r2, [pc, #404]	; (80050e4 <UART_SetConfig+0x384>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	f003 0207 	and.w	r2, r3, #7
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4442      	add	r2, r8
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	e26f      	b.n	8005442 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f62:	f7ff f8ab 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8004f66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	461d      	mov	r5, r3
 8004f6c:	f04f 0600 	mov.w	r6, #0
 8004f70:	46a8      	mov	r8, r5
 8004f72:	46b1      	mov	r9, r6
 8004f74:	eb18 0308 	adds.w	r3, r8, r8
 8004f78:	eb49 0409 	adc.w	r4, r9, r9
 8004f7c:	4698      	mov	r8, r3
 8004f7e:	46a1      	mov	r9, r4
 8004f80:	eb18 0805 	adds.w	r8, r8, r5
 8004f84:	eb49 0906 	adc.w	r9, r9, r6
 8004f88:	f04f 0100 	mov.w	r1, #0
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f9c:	4688      	mov	r8, r1
 8004f9e:	4691      	mov	r9, r2
 8004fa0:	eb18 0005 	adds.w	r0, r8, r5
 8004fa4:	eb49 0106 	adc.w	r1, r9, r6
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	461d      	mov	r5, r3
 8004fae:	f04f 0600 	mov.w	r6, #0
 8004fb2:	196b      	adds	r3, r5, r5
 8004fb4:	eb46 0406 	adc.w	r4, r6, r6
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4623      	mov	r3, r4
 8004fbc:	f7fb fe4c 	bl	8000c58 <__aeabi_uldivmod>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4b47      	ldr	r3, [pc, #284]	; (80050e4 <UART_SetConfig+0x384>)
 8004fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	461d      	mov	r5, r3
 8004fd6:	f04f 0600 	mov.w	r6, #0
 8004fda:	46a9      	mov	r9, r5
 8004fdc:	46b2      	mov	sl, r6
 8004fde:	eb19 0309 	adds.w	r3, r9, r9
 8004fe2:	eb4a 040a 	adc.w	r4, sl, sl
 8004fe6:	4699      	mov	r9, r3
 8004fe8:	46a2      	mov	sl, r4
 8004fea:	eb19 0905 	adds.w	r9, r9, r5
 8004fee:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ff2:	f04f 0100 	mov.w	r1, #0
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005006:	4689      	mov	r9, r1
 8005008:	4692      	mov	sl, r2
 800500a:	eb19 0005 	adds.w	r0, r9, r5
 800500e:	eb4a 0106 	adc.w	r1, sl, r6
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	461d      	mov	r5, r3
 8005018:	f04f 0600 	mov.w	r6, #0
 800501c:	196b      	adds	r3, r5, r5
 800501e:	eb46 0406 	adc.w	r4, r6, r6
 8005022:	461a      	mov	r2, r3
 8005024:	4623      	mov	r3, r4
 8005026:	f7fb fe17 	bl	8000c58 <__aeabi_uldivmod>
 800502a:	4603      	mov	r3, r0
 800502c:	460c      	mov	r4, r1
 800502e:	461a      	mov	r2, r3
 8005030:	4b2c      	ldr	r3, [pc, #176]	; (80050e4 <UART_SetConfig+0x384>)
 8005032:	fba3 1302 	umull	r1, r3, r3, r2
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	2164      	movs	r1, #100	; 0x64
 800503a:	fb01 f303 	mul.w	r3, r1, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	3332      	adds	r3, #50	; 0x32
 8005044:	4a27      	ldr	r2, [pc, #156]	; (80050e4 <UART_SetConfig+0x384>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005052:	4498      	add	r8, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	461d      	mov	r5, r3
 8005058:	f04f 0600 	mov.w	r6, #0
 800505c:	46a9      	mov	r9, r5
 800505e:	46b2      	mov	sl, r6
 8005060:	eb19 0309 	adds.w	r3, r9, r9
 8005064:	eb4a 040a 	adc.w	r4, sl, sl
 8005068:	4699      	mov	r9, r3
 800506a:	46a2      	mov	sl, r4
 800506c:	eb19 0905 	adds.w	r9, r9, r5
 8005070:	eb4a 0a06 	adc.w	sl, sl, r6
 8005074:	f04f 0100 	mov.w	r1, #0
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005080:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005084:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005088:	4689      	mov	r9, r1
 800508a:	4692      	mov	sl, r2
 800508c:	eb19 0005 	adds.w	r0, r9, r5
 8005090:	eb4a 0106 	adc.w	r1, sl, r6
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	461d      	mov	r5, r3
 800509a:	f04f 0600 	mov.w	r6, #0
 800509e:	196b      	adds	r3, r5, r5
 80050a0:	eb46 0406 	adc.w	r4, r6, r6
 80050a4:	461a      	mov	r2, r3
 80050a6:	4623      	mov	r3, r4
 80050a8:	f7fb fdd6 	bl	8000c58 <__aeabi_uldivmod>
 80050ac:	4603      	mov	r3, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <UART_SetConfig+0x384>)
 80050b4:	fba3 1302 	umull	r1, r3, r3, r2
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	2164      	movs	r1, #100	; 0x64
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	3332      	adds	r3, #50	; 0x32
 80050c6:	4a07      	ldr	r2, [pc, #28]	; (80050e4 <UART_SetConfig+0x384>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	f003 0207 	and.w	r2, r3, #7
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4442      	add	r2, r8
 80050d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80050da:	e1b2      	b.n	8005442 <UART_SetConfig+0x6e2>
 80050dc:	40011000 	.word	0x40011000
 80050e0:	40011400 	.word	0x40011400
 80050e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4ad7      	ldr	r2, [pc, #860]	; (800544c <UART_SetConfig+0x6ec>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d005      	beq.n	80050fe <UART_SetConfig+0x39e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4ad6      	ldr	r2, [pc, #856]	; (8005450 <UART_SetConfig+0x6f0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	f040 80d1 	bne.w	80052a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80050fe:	f7fe fff1 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 8005102:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	469a      	mov	sl, r3
 8005108:	f04f 0b00 	mov.w	fp, #0
 800510c:	46d0      	mov	r8, sl
 800510e:	46d9      	mov	r9, fp
 8005110:	eb18 0308 	adds.w	r3, r8, r8
 8005114:	eb49 0409 	adc.w	r4, r9, r9
 8005118:	4698      	mov	r8, r3
 800511a:	46a1      	mov	r9, r4
 800511c:	eb18 080a 	adds.w	r8, r8, sl
 8005120:	eb49 090b 	adc.w	r9, r9, fp
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005130:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005134:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005138:	4688      	mov	r8, r1
 800513a:	4691      	mov	r9, r2
 800513c:	eb1a 0508 	adds.w	r5, sl, r8
 8005140:	eb4b 0609 	adc.w	r6, fp, r9
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4619      	mov	r1, r3
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	f04f 0400 	mov.w	r4, #0
 8005156:	0094      	lsls	r4, r2, #2
 8005158:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800515c:	008b      	lsls	r3, r1, #2
 800515e:	461a      	mov	r2, r3
 8005160:	4623      	mov	r3, r4
 8005162:	4628      	mov	r0, r5
 8005164:	4631      	mov	r1, r6
 8005166:	f7fb fd77 	bl	8000c58 <__aeabi_uldivmod>
 800516a:	4603      	mov	r3, r0
 800516c:	460c      	mov	r4, r1
 800516e:	461a      	mov	r2, r3
 8005170:	4bb8      	ldr	r3, [pc, #736]	; (8005454 <UART_SetConfig+0x6f4>)
 8005172:	fba3 2302 	umull	r2, r3, r3, r2
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	469b      	mov	fp, r3
 8005180:	f04f 0c00 	mov.w	ip, #0
 8005184:	46d9      	mov	r9, fp
 8005186:	46e2      	mov	sl, ip
 8005188:	eb19 0309 	adds.w	r3, r9, r9
 800518c:	eb4a 040a 	adc.w	r4, sl, sl
 8005190:	4699      	mov	r9, r3
 8005192:	46a2      	mov	sl, r4
 8005194:	eb19 090b 	adds.w	r9, r9, fp
 8005198:	eb4a 0a0c 	adc.w	sl, sl, ip
 800519c:	f04f 0100 	mov.w	r1, #0
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051b0:	4689      	mov	r9, r1
 80051b2:	4692      	mov	sl, r2
 80051b4:	eb1b 0509 	adds.w	r5, fp, r9
 80051b8:	eb4c 060a 	adc.w	r6, ip, sl
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4619      	mov	r1, r3
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	0094      	lsls	r4, r2, #2
 80051d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051d4:	008b      	lsls	r3, r1, #2
 80051d6:	461a      	mov	r2, r3
 80051d8:	4623      	mov	r3, r4
 80051da:	4628      	mov	r0, r5
 80051dc:	4631      	mov	r1, r6
 80051de:	f7fb fd3b 	bl	8000c58 <__aeabi_uldivmod>
 80051e2:	4603      	mov	r3, r0
 80051e4:	460c      	mov	r4, r1
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b9a      	ldr	r3, [pc, #616]	; (8005454 <UART_SetConfig+0x6f4>)
 80051ea:	fba3 1302 	umull	r1, r3, r3, r2
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	2164      	movs	r1, #100	; 0x64
 80051f2:	fb01 f303 	mul.w	r3, r1, r3
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	3332      	adds	r3, #50	; 0x32
 80051fc:	4a95      	ldr	r2, [pc, #596]	; (8005454 <UART_SetConfig+0x6f4>)
 80051fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005208:	4498      	add	r8, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	469b      	mov	fp, r3
 800520e:	f04f 0c00 	mov.w	ip, #0
 8005212:	46d9      	mov	r9, fp
 8005214:	46e2      	mov	sl, ip
 8005216:	eb19 0309 	adds.w	r3, r9, r9
 800521a:	eb4a 040a 	adc.w	r4, sl, sl
 800521e:	4699      	mov	r9, r3
 8005220:	46a2      	mov	sl, r4
 8005222:	eb19 090b 	adds.w	r9, r9, fp
 8005226:	eb4a 0a0c 	adc.w	sl, sl, ip
 800522a:	f04f 0100 	mov.w	r1, #0
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005236:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800523a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800523e:	4689      	mov	r9, r1
 8005240:	4692      	mov	sl, r2
 8005242:	eb1b 0509 	adds.w	r5, fp, r9
 8005246:	eb4c 060a 	adc.w	r6, ip, sl
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4619      	mov	r1, r3
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	0094      	lsls	r4, r2, #2
 800525e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005262:	008b      	lsls	r3, r1, #2
 8005264:	461a      	mov	r2, r3
 8005266:	4623      	mov	r3, r4
 8005268:	4628      	mov	r0, r5
 800526a:	4631      	mov	r1, r6
 800526c:	f7fb fcf4 	bl	8000c58 <__aeabi_uldivmod>
 8005270:	4603      	mov	r3, r0
 8005272:	460c      	mov	r4, r1
 8005274:	461a      	mov	r2, r3
 8005276:	4b77      	ldr	r3, [pc, #476]	; (8005454 <UART_SetConfig+0x6f4>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	; 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a72      	ldr	r2, [pc, #456]	; (8005454 <UART_SetConfig+0x6f4>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4442      	add	r2, r8
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	e0d0      	b.n	8005442 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80052a0:	f7fe ff0c 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 80052a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	469a      	mov	sl, r3
 80052aa:	f04f 0b00 	mov.w	fp, #0
 80052ae:	46d0      	mov	r8, sl
 80052b0:	46d9      	mov	r9, fp
 80052b2:	eb18 0308 	adds.w	r3, r8, r8
 80052b6:	eb49 0409 	adc.w	r4, r9, r9
 80052ba:	4698      	mov	r8, r3
 80052bc:	46a1      	mov	r9, r4
 80052be:	eb18 080a 	adds.w	r8, r8, sl
 80052c2:	eb49 090b 	adc.w	r9, r9, fp
 80052c6:	f04f 0100 	mov.w	r1, #0
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052da:	4688      	mov	r8, r1
 80052dc:	4691      	mov	r9, r2
 80052de:	eb1a 0508 	adds.w	r5, sl, r8
 80052e2:	eb4b 0609 	adc.w	r6, fp, r9
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4619      	mov	r1, r3
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	f04f 0400 	mov.w	r4, #0
 80052f8:	0094      	lsls	r4, r2, #2
 80052fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052fe:	008b      	lsls	r3, r1, #2
 8005300:	461a      	mov	r2, r3
 8005302:	4623      	mov	r3, r4
 8005304:	4628      	mov	r0, r5
 8005306:	4631      	mov	r1, r6
 8005308:	f7fb fca6 	bl	8000c58 <__aeabi_uldivmod>
 800530c:	4603      	mov	r3, r0
 800530e:	460c      	mov	r4, r1
 8005310:	461a      	mov	r2, r3
 8005312:	4b50      	ldr	r3, [pc, #320]	; (8005454 <UART_SetConfig+0x6f4>)
 8005314:	fba3 2302 	umull	r2, r3, r3, r2
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	469b      	mov	fp, r3
 8005322:	f04f 0c00 	mov.w	ip, #0
 8005326:	46d9      	mov	r9, fp
 8005328:	46e2      	mov	sl, ip
 800532a:	eb19 0309 	adds.w	r3, r9, r9
 800532e:	eb4a 040a 	adc.w	r4, sl, sl
 8005332:	4699      	mov	r9, r3
 8005334:	46a2      	mov	sl, r4
 8005336:	eb19 090b 	adds.w	r9, r9, fp
 800533a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800533e:	f04f 0100 	mov.w	r1, #0
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800534a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800534e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005352:	4689      	mov	r9, r1
 8005354:	4692      	mov	sl, r2
 8005356:	eb1b 0509 	adds.w	r5, fp, r9
 800535a:	eb4c 060a 	adc.w	r6, ip, sl
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	4619      	mov	r1, r3
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	f04f 0400 	mov.w	r4, #0
 8005370:	0094      	lsls	r4, r2, #2
 8005372:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005376:	008b      	lsls	r3, r1, #2
 8005378:	461a      	mov	r2, r3
 800537a:	4623      	mov	r3, r4
 800537c:	4628      	mov	r0, r5
 800537e:	4631      	mov	r1, r6
 8005380:	f7fb fc6a 	bl	8000c58 <__aeabi_uldivmod>
 8005384:	4603      	mov	r3, r0
 8005386:	460c      	mov	r4, r1
 8005388:	461a      	mov	r2, r3
 800538a:	4b32      	ldr	r3, [pc, #200]	; (8005454 <UART_SetConfig+0x6f4>)
 800538c:	fba3 1302 	umull	r1, r3, r3, r2
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	2164      	movs	r1, #100	; 0x64
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	3332      	adds	r3, #50	; 0x32
 800539e:	4a2d      	ldr	r2, [pc, #180]	; (8005454 <UART_SetConfig+0x6f4>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053aa:	4498      	add	r8, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	469b      	mov	fp, r3
 80053b0:	f04f 0c00 	mov.w	ip, #0
 80053b4:	46d9      	mov	r9, fp
 80053b6:	46e2      	mov	sl, ip
 80053b8:	eb19 0309 	adds.w	r3, r9, r9
 80053bc:	eb4a 040a 	adc.w	r4, sl, sl
 80053c0:	4699      	mov	r9, r3
 80053c2:	46a2      	mov	sl, r4
 80053c4:	eb19 090b 	adds.w	r9, r9, fp
 80053c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053cc:	f04f 0100 	mov.w	r1, #0
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053e0:	4689      	mov	r9, r1
 80053e2:	4692      	mov	sl, r2
 80053e4:	eb1b 0509 	adds.w	r5, fp, r9
 80053e8:	eb4c 060a 	adc.w	r6, ip, sl
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4619      	mov	r1, r3
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	f04f 0400 	mov.w	r4, #0
 80053fe:	0094      	lsls	r4, r2, #2
 8005400:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005404:	008b      	lsls	r3, r1, #2
 8005406:	461a      	mov	r2, r3
 8005408:	4623      	mov	r3, r4
 800540a:	4628      	mov	r0, r5
 800540c:	4631      	mov	r1, r6
 800540e:	f7fb fc23 	bl	8000c58 <__aeabi_uldivmod>
 8005412:	4603      	mov	r3, r0
 8005414:	460c      	mov	r4, r1
 8005416:	461a      	mov	r2, r3
 8005418:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <UART_SetConfig+0x6f4>)
 800541a:	fba3 1302 	umull	r1, r3, r3, r2
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2164      	movs	r1, #100	; 0x64
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	3332      	adds	r3, #50	; 0x32
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <UART_SetConfig+0x6f4>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4442      	add	r2, r8
 800543e:	609a      	str	r2, [r3, #8]
}
 8005440:	e7ff      	b.n	8005442 <UART_SetConfig+0x6e2>
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544c:	40011000 	.word	0x40011000
 8005450:	40011400 	.word	0x40011400
 8005454:	51eb851f 	.word	0x51eb851f

08005458 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8005468:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800546a:	461a      	mov	r2, r3
        err.type, err.code);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005472:	6839      	ldr	r1, [r7, #0]
 8005474:	4806      	ldr	r0, [pc, #24]	; (8005490 <ai_log_err+0x38>)
 8005476:	f002 fba7 	bl	8007bc8 <iprintf>
 800547a:	e008      	b.n	800548e <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800547c:	793b      	ldrb	r3, [r7, #4]
 800547e:	4619      	mov	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005486:	461a      	mov	r2, r3
 8005488:	4802      	ldr	r0, [pc, #8]	; (8005494 <ai_log_err+0x3c>)
 800548a:	f002 fb9d 	bl	8007bc8 <iprintf>

  do {} while (1);
 800548e:	e7fe      	b.n	800548e <ai_log_err+0x36>
 8005490:	0800a1e4 	.word	0x0800a1e4
 8005494:	0800a218 	.word	0x0800a218

08005498 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b090      	sub	sp, #64	; 0x40
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80054a2:	2100      	movs	r1, #0
 80054a4:	4837      	ldr	r0, [pc, #220]	; (8005584 <ai_boostrap+0xec>)
 80054a6:	f000 f9d1 	bl	800584c <ai_network_create>
 80054aa:	4603      	mov	r3, r0
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 80054ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 80054b6:	4934      	ldr	r1, [pc, #208]	; (8005588 <ai_boostrap+0xf0>)
 80054b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80054ba:	f7ff ffcd 	bl	8005458 <ai_log_err>
    return -1;
 80054be:	f04f 33ff 	mov.w	r3, #4294967295
 80054c2:	e05b      	b.n	800557c <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 80054c4:	4b31      	ldr	r3, [pc, #196]	; (800558c <ai_boostrap+0xf4>)
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	2301      	movs	r3, #1
 80054ca:	823b      	strh	r3, [r7, #16]
 80054cc:	2301      	movs	r3, #1
 80054ce:	827b      	strh	r3, [r7, #18]
 80054d0:	2301      	movs	r3, #1
 80054d2:	82bb      	strh	r3, [r7, #20]
 80054d4:	4b2e      	ldr	r3, [pc, #184]	; (8005590 <ai_boostrap+0xf8>)
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	2300      	movs	r3, #0
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	4b2c      	ldr	r3, [pc, #176]	; (8005594 <ai_boostrap+0xfc>)
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
 80054e4:	2301      	movs	r3, #1
 80054e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80054e8:	2301      	movs	r3, #1
 80054ea:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054ec:	2301      	movs	r3, #1
 80054ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80054f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f4:	633b      	str	r3, [r7, #48]	; 0x30
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
 80054fa:	2300      	movs	r3, #0
 80054fc:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 80054fe:	4b21      	ldr	r3, [pc, #132]	; (8005584 <ai_boostrap+0xec>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f107 020c 	add.w	r2, r7, #12
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f000 f9c1 	bl	8005890 <ai_network_init>
 800550e:	4603      	mov	r3, r0
 8005510:	f083 0301 	eor.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00d      	beq.n	8005536 <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 800551a:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <ai_boostrap+0xec>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f988 	bl	8005834 <ai_network_get_error>
 8005524:	4603      	mov	r3, r0
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 8005528:	491b      	ldr	r1, [pc, #108]	; (8005598 <ai_boostrap+0x100>)
 800552a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800552c:	f7ff ff94 	bl	8005458 <ai_log_err>
      return -1;
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	e022      	b.n	800557c <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8005536:	4b13      	ldr	r3, [pc, #76]	; (8005584 <ai_boostrap+0xec>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4918      	ldr	r1, [pc, #96]	; (800559c <ai_boostrap+0x104>)
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f91b 	bl	8005778 <ai_network_get_info>
 8005542:	4603      	mov	r3, r0
 8005544:	f083 0301 	eor.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d015      	beq.n	800557a <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 800554e:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <ai_boostrap+0xec>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f96e 	bl	8005834 <ai_network_get_error>
 8005558:	4603      	mov	r3, r0
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 800555c:	4910      	ldr	r1, [pc, #64]	; (80055a0 <ai_boostrap+0x108>)
 800555e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005560:	f7ff ff7a 	bl	8005458 <ai_log_err>
    ai_network_destroy(network);
 8005564:	4b07      	ldr	r3, [pc, #28]	; (8005584 <ai_boostrap+0xec>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 f985 	bl	8005878 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <ai_boostrap+0xec>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
    return -3;
 8005574:	f06f 0302 	mvn.w	r3, #2
 8005578:	e000      	b.n	800557c <ai_boostrap+0xe4>
  }

  return 0;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3740      	adds	r7, #64	; 0x40
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	200010d8 	.word	0x200010d8
 8005588:	0800a248 	.word	0x0800a248
 800558c:	40040440 	.word	0x40040440
 8005590:	0005b400 	.word	0x0005b400
 8005594:	00040440 	.word	0x00040440
 8005598:	0800a25c 	.word	0x0800a25c
 800559c:	200010dc 	.word	0x200010dc
 80055a0:	0800a26c 	.word	0x0800a26c

080055a4 <ai_run_v2>:

  return 0;
}

/* USER CODE BEGIN 2 */
int ai_run_v2(void *in_data, void *out_data){
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
	ai_i32 nbatch;
	ai_error err;

	/* Parameters checking */
	if (!in_data || !out_data || !network)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d006      	beq.n	80055c2 <ai_run_v2+0x1e>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <ai_run_v2+0x1e>
 80055ba:	4b17      	ldr	r3, [pc, #92]	; (8005618 <ai_run_v2+0x74>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <ai_run_v2+0x24>
		return -1;
 80055c2:	f04f 33ff 	mov.w	r3, #4294967295
 80055c6:	e022      	b.n	800560e <ai_run_v2+0x6a>

	ai_buffer *ai_input = network_info.inputs;
 80055c8:	4b14      	ldr	r3, [pc, #80]	; (800561c <ai_run_v2+0x78>)
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	617b      	str	r3, [r7, #20]
	ai_buffer *ai_output = network_info.outputs;
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <ai_run_v2+0x78>)
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	613b      	str	r3, [r7, #16]

	/* Initialize input/output buffer handlers */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	611a      	str	r2, [r3, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	611a      	str	r2, [r3, #16]

	/* 2 - Perform the inference */
	nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80055e0:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <ai_run_v2+0x74>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	6979      	ldr	r1, [r7, #20]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 f990 	bl	800590e <ai_network_run>
 80055ee:	60f8      	str	r0, [r7, #12]
	if (nbatch != 1) {
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d00a      	beq.n	800560c <ai_run_v2+0x68>
		err = ai_network_get_error(network);
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <ai_run_v2+0x74>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f91a 	bl	8005834 <ai_network_get_error>
 8005600:	4603      	mov	r3, r0
 8005602:	60bb      	str	r3, [r7, #8]
		// ...
		return err.code;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800560a:	e000      	b.n	800560e <ai_run_v2+0x6a>
	}


  return 0;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	200010d8 	.word	0x200010d8
 800561c:	200010dc 	.word	0x200010dc

08005620 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005624:	4805      	ldr	r0, [pc, #20]	; (800563c <MX_X_CUBE_AI_Init+0x1c>)
 8005626:	f002 fb43 	bl	8007cb0 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 800562a:	f000 f981 	bl	8005930 <ai_network_data_weights_get>
 800562e:	4603      	mov	r3, r0
 8005630:	4903      	ldr	r1, [pc, #12]	; (8005640 <MX_X_CUBE_AI_Init+0x20>)
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff30 	bl	8005498 <ai_boostrap>
    /* USER CODE END 5 */
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}
 800563c:	0800a294 	.word	0x0800a294
 8005640:	20001150 	.word	0x20001150

08005644 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	3303      	adds	r3, #3
 8005654:	f023 0303 	bic.w	r3, r3, #3
 8005658:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <network_configure_activations+0x68>)
 800565c:	2200      	movs	r2, #0
 800565e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8005660:	4b12      	ldr	r3, [pc, #72]	; (80056ac <network_configure_activations+0x68>)
 8005662:	2200      	movs	r2, #0
 8005664:	60da      	str	r2, [r3, #12]
    input_layer_output_array.data = AI_PTR(activations + 0);
 8005666:	4a12      	ldr	r2, [pc, #72]	; (80056b0 <network_configure_activations+0x6c>)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6093      	str	r3, [r2, #8]
    input_layer_output_array.data_start = AI_PTR(activations + 0);
 800566c:	4a10      	ldr	r2, [pc, #64]	; (80056b0 <network_configure_activations+0x6c>)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	60d3      	str	r3, [r2, #12]
    input_layer_nl_output_array.data = AI_PTR(activations + 0);
 8005672:	4a10      	ldr	r2, [pc, #64]	; (80056b4 <network_configure_activations+0x70>)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6093      	str	r3, [r2, #8]
    input_layer_nl_output_array.data_start = AI_PTR(activations + 0);
 8005678:	4a0e      	ldr	r2, [pc, #56]	; (80056b4 <network_configure_activations+0x70>)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	60d3      	str	r3, [r2, #12]
    hidden1_output_array.data = AI_PTR(activations + 512);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005684:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <network_configure_activations+0x74>)
 8005686:	6093      	str	r3, [r2, #8]
    hidden1_output_array.data_start = AI_PTR(activations + 512);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800568e:	4a0a      	ldr	r2, [pc, #40]	; (80056b8 <network_configure_activations+0x74>)
 8005690:	60d3      	str	r3, [r2, #12]
    hidden1_nl_output_array.data = AI_PTR(NULL);
 8005692:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <network_configure_activations+0x78>)
 8005694:	2200      	movs	r2, #0
 8005696:	609a      	str	r2, [r3, #8]
    hidden1_nl_output_array.data_start = AI_PTR(NULL);
 8005698:	4b08      	ldr	r3, [pc, #32]	; (80056bc <network_configure_activations+0x78>)
 800569a:	2200      	movs	r2, #0
 800569c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800569e:	2301      	movs	r3, #1
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000a84 	.word	0x20000a84
 80056b0:	20000a94 	.word	0x20000a94
 80056b4:	20000aa4 	.word	0x20000aa4
 80056b8:	20000ab4 	.word	0x20000ab4
 80056bc:	20000ac4 	.word	0x20000ac4

080056c0 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    input_layer_weights_array.format |= AI_FMT_FLAG_CONST;
 80056d0:	4b25      	ldr	r3, [pc, #148]	; (8005768 <network_configure_weights+0xa8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d8:	4a23      	ldr	r2, [pc, #140]	; (8005768 <network_configure_weights+0xa8>)
 80056da:	6013      	str	r3, [r2, #0]
    input_layer_weights_array.data = AI_PTR(weights + 0);
 80056dc:	4a22      	ldr	r2, [pc, #136]	; (8005768 <network_configure_weights+0xa8>)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6093      	str	r3, [r2, #8]
    input_layer_weights_array.data_start = AI_PTR(weights + 0);
 80056e2:	4a21      	ldr	r2, [pc, #132]	; (8005768 <network_configure_weights+0xa8>)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	60d3      	str	r3, [r2, #12]
    input_layer_bias_array.format |= AI_FMT_FLAG_CONST;
 80056e8:	4b20      	ldr	r3, [pc, #128]	; (800576c <network_configure_weights+0xac>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f0:	4a1e      	ldr	r2, [pc, #120]	; (800576c <network_configure_weights+0xac>)
 80056f2:	6013      	str	r3, [r2, #0]
    input_layer_bias_array.data = AI_PTR(weights + 307200);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80056fa:	4a1c      	ldr	r2, [pc, #112]	; (800576c <network_configure_weights+0xac>)
 80056fc:	6093      	str	r3, [r2, #8]
    input_layer_bias_array.data_start = AI_PTR(weights + 307200);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <network_configure_weights+0xac>)
 8005706:	60d3      	str	r3, [r2, #12]
    hidden1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <network_configure_weights+0xb0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005710:	4a17      	ldr	r2, [pc, #92]	; (8005770 <network_configure_weights+0xb0>)
 8005712:	6013      	str	r3, [r2, #0]
    hidden1_weights_array.data = AI_PTR(weights + 307712);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 800571a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800571e:	4a14      	ldr	r2, [pc, #80]	; (8005770 <network_configure_weights+0xb0>)
 8005720:	6093      	str	r3, [r2, #8]
    hidden1_weights_array.data_start = AI_PTR(weights + 307712);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8005728:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800572c:	4a10      	ldr	r2, [pc, #64]	; (8005770 <network_configure_weights+0xb0>)
 800572e:	60d3      	str	r3, [r2, #12]
    hidden1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005730:	4b10      	ldr	r3, [pc, #64]	; (8005774 <network_configure_weights+0xb4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005738:	4a0e      	ldr	r2, [pc, #56]	; (8005774 <network_configure_weights+0xb4>)
 800573a:	6013      	str	r3, [r2, #0]
    hidden1_bias_array.data = AI_PTR(weights + 373248);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 8005742:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005746:	4a0b      	ldr	r2, [pc, #44]	; (8005774 <network_configure_weights+0xb4>)
 8005748:	6093      	str	r3, [r2, #8]
    hidden1_bias_array.data_start = AI_PTR(weights + 373248);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 8005750:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005754:	4a07      	ldr	r2, [pc, #28]	; (8005774 <network_configure_weights+0xb4>)
 8005756:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8005758:	2301      	movs	r3, #1
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	20000ad4 	.word	0x20000ad4
 800576c:	20000ae4 	.word	0x20000ae4
 8005770:	20000af4 	.word	0x20000af4
 8005774:	20000b04 	.word	0x20000b04

08005778 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b0a0      	sub	sp, #128	; 0x80
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f9f8 	bl	8005b78 <ai_platform_context_acquire>
 8005788:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d041      	beq.n	8005814 <ai_network_get_info+0x9c>
 8005790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d03e      	beq.n	8005814 <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 8005796:	f107 0308 	add.w	r3, r7, #8
 800579a:	2274      	movs	r2, #116	; 0x74
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fcf7 	bl	8007192 <memset>
 80057a4:	4b1e      	ldr	r3, [pc, #120]	; (8005820 <ai_network_get_info+0xa8>)
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <ai_network_get_info+0xac>)
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	4b1e      	ldr	r3, [pc, #120]	; (8005828 <ai_network_get_info+0xb0>)
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	4b1e      	ldr	r3, [pc, #120]	; (800582c <ai_network_get_info+0xb4>)
 80057b2:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80057b4:	f000 f934 	bl	8005a20 <ai_platform_runtime_get_revision>
 80057b8:	4603      	mov	r3, r0
    ai_network_report r = {
 80057ba:	61bb      	str	r3, [r7, #24]
 80057bc:	f000 f952 	bl	8005a64 <ai_platform_runtime_get_version>
 80057c0:	4603      	mov	r3, r0
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <ai_network_get_info+0xb8>)
 80057c6:	623b      	str	r3, [r7, #32]
 80057c8:	2306      	movs	r3, #6
 80057ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80057ce:	f000 f96b 	bl	8005aa8 <ai_platform_api_get_version>
 80057d2:	4603      	mov	r3, r0
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d6:	f000 f99b 	bl	8005b10 <ai_platform_interface_api_get_version>
 80057da:	4603      	mov	r3, r0
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
 80057de:	f44f 33b7 	mov.w	r3, #93696	; 0x16e00
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80057e4:	f107 0308 	add.w	r3, r7, #8
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa20 	bl	8005c30 <ai_platform_api_get_network_report>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f083 0301 	eor.w	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <ai_network_get_info+0x88>
 80057fc:	2300      	movs	r3, #0
 80057fe:	e00a      	b.n	8005816 <ai_network_get_info+0x9e>

    *report = r;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f107 0308 	add.w	r3, r7, #8
 8005808:	2274      	movs	r2, #116	; 0x74
 800580a:	4619      	mov	r1, r3
 800580c:	f001 fcb6 	bl	800717c <memcpy>
    return true;
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <ai_network_get_info+0x9e>
  }

  return false;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3780      	adds	r7, #128	; 0x80
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	0800a350 	.word	0x0800a350
 8005824:	0800a358 	.word	0x0800a358
 8005828:	0800a37c 	.word	0x0800a37c
 800582c:	0800a398 	.word	0x0800a398
 8005830:	0800a3b0 	.word	0x0800a3b0

08005834 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f9c5 	bl	8005bcc <ai_platform_network_get_error>
 8005842:	4603      	mov	r3, r0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af02      	add	r7, sp, #8
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005856:	2300      	movs	r3, #0
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	2304      	movs	r3, #4
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2301      	movs	r3, #1
 8005860:	4a04      	ldr	r2, [pc, #16]	; (8005874 <ai_network_create+0x28>)
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fad9 	bl	8005e1c <ai_platform_network_create>
 800586a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20000a20 	.word	0x20000a20

08005878 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fb3d 	bl	8005f00 <ai_platform_network_destroy>
 8005886:	4603      	mov	r3, r0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb61 	bl	8005f64 <ai_platform_network_init>
 80058a2:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <ai_network_init+0x1e>
 80058aa:	2300      	movs	r3, #0
 80058ac:	e02b      	b.n	8005906 <ai_network_init+0x76>

  ai_bool ok = true;
 80058ae:	2301      	movs	r3, #1
 80058b0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	4619      	mov	r1, r3
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff ff02 	bl	80056c0 <network_configure_weights>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	7afb      	ldrb	r3, [r7, #11]
 80058c2:	4013      	ands	r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bf14      	ite	ne
 80058c8:	2301      	movne	r3, #1
 80058ca:	2300      	moveq	r3, #0
 80058cc:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	3318      	adds	r3, #24
 80058d2:	4619      	mov	r1, r3
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff feb5 	bl	8005644 <network_configure_activations>
 80058da:	4603      	mov	r3, r0
 80058dc:	461a      	mov	r2, r3
 80058de:	7afb      	ldrb	r3, [r7, #11]
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bf14      	ite	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	2300      	moveq	r3, #0
 80058ea:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fbab 	bl	8006048 <ai_platform_network_post_init>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	7afb      	ldrb	r3, [r7, #11]
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	bf14      	ite	ne
 80058fe:	2301      	movne	r3, #1
 8005900:	2300      	moveq	r3, #0
 8005902:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005904:	7afb      	ldrb	r3, [r7, #11]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fbde 	bl	80060e0 <ai_platform_network_process>
 8005924:	4603      	mov	r3, r0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
    0xd6, 0x3b, 0x40, 0x7d, 0x5f, 0x3b, 0xd6, 0x2e, 0x42, 0xbc,
    0x2f, 0xb3, 0x11, 0xbc, 0x1b, 0x61, 0x8a, 0x3b, 0xe4, 0xad,
    0xeb, 0xbc, 0x08, 0x8d, 0x66, 0xbc, 0x20, 0x57, 0x82, 0x38,
    0xc6, 0xad, 0x4e, 0xbb, 0x9f, 0x8c, 0x7f, 0x3b, 0x29, 0x9b,
    0xa0, 0xbb, 0x72, 0xe9, 0x6b, 0xbb, 0xca, 0x0b, 0x0e, 0xbb  };
  return AI_HANDLE_PTR(s_network_weights);
 8005934:	4b02      	ldr	r3, [pc, #8]	; (8005940 <ai_network_data_weights_get+0x10>)
}
 8005936:	4618      	mov	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	0800a400 	.word	0x0800a400

08005944 <_ai_platform_get_io_buffers_info>:
 8005944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005948:	2400      	movs	r4, #0
 800594a:	b083      	sub	sp, #12
 800594c:	4606      	mov	r6, r0
 800594e:	4688      	mov	r8, r1
 8005950:	46a3      	mov	fp, r4
 8005952:	f04f 0a18 	mov.w	sl, #24
 8005956:	f04f 0901 	mov.w	r9, #1
 800595a:	b2a0      	uxth	r0, r4
 800595c:	b936      	cbnz	r6, 800596c <_ai_platform_get_io_buffers_info+0x28>
 800595e:	2800      	cmp	r0, #0
 8005960:	d03b      	beq.n	80059da <_ai_platform_get_io_buffers_info+0x96>
 8005962:	68b3      	ldr	r3, [r6, #8]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f8c8 3000 	str.w	r3, [r8]
 800596a:	e036      	b.n	80059da <_ai_platform_get_io_buffers_info+0x96>
 800596c:	8833      	ldrh	r3, [r6, #0]
 800596e:	429c      	cmp	r4, r3
 8005970:	d2f5      	bcs.n	800595e <_ai_platform_get_io_buffers_info+0x1a>
 8005972:	6873      	ldr	r3, [r6, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f2      	beq.n	800595e <_ai_platform_get_io_buffers_info+0x1a>
 8005978:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800597c:	2d00      	cmp	r5, #0
 800597e:	d0ee      	beq.n	800595e <_ai_platform_get_io_buffers_info+0x1a>
 8005980:	68b3      	ldr	r3, [r6, #8]
 8005982:	69aa      	ldr	r2, [r5, #24]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	6810      	ldr	r0, [r2, #0]
 8005988:	689f      	ldr	r7, [r3, #8]
 800598a:	9101      	str	r1, [sp, #4]
 800598c:	f001 fb46 	bl	800701c <ai_array_to_buffer_fmt>
 8005990:	9901      	ldr	r1, [sp, #4]
 8005992:	fb0a f304 	mul.w	r3, sl, r4
 8005996:	18ca      	adds	r2, r1, r3
 8005998:	50c8      	str	r0, [r1, r3]
 800599a:	f8a2 9004 	strh.w	r9, [r2, #4]
 800599e:	68eb      	ldr	r3, [r5, #12]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	80d3      	strh	r3, [r2, #6]
 80059a4:	68eb      	ldr	r3, [r5, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	8113      	strh	r3, [r2, #8]
 80059aa:	68eb      	ldr	r3, [r5, #12]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	60d3      	str	r3, [r2, #12]
 80059b0:	69ab      	ldr	r3, [r5, #24]
 80059b2:	00e1      	lsls	r1, r4, #3
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	6113      	str	r3, [r2, #16]
 80059b8:	1878      	adds	r0, r7, r1
 80059ba:	b150      	cbz	r0, 80059d2 <_ai_platform_get_io_buffers_info+0x8e>
 80059bc:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	6043      	str	r3, [r0, #4]
 80059c4:	b11b      	cbz	r3, 80059ce <_ai_platform_get_io_buffers_info+0x8a>
 80059c6:	885b      	ldrh	r3, [r3, #2]
 80059c8:	3300      	adds	r3, #0
 80059ca:	bf18      	it	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	507b      	str	r3, [r7, r1]
 80059d0:	b903      	cbnz	r3, 80059d4 <_ai_platform_get_io_buffers_info+0x90>
 80059d2:	2000      	movs	r0, #0
 80059d4:	6150      	str	r0, [r2, #20]
 80059d6:	3401      	adds	r4, #1
 80059d8:	e7bf      	b.n	800595a <_ai_platform_get_io_buffers_info+0x16>
 80059da:	b003      	add	sp, #12
 80059dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059e0 <_platform_network_state_setup.isra.1>:
 80059e0:	b430      	push	{r4, r5}
 80059e2:	68dd      	ldr	r5, [r3, #12]
 80059e4:	695c      	ldr	r4, [r3, #20]
 80059e6:	68ed      	ldr	r5, [r5, #12]
 80059e8:	68e4      	ldr	r4, [r4, #12]
 80059ea:	fb04 f405 	mul.w	r4, r4, r5
 80059ee:	6084      	str	r4, [r0, #8]
 80059f0:	8809      	ldrh	r1, [r1, #0]
 80059f2:	fb04 f401 	mul.w	r4, r4, r1
 80059f6:	60c4      	str	r4, [r0, #12]
 80059f8:	6811      	ldr	r1, [r2, #0]
 80059fa:	6041      	str	r1, [r0, #4]
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	4414      	add	r4, r2
 8005a00:	6004      	str	r4, [r0, #0]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	6814      	ldr	r4, [r2, #0]
 8005a06:	00a4      	lsls	r4, r4, #2
 8005a08:	d407      	bmi.n	8005a1a <_platform_network_state_setup.isra.1+0x3a>
 8005a0a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8005a0e:	1b64      	subs	r4, r4, r5
 8005a10:	4421      	add	r1, r4
 8005a12:	6091      	str	r1, [r2, #8]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	6842      	ldr	r2, [r0, #4]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	bc30      	pop	{r4, r5}
 8005a1c:	4770      	bx	lr
	...

08005a20 <ai_platform_runtime_get_revision>:
 8005a20:	490a      	ldr	r1, [pc, #40]	; (8005a4c <ai_platform_runtime_get_revision+0x2c>)
 8005a22:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <ai_platform_runtime_get_revision+0x30>)
 8005a24:	680b      	ldr	r3, [r1, #0]
 8005a26:	2001      	movs	r0, #1
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	600b      	str	r3, [r1, #0]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	6010      	str	r0, [r2, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	d1fc      	bne.n	8005a32 <ai_platform_runtime_get_revision+0x12>
 8005a38:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <ai_platform_runtime_get_revision+0x34>)
 8005a3a:	4a07      	ldr	r2, [pc, #28]	; (8005a58 <ai_platform_runtime_get_revision+0x38>)
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <ai_platform_runtime_get_revision+0x3c>)
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d000      	beq.n	8005a48 <ai_platform_runtime_get_revision+0x28>
 8005a46:	e7fe      	b.n	8005a46 <ai_platform_runtime_get_revision+0x26>
 8005a48:	4805      	ldr	r0, [pc, #20]	; (8005a60 <ai_platform_runtime_get_revision+0x40>)
 8005a4a:	4770      	bx	lr
 8005a4c:	e0002000 	.word	0xe0002000
 8005a50:	40023008 	.word	0x40023008
 8005a54:	40023000 	.word	0x40023000
 8005a58:	f407a5c2 	.word	0xf407a5c2
 8005a5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005a60:	08065800 	.word	0x08065800

08005a64 <ai_platform_runtime_get_version>:
 8005a64:	490b      	ldr	r1, [pc, #44]	; (8005a94 <ai_platform_runtime_get_version+0x30>)
 8005a66:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <ai_platform_runtime_get_version+0x34>)
 8005a68:	680b      	ldr	r3, [r1, #0]
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	600b      	str	r3, [r1, #0]
 8005a72:	b082      	sub	sp, #8
 8005a74:	4613      	mov	r3, r2
 8005a76:	6010      	str	r0, [r2, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d1fc      	bne.n	8005a78 <ai_platform_runtime_get_version+0x14>
 8005a7e:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <ai_platform_runtime_get_version+0x38>)
 8005a80:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <ai_platform_runtime_get_version+0x3c>)
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <ai_platform_runtime_get_version+0x40>)
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d000      	beq.n	8005a8e <ai_platform_runtime_get_version+0x2a>
 8005a8c:	e7fe      	b.n	8005a8c <ai_platform_runtime_get_version+0x28>
 8005a8e:	2006      	movs	r0, #6
 8005a90:	b002      	add	sp, #8
 8005a92:	4770      	bx	lr
 8005a94:	e0002000 	.word	0xe0002000
 8005a98:	40023008 	.word	0x40023008
 8005a9c:	40023000 	.word	0x40023000
 8005aa0:	f407a5c2 	.word	0xf407a5c2
 8005aa4:	b5e8b5cd 	.word	0xb5e8b5cd

08005aa8 <ai_platform_api_get_version>:
 8005aa8:	4913      	ldr	r1, [pc, #76]	; (8005af8 <ai_platform_api_get_version+0x50>)
 8005aaa:	4a14      	ldr	r2, [pc, #80]	; (8005afc <ai_platform_api_get_version+0x54>)
 8005aac:	680b      	ldr	r3, [r1, #0]
 8005aae:	2001      	movs	r0, #1
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	600b      	str	r3, [r1, #0]
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	4613      	mov	r3, r2
 8005aba:	6010      	str	r0, [r2, #0]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d1fc      	bne.n	8005abc <ai_platform_api_get_version+0x14>
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <ai_platform_api_get_version+0x58>)
 8005ac4:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <ai_platform_api_get_version+0x5c>)
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <ai_platform_api_get_version+0x60>)
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d000      	beq.n	8005ad2 <ai_platform_api_get_version+0x2a>
 8005ad0:	e7fe      	b.n	8005ad0 <ai_platform_api_get_version+0x28>
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <ai_platform_api_get_version+0x64>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	f362 0007 	bfi	r0, r2, #0, #8
 8005adc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005ae0:	f362 200f 	bfi	r0, r2, #8, #8
 8005ae4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005ae8:	f362 4017 	bfi	r0, r2, #16, #8
 8005aec:	0e1b      	lsrs	r3, r3, #24
 8005aee:	f363 601f 	bfi	r0, r3, #24, #8
 8005af2:	b002      	add	sp, #8
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	e0002000 	.word	0xe0002000
 8005afc:	40023008 	.word	0x40023008
 8005b00:	40023000 	.word	0x40023000
 8005b04:	f407a5c2 	.word	0xf407a5c2
 8005b08:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b0c:	08065804 	.word	0x08065804

08005b10 <ai_platform_interface_api_get_version>:
 8005b10:	4913      	ldr	r1, [pc, #76]	; (8005b60 <ai_platform_interface_api_get_version+0x50>)
 8005b12:	4a14      	ldr	r2, [pc, #80]	; (8005b64 <ai_platform_interface_api_get_version+0x54>)
 8005b14:	680b      	ldr	r3, [r1, #0]
 8005b16:	2001      	movs	r0, #1
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	600b      	str	r3, [r1, #0]
 8005b1e:	b082      	sub	sp, #8
 8005b20:	4613      	mov	r3, r2
 8005b22:	6010      	str	r0, [r2, #0]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d1fc      	bne.n	8005b24 <ai_platform_interface_api_get_version+0x14>
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <ai_platform_interface_api_get_version+0x58>)
 8005b2c:	4a0f      	ldr	r2, [pc, #60]	; (8005b6c <ai_platform_interface_api_get_version+0x5c>)
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <ai_platform_interface_api_get_version+0x60>)
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d000      	beq.n	8005b3a <ai_platform_interface_api_get_version+0x2a>
 8005b38:	e7fe      	b.n	8005b38 <ai_platform_interface_api_get_version+0x28>
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <ai_platform_interface_api_get_version+0x64>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	f362 0007 	bfi	r0, r2, #0, #8
 8005b44:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005b48:	f362 200f 	bfi	r0, r2, #8, #8
 8005b4c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005b50:	f362 4017 	bfi	r0, r2, #16, #8
 8005b54:	0e1b      	lsrs	r3, r3, #24
 8005b56:	f363 601f 	bfi	r0, r3, #24, #8
 8005b5a:	b002      	add	sp, #8
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	e0002000 	.word	0xe0002000
 8005b64:	40023008 	.word	0x40023008
 8005b68:	40023000 	.word	0x40023000
 8005b6c:	f407a5c2 	.word	0xf407a5c2
 8005b70:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b74:	08065808 	.word	0x08065808

08005b78 <ai_platform_context_acquire>:
 8005b78:	b410      	push	{r4}
 8005b7a:	b120      	cbz	r0, 8005b86 <ai_platform_context_acquire+0xe>
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <ai_platform_context_acquire+0x3c>)
 8005b7e:	6802      	ldr	r2, [r0, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	bf18      	it	ne
 8005b84:	2000      	movne	r0, #0
 8005b86:	490c      	ldr	r1, [pc, #48]	; (8005bb8 <ai_platform_context_acquire+0x40>)
 8005b88:	4a0c      	ldr	r2, [pc, #48]	; (8005bbc <ai_platform_context_acquire+0x44>)
 8005b8a:	680b      	ldr	r3, [r1, #0]
 8005b8c:	2401      	movs	r4, #1
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
 8005b92:	600b      	str	r3, [r1, #0]
 8005b94:	4613      	mov	r3, r2
 8005b96:	6014      	str	r4, [r2, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	d1fc      	bne.n	8005b98 <ai_platform_context_acquire+0x20>
 8005b9e:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <ai_platform_context_acquire+0x48>)
 8005ba0:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <ai_platform_context_acquire+0x4c>)
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <ai_platform_context_acquire+0x50>)
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d000      	beq.n	8005bae <ai_platform_context_acquire+0x36>
 8005bac:	e7fe      	b.n	8005bac <ai_platform_context_acquire+0x34>
 8005bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	a1c00100 	.word	0xa1c00100
 8005bb8:	e0002000 	.word	0xe0002000
 8005bbc:	40023008 	.word	0x40023008
 8005bc0:	40023000 	.word	0x40023000
 8005bc4:	f407a5c2 	.word	0xf407a5c2
 8005bc8:	b5e8b5cd 	.word	0xb5e8b5cd

08005bcc <ai_platform_network_get_error>:
 8005bcc:	b410      	push	{r4}
 8005bce:	b120      	cbz	r0, 8005bda <ai_platform_network_get_error+0xe>
 8005bd0:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <ai_platform_network_get_error+0x4c>)
 8005bd2:	6802      	ldr	r2, [r0, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	bf18      	it	ne
 8005bd8:	2000      	movne	r0, #0
 8005bda:	4910      	ldr	r1, [pc, #64]	; (8005c1c <ai_platform_network_get_error+0x50>)
 8005bdc:	4a10      	ldr	r2, [pc, #64]	; (8005c20 <ai_platform_network_get_error+0x54>)
 8005bde:	680b      	ldr	r3, [r1, #0]
 8005be0:	2401      	movs	r4, #1
 8005be2:	f023 0301 	bic.w	r3, r3, #1
 8005be6:	600b      	str	r3, [r1, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	6014      	str	r4, [r2, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	d1fc      	bne.n	8005bec <ai_platform_network_get_error+0x20>
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <ai_platform_network_get_error+0x58>)
 8005bf4:	4a0c      	ldr	r2, [pc, #48]	; (8005c28 <ai_platform_network_get_error+0x5c>)
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <ai_platform_network_get_error+0x60>)
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d000      	beq.n	8005c02 <ai_platform_network_get_error+0x36>
 8005c00:	e7fe      	b.n	8005c00 <ai_platform_network_get_error+0x34>
 8005c02:	b120      	cbz	r0, 8005c0e <ai_platform_network_get_error+0x42>
 8005c04:	3010      	adds	r0, #16
 8005c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c0a:	f000 bc75 	b.w	80064f8 <core_get_error>
 8005c0e:	f241 0010 	movw	r0, #4112	; 0x1010
 8005c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	a1c00100 	.word	0xa1c00100
 8005c1c:	e0002000 	.word	0xe0002000
 8005c20:	40023008 	.word	0x40023008
 8005c24:	40023000 	.word	0x40023000
 8005c28:	f407a5c2 	.word	0xf407a5c2
 8005c2c:	b5e8b5cd 	.word	0xb5e8b5cd

08005c30 <ai_platform_api_get_network_report>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	460c      	mov	r4, r1
 8005c34:	4605      	mov	r5, r0
 8005c36:	b120      	cbz	r0, 8005c42 <ai_platform_api_get_network_report+0x12>
 8005c38:	4b71      	ldr	r3, [pc, #452]	; (8005e00 <ai_platform_api_get_network_report+0x1d0>)
 8005c3a:	6802      	ldr	r2, [r0, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	bf18      	it	ne
 8005c40:	2500      	movne	r5, #0
 8005c42:	4970      	ldr	r1, [pc, #448]	; (8005e04 <ai_platform_api_get_network_report+0x1d4>)
 8005c44:	4a70      	ldr	r2, [pc, #448]	; (8005e08 <ai_platform_api_get_network_report+0x1d8>)
 8005c46:	680b      	ldr	r3, [r1, #0]
 8005c48:	2001      	movs	r0, #1
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	600b      	str	r3, [r1, #0]
 8005c50:	4611      	mov	r1, r2
 8005c52:	6010      	str	r0, [r2, #0]
 8005c54:	680b      	ldr	r3, [r1, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1fc      	bne.n	8005c54 <ai_platform_api_get_network_report+0x24>
 8005c5a:	4a6c      	ldr	r2, [pc, #432]	; (8005e0c <ai_platform_api_get_network_report+0x1dc>)
 8005c5c:	496c      	ldr	r1, [pc, #432]	; (8005e10 <ai_platform_api_get_network_report+0x1e0>)
 8005c5e:	6011      	str	r1, [r2, #0]
 8005c60:	6811      	ldr	r1, [r2, #0]
 8005c62:	4a6c      	ldr	r2, [pc, #432]	; (8005e14 <ai_platform_api_get_network_report+0x1e4>)
 8005c64:	4291      	cmp	r1, r2
 8005c66:	d000      	beq.n	8005c6a <ai_platform_api_get_network_report+0x3a>
 8005c68:	e7fe      	b.n	8005c68 <ai_platform_api_get_network_report+0x38>
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	d062      	beq.n	8005d34 <ai_platform_api_get_network_report+0x104>
 8005c6e:	2c00      	cmp	r4, #0
 8005c70:	d062      	beq.n	8005d38 <ai_platform_api_get_network_report+0x108>
 8005c72:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005c74:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005c76:	2a00      	cmp	r2, #0
 8005c78:	d056      	beq.n	8005d28 <ai_platform_api_get_network_report+0xf8>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005c7e:	6913      	ldr	r3, [r2, #16]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d00c      	beq.n	8005c9e <ai_platform_api_get_network_report+0x6e>
 8005c84:	b15b      	cbz	r3, 8005c9e <ai_platform_api_get_network_report+0x6e>
 8005c86:	2202      	movs	r2, #2
 8005c88:	e003      	b.n	8005c92 <ai_platform_api_get_network_report+0x62>
 8005c8a:	1c50      	adds	r0, r2, #1
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	b121      	cbz	r1, 8005c9a <ai_platform_api_get_network_report+0x6a>
 8005c90:	4602      	mov	r2, r0
 8005c92:	66e2      	str	r2, [r4, #108]	; 0x6c
 8005c94:	6919      	ldr	r1, [r3, #16]
 8005c96:	4299      	cmp	r1, r3
 8005c98:	d1f7      	bne.n	8005c8a <ai_platform_api_get_network_report+0x5a>
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	d044      	beq.n	8005d28 <ai_platform_api_get_network_report+0xf8>
 8005c9e:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8005ca2:	b100      	cbz	r0, 8005ca6 <ai_platform_api_get_network_report+0x76>
 8005ca4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8005ca6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8005caa:	f7ff fe4b 	bl	8005944 <_ai_platform_get_io_buffers_info>
 8005cae:	4606      	mov	r6, r0
 8005cb0:	8620      	strh	r0, [r4, #48]	; 0x30
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d05f      	beq.n	8005d76 <ai_platform_api_get_network_report+0x146>
 8005cb6:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	bf8a      	itet	hi
 8005cbe:	6ce8      	ldrhi	r0, [r5, #76]	; 0x4c
 8005cc0:	2000      	movls	r0, #0
 8005cc2:	300c      	addhi	r0, #12
 8005cc4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8005cc8:	f7ff fe3c 	bl	8005944 <_ai_platform_get_io_buffers_info>
 8005ccc:	4606      	mov	r6, r0
 8005cce:	8660      	strh	r0, [r4, #50]	; 0x32
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d048      	beq.n	8005d66 <ai_platform_api_get_network_report+0x136>
 8005cd4:	686b      	ldr	r3, [r5, #4]
 8005cd6:	6723      	str	r3, [r4, #112]	; 0x70
 8005cd8:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8005cdc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005cde:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8005ce2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005ce4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005ce8:	e886 0003 	stmia.w	r6, {r0, r1}
 8005cec:	f105 0718 	add.w	r7, r5, #24
 8005cf0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005cf2:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8005cf6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005cf8:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005cfc:	e886 0003 	stmia.w	r6, {r0, r1}
 8005d00:	4a40      	ldr	r2, [pc, #256]	; (8005e04 <ai_platform_api_get_network_report+0x1d4>)
 8005d02:	4941      	ldr	r1, [pc, #260]	; (8005e08 <ai_platform_api_get_network_report+0x1d8>)
 8005d04:	6813      	ldr	r3, [r2, #0]
 8005d06:	2001      	movs	r0, #1
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	460a      	mov	r2, r1
 8005d10:	6008      	str	r0, [r1, #0]
 8005d12:	6813      	ldr	r3, [r2, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1fc      	bne.n	8005d12 <ai_platform_api_get_network_report+0xe2>
 8005d18:	4b3c      	ldr	r3, [pc, #240]	; (8005e0c <ai_platform_api_get_network_report+0x1dc>)
 8005d1a:	493d      	ldr	r1, [pc, #244]	; (8005e10 <ai_platform_api_get_network_report+0x1e0>)
 8005d1c:	6019      	str	r1, [r3, #0]
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	4b3c      	ldr	r3, [pc, #240]	; (8005e14 <ai_platform_api_get_network_report+0x1e4>)
 8005d22:	4299      	cmp	r1, r3
 8005d24:	d00a      	beq.n	8005d3c <ai_platform_api_get_network_report+0x10c>
 8005d26:	e7fe      	b.n	8005d26 <ai_platform_api_get_network_report+0xf6>
 8005d28:	f105 0010 	add.w	r0, r5, #16
 8005d2c:	2218      	movs	r2, #24
 8005d2e:	2111      	movs	r1, #17
 8005d30:	f000 fbe8 	bl	8006504 <core_set_error>
 8005d34:	2000      	movs	r0, #0
 8005d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d38:	4620      	mov	r0, r4
 8005d3a:	e7fc      	b.n	8005d36 <ai_platform_api_get_network_report+0x106>
 8005d3c:	4b36      	ldr	r3, [pc, #216]	; (8005e18 <ai_platform_api_get_network_report+0x1e8>)
 8005d3e:	4831      	ldr	r0, [pc, #196]	; (8005e04 <ai_platform_api_get_network_report+0x1d4>)
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	6803      	ldr	r3, [r0, #0]
 8005d44:	4930      	ldr	r1, [pc, #192]	; (8005e08 <ai_platform_api_get_network_report+0x1d8>)
 8005d46:	f023 0301 	bic.w	r3, r3, #1
 8005d4a:	6003      	str	r3, [r0, #0]
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	680b      	ldr	r3, [r1, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1fc      	bne.n	8005d50 <ai_platform_api_get_network_report+0x120>
 8005d56:	4b2d      	ldr	r3, [pc, #180]	; (8005e0c <ai_platform_api_get_network_report+0x1dc>)
 8005d58:	4a2d      	ldr	r2, [pc, #180]	; (8005e10 <ai_platform_api_get_network_report+0x1e0>)
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <ai_platform_api_get_network_report+0x1e4>)
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d010      	beq.n	8005d86 <ai_platform_api_get_network_report+0x156>
 8005d64:	e7fe      	b.n	8005d64 <ai_platform_api_get_network_report+0x134>
 8005d66:	f105 0010 	add.w	r0, r5, #16
 8005d6a:	2218      	movs	r2, #24
 8005d6c:	2113      	movs	r1, #19
 8005d6e:	f000 fbc9 	bl	8006504 <core_set_error>
 8005d72:	4630      	mov	r0, r6
 8005d74:	e7df      	b.n	8005d36 <ai_platform_api_get_network_report+0x106>
 8005d76:	f105 0010 	add.w	r0, r5, #16
 8005d7a:	2218      	movs	r2, #24
 8005d7c:	2112      	movs	r1, #18
 8005d7e:	f000 fbc1 	bl	8006504 <core_set_error>
 8005d82:	4630      	mov	r0, r6
 8005d84:	e7d7      	b.n	8005d36 <ai_platform_api_get_network_report+0x106>
 8005d86:	2306      	movs	r3, #6
 8005d88:	481e      	ldr	r0, [pc, #120]	; (8005e04 <ai_platform_api_get_network_report+0x1d4>)
 8005d8a:	6163      	str	r3, [r4, #20]
 8005d8c:	6803      	ldr	r3, [r0, #0]
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <ai_platform_api_get_network_report+0x1d8>)
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	6003      	str	r3, [r0, #0]
 8005d96:	2301      	movs	r3, #1
 8005d98:	600b      	str	r3, [r1, #0]
 8005d9a:	6813      	ldr	r3, [r2, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1fc      	bne.n	8005d9a <ai_platform_api_get_network_report+0x16a>
 8005da0:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <ai_platform_api_get_network_report+0x1dc>)
 8005da2:	491b      	ldr	r1, [pc, #108]	; (8005e10 <ai_platform_api_get_network_report+0x1e0>)
 8005da4:	6019      	str	r1, [r3, #0]
 8005da6:	6819      	ldr	r1, [r3, #0]
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <ai_platform_api_get_network_report+0x1e4>)
 8005daa:	4299      	cmp	r1, r3
 8005dac:	d000      	beq.n	8005db0 <ai_platform_api_get_network_report+0x180>
 8005dae:	e7fe      	b.n	8005dae <ai_platform_api_get_network_report+0x17e>
 8005db0:	f240 1301 	movw	r3, #257	; 0x101
 8005db4:	4913      	ldr	r1, [pc, #76]	; (8005e04 <ai_platform_api_get_network_report+0x1d4>)
 8005db6:	6263      	str	r3, [r4, #36]	; 0x24
 8005db8:	680b      	ldr	r3, [r1, #0]
 8005dba:	4813      	ldr	r0, [pc, #76]	; (8005e08 <ai_platform_api_get_network_report+0x1d8>)
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	600b      	str	r3, [r1, #0]
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	6802      	ldr	r2, [r0, #0]
 8005dc8:	2a00      	cmp	r2, #0
 8005dca:	d1fc      	bne.n	8005dc6 <ai_platform_api_get_network_report+0x196>
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <ai_platform_api_get_network_report+0x1dc>)
 8005dce:	4910      	ldr	r1, [pc, #64]	; (8005e10 <ai_platform_api_get_network_report+0x1e0>)
 8005dd0:	6019      	str	r1, [r3, #0]
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <ai_platform_api_get_network_report+0x1e4>)
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	d000      	beq.n	8005ddc <ai_platform_api_get_network_report+0x1ac>
 8005dda:	e7fe      	b.n	8005dda <ai_platform_api_get_network_report+0x1aa>
 8005ddc:	f240 4301 	movw	r3, #1025	; 0x401
 8005de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005de2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8005de4:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8005de8:	0e19      	lsrs	r1, r3, #24
 8005dea:	0c1a      	lsrs	r2, r3, #16
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	f884 1020 	strb.w	r1, [r4, #32]
 8005df2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8005df6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	e79b      	b.n	8005d36 <ai_platform_api_get_network_report+0x106>
 8005dfe:	bf00      	nop
 8005e00:	a1c00100 	.word	0xa1c00100
 8005e04:	e0002000 	.word	0xe0002000
 8005e08:	40023008 	.word	0x40023008
 8005e0c:	40023000 	.word	0x40023000
 8005e10:	f407a5c2 	.word	0xf407a5c2
 8005e14:	b5e8b5cd 	.word	0xb5e8b5cd
 8005e18:	08065800 	.word	0x08065800

08005e1c <ai_platform_network_create>:
 8005e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e20:	4f30      	ldr	r7, [pc, #192]	; (8005ee4 <ai_platform_network_create+0xc8>)
 8005e22:	4e31      	ldr	r6, [pc, #196]	; (8005ee8 <ai_platform_network_create+0xcc>)
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	b083      	sub	sp, #12
 8005e28:	f021 0101 	bic.w	r1, r1, #1
 8005e2c:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8005e30:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	2101      	movs	r1, #1
 8005e38:	6031      	str	r1, [r6, #0]
 8005e3a:	6831      	ldr	r1, [r6, #0]
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d1fc      	bne.n	8005e3a <ai_platform_network_create+0x1e>
 8005e40:	492a      	ldr	r1, [pc, #168]	; (8005eec <ai_platform_network_create+0xd0>)
 8005e42:	4d2b      	ldr	r5, [pc, #172]	; (8005ef0 <ai_platform_network_create+0xd4>)
 8005e44:	600d      	str	r5, [r1, #0]
 8005e46:	680d      	ldr	r5, [r1, #0]
 8005e48:	492a      	ldr	r1, [pc, #168]	; (8005ef4 <ai_platform_network_create+0xd8>)
 8005e4a:	428d      	cmp	r5, r1
 8005e4c:	d000      	beq.n	8005e50 <ai_platform_network_create+0x34>
 8005e4e:	e7fe      	b.n	8005e4e <ai_platform_network_create+0x32>
 8005e50:	b1e0      	cbz	r0, 8005e8c <ai_platform_network_create+0x70>
 8005e52:	4680      	mov	r8, r0
 8005e54:	461d      	mov	r5, r3
 8005e56:	4b28      	ldr	r3, [pc, #160]	; (8005ef8 <ai_platform_network_create+0xdc>)
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	f8c8 2000 	str.w	r2, [r8]
 8005e5e:	4617      	mov	r7, r2
 8005e60:	f000 fb48 	bl	80064f4 <core_init>
 8005e64:	b1b8      	cbz	r0, 8005e96 <ai_platform_network_create+0x7a>
 8005e66:	4a1f      	ldr	r2, [pc, #124]	; (8005ee4 <ai_platform_network_create+0xc8>)
 8005e68:	491f      	ldr	r1, [pc, #124]	; (8005ee8 <ai_platform_network_create+0xcc>)
 8005e6a:	6813      	ldr	r3, [r2, #0]
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	2301      	movs	r3, #1
 8005e74:	6033      	str	r3, [r6, #0]
 8005e76:	680e      	ldr	r6, [r1, #0]
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	d1fc      	bne.n	8005e76 <ai_platform_network_create+0x5a>
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <ai_platform_network_create+0xd0>)
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <ai_platform_network_create+0xd4>)
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <ai_platform_network_create+0xd8>)
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d016      	beq.n	8005eb8 <ai_platform_network_create+0x9c>
 8005e8a:	e7fe      	b.n	8005e8a <ai_platform_network_create+0x6e>
 8005e8c:	f241 0010 	movw	r0, #4112	; 0x1010
 8005e90:	b003      	add	sp, #12
 8005e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e96:	062d      	lsls	r5, r5, #24
 8005e98:	0424      	lsls	r4, r4, #16
 8005e9a:	2130      	movs	r1, #48	; 0x30
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8c8 3000 	str.w	r3, [r8]
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	432b      	orrs	r3, r5
 8005eac:	f361 0007 	bfi	r0, r1, #0, #8
 8005eb0:	663b      	str	r3, [r7, #96]	; 0x60
 8005eb2:	f362 201f 	bfi	r0, r2, #8, #24
 8005eb6:	e7eb      	b.n	8005e90 <ai_platform_network_create+0x74>
 8005eb8:	062d      	lsls	r5, r5, #24
 8005eba:	0424      	lsls	r4, r4, #16
 8005ebc:	ea45 0304 	orr.w	r3, r5, r4
 8005ec0:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8005ec4:	d001      	beq.n	8005eca <ai_platform_network_create+0xae>
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	e7e8      	b.n	8005e9c <ai_platform_network_create+0x80>
 8005eca:	a802      	add	r0, sp, #8
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <ai_platform_network_create+0xe0>)
 8005ece:	f840 3d04 	str.w	r3, [r0, #-4]!
 8005ed2:	f000 ffe7 	bl	8006ea4 <ai_check_custom_types>
 8005ed6:	b110      	cbz	r0, 8005ede <ai_platform_network_create+0xc2>
 8005ed8:	4632      	mov	r2, r6
 8005eda:	4631      	mov	r1, r6
 8005edc:	e7e2      	b.n	8005ea4 <ai_platform_network_create+0x88>
 8005ede:	2102      	movs	r1, #2
 8005ee0:	e7dc      	b.n	8005e9c <ai_platform_network_create+0x80>
 8005ee2:	bf00      	nop
 8005ee4:	e0002000 	.word	0xe0002000
 8005ee8:	40023008 	.word	0x40023008
 8005eec:	40023000 	.word	0x40023000
 8005ef0:	f407a5c2 	.word	0xf407a5c2
 8005ef4:	b5e8b5cd 	.word	0xb5e8b5cd
 8005ef8:	a1c00100 	.word	0xa1c00100
 8005efc:	84048403 	.word	0x84048403

08005f00 <ai_platform_network_destroy>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	b1d8      	cbz	r0, 8005f3c <ai_platform_network_destroy+0x3c>
 8005f04:	4a11      	ldr	r2, [pc, #68]	; (8005f4c <ai_platform_network_destroy+0x4c>)
 8005f06:	6803      	ldr	r3, [r0, #0]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	bf0c      	ite	eq
 8005f0c:	4603      	moveq	r3, r0
 8005f0e:	2300      	movne	r3, #0
 8005f10:	4c0f      	ldr	r4, [pc, #60]	; (8005f50 <ai_platform_network_destroy+0x50>)
 8005f12:	4910      	ldr	r1, [pc, #64]	; (8005f54 <ai_platform_network_destroy+0x54>)
 8005f14:	6822      	ldr	r2, [r4, #0]
 8005f16:	2501      	movs	r5, #1
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	6022      	str	r2, [r4, #0]
 8005f1e:	460a      	mov	r2, r1
 8005f20:	600d      	str	r5, [r1, #0]
 8005f22:	6814      	ldr	r4, [r2, #0]
 8005f24:	2c00      	cmp	r4, #0
 8005f26:	d1fc      	bne.n	8005f22 <ai_platform_network_destroy+0x22>
 8005f28:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <ai_platform_network_destroy+0x58>)
 8005f2a:	490c      	ldr	r1, [pc, #48]	; (8005f5c <ai_platform_network_destroy+0x5c>)
 8005f2c:	6011      	str	r1, [r2, #0]
 8005f2e:	6811      	ldr	r1, [r2, #0]
 8005f30:	4a0b      	ldr	r2, [pc, #44]	; (8005f60 <ai_platform_network_destroy+0x60>)
 8005f32:	4291      	cmp	r1, r2
 8005f34:	d000      	beq.n	8005f38 <ai_platform_network_destroy+0x38>
 8005f36:	e7fe      	b.n	8005f36 <ai_platform_network_destroy+0x36>
 8005f38:	b913      	cbnz	r3, 8005f40 <ai_platform_network_destroy+0x40>
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	e7e7      	b.n	8005f10 <ai_platform_network_destroy+0x10>
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 f853 	bl	8006fec <ai_layers_destroy_all>
 8005f46:	4620      	mov	r0, r4
 8005f48:	bd38      	pop	{r3, r4, r5, pc}
 8005f4a:	bf00      	nop
 8005f4c:	a1c00100 	.word	0xa1c00100
 8005f50:	e0002000 	.word	0xe0002000
 8005f54:	40023008 	.word	0x40023008
 8005f58:	40023000 	.word	0x40023000
 8005f5c:	f407a5c2 	.word	0xf407a5c2
 8005f60:	b5e8b5cd 	.word	0xb5e8b5cd

08005f64 <ai_platform_network_init>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	460c      	mov	r4, r1
 8005f68:	4605      	mov	r5, r0
 8005f6a:	b120      	cbz	r0, 8005f76 <ai_platform_network_init+0x12>
 8005f6c:	4b30      	ldr	r3, [pc, #192]	; (8006030 <ai_platform_network_init+0xcc>)
 8005f6e:	6802      	ldr	r2, [r0, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	bf18      	it	ne
 8005f74:	2500      	movne	r5, #0
 8005f76:	492f      	ldr	r1, [pc, #188]	; (8006034 <ai_platform_network_init+0xd0>)
 8005f78:	4a2f      	ldr	r2, [pc, #188]	; (8006038 <ai_platform_network_init+0xd4>)
 8005f7a:	680b      	ldr	r3, [r1, #0]
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	600b      	str	r3, [r1, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	6010      	str	r0, [r2, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	2a00      	cmp	r2, #0
 8005f8c:	d1fc      	bne.n	8005f88 <ai_platform_network_init+0x24>
 8005f8e:	4b2b      	ldr	r3, [pc, #172]	; (800603c <ai_platform_network_init+0xd8>)
 8005f90:	4a2b      	ldr	r2, [pc, #172]	; (8006040 <ai_platform_network_init+0xdc>)
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b2b      	ldr	r3, [pc, #172]	; (8006044 <ai_platform_network_init+0xe0>)
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d000      	beq.n	8005f9e <ai_platform_network_init+0x3a>
 8005f9c:	e7fe      	b.n	8005f9c <ai_platform_network_init+0x38>
 8005f9e:	b1dd      	cbz	r5, 8005fd8 <ai_platform_network_init+0x74>
 8005fa0:	b1e4      	cbz	r4, 8005fdc <ai_platform_network_init+0x78>
 8005fa2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005fa4:	6926      	ldr	r6, [r4, #16]
 8005fa6:	b30f      	cbz	r7, 8005fec <ai_platform_network_init+0x88>
 8005fa8:	b38e      	cbz	r6, 800600e <ai_platform_network_init+0xaa>
 8005faa:	4627      	mov	r7, r4
 8005fac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005fae:	f105 0618 	add.w	r6, r5, #24
 8005fb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005fb4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005fb8:	e886 0003 	stmia.w	r6, {r0, r1}
 8005fbc:	3418      	adds	r4, #24
 8005fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc0:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8005fc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005fc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e886 0003 	stmia.w	r6, {r0, r1}
 8005fd0:	60eb      	str	r3, [r5, #12]
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 ff90 	bl	8006ef8 <ai_layers_init_all>
 8005fd8:	4628      	mov	r0, r5
 8005fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fdc:	f105 0010 	add.w	r0, r5, #16
 8005fe0:	2211      	movs	r2, #17
 8005fe2:	2110      	movs	r1, #16
 8005fe4:	4625      	mov	r5, r4
 8005fe6:	f000 fa8d 	bl	8006504 <core_set_error>
 8005fea:	e7f5      	b.n	8005fd8 <ai_platform_network_init+0x74>
 8005fec:	8c21      	ldrh	r1, [r4, #32]
 8005fee:	8be2      	ldrh	r2, [r4, #30]
 8005ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff2:	fb02 f201 	mul.w	r2, r2, r1
 8005ff6:	fb03 f302 	mul.w	r3, r3, r2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0d4      	beq.n	8005fa8 <ai_platform_network_init+0x44>
 8005ffe:	f105 0010 	add.w	r0, r5, #16
 8006002:	2213      	movs	r2, #19
 8006004:	2110      	movs	r1, #16
 8006006:	463d      	mov	r5, r7
 8006008:	f000 fa7c 	bl	8006504 <core_set_error>
 800600c:	e7e4      	b.n	8005fd8 <ai_platform_network_init+0x74>
 800600e:	8921      	ldrh	r1, [r4, #8]
 8006010:	88e2      	ldrh	r2, [r4, #6]
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	fb02 f201 	mul.w	r2, r2, r1
 8006018:	fb03 f302 	mul.w	r3, r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0c4      	beq.n	8005faa <ai_platform_network_init+0x46>
 8006020:	f105 0010 	add.w	r0, r5, #16
 8006024:	2212      	movs	r2, #18
 8006026:	2110      	movs	r1, #16
 8006028:	4635      	mov	r5, r6
 800602a:	f000 fa6b 	bl	8006504 <core_set_error>
 800602e:	e7d3      	b.n	8005fd8 <ai_platform_network_init+0x74>
 8006030:	a1c00100 	.word	0xa1c00100
 8006034:	e0002000 	.word	0xe0002000
 8006038:	40023008 	.word	0x40023008
 800603c:	40023000 	.word	0x40023000
 8006040:	f407a5c2 	.word	0xf407a5c2
 8006044:	b5e8b5cd 	.word	0xb5e8b5cd

08006048 <ai_platform_network_post_init>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4604      	mov	r4, r0
 800604c:	b120      	cbz	r0, 8006058 <ai_platform_network_post_init+0x10>
 800604e:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <ai_platform_network_post_init+0x80>)
 8006050:	6802      	ldr	r2, [r0, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	bf18      	it	ne
 8006056:	2400      	movne	r4, #0
 8006058:	491c      	ldr	r1, [pc, #112]	; (80060cc <ai_platform_network_post_init+0x84>)
 800605a:	4a1d      	ldr	r2, [pc, #116]	; (80060d0 <ai_platform_network_post_init+0x88>)
 800605c:	680b      	ldr	r3, [r1, #0]
 800605e:	2001      	movs	r0, #1
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	600b      	str	r3, [r1, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	6010      	str	r0, [r2, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	2a00      	cmp	r2, #0
 800606e:	d1fc      	bne.n	800606a <ai_platform_network_post_init+0x22>
 8006070:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <ai_platform_network_post_init+0x8c>)
 8006072:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <ai_platform_network_post_init+0x90>)
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b18      	ldr	r3, [pc, #96]	; (80060dc <ai_platform_network_post_init+0x94>)
 800607a:	429a      	cmp	r2, r3
 800607c:	d000      	beq.n	8006080 <ai_platform_network_post_init+0x38>
 800607e:	e7fe      	b.n	800607e <ai_platform_network_post_init+0x36>
 8006080:	b1bc      	cbz	r4, 80060b2 <ai_platform_network_post_init+0x6a>
 8006082:	68e3      	ldr	r3, [r4, #12]
 8006084:	f013 0502 	ands.w	r5, r3, #2
 8006088:	d015      	beq.n	80060b6 <ai_platform_network_post_init+0x6e>
 800608a:	4620      	mov	r0, r4
 800608c:	f000 ff48 	bl	8006f20 <ai_layers_post_init_all>
 8006090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006092:	b163      	cbz	r3, 80060ae <ai_platform_network_post_init+0x66>
 8006094:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8006096:	b91d      	cbnz	r5, 80060a0 <ai_platform_network_post_init+0x58>
 8006098:	e009      	b.n	80060ae <ai_platform_network_post_init+0x66>
 800609a:	461d      	mov	r5, r3
 800609c:	b13b      	cbz	r3, 80060ae <ai_platform_network_post_init+0x66>
 800609e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80060a2:	4629      	mov	r1, r5
 80060a4:	2000      	movs	r0, #0
 80060a6:	4798      	blx	r3
 80060a8:	692b      	ldr	r3, [r5, #16]
 80060aa:	42ab      	cmp	r3, r5
 80060ac:	d1f5      	bne.n	800609a <ai_platform_network_post_init+0x52>
 80060ae:	2001      	movs	r0, #1
 80060b0:	bd38      	pop	{r3, r4, r5, pc}
 80060b2:	4620      	mov	r0, r4
 80060b4:	bd38      	pop	{r3, r4, r5, pc}
 80060b6:	f104 0010 	add.w	r0, r4, #16
 80060ba:	2210      	movs	r2, #16
 80060bc:	2111      	movs	r1, #17
 80060be:	f000 fa21 	bl	8006504 <core_set_error>
 80060c2:	4628      	mov	r0, r5
 80060c4:	bd38      	pop	{r3, r4, r5, pc}
 80060c6:	bf00      	nop
 80060c8:	a1c00100 	.word	0xa1c00100
 80060cc:	e0002000 	.word	0xe0002000
 80060d0:	40023008 	.word	0x40023008
 80060d4:	40023000 	.word	0x40023000
 80060d8:	f407a5c2 	.word	0xf407a5c2
 80060dc:	b5e8b5cd 	.word	0xb5e8b5cd

080060e0 <ai_platform_network_process>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	b083      	sub	sp, #12
 80060e6:	4604      	mov	r4, r0
 80060e8:	9201      	str	r2, [sp, #4]
 80060ea:	b120      	cbz	r0, 80060f6 <ai_platform_network_process+0x16>
 80060ec:	4ba5      	ldr	r3, [pc, #660]	; (8006384 <ai_platform_network_process+0x2a4>)
 80060ee:	6802      	ldr	r2, [r0, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	bf18      	it	ne
 80060f4:	2400      	movne	r4, #0
 80060f6:	48a4      	ldr	r0, [pc, #656]	; (8006388 <ai_platform_network_process+0x2a8>)
 80060f8:	4ba4      	ldr	r3, [pc, #656]	; (800638c <ai_platform_network_process+0x2ac>)
 80060fa:	6802      	ldr	r2, [r0, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	6002      	str	r2, [r0, #0]
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	2a00      	cmp	r2, #0
 800610a:	d1fc      	bne.n	8006106 <ai_platform_network_process+0x26>
 800610c:	4ba0      	ldr	r3, [pc, #640]	; (8006390 <ai_platform_network_process+0x2b0>)
 800610e:	4aa1      	ldr	r2, [pc, #644]	; (8006394 <ai_platform_network_process+0x2b4>)
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4ba0      	ldr	r3, [pc, #640]	; (8006398 <ai_platform_network_process+0x2b8>)
 8006116:	429a      	cmp	r2, r3
 8006118:	d000      	beq.n	800611c <ai_platform_network_process+0x3c>
 800611a:	e7fe      	b.n	800611a <ai_platform_network_process+0x3a>
 800611c:	2c00      	cmp	r4, #0
 800611e:	d066      	beq.n	80061ee <ai_platform_network_process+0x10e>
 8006120:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8006124:	b107      	cbz	r7, 8006128 <ai_platform_network_process+0x48>
 8006126:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8006128:	68e3      	ldr	r3, [r4, #12]
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	2600      	movs	r6, #0
 8006130:	2b03      	cmp	r3, #3
 8006132:	6166      	str	r6, [r4, #20]
 8006134:	f040 80fe 	bne.w	8006334 <ai_platform_network_process+0x254>
 8006138:	2900      	cmp	r1, #0
 800613a:	d07f      	beq.n	800623c <ai_platform_network_process+0x15c>
 800613c:	2f00      	cmp	r7, #0
 800613e:	d07d      	beq.n	800623c <ai_platform_network_process+0x15c>
 8006140:	883b      	ldrh	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d07a      	beq.n	800623c <ai_platform_network_process+0x15c>
 8006146:	460d      	mov	r5, r1
 8006148:	46a0      	mov	r8, r4
 800614a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800614e:	429e      	cmp	r6, r3
 8006150:	d27d      	bcs.n	800624e <ai_platform_network_process+0x16e>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d07a      	beq.n	800624e <ai_platform_network_process+0x16e>
 8006158:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800615c:	2c00      	cmp	r4, #0
 800615e:	d076      	beq.n	800624e <ai_platform_network_process+0x16e>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8006168:	d067      	beq.n	800623a <ai_platform_network_process+0x15a>
 800616a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800616e:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8006172:	69a0      	ldr	r0, [r4, #24]
 8006174:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8006178:	6841      	ldr	r1, [r0, #4]
 800617a:	fb0b f30e 	mul.w	r3, fp, lr
 800617e:	fb0c f303 	mul.w	r3, ip, r3
 8006182:	4299      	cmp	r1, r3
 8006184:	d350      	bcc.n	8006228 <ai_platform_network_process+0x148>
 8006186:	68e3      	ldr	r3, [r4, #12]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	455a      	cmp	r2, fp
 800618c:	d14c      	bne.n	8006228 <ai_platform_network_process+0x148>
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	4572      	cmp	r2, lr
 8006192:	d149      	bne.n	8006228 <ai_platform_network_process+0x148>
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	459c      	cmp	ip, r3
 8006198:	d146      	bne.n	8006228 <ai_platform_network_process+0x148>
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	f000 ff8a 	bl	80070b4 <ai_array_get_byte_size>
 80061a0:	68e2      	ldr	r2, [r4, #12]
 80061a2:	6963      	ldr	r3, [r4, #20]
 80061a4:	68d2      	ldr	r2, [r2, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	fb03 f302 	mul.w	r3, r3, r2
 80061ac:	4298      	cmp	r0, r3
 80061ae:	d33b      	bcc.n	8006228 <ai_platform_network_process+0x148>
 80061b0:	69a3      	ldr	r3, [r4, #24]
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	f000 ff32 	bl	800701c <ai_array_to_buffer_fmt>
 80061b8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80061bc:	4043      	eors	r3, r0
 80061be:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80061c2:	d128      	bne.n	8006216 <ai_platform_network_process+0x136>
 80061c4:	68eb      	ldr	r3, [r5, #12]
 80061c6:	b1f3      	cbz	r3, 8006206 <ai_platform_network_process+0x126>
 80061c8:	f8b5 b000 	ldrh.w	fp, [r5]
 80061cc:	f1bb 0f00 	cmp.w	fp, #0
 80061d0:	d012      	beq.n	80061f8 <ai_platform_network_process+0x118>
 80061d2:	4623      	mov	r3, r4
 80061d4:	f105 020c 	add.w	r2, r5, #12
 80061d8:	4629      	mov	r1, r5
 80061da:	4650      	mov	r0, sl
 80061dc:	f7ff fc00 	bl	80059e0 <_platform_network_state_setup.isra.1>
 80061e0:	45d9      	cmp	r9, fp
 80061e2:	883b      	ldrh	r3, [r7, #0]
 80061e4:	bf38      	it	cc
 80061e6:	46d9      	movcc	r9, fp
 80061e8:	3601      	adds	r6, #1
 80061ea:	3518      	adds	r5, #24
 80061ec:	e7af      	b.n	800614e <ai_platform_network_process+0x6e>
 80061ee:	46a3      	mov	fp, r4
 80061f0:	4658      	mov	r0, fp
 80061f2:	b003      	add	sp, #12
 80061f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f8:	f108 0010 	add.w	r0, r8, #16
 80061fc:	2221      	movs	r2, #33	; 0x21
 80061fe:	2112      	movs	r1, #18
 8006200:	f000 f980 	bl	8006504 <core_set_error>
 8006204:	e7f4      	b.n	80061f0 <ai_platform_network_process+0x110>
 8006206:	f108 0010 	add.w	r0, r8, #16
 800620a:	2217      	movs	r2, #23
 800620c:	2112      	movs	r1, #18
 800620e:	469b      	mov	fp, r3
 8006210:	f000 f978 	bl	8006504 <core_set_error>
 8006214:	e7ec      	b.n	80061f0 <ai_platform_network_process+0x110>
 8006216:	f108 0010 	add.w	r0, r8, #16
 800621a:	2219      	movs	r2, #25
 800621c:	2112      	movs	r1, #18
 800621e:	f000 f971 	bl	8006504 <core_set_error>
 8006222:	f04f 0b00 	mov.w	fp, #0
 8006226:	e7e3      	b.n	80061f0 <ai_platform_network_process+0x110>
 8006228:	f108 0010 	add.w	r0, r8, #16
 800622c:	2218      	movs	r2, #24
 800622e:	2112      	movs	r1, #18
 8006230:	f000 f968 	bl	8006504 <core_set_error>
 8006234:	f04f 0b00 	mov.w	fp, #0
 8006238:	e7da      	b.n	80061f0 <ai_platform_network_process+0x110>
 800623a:	4644      	mov	r4, r8
 800623c:	f104 0010 	add.w	r0, r4, #16
 8006240:	2217      	movs	r2, #23
 8006242:	2112      	movs	r1, #18
 8006244:	f000 f95e 	bl	8006504 <core_set_error>
 8006248:	f04f 0b00 	mov.w	fp, #0
 800624c:	e7d0      	b.n	80061f0 <ai_platform_network_process+0x110>
 800624e:	9a01      	ldr	r2, [sp, #4]
 8006250:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8006254:	4644      	mov	r4, r8
 8006256:	2a00      	cmp	r2, #0
 8006258:	f000 80a2 	beq.w	80063a0 <ai_platform_network_process+0x2c0>
 800625c:	2b01      	cmp	r3, #1
 800625e:	f240 8140 	bls.w	80064e2 <ai_platform_network_process+0x402>
 8006262:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8006266:	f118 0f0c 	cmn.w	r8, #12
 800626a:	f000 813a 	beq.w	80064e2 <ai_platform_network_process+0x402>
 800626e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 8135 	beq.w	80064e2 <ai_platform_network_process+0x402>
 8006278:	9d01      	ldr	r5, [sp, #4]
 800627a:	2700      	movs	r7, #0
 800627c:	3504      	adds	r5, #4
 800627e:	429f      	cmp	r7, r3
 8006280:	f080 808c 	bcs.w	800639c <ai_platform_network_process+0x2bc>
 8006284:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8087 	beq.w	800639c <ai_platform_network_process+0x2bc>
 800628e:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8006292:	2e00      	cmp	r6, #0
 8006294:	f000 8082 	beq.w	800639c <ai_platform_network_process+0x2bc>
 8006298:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80062a2:	d067      	beq.n	8006374 <ai_platform_network_process+0x294>
 80062a4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80062a8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80062ac:	69b0      	ldr	r0, [r6, #24]
 80062ae:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80062b2:	6841      	ldr	r1, [r0, #4]
 80062b4:	fb0b f30e 	mul.w	r3, fp, lr
 80062b8:	fb0c f303 	mul.w	r3, ip, r3
 80062bc:	4299      	cmp	r1, r3
 80062be:	f0c0 8110 	bcc.w	80064e2 <ai_platform_network_process+0x402>
 80062c2:	68f3      	ldr	r3, [r6, #12]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	455a      	cmp	r2, fp
 80062c8:	f040 810b 	bne.w	80064e2 <ai_platform_network_process+0x402>
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	4572      	cmp	r2, lr
 80062d0:	f040 8107 	bne.w	80064e2 <ai_platform_network_process+0x402>
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	459c      	cmp	ip, r3
 80062d8:	f040 8103 	bne.w	80064e2 <ai_platform_network_process+0x402>
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f000 fee9 	bl	80070b4 <ai_array_get_byte_size>
 80062e2:	68f2      	ldr	r2, [r6, #12]
 80062e4:	6973      	ldr	r3, [r6, #20]
 80062e6:	68d2      	ldr	r2, [r2, #12]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	fb03 f302 	mul.w	r3, r3, r2
 80062ee:	4298      	cmp	r0, r3
 80062f0:	f0c0 80f7 	bcc.w	80064e2 <ai_platform_network_process+0x402>
 80062f4:	69b3      	ldr	r3, [r6, #24]
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	f000 fe90 	bl	800701c <ai_array_to_buffer_fmt>
 80062fc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8006300:	4043      	eors	r3, r0
 8006302:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006306:	d12c      	bne.n	8006362 <ai_platform_network_process+0x282>
 8006308:	68eb      	ldr	r3, [r5, #12]
 800630a:	b313      	cbz	r3, 8006352 <ai_platform_network_process+0x272>
 800630c:	f8b5 b000 	ldrh.w	fp, [r5]
 8006310:	f1bb 0f00 	cmp.w	fp, #0
 8006314:	d016      	beq.n	8006344 <ai_platform_network_process+0x264>
 8006316:	4633      	mov	r3, r6
 8006318:	f105 020c 	add.w	r2, r5, #12
 800631c:	4629      	mov	r1, r5
 800631e:	4650      	mov	r0, sl
 8006320:	f7ff fb5e 	bl	80059e0 <_platform_network_state_setup.isra.1>
 8006324:	45d9      	cmp	r9, fp
 8006326:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800632a:	bf38      	it	cc
 800632c:	46d9      	movcc	r9, fp
 800632e:	3701      	adds	r7, #1
 8006330:	3518      	adds	r5, #24
 8006332:	e7a4      	b.n	800627e <ai_platform_network_process+0x19e>
 8006334:	f104 0010 	add.w	r0, r4, #16
 8006338:	2230      	movs	r2, #48	; 0x30
 800633a:	2111      	movs	r1, #17
 800633c:	f000 f8e2 	bl	8006504 <core_set_error>
 8006340:	46b3      	mov	fp, r6
 8006342:	e755      	b.n	80061f0 <ai_platform_network_process+0x110>
 8006344:	f104 0010 	add.w	r0, r4, #16
 8006348:	2221      	movs	r2, #33	; 0x21
 800634a:	2113      	movs	r1, #19
 800634c:	f000 f8da 	bl	8006504 <core_set_error>
 8006350:	e74e      	b.n	80061f0 <ai_platform_network_process+0x110>
 8006352:	f104 0010 	add.w	r0, r4, #16
 8006356:	2217      	movs	r2, #23
 8006358:	2113      	movs	r1, #19
 800635a:	469b      	mov	fp, r3
 800635c:	f000 f8d2 	bl	8006504 <core_set_error>
 8006360:	e746      	b.n	80061f0 <ai_platform_network_process+0x110>
 8006362:	f104 0010 	add.w	r0, r4, #16
 8006366:	2219      	movs	r2, #25
 8006368:	2113      	movs	r1, #19
 800636a:	f000 f8cb 	bl	8006504 <core_set_error>
 800636e:	f04f 0b00 	mov.w	fp, #0
 8006372:	e73d      	b.n	80061f0 <ai_platform_network_process+0x110>
 8006374:	f104 0010 	add.w	r0, r4, #16
 8006378:	2217      	movs	r2, #23
 800637a:	2113      	movs	r1, #19
 800637c:	f000 f8c2 	bl	8006504 <core_set_error>
 8006380:	46d3      	mov	fp, sl
 8006382:	e735      	b.n	80061f0 <ai_platform_network_process+0x110>
 8006384:	a1c00100 	.word	0xa1c00100
 8006388:	e0002000 	.word	0xe0002000
 800638c:	40023008 	.word	0x40023008
 8006390:	40023000 	.word	0x40023000
 8006394:	f407a5c2 	.word	0xf407a5c2
 8006398:	b5e8b5cd 	.word	0xb5e8b5cd
 800639c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80063a0:	f8a4 9014 	strh.w	r9, [r4, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8099 	beq.w	80064dc <ai_platform_network_process+0x3fc>
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80063ae:	f240 8093 	bls.w	80064d8 <ai_platform_network_process+0x3f8>
 80063b2:	f105 070c 	add.w	r7, r5, #12
 80063b6:	8ae0      	ldrh	r0, [r4, #22]
 80063b8:	8aa3      	ldrh	r3, [r4, #20]
 80063ba:	4283      	cmp	r3, r0
 80063bc:	d977      	bls.n	80064ae <ai_platform_network_process+0x3ce>
 80063be:	46a3      	mov	fp, r4
 80063c0:	2d00      	cmp	r5, #0
 80063c2:	d032      	beq.n	800642a <ai_platform_network_process+0x34a>
 80063c4:	882b      	ldrh	r3, [r5, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d02f      	beq.n	800642a <ai_platform_network_process+0x34a>
 80063ca:	686b      	ldr	r3, [r5, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d02c      	beq.n	800642a <ai_platform_network_process+0x34a>
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f04f 0800 	mov.w	r8, #0
 80063d6:	b343      	cbz	r3, 800642a <ai_platform_network_process+0x34a>
 80063d8:	68a9      	ldr	r1, [r5, #8]
 80063da:	699a      	ldr	r2, [r3, #24]
 80063dc:	f8d1 a000 	ldr.w	sl, [r1]
 80063e0:	6814      	ldr	r4, [r2, #0]
 80063e2:	6890      	ldr	r0, [r2, #8]
 80063e4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80063e8:	eb0a 0609 	add.w	r6, sl, r9
 80063ec:	00a4      	lsls	r4, r4, #2
 80063ee:	6871      	ldr	r1, [r6, #4]
 80063f0:	d45f      	bmi.n	80064b2 <ai_platform_network_process+0x3d2>
 80063f2:	68d4      	ldr	r4, [r2, #12]
 80063f4:	1b00      	subs	r0, r0, r4
 80063f6:	4401      	add	r1, r0
 80063f8:	6091      	str	r1, [r2, #8]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	6872      	ldr	r2, [r6, #4]
 80063fe:	60da      	str	r2, [r3, #12]
 8006400:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8006404:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006408:	440b      	add	r3, r1
 800640a:	4293      	cmp	r3, r2
 800640c:	bf24      	itt	cs
 800640e:	68f3      	ldrcs	r3, [r6, #12]
 8006410:	1ad3      	subcs	r3, r2, r3
 8006412:	6073      	str	r3, [r6, #4]
 8006414:	882b      	ldrh	r3, [r5, #0]
 8006416:	f108 0801 	add.w	r8, r8, #1
 800641a:	4598      	cmp	r8, r3
 800641c:	d205      	bcs.n	800642a <ai_platform_network_process+0x34a>
 800641e:	686b      	ldr	r3, [r5, #4]
 8006420:	b11b      	cbz	r3, 800642a <ai_platform_network_process+0x34a>
 8006422:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1d6      	bne.n	80063d8 <ai_platform_network_process+0x2f8>
 800642a:	4658      	mov	r0, fp
 800642c:	f000 fd90 	bl	8006f50 <ai_layers_forward_all>
 8006430:	2f00      	cmp	r7, #0
 8006432:	d032      	beq.n	800649a <ai_platform_network_process+0x3ba>
 8006434:	883b      	ldrh	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d02f      	beq.n	800649a <ai_platform_network_process+0x3ba>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	b36b      	cbz	r3, 800649a <ai_platform_network_process+0x3ba>
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	b358      	cbz	r0, 800649a <ai_platform_network_process+0x3ba>
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6981      	ldr	r1, [r0, #24]
 800644a:	f8d3 a000 	ldr.w	sl, [r3]
 800644e:	680c      	ldr	r4, [r1, #0]
 8006450:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8006454:	eb0a 0609 	add.w	r6, sl, r9
 8006458:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800645c:	00a4      	lsls	r4, r4, #2
 800645e:	eb0c 0302 	add.w	r3, ip, r2
 8006462:	d42a      	bmi.n	80064ba <ai_platform_network_process+0x3da>
 8006464:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006468:	4293      	cmp	r3, r2
 800646a:	bf24      	itt	cs
 800646c:	68f3      	ldrcs	r3, [r6, #12]
 800646e:	1ad3      	subcs	r3, r2, r3
 8006470:	6073      	str	r3, [r6, #4]
 8006472:	6981      	ldr	r1, [r0, #24]
 8006474:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8006478:	1b12      	subs	r2, r2, r4
 800647a:	4413      	add	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
 800647e:	6983      	ldr	r3, [r0, #24]
 8006480:	6872      	ldr	r2, [r6, #4]
 8006482:	60da      	str	r2, [r3, #12]
 8006484:	883b      	ldrh	r3, [r7, #0]
 8006486:	f108 0801 	add.w	r8, r8, #1
 800648a:	4598      	cmp	r8, r3
 800648c:	d205      	bcs.n	800649a <ai_platform_network_process+0x3ba>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	b11b      	cbz	r3, 800649a <ai_platform_network_process+0x3ba>
 8006492:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006496:	2800      	cmp	r0, #0
 8006498:	d1d5      	bne.n	8006446 <ai_platform_network_process+0x366>
 800649a:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800649e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80064a2:	3001      	adds	r0, #1
 80064a4:	b280      	uxth	r0, r0
 80064a6:	4283      	cmp	r3, r0
 80064a8:	f8ab 0016 	strh.w	r0, [fp, #22]
 80064ac:	d888      	bhi.n	80063c0 <ai_platform_network_process+0x2e0>
 80064ae:	4683      	mov	fp, r0
 80064b0:	e69e      	b.n	80061f0 <ai_platform_network_process+0x110>
 80064b2:	68b2      	ldr	r2, [r6, #8]
 80064b4:	f000 fe62 	bl	800717c <memcpy>
 80064b8:	e7a2      	b.n	8006400 <ai_platform_network_process+0x320>
 80064ba:	6889      	ldr	r1, [r1, #8]
 80064bc:	4660      	mov	r0, ip
 80064be:	f000 fe5d 	bl	800717c <memcpy>
 80064c2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80064c6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80064ca:	440b      	add	r3, r1
 80064cc:	4293      	cmp	r3, r2
 80064ce:	bf24      	itt	cs
 80064d0:	68f3      	ldrcs	r3, [r6, #12]
 80064d2:	1ad3      	subcs	r3, r2, r3
 80064d4:	6073      	str	r3, [r6, #4]
 80064d6:	e7d5      	b.n	8006484 <ai_platform_network_process+0x3a4>
 80064d8:	2700      	movs	r7, #0
 80064da:	e76c      	b.n	80063b6 <ai_platform_network_process+0x2d6>
 80064dc:	461d      	mov	r5, r3
 80064de:	461f      	mov	r7, r3
 80064e0:	e769      	b.n	80063b6 <ai_platform_network_process+0x2d6>
 80064e2:	f104 0010 	add.w	r0, r4, #16
 80064e6:	2218      	movs	r2, #24
 80064e8:	2113      	movs	r1, #19
 80064ea:	f000 f80b 	bl	8006504 <core_set_error>
 80064ee:	f04f 0b00 	mov.w	fp, #0
 80064f2:	e67d      	b.n	80061f0 <ai_platform_network_process+0x110>

080064f4 <core_init>:
 80064f4:	2001      	movs	r0, #1
 80064f6:	4770      	bx	lr

080064f8 <core_get_error>:
 80064f8:	4603      	mov	r3, r0
 80064fa:	2200      	movs	r2, #0
 80064fc:	6800      	ldr	r0, [r0, #0]
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <core_set_error>:
 8006504:	7803      	ldrb	r3, [r0, #0]
 8006506:	b933      	cbnz	r3, 8006516 <core_set_error+0x12>
 8006508:	7001      	strb	r1, [r0, #0]
 800650a:	6803      	ldr	r3, [r0, #0]
 800650c:	f362 231f 	bfi	r3, r2, #8, #24
 8006510:	6003      	str	r3, [r0, #0]
 8006512:	2001      	movs	r0, #1
 8006514:	4770      	bx	lr
 8006516:	2000      	movs	r0, #0
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <ai_dict8_dot_array_f32>:
 800651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006524:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8006528:	f000 80c0 	beq.w	80066ac <ai_dict8_dot_array_f32+0x190>
 800652c:	f101 0408 	add.w	r4, r1, #8
 8006530:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006534:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80066b4 <ai_dict8_dot_array_f32+0x198>
 8006538:	eb04 0e09 	add.w	lr, r4, r9
 800653c:	f103 0520 	add.w	r5, r3, #32
 8006540:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8006544:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8006548:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800654c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8006550:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8006554:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8006558:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800655c:	ed55 3a04 	vldr	s7, [r5, #-16]
 8006560:	ed55 4a03 	vldr	s9, [r5, #-12]
 8006564:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006568:	ed55 6a01 	vldr	s13, [r5, #-4]
 800656c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006570:	edd6 7a00 	vldr	s15, [r6]
 8006574:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8006578:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800657c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006580:	ed9a 3a00 	vldr	s6, [sl]
 8006584:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8006588:	eee3 7a05 	vfma.f32	s15, s6, s10
 800658c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006590:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006594:	ed97 3a00 	vldr	s6, [r7]
 8006598:	ed96 5a00 	vldr	s10, [r6]
 800659c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80065a0:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80065a4:	eee3 7a04 	vfma.f32	s15, s6, s8
 80065a8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80065ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80065b0:	ed9a 3a00 	vldr	s6, [sl]
 80065b4:	ed96 4a00 	vldr	s8, [r6]
 80065b8:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80065bc:	eee5 7a06 	vfma.f32	s15, s10, s12
 80065c0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80065c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80065c8:	ed97 5a00 	vldr	s10, [r7]
 80065cc:	ed96 6a00 	vldr	s12, [r6]
 80065d0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80065d4:	3408      	adds	r4, #8
 80065d6:	45a6      	cmp	lr, r4
 80065d8:	f105 0520 	add.w	r5, r5, #32
 80065dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80065e0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80065e4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80065e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065ec:	d1a8      	bne.n	8006540 <ai_dict8_dot_array_f32+0x24>
 80065ee:	4449      	add	r1, r9
 80065f0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80065f4:	f01c 0c07 	ands.w	ip, ip, #7
 80065f8:	d050      	beq.n	800669c <ai_dict8_dot_array_f32+0x180>
 80065fa:	780c      	ldrb	r4, [r1, #0]
 80065fc:	edd3 6a00 	vldr	s13, [r3]
 8006600:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006604:	edd4 7a00 	vldr	s15, [r4]
 8006608:	f1bc 0f01 	cmp.w	ip, #1
 800660c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006610:	d044      	beq.n	800669c <ai_dict8_dot_array_f32+0x180>
 8006612:	784c      	ldrb	r4, [r1, #1]
 8006614:	edd3 6a01 	vldr	s13, [r3, #4]
 8006618:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800661c:	edd4 7a00 	vldr	s15, [r4]
 8006620:	f1bc 0f02 	cmp.w	ip, #2
 8006624:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006628:	d038      	beq.n	800669c <ai_dict8_dot_array_f32+0x180>
 800662a:	788c      	ldrb	r4, [r1, #2]
 800662c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006630:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006634:	edd4 7a00 	vldr	s15, [r4]
 8006638:	f1bc 0f03 	cmp.w	ip, #3
 800663c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006640:	d02c      	beq.n	800669c <ai_dict8_dot_array_f32+0x180>
 8006642:	78cc      	ldrb	r4, [r1, #3]
 8006644:	edd3 6a03 	vldr	s13, [r3, #12]
 8006648:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800664c:	edd4 7a00 	vldr	s15, [r4]
 8006650:	f1bc 0f04 	cmp.w	ip, #4
 8006654:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006658:	d020      	beq.n	800669c <ai_dict8_dot_array_f32+0x180>
 800665a:	790c      	ldrb	r4, [r1, #4]
 800665c:	edd3 6a04 	vldr	s13, [r3, #16]
 8006660:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006664:	edd4 7a00 	vldr	s15, [r4]
 8006668:	f1bc 0f05 	cmp.w	ip, #5
 800666c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006670:	d014      	beq.n	800669c <ai_dict8_dot_array_f32+0x180>
 8006672:	794c      	ldrb	r4, [r1, #5]
 8006674:	edd3 6a05 	vldr	s13, [r3, #20]
 8006678:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800667c:	edd4 7a00 	vldr	s15, [r4]
 8006680:	f1bc 0f06 	cmp.w	ip, #6
 8006684:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006688:	d008      	beq.n	800669c <ai_dict8_dot_array_f32+0x180>
 800668a:	7989      	ldrb	r1, [r1, #6]
 800668c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006690:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006694:	edd2 6a00 	vldr	s13, [r2]
 8006698:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800669c:	edd0 7a00 	vldr	s15, [r0]
 80066a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066a4:	ed80 7a00 	vstr	s14, [r0]
 80066a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ac:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80066b4 <ai_dict8_dot_array_f32+0x198>
 80066b0:	e7a0      	b.n	80065f4 <ai_dict8_dot_array_f32+0xd8>
 80066b2:	bf00      	nop
 80066b4:	00000000 	.word	0x00000000

080066b8 <ai_dict4_dot_array_f32>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80066be:	f027 0c01 	bic.w	ip, r7, #1
 80066c2:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80066c6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80066ca:	f000 80ae 	beq.w	800682a <ai_dict4_dot_array_f32+0x172>
 80066ce:	1d0d      	adds	r5, r1, #4
 80066d0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80066d4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006830 <ai_dict4_dot_array_f32+0x178>
 80066d8:	eb05 0e09 	add.w	lr, r5, r9
 80066dc:	f103 0420 	add.w	r4, r3, #32
 80066e0:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80066e4:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 80066e8:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 80066ec:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 80066f0:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80066f4:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 80066f8:	ed14 5a04 	vldr	s10, [r4, #-16]
 80066fc:	ed54 5a03 	vldr	s11, [r4, #-12]
 8006700:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006704:	ed54 6a01 	vldr	s13, [r4, #-4]
 8006708:	f006 0a0f 	and.w	sl, r6, #15
 800670c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006710:	edda 7a00 	vldr	s15, [sl]
 8006714:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8006718:	0936      	lsrs	r6, r6, #4
 800671a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800671e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006722:	ed96 3a00 	vldr	s6, [r6]
 8006726:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800672a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800672e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006732:	f00b 0b0f 	and.w	fp, fp, #15
 8006736:	edd6 3a00 	vldr	s7, [r6]
 800673a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800673e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006742:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8006746:	3504      	adds	r5, #4
 8006748:	ed9b 4a00 	vldr	s8, [fp]
 800674c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8006750:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006754:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8006758:	f00a 0a0f 	and.w	sl, sl, #15
 800675c:	eddb 4a00 	vldr	s9, [fp]
 8006760:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006764:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8006768:	45ae      	cmp	lr, r5
 800676a:	ed9a 5a00 	vldr	s10, [sl]
 800676e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8006772:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006776:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800677a:	f006 060f 	and.w	r6, r6, #15
 800677e:	edda 5a00 	vldr	s11, [sl]
 8006782:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006786:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800678a:	f104 0420 	add.w	r4, r4, #32
 800678e:	ed96 6a00 	vldr	s12, [r6]
 8006792:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800679a:	d1a1      	bne.n	80066e0 <ai_dict4_dot_array_f32+0x28>
 800679c:	4449      	add	r1, r9
 800679e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80067a2:	459c      	cmp	ip, r3
 80067a4:	d92d      	bls.n	8006802 <ai_dict4_dot_array_f32+0x14a>
 80067a6:	f10c 0c07 	add.w	ip, ip, #7
 80067aa:	f103 0508 	add.w	r5, r3, #8
 80067ae:	ebac 0c05 	sub.w	ip, ip, r5
 80067b2:	f02c 0407 	bic.w	r4, ip, #7
 80067b6:	f103 0810 	add.w	r8, r3, #16
 80067ba:	44a0      	add	r8, r4
 80067bc:	f101 3eff 	add.w	lr, r1, #4294967295
 80067c0:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80067c4:	ed15 6a01 	vldr	s12, [r5, #-4]
 80067c8:	ed55 6a02 	vldr	s13, [r5, #-8]
 80067cc:	f004 060f 	and.w	r6, r4, #15
 80067d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80067d4:	0924      	lsrs	r4, r4, #4
 80067d6:	edd6 7a00 	vldr	s15, [r6]
 80067da:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80067de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80067e2:	ed94 6a00 	vldr	s12, [r4]
 80067e6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80067ea:	3508      	adds	r5, #8
 80067ec:	45a8      	cmp	r8, r5
 80067ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067f2:	d1e5      	bne.n	80067c0 <ai_dict4_dot_array_f32+0x108>
 80067f4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80067f8:	f10c 0c01 	add.w	ip, ip, #1
 80067fc:	4461      	add	r1, ip
 80067fe:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8006802:	07fc      	lsls	r4, r7, #31
 8006804:	d509      	bpl.n	800681a <ai_dict4_dot_array_f32+0x162>
 8006806:	7809      	ldrb	r1, [r1, #0]
 8006808:	edd3 7a00 	vldr	s15, [r3]
 800680c:	090b      	lsrs	r3, r1, #4
 800680e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006812:	edd2 6a00 	vldr	s13, [r2]
 8006816:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800681a:	edd0 7a00 	vldr	s15, [r0]
 800681e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006822:	ed80 7a00 	vstr	s14, [r0]
 8006826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8006830 <ai_dict4_dot_array_f32+0x178>
 800682e:	e7b8      	b.n	80067a2 <ai_dict4_dot_array_f32+0xea>
 8006830:	00000000 	.word	0x00000000

08006834 <forward_dense>:
 8006834:	6982      	ldr	r2, [r0, #24]
 8006836:	8813      	ldrh	r3, [r2, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 81ca 	beq.w	8006bd2 <forward_dense+0x39e>
 800683e:	6852      	ldr	r2, [r2, #4]
 8006840:	6850      	ldr	r0, [r2, #4]
 8006842:	b100      	cbz	r0, 8006846 <forward_dense+0x12>
 8006844:	6800      	ldr	r0, [r0, #0]
 8006846:	2b01      	cmp	r3, #1
 8006848:	f240 81c0 	bls.w	8006bcc <forward_dense+0x398>
 800684c:	6911      	ldr	r1, [r2, #16]
 800684e:	b101      	cbz	r1, 8006852 <forward_dense+0x1e>
 8006850:	6809      	ldr	r1, [r1, #0]
 8006852:	2b02      	cmp	r3, #2
 8006854:	f000 81bf 	beq.w	8006bd6 <forward_dense+0x3a2>
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	ed2d 8b10 	vpush	{d8-d15}
 8006860:	69d3      	ldr	r3, [r2, #28]
 8006862:	b091      	sub	sp, #68	; 0x44
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 820b 	beq.w	8006c80 <forward_dense+0x44c>
 800686a:	681c      	ldr	r4, [r3, #0]
 800686c:	9408      	str	r4, [sp, #32]
 800686e:	f112 0418 	adds.w	r4, r2, #24
 8006872:	f000 81df 	beq.w	8006c34 <forward_dense+0x400>
 8006876:	8b12      	ldrh	r2, [r2, #24]
 8006878:	2a01      	cmp	r2, #1
 800687a:	f240 81fe 	bls.w	8006c7a <forward_dense+0x446>
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 81da 	beq.w	8006c38 <forward_dense+0x404>
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	9306      	str	r3, [sp, #24]
 8006888:	9b08      	ldr	r3, [sp, #32]
 800688a:	68cc      	ldr	r4, [r1, #12]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	68c5      	ldr	r5, [r0, #12]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006896:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800689a:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 800689e:	f3c2 5541 	ubfx	r5, r2, #21, #2
 80068a2:	fa4c f505 	asr.w	r5, ip, r5
 80068a6:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80068aa:	950b      	str	r5, [sp, #44]	; 0x2c
 80068ac:	2a04      	cmp	r2, #4
 80068ae:	fb07 f506 	mul.w	r5, r7, r6
 80068b2:	6864      	ldr	r4, [r4, #4]
 80068b4:	9507      	str	r5, [sp, #28]
 80068b6:	f000 81dd 	beq.w	8006c74 <forward_dense+0x440>
 80068ba:	2a08      	cmp	r2, #8
 80068bc:	f000 81da 	beq.w	8006c74 <forward_dense+0x440>
 80068c0:	f04f 0a00 	mov.w	sl, #0
 80068c4:	698a      	ldr	r2, [r1, #24]
 80068c6:	6981      	ldr	r1, [r0, #24]
 80068c8:	6890      	ldr	r0, [r2, #8]
 80068ca:	9a08      	ldr	r2, [sp, #32]
 80068cc:	9004      	str	r0, [sp, #16]
 80068ce:	6952      	ldr	r2, [r2, #20]
 80068d0:	688f      	ldr	r7, [r1, #8]
 80068d2:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80068d6:	00a2      	lsls	r2, r4, #2
 80068d8:	9209      	str	r2, [sp, #36]	; 0x24
 80068da:	1886      	adds	r6, r0, r2
 80068dc:	9a07      	ldr	r2, [sp, #28]
 80068de:	2a00      	cmp	r2, #0
 80068e0:	f000 81c3 	beq.w	8006c6a <forward_dense+0x436>
 80068e4:	f1a8 0210 	sub.w	r2, r8, #16
 80068e8:	0912      	lsrs	r2, r2, #4
 80068ea:	3201      	adds	r2, #1
 80068ec:	0192      	lsls	r2, r2, #6
 80068ee:	920c      	str	r2, [sp, #48]	; 0x30
 80068f0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80068f4:	920a      	str	r2, [sp, #40]	; 0x28
 80068f6:	689d      	ldr	r5, [r3, #8]
 80068f8:	9b06      	ldr	r3, [sp, #24]
 80068fa:	eddf aad0 	vldr	s21, [pc, #832]	; 8006c3c <forward_dense+0x408>
 80068fe:	2200      	movs	r2, #0
 8006900:	9205      	str	r2, [sp, #20]
 8006902:	f008 020f 	and.w	r2, r8, #15
 8006906:	920d      	str	r2, [sp, #52]	; 0x34
 8006908:	2b00      	cmp	r3, #0
 800690a:	d043      	beq.n	8006994 <forward_dense+0x160>
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	689c      	ldr	r4, [r3, #8]
 8006910:	9b04      	ldr	r3, [sp, #16]
 8006912:	f1ba 0f00 	cmp.w	sl, #0
 8006916:	d042      	beq.n	800699e <forward_dense+0x16a>
 8006918:	42b3      	cmp	r3, r6
 800691a:	d22a      	bcs.n	8006972 <forward_dense+0x13e>
 800691c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800691e:	469b      	mov	fp, r3
 8006920:	ab0f      	add	r3, sp, #60	; 0x3c
 8006922:	9303      	str	r3, [sp, #12]
 8006924:	2a04      	cmp	r2, #4
 8006926:	4633      	mov	r3, r6
 8006928:	4646      	mov	r6, r8
 800692a:	4698      	mov	r8, r3
 800692c:	f000 8156 	beq.w	8006bdc <forward_dense+0x3a8>
 8006930:	2c00      	cmp	r4, #0
 8006932:	f000 8185 	beq.w	8006c40 <forward_dense+0x40c>
 8006936:	f8d4 c000 	ldr.w	ip, [r4]
 800693a:	9803      	ldr	r0, [sp, #12]
 800693c:	9600      	str	r6, [sp, #0]
 800693e:	463b      	mov	r3, r7
 8006940:	4629      	mov	r1, r5
 8006942:	4652      	mov	r2, sl
 8006944:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006948:	f7ff fde8 	bl	800651c <ai_dict8_dot_array_f32>
 800694c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800694e:	f84b 3b04 	str.w	r3, [fp], #4
 8006952:	45c3      	cmp	fp, r8
 8006954:	f104 0404 	add.w	r4, r4, #4
 8006958:	444d      	add	r5, r9
 800695a:	d3e9      	bcc.n	8006930 <forward_dense+0xfc>
 800695c:	4643      	mov	r3, r8
 800695e:	46b0      	mov	r8, r6
 8006960:	461e      	mov	r6, r3
 8006962:	9a04      	ldr	r2, [sp, #16]
 8006964:	43d3      	mvns	r3, r2
 8006966:	4433      	add	r3, r6
 8006968:	f023 0303 	bic.w	r3, r3, #3
 800696c:	3304      	adds	r3, #4
 800696e:	18d3      	adds	r3, r2, r3
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006974:	9b05      	ldr	r3, [sp, #20]
 8006976:	4417      	add	r7, r2
 8006978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800697a:	4416      	add	r6, r2
 800697c:	9a07      	ldr	r2, [sp, #28]
 800697e:	3301      	adds	r3, #1
 8006980:	4293      	cmp	r3, r2
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	f000 8171 	beq.w	8006c6a <forward_dense+0x436>
 8006988:	9b08      	ldr	r3, [sp, #32]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	689d      	ldr	r5, [r3, #8]
 800698e:	9b06      	ldr	r3, [sp, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1bb      	bne.n	800690c <forward_dense+0xd8>
 8006994:	461c      	mov	r4, r3
 8006996:	9b04      	ldr	r3, [sp, #16]
 8006998:	f1ba 0f00 	cmp.w	sl, #0
 800699c:	d1bc      	bne.n	8006918 <forward_dense+0xe4>
 800699e:	42b3      	cmp	r3, r6
 80069a0:	d2e7      	bcs.n	8006972 <forward_dense+0x13e>
 80069a2:	4618      	mov	r0, r3
 80069a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069a6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80069aa:	eb07 0c03 	add.w	ip, r7, r3
 80069ae:	469e      	mov	lr, r3
 80069b0:	2c00      	cmp	r4, #0
 80069b2:	f000 80ff 	beq.w	8006bb4 <forward_dense+0x380>
 80069b6:	f1b8 0f0f 	cmp.w	r8, #15
 80069ba:	edd4 fa00 	vldr	s31, [r4]
 80069be:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8006c3c <forward_dense+0x408>
 80069c2:	f104 0404 	add.w	r4, r4, #4
 80069c6:	f240 80fd 	bls.w	8006bc4 <forward_dense+0x390>
 80069ca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80069ce:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80069d2:	4641      	mov	r1, r8
 80069d4:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80069d8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80069dc:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 80069e0:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 80069e4:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 80069e8:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 80069ec:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 80069f0:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 80069f4:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 80069f8:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 80069fc:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8006a00:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8006a04:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8006a08:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8006a0c:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8006a10:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8006a14:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8006a18:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8006a1c:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8006a20:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8006a24:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8006a28:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8006a2c:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8006a30:	ed13 4a04 	vldr	s8, [r3, #-16]
 8006a34:	ed52 4a04 	vldr	s9, [r2, #-16]
 8006a38:	ed12 5a03 	vldr	s10, [r2, #-12]
 8006a3c:	ed53 5a03 	vldr	s11, [r3, #-12]
 8006a40:	ed12 6a02 	vldr	s12, [r2, #-8]
 8006a44:	ed13 7a02 	vldr	s14, [r3, #-8]
 8006a48:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8006a4c:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8006a50:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8006a54:	3910      	subs	r1, #16
 8006a56:	290f      	cmp	r1, #15
 8006a58:	ed53 ea01 	vldr	s29, [r3, #-4]
 8006a5c:	ed12 ea01 	vldr	s28, [r2, #-4]
 8006a60:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8006a64:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8006a68:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006a6c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8006a70:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8006a74:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8006a78:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006a7c:	eee8 7a88 	vfma.f32	s15, s17, s16
 8006a80:	eee0 7a20 	vfma.f32	s15, s0, s1
 8006a84:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006a88:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006a8c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006a90:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006a94:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006a98:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006a9c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8006aa0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006aa4:	d896      	bhi.n	80069d4 <forward_dense+0x1a0>
 8006aa6:	eb05 010e 	add.w	r1, r5, lr
 8006aaa:	465b      	mov	r3, fp
 8006aac:	4662      	mov	r2, ip
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d075      	beq.n	8006b9e <forward_dense+0x36a>
 8006ab2:	ed91 7a00 	vldr	s14, [r1]
 8006ab6:	edd2 7a00 	vldr	s15, [r2]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006ac0:	d06d      	beq.n	8006b9e <forward_dense+0x36a>
 8006ac2:	ed91 7a01 	vldr	s14, [r1, #4]
 8006ac6:	edd2 7a01 	vldr	s15, [r2, #4]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006ad0:	d065      	beq.n	8006b9e <forward_dense+0x36a>
 8006ad2:	ed91 7a02 	vldr	s14, [r1, #8]
 8006ad6:	edd2 7a02 	vldr	s15, [r2, #8]
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006ae0:	d05d      	beq.n	8006b9e <forward_dense+0x36a>
 8006ae2:	ed91 7a03 	vldr	s14, [r1, #12]
 8006ae6:	edd2 7a03 	vldr	s15, [r2, #12]
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006af0:	d055      	beq.n	8006b9e <forward_dense+0x36a>
 8006af2:	ed91 7a04 	vldr	s14, [r1, #16]
 8006af6:	edd2 7a04 	vldr	s15, [r2, #16]
 8006afa:	2b05      	cmp	r3, #5
 8006afc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b00:	d04d      	beq.n	8006b9e <forward_dense+0x36a>
 8006b02:	ed91 7a05 	vldr	s14, [r1, #20]
 8006b06:	edd2 7a05 	vldr	s15, [r2, #20]
 8006b0a:	2b06      	cmp	r3, #6
 8006b0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b10:	d045      	beq.n	8006b9e <forward_dense+0x36a>
 8006b12:	ed91 7a06 	vldr	s14, [r1, #24]
 8006b16:	edd2 7a06 	vldr	s15, [r2, #24]
 8006b1a:	2b07      	cmp	r3, #7
 8006b1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b20:	d03d      	beq.n	8006b9e <forward_dense+0x36a>
 8006b22:	ed91 7a07 	vldr	s14, [r1, #28]
 8006b26:	edd2 7a07 	vldr	s15, [r2, #28]
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b30:	d035      	beq.n	8006b9e <forward_dense+0x36a>
 8006b32:	ed91 7a08 	vldr	s14, [r1, #32]
 8006b36:	edd2 7a08 	vldr	s15, [r2, #32]
 8006b3a:	2b09      	cmp	r3, #9
 8006b3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b40:	d02d      	beq.n	8006b9e <forward_dense+0x36a>
 8006b42:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8006b46:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8006b4a:	2b0a      	cmp	r3, #10
 8006b4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b50:	d025      	beq.n	8006b9e <forward_dense+0x36a>
 8006b52:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8006b56:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8006b5a:	2b0b      	cmp	r3, #11
 8006b5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b60:	d01d      	beq.n	8006b9e <forward_dense+0x36a>
 8006b62:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8006b66:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8006b6a:	2b0c      	cmp	r3, #12
 8006b6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b70:	d015      	beq.n	8006b9e <forward_dense+0x36a>
 8006b72:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8006b76:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8006b7a:	2b0d      	cmp	r3, #13
 8006b7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b80:	d00d      	beq.n	8006b9e <forward_dense+0x36a>
 8006b82:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8006b86:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006b8a:	2b0e      	cmp	r3, #14
 8006b8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b90:	d005      	beq.n	8006b9e <forward_dense+0x36a>
 8006b92:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8006b96:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8006b9a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b9e:	444d      	add	r5, r9
 8006ba0:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8006ba4:	ece0 6a01 	vstmia	r0!, {s13}
 8006ba8:	42b0      	cmp	r0, r6
 8006baa:	f4bf aeda 	bcs.w	8006962 <forward_dense+0x12e>
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	f47f af01 	bne.w	80069b6 <forward_dense+0x182>
 8006bb4:	f1b8 0f0f 	cmp.w	r8, #15
 8006bb8:	eef0 fa6a 	vmov.f32	s31, s21
 8006bbc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8006c3c <forward_dense+0x408>
 8006bc0:	f63f af03 	bhi.w	80069ca <forward_dense+0x196>
 8006bc4:	4643      	mov	r3, r8
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	463a      	mov	r2, r7
 8006bca:	e770      	b.n	8006aae <forward_dense+0x27a>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	deff      	udf	#255	; 0xff
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	deff      	udf	#255	; 0xff
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	deff      	udf	#255	; 0xff
 8006bdc:	b1ac      	cbz	r4, 8006c0a <forward_dense+0x3d6>
 8006bde:	f8d4 c000 	ldr.w	ip, [r4]
 8006be2:	9803      	ldr	r0, [sp, #12]
 8006be4:	9600      	str	r6, [sp, #0]
 8006be6:	463b      	mov	r3, r7
 8006be8:	4629      	mov	r1, r5
 8006bea:	4652      	mov	r2, sl
 8006bec:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006bf0:	f7ff fd62 	bl	80066b8 <ai_dict4_dot_array_f32>
 8006bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bf6:	f84b 3b04 	str.w	r3, [fp], #4
 8006bfa:	45c3      	cmp	fp, r8
 8006bfc:	f104 0404 	add.w	r4, r4, #4
 8006c00:	444d      	add	r5, r9
 8006c02:	f4bf aeab 	bcs.w	800695c <forward_dense+0x128>
 8006c06:	2c00      	cmp	r4, #0
 8006c08:	d1e9      	bne.n	8006bde <forward_dense+0x3aa>
 8006c0a:	4634      	mov	r4, r6
 8006c0c:	4646      	mov	r6, r8
 8006c0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c12:	9400      	str	r4, [sp, #0]
 8006c14:	463b      	mov	r3, r7
 8006c16:	4629      	mov	r1, r5
 8006c18:	4652      	mov	r2, sl
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8006c20:	f7ff fd4a 	bl	80066b8 <ai_dict4_dot_array_f32>
 8006c24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c26:	f84b 3b04 	str.w	r3, [fp], #4
 8006c2a:	45b3      	cmp	fp, r6
 8006c2c:	444d      	add	r5, r9
 8006c2e:	d3f0      	bcc.n	8006c12 <forward_dense+0x3de>
 8006c30:	46a0      	mov	r8, r4
 8006c32:	e696      	b.n	8006962 <forward_dense+0x12e>
 8006c34:	9406      	str	r4, [sp, #24]
 8006c36:	e627      	b.n	8006888 <forward_dense+0x54>
 8006c38:	9306      	str	r3, [sp, #24]
 8006c3a:	e625      	b.n	8006888 <forward_dense+0x54>
 8006c3c:	00000000 	.word	0x00000000
 8006c40:	4634      	mov	r4, r6
 8006c42:	4646      	mov	r6, r8
 8006c44:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c48:	9400      	str	r4, [sp, #0]
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4652      	mov	r2, sl
 8006c50:	4640      	mov	r0, r8
 8006c52:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8006c56:	f7ff fc61 	bl	800651c <ai_dict8_dot_array_f32>
 8006c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c5c:	f84b 3b04 	str.w	r3, [fp], #4
 8006c60:	45b3      	cmp	fp, r6
 8006c62:	444d      	add	r5, r9
 8006c64:	d3f0      	bcc.n	8006c48 <forward_dense+0x414>
 8006c66:	46a0      	mov	r8, r4
 8006c68:	e67b      	b.n	8006962 <forward_dense+0x12e>
 8006c6a:	b011      	add	sp, #68	; 0x44
 8006c6c:	ecbd 8b10 	vpop	{d8-d15}
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8006c78:	e624      	b.n	80068c4 <forward_dense+0x90>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9306      	str	r3, [sp, #24]
 8006c7e:	e603      	b.n	8006888 <forward_dense+0x54>
 8006c80:	9308      	str	r3, [sp, #32]
 8006c82:	e5f4      	b.n	800686e <forward_dense+0x3a>

08006c84 <nl_func_relu_generic_array_f32>:
 8006c84:	b430      	push	{r4, r5}
 8006c86:	6989      	ldr	r1, [r1, #24]
 8006c88:	6980      	ldr	r0, [r0, #24]
 8006c8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c8e:	688c      	ldr	r4, [r1, #8]
 8006c90:	6880      	ldr	r0, [r0, #8]
 8006c92:	ed93 7a00 	vldr	s14, [r3]
 8006c96:	ed93 6a01 	vldr	s12, [r3, #4]
 8006c9a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006c9e:	3a01      	subs	r2, #1
 8006ca0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006ca4:	0092      	lsls	r2, r2, #2
 8006ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006caa:	4410      	add	r0, r2
 8006cac:	4422      	add	r2, r4
 8006cae:	d421      	bmi.n	8006cf4 <nl_func_relu_generic_array_f32+0x70>
 8006cb0:	4294      	cmp	r4, r2
 8006cb2:	d83d      	bhi.n	8006d30 <nl_func_relu_generic_array_f32+0xac>
 8006cb4:	1d13      	adds	r3, r2, #4
 8006cb6:	1d02      	adds	r2, r0, #4
 8006cb8:	e010      	b.n	8006cdc <nl_func_relu_generic_array_f32+0x58>
 8006cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8006cc6:	d501      	bpl.n	8006ccc <nl_func_relu_generic_array_f32+0x48>
 8006cc8:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006ccc:	ed62 7a01 	vstmdb	r2!, {s15}
 8006cd0:	6888      	ldr	r0, [r1, #8]
 8006cd2:	f1a3 0408 	sub.w	r4, r3, #8
 8006cd6:	4284      	cmp	r4, r0
 8006cd8:	462b      	mov	r3, r5
 8006cda:	d329      	bcc.n	8006d30 <nl_func_relu_generic_array_f32+0xac>
 8006cdc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006ce0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce8:	f1a3 0504 	sub.w	r5, r3, #4
 8006cec:	d4e5      	bmi.n	8006cba <nl_func_relu_generic_array_f32+0x36>
 8006cee:	eef0 7a66 	vmov.f32	s15, s13
 8006cf2:	e7eb      	b.n	8006ccc <nl_func_relu_generic_array_f32+0x48>
 8006cf4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfc:	d01a      	beq.n	8006d34 <nl_func_relu_generic_array_f32+0xb0>
 8006cfe:	4294      	cmp	r4, r2
 8006d00:	d816      	bhi.n	8006d30 <nl_func_relu_generic_array_f32+0xac>
 8006d02:	1d13      	adds	r3, r2, #4
 8006d04:	1d02      	adds	r2, r0, #4
 8006d06:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006d0a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d12:	f1a3 0408 	sub.w	r4, r3, #8
 8006d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1a:	f1a3 0004 	sub.w	r0, r3, #4
 8006d1e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006d22:	4623      	mov	r3, r4
 8006d24:	d51e      	bpl.n	8006d64 <nl_func_relu_generic_array_f32+0xe0>
 8006d26:	ed62 6a01 	vstmdb	r2!, {s13}
 8006d2a:	688b      	ldr	r3, [r1, #8]
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	d91e      	bls.n	8006d6e <nl_func_relu_generic_array_f32+0xea>
 8006d30:	bc30      	pop	{r4, r5}
 8006d32:	4770      	bx	lr
 8006d34:	4294      	cmp	r4, r2
 8006d36:	d8fb      	bhi.n	8006d30 <nl_func_relu_generic_array_f32+0xac>
 8006d38:	1d13      	adds	r3, r2, #4
 8006d3a:	2500      	movs	r5, #0
 8006d3c:	1d02      	adds	r2, r0, #4
 8006d3e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d46:	f1a3 0408 	sub.w	r4, r3, #8
 8006d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4e:	f1a3 0004 	sub.w	r0, r3, #4
 8006d52:	4623      	mov	r3, r4
 8006d54:	db0d      	blt.n	8006d72 <nl_func_relu_generic_array_f32+0xee>
 8006d56:	ed62 7a01 	vstmdb	r2!, {s15}
 8006d5a:	688b      	ldr	r3, [r1, #8]
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	d8e7      	bhi.n	8006d30 <nl_func_relu_generic_array_f32+0xac>
 8006d60:	4603      	mov	r3, r0
 8006d62:	e7ec      	b.n	8006d3e <nl_func_relu_generic_array_f32+0xba>
 8006d64:	ed62 7a01 	vstmdb	r2!, {s15}
 8006d68:	688c      	ldr	r4, [r1, #8]
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	d8e0      	bhi.n	8006d30 <nl_func_relu_generic_array_f32+0xac>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	e7c9      	b.n	8006d06 <nl_func_relu_generic_array_f32+0x82>
 8006d72:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006d76:	688c      	ldr	r4, [r1, #8]
 8006d78:	429c      	cmp	r4, r3
 8006d7a:	d8d9      	bhi.n	8006d30 <nl_func_relu_generic_array_f32+0xac>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	e7de      	b.n	8006d3e <nl_func_relu_generic_array_f32+0xba>

08006d80 <forward_relu>:
 8006d80:	6982      	ldr	r2, [r0, #24]
 8006d82:	8813      	ldrh	r3, [r2, #0]
 8006d84:	b333      	cbz	r3, 8006dd4 <forward_relu+0x54>
 8006d86:	6852      	ldr	r2, [r2, #4]
 8006d88:	6851      	ldr	r1, [r2, #4]
 8006d8a:	b101      	cbz	r1, 8006d8e <forward_relu+0xe>
 8006d8c:	6809      	ldr	r1, [r1, #0]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d91d      	bls.n	8006dce <forward_relu+0x4e>
 8006d92:	b4f0      	push	{r4, r5, r6, r7}
 8006d94:	6917      	ldr	r7, [r2, #16]
 8006d96:	b107      	cbz	r7, 8006d9a <forward_relu+0x1a>
 8006d98:	683f      	ldr	r7, [r7, #0]
 8006d9a:	688c      	ldr	r4, [r1, #8]
 8006d9c:	69c3      	ldr	r3, [r0, #28]
 8006d9e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d044      	beq.n	8006e30 <forward_relu+0xb0>
 8006da6:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8006daa:	2d01      	cmp	r5, #1
 8006dac:	d014      	beq.n	8006dd8 <forward_relu+0x58>
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	d074      	beq.n	8006e9c <forward_relu+0x11c>
 8006db2:	68ce      	ldr	r6, [r1, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006dba:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006dbe:	42a6      	cmp	r6, r4
 8006dc0:	fb05 f202 	mul.w	r2, r5, r2
 8006dc4:	d1f9      	bne.n	8006dba <forward_relu+0x3a>
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	bcf0      	pop	{r4, r5, r6, r7}
 8006dca:	f7ff bf5b 	b.w	8006c84 <nl_func_relu_generic_array_f32>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	deff      	udf	#255	; 0xff
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	deff      	udf	#255	; 0xff
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	6988      	ldr	r0, [r1, #24]
 8006ddc:	6896      	ldr	r6, [r2, #8]
 8006dde:	ed93 7a00 	vldr	s14, [r3]
 8006de2:	6882      	ldr	r2, [r0, #8]
 8006de4:	b184      	cbz	r4, 8006e08 <forward_relu+0x88>
 8006de6:	68cf      	ldr	r7, [r1, #12]
 8006de8:	462b      	mov	r3, r5
 8006dea:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8006dee:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8006df2:	42a7      	cmp	r7, r4
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	d1f9      	bne.n	8006dee <forward_relu+0x6e>
 8006dfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	18d2      	adds	r2, r2, r3
 8006e04:	441e      	add	r6, r3
 8006e06:	d23f      	bcs.n	8006e88 <forward_relu+0x108>
 8006e08:	1d13      	adds	r3, r2, #4
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	1d32      	adds	r2, r6, #4
 8006e0e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e1a:	f1a3 0104 	sub.w	r1, r3, #4
 8006e1e:	d835      	bhi.n	8006e8c <forward_relu+0x10c>
 8006e20:	ed62 7a01 	vstmdb	r2!, {s15}
 8006e24:	6884      	ldr	r4, [r0, #8]
 8006e26:	3b08      	subs	r3, #8
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	d82d      	bhi.n	8006e88 <forward_relu+0x108>
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	e7ee      	b.n	8006e0e <forward_relu+0x8e>
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	698d      	ldr	r5, [r1, #24]
 8006e34:	6898      	ldr	r0, [r3, #8]
 8006e36:	68ab      	ldr	r3, [r5, #8]
 8006e38:	b184      	cbz	r4, 8006e5c <forward_relu+0xdc>
 8006e3a:	68ce      	ldr	r6, [r1, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006e42:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8006e46:	42a6      	cmp	r6, r4
 8006e48:	fb01 f202 	mul.w	r2, r1, r2
 8006e4c:	d1f9      	bne.n	8006e42 <forward_relu+0xc2>
 8006e4e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006e52:	3a01      	subs	r2, #1
 8006e54:	0092      	lsls	r2, r2, #2
 8006e56:	189b      	adds	r3, r3, r2
 8006e58:	4410      	add	r0, r2
 8006e5a:	d215      	bcs.n	8006e88 <forward_relu+0x108>
 8006e5c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006ea0 <forward_relu+0x120>
 8006e60:	3304      	adds	r3, #4
 8006e62:	1d01      	adds	r1, r0, #4
 8006e64:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006e68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e70:	bfb8      	it	lt
 8006e72:	eef0 7a47 	vmovlt.f32	s15, s14
 8006e76:	ed61 7a01 	vstmdb	r1!, {s15}
 8006e7a:	68a8      	ldr	r0, [r5, #8]
 8006e7c:	f1a3 0208 	sub.w	r2, r3, #8
 8006e80:	4290      	cmp	r0, r2
 8006e82:	f1a3 0304 	sub.w	r3, r3, #4
 8006e86:	d9ed      	bls.n	8006e64 <forward_relu+0xe4>
 8006e88:	bcf0      	pop	{r4, r5, r6, r7}
 8006e8a:	4770      	bx	lr
 8006e8c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006e90:	6884      	ldr	r4, [r0, #8]
 8006e92:	3b08      	subs	r3, #8
 8006e94:	429c      	cmp	r4, r3
 8006e96:	d8f7      	bhi.n	8006e88 <forward_relu+0x108>
 8006e98:	460b      	mov	r3, r1
 8006e9a:	e7b8      	b.n	8006e0e <forward_relu+0x8e>
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	e792      	b.n	8006dc6 <forward_relu+0x46>
 8006ea0:	00000000 	.word	0x00000000

08006ea4 <ai_check_custom_types>:
 8006ea4:	4b13      	ldr	r3, [pc, #76]	; (8006ef4 <ai_check_custom_types+0x50>)
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	b118      	cbz	r0, 8006eb6 <ai_check_custom_types+0x12>
 8006eae:	7803      	ldrb	r3, [r0, #0]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d002      	beq.n	8006eba <ai_check_custom_types+0x16>
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	b002      	add	sp, #8
 8006eb8:	4770      	bx	lr
 8006eba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d004      	beq.n	8006ecc <ai_check_custom_types+0x28>
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	f080 0001 	eor.w	r0, r0, #1
 8006ec8:	b002      	add	sp, #8
 8006eca:	4770      	bx	lr
 8006ecc:	7842      	ldrb	r2, [r0, #1]
 8006ece:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	f100 0001 	add.w	r0, r0, #1
 8006ed8:	d1f3      	bne.n	8006ec2 <ai_check_custom_types+0x1e>
 8006eda:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006ede:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d1ed      	bne.n	8006ec2 <ai_check_custom_types+0x1e>
 8006ee6:	7842      	ldrb	r2, [r0, #1]
 8006ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d1e8      	bne.n	8006ec2 <ai_check_custom_types+0x1e>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	e7e7      	b.n	8006ec4 <ai_check_custom_types+0x20>
 8006ef4:	0800a3b4 	.word	0x0800a3b4

08006ef8 <ai_layers_init_all>:
 8006ef8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006efa:	b17a      	cbz	r2, 8006f1c <ai_layers_init_all+0x24>
 8006efc:	6913      	ldr	r3, [r2, #16]
 8006efe:	60d0      	str	r0, [r2, #12]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	f04f 0201 	mov.w	r2, #1
 8006f06:	d009      	beq.n	8006f1c <ai_layers_init_all+0x24>
 8006f08:	b143      	cbz	r3, 8006f1c <ai_layers_init_all+0x24>
 8006f0a:	6919      	ldr	r1, [r3, #16]
 8006f0c:	60d8      	str	r0, [r3, #12]
 8006f0e:	4299      	cmp	r1, r3
 8006f10:	f102 0201 	add.w	r2, r2, #1
 8006f14:	d002      	beq.n	8006f1c <ai_layers_init_all+0x24>
 8006f16:	460b      	mov	r3, r1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f6      	bne.n	8006f0a <ai_layers_init_all+0x12>
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4770      	bx	lr

08006f20 <ai_layers_post_init_all>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8006f24:	b18c      	cbz	r4, 8006f4a <ai_layers_post_init_all+0x2a>
 8006f26:	2500      	movs	r5, #0
 8006f28:	6863      	ldr	r3, [r4, #4]
 8006f2a:	f013 0f01 	tst.w	r3, #1
 8006f2e:	4620      	mov	r0, r4
 8006f30:	d003      	beq.n	8006f3a <ai_layers_post_init_all+0x1a>
 8006f32:	6a23      	ldr	r3, [r4, #32]
 8006f34:	b10b      	cbz	r3, 8006f3a <ai_layers_post_init_all+0x1a>
 8006f36:	4798      	blx	r3
 8006f38:	3501      	adds	r5, #1
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	42a3      	cmp	r3, r4
 8006f3e:	d002      	beq.n	8006f46 <ai_layers_post_init_all+0x26>
 8006f40:	461c      	mov	r4, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <ai_layers_post_init_all+0x8>
 8006f46:	4628      	mov	r0, r5
 8006f48:	bd38      	pop	{r3, r4, r5, pc}
 8006f4a:	4625      	mov	r5, r4
 8006f4c:	e7fb      	b.n	8006f46 <ai_layers_post_init_all+0x26>
 8006f4e:	bf00      	nop

08006f50 <ai_layers_forward_all>:
 8006f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f54:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8006f56:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8006f58:	4604      	mov	r4, r0
 8006f5a:	2f00      	cmp	r7, #0
 8006f5c:	d02c      	beq.n	8006fb8 <ai_layers_forward_all+0x68>
 8006f5e:	2d00      	cmp	r5, #0
 8006f60:	d03f      	beq.n	8006fe2 <ai_layers_forward_all+0x92>
 8006f62:	6545      	str	r5, [r0, #84]	; 0x54
 8006f64:	4629      	mov	r1, r5
 8006f66:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006f68:	2001      	movs	r0, #1
 8006f6a:	47b8      	blx	r7
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006f70:	46b0      	mov	r8, r6
 8006f72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006f74:	2002      	movs	r0, #2
 8006f76:	47b8      	blx	r7
 8006f78:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8006f7a:	696b      	ldr	r3, [r5, #20]
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	4798      	blx	r3
 8006f80:	692b      	ldr	r3, [r5, #16]
 8006f82:	429d      	cmp	r5, r3
 8006f84:	f04f 0003 	mov.w	r0, #3
 8006f88:	4619      	mov	r1, r3
 8006f8a:	d009      	beq.n	8006fa0 <ai_layers_forward_all+0x50>
 8006f8c:	6563      	str	r3, [r4, #84]	; 0x54
 8006f8e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006f90:	47b8      	blx	r7
 8006f92:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006f94:	3601      	adds	r6, #1
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d1eb      	bne.n	8006f72 <ai_layers_forward_all+0x22>
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 8006fa6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006fa8:	47b8      	blx	r7
 8006faa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006fac:	3601      	adds	r6, #1
 8006fae:	2900      	cmp	r1, #0
 8006fb0:	d1df      	bne.n	8006f72 <ai_layers_forward_all+0x22>
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb8:	b19d      	cbz	r5, 8006fe2 <ai_layers_forward_all+0x92>
 8006fba:	6545      	str	r5, [r0, #84]	; 0x54
 8006fbc:	463e      	mov	r6, r7
 8006fbe:	696b      	ldr	r3, [r5, #20]
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	4798      	blx	r3
 8006fc4:	692b      	ldr	r3, [r5, #16]
 8006fc6:	42ab      	cmp	r3, r5
 8006fc8:	f106 0601 	add.w	r6, r6, #1
 8006fcc:	d004      	beq.n	8006fd8 <ai_layers_forward_all+0x88>
 8006fce:	6563      	str	r3, [r4, #84]	; 0x54
 8006fd0:	461d      	mov	r5, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f3      	bne.n	8006fbe <ai_layers_forward_all+0x6e>
 8006fd6:	e7e0      	b.n	8006f9a <ai_layers_forward_all+0x4a>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6563      	str	r3, [r4, #84]	; 0x54
 8006fdc:	4630      	mov	r0, r6
 8006fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe2:	462e      	mov	r6, r5
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fea:	bf00      	nop

08006fec <ai_layers_destroy_all>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8006ff0:	b18c      	cbz	r4, 8007016 <ai_layers_destroy_all+0x2a>
 8006ff2:	2500      	movs	r5, #0
 8006ff4:	6863      	ldr	r3, [r4, #4]
 8006ff6:	f013 0f04 	tst.w	r3, #4
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	d003      	beq.n	8007006 <ai_layers_destroy_all+0x1a>
 8006ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007000:	b10b      	cbz	r3, 8007006 <ai_layers_destroy_all+0x1a>
 8007002:	4798      	blx	r3
 8007004:	3501      	adds	r5, #1
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	42a3      	cmp	r3, r4
 800700a:	d002      	beq.n	8007012 <ai_layers_destroy_all+0x26>
 800700c:	461c      	mov	r4, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1f0      	bne.n	8006ff4 <ai_layers_destroy_all+0x8>
 8007012:	4628      	mov	r0, r5
 8007014:	bd38      	pop	{r3, r4, r5, pc}
 8007016:	4625      	mov	r5, r4
 8007018:	e7fb      	b.n	8007012 <ai_layers_destroy_all+0x26>
 800701a:	bf00      	nop

0800701c <ai_array_to_buffer_fmt>:
 800701c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007020:	2b02      	cmp	r3, #2
 8007022:	d02e      	beq.n	8007082 <ai_array_to_buffer_fmt+0x66>
 8007024:	4a1b      	ldr	r2, [pc, #108]	; (8007094 <ai_array_to_buffer_fmt+0x78>)
 8007026:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800702a:	4293      	cmp	r3, r2
 800702c:	d00e      	beq.n	800704c <ai_array_to_buffer_fmt+0x30>
 800702e:	dd11      	ble.n	8007054 <ai_array_to_buffer_fmt+0x38>
 8007030:	4a19      	ldr	r2, [pc, #100]	; (8007098 <ai_array_to_buffer_fmt+0x7c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00a      	beq.n	800704c <ai_array_to_buffer_fmt+0x30>
 8007036:	dd18      	ble.n	800706a <ai_array_to_buffer_fmt+0x4e>
 8007038:	4a18      	ldr	r2, [pc, #96]	; (800709c <ai_array_to_buffer_fmt+0x80>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d006      	beq.n	800704c <ai_array_to_buffer_fmt+0x30>
 800703e:	4a18      	ldr	r2, [pc, #96]	; (80070a0 <ai_array_to_buffer_fmt+0x84>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <ai_array_to_buffer_fmt+0x30>
 8007044:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <ai_array_to_buffer_fmt+0x88>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d000      	beq.n	800704c <ai_array_to_buffer_fmt+0x30>
 800704a:	2340      	movs	r3, #64	; 0x40
 800704c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007050:	4318      	orrs	r0, r3
 8007052:	4770      	bx	lr
 8007054:	4a14      	ldr	r2, [pc, #80]	; (80070a8 <ai_array_to_buffer_fmt+0x8c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d0f8      	beq.n	800704c <ai_array_to_buffer_fmt+0x30>
 800705a:	dd06      	ble.n	800706a <ai_array_to_buffer_fmt+0x4e>
 800705c:	4a13      	ldr	r2, [pc, #76]	; (80070ac <ai_array_to_buffer_fmt+0x90>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d0f4      	beq.n	800704c <ai_array_to_buffer_fmt+0x30>
 8007062:	320f      	adds	r2, #15
 8007064:	4293      	cmp	r3, r2
 8007066:	d0f1      	beq.n	800704c <ai_array_to_buffer_fmt+0x30>
 8007068:	e7ef      	b.n	800704a <ai_array_to_buffer_fmt+0x2e>
 800706a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800706e:	4293      	cmp	r3, r2
 8007070:	d0ec      	beq.n	800704c <ai_array_to_buffer_fmt+0x30>
 8007072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007076:	4293      	cmp	r3, r2
 8007078:	d1e7      	bne.n	800704a <ai_array_to_buffer_fmt+0x2e>
 800707a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800707e:	4318      	orrs	r0, r3
 8007080:	4770      	bx	lr
 8007082:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <ai_array_to_buffer_fmt+0x94>)
 8007084:	4003      	ands	r3, r0
 8007086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800708a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800708e:	4318      	orrs	r0, r3
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	00060440 	.word	0x00060440
 8007098:	00840447 	.word	0x00840447
 800709c:	0084084f 	.word	0x0084084f
 80070a0:	01821040 	.word	0x01821040
 80070a4:	00840840 	.word	0x00840840
 80070a8:	00040447 	.word	0x00040447
 80070ac:	00040840 	.word	0x00040840
 80070b0:	00803fff 	.word	0x00803fff

080070b4 <ai_array_get_byte_size>:
 80070b4:	b1c1      	cbz	r1, 80070e8 <ai_array_get_byte_size+0x34>
 80070b6:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80070ba:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80070be:	4413      	add	r3, r2
 80070c0:	fb01 f103 	mul.w	r1, r1, r3
 80070c4:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80070c8:	3107      	adds	r1, #7
 80070ca:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80070ce:	f021 0107 	bic.w	r1, r1, #7
 80070d2:	2804      	cmp	r0, #4
 80070d4:	fa21 f102 	lsr.w	r1, r1, r2
 80070d8:	d008      	beq.n	80070ec <ai_array_get_byte_size+0x38>
 80070da:	2808      	cmp	r0, #8
 80070dc:	d101      	bne.n	80070e2 <ai_array_get_byte_size+0x2e>
 80070de:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80070e2:	3107      	adds	r1, #7
 80070e4:	08c8      	lsrs	r0, r1, #3
 80070e6:	4770      	bx	lr
 80070e8:	4608      	mov	r0, r1
 80070ea:	4770      	bx	lr
 80070ec:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80070f0:	3107      	adds	r1, #7
 80070f2:	08c8      	lsrs	r0, r1, #3
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop

080070f8 <calloc>:
 80070f8:	4b02      	ldr	r3, [pc, #8]	; (8007104 <calloc+0xc>)
 80070fa:	460a      	mov	r2, r1
 80070fc:	4601      	mov	r1, r0
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	f000 b84f 	b.w	80071a2 <_calloc_r>
 8007104:	20000ed0 	.word	0x20000ed0

08007108 <__errno>:
 8007108:	4b01      	ldr	r3, [pc, #4]	; (8007110 <__errno+0x8>)
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20000ed0 	.word	0x20000ed0

08007114 <__libc_init_array>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	4e0d      	ldr	r6, [pc, #52]	; (800714c <__libc_init_array+0x38>)
 8007118:	4c0d      	ldr	r4, [pc, #52]	; (8007150 <__libc_init_array+0x3c>)
 800711a:	1ba4      	subs	r4, r4, r6
 800711c:	10a4      	asrs	r4, r4, #2
 800711e:	2500      	movs	r5, #0
 8007120:	42a5      	cmp	r5, r4
 8007122:	d109      	bne.n	8007138 <__libc_init_array+0x24>
 8007124:	4e0b      	ldr	r6, [pc, #44]	; (8007154 <__libc_init_array+0x40>)
 8007126:	4c0c      	ldr	r4, [pc, #48]	; (8007158 <__libc_init_array+0x44>)
 8007128:	f003 f84a 	bl	800a1c0 <_init>
 800712c:	1ba4      	subs	r4, r4, r6
 800712e:	10a4      	asrs	r4, r4, #2
 8007130:	2500      	movs	r5, #0
 8007132:	42a5      	cmp	r5, r4
 8007134:	d105      	bne.n	8007142 <__libc_init_array+0x2e>
 8007136:	bd70      	pop	{r4, r5, r6, pc}
 8007138:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800713c:	4798      	blx	r3
 800713e:	3501      	adds	r5, #1
 8007140:	e7ee      	b.n	8007120 <__libc_init_array+0xc>
 8007142:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007146:	4798      	blx	r3
 8007148:	3501      	adds	r5, #1
 800714a:	e7f2      	b.n	8007132 <__libc_init_array+0x1e>
 800714c:	08065b10 	.word	0x08065b10
 8007150:	08065b10 	.word	0x08065b10
 8007154:	08065b10 	.word	0x08065b10
 8007158:	08065b14 	.word	0x08065b14

0800715c <malloc>:
 800715c:	4b02      	ldr	r3, [pc, #8]	; (8007168 <malloc+0xc>)
 800715e:	4601      	mov	r1, r0
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	f000 b87b 	b.w	800725c <_malloc_r>
 8007166:	bf00      	nop
 8007168:	20000ed0 	.word	0x20000ed0

0800716c <free>:
 800716c:	4b02      	ldr	r3, [pc, #8]	; (8007178 <free+0xc>)
 800716e:	4601      	mov	r1, r0
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f000 b825 	b.w	80071c0 <_free_r>
 8007176:	bf00      	nop
 8007178:	20000ed0 	.word	0x20000ed0

0800717c <memcpy>:
 800717c:	b510      	push	{r4, lr}
 800717e:	1e43      	subs	r3, r0, #1
 8007180:	440a      	add	r2, r1
 8007182:	4291      	cmp	r1, r2
 8007184:	d100      	bne.n	8007188 <memcpy+0xc>
 8007186:	bd10      	pop	{r4, pc}
 8007188:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007190:	e7f7      	b.n	8007182 <memcpy+0x6>

08007192 <memset>:
 8007192:	4402      	add	r2, r0
 8007194:	4603      	mov	r3, r0
 8007196:	4293      	cmp	r3, r2
 8007198:	d100      	bne.n	800719c <memset+0xa>
 800719a:	4770      	bx	lr
 800719c:	f803 1b01 	strb.w	r1, [r3], #1
 80071a0:	e7f9      	b.n	8007196 <memset+0x4>

080071a2 <_calloc_r>:
 80071a2:	b538      	push	{r3, r4, r5, lr}
 80071a4:	fb02 f401 	mul.w	r4, r2, r1
 80071a8:	4621      	mov	r1, r4
 80071aa:	f000 f857 	bl	800725c <_malloc_r>
 80071ae:	4605      	mov	r5, r0
 80071b0:	b118      	cbz	r0, 80071ba <_calloc_r+0x18>
 80071b2:	4622      	mov	r2, r4
 80071b4:	2100      	movs	r1, #0
 80071b6:	f7ff ffec 	bl	8007192 <memset>
 80071ba:	4628      	mov	r0, r5
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080071c0 <_free_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4605      	mov	r5, r0
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d045      	beq.n	8007254 <_free_r+0x94>
 80071c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071cc:	1f0c      	subs	r4, r1, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfb8      	it	lt
 80071d2:	18e4      	addlt	r4, r4, r3
 80071d4:	f001 fe7c 	bl	8008ed0 <__malloc_lock>
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <_free_r+0x98>)
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	4610      	mov	r0, r2
 80071de:	b933      	cbnz	r3, 80071ee <_free_r+0x2e>
 80071e0:	6063      	str	r3, [r4, #4]
 80071e2:	6014      	str	r4, [r2, #0]
 80071e4:	4628      	mov	r0, r5
 80071e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ea:	f001 be72 	b.w	8008ed2 <__malloc_unlock>
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	d90c      	bls.n	800720c <_free_r+0x4c>
 80071f2:	6821      	ldr	r1, [r4, #0]
 80071f4:	1862      	adds	r2, r4, r1
 80071f6:	4293      	cmp	r3, r2
 80071f8:	bf04      	itt	eq
 80071fa:	681a      	ldreq	r2, [r3, #0]
 80071fc:	685b      	ldreq	r3, [r3, #4]
 80071fe:	6063      	str	r3, [r4, #4]
 8007200:	bf04      	itt	eq
 8007202:	1852      	addeq	r2, r2, r1
 8007204:	6022      	streq	r2, [r4, #0]
 8007206:	6004      	str	r4, [r0, #0]
 8007208:	e7ec      	b.n	80071e4 <_free_r+0x24>
 800720a:	4613      	mov	r3, r2
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	b10a      	cbz	r2, 8007214 <_free_r+0x54>
 8007210:	42a2      	cmp	r2, r4
 8007212:	d9fa      	bls.n	800720a <_free_r+0x4a>
 8007214:	6819      	ldr	r1, [r3, #0]
 8007216:	1858      	adds	r0, r3, r1
 8007218:	42a0      	cmp	r0, r4
 800721a:	d10b      	bne.n	8007234 <_free_r+0x74>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	4401      	add	r1, r0
 8007220:	1858      	adds	r0, r3, r1
 8007222:	4282      	cmp	r2, r0
 8007224:	6019      	str	r1, [r3, #0]
 8007226:	d1dd      	bne.n	80071e4 <_free_r+0x24>
 8007228:	6810      	ldr	r0, [r2, #0]
 800722a:	6852      	ldr	r2, [r2, #4]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	4401      	add	r1, r0
 8007230:	6019      	str	r1, [r3, #0]
 8007232:	e7d7      	b.n	80071e4 <_free_r+0x24>
 8007234:	d902      	bls.n	800723c <_free_r+0x7c>
 8007236:	230c      	movs	r3, #12
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	e7d3      	b.n	80071e4 <_free_r+0x24>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	1821      	adds	r1, r4, r0
 8007240:	428a      	cmp	r2, r1
 8007242:	bf04      	itt	eq
 8007244:	6811      	ldreq	r1, [r2, #0]
 8007246:	6852      	ldreq	r2, [r2, #4]
 8007248:	6062      	str	r2, [r4, #4]
 800724a:	bf04      	itt	eq
 800724c:	1809      	addeq	r1, r1, r0
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	605c      	str	r4, [r3, #4]
 8007252:	e7c7      	b.n	80071e4 <_free_r+0x24>
 8007254:	bd38      	pop	{r3, r4, r5, pc}
 8007256:	bf00      	nop
 8007258:	200015c8 	.word	0x200015c8

0800725c <_malloc_r>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	1ccd      	adds	r5, r1, #3
 8007260:	f025 0503 	bic.w	r5, r5, #3
 8007264:	3508      	adds	r5, #8
 8007266:	2d0c      	cmp	r5, #12
 8007268:	bf38      	it	cc
 800726a:	250c      	movcc	r5, #12
 800726c:	2d00      	cmp	r5, #0
 800726e:	4606      	mov	r6, r0
 8007270:	db01      	blt.n	8007276 <_malloc_r+0x1a>
 8007272:	42a9      	cmp	r1, r5
 8007274:	d903      	bls.n	800727e <_malloc_r+0x22>
 8007276:	230c      	movs	r3, #12
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	2000      	movs	r0, #0
 800727c:	bd70      	pop	{r4, r5, r6, pc}
 800727e:	f001 fe27 	bl	8008ed0 <__malloc_lock>
 8007282:	4a21      	ldr	r2, [pc, #132]	; (8007308 <_malloc_r+0xac>)
 8007284:	6814      	ldr	r4, [r2, #0]
 8007286:	4621      	mov	r1, r4
 8007288:	b991      	cbnz	r1, 80072b0 <_malloc_r+0x54>
 800728a:	4c20      	ldr	r4, [pc, #128]	; (800730c <_malloc_r+0xb0>)
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	b91b      	cbnz	r3, 8007298 <_malloc_r+0x3c>
 8007290:	4630      	mov	r0, r6
 8007292:	f000 fd1d 	bl	8007cd0 <_sbrk_r>
 8007296:	6020      	str	r0, [r4, #0]
 8007298:	4629      	mov	r1, r5
 800729a:	4630      	mov	r0, r6
 800729c:	f000 fd18 	bl	8007cd0 <_sbrk_r>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d124      	bne.n	80072ee <_malloc_r+0x92>
 80072a4:	230c      	movs	r3, #12
 80072a6:	6033      	str	r3, [r6, #0]
 80072a8:	4630      	mov	r0, r6
 80072aa:	f001 fe12 	bl	8008ed2 <__malloc_unlock>
 80072ae:	e7e4      	b.n	800727a <_malloc_r+0x1e>
 80072b0:	680b      	ldr	r3, [r1, #0]
 80072b2:	1b5b      	subs	r3, r3, r5
 80072b4:	d418      	bmi.n	80072e8 <_malloc_r+0x8c>
 80072b6:	2b0b      	cmp	r3, #11
 80072b8:	d90f      	bls.n	80072da <_malloc_r+0x7e>
 80072ba:	600b      	str	r3, [r1, #0]
 80072bc:	50cd      	str	r5, [r1, r3]
 80072be:	18cc      	adds	r4, r1, r3
 80072c0:	4630      	mov	r0, r6
 80072c2:	f001 fe06 	bl	8008ed2 <__malloc_unlock>
 80072c6:	f104 000b 	add.w	r0, r4, #11
 80072ca:	1d23      	adds	r3, r4, #4
 80072cc:	f020 0007 	bic.w	r0, r0, #7
 80072d0:	1ac3      	subs	r3, r0, r3
 80072d2:	d0d3      	beq.n	800727c <_malloc_r+0x20>
 80072d4:	425a      	negs	r2, r3
 80072d6:	50e2      	str	r2, [r4, r3]
 80072d8:	e7d0      	b.n	800727c <_malloc_r+0x20>
 80072da:	428c      	cmp	r4, r1
 80072dc:	684b      	ldr	r3, [r1, #4]
 80072de:	bf16      	itet	ne
 80072e0:	6063      	strne	r3, [r4, #4]
 80072e2:	6013      	streq	r3, [r2, #0]
 80072e4:	460c      	movne	r4, r1
 80072e6:	e7eb      	b.n	80072c0 <_malloc_r+0x64>
 80072e8:	460c      	mov	r4, r1
 80072ea:	6849      	ldr	r1, [r1, #4]
 80072ec:	e7cc      	b.n	8007288 <_malloc_r+0x2c>
 80072ee:	1cc4      	adds	r4, r0, #3
 80072f0:	f024 0403 	bic.w	r4, r4, #3
 80072f4:	42a0      	cmp	r0, r4
 80072f6:	d005      	beq.n	8007304 <_malloc_r+0xa8>
 80072f8:	1a21      	subs	r1, r4, r0
 80072fa:	4630      	mov	r0, r6
 80072fc:	f000 fce8 	bl	8007cd0 <_sbrk_r>
 8007300:	3001      	adds	r0, #1
 8007302:	d0cf      	beq.n	80072a4 <_malloc_r+0x48>
 8007304:	6025      	str	r5, [r4, #0]
 8007306:	e7db      	b.n	80072c0 <_malloc_r+0x64>
 8007308:	200015c8 	.word	0x200015c8
 800730c:	200015cc 	.word	0x200015cc

08007310 <__cvt>:
 8007310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	ec55 4b10 	vmov	r4, r5, d0
 8007318:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800731a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800731e:	2d00      	cmp	r5, #0
 8007320:	460e      	mov	r6, r1
 8007322:	4691      	mov	r9, r2
 8007324:	4619      	mov	r1, r3
 8007326:	bfb8      	it	lt
 8007328:	4622      	movlt	r2, r4
 800732a:	462b      	mov	r3, r5
 800732c:	f027 0720 	bic.w	r7, r7, #32
 8007330:	bfbb      	ittet	lt
 8007332:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007336:	461d      	movlt	r5, r3
 8007338:	2300      	movge	r3, #0
 800733a:	232d      	movlt	r3, #45	; 0x2d
 800733c:	bfb8      	it	lt
 800733e:	4614      	movlt	r4, r2
 8007340:	2f46      	cmp	r7, #70	; 0x46
 8007342:	700b      	strb	r3, [r1, #0]
 8007344:	d004      	beq.n	8007350 <__cvt+0x40>
 8007346:	2f45      	cmp	r7, #69	; 0x45
 8007348:	d100      	bne.n	800734c <__cvt+0x3c>
 800734a:	3601      	adds	r6, #1
 800734c:	2102      	movs	r1, #2
 800734e:	e000      	b.n	8007352 <__cvt+0x42>
 8007350:	2103      	movs	r1, #3
 8007352:	ab03      	add	r3, sp, #12
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	ab02      	add	r3, sp, #8
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	4632      	mov	r2, r6
 800735c:	4653      	mov	r3, sl
 800735e:	ec45 4b10 	vmov	d0, r4, r5
 8007362:	f000 fe11 	bl	8007f88 <_dtoa_r>
 8007366:	2f47      	cmp	r7, #71	; 0x47
 8007368:	4680      	mov	r8, r0
 800736a:	d102      	bne.n	8007372 <__cvt+0x62>
 800736c:	f019 0f01 	tst.w	r9, #1
 8007370:	d026      	beq.n	80073c0 <__cvt+0xb0>
 8007372:	2f46      	cmp	r7, #70	; 0x46
 8007374:	eb08 0906 	add.w	r9, r8, r6
 8007378:	d111      	bne.n	800739e <__cvt+0x8e>
 800737a:	f898 3000 	ldrb.w	r3, [r8]
 800737e:	2b30      	cmp	r3, #48	; 0x30
 8007380:	d10a      	bne.n	8007398 <__cvt+0x88>
 8007382:	2200      	movs	r2, #0
 8007384:	2300      	movs	r3, #0
 8007386:	4620      	mov	r0, r4
 8007388:	4629      	mov	r1, r5
 800738a:	f7f9 fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800738e:	b918      	cbnz	r0, 8007398 <__cvt+0x88>
 8007390:	f1c6 0601 	rsb	r6, r6, #1
 8007394:	f8ca 6000 	str.w	r6, [sl]
 8007398:	f8da 3000 	ldr.w	r3, [sl]
 800739c:	4499      	add	r9, r3
 800739e:	2200      	movs	r2, #0
 80073a0:	2300      	movs	r3, #0
 80073a2:	4620      	mov	r0, r4
 80073a4:	4629      	mov	r1, r5
 80073a6:	f7f9 fb97 	bl	8000ad8 <__aeabi_dcmpeq>
 80073aa:	b938      	cbnz	r0, 80073bc <__cvt+0xac>
 80073ac:	2230      	movs	r2, #48	; 0x30
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	454b      	cmp	r3, r9
 80073b2:	d205      	bcs.n	80073c0 <__cvt+0xb0>
 80073b4:	1c59      	adds	r1, r3, #1
 80073b6:	9103      	str	r1, [sp, #12]
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	e7f8      	b.n	80073ae <__cvt+0x9e>
 80073bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80073c0:	9b03      	ldr	r3, [sp, #12]
 80073c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073c4:	eba3 0308 	sub.w	r3, r3, r8
 80073c8:	4640      	mov	r0, r8
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	b004      	add	sp, #16
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080073d2 <__exponent>:
 80073d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073d4:	2900      	cmp	r1, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	bfba      	itte	lt
 80073da:	4249      	neglt	r1, r1
 80073dc:	232d      	movlt	r3, #45	; 0x2d
 80073de:	232b      	movge	r3, #43	; 0x2b
 80073e0:	2909      	cmp	r1, #9
 80073e2:	f804 2b02 	strb.w	r2, [r4], #2
 80073e6:	7043      	strb	r3, [r0, #1]
 80073e8:	dd20      	ble.n	800742c <__exponent+0x5a>
 80073ea:	f10d 0307 	add.w	r3, sp, #7
 80073ee:	461f      	mov	r7, r3
 80073f0:	260a      	movs	r6, #10
 80073f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80073f6:	fb06 1115 	mls	r1, r6, r5, r1
 80073fa:	3130      	adds	r1, #48	; 0x30
 80073fc:	2d09      	cmp	r5, #9
 80073fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007402:	f103 32ff 	add.w	r2, r3, #4294967295
 8007406:	4629      	mov	r1, r5
 8007408:	dc09      	bgt.n	800741e <__exponent+0x4c>
 800740a:	3130      	adds	r1, #48	; 0x30
 800740c:	3b02      	subs	r3, #2
 800740e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007412:	42bb      	cmp	r3, r7
 8007414:	4622      	mov	r2, r4
 8007416:	d304      	bcc.n	8007422 <__exponent+0x50>
 8007418:	1a10      	subs	r0, r2, r0
 800741a:	b003      	add	sp, #12
 800741c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800741e:	4613      	mov	r3, r2
 8007420:	e7e7      	b.n	80073f2 <__exponent+0x20>
 8007422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007426:	f804 2b01 	strb.w	r2, [r4], #1
 800742a:	e7f2      	b.n	8007412 <__exponent+0x40>
 800742c:	2330      	movs	r3, #48	; 0x30
 800742e:	4419      	add	r1, r3
 8007430:	7083      	strb	r3, [r0, #2]
 8007432:	1d02      	adds	r2, r0, #4
 8007434:	70c1      	strb	r1, [r0, #3]
 8007436:	e7ef      	b.n	8007418 <__exponent+0x46>

08007438 <_printf_float>:
 8007438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	b08d      	sub	sp, #52	; 0x34
 800743e:	460c      	mov	r4, r1
 8007440:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007444:	4616      	mov	r6, r2
 8007446:	461f      	mov	r7, r3
 8007448:	4605      	mov	r5, r0
 800744a:	f001 fccf 	bl	8008dec <_localeconv_r>
 800744e:	6803      	ldr	r3, [r0, #0]
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	4618      	mov	r0, r3
 8007454:	f7f8 fec4 	bl	80001e0 <strlen>
 8007458:	2300      	movs	r3, #0
 800745a:	930a      	str	r3, [sp, #40]	; 0x28
 800745c:	f8d8 3000 	ldr.w	r3, [r8]
 8007460:	9005      	str	r0, [sp, #20]
 8007462:	3307      	adds	r3, #7
 8007464:	f023 0307 	bic.w	r3, r3, #7
 8007468:	f103 0208 	add.w	r2, r3, #8
 800746c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007470:	f8d4 b000 	ldr.w	fp, [r4]
 8007474:	f8c8 2000 	str.w	r2, [r8]
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007480:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007484:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	f8cd 8018 	str.w	r8, [sp, #24]
 800748e:	f04f 32ff 	mov.w	r2, #4294967295
 8007492:	4ba7      	ldr	r3, [pc, #668]	; (8007730 <_printf_float+0x2f8>)
 8007494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007498:	f7f9 fb50 	bl	8000b3c <__aeabi_dcmpun>
 800749c:	bb70      	cbnz	r0, 80074fc <_printf_float+0xc4>
 800749e:	f04f 32ff 	mov.w	r2, #4294967295
 80074a2:	4ba3      	ldr	r3, [pc, #652]	; (8007730 <_printf_float+0x2f8>)
 80074a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074a8:	f7f9 fb2a 	bl	8000b00 <__aeabi_dcmple>
 80074ac:	bb30      	cbnz	r0, 80074fc <_printf_float+0xc4>
 80074ae:	2200      	movs	r2, #0
 80074b0:	2300      	movs	r3, #0
 80074b2:	4640      	mov	r0, r8
 80074b4:	4649      	mov	r1, r9
 80074b6:	f7f9 fb19 	bl	8000aec <__aeabi_dcmplt>
 80074ba:	b110      	cbz	r0, 80074c2 <_printf_float+0x8a>
 80074bc:	232d      	movs	r3, #45	; 0x2d
 80074be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c2:	4a9c      	ldr	r2, [pc, #624]	; (8007734 <_printf_float+0x2fc>)
 80074c4:	4b9c      	ldr	r3, [pc, #624]	; (8007738 <_printf_float+0x300>)
 80074c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80074ca:	bf8c      	ite	hi
 80074cc:	4690      	movhi	r8, r2
 80074ce:	4698      	movls	r8, r3
 80074d0:	2303      	movs	r3, #3
 80074d2:	f02b 0204 	bic.w	r2, fp, #4
 80074d6:	6123      	str	r3, [r4, #16]
 80074d8:	6022      	str	r2, [r4, #0]
 80074da:	f04f 0900 	mov.w	r9, #0
 80074de:	9700      	str	r7, [sp, #0]
 80074e0:	4633      	mov	r3, r6
 80074e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80074e4:	4621      	mov	r1, r4
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 f9e6 	bl	80078b8 <_printf_common>
 80074ec:	3001      	adds	r0, #1
 80074ee:	f040 808d 	bne.w	800760c <_printf_float+0x1d4>
 80074f2:	f04f 30ff 	mov.w	r0, #4294967295
 80074f6:	b00d      	add	sp, #52	; 0x34
 80074f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fc:	4642      	mov	r2, r8
 80074fe:	464b      	mov	r3, r9
 8007500:	4640      	mov	r0, r8
 8007502:	4649      	mov	r1, r9
 8007504:	f7f9 fb1a 	bl	8000b3c <__aeabi_dcmpun>
 8007508:	b110      	cbz	r0, 8007510 <_printf_float+0xd8>
 800750a:	4a8c      	ldr	r2, [pc, #560]	; (800773c <_printf_float+0x304>)
 800750c:	4b8c      	ldr	r3, [pc, #560]	; (8007740 <_printf_float+0x308>)
 800750e:	e7da      	b.n	80074c6 <_printf_float+0x8e>
 8007510:	6861      	ldr	r1, [r4, #4]
 8007512:	1c4b      	adds	r3, r1, #1
 8007514:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007518:	a80a      	add	r0, sp, #40	; 0x28
 800751a:	d13e      	bne.n	800759a <_printf_float+0x162>
 800751c:	2306      	movs	r3, #6
 800751e:	6063      	str	r3, [r4, #4]
 8007520:	2300      	movs	r3, #0
 8007522:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007526:	ab09      	add	r3, sp, #36	; 0x24
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	ec49 8b10 	vmov	d0, r8, r9
 800752e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007532:	6022      	str	r2, [r4, #0]
 8007534:	f8cd a004 	str.w	sl, [sp, #4]
 8007538:	6861      	ldr	r1, [r4, #4]
 800753a:	4628      	mov	r0, r5
 800753c:	f7ff fee8 	bl	8007310 <__cvt>
 8007540:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007544:	2b47      	cmp	r3, #71	; 0x47
 8007546:	4680      	mov	r8, r0
 8007548:	d109      	bne.n	800755e <_printf_float+0x126>
 800754a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754c:	1cd8      	adds	r0, r3, #3
 800754e:	db02      	blt.n	8007556 <_printf_float+0x11e>
 8007550:	6862      	ldr	r2, [r4, #4]
 8007552:	4293      	cmp	r3, r2
 8007554:	dd47      	ble.n	80075e6 <_printf_float+0x1ae>
 8007556:	f1aa 0a02 	sub.w	sl, sl, #2
 800755a:	fa5f fa8a 	uxtb.w	sl, sl
 800755e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007562:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007564:	d824      	bhi.n	80075b0 <_printf_float+0x178>
 8007566:	3901      	subs	r1, #1
 8007568:	4652      	mov	r2, sl
 800756a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800756e:	9109      	str	r1, [sp, #36]	; 0x24
 8007570:	f7ff ff2f 	bl	80073d2 <__exponent>
 8007574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007576:	1813      	adds	r3, r2, r0
 8007578:	2a01      	cmp	r2, #1
 800757a:	4681      	mov	r9, r0
 800757c:	6123      	str	r3, [r4, #16]
 800757e:	dc02      	bgt.n	8007586 <_printf_float+0x14e>
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	07d1      	lsls	r1, r2, #31
 8007584:	d501      	bpl.n	800758a <_printf_float+0x152>
 8007586:	3301      	adds	r3, #1
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0a5      	beq.n	80074de <_printf_float+0xa6>
 8007592:	232d      	movs	r3, #45	; 0x2d
 8007594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007598:	e7a1      	b.n	80074de <_printf_float+0xa6>
 800759a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800759e:	f000 8177 	beq.w	8007890 <_printf_float+0x458>
 80075a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80075a6:	d1bb      	bne.n	8007520 <_printf_float+0xe8>
 80075a8:	2900      	cmp	r1, #0
 80075aa:	d1b9      	bne.n	8007520 <_printf_float+0xe8>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e7b6      	b.n	800751e <_printf_float+0xe6>
 80075b0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80075b4:	d119      	bne.n	80075ea <_printf_float+0x1b2>
 80075b6:	2900      	cmp	r1, #0
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	dd0c      	ble.n	80075d6 <_printf_float+0x19e>
 80075bc:	6121      	str	r1, [r4, #16]
 80075be:	b913      	cbnz	r3, 80075c6 <_printf_float+0x18e>
 80075c0:	6822      	ldr	r2, [r4, #0]
 80075c2:	07d2      	lsls	r2, r2, #31
 80075c4:	d502      	bpl.n	80075cc <_printf_float+0x194>
 80075c6:	3301      	adds	r3, #1
 80075c8:	440b      	add	r3, r1
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80075d0:	f04f 0900 	mov.w	r9, #0
 80075d4:	e7d9      	b.n	800758a <_printf_float+0x152>
 80075d6:	b913      	cbnz	r3, 80075de <_printf_float+0x1a6>
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	07d0      	lsls	r0, r2, #31
 80075dc:	d501      	bpl.n	80075e2 <_printf_float+0x1aa>
 80075de:	3302      	adds	r3, #2
 80075e0:	e7f3      	b.n	80075ca <_printf_float+0x192>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e7f1      	b.n	80075ca <_printf_float+0x192>
 80075e6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80075ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80075ee:	4293      	cmp	r3, r2
 80075f0:	db05      	blt.n	80075fe <_printf_float+0x1c6>
 80075f2:	6822      	ldr	r2, [r4, #0]
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	07d1      	lsls	r1, r2, #31
 80075f8:	d5e8      	bpl.n	80075cc <_printf_float+0x194>
 80075fa:	3301      	adds	r3, #1
 80075fc:	e7e5      	b.n	80075ca <_printf_float+0x192>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bfd4      	ite	le
 8007602:	f1c3 0302 	rsble	r3, r3, #2
 8007606:	2301      	movgt	r3, #1
 8007608:	4413      	add	r3, r2
 800760a:	e7de      	b.n	80075ca <_printf_float+0x192>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	055a      	lsls	r2, r3, #21
 8007610:	d407      	bmi.n	8007622 <_printf_float+0x1ea>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	4642      	mov	r2, r8
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	d12b      	bne.n	8007678 <_printf_float+0x240>
 8007620:	e767      	b.n	80074f2 <_printf_float+0xba>
 8007622:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007626:	f240 80dc 	bls.w	80077e2 <_printf_float+0x3aa>
 800762a:	2200      	movs	r2, #0
 800762c:	2300      	movs	r3, #0
 800762e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007632:	f7f9 fa51 	bl	8000ad8 <__aeabi_dcmpeq>
 8007636:	2800      	cmp	r0, #0
 8007638:	d033      	beq.n	80076a2 <_printf_float+0x26a>
 800763a:	2301      	movs	r3, #1
 800763c:	4a41      	ldr	r2, [pc, #260]	; (8007744 <_printf_float+0x30c>)
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	47b8      	blx	r7
 8007644:	3001      	adds	r0, #1
 8007646:	f43f af54 	beq.w	80074f2 <_printf_float+0xba>
 800764a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800764e:	429a      	cmp	r2, r3
 8007650:	db02      	blt.n	8007658 <_printf_float+0x220>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	07d8      	lsls	r0, r3, #31
 8007656:	d50f      	bpl.n	8007678 <_printf_float+0x240>
 8007658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f af45 	beq.w	80074f2 <_printf_float+0xba>
 8007668:	f04f 0800 	mov.w	r8, #0
 800766c:	f104 091a 	add.w	r9, r4, #26
 8007670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007672:	3b01      	subs	r3, #1
 8007674:	4543      	cmp	r3, r8
 8007676:	dc09      	bgt.n	800768c <_printf_float+0x254>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	079b      	lsls	r3, r3, #30
 800767c:	f100 8103 	bmi.w	8007886 <_printf_float+0x44e>
 8007680:	68e0      	ldr	r0, [r4, #12]
 8007682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007684:	4298      	cmp	r0, r3
 8007686:	bfb8      	it	lt
 8007688:	4618      	movlt	r0, r3
 800768a:	e734      	b.n	80074f6 <_printf_float+0xbe>
 800768c:	2301      	movs	r3, #1
 800768e:	464a      	mov	r2, r9
 8007690:	4631      	mov	r1, r6
 8007692:	4628      	mov	r0, r5
 8007694:	47b8      	blx	r7
 8007696:	3001      	adds	r0, #1
 8007698:	f43f af2b 	beq.w	80074f2 <_printf_float+0xba>
 800769c:	f108 0801 	add.w	r8, r8, #1
 80076a0:	e7e6      	b.n	8007670 <_printf_float+0x238>
 80076a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dc2b      	bgt.n	8007700 <_printf_float+0x2c8>
 80076a8:	2301      	movs	r3, #1
 80076aa:	4a26      	ldr	r2, [pc, #152]	; (8007744 <_printf_float+0x30c>)
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	f43f af1d 	beq.w	80074f2 <_printf_float+0xba>
 80076b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ba:	b923      	cbnz	r3, 80076c6 <_printf_float+0x28e>
 80076bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076be:	b913      	cbnz	r3, 80076c6 <_printf_float+0x28e>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	07d9      	lsls	r1, r3, #31
 80076c4:	d5d8      	bpl.n	8007678 <_printf_float+0x240>
 80076c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ca:	4631      	mov	r1, r6
 80076cc:	4628      	mov	r0, r5
 80076ce:	47b8      	blx	r7
 80076d0:	3001      	adds	r0, #1
 80076d2:	f43f af0e 	beq.w	80074f2 <_printf_float+0xba>
 80076d6:	f04f 0900 	mov.w	r9, #0
 80076da:	f104 0a1a 	add.w	sl, r4, #26
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	425b      	negs	r3, r3
 80076e2:	454b      	cmp	r3, r9
 80076e4:	dc01      	bgt.n	80076ea <_printf_float+0x2b2>
 80076e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e8:	e794      	b.n	8007614 <_printf_float+0x1dc>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4652      	mov	r2, sl
 80076ee:	4631      	mov	r1, r6
 80076f0:	4628      	mov	r0, r5
 80076f2:	47b8      	blx	r7
 80076f4:	3001      	adds	r0, #1
 80076f6:	f43f aefc 	beq.w	80074f2 <_printf_float+0xba>
 80076fa:	f109 0901 	add.w	r9, r9, #1
 80076fe:	e7ee      	b.n	80076de <_printf_float+0x2a6>
 8007700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007704:	429a      	cmp	r2, r3
 8007706:	bfa8      	it	ge
 8007708:	461a      	movge	r2, r3
 800770a:	2a00      	cmp	r2, #0
 800770c:	4691      	mov	r9, r2
 800770e:	dd07      	ble.n	8007720 <_printf_float+0x2e8>
 8007710:	4613      	mov	r3, r2
 8007712:	4631      	mov	r1, r6
 8007714:	4642      	mov	r2, r8
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	f43f aee9 	beq.w	80074f2 <_printf_float+0xba>
 8007720:	f104 031a 	add.w	r3, r4, #26
 8007724:	f04f 0b00 	mov.w	fp, #0
 8007728:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800772c:	9306      	str	r3, [sp, #24]
 800772e:	e015      	b.n	800775c <_printf_float+0x324>
 8007730:	7fefffff 	.word	0x7fefffff
 8007734:	08065814 	.word	0x08065814
 8007738:	08065810 	.word	0x08065810
 800773c:	0806581c 	.word	0x0806581c
 8007740:	08065818 	.word	0x08065818
 8007744:	08065820 	.word	0x08065820
 8007748:	2301      	movs	r3, #1
 800774a:	9a06      	ldr	r2, [sp, #24]
 800774c:	4631      	mov	r1, r6
 800774e:	4628      	mov	r0, r5
 8007750:	47b8      	blx	r7
 8007752:	3001      	adds	r0, #1
 8007754:	f43f aecd 	beq.w	80074f2 <_printf_float+0xba>
 8007758:	f10b 0b01 	add.w	fp, fp, #1
 800775c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007760:	ebaa 0309 	sub.w	r3, sl, r9
 8007764:	455b      	cmp	r3, fp
 8007766:	dcef      	bgt.n	8007748 <_printf_float+0x310>
 8007768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800776c:	429a      	cmp	r2, r3
 800776e:	44d0      	add	r8, sl
 8007770:	db15      	blt.n	800779e <_printf_float+0x366>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	07da      	lsls	r2, r3, #31
 8007776:	d412      	bmi.n	800779e <_printf_float+0x366>
 8007778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800777c:	eba3 020a 	sub.w	r2, r3, sl
 8007780:	eba3 0a01 	sub.w	sl, r3, r1
 8007784:	4592      	cmp	sl, r2
 8007786:	bfa8      	it	ge
 8007788:	4692      	movge	sl, r2
 800778a:	f1ba 0f00 	cmp.w	sl, #0
 800778e:	dc0e      	bgt.n	80077ae <_printf_float+0x376>
 8007790:	f04f 0800 	mov.w	r8, #0
 8007794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007798:	f104 091a 	add.w	r9, r4, #26
 800779c:	e019      	b.n	80077d2 <_printf_float+0x39a>
 800779e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	d1e5      	bne.n	8007778 <_printf_float+0x340>
 80077ac:	e6a1      	b.n	80074f2 <_printf_float+0xba>
 80077ae:	4653      	mov	r3, sl
 80077b0:	4642      	mov	r2, r8
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	d1e9      	bne.n	8007790 <_printf_float+0x358>
 80077bc:	e699      	b.n	80074f2 <_printf_float+0xba>
 80077be:	2301      	movs	r3, #1
 80077c0:	464a      	mov	r2, r9
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f ae92 	beq.w	80074f2 <_printf_float+0xba>
 80077ce:	f108 0801 	add.w	r8, r8, #1
 80077d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	eba3 030a 	sub.w	r3, r3, sl
 80077dc:	4543      	cmp	r3, r8
 80077de:	dcee      	bgt.n	80077be <_printf_float+0x386>
 80077e0:	e74a      	b.n	8007678 <_printf_float+0x240>
 80077e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077e4:	2a01      	cmp	r2, #1
 80077e6:	dc01      	bgt.n	80077ec <_printf_float+0x3b4>
 80077e8:	07db      	lsls	r3, r3, #31
 80077ea:	d53a      	bpl.n	8007862 <_printf_float+0x42a>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4642      	mov	r2, r8
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f ae7b 	beq.w	80074f2 <_printf_float+0xba>
 80077fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f108 0801 	add.w	r8, r8, #1
 800780c:	f43f ae71 	beq.w	80074f2 <_printf_float+0xba>
 8007810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007812:	2200      	movs	r2, #0
 8007814:	f103 3aff 	add.w	sl, r3, #4294967295
 8007818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800781c:	2300      	movs	r3, #0
 800781e:	f7f9 f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007822:	b9c8      	cbnz	r0, 8007858 <_printf_float+0x420>
 8007824:	4653      	mov	r3, sl
 8007826:	4642      	mov	r2, r8
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	d10e      	bne.n	8007850 <_printf_float+0x418>
 8007832:	e65e      	b.n	80074f2 <_printf_float+0xba>
 8007834:	2301      	movs	r3, #1
 8007836:	4652      	mov	r2, sl
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	f43f ae57 	beq.w	80074f2 <_printf_float+0xba>
 8007844:	f108 0801 	add.w	r8, r8, #1
 8007848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784a:	3b01      	subs	r3, #1
 800784c:	4543      	cmp	r3, r8
 800784e:	dcf1      	bgt.n	8007834 <_printf_float+0x3fc>
 8007850:	464b      	mov	r3, r9
 8007852:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007856:	e6de      	b.n	8007616 <_printf_float+0x1de>
 8007858:	f04f 0800 	mov.w	r8, #0
 800785c:	f104 0a1a 	add.w	sl, r4, #26
 8007860:	e7f2      	b.n	8007848 <_printf_float+0x410>
 8007862:	2301      	movs	r3, #1
 8007864:	e7df      	b.n	8007826 <_printf_float+0x3ee>
 8007866:	2301      	movs	r3, #1
 8007868:	464a      	mov	r2, r9
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	f43f ae3e 	beq.w	80074f2 <_printf_float+0xba>
 8007876:	f108 0801 	add.w	r8, r8, #1
 800787a:	68e3      	ldr	r3, [r4, #12]
 800787c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	4543      	cmp	r3, r8
 8007882:	dcf0      	bgt.n	8007866 <_printf_float+0x42e>
 8007884:	e6fc      	b.n	8007680 <_printf_float+0x248>
 8007886:	f04f 0800 	mov.w	r8, #0
 800788a:	f104 0919 	add.w	r9, r4, #25
 800788e:	e7f4      	b.n	800787a <_printf_float+0x442>
 8007890:	2900      	cmp	r1, #0
 8007892:	f43f ae8b 	beq.w	80075ac <_printf_float+0x174>
 8007896:	2300      	movs	r3, #0
 8007898:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800789c:	ab09      	add	r3, sp, #36	; 0x24
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	ec49 8b10 	vmov	d0, r8, r9
 80078a4:	6022      	str	r2, [r4, #0]
 80078a6:	f8cd a004 	str.w	sl, [sp, #4]
 80078aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078ae:	4628      	mov	r0, r5
 80078b0:	f7ff fd2e 	bl	8007310 <__cvt>
 80078b4:	4680      	mov	r8, r0
 80078b6:	e648      	b.n	800754a <_printf_float+0x112>

080078b8 <_printf_common>:
 80078b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	4691      	mov	r9, r2
 80078be:	461f      	mov	r7, r3
 80078c0:	688a      	ldr	r2, [r1, #8]
 80078c2:	690b      	ldr	r3, [r1, #16]
 80078c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078c8:	4293      	cmp	r3, r2
 80078ca:	bfb8      	it	lt
 80078cc:	4613      	movlt	r3, r2
 80078ce:	f8c9 3000 	str.w	r3, [r9]
 80078d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078d6:	4606      	mov	r6, r0
 80078d8:	460c      	mov	r4, r1
 80078da:	b112      	cbz	r2, 80078e2 <_printf_common+0x2a>
 80078dc:	3301      	adds	r3, #1
 80078de:	f8c9 3000 	str.w	r3, [r9]
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	0699      	lsls	r1, r3, #26
 80078e6:	bf42      	ittt	mi
 80078e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078ec:	3302      	addmi	r3, #2
 80078ee:	f8c9 3000 	strmi.w	r3, [r9]
 80078f2:	6825      	ldr	r5, [r4, #0]
 80078f4:	f015 0506 	ands.w	r5, r5, #6
 80078f8:	d107      	bne.n	800790a <_printf_common+0x52>
 80078fa:	f104 0a19 	add.w	sl, r4, #25
 80078fe:	68e3      	ldr	r3, [r4, #12]
 8007900:	f8d9 2000 	ldr.w	r2, [r9]
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	42ab      	cmp	r3, r5
 8007908:	dc28      	bgt.n	800795c <_printf_common+0xa4>
 800790a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800790e:	6822      	ldr	r2, [r4, #0]
 8007910:	3300      	adds	r3, #0
 8007912:	bf18      	it	ne
 8007914:	2301      	movne	r3, #1
 8007916:	0692      	lsls	r2, r2, #26
 8007918:	d42d      	bmi.n	8007976 <_printf_common+0xbe>
 800791a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800791e:	4639      	mov	r1, r7
 8007920:	4630      	mov	r0, r6
 8007922:	47c0      	blx	r8
 8007924:	3001      	adds	r0, #1
 8007926:	d020      	beq.n	800796a <_printf_common+0xb2>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	68e5      	ldr	r5, [r4, #12]
 800792c:	f8d9 2000 	ldr.w	r2, [r9]
 8007930:	f003 0306 	and.w	r3, r3, #6
 8007934:	2b04      	cmp	r3, #4
 8007936:	bf08      	it	eq
 8007938:	1aad      	subeq	r5, r5, r2
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	6922      	ldr	r2, [r4, #16]
 800793e:	bf0c      	ite	eq
 8007940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007944:	2500      	movne	r5, #0
 8007946:	4293      	cmp	r3, r2
 8007948:	bfc4      	itt	gt
 800794a:	1a9b      	subgt	r3, r3, r2
 800794c:	18ed      	addgt	r5, r5, r3
 800794e:	f04f 0900 	mov.w	r9, #0
 8007952:	341a      	adds	r4, #26
 8007954:	454d      	cmp	r5, r9
 8007956:	d11a      	bne.n	800798e <_printf_common+0xd6>
 8007958:	2000      	movs	r0, #0
 800795a:	e008      	b.n	800796e <_printf_common+0xb6>
 800795c:	2301      	movs	r3, #1
 800795e:	4652      	mov	r2, sl
 8007960:	4639      	mov	r1, r7
 8007962:	4630      	mov	r0, r6
 8007964:	47c0      	blx	r8
 8007966:	3001      	adds	r0, #1
 8007968:	d103      	bne.n	8007972 <_printf_common+0xba>
 800796a:	f04f 30ff 	mov.w	r0, #4294967295
 800796e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007972:	3501      	adds	r5, #1
 8007974:	e7c3      	b.n	80078fe <_printf_common+0x46>
 8007976:	18e1      	adds	r1, r4, r3
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	2030      	movs	r0, #48	; 0x30
 800797c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007980:	4422      	add	r2, r4
 8007982:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800798a:	3302      	adds	r3, #2
 800798c:	e7c5      	b.n	800791a <_printf_common+0x62>
 800798e:	2301      	movs	r3, #1
 8007990:	4622      	mov	r2, r4
 8007992:	4639      	mov	r1, r7
 8007994:	4630      	mov	r0, r6
 8007996:	47c0      	blx	r8
 8007998:	3001      	adds	r0, #1
 800799a:	d0e6      	beq.n	800796a <_printf_common+0xb2>
 800799c:	f109 0901 	add.w	r9, r9, #1
 80079a0:	e7d8      	b.n	8007954 <_printf_common+0x9c>
	...

080079a4 <_printf_i>:
 80079a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80079ac:	460c      	mov	r4, r1
 80079ae:	7e09      	ldrb	r1, [r1, #24]
 80079b0:	b085      	sub	sp, #20
 80079b2:	296e      	cmp	r1, #110	; 0x6e
 80079b4:	4617      	mov	r7, r2
 80079b6:	4606      	mov	r6, r0
 80079b8:	4698      	mov	r8, r3
 80079ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079bc:	f000 80b3 	beq.w	8007b26 <_printf_i+0x182>
 80079c0:	d822      	bhi.n	8007a08 <_printf_i+0x64>
 80079c2:	2963      	cmp	r1, #99	; 0x63
 80079c4:	d036      	beq.n	8007a34 <_printf_i+0x90>
 80079c6:	d80a      	bhi.n	80079de <_printf_i+0x3a>
 80079c8:	2900      	cmp	r1, #0
 80079ca:	f000 80b9 	beq.w	8007b40 <_printf_i+0x19c>
 80079ce:	2958      	cmp	r1, #88	; 0x58
 80079d0:	f000 8083 	beq.w	8007ada <_printf_i+0x136>
 80079d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80079dc:	e032      	b.n	8007a44 <_printf_i+0xa0>
 80079de:	2964      	cmp	r1, #100	; 0x64
 80079e0:	d001      	beq.n	80079e6 <_printf_i+0x42>
 80079e2:	2969      	cmp	r1, #105	; 0x69
 80079e4:	d1f6      	bne.n	80079d4 <_printf_i+0x30>
 80079e6:	6820      	ldr	r0, [r4, #0]
 80079e8:	6813      	ldr	r3, [r2, #0]
 80079ea:	0605      	lsls	r5, r0, #24
 80079ec:	f103 0104 	add.w	r1, r3, #4
 80079f0:	d52a      	bpl.n	8007a48 <_printf_i+0xa4>
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6011      	str	r1, [r2, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da03      	bge.n	8007a02 <_printf_i+0x5e>
 80079fa:	222d      	movs	r2, #45	; 0x2d
 80079fc:	425b      	negs	r3, r3
 80079fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a02:	486f      	ldr	r0, [pc, #444]	; (8007bc0 <_printf_i+0x21c>)
 8007a04:	220a      	movs	r2, #10
 8007a06:	e039      	b.n	8007a7c <_printf_i+0xd8>
 8007a08:	2973      	cmp	r1, #115	; 0x73
 8007a0a:	f000 809d 	beq.w	8007b48 <_printf_i+0x1a4>
 8007a0e:	d808      	bhi.n	8007a22 <_printf_i+0x7e>
 8007a10:	296f      	cmp	r1, #111	; 0x6f
 8007a12:	d020      	beq.n	8007a56 <_printf_i+0xb2>
 8007a14:	2970      	cmp	r1, #112	; 0x70
 8007a16:	d1dd      	bne.n	80079d4 <_printf_i+0x30>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	f043 0320 	orr.w	r3, r3, #32
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	e003      	b.n	8007a2a <_printf_i+0x86>
 8007a22:	2975      	cmp	r1, #117	; 0x75
 8007a24:	d017      	beq.n	8007a56 <_printf_i+0xb2>
 8007a26:	2978      	cmp	r1, #120	; 0x78
 8007a28:	d1d4      	bne.n	80079d4 <_printf_i+0x30>
 8007a2a:	2378      	movs	r3, #120	; 0x78
 8007a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a30:	4864      	ldr	r0, [pc, #400]	; (8007bc4 <_printf_i+0x220>)
 8007a32:	e055      	b.n	8007ae0 <_printf_i+0x13c>
 8007a34:	6813      	ldr	r3, [r2, #0]
 8007a36:	1d19      	adds	r1, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6011      	str	r1, [r2, #0]
 8007a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a44:	2301      	movs	r3, #1
 8007a46:	e08c      	b.n	8007b62 <_printf_i+0x1be>
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6011      	str	r1, [r2, #0]
 8007a4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a50:	bf18      	it	ne
 8007a52:	b21b      	sxthne	r3, r3
 8007a54:	e7cf      	b.n	80079f6 <_printf_i+0x52>
 8007a56:	6813      	ldr	r3, [r2, #0]
 8007a58:	6825      	ldr	r5, [r4, #0]
 8007a5a:	1d18      	adds	r0, r3, #4
 8007a5c:	6010      	str	r0, [r2, #0]
 8007a5e:	0628      	lsls	r0, r5, #24
 8007a60:	d501      	bpl.n	8007a66 <_printf_i+0xc2>
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	e002      	b.n	8007a6c <_printf_i+0xc8>
 8007a66:	0668      	lsls	r0, r5, #25
 8007a68:	d5fb      	bpl.n	8007a62 <_printf_i+0xbe>
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	4854      	ldr	r0, [pc, #336]	; (8007bc0 <_printf_i+0x21c>)
 8007a6e:	296f      	cmp	r1, #111	; 0x6f
 8007a70:	bf14      	ite	ne
 8007a72:	220a      	movne	r2, #10
 8007a74:	2208      	moveq	r2, #8
 8007a76:	2100      	movs	r1, #0
 8007a78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a7c:	6865      	ldr	r5, [r4, #4]
 8007a7e:	60a5      	str	r5, [r4, #8]
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	f2c0 8095 	blt.w	8007bb0 <_printf_i+0x20c>
 8007a86:	6821      	ldr	r1, [r4, #0]
 8007a88:	f021 0104 	bic.w	r1, r1, #4
 8007a8c:	6021      	str	r1, [r4, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d13d      	bne.n	8007b0e <_printf_i+0x16a>
 8007a92:	2d00      	cmp	r5, #0
 8007a94:	f040 808e 	bne.w	8007bb4 <_printf_i+0x210>
 8007a98:	4665      	mov	r5, ip
 8007a9a:	2a08      	cmp	r2, #8
 8007a9c:	d10b      	bne.n	8007ab6 <_printf_i+0x112>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	07db      	lsls	r3, r3, #31
 8007aa2:	d508      	bpl.n	8007ab6 <_printf_i+0x112>
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	6862      	ldr	r2, [r4, #4]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	bfde      	ittt	le
 8007aac:	2330      	movle	r3, #48	; 0x30
 8007aae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ab2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ab6:	ebac 0305 	sub.w	r3, ip, r5
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	f8cd 8000 	str.w	r8, [sp]
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	aa03      	add	r2, sp, #12
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f7ff fef6 	bl	80078b8 <_printf_common>
 8007acc:	3001      	adds	r0, #1
 8007ace:	d14d      	bne.n	8007b6c <_printf_i+0x1c8>
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	b005      	add	sp, #20
 8007ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ada:	4839      	ldr	r0, [pc, #228]	; (8007bc0 <_printf_i+0x21c>)
 8007adc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ae0:	6813      	ldr	r3, [r2, #0]
 8007ae2:	6821      	ldr	r1, [r4, #0]
 8007ae4:	1d1d      	adds	r5, r3, #4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6015      	str	r5, [r2, #0]
 8007aea:	060a      	lsls	r2, r1, #24
 8007aec:	d50b      	bpl.n	8007b06 <_printf_i+0x162>
 8007aee:	07ca      	lsls	r2, r1, #31
 8007af0:	bf44      	itt	mi
 8007af2:	f041 0120 	orrmi.w	r1, r1, #32
 8007af6:	6021      	strmi	r1, [r4, #0]
 8007af8:	b91b      	cbnz	r3, 8007b02 <_printf_i+0x15e>
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	f022 0220 	bic.w	r2, r2, #32
 8007b00:	6022      	str	r2, [r4, #0]
 8007b02:	2210      	movs	r2, #16
 8007b04:	e7b7      	b.n	8007a76 <_printf_i+0xd2>
 8007b06:	064d      	lsls	r5, r1, #25
 8007b08:	bf48      	it	mi
 8007b0a:	b29b      	uxthmi	r3, r3
 8007b0c:	e7ef      	b.n	8007aee <_printf_i+0x14a>
 8007b0e:	4665      	mov	r5, ip
 8007b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b14:	fb02 3311 	mls	r3, r2, r1, r3
 8007b18:	5cc3      	ldrb	r3, [r0, r3]
 8007b1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b1e:	460b      	mov	r3, r1
 8007b20:	2900      	cmp	r1, #0
 8007b22:	d1f5      	bne.n	8007b10 <_printf_i+0x16c>
 8007b24:	e7b9      	b.n	8007a9a <_printf_i+0xf6>
 8007b26:	6813      	ldr	r3, [r2, #0]
 8007b28:	6825      	ldr	r5, [r4, #0]
 8007b2a:	6961      	ldr	r1, [r4, #20]
 8007b2c:	1d18      	adds	r0, r3, #4
 8007b2e:	6010      	str	r0, [r2, #0]
 8007b30:	0628      	lsls	r0, r5, #24
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	d501      	bpl.n	8007b3a <_printf_i+0x196>
 8007b36:	6019      	str	r1, [r3, #0]
 8007b38:	e002      	b.n	8007b40 <_printf_i+0x19c>
 8007b3a:	066a      	lsls	r2, r5, #25
 8007b3c:	d5fb      	bpl.n	8007b36 <_printf_i+0x192>
 8007b3e:	8019      	strh	r1, [r3, #0]
 8007b40:	2300      	movs	r3, #0
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	4665      	mov	r5, ip
 8007b46:	e7b9      	b.n	8007abc <_printf_i+0x118>
 8007b48:	6813      	ldr	r3, [r2, #0]
 8007b4a:	1d19      	adds	r1, r3, #4
 8007b4c:	6011      	str	r1, [r2, #0]
 8007b4e:	681d      	ldr	r5, [r3, #0]
 8007b50:	6862      	ldr	r2, [r4, #4]
 8007b52:	2100      	movs	r1, #0
 8007b54:	4628      	mov	r0, r5
 8007b56:	f7f8 fb4b 	bl	80001f0 <memchr>
 8007b5a:	b108      	cbz	r0, 8007b60 <_printf_i+0x1bc>
 8007b5c:	1b40      	subs	r0, r0, r5
 8007b5e:	6060      	str	r0, [r4, #4]
 8007b60:	6863      	ldr	r3, [r4, #4]
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	2300      	movs	r3, #0
 8007b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b6a:	e7a7      	b.n	8007abc <_printf_i+0x118>
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4639      	mov	r1, r7
 8007b72:	4630      	mov	r0, r6
 8007b74:	47c0      	blx	r8
 8007b76:	3001      	adds	r0, #1
 8007b78:	d0aa      	beq.n	8007ad0 <_printf_i+0x12c>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	079b      	lsls	r3, r3, #30
 8007b7e:	d413      	bmi.n	8007ba8 <_printf_i+0x204>
 8007b80:	68e0      	ldr	r0, [r4, #12]
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	4298      	cmp	r0, r3
 8007b86:	bfb8      	it	lt
 8007b88:	4618      	movlt	r0, r3
 8007b8a:	e7a3      	b.n	8007ad4 <_printf_i+0x130>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	464a      	mov	r2, r9
 8007b90:	4639      	mov	r1, r7
 8007b92:	4630      	mov	r0, r6
 8007b94:	47c0      	blx	r8
 8007b96:	3001      	adds	r0, #1
 8007b98:	d09a      	beq.n	8007ad0 <_printf_i+0x12c>
 8007b9a:	3501      	adds	r5, #1
 8007b9c:	68e3      	ldr	r3, [r4, #12]
 8007b9e:	9a03      	ldr	r2, [sp, #12]
 8007ba0:	1a9b      	subs	r3, r3, r2
 8007ba2:	42ab      	cmp	r3, r5
 8007ba4:	dcf2      	bgt.n	8007b8c <_printf_i+0x1e8>
 8007ba6:	e7eb      	b.n	8007b80 <_printf_i+0x1dc>
 8007ba8:	2500      	movs	r5, #0
 8007baa:	f104 0919 	add.w	r9, r4, #25
 8007bae:	e7f5      	b.n	8007b9c <_printf_i+0x1f8>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1ac      	bne.n	8007b0e <_printf_i+0x16a>
 8007bb4:	7803      	ldrb	r3, [r0, #0]
 8007bb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bbe:	e76c      	b.n	8007a9a <_printf_i+0xf6>
 8007bc0:	08065822 	.word	0x08065822
 8007bc4:	08065833 	.word	0x08065833

08007bc8 <iprintf>:
 8007bc8:	b40f      	push	{r0, r1, r2, r3}
 8007bca:	4b0a      	ldr	r3, [pc, #40]	; (8007bf4 <iprintf+0x2c>)
 8007bcc:	b513      	push	{r0, r1, r4, lr}
 8007bce:	681c      	ldr	r4, [r3, #0]
 8007bd0:	b124      	cbz	r4, 8007bdc <iprintf+0x14>
 8007bd2:	69a3      	ldr	r3, [r4, #24]
 8007bd4:	b913      	cbnz	r3, 8007bdc <iprintf+0x14>
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f001 f87e 	bl	8008cd8 <__sinit>
 8007bdc:	ab05      	add	r3, sp, #20
 8007bde:	9a04      	ldr	r2, [sp, #16]
 8007be0:	68a1      	ldr	r1, [r4, #8]
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	4620      	mov	r0, r4
 8007be6:	f001 fca1 	bl	800952c <_vfiprintf_r>
 8007bea:	b002      	add	sp, #8
 8007bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf0:	b004      	add	sp, #16
 8007bf2:	4770      	bx	lr
 8007bf4:	20000ed0 	.word	0x20000ed0

08007bf8 <_puts_r>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	460e      	mov	r6, r1
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	b118      	cbz	r0, 8007c08 <_puts_r+0x10>
 8007c00:	6983      	ldr	r3, [r0, #24]
 8007c02:	b90b      	cbnz	r3, 8007c08 <_puts_r+0x10>
 8007c04:	f001 f868 	bl	8008cd8 <__sinit>
 8007c08:	69ab      	ldr	r3, [r5, #24]
 8007c0a:	68ac      	ldr	r4, [r5, #8]
 8007c0c:	b913      	cbnz	r3, 8007c14 <_puts_r+0x1c>
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f001 f862 	bl	8008cd8 <__sinit>
 8007c14:	4b23      	ldr	r3, [pc, #140]	; (8007ca4 <_puts_r+0xac>)
 8007c16:	429c      	cmp	r4, r3
 8007c18:	d117      	bne.n	8007c4a <_puts_r+0x52>
 8007c1a:	686c      	ldr	r4, [r5, #4]
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	071b      	lsls	r3, r3, #28
 8007c20:	d51d      	bpl.n	8007c5e <_puts_r+0x66>
 8007c22:	6923      	ldr	r3, [r4, #16]
 8007c24:	b1db      	cbz	r3, 8007c5e <_puts_r+0x66>
 8007c26:	3e01      	subs	r6, #1
 8007c28:	68a3      	ldr	r3, [r4, #8]
 8007c2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	60a3      	str	r3, [r4, #8]
 8007c32:	b9e9      	cbnz	r1, 8007c70 <_puts_r+0x78>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	da2e      	bge.n	8007c96 <_puts_r+0x9e>
 8007c38:	4622      	mov	r2, r4
 8007c3a:	210a      	movs	r1, #10
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 f857 	bl	8007cf0 <__swbuf_r>
 8007c42:	3001      	adds	r0, #1
 8007c44:	d011      	beq.n	8007c6a <_puts_r+0x72>
 8007c46:	200a      	movs	r0, #10
 8007c48:	e011      	b.n	8007c6e <_puts_r+0x76>
 8007c4a:	4b17      	ldr	r3, [pc, #92]	; (8007ca8 <_puts_r+0xb0>)
 8007c4c:	429c      	cmp	r4, r3
 8007c4e:	d101      	bne.n	8007c54 <_puts_r+0x5c>
 8007c50:	68ac      	ldr	r4, [r5, #8]
 8007c52:	e7e3      	b.n	8007c1c <_puts_r+0x24>
 8007c54:	4b15      	ldr	r3, [pc, #84]	; (8007cac <_puts_r+0xb4>)
 8007c56:	429c      	cmp	r4, r3
 8007c58:	bf08      	it	eq
 8007c5a:	68ec      	ldreq	r4, [r5, #12]
 8007c5c:	e7de      	b.n	8007c1c <_puts_r+0x24>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f000 f897 	bl	8007d94 <__swsetup_r>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d0dd      	beq.n	8007c26 <_puts_r+0x2e>
 8007c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	da04      	bge.n	8007c7e <_puts_r+0x86>
 8007c74:	69a2      	ldr	r2, [r4, #24]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	dc06      	bgt.n	8007c88 <_puts_r+0x90>
 8007c7a:	290a      	cmp	r1, #10
 8007c7c:	d004      	beq.n	8007c88 <_puts_r+0x90>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	6022      	str	r2, [r4, #0]
 8007c84:	7019      	strb	r1, [r3, #0]
 8007c86:	e7cf      	b.n	8007c28 <_puts_r+0x30>
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 f830 	bl	8007cf0 <__swbuf_r>
 8007c90:	3001      	adds	r0, #1
 8007c92:	d1c9      	bne.n	8007c28 <_puts_r+0x30>
 8007c94:	e7e9      	b.n	8007c6a <_puts_r+0x72>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	200a      	movs	r0, #10
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	6022      	str	r2, [r4, #0]
 8007c9e:	7018      	strb	r0, [r3, #0]
 8007ca0:	e7e5      	b.n	8007c6e <_puts_r+0x76>
 8007ca2:	bf00      	nop
 8007ca4:	08065874 	.word	0x08065874
 8007ca8:	08065894 	.word	0x08065894
 8007cac:	08065854 	.word	0x08065854

08007cb0 <puts>:
 8007cb0:	4b02      	ldr	r3, [pc, #8]	; (8007cbc <puts+0xc>)
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	f7ff bf9f 	b.w	8007bf8 <_puts_r>
 8007cba:	bf00      	nop
 8007cbc:	20000ed0 	.word	0x20000ed0

08007cc0 <realloc>:
 8007cc0:	4b02      	ldr	r3, [pc, #8]	; (8007ccc <realloc+0xc>)
 8007cc2:	460a      	mov	r2, r1
 8007cc4:	4601      	mov	r1, r0
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	f001 bbe0 	b.w	800948c <_realloc_r>
 8007ccc:	20000ed0 	.word	0x20000ed0

08007cd0 <_sbrk_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4c06      	ldr	r4, [pc, #24]	; (8007cec <_sbrk_r+0x1c>)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	4608      	mov	r0, r1
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	f7fb f8c8 	bl	8002e70 <_sbrk>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_sbrk_r+0x1a>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_sbrk_r+0x1a>
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	20002704 	.word	0x20002704

08007cf0 <__swbuf_r>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	460e      	mov	r6, r1
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	b118      	cbz	r0, 8007d02 <__swbuf_r+0x12>
 8007cfa:	6983      	ldr	r3, [r0, #24]
 8007cfc:	b90b      	cbnz	r3, 8007d02 <__swbuf_r+0x12>
 8007cfe:	f000 ffeb 	bl	8008cd8 <__sinit>
 8007d02:	4b21      	ldr	r3, [pc, #132]	; (8007d88 <__swbuf_r+0x98>)
 8007d04:	429c      	cmp	r4, r3
 8007d06:	d12a      	bne.n	8007d5e <__swbuf_r+0x6e>
 8007d08:	686c      	ldr	r4, [r5, #4]
 8007d0a:	69a3      	ldr	r3, [r4, #24]
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	071a      	lsls	r2, r3, #28
 8007d12:	d52e      	bpl.n	8007d72 <__swbuf_r+0x82>
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	b363      	cbz	r3, 8007d72 <__swbuf_r+0x82>
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	6820      	ldr	r0, [r4, #0]
 8007d1c:	1ac0      	subs	r0, r0, r3
 8007d1e:	6963      	ldr	r3, [r4, #20]
 8007d20:	b2f6      	uxtb	r6, r6
 8007d22:	4283      	cmp	r3, r0
 8007d24:	4637      	mov	r7, r6
 8007d26:	dc04      	bgt.n	8007d32 <__swbuf_r+0x42>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 ff6a 	bl	8008c04 <_fflush_r>
 8007d30:	bb28      	cbnz	r0, 8007d7e <__swbuf_r+0x8e>
 8007d32:	68a3      	ldr	r3, [r4, #8]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	60a3      	str	r3, [r4, #8]
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	6022      	str	r2, [r4, #0]
 8007d3e:	701e      	strb	r6, [r3, #0]
 8007d40:	6963      	ldr	r3, [r4, #20]
 8007d42:	3001      	adds	r0, #1
 8007d44:	4283      	cmp	r3, r0
 8007d46:	d004      	beq.n	8007d52 <__swbuf_r+0x62>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	07db      	lsls	r3, r3, #31
 8007d4c:	d519      	bpl.n	8007d82 <__swbuf_r+0x92>
 8007d4e:	2e0a      	cmp	r6, #10
 8007d50:	d117      	bne.n	8007d82 <__swbuf_r+0x92>
 8007d52:	4621      	mov	r1, r4
 8007d54:	4628      	mov	r0, r5
 8007d56:	f000 ff55 	bl	8008c04 <_fflush_r>
 8007d5a:	b190      	cbz	r0, 8007d82 <__swbuf_r+0x92>
 8007d5c:	e00f      	b.n	8007d7e <__swbuf_r+0x8e>
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <__swbuf_r+0x9c>)
 8007d60:	429c      	cmp	r4, r3
 8007d62:	d101      	bne.n	8007d68 <__swbuf_r+0x78>
 8007d64:	68ac      	ldr	r4, [r5, #8]
 8007d66:	e7d0      	b.n	8007d0a <__swbuf_r+0x1a>
 8007d68:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <__swbuf_r+0xa0>)
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	bf08      	it	eq
 8007d6e:	68ec      	ldreq	r4, [r5, #12]
 8007d70:	e7cb      	b.n	8007d0a <__swbuf_r+0x1a>
 8007d72:	4621      	mov	r1, r4
 8007d74:	4628      	mov	r0, r5
 8007d76:	f000 f80d 	bl	8007d94 <__swsetup_r>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d0cc      	beq.n	8007d18 <__swbuf_r+0x28>
 8007d7e:	f04f 37ff 	mov.w	r7, #4294967295
 8007d82:	4638      	mov	r0, r7
 8007d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d86:	bf00      	nop
 8007d88:	08065874 	.word	0x08065874
 8007d8c:	08065894 	.word	0x08065894
 8007d90:	08065854 	.word	0x08065854

08007d94 <__swsetup_r>:
 8007d94:	4b32      	ldr	r3, [pc, #200]	; (8007e60 <__swsetup_r+0xcc>)
 8007d96:	b570      	push	{r4, r5, r6, lr}
 8007d98:	681d      	ldr	r5, [r3, #0]
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	b125      	cbz	r5, 8007daa <__swsetup_r+0x16>
 8007da0:	69ab      	ldr	r3, [r5, #24]
 8007da2:	b913      	cbnz	r3, 8007daa <__swsetup_r+0x16>
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 ff97 	bl	8008cd8 <__sinit>
 8007daa:	4b2e      	ldr	r3, [pc, #184]	; (8007e64 <__swsetup_r+0xd0>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	d10f      	bne.n	8007dd0 <__swsetup_r+0x3c>
 8007db0:	686c      	ldr	r4, [r5, #4]
 8007db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	0715      	lsls	r5, r2, #28
 8007dba:	d42c      	bmi.n	8007e16 <__swsetup_r+0x82>
 8007dbc:	06d0      	lsls	r0, r2, #27
 8007dbe:	d411      	bmi.n	8007de4 <__swsetup_r+0x50>
 8007dc0:	2209      	movs	r2, #9
 8007dc2:	6032      	str	r2, [r6, #0]
 8007dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295
 8007dce:	e03e      	b.n	8007e4e <__swsetup_r+0xba>
 8007dd0:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <__swsetup_r+0xd4>)
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	d101      	bne.n	8007dda <__swsetup_r+0x46>
 8007dd6:	68ac      	ldr	r4, [r5, #8]
 8007dd8:	e7eb      	b.n	8007db2 <__swsetup_r+0x1e>
 8007dda:	4b24      	ldr	r3, [pc, #144]	; (8007e6c <__swsetup_r+0xd8>)
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	bf08      	it	eq
 8007de0:	68ec      	ldreq	r4, [r5, #12]
 8007de2:	e7e6      	b.n	8007db2 <__swsetup_r+0x1e>
 8007de4:	0751      	lsls	r1, r2, #29
 8007de6:	d512      	bpl.n	8007e0e <__swsetup_r+0x7a>
 8007de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dea:	b141      	cbz	r1, 8007dfe <__swsetup_r+0x6a>
 8007dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df0:	4299      	cmp	r1, r3
 8007df2:	d002      	beq.n	8007dfa <__swsetup_r+0x66>
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7ff f9e3 	bl	80071c0 <_free_r>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	2300      	movs	r3, #0
 8007e08:	6063      	str	r3, [r4, #4]
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	f043 0308 	orr.w	r3, r3, #8
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	b94b      	cbnz	r3, 8007e2e <__swsetup_r+0x9a>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e24:	d003      	beq.n	8007e2e <__swsetup_r+0x9a>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f001 f811 	bl	8008e50 <__smakebuf_r>
 8007e2e:	89a2      	ldrh	r2, [r4, #12]
 8007e30:	f012 0301 	ands.w	r3, r2, #1
 8007e34:	d00c      	beq.n	8007e50 <__swsetup_r+0xbc>
 8007e36:	2300      	movs	r3, #0
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	6963      	ldr	r3, [r4, #20]
 8007e3c:	425b      	negs	r3, r3
 8007e3e:	61a3      	str	r3, [r4, #24]
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	b953      	cbnz	r3, 8007e5a <__swsetup_r+0xc6>
 8007e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e48:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007e4c:	d1ba      	bne.n	8007dc4 <__swsetup_r+0x30>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	0792      	lsls	r2, r2, #30
 8007e52:	bf58      	it	pl
 8007e54:	6963      	ldrpl	r3, [r4, #20]
 8007e56:	60a3      	str	r3, [r4, #8]
 8007e58:	e7f2      	b.n	8007e40 <__swsetup_r+0xac>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e7f7      	b.n	8007e4e <__swsetup_r+0xba>
 8007e5e:	bf00      	nop
 8007e60:	20000ed0 	.word	0x20000ed0
 8007e64:	08065874 	.word	0x08065874
 8007e68:	08065894 	.word	0x08065894
 8007e6c:	08065854 	.word	0x08065854

08007e70 <quorem>:
 8007e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	6903      	ldr	r3, [r0, #16]
 8007e76:	690c      	ldr	r4, [r1, #16]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	4680      	mov	r8, r0
 8007e7c:	f2c0 8082 	blt.w	8007f84 <quorem+0x114>
 8007e80:	3c01      	subs	r4, #1
 8007e82:	f101 0714 	add.w	r7, r1, #20
 8007e86:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e8a:	f100 0614 	add.w	r6, r0, #20
 8007e8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007e96:	eb06 030c 	add.w	r3, r6, ip
 8007e9a:	3501      	adds	r5, #1
 8007e9c:	eb07 090c 	add.w	r9, r7, ip
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	fbb0 f5f5 	udiv	r5, r0, r5
 8007ea6:	b395      	cbz	r5, 8007f0e <quorem+0x9e>
 8007ea8:	f04f 0a00 	mov.w	sl, #0
 8007eac:	4638      	mov	r0, r7
 8007eae:	46b6      	mov	lr, r6
 8007eb0:	46d3      	mov	fp, sl
 8007eb2:	f850 2b04 	ldr.w	r2, [r0], #4
 8007eb6:	b293      	uxth	r3, r2
 8007eb8:	fb05 a303 	mla	r3, r5, r3, sl
 8007ebc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	ebab 0303 	sub.w	r3, fp, r3
 8007ec6:	0c12      	lsrs	r2, r2, #16
 8007ec8:	f8de b000 	ldr.w	fp, [lr]
 8007ecc:	fb05 a202 	mla	r2, r5, r2, sl
 8007ed0:	fa13 f38b 	uxtah	r3, r3, fp
 8007ed4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ed8:	fa1f fb82 	uxth.w	fp, r2
 8007edc:	f8de 2000 	ldr.w	r2, [lr]
 8007ee0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007ee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eee:	4581      	cmp	r9, r0
 8007ef0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ef4:	f84e 3b04 	str.w	r3, [lr], #4
 8007ef8:	d2db      	bcs.n	8007eb2 <quorem+0x42>
 8007efa:	f856 300c 	ldr.w	r3, [r6, ip]
 8007efe:	b933      	cbnz	r3, 8007f0e <quorem+0x9e>
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	3b04      	subs	r3, #4
 8007f04:	429e      	cmp	r6, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	d330      	bcc.n	8007f6c <quorem+0xfc>
 8007f0a:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f0e:	4640      	mov	r0, r8
 8007f10:	f001 f9f6 	bl	8009300 <__mcmp>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	db25      	blt.n	8007f64 <quorem+0xf4>
 8007f18:	3501      	adds	r5, #1
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f04f 0c00 	mov.w	ip, #0
 8007f20:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f24:	f8d0 e000 	ldr.w	lr, [r0]
 8007f28:	b293      	uxth	r3, r2
 8007f2a:	ebac 0303 	sub.w	r3, ip, r3
 8007f2e:	0c12      	lsrs	r2, r2, #16
 8007f30:	fa13 f38e 	uxtah	r3, r3, lr
 8007f34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f42:	45b9      	cmp	r9, r7
 8007f44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f48:	f840 3b04 	str.w	r3, [r0], #4
 8007f4c:	d2e8      	bcs.n	8007f20 <quorem+0xb0>
 8007f4e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f52:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f56:	b92a      	cbnz	r2, 8007f64 <quorem+0xf4>
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	429e      	cmp	r6, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	d30b      	bcc.n	8007f78 <quorem+0x108>
 8007f60:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f64:	4628      	mov	r0, r5
 8007f66:	b003      	add	sp, #12
 8007f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	d1ca      	bne.n	8007f0a <quorem+0x9a>
 8007f74:	3c01      	subs	r4, #1
 8007f76:	e7c5      	b.n	8007f04 <quorem+0x94>
 8007f78:	6812      	ldr	r2, [r2, #0]
 8007f7a:	3b04      	subs	r3, #4
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	d1ef      	bne.n	8007f60 <quorem+0xf0>
 8007f80:	3c01      	subs	r4, #1
 8007f82:	e7ea      	b.n	8007f5a <quorem+0xea>
 8007f84:	2000      	movs	r0, #0
 8007f86:	e7ee      	b.n	8007f66 <quorem+0xf6>

08007f88 <_dtoa_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ec57 6b10 	vmov	r6, r7, d0
 8007f90:	b097      	sub	sp, #92	; 0x5c
 8007f92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f94:	9106      	str	r1, [sp, #24]
 8007f96:	4604      	mov	r4, r0
 8007f98:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fa0:	e9cd 6700 	strd	r6, r7, [sp]
 8007fa4:	b93d      	cbnz	r5, 8007fb6 <_dtoa_r+0x2e>
 8007fa6:	2010      	movs	r0, #16
 8007fa8:	f7ff f8d8 	bl	800715c <malloc>
 8007fac:	6260      	str	r0, [r4, #36]	; 0x24
 8007fae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fb2:	6005      	str	r5, [r0, #0]
 8007fb4:	60c5      	str	r5, [r0, #12]
 8007fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	b151      	cbz	r1, 8007fd2 <_dtoa_r+0x4a>
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	604a      	str	r2, [r1, #4]
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4093      	lsls	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 ffb8 	bl	8008f3c <_Bfree>
 8007fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	1e3b      	subs	r3, r7, #0
 8007fd4:	bfbb      	ittet	lt
 8007fd6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fda:	9301      	strlt	r3, [sp, #4]
 8007fdc:	2300      	movge	r3, #0
 8007fde:	2201      	movlt	r2, #1
 8007fe0:	bfac      	ite	ge
 8007fe2:	f8c8 3000 	strge.w	r3, [r8]
 8007fe6:	f8c8 2000 	strlt.w	r2, [r8]
 8007fea:	4baf      	ldr	r3, [pc, #700]	; (80082a8 <_dtoa_r+0x320>)
 8007fec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ff0:	ea33 0308 	bics.w	r3, r3, r8
 8007ff4:	d114      	bne.n	8008020 <_dtoa_r+0x98>
 8007ff6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ff8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	9b00      	ldr	r3, [sp, #0]
 8008000:	b923      	cbnz	r3, 800800c <_dtoa_r+0x84>
 8008002:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008006:	2800      	cmp	r0, #0
 8008008:	f000 8542 	beq.w	8008a90 <_dtoa_r+0xb08>
 800800c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80082bc <_dtoa_r+0x334>
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 8544 	beq.w	8008aa0 <_dtoa_r+0xb18>
 8008018:	f10b 0303 	add.w	r3, fp, #3
 800801c:	f000 bd3e 	b.w	8008a9c <_dtoa_r+0xb14>
 8008020:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008024:	2200      	movs	r2, #0
 8008026:	2300      	movs	r3, #0
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	f7f8 fd54 	bl	8000ad8 <__aeabi_dcmpeq>
 8008030:	4681      	mov	r9, r0
 8008032:	b168      	cbz	r0, 8008050 <_dtoa_r+0xc8>
 8008034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008036:	2301      	movs	r3, #1
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8524 	beq.w	8008a8a <_dtoa_r+0xb02>
 8008042:	4b9a      	ldr	r3, [pc, #616]	; (80082ac <_dtoa_r+0x324>)
 8008044:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008046:	f103 3bff 	add.w	fp, r3, #4294967295
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	f000 bd28 	b.w	8008aa0 <_dtoa_r+0xb18>
 8008050:	aa14      	add	r2, sp, #80	; 0x50
 8008052:	a915      	add	r1, sp, #84	; 0x54
 8008054:	ec47 6b10 	vmov	d0, r6, r7
 8008058:	4620      	mov	r0, r4
 800805a:	f001 f9c8 	bl	80093ee <__d2b>
 800805e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008062:	9004      	str	r0, [sp, #16]
 8008064:	2d00      	cmp	r5, #0
 8008066:	d07c      	beq.n	8008162 <_dtoa_r+0x1da>
 8008068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800806c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008070:	46b2      	mov	sl, r6
 8008072:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800807a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800807e:	2200      	movs	r2, #0
 8008080:	4b8b      	ldr	r3, [pc, #556]	; (80082b0 <_dtoa_r+0x328>)
 8008082:	4650      	mov	r0, sl
 8008084:	4659      	mov	r1, fp
 8008086:	f7f8 f907 	bl	8000298 <__aeabi_dsub>
 800808a:	a381      	add	r3, pc, #516	; (adr r3, 8008290 <_dtoa_r+0x308>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 faba 	bl	8000608 <__aeabi_dmul>
 8008094:	a380      	add	r3, pc, #512	; (adr r3, 8008298 <_dtoa_r+0x310>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 f8ff 	bl	800029c <__adddf3>
 800809e:	4606      	mov	r6, r0
 80080a0:	4628      	mov	r0, r5
 80080a2:	460f      	mov	r7, r1
 80080a4:	f7f8 fa46 	bl	8000534 <__aeabi_i2d>
 80080a8:	a37d      	add	r3, pc, #500	; (adr r3, 80082a0 <_dtoa_r+0x318>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 faab 	bl	8000608 <__aeabi_dmul>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4630      	mov	r0, r6
 80080b8:	4639      	mov	r1, r7
 80080ba:	f7f8 f8ef 	bl	800029c <__adddf3>
 80080be:	4606      	mov	r6, r0
 80080c0:	460f      	mov	r7, r1
 80080c2:	f7f8 fd51 	bl	8000b68 <__aeabi_d2iz>
 80080c6:	2200      	movs	r2, #0
 80080c8:	4682      	mov	sl, r0
 80080ca:	2300      	movs	r3, #0
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 fd0c 	bl	8000aec <__aeabi_dcmplt>
 80080d4:	b148      	cbz	r0, 80080ea <_dtoa_r+0x162>
 80080d6:	4650      	mov	r0, sl
 80080d8:	f7f8 fa2c 	bl	8000534 <__aeabi_i2d>
 80080dc:	4632      	mov	r2, r6
 80080de:	463b      	mov	r3, r7
 80080e0:	f7f8 fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80080e4:	b908      	cbnz	r0, 80080ea <_dtoa_r+0x162>
 80080e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080ea:	f1ba 0f16 	cmp.w	sl, #22
 80080ee:	d859      	bhi.n	80081a4 <_dtoa_r+0x21c>
 80080f0:	4970      	ldr	r1, [pc, #448]	; (80082b4 <_dtoa_r+0x32c>)
 80080f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080fe:	f7f8 fd13 	bl	8000b28 <__aeabi_dcmpgt>
 8008102:	2800      	cmp	r0, #0
 8008104:	d050      	beq.n	80081a8 <_dtoa_r+0x220>
 8008106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800810a:	2300      	movs	r3, #0
 800810c:	930f      	str	r3, [sp, #60]	; 0x3c
 800810e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008110:	1b5d      	subs	r5, r3, r5
 8008112:	f1b5 0801 	subs.w	r8, r5, #1
 8008116:	bf49      	itett	mi
 8008118:	f1c5 0301 	rsbmi	r3, r5, #1
 800811c:	2300      	movpl	r3, #0
 800811e:	9305      	strmi	r3, [sp, #20]
 8008120:	f04f 0800 	movmi.w	r8, #0
 8008124:	bf58      	it	pl
 8008126:	9305      	strpl	r3, [sp, #20]
 8008128:	f1ba 0f00 	cmp.w	sl, #0
 800812c:	db3e      	blt.n	80081ac <_dtoa_r+0x224>
 800812e:	2300      	movs	r3, #0
 8008130:	44d0      	add	r8, sl
 8008132:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	9b06      	ldr	r3, [sp, #24]
 800813a:	2b09      	cmp	r3, #9
 800813c:	f200 8090 	bhi.w	8008260 <_dtoa_r+0x2d8>
 8008140:	2b05      	cmp	r3, #5
 8008142:	bfc4      	itt	gt
 8008144:	3b04      	subgt	r3, #4
 8008146:	9306      	strgt	r3, [sp, #24]
 8008148:	9b06      	ldr	r3, [sp, #24]
 800814a:	f1a3 0302 	sub.w	r3, r3, #2
 800814e:	bfcc      	ite	gt
 8008150:	2500      	movgt	r5, #0
 8008152:	2501      	movle	r5, #1
 8008154:	2b03      	cmp	r3, #3
 8008156:	f200 808f 	bhi.w	8008278 <_dtoa_r+0x2f0>
 800815a:	e8df f003 	tbb	[pc, r3]
 800815e:	7f7d      	.short	0x7f7d
 8008160:	7131      	.short	0x7131
 8008162:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008166:	441d      	add	r5, r3
 8008168:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800816c:	2820      	cmp	r0, #32
 800816e:	dd13      	ble.n	8008198 <_dtoa_r+0x210>
 8008170:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008174:	9b00      	ldr	r3, [sp, #0]
 8008176:	fa08 f800 	lsl.w	r8, r8, r0
 800817a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800817e:	fa23 f000 	lsr.w	r0, r3, r0
 8008182:	ea48 0000 	orr.w	r0, r8, r0
 8008186:	f7f8 f9c5 	bl	8000514 <__aeabi_ui2d>
 800818a:	2301      	movs	r3, #1
 800818c:	4682      	mov	sl, r0
 800818e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008192:	3d01      	subs	r5, #1
 8008194:	9313      	str	r3, [sp, #76]	; 0x4c
 8008196:	e772      	b.n	800807e <_dtoa_r+0xf6>
 8008198:	9b00      	ldr	r3, [sp, #0]
 800819a:	f1c0 0020 	rsb	r0, r0, #32
 800819e:	fa03 f000 	lsl.w	r0, r3, r0
 80081a2:	e7f0      	b.n	8008186 <_dtoa_r+0x1fe>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e7b1      	b.n	800810c <_dtoa_r+0x184>
 80081a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80081aa:	e7b0      	b.n	800810e <_dtoa_r+0x186>
 80081ac:	9b05      	ldr	r3, [sp, #20]
 80081ae:	eba3 030a 	sub.w	r3, r3, sl
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	f1ca 0300 	rsb	r3, sl, #0
 80081b8:	9307      	str	r3, [sp, #28]
 80081ba:	2300      	movs	r3, #0
 80081bc:	930e      	str	r3, [sp, #56]	; 0x38
 80081be:	e7bb      	b.n	8008138 <_dtoa_r+0x1b0>
 80081c0:	2301      	movs	r3, #1
 80081c2:	930a      	str	r3, [sp, #40]	; 0x28
 80081c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	dd59      	ble.n	800827e <_dtoa_r+0x2f6>
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	4699      	mov	r9, r3
 80081ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081d0:	2200      	movs	r2, #0
 80081d2:	6072      	str	r2, [r6, #4]
 80081d4:	2204      	movs	r2, #4
 80081d6:	f102 0014 	add.w	r0, r2, #20
 80081da:	4298      	cmp	r0, r3
 80081dc:	6871      	ldr	r1, [r6, #4]
 80081de:	d953      	bls.n	8008288 <_dtoa_r+0x300>
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fe77 	bl	8008ed4 <_Balloc>
 80081e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e8:	6030      	str	r0, [r6, #0]
 80081ea:	f1b9 0f0e 	cmp.w	r9, #14
 80081ee:	f8d3 b000 	ldr.w	fp, [r3]
 80081f2:	f200 80e6 	bhi.w	80083c2 <_dtoa_r+0x43a>
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	f000 80e3 	beq.w	80083c2 <_dtoa_r+0x43a>
 80081fc:	ed9d 7b00 	vldr	d7, [sp]
 8008200:	f1ba 0f00 	cmp.w	sl, #0
 8008204:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008208:	dd74      	ble.n	80082f4 <_dtoa_r+0x36c>
 800820a:	4a2a      	ldr	r2, [pc, #168]	; (80082b4 <_dtoa_r+0x32c>)
 800820c:	f00a 030f 	and.w	r3, sl, #15
 8008210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008214:	ed93 7b00 	vldr	d7, [r3]
 8008218:	ea4f 162a 	mov.w	r6, sl, asr #4
 800821c:	06f0      	lsls	r0, r6, #27
 800821e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008222:	d565      	bpl.n	80082f0 <_dtoa_r+0x368>
 8008224:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <_dtoa_r+0x330>)
 8008226:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800822a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800822e:	f7f8 fb15 	bl	800085c <__aeabi_ddiv>
 8008232:	e9cd 0100 	strd	r0, r1, [sp]
 8008236:	f006 060f 	and.w	r6, r6, #15
 800823a:	2503      	movs	r5, #3
 800823c:	4f1e      	ldr	r7, [pc, #120]	; (80082b8 <_dtoa_r+0x330>)
 800823e:	e04c      	b.n	80082da <_dtoa_r+0x352>
 8008240:	2301      	movs	r3, #1
 8008242:	930a      	str	r3, [sp, #40]	; 0x28
 8008244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008246:	4453      	add	r3, sl
 8008248:	f103 0901 	add.w	r9, r3, #1
 800824c:	9302      	str	r3, [sp, #8]
 800824e:	464b      	mov	r3, r9
 8008250:	2b01      	cmp	r3, #1
 8008252:	bfb8      	it	lt
 8008254:	2301      	movlt	r3, #1
 8008256:	e7ba      	b.n	80081ce <_dtoa_r+0x246>
 8008258:	2300      	movs	r3, #0
 800825a:	e7b2      	b.n	80081c2 <_dtoa_r+0x23a>
 800825c:	2300      	movs	r3, #0
 800825e:	e7f0      	b.n	8008242 <_dtoa_r+0x2ba>
 8008260:	2501      	movs	r5, #1
 8008262:	2300      	movs	r3, #0
 8008264:	9306      	str	r3, [sp, #24]
 8008266:	950a      	str	r5, [sp, #40]	; 0x28
 8008268:	f04f 33ff 	mov.w	r3, #4294967295
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	4699      	mov	r9, r3
 8008270:	2200      	movs	r2, #0
 8008272:	2312      	movs	r3, #18
 8008274:	920b      	str	r2, [sp, #44]	; 0x2c
 8008276:	e7aa      	b.n	80081ce <_dtoa_r+0x246>
 8008278:	2301      	movs	r3, #1
 800827a:	930a      	str	r3, [sp, #40]	; 0x28
 800827c:	e7f4      	b.n	8008268 <_dtoa_r+0x2e0>
 800827e:	2301      	movs	r3, #1
 8008280:	9302      	str	r3, [sp, #8]
 8008282:	4699      	mov	r9, r3
 8008284:	461a      	mov	r2, r3
 8008286:	e7f5      	b.n	8008274 <_dtoa_r+0x2ec>
 8008288:	3101      	adds	r1, #1
 800828a:	6071      	str	r1, [r6, #4]
 800828c:	0052      	lsls	r2, r2, #1
 800828e:	e7a2      	b.n	80081d6 <_dtoa_r+0x24e>
 8008290:	636f4361 	.word	0x636f4361
 8008294:	3fd287a7 	.word	0x3fd287a7
 8008298:	8b60c8b3 	.word	0x8b60c8b3
 800829c:	3fc68a28 	.word	0x3fc68a28
 80082a0:	509f79fb 	.word	0x509f79fb
 80082a4:	3fd34413 	.word	0x3fd34413
 80082a8:	7ff00000 	.word	0x7ff00000
 80082ac:	08065821 	.word	0x08065821
 80082b0:	3ff80000 	.word	0x3ff80000
 80082b4:	080658e0 	.word	0x080658e0
 80082b8:	080658b8 	.word	0x080658b8
 80082bc:	0806584d 	.word	0x0806584d
 80082c0:	07f1      	lsls	r1, r6, #31
 80082c2:	d508      	bpl.n	80082d6 <_dtoa_r+0x34e>
 80082c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082cc:	f7f8 f99c 	bl	8000608 <__aeabi_dmul>
 80082d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082d4:	3501      	adds	r5, #1
 80082d6:	1076      	asrs	r6, r6, #1
 80082d8:	3708      	adds	r7, #8
 80082da:	2e00      	cmp	r6, #0
 80082dc:	d1f0      	bne.n	80082c0 <_dtoa_r+0x338>
 80082de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082e6:	f7f8 fab9 	bl	800085c <__aeabi_ddiv>
 80082ea:	e9cd 0100 	strd	r0, r1, [sp]
 80082ee:	e01a      	b.n	8008326 <_dtoa_r+0x39e>
 80082f0:	2502      	movs	r5, #2
 80082f2:	e7a3      	b.n	800823c <_dtoa_r+0x2b4>
 80082f4:	f000 80a0 	beq.w	8008438 <_dtoa_r+0x4b0>
 80082f8:	f1ca 0600 	rsb	r6, sl, #0
 80082fc:	4b9f      	ldr	r3, [pc, #636]	; (800857c <_dtoa_r+0x5f4>)
 80082fe:	4fa0      	ldr	r7, [pc, #640]	; (8008580 <_dtoa_r+0x5f8>)
 8008300:	f006 020f 	and.w	r2, r6, #15
 8008304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008310:	f7f8 f97a 	bl	8000608 <__aeabi_dmul>
 8008314:	e9cd 0100 	strd	r0, r1, [sp]
 8008318:	1136      	asrs	r6, r6, #4
 800831a:	2300      	movs	r3, #0
 800831c:	2502      	movs	r5, #2
 800831e:	2e00      	cmp	r6, #0
 8008320:	d17f      	bne.n	8008422 <_dtoa_r+0x49a>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e1      	bne.n	80082ea <_dtoa_r+0x362>
 8008326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8087 	beq.w	800843c <_dtoa_r+0x4b4>
 800832e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008332:	2200      	movs	r2, #0
 8008334:	4b93      	ldr	r3, [pc, #588]	; (8008584 <_dtoa_r+0x5fc>)
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f8 fbd7 	bl	8000aec <__aeabi_dcmplt>
 800833e:	2800      	cmp	r0, #0
 8008340:	d07c      	beq.n	800843c <_dtoa_r+0x4b4>
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	d079      	beq.n	800843c <_dtoa_r+0x4b4>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	dd35      	ble.n	80083ba <_dtoa_r+0x432>
 800834e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008352:	9308      	str	r3, [sp, #32]
 8008354:	4639      	mov	r1, r7
 8008356:	2200      	movs	r2, #0
 8008358:	4b8b      	ldr	r3, [pc, #556]	; (8008588 <_dtoa_r+0x600>)
 800835a:	4630      	mov	r0, r6
 800835c:	f7f8 f954 	bl	8000608 <__aeabi_dmul>
 8008360:	e9cd 0100 	strd	r0, r1, [sp]
 8008364:	9f02      	ldr	r7, [sp, #8]
 8008366:	3501      	adds	r5, #1
 8008368:	4628      	mov	r0, r5
 800836a:	f7f8 f8e3 	bl	8000534 <__aeabi_i2d>
 800836e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008372:	f7f8 f949 	bl	8000608 <__aeabi_dmul>
 8008376:	2200      	movs	r2, #0
 8008378:	4b84      	ldr	r3, [pc, #528]	; (800858c <_dtoa_r+0x604>)
 800837a:	f7f7 ff8f 	bl	800029c <__adddf3>
 800837e:	4605      	mov	r5, r0
 8008380:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008384:	2f00      	cmp	r7, #0
 8008386:	d15d      	bne.n	8008444 <_dtoa_r+0x4bc>
 8008388:	2200      	movs	r2, #0
 800838a:	4b81      	ldr	r3, [pc, #516]	; (8008590 <_dtoa_r+0x608>)
 800838c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008390:	f7f7 ff82 	bl	8000298 <__aeabi_dsub>
 8008394:	462a      	mov	r2, r5
 8008396:	4633      	mov	r3, r6
 8008398:	e9cd 0100 	strd	r0, r1, [sp]
 800839c:	f7f8 fbc4 	bl	8000b28 <__aeabi_dcmpgt>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f040 8288 	bne.w	80088b6 <_dtoa_r+0x92e>
 80083a6:	462a      	mov	r2, r5
 80083a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083b0:	f7f8 fb9c 	bl	8000aec <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f040 827c 	bne.w	80088b2 <_dtoa_r+0x92a>
 80083ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083be:	e9cd 2300 	strd	r2, r3, [sp]
 80083c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f2c0 8150 	blt.w	800866a <_dtoa_r+0x6e2>
 80083ca:	f1ba 0f0e 	cmp.w	sl, #14
 80083ce:	f300 814c 	bgt.w	800866a <_dtoa_r+0x6e2>
 80083d2:	4b6a      	ldr	r3, [pc, #424]	; (800857c <_dtoa_r+0x5f4>)
 80083d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083d8:	ed93 7b00 	vldr	d7, [r3]
 80083dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083e4:	f280 80d8 	bge.w	8008598 <_dtoa_r+0x610>
 80083e8:	f1b9 0f00 	cmp.w	r9, #0
 80083ec:	f300 80d4 	bgt.w	8008598 <_dtoa_r+0x610>
 80083f0:	f040 825e 	bne.w	80088b0 <_dtoa_r+0x928>
 80083f4:	2200      	movs	r2, #0
 80083f6:	4b66      	ldr	r3, [pc, #408]	; (8008590 <_dtoa_r+0x608>)
 80083f8:	ec51 0b17 	vmov	r0, r1, d7
 80083fc:	f7f8 f904 	bl	8000608 <__aeabi_dmul>
 8008400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008404:	f7f8 fb86 	bl	8000b14 <__aeabi_dcmpge>
 8008408:	464f      	mov	r7, r9
 800840a:	464e      	mov	r6, r9
 800840c:	2800      	cmp	r0, #0
 800840e:	f040 8234 	bne.w	800887a <_dtoa_r+0x8f2>
 8008412:	2331      	movs	r3, #49	; 0x31
 8008414:	f10b 0501 	add.w	r5, fp, #1
 8008418:	f88b 3000 	strb.w	r3, [fp]
 800841c:	f10a 0a01 	add.w	sl, sl, #1
 8008420:	e22f      	b.n	8008882 <_dtoa_r+0x8fa>
 8008422:	07f2      	lsls	r2, r6, #31
 8008424:	d505      	bpl.n	8008432 <_dtoa_r+0x4aa>
 8008426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842a:	f7f8 f8ed 	bl	8000608 <__aeabi_dmul>
 800842e:	3501      	adds	r5, #1
 8008430:	2301      	movs	r3, #1
 8008432:	1076      	asrs	r6, r6, #1
 8008434:	3708      	adds	r7, #8
 8008436:	e772      	b.n	800831e <_dtoa_r+0x396>
 8008438:	2502      	movs	r5, #2
 800843a:	e774      	b.n	8008326 <_dtoa_r+0x39e>
 800843c:	f8cd a020 	str.w	sl, [sp, #32]
 8008440:	464f      	mov	r7, r9
 8008442:	e791      	b.n	8008368 <_dtoa_r+0x3e0>
 8008444:	4b4d      	ldr	r3, [pc, #308]	; (800857c <_dtoa_r+0x5f4>)
 8008446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800844a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800844e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008450:	2b00      	cmp	r3, #0
 8008452:	d047      	beq.n	80084e4 <_dtoa_r+0x55c>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	2000      	movs	r0, #0
 800845a:	494e      	ldr	r1, [pc, #312]	; (8008594 <_dtoa_r+0x60c>)
 800845c:	f7f8 f9fe 	bl	800085c <__aeabi_ddiv>
 8008460:	462a      	mov	r2, r5
 8008462:	4633      	mov	r3, r6
 8008464:	f7f7 ff18 	bl	8000298 <__aeabi_dsub>
 8008468:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800846c:	465d      	mov	r5, fp
 800846e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008472:	f7f8 fb79 	bl	8000b68 <__aeabi_d2iz>
 8008476:	4606      	mov	r6, r0
 8008478:	f7f8 f85c 	bl	8000534 <__aeabi_i2d>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008484:	f7f7 ff08 	bl	8000298 <__aeabi_dsub>
 8008488:	3630      	adds	r6, #48	; 0x30
 800848a:	f805 6b01 	strb.w	r6, [r5], #1
 800848e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008492:	e9cd 0100 	strd	r0, r1, [sp]
 8008496:	f7f8 fb29 	bl	8000aec <__aeabi_dcmplt>
 800849a:	2800      	cmp	r0, #0
 800849c:	d163      	bne.n	8008566 <_dtoa_r+0x5de>
 800849e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084a2:	2000      	movs	r0, #0
 80084a4:	4937      	ldr	r1, [pc, #220]	; (8008584 <_dtoa_r+0x5fc>)
 80084a6:	f7f7 fef7 	bl	8000298 <__aeabi_dsub>
 80084aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084ae:	f7f8 fb1d 	bl	8000aec <__aeabi_dcmplt>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f040 80b7 	bne.w	8008626 <_dtoa_r+0x69e>
 80084b8:	eba5 030b 	sub.w	r3, r5, fp
 80084bc:	429f      	cmp	r7, r3
 80084be:	f77f af7c 	ble.w	80083ba <_dtoa_r+0x432>
 80084c2:	2200      	movs	r2, #0
 80084c4:	4b30      	ldr	r3, [pc, #192]	; (8008588 <_dtoa_r+0x600>)
 80084c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084ca:	f7f8 f89d 	bl	8000608 <__aeabi_dmul>
 80084ce:	2200      	movs	r2, #0
 80084d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084d4:	4b2c      	ldr	r3, [pc, #176]	; (8008588 <_dtoa_r+0x600>)
 80084d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084da:	f7f8 f895 	bl	8000608 <__aeabi_dmul>
 80084de:	e9cd 0100 	strd	r0, r1, [sp]
 80084e2:	e7c4      	b.n	800846e <_dtoa_r+0x4e6>
 80084e4:	462a      	mov	r2, r5
 80084e6:	4633      	mov	r3, r6
 80084e8:	f7f8 f88e 	bl	8000608 <__aeabi_dmul>
 80084ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084f0:	eb0b 0507 	add.w	r5, fp, r7
 80084f4:	465e      	mov	r6, fp
 80084f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084fa:	f7f8 fb35 	bl	8000b68 <__aeabi_d2iz>
 80084fe:	4607      	mov	r7, r0
 8008500:	f7f8 f818 	bl	8000534 <__aeabi_i2d>
 8008504:	3730      	adds	r7, #48	; 0x30
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800850e:	f7f7 fec3 	bl	8000298 <__aeabi_dsub>
 8008512:	f806 7b01 	strb.w	r7, [r6], #1
 8008516:	42ae      	cmp	r6, r5
 8008518:	e9cd 0100 	strd	r0, r1, [sp]
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	d126      	bne.n	8008570 <_dtoa_r+0x5e8>
 8008522:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <_dtoa_r+0x60c>)
 8008524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008528:	f7f7 feb8 	bl	800029c <__adddf3>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008534:	f7f8 faf8 	bl	8000b28 <__aeabi_dcmpgt>
 8008538:	2800      	cmp	r0, #0
 800853a:	d174      	bne.n	8008626 <_dtoa_r+0x69e>
 800853c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008540:	2000      	movs	r0, #0
 8008542:	4914      	ldr	r1, [pc, #80]	; (8008594 <_dtoa_r+0x60c>)
 8008544:	f7f7 fea8 	bl	8000298 <__aeabi_dsub>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008550:	f7f8 facc 	bl	8000aec <__aeabi_dcmplt>
 8008554:	2800      	cmp	r0, #0
 8008556:	f43f af30 	beq.w	80083ba <_dtoa_r+0x432>
 800855a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800855e:	2b30      	cmp	r3, #48	; 0x30
 8008560:	f105 32ff 	add.w	r2, r5, #4294967295
 8008564:	d002      	beq.n	800856c <_dtoa_r+0x5e4>
 8008566:	f8dd a020 	ldr.w	sl, [sp, #32]
 800856a:	e04a      	b.n	8008602 <_dtoa_r+0x67a>
 800856c:	4615      	mov	r5, r2
 800856e:	e7f4      	b.n	800855a <_dtoa_r+0x5d2>
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <_dtoa_r+0x600>)
 8008572:	f7f8 f849 	bl	8000608 <__aeabi_dmul>
 8008576:	e9cd 0100 	strd	r0, r1, [sp]
 800857a:	e7bc      	b.n	80084f6 <_dtoa_r+0x56e>
 800857c:	080658e0 	.word	0x080658e0
 8008580:	080658b8 	.word	0x080658b8
 8008584:	3ff00000 	.word	0x3ff00000
 8008588:	40240000 	.word	0x40240000
 800858c:	401c0000 	.word	0x401c0000
 8008590:	40140000 	.word	0x40140000
 8008594:	3fe00000 	.word	0x3fe00000
 8008598:	e9dd 6700 	ldrd	r6, r7, [sp]
 800859c:	465d      	mov	r5, fp
 800859e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a2:	4630      	mov	r0, r6
 80085a4:	4639      	mov	r1, r7
 80085a6:	f7f8 f959 	bl	800085c <__aeabi_ddiv>
 80085aa:	f7f8 fadd 	bl	8000b68 <__aeabi_d2iz>
 80085ae:	4680      	mov	r8, r0
 80085b0:	f7f7 ffc0 	bl	8000534 <__aeabi_i2d>
 80085b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085b8:	f7f8 f826 	bl	8000608 <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4630      	mov	r0, r6
 80085c2:	4639      	mov	r1, r7
 80085c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80085c8:	f7f7 fe66 	bl	8000298 <__aeabi_dsub>
 80085cc:	f805 6b01 	strb.w	r6, [r5], #1
 80085d0:	eba5 060b 	sub.w	r6, r5, fp
 80085d4:	45b1      	cmp	r9, r6
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	d139      	bne.n	8008650 <_dtoa_r+0x6c8>
 80085dc:	f7f7 fe5e 	bl	800029c <__adddf3>
 80085e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085e4:	4606      	mov	r6, r0
 80085e6:	460f      	mov	r7, r1
 80085e8:	f7f8 fa9e 	bl	8000b28 <__aeabi_dcmpgt>
 80085ec:	b9c8      	cbnz	r0, 8008622 <_dtoa_r+0x69a>
 80085ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085f2:	4630      	mov	r0, r6
 80085f4:	4639      	mov	r1, r7
 80085f6:	f7f8 fa6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80085fa:	b110      	cbz	r0, 8008602 <_dtoa_r+0x67a>
 80085fc:	f018 0f01 	tst.w	r8, #1
 8008600:	d10f      	bne.n	8008622 <_dtoa_r+0x69a>
 8008602:	9904      	ldr	r1, [sp, #16]
 8008604:	4620      	mov	r0, r4
 8008606:	f000 fc99 	bl	8008f3c <_Bfree>
 800860a:	2300      	movs	r3, #0
 800860c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800860e:	702b      	strb	r3, [r5, #0]
 8008610:	f10a 0301 	add.w	r3, sl, #1
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8241 	beq.w	8008aa0 <_dtoa_r+0xb18>
 800861e:	601d      	str	r5, [r3, #0]
 8008620:	e23e      	b.n	8008aa0 <_dtoa_r+0xb18>
 8008622:	f8cd a020 	str.w	sl, [sp, #32]
 8008626:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800862a:	2a39      	cmp	r2, #57	; 0x39
 800862c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008630:	d108      	bne.n	8008644 <_dtoa_r+0x6bc>
 8008632:	459b      	cmp	fp, r3
 8008634:	d10a      	bne.n	800864c <_dtoa_r+0x6c4>
 8008636:	9b08      	ldr	r3, [sp, #32]
 8008638:	3301      	adds	r3, #1
 800863a:	9308      	str	r3, [sp, #32]
 800863c:	2330      	movs	r3, #48	; 0x30
 800863e:	f88b 3000 	strb.w	r3, [fp]
 8008642:	465b      	mov	r3, fp
 8008644:	781a      	ldrb	r2, [r3, #0]
 8008646:	3201      	adds	r2, #1
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	e78c      	b.n	8008566 <_dtoa_r+0x5de>
 800864c:	461d      	mov	r5, r3
 800864e:	e7ea      	b.n	8008626 <_dtoa_r+0x69e>
 8008650:	2200      	movs	r2, #0
 8008652:	4b9b      	ldr	r3, [pc, #620]	; (80088c0 <_dtoa_r+0x938>)
 8008654:	f7f7 ffd8 	bl	8000608 <__aeabi_dmul>
 8008658:	2200      	movs	r2, #0
 800865a:	2300      	movs	r3, #0
 800865c:	4606      	mov	r6, r0
 800865e:	460f      	mov	r7, r1
 8008660:	f7f8 fa3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008664:	2800      	cmp	r0, #0
 8008666:	d09a      	beq.n	800859e <_dtoa_r+0x616>
 8008668:	e7cb      	b.n	8008602 <_dtoa_r+0x67a>
 800866a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800866c:	2a00      	cmp	r2, #0
 800866e:	f000 808b 	beq.w	8008788 <_dtoa_r+0x800>
 8008672:	9a06      	ldr	r2, [sp, #24]
 8008674:	2a01      	cmp	r2, #1
 8008676:	dc6e      	bgt.n	8008756 <_dtoa_r+0x7ce>
 8008678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800867a:	2a00      	cmp	r2, #0
 800867c:	d067      	beq.n	800874e <_dtoa_r+0x7c6>
 800867e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008682:	9f07      	ldr	r7, [sp, #28]
 8008684:	9d05      	ldr	r5, [sp, #20]
 8008686:	9a05      	ldr	r2, [sp, #20]
 8008688:	2101      	movs	r1, #1
 800868a:	441a      	add	r2, r3
 800868c:	4620      	mov	r0, r4
 800868e:	9205      	str	r2, [sp, #20]
 8008690:	4498      	add	r8, r3
 8008692:	f000 fcf3 	bl	800907c <__i2b>
 8008696:	4606      	mov	r6, r0
 8008698:	2d00      	cmp	r5, #0
 800869a:	dd0c      	ble.n	80086b6 <_dtoa_r+0x72e>
 800869c:	f1b8 0f00 	cmp.w	r8, #0
 80086a0:	dd09      	ble.n	80086b6 <_dtoa_r+0x72e>
 80086a2:	4545      	cmp	r5, r8
 80086a4:	9a05      	ldr	r2, [sp, #20]
 80086a6:	462b      	mov	r3, r5
 80086a8:	bfa8      	it	ge
 80086aa:	4643      	movge	r3, r8
 80086ac:	1ad2      	subs	r2, r2, r3
 80086ae:	9205      	str	r2, [sp, #20]
 80086b0:	1aed      	subs	r5, r5, r3
 80086b2:	eba8 0803 	sub.w	r8, r8, r3
 80086b6:	9b07      	ldr	r3, [sp, #28]
 80086b8:	b1eb      	cbz	r3, 80086f6 <_dtoa_r+0x76e>
 80086ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d067      	beq.n	8008790 <_dtoa_r+0x808>
 80086c0:	b18f      	cbz	r7, 80086e6 <_dtoa_r+0x75e>
 80086c2:	4631      	mov	r1, r6
 80086c4:	463a      	mov	r2, r7
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 fd78 	bl	80091bc <__pow5mult>
 80086cc:	9a04      	ldr	r2, [sp, #16]
 80086ce:	4601      	mov	r1, r0
 80086d0:	4606      	mov	r6, r0
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 fcdb 	bl	800908e <__multiply>
 80086d8:	9904      	ldr	r1, [sp, #16]
 80086da:	9008      	str	r0, [sp, #32]
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fc2d 	bl	8008f3c <_Bfree>
 80086e2:	9b08      	ldr	r3, [sp, #32]
 80086e4:	9304      	str	r3, [sp, #16]
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	1bda      	subs	r2, r3, r7
 80086ea:	d004      	beq.n	80086f6 <_dtoa_r+0x76e>
 80086ec:	9904      	ldr	r1, [sp, #16]
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fd64 	bl	80091bc <__pow5mult>
 80086f4:	9004      	str	r0, [sp, #16]
 80086f6:	2101      	movs	r1, #1
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 fcbf 	bl	800907c <__i2b>
 80086fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008700:	4607      	mov	r7, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 81d0 	beq.w	8008aa8 <_dtoa_r+0xb20>
 8008708:	461a      	mov	r2, r3
 800870a:	4601      	mov	r1, r0
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fd55 	bl	80091bc <__pow5mult>
 8008712:	9b06      	ldr	r3, [sp, #24]
 8008714:	2b01      	cmp	r3, #1
 8008716:	4607      	mov	r7, r0
 8008718:	dc40      	bgt.n	800879c <_dtoa_r+0x814>
 800871a:	9b00      	ldr	r3, [sp, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d139      	bne.n	8008794 <_dtoa_r+0x80c>
 8008720:	9b01      	ldr	r3, [sp, #4]
 8008722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008726:	2b00      	cmp	r3, #0
 8008728:	d136      	bne.n	8008798 <_dtoa_r+0x810>
 800872a:	9b01      	ldr	r3, [sp, #4]
 800872c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008730:	0d1b      	lsrs	r3, r3, #20
 8008732:	051b      	lsls	r3, r3, #20
 8008734:	b12b      	cbz	r3, 8008742 <_dtoa_r+0x7ba>
 8008736:	9b05      	ldr	r3, [sp, #20]
 8008738:	3301      	adds	r3, #1
 800873a:	9305      	str	r3, [sp, #20]
 800873c:	f108 0801 	add.w	r8, r8, #1
 8008740:	2301      	movs	r3, #1
 8008742:	9307      	str	r3, [sp, #28]
 8008744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008746:	2b00      	cmp	r3, #0
 8008748:	d12a      	bne.n	80087a0 <_dtoa_r+0x818>
 800874a:	2001      	movs	r0, #1
 800874c:	e030      	b.n	80087b0 <_dtoa_r+0x828>
 800874e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008750:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008754:	e795      	b.n	8008682 <_dtoa_r+0x6fa>
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	f109 37ff 	add.w	r7, r9, #4294967295
 800875c:	42bb      	cmp	r3, r7
 800875e:	bfbf      	itttt	lt
 8008760:	9b07      	ldrlt	r3, [sp, #28]
 8008762:	9707      	strlt	r7, [sp, #28]
 8008764:	1afa      	sublt	r2, r7, r3
 8008766:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008768:	bfbb      	ittet	lt
 800876a:	189b      	addlt	r3, r3, r2
 800876c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800876e:	1bdf      	subge	r7, r3, r7
 8008770:	2700      	movlt	r7, #0
 8008772:	f1b9 0f00 	cmp.w	r9, #0
 8008776:	bfb5      	itete	lt
 8008778:	9b05      	ldrlt	r3, [sp, #20]
 800877a:	9d05      	ldrge	r5, [sp, #20]
 800877c:	eba3 0509 	sublt.w	r5, r3, r9
 8008780:	464b      	movge	r3, r9
 8008782:	bfb8      	it	lt
 8008784:	2300      	movlt	r3, #0
 8008786:	e77e      	b.n	8008686 <_dtoa_r+0x6fe>
 8008788:	9f07      	ldr	r7, [sp, #28]
 800878a:	9d05      	ldr	r5, [sp, #20]
 800878c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800878e:	e783      	b.n	8008698 <_dtoa_r+0x710>
 8008790:	9a07      	ldr	r2, [sp, #28]
 8008792:	e7ab      	b.n	80086ec <_dtoa_r+0x764>
 8008794:	2300      	movs	r3, #0
 8008796:	e7d4      	b.n	8008742 <_dtoa_r+0x7ba>
 8008798:	9b00      	ldr	r3, [sp, #0]
 800879a:	e7d2      	b.n	8008742 <_dtoa_r+0x7ba>
 800879c:	2300      	movs	r3, #0
 800879e:	9307      	str	r3, [sp, #28]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087a6:	6918      	ldr	r0, [r3, #16]
 80087a8:	f000 fc1a 	bl	8008fe0 <__hi0bits>
 80087ac:	f1c0 0020 	rsb	r0, r0, #32
 80087b0:	4440      	add	r0, r8
 80087b2:	f010 001f 	ands.w	r0, r0, #31
 80087b6:	d047      	beq.n	8008848 <_dtoa_r+0x8c0>
 80087b8:	f1c0 0320 	rsb	r3, r0, #32
 80087bc:	2b04      	cmp	r3, #4
 80087be:	dd3b      	ble.n	8008838 <_dtoa_r+0x8b0>
 80087c0:	9b05      	ldr	r3, [sp, #20]
 80087c2:	f1c0 001c 	rsb	r0, r0, #28
 80087c6:	4403      	add	r3, r0
 80087c8:	9305      	str	r3, [sp, #20]
 80087ca:	4405      	add	r5, r0
 80087cc:	4480      	add	r8, r0
 80087ce:	9b05      	ldr	r3, [sp, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dd05      	ble.n	80087e0 <_dtoa_r+0x858>
 80087d4:	461a      	mov	r2, r3
 80087d6:	9904      	ldr	r1, [sp, #16]
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fd3d 	bl	8009258 <__lshift>
 80087de:	9004      	str	r0, [sp, #16]
 80087e0:	f1b8 0f00 	cmp.w	r8, #0
 80087e4:	dd05      	ble.n	80087f2 <_dtoa_r+0x86a>
 80087e6:	4639      	mov	r1, r7
 80087e8:	4642      	mov	r2, r8
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 fd34 	bl	8009258 <__lshift>
 80087f0:	4607      	mov	r7, r0
 80087f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087f4:	b353      	cbz	r3, 800884c <_dtoa_r+0x8c4>
 80087f6:	4639      	mov	r1, r7
 80087f8:	9804      	ldr	r0, [sp, #16]
 80087fa:	f000 fd81 	bl	8009300 <__mcmp>
 80087fe:	2800      	cmp	r0, #0
 8008800:	da24      	bge.n	800884c <_dtoa_r+0x8c4>
 8008802:	2300      	movs	r3, #0
 8008804:	220a      	movs	r2, #10
 8008806:	9904      	ldr	r1, [sp, #16]
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fbae 	bl	8008f6a <__multadd>
 800880e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008810:	9004      	str	r0, [sp, #16]
 8008812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 814d 	beq.w	8008ab6 <_dtoa_r+0xb2e>
 800881c:	2300      	movs	r3, #0
 800881e:	4631      	mov	r1, r6
 8008820:	220a      	movs	r2, #10
 8008822:	4620      	mov	r0, r4
 8008824:	f000 fba1 	bl	8008f6a <__multadd>
 8008828:	9b02      	ldr	r3, [sp, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	4606      	mov	r6, r0
 800882e:	dc4f      	bgt.n	80088d0 <_dtoa_r+0x948>
 8008830:	9b06      	ldr	r3, [sp, #24]
 8008832:	2b02      	cmp	r3, #2
 8008834:	dd4c      	ble.n	80088d0 <_dtoa_r+0x948>
 8008836:	e011      	b.n	800885c <_dtoa_r+0x8d4>
 8008838:	d0c9      	beq.n	80087ce <_dtoa_r+0x846>
 800883a:	9a05      	ldr	r2, [sp, #20]
 800883c:	331c      	adds	r3, #28
 800883e:	441a      	add	r2, r3
 8008840:	9205      	str	r2, [sp, #20]
 8008842:	441d      	add	r5, r3
 8008844:	4498      	add	r8, r3
 8008846:	e7c2      	b.n	80087ce <_dtoa_r+0x846>
 8008848:	4603      	mov	r3, r0
 800884a:	e7f6      	b.n	800883a <_dtoa_r+0x8b2>
 800884c:	f1b9 0f00 	cmp.w	r9, #0
 8008850:	dc38      	bgt.n	80088c4 <_dtoa_r+0x93c>
 8008852:	9b06      	ldr	r3, [sp, #24]
 8008854:	2b02      	cmp	r3, #2
 8008856:	dd35      	ble.n	80088c4 <_dtoa_r+0x93c>
 8008858:	f8cd 9008 	str.w	r9, [sp, #8]
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	b963      	cbnz	r3, 800887a <_dtoa_r+0x8f2>
 8008860:	4639      	mov	r1, r7
 8008862:	2205      	movs	r2, #5
 8008864:	4620      	mov	r0, r4
 8008866:	f000 fb80 	bl	8008f6a <__multadd>
 800886a:	4601      	mov	r1, r0
 800886c:	4607      	mov	r7, r0
 800886e:	9804      	ldr	r0, [sp, #16]
 8008870:	f000 fd46 	bl	8009300 <__mcmp>
 8008874:	2800      	cmp	r0, #0
 8008876:	f73f adcc 	bgt.w	8008412 <_dtoa_r+0x48a>
 800887a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887c:	465d      	mov	r5, fp
 800887e:	ea6f 0a03 	mvn.w	sl, r3
 8008882:	f04f 0900 	mov.w	r9, #0
 8008886:	4639      	mov	r1, r7
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fb57 	bl	8008f3c <_Bfree>
 800888e:	2e00      	cmp	r6, #0
 8008890:	f43f aeb7 	beq.w	8008602 <_dtoa_r+0x67a>
 8008894:	f1b9 0f00 	cmp.w	r9, #0
 8008898:	d005      	beq.n	80088a6 <_dtoa_r+0x91e>
 800889a:	45b1      	cmp	r9, r6
 800889c:	d003      	beq.n	80088a6 <_dtoa_r+0x91e>
 800889e:	4649      	mov	r1, r9
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fb4b 	bl	8008f3c <_Bfree>
 80088a6:	4631      	mov	r1, r6
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fb47 	bl	8008f3c <_Bfree>
 80088ae:	e6a8      	b.n	8008602 <_dtoa_r+0x67a>
 80088b0:	2700      	movs	r7, #0
 80088b2:	463e      	mov	r6, r7
 80088b4:	e7e1      	b.n	800887a <_dtoa_r+0x8f2>
 80088b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80088ba:	463e      	mov	r6, r7
 80088bc:	e5a9      	b.n	8008412 <_dtoa_r+0x48a>
 80088be:	bf00      	nop
 80088c0:	40240000 	.word	0x40240000
 80088c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 80fa 	beq.w	8008ac4 <_dtoa_r+0xb3c>
 80088d0:	2d00      	cmp	r5, #0
 80088d2:	dd05      	ble.n	80088e0 <_dtoa_r+0x958>
 80088d4:	4631      	mov	r1, r6
 80088d6:	462a      	mov	r2, r5
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fcbd 	bl	8009258 <__lshift>
 80088de:	4606      	mov	r6, r0
 80088e0:	9b07      	ldr	r3, [sp, #28]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d04c      	beq.n	8008980 <_dtoa_r+0x9f8>
 80088e6:	6871      	ldr	r1, [r6, #4]
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 faf3 	bl	8008ed4 <_Balloc>
 80088ee:	6932      	ldr	r2, [r6, #16]
 80088f0:	3202      	adds	r2, #2
 80088f2:	4605      	mov	r5, r0
 80088f4:	0092      	lsls	r2, r2, #2
 80088f6:	f106 010c 	add.w	r1, r6, #12
 80088fa:	300c      	adds	r0, #12
 80088fc:	f7fe fc3e 	bl	800717c <memcpy>
 8008900:	2201      	movs	r2, #1
 8008902:	4629      	mov	r1, r5
 8008904:	4620      	mov	r0, r4
 8008906:	f000 fca7 	bl	8009258 <__lshift>
 800890a:	9b00      	ldr	r3, [sp, #0]
 800890c:	f8cd b014 	str.w	fp, [sp, #20]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	46b1      	mov	r9, r6
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	4606      	mov	r6, r0
 800891a:	4639      	mov	r1, r7
 800891c:	9804      	ldr	r0, [sp, #16]
 800891e:	f7ff faa7 	bl	8007e70 <quorem>
 8008922:	4649      	mov	r1, r9
 8008924:	4605      	mov	r5, r0
 8008926:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800892a:	9804      	ldr	r0, [sp, #16]
 800892c:	f000 fce8 	bl	8009300 <__mcmp>
 8008930:	4632      	mov	r2, r6
 8008932:	9000      	str	r0, [sp, #0]
 8008934:	4639      	mov	r1, r7
 8008936:	4620      	mov	r0, r4
 8008938:	f000 fcfc 	bl	8009334 <__mdiff>
 800893c:	68c3      	ldr	r3, [r0, #12]
 800893e:	4602      	mov	r2, r0
 8008940:	bb03      	cbnz	r3, 8008984 <_dtoa_r+0x9fc>
 8008942:	4601      	mov	r1, r0
 8008944:	9008      	str	r0, [sp, #32]
 8008946:	9804      	ldr	r0, [sp, #16]
 8008948:	f000 fcda 	bl	8009300 <__mcmp>
 800894c:	9a08      	ldr	r2, [sp, #32]
 800894e:	4603      	mov	r3, r0
 8008950:	4611      	mov	r1, r2
 8008952:	4620      	mov	r0, r4
 8008954:	9308      	str	r3, [sp, #32]
 8008956:	f000 faf1 	bl	8008f3c <_Bfree>
 800895a:	9b08      	ldr	r3, [sp, #32]
 800895c:	b9a3      	cbnz	r3, 8008988 <_dtoa_r+0xa00>
 800895e:	9a06      	ldr	r2, [sp, #24]
 8008960:	b992      	cbnz	r2, 8008988 <_dtoa_r+0xa00>
 8008962:	9a07      	ldr	r2, [sp, #28]
 8008964:	b982      	cbnz	r2, 8008988 <_dtoa_r+0xa00>
 8008966:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800896a:	d029      	beq.n	80089c0 <_dtoa_r+0xa38>
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	dd01      	ble.n	8008976 <_dtoa_r+0x9ee>
 8008972:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008976:	9b05      	ldr	r3, [sp, #20]
 8008978:	1c5d      	adds	r5, r3, #1
 800897a:	f883 8000 	strb.w	r8, [r3]
 800897e:	e782      	b.n	8008886 <_dtoa_r+0x8fe>
 8008980:	4630      	mov	r0, r6
 8008982:	e7c2      	b.n	800890a <_dtoa_r+0x982>
 8008984:	2301      	movs	r3, #1
 8008986:	e7e3      	b.n	8008950 <_dtoa_r+0x9c8>
 8008988:	9a00      	ldr	r2, [sp, #0]
 800898a:	2a00      	cmp	r2, #0
 800898c:	db04      	blt.n	8008998 <_dtoa_r+0xa10>
 800898e:	d125      	bne.n	80089dc <_dtoa_r+0xa54>
 8008990:	9a06      	ldr	r2, [sp, #24]
 8008992:	bb1a      	cbnz	r2, 80089dc <_dtoa_r+0xa54>
 8008994:	9a07      	ldr	r2, [sp, #28]
 8008996:	bb0a      	cbnz	r2, 80089dc <_dtoa_r+0xa54>
 8008998:	2b00      	cmp	r3, #0
 800899a:	ddec      	ble.n	8008976 <_dtoa_r+0x9ee>
 800899c:	2201      	movs	r2, #1
 800899e:	9904      	ldr	r1, [sp, #16]
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fc59 	bl	8009258 <__lshift>
 80089a6:	4639      	mov	r1, r7
 80089a8:	9004      	str	r0, [sp, #16]
 80089aa:	f000 fca9 	bl	8009300 <__mcmp>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	dc03      	bgt.n	80089ba <_dtoa_r+0xa32>
 80089b2:	d1e0      	bne.n	8008976 <_dtoa_r+0x9ee>
 80089b4:	f018 0f01 	tst.w	r8, #1
 80089b8:	d0dd      	beq.n	8008976 <_dtoa_r+0x9ee>
 80089ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089be:	d1d8      	bne.n	8008972 <_dtoa_r+0x9ea>
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	9a05      	ldr	r2, [sp, #20]
 80089c4:	1c5d      	adds	r5, r3, #1
 80089c6:	2339      	movs	r3, #57	; 0x39
 80089c8:	7013      	strb	r3, [r2, #0]
 80089ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089ce:	2b39      	cmp	r3, #57	; 0x39
 80089d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80089d4:	d04f      	beq.n	8008a76 <_dtoa_r+0xaee>
 80089d6:	3301      	adds	r3, #1
 80089d8:	7013      	strb	r3, [r2, #0]
 80089da:	e754      	b.n	8008886 <_dtoa_r+0x8fe>
 80089dc:	9a05      	ldr	r2, [sp, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f102 0501 	add.w	r5, r2, #1
 80089e4:	dd06      	ble.n	80089f4 <_dtoa_r+0xa6c>
 80089e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089ea:	d0e9      	beq.n	80089c0 <_dtoa_r+0xa38>
 80089ec:	f108 0801 	add.w	r8, r8, #1
 80089f0:	9b05      	ldr	r3, [sp, #20]
 80089f2:	e7c2      	b.n	800897a <_dtoa_r+0x9f2>
 80089f4:	9a02      	ldr	r2, [sp, #8]
 80089f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80089fa:	eba5 030b 	sub.w	r3, r5, fp
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d021      	beq.n	8008a46 <_dtoa_r+0xabe>
 8008a02:	2300      	movs	r3, #0
 8008a04:	220a      	movs	r2, #10
 8008a06:	9904      	ldr	r1, [sp, #16]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 faae 	bl	8008f6a <__multadd>
 8008a0e:	45b1      	cmp	r9, r6
 8008a10:	9004      	str	r0, [sp, #16]
 8008a12:	f04f 0300 	mov.w	r3, #0
 8008a16:	f04f 020a 	mov.w	r2, #10
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	d105      	bne.n	8008a2c <_dtoa_r+0xaa4>
 8008a20:	f000 faa3 	bl	8008f6a <__multadd>
 8008a24:	4681      	mov	r9, r0
 8008a26:	4606      	mov	r6, r0
 8008a28:	9505      	str	r5, [sp, #20]
 8008a2a:	e776      	b.n	800891a <_dtoa_r+0x992>
 8008a2c:	f000 fa9d 	bl	8008f6a <__multadd>
 8008a30:	4631      	mov	r1, r6
 8008a32:	4681      	mov	r9, r0
 8008a34:	2300      	movs	r3, #0
 8008a36:	220a      	movs	r2, #10
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fa96 	bl	8008f6a <__multadd>
 8008a3e:	4606      	mov	r6, r0
 8008a40:	e7f2      	b.n	8008a28 <_dtoa_r+0xaa0>
 8008a42:	f04f 0900 	mov.w	r9, #0
 8008a46:	2201      	movs	r2, #1
 8008a48:	9904      	ldr	r1, [sp, #16]
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fc04 	bl	8009258 <__lshift>
 8008a50:	4639      	mov	r1, r7
 8008a52:	9004      	str	r0, [sp, #16]
 8008a54:	f000 fc54 	bl	8009300 <__mcmp>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	dcb6      	bgt.n	80089ca <_dtoa_r+0xa42>
 8008a5c:	d102      	bne.n	8008a64 <_dtoa_r+0xadc>
 8008a5e:	f018 0f01 	tst.w	r8, #1
 8008a62:	d1b2      	bne.n	80089ca <_dtoa_r+0xa42>
 8008a64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a68:	2b30      	cmp	r3, #48	; 0x30
 8008a6a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a6e:	f47f af0a 	bne.w	8008886 <_dtoa_r+0x8fe>
 8008a72:	4615      	mov	r5, r2
 8008a74:	e7f6      	b.n	8008a64 <_dtoa_r+0xadc>
 8008a76:	4593      	cmp	fp, r2
 8008a78:	d105      	bne.n	8008a86 <_dtoa_r+0xafe>
 8008a7a:	2331      	movs	r3, #49	; 0x31
 8008a7c:	f10a 0a01 	add.w	sl, sl, #1
 8008a80:	f88b 3000 	strb.w	r3, [fp]
 8008a84:	e6ff      	b.n	8008886 <_dtoa_r+0x8fe>
 8008a86:	4615      	mov	r5, r2
 8008a88:	e79f      	b.n	80089ca <_dtoa_r+0xa42>
 8008a8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008af0 <_dtoa_r+0xb68>
 8008a8e:	e007      	b.n	8008aa0 <_dtoa_r+0xb18>
 8008a90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008af4 <_dtoa_r+0xb6c>
 8008a96:	b11b      	cbz	r3, 8008aa0 <_dtoa_r+0xb18>
 8008a98:	f10b 0308 	add.w	r3, fp, #8
 8008a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	4658      	mov	r0, fp
 8008aa2:	b017      	add	sp, #92	; 0x5c
 8008aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa8:	9b06      	ldr	r3, [sp, #24]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	f77f ae35 	ble.w	800871a <_dtoa_r+0x792>
 8008ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ab2:	9307      	str	r3, [sp, #28]
 8008ab4:	e649      	b.n	800874a <_dtoa_r+0x7c2>
 8008ab6:	9b02      	ldr	r3, [sp, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dc03      	bgt.n	8008ac4 <_dtoa_r+0xb3c>
 8008abc:	9b06      	ldr	r3, [sp, #24]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	f73f aecc 	bgt.w	800885c <_dtoa_r+0x8d4>
 8008ac4:	465d      	mov	r5, fp
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	9804      	ldr	r0, [sp, #16]
 8008aca:	f7ff f9d1 	bl	8007e70 <quorem>
 8008ace:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ad2:	f805 8b01 	strb.w	r8, [r5], #1
 8008ad6:	9a02      	ldr	r2, [sp, #8]
 8008ad8:	eba5 030b 	sub.w	r3, r5, fp
 8008adc:	429a      	cmp	r2, r3
 8008ade:	ddb0      	ble.n	8008a42 <_dtoa_r+0xaba>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	9904      	ldr	r1, [sp, #16]
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 fa3f 	bl	8008f6a <__multadd>
 8008aec:	9004      	str	r0, [sp, #16]
 8008aee:	e7ea      	b.n	8008ac6 <_dtoa_r+0xb3e>
 8008af0:	08065820 	.word	0x08065820
 8008af4:	08065844 	.word	0x08065844

08008af8 <__sflush_r>:
 8008af8:	898a      	ldrh	r2, [r1, #12]
 8008afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afe:	4605      	mov	r5, r0
 8008b00:	0710      	lsls	r0, r2, #28
 8008b02:	460c      	mov	r4, r1
 8008b04:	d458      	bmi.n	8008bb8 <__sflush_r+0xc0>
 8008b06:	684b      	ldr	r3, [r1, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc05      	bgt.n	8008b18 <__sflush_r+0x20>
 8008b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dc02      	bgt.n	8008b18 <__sflush_r+0x20>
 8008b12:	2000      	movs	r0, #0
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	d0f9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b24:	682f      	ldr	r7, [r5, #0]
 8008b26:	6a21      	ldr	r1, [r4, #32]
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	d032      	beq.n	8008b92 <__sflush_r+0x9a>
 8008b2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	075a      	lsls	r2, r3, #29
 8008b32:	d505      	bpl.n	8008b40 <__sflush_r+0x48>
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	1ac0      	subs	r0, r0, r3
 8008b38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b3a:	b10b      	cbz	r3, 8008b40 <__sflush_r+0x48>
 8008b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b3e:	1ac0      	subs	r0, r0, r3
 8008b40:	2300      	movs	r3, #0
 8008b42:	4602      	mov	r2, r0
 8008b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b46:	6a21      	ldr	r1, [r4, #32]
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b0      	blx	r6
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	d106      	bne.n	8008b60 <__sflush_r+0x68>
 8008b52:	6829      	ldr	r1, [r5, #0]
 8008b54:	291d      	cmp	r1, #29
 8008b56:	d848      	bhi.n	8008bea <__sflush_r+0xf2>
 8008b58:	4a29      	ldr	r2, [pc, #164]	; (8008c00 <__sflush_r+0x108>)
 8008b5a:	40ca      	lsrs	r2, r1
 8008b5c:	07d6      	lsls	r6, r2, #31
 8008b5e:	d544      	bpl.n	8008bea <__sflush_r+0xf2>
 8008b60:	2200      	movs	r2, #0
 8008b62:	6062      	str	r2, [r4, #4]
 8008b64:	04d9      	lsls	r1, r3, #19
 8008b66:	6922      	ldr	r2, [r4, #16]
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	d504      	bpl.n	8008b76 <__sflush_r+0x7e>
 8008b6c:	1c42      	adds	r2, r0, #1
 8008b6e:	d101      	bne.n	8008b74 <__sflush_r+0x7c>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b903      	cbnz	r3, 8008b76 <__sflush_r+0x7e>
 8008b74:	6560      	str	r0, [r4, #84]	; 0x54
 8008b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b78:	602f      	str	r7, [r5, #0]
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d0c9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b82:	4299      	cmp	r1, r3
 8008b84:	d002      	beq.n	8008b8c <__sflush_r+0x94>
 8008b86:	4628      	mov	r0, r5
 8008b88:	f7fe fb1a 	bl	80071c0 <_free_r>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	6360      	str	r0, [r4, #52]	; 0x34
 8008b90:	e7c0      	b.n	8008b14 <__sflush_r+0x1c>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b0      	blx	r6
 8008b98:	1c41      	adds	r1, r0, #1
 8008b9a:	d1c8      	bne.n	8008b2e <__sflush_r+0x36>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0c5      	beq.n	8008b2e <__sflush_r+0x36>
 8008ba2:	2b1d      	cmp	r3, #29
 8008ba4:	d001      	beq.n	8008baa <__sflush_r+0xb2>
 8008ba6:	2b16      	cmp	r3, #22
 8008ba8:	d101      	bne.n	8008bae <__sflush_r+0xb6>
 8008baa:	602f      	str	r7, [r5, #0]
 8008bac:	e7b1      	b.n	8008b12 <__sflush_r+0x1a>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	e7ad      	b.n	8008b14 <__sflush_r+0x1c>
 8008bb8:	690f      	ldr	r7, [r1, #16]
 8008bba:	2f00      	cmp	r7, #0
 8008bbc:	d0a9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008bbe:	0793      	lsls	r3, r2, #30
 8008bc0:	680e      	ldr	r6, [r1, #0]
 8008bc2:	bf08      	it	eq
 8008bc4:	694b      	ldreq	r3, [r1, #20]
 8008bc6:	600f      	str	r7, [r1, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	2300      	movne	r3, #0
 8008bcc:	eba6 0807 	sub.w	r8, r6, r7
 8008bd0:	608b      	str	r3, [r1, #8]
 8008bd2:	f1b8 0f00 	cmp.w	r8, #0
 8008bd6:	dd9c      	ble.n	8008b12 <__sflush_r+0x1a>
 8008bd8:	4643      	mov	r3, r8
 8008bda:	463a      	mov	r2, r7
 8008bdc:	6a21      	ldr	r1, [r4, #32]
 8008bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b0      	blx	r6
 8008be4:	2800      	cmp	r0, #0
 8008be6:	dc06      	bgt.n	8008bf6 <__sflush_r+0xfe>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e78e      	b.n	8008b14 <__sflush_r+0x1c>
 8008bf6:	4407      	add	r7, r0
 8008bf8:	eba8 0800 	sub.w	r8, r8, r0
 8008bfc:	e7e9      	b.n	8008bd2 <__sflush_r+0xda>
 8008bfe:	bf00      	nop
 8008c00:	20400001 	.word	0x20400001

08008c04 <_fflush_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	690b      	ldr	r3, [r1, #16]
 8008c08:	4605      	mov	r5, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	b1db      	cbz	r3, 8008c46 <_fflush_r+0x42>
 8008c0e:	b118      	cbz	r0, 8008c18 <_fflush_r+0x14>
 8008c10:	6983      	ldr	r3, [r0, #24]
 8008c12:	b90b      	cbnz	r3, 8008c18 <_fflush_r+0x14>
 8008c14:	f000 f860 	bl	8008cd8 <__sinit>
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <_fflush_r+0x48>)
 8008c1a:	429c      	cmp	r4, r3
 8008c1c:	d109      	bne.n	8008c32 <_fflush_r+0x2e>
 8008c1e:	686c      	ldr	r4, [r5, #4]
 8008c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c24:	b17b      	cbz	r3, 8008c46 <_fflush_r+0x42>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c2e:	f7ff bf63 	b.w	8008af8 <__sflush_r>
 8008c32:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <_fflush_r+0x4c>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	d101      	bne.n	8008c3c <_fflush_r+0x38>
 8008c38:	68ac      	ldr	r4, [r5, #8]
 8008c3a:	e7f1      	b.n	8008c20 <_fflush_r+0x1c>
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <_fflush_r+0x50>)
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	bf08      	it	eq
 8008c42:	68ec      	ldreq	r4, [r5, #12]
 8008c44:	e7ec      	b.n	8008c20 <_fflush_r+0x1c>
 8008c46:	2000      	movs	r0, #0
 8008c48:	bd38      	pop	{r3, r4, r5, pc}
 8008c4a:	bf00      	nop
 8008c4c:	08065874 	.word	0x08065874
 8008c50:	08065894 	.word	0x08065894
 8008c54:	08065854 	.word	0x08065854

08008c58 <std>:
 8008c58:	2300      	movs	r3, #0
 8008c5a:	b510      	push	{r4, lr}
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c62:	6083      	str	r3, [r0, #8]
 8008c64:	8181      	strh	r1, [r0, #12]
 8008c66:	6643      	str	r3, [r0, #100]	; 0x64
 8008c68:	81c2      	strh	r2, [r0, #14]
 8008c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c6e:	6183      	str	r3, [r0, #24]
 8008c70:	4619      	mov	r1, r3
 8008c72:	2208      	movs	r2, #8
 8008c74:	305c      	adds	r0, #92	; 0x5c
 8008c76:	f7fe fa8c 	bl	8007192 <memset>
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <std+0x38>)
 8008c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c7e:	4b05      	ldr	r3, [pc, #20]	; (8008c94 <std+0x3c>)
 8008c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c82:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <std+0x40>)
 8008c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <std+0x44>)
 8008c88:	6224      	str	r4, [r4, #32]
 8008c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	bf00      	nop
 8008c90:	08009759 	.word	0x08009759
 8008c94:	0800977b 	.word	0x0800977b
 8008c98:	080097b3 	.word	0x080097b3
 8008c9c:	080097d7 	.word	0x080097d7

08008ca0 <_cleanup_r>:
 8008ca0:	4901      	ldr	r1, [pc, #4]	; (8008ca8 <_cleanup_r+0x8>)
 8008ca2:	f000 b885 	b.w	8008db0 <_fwalk_reent>
 8008ca6:	bf00      	nop
 8008ca8:	08008c05 	.word	0x08008c05

08008cac <__sfmoreglue>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	1e4a      	subs	r2, r1, #1
 8008cb0:	2568      	movs	r5, #104	; 0x68
 8008cb2:	4355      	muls	r5, r2
 8008cb4:	460e      	mov	r6, r1
 8008cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cba:	f7fe facf 	bl	800725c <_malloc_r>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	b140      	cbz	r0, 8008cd4 <__sfmoreglue+0x28>
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8008cc8:	300c      	adds	r0, #12
 8008cca:	60a0      	str	r0, [r4, #8]
 8008ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cd0:	f7fe fa5f 	bl	8007192 <memset>
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}

08008cd8 <__sinit>:
 8008cd8:	6983      	ldr	r3, [r0, #24]
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	4604      	mov	r4, r0
 8008cde:	bb33      	cbnz	r3, 8008d2e <__sinit+0x56>
 8008ce0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008ce4:	6503      	str	r3, [r0, #80]	; 0x50
 8008ce6:	4b12      	ldr	r3, [pc, #72]	; (8008d30 <__sinit+0x58>)
 8008ce8:	4a12      	ldr	r2, [pc, #72]	; (8008d34 <__sinit+0x5c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6282      	str	r2, [r0, #40]	; 0x28
 8008cee:	4298      	cmp	r0, r3
 8008cf0:	bf04      	itt	eq
 8008cf2:	2301      	moveq	r3, #1
 8008cf4:	6183      	streq	r3, [r0, #24]
 8008cf6:	f000 f81f 	bl	8008d38 <__sfp>
 8008cfa:	6060      	str	r0, [r4, #4]
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 f81b 	bl	8008d38 <__sfp>
 8008d02:	60a0      	str	r0, [r4, #8]
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 f817 	bl	8008d38 <__sfp>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	60e0      	str	r0, [r4, #12]
 8008d0e:	2104      	movs	r1, #4
 8008d10:	6860      	ldr	r0, [r4, #4]
 8008d12:	f7ff ffa1 	bl	8008c58 <std>
 8008d16:	2201      	movs	r2, #1
 8008d18:	2109      	movs	r1, #9
 8008d1a:	68a0      	ldr	r0, [r4, #8]
 8008d1c:	f7ff ff9c 	bl	8008c58 <std>
 8008d20:	2202      	movs	r2, #2
 8008d22:	2112      	movs	r1, #18
 8008d24:	68e0      	ldr	r0, [r4, #12]
 8008d26:	f7ff ff97 	bl	8008c58 <std>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	61a3      	str	r3, [r4, #24]
 8008d2e:	bd10      	pop	{r4, pc}
 8008d30:	0806580c 	.word	0x0806580c
 8008d34:	08008ca1 	.word	0x08008ca1

08008d38 <__sfp>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <__sfp+0x70>)
 8008d3c:	681e      	ldr	r6, [r3, #0]
 8008d3e:	69b3      	ldr	r3, [r6, #24]
 8008d40:	4607      	mov	r7, r0
 8008d42:	b913      	cbnz	r3, 8008d4a <__sfp+0x12>
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7ff ffc7 	bl	8008cd8 <__sinit>
 8008d4a:	3648      	adds	r6, #72	; 0x48
 8008d4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	d503      	bpl.n	8008d5c <__sfp+0x24>
 8008d54:	6833      	ldr	r3, [r6, #0]
 8008d56:	b133      	cbz	r3, 8008d66 <__sfp+0x2e>
 8008d58:	6836      	ldr	r6, [r6, #0]
 8008d5a:	e7f7      	b.n	8008d4c <__sfp+0x14>
 8008d5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d60:	b16d      	cbz	r5, 8008d7e <__sfp+0x46>
 8008d62:	3468      	adds	r4, #104	; 0x68
 8008d64:	e7f4      	b.n	8008d50 <__sfp+0x18>
 8008d66:	2104      	movs	r1, #4
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff ff9f 	bl	8008cac <__sfmoreglue>
 8008d6e:	6030      	str	r0, [r6, #0]
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d1f1      	bne.n	8008d58 <__sfp+0x20>
 8008d74:	230c      	movs	r3, #12
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	4604      	mov	r4, r0
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d7e:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <__sfp+0x74>)
 8008d80:	6665      	str	r5, [r4, #100]	; 0x64
 8008d82:	e9c4 5500 	strd	r5, r5, [r4]
 8008d86:	60a5      	str	r5, [r4, #8]
 8008d88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008d8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008d90:	2208      	movs	r2, #8
 8008d92:	4629      	mov	r1, r5
 8008d94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d98:	f7fe f9fb 	bl	8007192 <memset>
 8008d9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008da0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008da4:	e7e9      	b.n	8008d7a <__sfp+0x42>
 8008da6:	bf00      	nop
 8008da8:	0806580c 	.word	0x0806580c
 8008dac:	ffff0001 	.word	0xffff0001

08008db0 <_fwalk_reent>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	4680      	mov	r8, r0
 8008db6:	4689      	mov	r9, r1
 8008db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dbc:	2600      	movs	r6, #0
 8008dbe:	b914      	cbnz	r4, 8008dc6 <_fwalk_reent+0x16>
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008dca:	3f01      	subs	r7, #1
 8008dcc:	d501      	bpl.n	8008dd2 <_fwalk_reent+0x22>
 8008dce:	6824      	ldr	r4, [r4, #0]
 8008dd0:	e7f5      	b.n	8008dbe <_fwalk_reent+0xe>
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d907      	bls.n	8008de8 <_fwalk_reent+0x38>
 8008dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	d003      	beq.n	8008de8 <_fwalk_reent+0x38>
 8008de0:	4629      	mov	r1, r5
 8008de2:	4640      	mov	r0, r8
 8008de4:	47c8      	blx	r9
 8008de6:	4306      	orrs	r6, r0
 8008de8:	3568      	adds	r5, #104	; 0x68
 8008dea:	e7ee      	b.n	8008dca <_fwalk_reent+0x1a>

08008dec <_localeconv_r>:
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <_localeconv_r+0x14>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6a18      	ldr	r0, [r3, #32]
 8008df2:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <_localeconv_r+0x18>)
 8008df4:	2800      	cmp	r0, #0
 8008df6:	bf08      	it	eq
 8008df8:	4618      	moveq	r0, r3
 8008dfa:	30f0      	adds	r0, #240	; 0xf0
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	20000ed0 	.word	0x20000ed0
 8008e04:	20000f34 	.word	0x20000f34

08008e08 <__swhatbuf_r>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	460e      	mov	r6, r1
 8008e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e10:	2900      	cmp	r1, #0
 8008e12:	b096      	sub	sp, #88	; 0x58
 8008e14:	4614      	mov	r4, r2
 8008e16:	461d      	mov	r5, r3
 8008e18:	da07      	bge.n	8008e2a <__swhatbuf_r+0x22>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	602b      	str	r3, [r5, #0]
 8008e1e:	89b3      	ldrh	r3, [r6, #12]
 8008e20:	061a      	lsls	r2, r3, #24
 8008e22:	d410      	bmi.n	8008e46 <__swhatbuf_r+0x3e>
 8008e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e28:	e00e      	b.n	8008e48 <__swhatbuf_r+0x40>
 8008e2a:	466a      	mov	r2, sp
 8008e2c:	f000 fcfa 	bl	8009824 <_fstat_r>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	dbf2      	blt.n	8008e1a <__swhatbuf_r+0x12>
 8008e34:	9a01      	ldr	r2, [sp, #4]
 8008e36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e3e:	425a      	negs	r2, r3
 8008e40:	415a      	adcs	r2, r3
 8008e42:	602a      	str	r2, [r5, #0]
 8008e44:	e7ee      	b.n	8008e24 <__swhatbuf_r+0x1c>
 8008e46:	2340      	movs	r3, #64	; 0x40
 8008e48:	2000      	movs	r0, #0
 8008e4a:	6023      	str	r3, [r4, #0]
 8008e4c:	b016      	add	sp, #88	; 0x58
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}

08008e50 <__smakebuf_r>:
 8008e50:	898b      	ldrh	r3, [r1, #12]
 8008e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e54:	079d      	lsls	r5, r3, #30
 8008e56:	4606      	mov	r6, r0
 8008e58:	460c      	mov	r4, r1
 8008e5a:	d507      	bpl.n	8008e6c <__smakebuf_r+0x1c>
 8008e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	6123      	str	r3, [r4, #16]
 8008e64:	2301      	movs	r3, #1
 8008e66:	6163      	str	r3, [r4, #20]
 8008e68:	b002      	add	sp, #8
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	ab01      	add	r3, sp, #4
 8008e6e:	466a      	mov	r2, sp
 8008e70:	f7ff ffca 	bl	8008e08 <__swhatbuf_r>
 8008e74:	9900      	ldr	r1, [sp, #0]
 8008e76:	4605      	mov	r5, r0
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7fe f9ef 	bl	800725c <_malloc_r>
 8008e7e:	b948      	cbnz	r0, 8008e94 <__smakebuf_r+0x44>
 8008e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e84:	059a      	lsls	r2, r3, #22
 8008e86:	d4ef      	bmi.n	8008e68 <__smakebuf_r+0x18>
 8008e88:	f023 0303 	bic.w	r3, r3, #3
 8008e8c:	f043 0302 	orr.w	r3, r3, #2
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	e7e3      	b.n	8008e5c <__smakebuf_r+0xc>
 8008e94:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <__smakebuf_r+0x7c>)
 8008e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	6020      	str	r0, [r4, #0]
 8008e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	9b00      	ldr	r3, [sp, #0]
 8008ea4:	6163      	str	r3, [r4, #20]
 8008ea6:	9b01      	ldr	r3, [sp, #4]
 8008ea8:	6120      	str	r0, [r4, #16]
 8008eaa:	b15b      	cbz	r3, 8008ec4 <__smakebuf_r+0x74>
 8008eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f000 fcc9 	bl	8009848 <_isatty_r>
 8008eb6:	b128      	cbz	r0, 8008ec4 <__smakebuf_r+0x74>
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	f023 0303 	bic.w	r3, r3, #3
 8008ebe:	f043 0301 	orr.w	r3, r3, #1
 8008ec2:	81a3      	strh	r3, [r4, #12]
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	431d      	orrs	r5, r3
 8008ec8:	81a5      	strh	r5, [r4, #12]
 8008eca:	e7cd      	b.n	8008e68 <__smakebuf_r+0x18>
 8008ecc:	08008ca1 	.word	0x08008ca1

08008ed0 <__malloc_lock>:
 8008ed0:	4770      	bx	lr

08008ed2 <__malloc_unlock>:
 8008ed2:	4770      	bx	lr

08008ed4 <_Balloc>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460e      	mov	r6, r1
 8008edc:	b93d      	cbnz	r5, 8008eee <_Balloc+0x1a>
 8008ede:	2010      	movs	r0, #16
 8008ee0:	f7fe f93c 	bl	800715c <malloc>
 8008ee4:	6260      	str	r0, [r4, #36]	; 0x24
 8008ee6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008eea:	6005      	str	r5, [r0, #0]
 8008eec:	60c5      	str	r5, [r0, #12]
 8008eee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008ef0:	68eb      	ldr	r3, [r5, #12]
 8008ef2:	b183      	cbz	r3, 8008f16 <_Balloc+0x42>
 8008ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008efc:	b9b8      	cbnz	r0, 8008f2e <_Balloc+0x5a>
 8008efe:	2101      	movs	r1, #1
 8008f00:	fa01 f506 	lsl.w	r5, r1, r6
 8008f04:	1d6a      	adds	r2, r5, #5
 8008f06:	0092      	lsls	r2, r2, #2
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f7fe f94a 	bl	80071a2 <_calloc_r>
 8008f0e:	b160      	cbz	r0, 8008f2a <_Balloc+0x56>
 8008f10:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008f14:	e00e      	b.n	8008f34 <_Balloc+0x60>
 8008f16:	2221      	movs	r2, #33	; 0x21
 8008f18:	2104      	movs	r1, #4
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f7fe f941 	bl	80071a2 <_calloc_r>
 8008f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f22:	60e8      	str	r0, [r5, #12]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e4      	bne.n	8008ef4 <_Balloc+0x20>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	bd70      	pop	{r4, r5, r6, pc}
 8008f2e:	6802      	ldr	r2, [r0, #0]
 8008f30:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008f34:	2300      	movs	r3, #0
 8008f36:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f3a:	e7f7      	b.n	8008f2c <_Balloc+0x58>

08008f3c <_Bfree>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f40:	4606      	mov	r6, r0
 8008f42:	460d      	mov	r5, r1
 8008f44:	b93c      	cbnz	r4, 8008f56 <_Bfree+0x1a>
 8008f46:	2010      	movs	r0, #16
 8008f48:	f7fe f908 	bl	800715c <malloc>
 8008f4c:	6270      	str	r0, [r6, #36]	; 0x24
 8008f4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f52:	6004      	str	r4, [r0, #0]
 8008f54:	60c4      	str	r4, [r0, #12]
 8008f56:	b13d      	cbz	r5, 8008f68 <_Bfree+0x2c>
 8008f58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f5a:	686a      	ldr	r2, [r5, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f62:	6029      	str	r1, [r5, #0]
 8008f64:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008f68:	bd70      	pop	{r4, r5, r6, pc}

08008f6a <__multadd>:
 8008f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6e:	690d      	ldr	r5, [r1, #16]
 8008f70:	461f      	mov	r7, r3
 8008f72:	4606      	mov	r6, r0
 8008f74:	460c      	mov	r4, r1
 8008f76:	f101 0c14 	add.w	ip, r1, #20
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f8dc 0000 	ldr.w	r0, [ip]
 8008f80:	b281      	uxth	r1, r0
 8008f82:	fb02 7101 	mla	r1, r2, r1, r7
 8008f86:	0c0f      	lsrs	r7, r1, #16
 8008f88:	0c00      	lsrs	r0, r0, #16
 8008f8a:	fb02 7000 	mla	r0, r2, r0, r7
 8008f8e:	b289      	uxth	r1, r1
 8008f90:	3301      	adds	r3, #1
 8008f92:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008f96:	429d      	cmp	r5, r3
 8008f98:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008f9c:	f84c 1b04 	str.w	r1, [ip], #4
 8008fa0:	dcec      	bgt.n	8008f7c <__multadd+0x12>
 8008fa2:	b1d7      	cbz	r7, 8008fda <__multadd+0x70>
 8008fa4:	68a3      	ldr	r3, [r4, #8]
 8008fa6:	42ab      	cmp	r3, r5
 8008fa8:	dc12      	bgt.n	8008fd0 <__multadd+0x66>
 8008faa:	6861      	ldr	r1, [r4, #4]
 8008fac:	4630      	mov	r0, r6
 8008fae:	3101      	adds	r1, #1
 8008fb0:	f7ff ff90 	bl	8008ed4 <_Balloc>
 8008fb4:	6922      	ldr	r2, [r4, #16]
 8008fb6:	3202      	adds	r2, #2
 8008fb8:	f104 010c 	add.w	r1, r4, #12
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	0092      	lsls	r2, r2, #2
 8008fc0:	300c      	adds	r0, #12
 8008fc2:	f7fe f8db 	bl	800717c <memcpy>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff ffb7 	bl	8008f3c <_Bfree>
 8008fce:	4644      	mov	r4, r8
 8008fd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	615f      	str	r7, [r3, #20]
 8008fd8:	6125      	str	r5, [r4, #16]
 8008fda:	4620      	mov	r0, r4
 8008fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fe0 <__hi0bits>:
 8008fe0:	0c02      	lsrs	r2, r0, #16
 8008fe2:	0412      	lsls	r2, r2, #16
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	b9b2      	cbnz	r2, 8009016 <__hi0bits+0x36>
 8008fe8:	0403      	lsls	r3, r0, #16
 8008fea:	2010      	movs	r0, #16
 8008fec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008ff0:	bf04      	itt	eq
 8008ff2:	021b      	lsleq	r3, r3, #8
 8008ff4:	3008      	addeq	r0, #8
 8008ff6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008ffa:	bf04      	itt	eq
 8008ffc:	011b      	lsleq	r3, r3, #4
 8008ffe:	3004      	addeq	r0, #4
 8009000:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009004:	bf04      	itt	eq
 8009006:	009b      	lsleq	r3, r3, #2
 8009008:	3002      	addeq	r0, #2
 800900a:	2b00      	cmp	r3, #0
 800900c:	db06      	blt.n	800901c <__hi0bits+0x3c>
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	d503      	bpl.n	800901a <__hi0bits+0x3a>
 8009012:	3001      	adds	r0, #1
 8009014:	4770      	bx	lr
 8009016:	2000      	movs	r0, #0
 8009018:	e7e8      	b.n	8008fec <__hi0bits+0xc>
 800901a:	2020      	movs	r0, #32
 800901c:	4770      	bx	lr

0800901e <__lo0bits>:
 800901e:	6803      	ldr	r3, [r0, #0]
 8009020:	f013 0207 	ands.w	r2, r3, #7
 8009024:	4601      	mov	r1, r0
 8009026:	d00b      	beq.n	8009040 <__lo0bits+0x22>
 8009028:	07da      	lsls	r2, r3, #31
 800902a:	d423      	bmi.n	8009074 <__lo0bits+0x56>
 800902c:	0798      	lsls	r0, r3, #30
 800902e:	bf49      	itett	mi
 8009030:	085b      	lsrmi	r3, r3, #1
 8009032:	089b      	lsrpl	r3, r3, #2
 8009034:	2001      	movmi	r0, #1
 8009036:	600b      	strmi	r3, [r1, #0]
 8009038:	bf5c      	itt	pl
 800903a:	600b      	strpl	r3, [r1, #0]
 800903c:	2002      	movpl	r0, #2
 800903e:	4770      	bx	lr
 8009040:	b298      	uxth	r0, r3
 8009042:	b9a8      	cbnz	r0, 8009070 <__lo0bits+0x52>
 8009044:	0c1b      	lsrs	r3, r3, #16
 8009046:	2010      	movs	r0, #16
 8009048:	f013 0fff 	tst.w	r3, #255	; 0xff
 800904c:	bf04      	itt	eq
 800904e:	0a1b      	lsreq	r3, r3, #8
 8009050:	3008      	addeq	r0, #8
 8009052:	071a      	lsls	r2, r3, #28
 8009054:	bf04      	itt	eq
 8009056:	091b      	lsreq	r3, r3, #4
 8009058:	3004      	addeq	r0, #4
 800905a:	079a      	lsls	r2, r3, #30
 800905c:	bf04      	itt	eq
 800905e:	089b      	lsreq	r3, r3, #2
 8009060:	3002      	addeq	r0, #2
 8009062:	07da      	lsls	r2, r3, #31
 8009064:	d402      	bmi.n	800906c <__lo0bits+0x4e>
 8009066:	085b      	lsrs	r3, r3, #1
 8009068:	d006      	beq.n	8009078 <__lo0bits+0x5a>
 800906a:	3001      	adds	r0, #1
 800906c:	600b      	str	r3, [r1, #0]
 800906e:	4770      	bx	lr
 8009070:	4610      	mov	r0, r2
 8009072:	e7e9      	b.n	8009048 <__lo0bits+0x2a>
 8009074:	2000      	movs	r0, #0
 8009076:	4770      	bx	lr
 8009078:	2020      	movs	r0, #32
 800907a:	4770      	bx	lr

0800907c <__i2b>:
 800907c:	b510      	push	{r4, lr}
 800907e:	460c      	mov	r4, r1
 8009080:	2101      	movs	r1, #1
 8009082:	f7ff ff27 	bl	8008ed4 <_Balloc>
 8009086:	2201      	movs	r2, #1
 8009088:	6144      	str	r4, [r0, #20]
 800908a:	6102      	str	r2, [r0, #16]
 800908c:	bd10      	pop	{r4, pc}

0800908e <__multiply>:
 800908e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009092:	4614      	mov	r4, r2
 8009094:	690a      	ldr	r2, [r1, #16]
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	429a      	cmp	r2, r3
 800909a:	bfb8      	it	lt
 800909c:	460b      	movlt	r3, r1
 800909e:	4688      	mov	r8, r1
 80090a0:	bfbc      	itt	lt
 80090a2:	46a0      	movlt	r8, r4
 80090a4:	461c      	movlt	r4, r3
 80090a6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80090ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80090b6:	eb07 0609 	add.w	r6, r7, r9
 80090ba:	42b3      	cmp	r3, r6
 80090bc:	bfb8      	it	lt
 80090be:	3101      	addlt	r1, #1
 80090c0:	f7ff ff08 	bl	8008ed4 <_Balloc>
 80090c4:	f100 0514 	add.w	r5, r0, #20
 80090c8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80090cc:	462b      	mov	r3, r5
 80090ce:	2200      	movs	r2, #0
 80090d0:	4573      	cmp	r3, lr
 80090d2:	d316      	bcc.n	8009102 <__multiply+0x74>
 80090d4:	f104 0214 	add.w	r2, r4, #20
 80090d8:	f108 0114 	add.w	r1, r8, #20
 80090dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80090e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	9b00      	ldr	r3, [sp, #0]
 80090e8:	9201      	str	r2, [sp, #4]
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d80c      	bhi.n	8009108 <__multiply+0x7a>
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	dd03      	ble.n	80090fa <__multiply+0x6c>
 80090f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d05d      	beq.n	80091b6 <__multiply+0x128>
 80090fa:	6106      	str	r6, [r0, #16]
 80090fc:	b003      	add	sp, #12
 80090fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009102:	f843 2b04 	str.w	r2, [r3], #4
 8009106:	e7e3      	b.n	80090d0 <__multiply+0x42>
 8009108:	f8b2 b000 	ldrh.w	fp, [r2]
 800910c:	f1bb 0f00 	cmp.w	fp, #0
 8009110:	d023      	beq.n	800915a <__multiply+0xcc>
 8009112:	4689      	mov	r9, r1
 8009114:	46ac      	mov	ip, r5
 8009116:	f04f 0800 	mov.w	r8, #0
 800911a:	f859 4b04 	ldr.w	r4, [r9], #4
 800911e:	f8dc a000 	ldr.w	sl, [ip]
 8009122:	b2a3      	uxth	r3, r4
 8009124:	fa1f fa8a 	uxth.w	sl, sl
 8009128:	fb0b a303 	mla	r3, fp, r3, sl
 800912c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009130:	f8dc 4000 	ldr.w	r4, [ip]
 8009134:	4443      	add	r3, r8
 8009136:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800913a:	fb0b 840a 	mla	r4, fp, sl, r8
 800913e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009142:	46e2      	mov	sl, ip
 8009144:	b29b      	uxth	r3, r3
 8009146:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800914a:	454f      	cmp	r7, r9
 800914c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009150:	f84a 3b04 	str.w	r3, [sl], #4
 8009154:	d82b      	bhi.n	80091ae <__multiply+0x120>
 8009156:	f8cc 8004 	str.w	r8, [ip, #4]
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009160:	3204      	adds	r2, #4
 8009162:	f1ba 0f00 	cmp.w	sl, #0
 8009166:	d020      	beq.n	80091aa <__multiply+0x11c>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	4689      	mov	r9, r1
 800916c:	46a8      	mov	r8, r5
 800916e:	f04f 0b00 	mov.w	fp, #0
 8009172:	f8b9 c000 	ldrh.w	ip, [r9]
 8009176:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800917a:	fb0a 440c 	mla	r4, sl, ip, r4
 800917e:	445c      	add	r4, fp
 8009180:	46c4      	mov	ip, r8
 8009182:	b29b      	uxth	r3, r3
 8009184:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009188:	f84c 3b04 	str.w	r3, [ip], #4
 800918c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009190:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009194:	0c1b      	lsrs	r3, r3, #16
 8009196:	fb0a b303 	mla	r3, sl, r3, fp
 800919a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800919e:	454f      	cmp	r7, r9
 80091a0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80091a4:	d805      	bhi.n	80091b2 <__multiply+0x124>
 80091a6:	f8c8 3004 	str.w	r3, [r8, #4]
 80091aa:	3504      	adds	r5, #4
 80091ac:	e79b      	b.n	80090e6 <__multiply+0x58>
 80091ae:	46d4      	mov	ip, sl
 80091b0:	e7b3      	b.n	800911a <__multiply+0x8c>
 80091b2:	46e0      	mov	r8, ip
 80091b4:	e7dd      	b.n	8009172 <__multiply+0xe4>
 80091b6:	3e01      	subs	r6, #1
 80091b8:	e799      	b.n	80090ee <__multiply+0x60>
	...

080091bc <__pow5mult>:
 80091bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c0:	4615      	mov	r5, r2
 80091c2:	f012 0203 	ands.w	r2, r2, #3
 80091c6:	4606      	mov	r6, r0
 80091c8:	460f      	mov	r7, r1
 80091ca:	d007      	beq.n	80091dc <__pow5mult+0x20>
 80091cc:	3a01      	subs	r2, #1
 80091ce:	4c21      	ldr	r4, [pc, #132]	; (8009254 <__pow5mult+0x98>)
 80091d0:	2300      	movs	r3, #0
 80091d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091d6:	f7ff fec8 	bl	8008f6a <__multadd>
 80091da:	4607      	mov	r7, r0
 80091dc:	10ad      	asrs	r5, r5, #2
 80091de:	d035      	beq.n	800924c <__pow5mult+0x90>
 80091e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091e2:	b93c      	cbnz	r4, 80091f4 <__pow5mult+0x38>
 80091e4:	2010      	movs	r0, #16
 80091e6:	f7fd ffb9 	bl	800715c <malloc>
 80091ea:	6270      	str	r0, [r6, #36]	; 0x24
 80091ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091f0:	6004      	str	r4, [r0, #0]
 80091f2:	60c4      	str	r4, [r0, #12]
 80091f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091fc:	b94c      	cbnz	r4, 8009212 <__pow5mult+0x56>
 80091fe:	f240 2171 	movw	r1, #625	; 0x271
 8009202:	4630      	mov	r0, r6
 8009204:	f7ff ff3a 	bl	800907c <__i2b>
 8009208:	2300      	movs	r3, #0
 800920a:	f8c8 0008 	str.w	r0, [r8, #8]
 800920e:	4604      	mov	r4, r0
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	07eb      	lsls	r3, r5, #31
 8009218:	d50a      	bpl.n	8009230 <__pow5mult+0x74>
 800921a:	4639      	mov	r1, r7
 800921c:	4622      	mov	r2, r4
 800921e:	4630      	mov	r0, r6
 8009220:	f7ff ff35 	bl	800908e <__multiply>
 8009224:	4639      	mov	r1, r7
 8009226:	4681      	mov	r9, r0
 8009228:	4630      	mov	r0, r6
 800922a:	f7ff fe87 	bl	8008f3c <_Bfree>
 800922e:	464f      	mov	r7, r9
 8009230:	106d      	asrs	r5, r5, #1
 8009232:	d00b      	beq.n	800924c <__pow5mult+0x90>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	b938      	cbnz	r0, 8009248 <__pow5mult+0x8c>
 8009238:	4622      	mov	r2, r4
 800923a:	4621      	mov	r1, r4
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff ff26 	bl	800908e <__multiply>
 8009242:	6020      	str	r0, [r4, #0]
 8009244:	f8c0 8000 	str.w	r8, [r0]
 8009248:	4604      	mov	r4, r0
 800924a:	e7e4      	b.n	8009216 <__pow5mult+0x5a>
 800924c:	4638      	mov	r0, r7
 800924e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009252:	bf00      	nop
 8009254:	080659a8 	.word	0x080659a8

08009258 <__lshift>:
 8009258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800925c:	460c      	mov	r4, r1
 800925e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009262:	6923      	ldr	r3, [r4, #16]
 8009264:	6849      	ldr	r1, [r1, #4]
 8009266:	eb0a 0903 	add.w	r9, sl, r3
 800926a:	68a3      	ldr	r3, [r4, #8]
 800926c:	4607      	mov	r7, r0
 800926e:	4616      	mov	r6, r2
 8009270:	f109 0501 	add.w	r5, r9, #1
 8009274:	42ab      	cmp	r3, r5
 8009276:	db32      	blt.n	80092de <__lshift+0x86>
 8009278:	4638      	mov	r0, r7
 800927a:	f7ff fe2b 	bl	8008ed4 <_Balloc>
 800927e:	2300      	movs	r3, #0
 8009280:	4680      	mov	r8, r0
 8009282:	f100 0114 	add.w	r1, r0, #20
 8009286:	461a      	mov	r2, r3
 8009288:	4553      	cmp	r3, sl
 800928a:	db2b      	blt.n	80092e4 <__lshift+0x8c>
 800928c:	6920      	ldr	r0, [r4, #16]
 800928e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009292:	f104 0314 	add.w	r3, r4, #20
 8009296:	f016 021f 	ands.w	r2, r6, #31
 800929a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800929e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092a2:	d025      	beq.n	80092f0 <__lshift+0x98>
 80092a4:	f1c2 0e20 	rsb	lr, r2, #32
 80092a8:	2000      	movs	r0, #0
 80092aa:	681e      	ldr	r6, [r3, #0]
 80092ac:	468a      	mov	sl, r1
 80092ae:	4096      	lsls	r6, r2
 80092b0:	4330      	orrs	r0, r6
 80092b2:	f84a 0b04 	str.w	r0, [sl], #4
 80092b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80092ba:	459c      	cmp	ip, r3
 80092bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80092c0:	d814      	bhi.n	80092ec <__lshift+0x94>
 80092c2:	6048      	str	r0, [r1, #4]
 80092c4:	b108      	cbz	r0, 80092ca <__lshift+0x72>
 80092c6:	f109 0502 	add.w	r5, r9, #2
 80092ca:	3d01      	subs	r5, #1
 80092cc:	4638      	mov	r0, r7
 80092ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80092d2:	4621      	mov	r1, r4
 80092d4:	f7ff fe32 	bl	8008f3c <_Bfree>
 80092d8:	4640      	mov	r0, r8
 80092da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092de:	3101      	adds	r1, #1
 80092e0:	005b      	lsls	r3, r3, #1
 80092e2:	e7c7      	b.n	8009274 <__lshift+0x1c>
 80092e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80092e8:	3301      	adds	r3, #1
 80092ea:	e7cd      	b.n	8009288 <__lshift+0x30>
 80092ec:	4651      	mov	r1, sl
 80092ee:	e7dc      	b.n	80092aa <__lshift+0x52>
 80092f0:	3904      	subs	r1, #4
 80092f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80092fa:	459c      	cmp	ip, r3
 80092fc:	d8f9      	bhi.n	80092f2 <__lshift+0x9a>
 80092fe:	e7e4      	b.n	80092ca <__lshift+0x72>

08009300 <__mcmp>:
 8009300:	6903      	ldr	r3, [r0, #16]
 8009302:	690a      	ldr	r2, [r1, #16]
 8009304:	1a9b      	subs	r3, r3, r2
 8009306:	b530      	push	{r4, r5, lr}
 8009308:	d10c      	bne.n	8009324 <__mcmp+0x24>
 800930a:	0092      	lsls	r2, r2, #2
 800930c:	3014      	adds	r0, #20
 800930e:	3114      	adds	r1, #20
 8009310:	1884      	adds	r4, r0, r2
 8009312:	4411      	add	r1, r2
 8009314:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009318:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800931c:	4295      	cmp	r5, r2
 800931e:	d003      	beq.n	8009328 <__mcmp+0x28>
 8009320:	d305      	bcc.n	800932e <__mcmp+0x2e>
 8009322:	2301      	movs	r3, #1
 8009324:	4618      	mov	r0, r3
 8009326:	bd30      	pop	{r4, r5, pc}
 8009328:	42a0      	cmp	r0, r4
 800932a:	d3f3      	bcc.n	8009314 <__mcmp+0x14>
 800932c:	e7fa      	b.n	8009324 <__mcmp+0x24>
 800932e:	f04f 33ff 	mov.w	r3, #4294967295
 8009332:	e7f7      	b.n	8009324 <__mcmp+0x24>

08009334 <__mdiff>:
 8009334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	460d      	mov	r5, r1
 800933a:	4607      	mov	r7, r0
 800933c:	4611      	mov	r1, r2
 800933e:	4628      	mov	r0, r5
 8009340:	4614      	mov	r4, r2
 8009342:	f7ff ffdd 	bl	8009300 <__mcmp>
 8009346:	1e06      	subs	r6, r0, #0
 8009348:	d108      	bne.n	800935c <__mdiff+0x28>
 800934a:	4631      	mov	r1, r6
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff fdc1 	bl	8008ed4 <_Balloc>
 8009352:	2301      	movs	r3, #1
 8009354:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935c:	bfa4      	itt	ge
 800935e:	4623      	movge	r3, r4
 8009360:	462c      	movge	r4, r5
 8009362:	4638      	mov	r0, r7
 8009364:	6861      	ldr	r1, [r4, #4]
 8009366:	bfa6      	itte	ge
 8009368:	461d      	movge	r5, r3
 800936a:	2600      	movge	r6, #0
 800936c:	2601      	movlt	r6, #1
 800936e:	f7ff fdb1 	bl	8008ed4 <_Balloc>
 8009372:	692b      	ldr	r3, [r5, #16]
 8009374:	60c6      	str	r6, [r0, #12]
 8009376:	6926      	ldr	r6, [r4, #16]
 8009378:	f105 0914 	add.w	r9, r5, #20
 800937c:	f104 0214 	add.w	r2, r4, #20
 8009380:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009384:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009388:	f100 0514 	add.w	r5, r0, #20
 800938c:	f04f 0e00 	mov.w	lr, #0
 8009390:	f852 ab04 	ldr.w	sl, [r2], #4
 8009394:	f859 4b04 	ldr.w	r4, [r9], #4
 8009398:	fa1e f18a 	uxtah	r1, lr, sl
 800939c:	b2a3      	uxth	r3, r4
 800939e:	1ac9      	subs	r1, r1, r3
 80093a0:	0c23      	lsrs	r3, r4, #16
 80093a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80093a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093aa:	b289      	uxth	r1, r1
 80093ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80093b0:	45c8      	cmp	r8, r9
 80093b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80093b6:	4694      	mov	ip, r2
 80093b8:	f845 3b04 	str.w	r3, [r5], #4
 80093bc:	d8e8      	bhi.n	8009390 <__mdiff+0x5c>
 80093be:	45bc      	cmp	ip, r7
 80093c0:	d304      	bcc.n	80093cc <__mdiff+0x98>
 80093c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80093c6:	b183      	cbz	r3, 80093ea <__mdiff+0xb6>
 80093c8:	6106      	str	r6, [r0, #16]
 80093ca:	e7c5      	b.n	8009358 <__mdiff+0x24>
 80093cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80093d0:	fa1e f381 	uxtah	r3, lr, r1
 80093d4:	141a      	asrs	r2, r3, #16
 80093d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093da:	b29b      	uxth	r3, r3
 80093dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80093e4:	f845 3b04 	str.w	r3, [r5], #4
 80093e8:	e7e9      	b.n	80093be <__mdiff+0x8a>
 80093ea:	3e01      	subs	r6, #1
 80093ec:	e7e9      	b.n	80093c2 <__mdiff+0x8e>

080093ee <__d2b>:
 80093ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093f2:	460e      	mov	r6, r1
 80093f4:	2101      	movs	r1, #1
 80093f6:	ec59 8b10 	vmov	r8, r9, d0
 80093fa:	4615      	mov	r5, r2
 80093fc:	f7ff fd6a 	bl	8008ed4 <_Balloc>
 8009400:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009404:	4607      	mov	r7, r0
 8009406:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800940a:	bb34      	cbnz	r4, 800945a <__d2b+0x6c>
 800940c:	9301      	str	r3, [sp, #4]
 800940e:	f1b8 0300 	subs.w	r3, r8, #0
 8009412:	d027      	beq.n	8009464 <__d2b+0x76>
 8009414:	a802      	add	r0, sp, #8
 8009416:	f840 3d08 	str.w	r3, [r0, #-8]!
 800941a:	f7ff fe00 	bl	800901e <__lo0bits>
 800941e:	9900      	ldr	r1, [sp, #0]
 8009420:	b1f0      	cbz	r0, 8009460 <__d2b+0x72>
 8009422:	9a01      	ldr	r2, [sp, #4]
 8009424:	f1c0 0320 	rsb	r3, r0, #32
 8009428:	fa02 f303 	lsl.w	r3, r2, r3
 800942c:	430b      	orrs	r3, r1
 800942e:	40c2      	lsrs	r2, r0
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	9201      	str	r2, [sp, #4]
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	61bb      	str	r3, [r7, #24]
 8009438:	2b00      	cmp	r3, #0
 800943a:	bf14      	ite	ne
 800943c:	2102      	movne	r1, #2
 800943e:	2101      	moveq	r1, #1
 8009440:	6139      	str	r1, [r7, #16]
 8009442:	b1c4      	cbz	r4, 8009476 <__d2b+0x88>
 8009444:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009448:	4404      	add	r4, r0
 800944a:	6034      	str	r4, [r6, #0]
 800944c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009450:	6028      	str	r0, [r5, #0]
 8009452:	4638      	mov	r0, r7
 8009454:	b003      	add	sp, #12
 8009456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800945a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800945e:	e7d5      	b.n	800940c <__d2b+0x1e>
 8009460:	6179      	str	r1, [r7, #20]
 8009462:	e7e7      	b.n	8009434 <__d2b+0x46>
 8009464:	a801      	add	r0, sp, #4
 8009466:	f7ff fdda 	bl	800901e <__lo0bits>
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	2101      	movs	r1, #1
 8009470:	6139      	str	r1, [r7, #16]
 8009472:	3020      	adds	r0, #32
 8009474:	e7e5      	b.n	8009442 <__d2b+0x54>
 8009476:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800947a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800947e:	6030      	str	r0, [r6, #0]
 8009480:	6918      	ldr	r0, [r3, #16]
 8009482:	f7ff fdad 	bl	8008fe0 <__hi0bits>
 8009486:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800948a:	e7e1      	b.n	8009450 <__d2b+0x62>

0800948c <_realloc_r>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	4607      	mov	r7, r0
 8009490:	4614      	mov	r4, r2
 8009492:	460e      	mov	r6, r1
 8009494:	b921      	cbnz	r1, 80094a0 <_realloc_r+0x14>
 8009496:	4611      	mov	r1, r2
 8009498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800949c:	f7fd bede 	b.w	800725c <_malloc_r>
 80094a0:	b922      	cbnz	r2, 80094ac <_realloc_r+0x20>
 80094a2:	f7fd fe8d 	bl	80071c0 <_free_r>
 80094a6:	4625      	mov	r5, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ac:	f000 fa00 	bl	80098b0 <_malloc_usable_size_r>
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d20f      	bcs.n	80094d4 <_realloc_r+0x48>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4638      	mov	r0, r7
 80094b8:	f7fd fed0 	bl	800725c <_malloc_r>
 80094bc:	4605      	mov	r5, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	d0f2      	beq.n	80094a8 <_realloc_r+0x1c>
 80094c2:	4631      	mov	r1, r6
 80094c4:	4622      	mov	r2, r4
 80094c6:	f7fd fe59 	bl	800717c <memcpy>
 80094ca:	4631      	mov	r1, r6
 80094cc:	4638      	mov	r0, r7
 80094ce:	f7fd fe77 	bl	80071c0 <_free_r>
 80094d2:	e7e9      	b.n	80094a8 <_realloc_r+0x1c>
 80094d4:	4635      	mov	r5, r6
 80094d6:	e7e7      	b.n	80094a8 <_realloc_r+0x1c>

080094d8 <__sfputc_r>:
 80094d8:	6893      	ldr	r3, [r2, #8]
 80094da:	3b01      	subs	r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	b410      	push	{r4}
 80094e0:	6093      	str	r3, [r2, #8]
 80094e2:	da08      	bge.n	80094f6 <__sfputc_r+0x1e>
 80094e4:	6994      	ldr	r4, [r2, #24]
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	db01      	blt.n	80094ee <__sfputc_r+0x16>
 80094ea:	290a      	cmp	r1, #10
 80094ec:	d103      	bne.n	80094f6 <__sfputc_r+0x1e>
 80094ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094f2:	f7fe bbfd 	b.w	8007cf0 <__swbuf_r>
 80094f6:	6813      	ldr	r3, [r2, #0]
 80094f8:	1c58      	adds	r0, r3, #1
 80094fa:	6010      	str	r0, [r2, #0]
 80094fc:	7019      	strb	r1, [r3, #0]
 80094fe:	4608      	mov	r0, r1
 8009500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009504:	4770      	bx	lr

08009506 <__sfputs_r>:
 8009506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009508:	4606      	mov	r6, r0
 800950a:	460f      	mov	r7, r1
 800950c:	4614      	mov	r4, r2
 800950e:	18d5      	adds	r5, r2, r3
 8009510:	42ac      	cmp	r4, r5
 8009512:	d101      	bne.n	8009518 <__sfputs_r+0x12>
 8009514:	2000      	movs	r0, #0
 8009516:	e007      	b.n	8009528 <__sfputs_r+0x22>
 8009518:	463a      	mov	r2, r7
 800951a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff ffda 	bl	80094d8 <__sfputc_r>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d1f3      	bne.n	8009510 <__sfputs_r+0xa>
 8009528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800952c <_vfiprintf_r>:
 800952c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	460c      	mov	r4, r1
 8009532:	b09d      	sub	sp, #116	; 0x74
 8009534:	4617      	mov	r7, r2
 8009536:	461d      	mov	r5, r3
 8009538:	4606      	mov	r6, r0
 800953a:	b118      	cbz	r0, 8009544 <_vfiprintf_r+0x18>
 800953c:	6983      	ldr	r3, [r0, #24]
 800953e:	b90b      	cbnz	r3, 8009544 <_vfiprintf_r+0x18>
 8009540:	f7ff fbca 	bl	8008cd8 <__sinit>
 8009544:	4b7c      	ldr	r3, [pc, #496]	; (8009738 <_vfiprintf_r+0x20c>)
 8009546:	429c      	cmp	r4, r3
 8009548:	d158      	bne.n	80095fc <_vfiprintf_r+0xd0>
 800954a:	6874      	ldr	r4, [r6, #4]
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	0718      	lsls	r0, r3, #28
 8009550:	d55e      	bpl.n	8009610 <_vfiprintf_r+0xe4>
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d05b      	beq.n	8009610 <_vfiprintf_r+0xe4>
 8009558:	2300      	movs	r3, #0
 800955a:	9309      	str	r3, [sp, #36]	; 0x24
 800955c:	2320      	movs	r3, #32
 800955e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009562:	2330      	movs	r3, #48	; 0x30
 8009564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009568:	9503      	str	r5, [sp, #12]
 800956a:	f04f 0b01 	mov.w	fp, #1
 800956e:	46b8      	mov	r8, r7
 8009570:	4645      	mov	r5, r8
 8009572:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009576:	b10b      	cbz	r3, 800957c <_vfiprintf_r+0x50>
 8009578:	2b25      	cmp	r3, #37	; 0x25
 800957a:	d154      	bne.n	8009626 <_vfiprintf_r+0xfa>
 800957c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009580:	d00b      	beq.n	800959a <_vfiprintf_r+0x6e>
 8009582:	4653      	mov	r3, sl
 8009584:	463a      	mov	r2, r7
 8009586:	4621      	mov	r1, r4
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff ffbc 	bl	8009506 <__sfputs_r>
 800958e:	3001      	adds	r0, #1
 8009590:	f000 80c2 	beq.w	8009718 <_vfiprintf_r+0x1ec>
 8009594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009596:	4453      	add	r3, sl
 8009598:	9309      	str	r3, [sp, #36]	; 0x24
 800959a:	f898 3000 	ldrb.w	r3, [r8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 80ba 	beq.w	8009718 <_vfiprintf_r+0x1ec>
 80095a4:	2300      	movs	r3, #0
 80095a6:	f04f 32ff 	mov.w	r2, #4294967295
 80095aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ae:	9304      	str	r3, [sp, #16]
 80095b0:	9307      	str	r3, [sp, #28]
 80095b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095b6:	931a      	str	r3, [sp, #104]	; 0x68
 80095b8:	46a8      	mov	r8, r5
 80095ba:	2205      	movs	r2, #5
 80095bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80095c0:	485e      	ldr	r0, [pc, #376]	; (800973c <_vfiprintf_r+0x210>)
 80095c2:	f7f6 fe15 	bl	80001f0 <memchr>
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	bb78      	cbnz	r0, 800962a <_vfiprintf_r+0xfe>
 80095ca:	06d9      	lsls	r1, r3, #27
 80095cc:	bf44      	itt	mi
 80095ce:	2220      	movmi	r2, #32
 80095d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095d4:	071a      	lsls	r2, r3, #28
 80095d6:	bf44      	itt	mi
 80095d8:	222b      	movmi	r2, #43	; 0x2b
 80095da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095de:	782a      	ldrb	r2, [r5, #0]
 80095e0:	2a2a      	cmp	r2, #42	; 0x2a
 80095e2:	d02a      	beq.n	800963a <_vfiprintf_r+0x10e>
 80095e4:	9a07      	ldr	r2, [sp, #28]
 80095e6:	46a8      	mov	r8, r5
 80095e8:	2000      	movs	r0, #0
 80095ea:	250a      	movs	r5, #10
 80095ec:	4641      	mov	r1, r8
 80095ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f2:	3b30      	subs	r3, #48	; 0x30
 80095f4:	2b09      	cmp	r3, #9
 80095f6:	d969      	bls.n	80096cc <_vfiprintf_r+0x1a0>
 80095f8:	b360      	cbz	r0, 8009654 <_vfiprintf_r+0x128>
 80095fa:	e024      	b.n	8009646 <_vfiprintf_r+0x11a>
 80095fc:	4b50      	ldr	r3, [pc, #320]	; (8009740 <_vfiprintf_r+0x214>)
 80095fe:	429c      	cmp	r4, r3
 8009600:	d101      	bne.n	8009606 <_vfiprintf_r+0xda>
 8009602:	68b4      	ldr	r4, [r6, #8]
 8009604:	e7a2      	b.n	800954c <_vfiprintf_r+0x20>
 8009606:	4b4f      	ldr	r3, [pc, #316]	; (8009744 <_vfiprintf_r+0x218>)
 8009608:	429c      	cmp	r4, r3
 800960a:	bf08      	it	eq
 800960c:	68f4      	ldreq	r4, [r6, #12]
 800960e:	e79d      	b.n	800954c <_vfiprintf_r+0x20>
 8009610:	4621      	mov	r1, r4
 8009612:	4630      	mov	r0, r6
 8009614:	f7fe fbbe 	bl	8007d94 <__swsetup_r>
 8009618:	2800      	cmp	r0, #0
 800961a:	d09d      	beq.n	8009558 <_vfiprintf_r+0x2c>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	b01d      	add	sp, #116	; 0x74
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	46a8      	mov	r8, r5
 8009628:	e7a2      	b.n	8009570 <_vfiprintf_r+0x44>
 800962a:	4a44      	ldr	r2, [pc, #272]	; (800973c <_vfiprintf_r+0x210>)
 800962c:	1a80      	subs	r0, r0, r2
 800962e:	fa0b f000 	lsl.w	r0, fp, r0
 8009632:	4318      	orrs	r0, r3
 8009634:	9004      	str	r0, [sp, #16]
 8009636:	4645      	mov	r5, r8
 8009638:	e7be      	b.n	80095b8 <_vfiprintf_r+0x8c>
 800963a:	9a03      	ldr	r2, [sp, #12]
 800963c:	1d11      	adds	r1, r2, #4
 800963e:	6812      	ldr	r2, [r2, #0]
 8009640:	9103      	str	r1, [sp, #12]
 8009642:	2a00      	cmp	r2, #0
 8009644:	db01      	blt.n	800964a <_vfiprintf_r+0x11e>
 8009646:	9207      	str	r2, [sp, #28]
 8009648:	e004      	b.n	8009654 <_vfiprintf_r+0x128>
 800964a:	4252      	negs	r2, r2
 800964c:	f043 0302 	orr.w	r3, r3, #2
 8009650:	9207      	str	r2, [sp, #28]
 8009652:	9304      	str	r3, [sp, #16]
 8009654:	f898 3000 	ldrb.w	r3, [r8]
 8009658:	2b2e      	cmp	r3, #46	; 0x2e
 800965a:	d10e      	bne.n	800967a <_vfiprintf_r+0x14e>
 800965c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009660:	2b2a      	cmp	r3, #42	; 0x2a
 8009662:	d138      	bne.n	80096d6 <_vfiprintf_r+0x1aa>
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	1d1a      	adds	r2, r3, #4
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	9203      	str	r2, [sp, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	bfb8      	it	lt
 8009670:	f04f 33ff 	movlt.w	r3, #4294967295
 8009674:	f108 0802 	add.w	r8, r8, #2
 8009678:	9305      	str	r3, [sp, #20]
 800967a:	4d33      	ldr	r5, [pc, #204]	; (8009748 <_vfiprintf_r+0x21c>)
 800967c:	f898 1000 	ldrb.w	r1, [r8]
 8009680:	2203      	movs	r2, #3
 8009682:	4628      	mov	r0, r5
 8009684:	f7f6 fdb4 	bl	80001f0 <memchr>
 8009688:	b140      	cbz	r0, 800969c <_vfiprintf_r+0x170>
 800968a:	2340      	movs	r3, #64	; 0x40
 800968c:	1b40      	subs	r0, r0, r5
 800968e:	fa03 f000 	lsl.w	r0, r3, r0
 8009692:	9b04      	ldr	r3, [sp, #16]
 8009694:	4303      	orrs	r3, r0
 8009696:	f108 0801 	add.w	r8, r8, #1
 800969a:	9304      	str	r3, [sp, #16]
 800969c:	f898 1000 	ldrb.w	r1, [r8]
 80096a0:	482a      	ldr	r0, [pc, #168]	; (800974c <_vfiprintf_r+0x220>)
 80096a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096a6:	2206      	movs	r2, #6
 80096a8:	f108 0701 	add.w	r7, r8, #1
 80096ac:	f7f6 fda0 	bl	80001f0 <memchr>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d037      	beq.n	8009724 <_vfiprintf_r+0x1f8>
 80096b4:	4b26      	ldr	r3, [pc, #152]	; (8009750 <_vfiprintf_r+0x224>)
 80096b6:	bb1b      	cbnz	r3, 8009700 <_vfiprintf_r+0x1d4>
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	3307      	adds	r3, #7
 80096bc:	f023 0307 	bic.w	r3, r3, #7
 80096c0:	3308      	adds	r3, #8
 80096c2:	9303      	str	r3, [sp, #12]
 80096c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c6:	444b      	add	r3, r9
 80096c8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ca:	e750      	b.n	800956e <_vfiprintf_r+0x42>
 80096cc:	fb05 3202 	mla	r2, r5, r2, r3
 80096d0:	2001      	movs	r0, #1
 80096d2:	4688      	mov	r8, r1
 80096d4:	e78a      	b.n	80095ec <_vfiprintf_r+0xc0>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f108 0801 	add.w	r8, r8, #1
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	4619      	mov	r1, r3
 80096e0:	250a      	movs	r5, #10
 80096e2:	4640      	mov	r0, r8
 80096e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096e8:	3a30      	subs	r2, #48	; 0x30
 80096ea:	2a09      	cmp	r2, #9
 80096ec:	d903      	bls.n	80096f6 <_vfiprintf_r+0x1ca>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0c3      	beq.n	800967a <_vfiprintf_r+0x14e>
 80096f2:	9105      	str	r1, [sp, #20]
 80096f4:	e7c1      	b.n	800967a <_vfiprintf_r+0x14e>
 80096f6:	fb05 2101 	mla	r1, r5, r1, r2
 80096fa:	2301      	movs	r3, #1
 80096fc:	4680      	mov	r8, r0
 80096fe:	e7f0      	b.n	80096e2 <_vfiprintf_r+0x1b6>
 8009700:	ab03      	add	r3, sp, #12
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	4622      	mov	r2, r4
 8009706:	4b13      	ldr	r3, [pc, #76]	; (8009754 <_vfiprintf_r+0x228>)
 8009708:	a904      	add	r1, sp, #16
 800970a:	4630      	mov	r0, r6
 800970c:	f7fd fe94 	bl	8007438 <_printf_float>
 8009710:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009714:	4681      	mov	r9, r0
 8009716:	d1d5      	bne.n	80096c4 <_vfiprintf_r+0x198>
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	065b      	lsls	r3, r3, #25
 800971c:	f53f af7e 	bmi.w	800961c <_vfiprintf_r+0xf0>
 8009720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009722:	e77d      	b.n	8009620 <_vfiprintf_r+0xf4>
 8009724:	ab03      	add	r3, sp, #12
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	4622      	mov	r2, r4
 800972a:	4b0a      	ldr	r3, [pc, #40]	; (8009754 <_vfiprintf_r+0x228>)
 800972c:	a904      	add	r1, sp, #16
 800972e:	4630      	mov	r0, r6
 8009730:	f7fe f938 	bl	80079a4 <_printf_i>
 8009734:	e7ec      	b.n	8009710 <_vfiprintf_r+0x1e4>
 8009736:	bf00      	nop
 8009738:	08065874 	.word	0x08065874
 800973c:	080659b4 	.word	0x080659b4
 8009740:	08065894 	.word	0x08065894
 8009744:	08065854 	.word	0x08065854
 8009748:	080659ba 	.word	0x080659ba
 800974c:	080659be 	.word	0x080659be
 8009750:	08007439 	.word	0x08007439
 8009754:	08009507 	.word	0x08009507

08009758 <__sread>:
 8009758:	b510      	push	{r4, lr}
 800975a:	460c      	mov	r4, r1
 800975c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009760:	f000 f8ae 	bl	80098c0 <_read_r>
 8009764:	2800      	cmp	r0, #0
 8009766:	bfab      	itete	ge
 8009768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800976a:	89a3      	ldrhlt	r3, [r4, #12]
 800976c:	181b      	addge	r3, r3, r0
 800976e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009772:	bfac      	ite	ge
 8009774:	6563      	strge	r3, [r4, #84]	; 0x54
 8009776:	81a3      	strhlt	r3, [r4, #12]
 8009778:	bd10      	pop	{r4, pc}

0800977a <__swrite>:
 800977a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800977e:	461f      	mov	r7, r3
 8009780:	898b      	ldrh	r3, [r1, #12]
 8009782:	05db      	lsls	r3, r3, #23
 8009784:	4605      	mov	r5, r0
 8009786:	460c      	mov	r4, r1
 8009788:	4616      	mov	r6, r2
 800978a:	d505      	bpl.n	8009798 <__swrite+0x1e>
 800978c:	2302      	movs	r3, #2
 800978e:	2200      	movs	r2, #0
 8009790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009794:	f000 f868 	bl	8009868 <_lseek_r>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800979e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097a2:	81a3      	strh	r3, [r4, #12]
 80097a4:	4632      	mov	r2, r6
 80097a6:	463b      	mov	r3, r7
 80097a8:	4628      	mov	r0, r5
 80097aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ae:	f000 b817 	b.w	80097e0 <_write_r>

080097b2 <__sseek>:
 80097b2:	b510      	push	{r4, lr}
 80097b4:	460c      	mov	r4, r1
 80097b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ba:	f000 f855 	bl	8009868 <_lseek_r>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	bf15      	itete	ne
 80097c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80097c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097ce:	81a3      	strheq	r3, [r4, #12]
 80097d0:	bf18      	it	ne
 80097d2:	81a3      	strhne	r3, [r4, #12]
 80097d4:	bd10      	pop	{r4, pc}

080097d6 <__sclose>:
 80097d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097da:	f000 b813 	b.w	8009804 <_close_r>
	...

080097e0 <_write_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4c07      	ldr	r4, [pc, #28]	; (8009800 <_write_r+0x20>)
 80097e4:	4605      	mov	r5, r0
 80097e6:	4608      	mov	r0, r1
 80097e8:	4611      	mov	r1, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	6022      	str	r2, [r4, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	f000 fcde 	bl	800a1b0 <_write>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_write_r+0x1e>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_write_r+0x1e>
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	20002704 	.word	0x20002704

08009804 <_close_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4c06      	ldr	r4, [pc, #24]	; (8009820 <_close_r+0x1c>)
 8009808:	2300      	movs	r3, #0
 800980a:	4605      	mov	r5, r0
 800980c:	4608      	mov	r0, r1
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	f000 fca6 	bl	800a160 <_close>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d102      	bne.n	800981e <_close_r+0x1a>
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	b103      	cbz	r3, 800981e <_close_r+0x1a>
 800981c:	602b      	str	r3, [r5, #0]
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	20002704 	.word	0x20002704

08009824 <_fstat_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4c07      	ldr	r4, [pc, #28]	; (8009844 <_fstat_r+0x20>)
 8009828:	2300      	movs	r3, #0
 800982a:	4605      	mov	r5, r0
 800982c:	4608      	mov	r0, r1
 800982e:	4611      	mov	r1, r2
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	f000 fc9d 	bl	800a170 <_fstat>
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	d102      	bne.n	8009840 <_fstat_r+0x1c>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	b103      	cbz	r3, 8009840 <_fstat_r+0x1c>
 800983e:	602b      	str	r3, [r5, #0]
 8009840:	bd38      	pop	{r3, r4, r5, pc}
 8009842:	bf00      	nop
 8009844:	20002704 	.word	0x20002704

08009848 <_isatty_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4c06      	ldr	r4, [pc, #24]	; (8009864 <_isatty_r+0x1c>)
 800984c:	2300      	movs	r3, #0
 800984e:	4605      	mov	r5, r0
 8009850:	4608      	mov	r0, r1
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	f000 fc94 	bl	800a180 <_isatty>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d102      	bne.n	8009862 <_isatty_r+0x1a>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	b103      	cbz	r3, 8009862 <_isatty_r+0x1a>
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	20002704 	.word	0x20002704

08009868 <_lseek_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4c07      	ldr	r4, [pc, #28]	; (8009888 <_lseek_r+0x20>)
 800986c:	4605      	mov	r5, r0
 800986e:	4608      	mov	r0, r1
 8009870:	4611      	mov	r1, r2
 8009872:	2200      	movs	r2, #0
 8009874:	6022      	str	r2, [r4, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	f000 fc8a 	bl	800a190 <_lseek>
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	d102      	bne.n	8009886 <_lseek_r+0x1e>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	b103      	cbz	r3, 8009886 <_lseek_r+0x1e>
 8009884:	602b      	str	r3, [r5, #0]
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	20002704 	.word	0x20002704

0800988c <__ascii_mbtowc>:
 800988c:	b082      	sub	sp, #8
 800988e:	b901      	cbnz	r1, 8009892 <__ascii_mbtowc+0x6>
 8009890:	a901      	add	r1, sp, #4
 8009892:	b142      	cbz	r2, 80098a6 <__ascii_mbtowc+0x1a>
 8009894:	b14b      	cbz	r3, 80098aa <__ascii_mbtowc+0x1e>
 8009896:	7813      	ldrb	r3, [r2, #0]
 8009898:	600b      	str	r3, [r1, #0]
 800989a:	7812      	ldrb	r2, [r2, #0]
 800989c:	1c10      	adds	r0, r2, #0
 800989e:	bf18      	it	ne
 80098a0:	2001      	movne	r0, #1
 80098a2:	b002      	add	sp, #8
 80098a4:	4770      	bx	lr
 80098a6:	4610      	mov	r0, r2
 80098a8:	e7fb      	b.n	80098a2 <__ascii_mbtowc+0x16>
 80098aa:	f06f 0001 	mvn.w	r0, #1
 80098ae:	e7f8      	b.n	80098a2 <__ascii_mbtowc+0x16>

080098b0 <_malloc_usable_size_r>:
 80098b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098b4:	1f18      	subs	r0, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bfbc      	itt	lt
 80098ba:	580b      	ldrlt	r3, [r1, r0]
 80098bc:	18c0      	addlt	r0, r0, r3
 80098be:	4770      	bx	lr

080098c0 <_read_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4c07      	ldr	r4, [pc, #28]	; (80098e0 <_read_r+0x20>)
 80098c4:	4605      	mov	r5, r0
 80098c6:	4608      	mov	r0, r1
 80098c8:	4611      	mov	r1, r2
 80098ca:	2200      	movs	r2, #0
 80098cc:	6022      	str	r2, [r4, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f000 fc66 	bl	800a1a0 <_read>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_read_r+0x1e>
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	b103      	cbz	r3, 80098de <_read_r+0x1e>
 80098dc:	602b      	str	r3, [r5, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	20002704 	.word	0x20002704

080098e4 <__ascii_wctomb>:
 80098e4:	b149      	cbz	r1, 80098fa <__ascii_wctomb+0x16>
 80098e6:	2aff      	cmp	r2, #255	; 0xff
 80098e8:	bf85      	ittet	hi
 80098ea:	238a      	movhi	r3, #138	; 0x8a
 80098ec:	6003      	strhi	r3, [r0, #0]
 80098ee:	700a      	strbls	r2, [r1, #0]
 80098f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80098f4:	bf98      	it	ls
 80098f6:	2001      	movls	r0, #1
 80098f8:	4770      	bx	lr
 80098fa:	4608      	mov	r0, r1
 80098fc:	4770      	bx	lr
	...

08009900 <exp>:
 8009900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009902:	ed2d 8b02 	vpush	{d8}
 8009906:	4e38      	ldr	r6, [pc, #224]	; (80099e8 <exp+0xe8>)
 8009908:	b08b      	sub	sp, #44	; 0x2c
 800990a:	ec55 4b10 	vmov	r4, r5, d0
 800990e:	f000 f8f3 	bl	8009af8 <__ieee754_exp>
 8009912:	f996 3000 	ldrsb.w	r3, [r6]
 8009916:	eeb0 8a40 	vmov.f32	s16, s0
 800991a:	eef0 8a60 	vmov.f32	s17, s1
 800991e:	3301      	adds	r3, #1
 8009920:	d02c      	beq.n	800997c <exp+0x7c>
 8009922:	ec45 4b10 	vmov	d0, r4, r5
 8009926:	f000 fc09 	bl	800a13c <finite>
 800992a:	b338      	cbz	r0, 800997c <exp+0x7c>
 800992c:	a32a      	add	r3, pc, #168	; (adr r3, 80099d8 <exp+0xd8>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	4620      	mov	r0, r4
 8009934:	4629      	mov	r1, r5
 8009936:	f7f7 f8f7 	bl	8000b28 <__aeabi_dcmpgt>
 800993a:	4607      	mov	r7, r0
 800993c:	2800      	cmp	r0, #0
 800993e:	d030      	beq.n	80099a2 <exp+0xa2>
 8009940:	2303      	movs	r3, #3
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	4b29      	ldr	r3, [pc, #164]	; (80099ec <exp+0xec>)
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	2300      	movs	r3, #0
 800994a:	9308      	str	r3, [sp, #32]
 800994c:	f996 3000 	ldrsb.w	r3, [r6]
 8009950:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009954:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009958:	b9c3      	cbnz	r3, 800998c <exp+0x8c>
 800995a:	4b25      	ldr	r3, [pc, #148]	; (80099f0 <exp+0xf0>)
 800995c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009960:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009964:	4668      	mov	r0, sp
 8009966:	f000 fbf1 	bl	800a14c <matherr>
 800996a:	b1a8      	cbz	r0, 8009998 <exp+0x98>
 800996c:	9b08      	ldr	r3, [sp, #32]
 800996e:	b11b      	cbz	r3, 8009978 <exp+0x78>
 8009970:	f7fd fbca 	bl	8007108 <__errno>
 8009974:	9b08      	ldr	r3, [sp, #32]
 8009976:	6003      	str	r3, [r0, #0]
 8009978:	ed9d 8b06 	vldr	d8, [sp, #24]
 800997c:	eeb0 0a48 	vmov.f32	s0, s16
 8009980:	eef0 0a68 	vmov.f32	s1, s17
 8009984:	b00b      	add	sp, #44	; 0x2c
 8009986:	ecbd 8b02 	vpop	{d8}
 800998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800998c:	4919      	ldr	r1, [pc, #100]	; (80099f4 <exp+0xf4>)
 800998e:	2000      	movs	r0, #0
 8009990:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009994:	2b02      	cmp	r3, #2
 8009996:	d1e5      	bne.n	8009964 <exp+0x64>
 8009998:	f7fd fbb6 	bl	8007108 <__errno>
 800999c:	2322      	movs	r3, #34	; 0x22
 800999e:	6003      	str	r3, [r0, #0]
 80099a0:	e7e4      	b.n	800996c <exp+0x6c>
 80099a2:	a30f      	add	r3, pc, #60	; (adr r3, 80099e0 <exp+0xe0>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	4620      	mov	r0, r4
 80099aa:	4629      	mov	r1, r5
 80099ac:	f7f7 f89e 	bl	8000aec <__aeabi_dcmplt>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d0e3      	beq.n	800997c <exp+0x7c>
 80099b4:	2304      	movs	r3, #4
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <exp+0xec>)
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	2300      	movs	r3, #0
 80099c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80099c4:	9708      	str	r7, [sp, #32]
 80099c6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80099ca:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80099ce:	f996 3000 	ldrsb.w	r3, [r6]
 80099d2:	e7df      	b.n	8009994 <exp+0x94>
 80099d4:	f3af 8000 	nop.w
 80099d8:	fefa39ef 	.word	0xfefa39ef
 80099dc:	40862e42 	.word	0x40862e42
 80099e0:	d52d3051 	.word	0xd52d3051
 80099e4:	c0874910 	.word	0xc0874910
 80099e8:	200010a0 	.word	0x200010a0
 80099ec:	08065ad0 	.word	0x08065ad0
 80099f0:	47efffff 	.word	0x47efffff
 80099f4:	7ff00000 	.word	0x7ff00000

080099f8 <log>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	ed2d 8b02 	vpush	{d8}
 80099fe:	b08a      	sub	sp, #40	; 0x28
 8009a00:	ec55 4b10 	vmov	r4, r5, d0
 8009a04:	f000 f9e8 	bl	8009dd8 <__ieee754_log>
 8009a08:	4b36      	ldr	r3, [pc, #216]	; (8009ae4 <log+0xec>)
 8009a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8009a0e:	eef0 8a60 	vmov.f32	s17, s1
 8009a12:	f993 6000 	ldrsb.w	r6, [r3]
 8009a16:	1c73      	adds	r3, r6, #1
 8009a18:	d05b      	beq.n	8009ad2 <log+0xda>
 8009a1a:	4622      	mov	r2, r4
 8009a1c:	462b      	mov	r3, r5
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7f7 f88b 	bl	8000b3c <__aeabi_dcmpun>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d153      	bne.n	8009ad2 <log+0xda>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f7 f879 	bl	8000b28 <__aeabi_dcmpgt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d14b      	bne.n	8009ad2 <log+0xda>
 8009a3a:	4b2b      	ldr	r3, [pc, #172]	; (8009ae8 <log+0xf0>)
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	9008      	str	r0, [sp, #32]
 8009a40:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009a44:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009a48:	b9a6      	cbnz	r6, 8009a74 <log+0x7c>
 8009a4a:	4b28      	ldr	r3, [pc, #160]	; (8009aec <log+0xf4>)
 8009a4c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a54:	4620      	mov	r0, r4
 8009a56:	2200      	movs	r2, #0
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	f7f7 f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a60:	bb40      	cbnz	r0, 8009ab4 <log+0xbc>
 8009a62:	2301      	movs	r3, #1
 8009a64:	2e02      	cmp	r6, #2
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	d119      	bne.n	8009a9e <log+0xa6>
 8009a6a:	f7fd fb4d 	bl	8007108 <__errno>
 8009a6e:	2321      	movs	r3, #33	; 0x21
 8009a70:	6003      	str	r3, [r0, #0]
 8009a72:	e019      	b.n	8009aa8 <log+0xb0>
 8009a74:	4b1e      	ldr	r3, [pc, #120]	; (8009af0 <log+0xf8>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2300      	movs	r3, #0
 8009a82:	4629      	mov	r1, r5
 8009a84:	f7f7 f828 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d0ea      	beq.n	8009a62 <log+0x6a>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	429e      	cmp	r6, r3
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	d111      	bne.n	8009ab8 <log+0xc0>
 8009a94:	f7fd fb38 	bl	8007108 <__errno>
 8009a98:	2322      	movs	r3, #34	; 0x22
 8009a9a:	6003      	str	r3, [r0, #0]
 8009a9c:	e011      	b.n	8009ac2 <log+0xca>
 8009a9e:	4668      	mov	r0, sp
 8009aa0:	f000 fb54 	bl	800a14c <matherr>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d0e0      	beq.n	8009a6a <log+0x72>
 8009aa8:	4812      	ldr	r0, [pc, #72]	; (8009af4 <log+0xfc>)
 8009aaa:	f000 fb51 	bl	800a150 <nan>
 8009aae:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009ab2:	e006      	b.n	8009ac2 <log+0xca>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	4668      	mov	r0, sp
 8009aba:	f000 fb47 	bl	800a14c <matherr>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d0e8      	beq.n	8009a94 <log+0x9c>
 8009ac2:	9b08      	ldr	r3, [sp, #32]
 8009ac4:	b11b      	cbz	r3, 8009ace <log+0xd6>
 8009ac6:	f7fd fb1f 	bl	8007108 <__errno>
 8009aca:	9b08      	ldr	r3, [sp, #32]
 8009acc:	6003      	str	r3, [r0, #0]
 8009ace:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009ad2:	eeb0 0a48 	vmov.f32	s0, s16
 8009ad6:	eef0 0a68 	vmov.f32	s1, s17
 8009ada:	b00a      	add	sp, #40	; 0x28
 8009adc:	ecbd 8b02 	vpop	{d8}
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200010a0 	.word	0x200010a0
 8009ae8:	08065ad4 	.word	0x08065ad4
 8009aec:	c7efffff 	.word	0xc7efffff
 8009af0:	fff00000 	.word	0xfff00000
 8009af4:	080659b9 	.word	0x080659b9

08009af8 <__ieee754_exp>:
 8009af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009afc:	ec55 4b10 	vmov	r4, r5, d0
 8009b00:	4aab      	ldr	r2, [pc, #684]	; (8009db0 <__ieee754_exp+0x2b8>)
 8009b02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b06:	4296      	cmp	r6, r2
 8009b08:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 8009b0c:	d932      	bls.n	8009b74 <__ieee754_exp+0x7c>
 8009b0e:	4aa9      	ldr	r2, [pc, #676]	; (8009db4 <__ieee754_exp+0x2bc>)
 8009b10:	4296      	cmp	r6, r2
 8009b12:	d913      	bls.n	8009b3c <__ieee754_exp+0x44>
 8009b14:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009b18:	4323      	orrs	r3, r4
 8009b1a:	ee10 2a10 	vmov	r2, s0
 8009b1e:	d007      	beq.n	8009b30 <__ieee754_exp+0x38>
 8009b20:	462b      	mov	r3, r5
 8009b22:	4620      	mov	r0, r4
 8009b24:	4629      	mov	r1, r5
 8009b26:	f7f6 fbb9 	bl	800029c <__adddf3>
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	460d      	mov	r5, r1
 8009b2e:	e000      	b.n	8009b32 <__ieee754_exp+0x3a>
 8009b30:	b9ef      	cbnz	r7, 8009b6e <__ieee754_exp+0x76>
 8009b32:	ec45 4b10 	vmov	d0, r4, r5
 8009b36:	b004      	add	sp, #16
 8009b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3c:	a386      	add	r3, pc, #536	; (adr r3, 8009d58 <__ieee754_exp+0x260>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	ee10 0a10 	vmov	r0, s0
 8009b46:	4629      	mov	r1, r5
 8009b48:	f7f6 ffee 	bl	8000b28 <__aeabi_dcmpgt>
 8009b4c:	b138      	cbz	r0, 8009b5e <__ieee754_exp+0x66>
 8009b4e:	a384      	add	r3, pc, #528	; (adr r3, 8009d60 <__ieee754_exp+0x268>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	4610      	mov	r0, r2
 8009b56:	4619      	mov	r1, r3
 8009b58:	f7f6 fd56 	bl	8000608 <__aeabi_dmul>
 8009b5c:	e7e5      	b.n	8009b2a <__ieee754_exp+0x32>
 8009b5e:	a382      	add	r3, pc, #520	; (adr r3, 8009d68 <__ieee754_exp+0x270>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	4620      	mov	r0, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	f7f6 ffc0 	bl	8000aec <__aeabi_dcmplt>
 8009b6c:	b130      	cbz	r0, 8009b7c <__ieee754_exp+0x84>
 8009b6e:	2400      	movs	r4, #0
 8009b70:	2500      	movs	r5, #0
 8009b72:	e7de      	b.n	8009b32 <__ieee754_exp+0x3a>
 8009b74:	4b90      	ldr	r3, [pc, #576]	; (8009db8 <__ieee754_exp+0x2c0>)
 8009b76:	429e      	cmp	r6, r3
 8009b78:	f240 80a6 	bls.w	8009cc8 <__ieee754_exp+0x1d0>
 8009b7c:	4b8f      	ldr	r3, [pc, #572]	; (8009dbc <__ieee754_exp+0x2c4>)
 8009b7e:	429e      	cmp	r6, r3
 8009b80:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8009b84:	d875      	bhi.n	8009c72 <__ieee754_exp+0x17a>
 8009b86:	4b8e      	ldr	r3, [pc, #568]	; (8009dc0 <__ieee754_exp+0x2c8>)
 8009b88:	4e8e      	ldr	r6, [pc, #568]	; (8009dc4 <__ieee754_exp+0x2cc>)
 8009b8a:	4443      	add	r3, r8
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	4620      	mov	r0, r4
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f6 fb80 	bl	8000298 <__aeabi_dsub>
 8009b98:	4446      	add	r6, r8
 8009b9a:	e9cd 0100 	strd	r0, r1, [sp]
 8009b9e:	e9d6 8900 	ldrd	r8, r9, [r6]
 8009ba2:	f1c7 0a01 	rsb	sl, r7, #1
 8009ba6:	ebaa 0a07 	sub.w	sl, sl, r7
 8009baa:	4642      	mov	r2, r8
 8009bac:	464b      	mov	r3, r9
 8009bae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bb2:	f7f6 fb71 	bl	8000298 <__aeabi_dsub>
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	460d      	mov	r5, r1
 8009bba:	4622      	mov	r2, r4
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	f7f6 fd21 	bl	8000608 <__aeabi_dmul>
 8009bc6:	a36a      	add	r3, pc, #424	; (adr r3, 8009d70 <__ieee754_exp+0x278>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	4606      	mov	r6, r0
 8009bce:	460f      	mov	r7, r1
 8009bd0:	f7f6 fd1a 	bl	8000608 <__aeabi_dmul>
 8009bd4:	a368      	add	r3, pc, #416	; (adr r3, 8009d78 <__ieee754_exp+0x280>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fb5d 	bl	8000298 <__aeabi_dsub>
 8009bde:	4632      	mov	r2, r6
 8009be0:	463b      	mov	r3, r7
 8009be2:	f7f6 fd11 	bl	8000608 <__aeabi_dmul>
 8009be6:	a366      	add	r3, pc, #408	; (adr r3, 8009d80 <__ieee754_exp+0x288>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fb56 	bl	800029c <__adddf3>
 8009bf0:	4632      	mov	r2, r6
 8009bf2:	463b      	mov	r3, r7
 8009bf4:	f7f6 fd08 	bl	8000608 <__aeabi_dmul>
 8009bf8:	a363      	add	r3, pc, #396	; (adr r3, 8009d88 <__ieee754_exp+0x290>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7f6 fb4b 	bl	8000298 <__aeabi_dsub>
 8009c02:	4632      	mov	r2, r6
 8009c04:	463b      	mov	r3, r7
 8009c06:	f7f6 fcff 	bl	8000608 <__aeabi_dmul>
 8009c0a:	a361      	add	r3, pc, #388	; (adr r3, 8009d90 <__ieee754_exp+0x298>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	f7f6 fb44 	bl	800029c <__adddf3>
 8009c14:	4632      	mov	r2, r6
 8009c16:	463b      	mov	r3, r7
 8009c18:	f7f6 fcf6 	bl	8000608 <__aeabi_dmul>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4620      	mov	r0, r4
 8009c22:	4629      	mov	r1, r5
 8009c24:	f7f6 fb38 	bl	8000298 <__aeabi_dsub>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	460f      	mov	r7, r1
 8009c30:	4620      	mov	r0, r4
 8009c32:	4629      	mov	r1, r5
 8009c34:	f7f6 fce8 	bl	8000608 <__aeabi_dmul>
 8009c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c3c:	f1ba 0f00 	cmp.w	sl, #0
 8009c40:	d15c      	bne.n	8009cfc <__ieee754_exp+0x204>
 8009c42:	2200      	movs	r2, #0
 8009c44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c48:	4630      	mov	r0, r6
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	f7f6 fb24 	bl	8000298 <__aeabi_dsub>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c58:	f7f6 fe00 	bl	800085c <__aeabi_ddiv>
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	462b      	mov	r3, r5
 8009c60:	f7f6 fb1a 	bl	8000298 <__aeabi_dsub>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	2000      	movs	r0, #0
 8009c6a:	4957      	ldr	r1, [pc, #348]	; (8009dc8 <__ieee754_exp+0x2d0>)
 8009c6c:	f7f6 fb14 	bl	8000298 <__aeabi_dsub>
 8009c70:	e75b      	b.n	8009b2a <__ieee754_exp+0x32>
 8009c72:	4e56      	ldr	r6, [pc, #344]	; (8009dcc <__ieee754_exp+0x2d4>)
 8009c74:	a348      	add	r3, pc, #288	; (adr r3, 8009d98 <__ieee754_exp+0x2a0>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	4446      	add	r6, r8
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	f7f6 fcc2 	bl	8000608 <__aeabi_dmul>
 8009c84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c88:	f7f6 fb08 	bl	800029c <__adddf3>
 8009c8c:	f7f6 ff6c 	bl	8000b68 <__aeabi_d2iz>
 8009c90:	4682      	mov	sl, r0
 8009c92:	f7f6 fc4f 	bl	8000534 <__aeabi_i2d>
 8009c96:	a342      	add	r3, pc, #264	; (adr r3, 8009da0 <__ieee754_exp+0x2a8>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	460f      	mov	r7, r1
 8009ca0:	f7f6 fcb2 	bl	8000608 <__aeabi_dmul>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4620      	mov	r0, r4
 8009caa:	4629      	mov	r1, r5
 8009cac:	f7f6 faf4 	bl	8000298 <__aeabi_dsub>
 8009cb0:	a33d      	add	r3, pc, #244	; (adr r3, 8009da8 <__ieee754_exp+0x2b0>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	e9cd 0100 	strd	r0, r1, [sp]
 8009cba:	4630      	mov	r0, r6
 8009cbc:	4639      	mov	r1, r7
 8009cbe:	f7f6 fca3 	bl	8000608 <__aeabi_dmul>
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	4689      	mov	r9, r1
 8009cc6:	e770      	b.n	8009baa <__ieee754_exp+0xb2>
 8009cc8:	4b41      	ldr	r3, [pc, #260]	; (8009dd0 <__ieee754_exp+0x2d8>)
 8009cca:	429e      	cmp	r6, r3
 8009ccc:	d811      	bhi.n	8009cf2 <__ieee754_exp+0x1fa>
 8009cce:	a324      	add	r3, pc, #144	; (adr r3, 8009d60 <__ieee754_exp+0x268>)
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	ee10 0a10 	vmov	r0, s0
 8009cd8:	4629      	mov	r1, r5
 8009cda:	f7f6 fadf 	bl	800029c <__adddf3>
 8009cde:	2200      	movs	r2, #0
 8009ce0:	4b39      	ldr	r3, [pc, #228]	; (8009dc8 <__ieee754_exp+0x2d0>)
 8009ce2:	f7f6 ff21 	bl	8000b28 <__aeabi_dcmpgt>
 8009ce6:	b138      	cbz	r0, 8009cf8 <__ieee754_exp+0x200>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4b37      	ldr	r3, [pc, #220]	; (8009dc8 <__ieee754_exp+0x2d0>)
 8009cec:	4620      	mov	r0, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	e719      	b.n	8009b26 <__ieee754_exp+0x2e>
 8009cf2:	f04f 0a00 	mov.w	sl, #0
 8009cf6:	e760      	b.n	8009bba <__ieee754_exp+0xc2>
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	e75e      	b.n	8009bba <__ieee754_exp+0xc2>
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	463b      	mov	r3, r7
 8009d00:	2000      	movs	r0, #0
 8009d02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009d06:	f7f6 fac7 	bl	8000298 <__aeabi_dsub>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d12:	f7f6 fda3 	bl	800085c <__aeabi_ddiv>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	4649      	mov	r1, r9
 8009d1e:	f7f6 fabb 	bl	8000298 <__aeabi_dsub>
 8009d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d26:	f7f6 fab7 	bl	8000298 <__aeabi_dsub>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	2000      	movs	r0, #0
 8009d30:	4925      	ldr	r1, [pc, #148]	; (8009dc8 <__ieee754_exp+0x2d0>)
 8009d32:	f7f6 fab1 	bl	8000298 <__aeabi_dsub>
 8009d36:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8009d3a:	4592      	cmp	sl, r2
 8009d3c:	db02      	blt.n	8009d44 <__ieee754_exp+0x24c>
 8009d3e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009d42:	e6f2      	b.n	8009b2a <__ieee754_exp+0x32>
 8009d44:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8009d48:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8009d52:	e701      	b.n	8009b58 <__ieee754_exp+0x60>
 8009d54:	f3af 8000 	nop.w
 8009d58:	fefa39ef 	.word	0xfefa39ef
 8009d5c:	40862e42 	.word	0x40862e42
 8009d60:	8800759c 	.word	0x8800759c
 8009d64:	7e37e43c 	.word	0x7e37e43c
 8009d68:	d52d3051 	.word	0xd52d3051
 8009d6c:	c0874910 	.word	0xc0874910
 8009d70:	72bea4d0 	.word	0x72bea4d0
 8009d74:	3e663769 	.word	0x3e663769
 8009d78:	c5d26bf1 	.word	0xc5d26bf1
 8009d7c:	3ebbbd41 	.word	0x3ebbbd41
 8009d80:	af25de2c 	.word	0xaf25de2c
 8009d84:	3f11566a 	.word	0x3f11566a
 8009d88:	16bebd93 	.word	0x16bebd93
 8009d8c:	3f66c16c 	.word	0x3f66c16c
 8009d90:	5555553e 	.word	0x5555553e
 8009d94:	3fc55555 	.word	0x3fc55555
 8009d98:	652b82fe 	.word	0x652b82fe
 8009d9c:	3ff71547 	.word	0x3ff71547
 8009da0:	fee00000 	.word	0xfee00000
 8009da4:	3fe62e42 	.word	0x3fe62e42
 8009da8:	35793c76 	.word	0x35793c76
 8009dac:	3dea39ef 	.word	0x3dea39ef
 8009db0:	40862e41 	.word	0x40862e41
 8009db4:	7fefffff 	.word	0x7fefffff
 8009db8:	3fd62e42 	.word	0x3fd62e42
 8009dbc:	3ff0a2b1 	.word	0x3ff0a2b1
 8009dc0:	08065ae8 	.word	0x08065ae8
 8009dc4:	08065af8 	.word	0x08065af8
 8009dc8:	3ff00000 	.word	0x3ff00000
 8009dcc:	08065ad8 	.word	0x08065ad8
 8009dd0:	3e2fffff 	.word	0x3e2fffff
 8009dd4:	00000000 	.word	0x00000000

08009dd8 <__ieee754_log>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	ec51 0b10 	vmov	r0, r1, d0
 8009de0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009de4:	b087      	sub	sp, #28
 8009de6:	460d      	mov	r5, r1
 8009de8:	da27      	bge.n	8009e3a <__ieee754_log+0x62>
 8009dea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dee:	4303      	orrs	r3, r0
 8009df0:	ee10 2a10 	vmov	r2, s0
 8009df4:	d10a      	bne.n	8009e0c <__ieee754_log+0x34>
 8009df6:	49cc      	ldr	r1, [pc, #816]	; (800a128 <__ieee754_log+0x350>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	f7f6 fd2d 	bl	800085c <__aeabi_ddiv>
 8009e02:	ec41 0b10 	vmov	d0, r0, r1
 8009e06:	b007      	add	sp, #28
 8009e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	da05      	bge.n	8009e1c <__ieee754_log+0x44>
 8009e10:	460b      	mov	r3, r1
 8009e12:	f7f6 fa41 	bl	8000298 <__aeabi_dsub>
 8009e16:	2200      	movs	r2, #0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e7f0      	b.n	8009dfe <__ieee754_log+0x26>
 8009e1c:	4bc3      	ldr	r3, [pc, #780]	; (800a12c <__ieee754_log+0x354>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f7f6 fbf2 	bl	8000608 <__aeabi_dmul>
 8009e24:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009e28:	460d      	mov	r5, r1
 8009e2a:	4ac1      	ldr	r2, [pc, #772]	; (800a130 <__ieee754_log+0x358>)
 8009e2c:	4295      	cmp	r5, r2
 8009e2e:	dd06      	ble.n	8009e3e <__ieee754_log+0x66>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	f7f6 fa32 	bl	800029c <__adddf3>
 8009e38:	e7e3      	b.n	8009e02 <__ieee754_log+0x2a>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e7f5      	b.n	8009e2a <__ieee754_log+0x52>
 8009e3e:	152c      	asrs	r4, r5, #20
 8009e40:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009e44:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009e48:	441c      	add	r4, r3
 8009e4a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009e4e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8009e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e56:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009e5a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009e5e:	ea42 0105 	orr.w	r1, r2, r5
 8009e62:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009e66:	2200      	movs	r2, #0
 8009e68:	4bb2      	ldr	r3, [pc, #712]	; (800a134 <__ieee754_log+0x35c>)
 8009e6a:	f7f6 fa15 	bl	8000298 <__aeabi_dsub>
 8009e6e:	1cab      	adds	r3, r5, #2
 8009e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	4682      	mov	sl, r0
 8009e78:	468b      	mov	fp, r1
 8009e7a:	f04f 0200 	mov.w	r2, #0
 8009e7e:	dc53      	bgt.n	8009f28 <__ieee754_log+0x150>
 8009e80:	2300      	movs	r3, #0
 8009e82:	f7f6 fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e86:	b1d0      	cbz	r0, 8009ebe <__ieee754_log+0xe6>
 8009e88:	2c00      	cmp	r4, #0
 8009e8a:	f000 8120 	beq.w	800a0ce <__ieee754_log+0x2f6>
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7f6 fb50 	bl	8000534 <__aeabi_i2d>
 8009e94:	a390      	add	r3, pc, #576	; (adr r3, 800a0d8 <__ieee754_log+0x300>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	460f      	mov	r7, r1
 8009e9e:	f7f6 fbb3 	bl	8000608 <__aeabi_dmul>
 8009ea2:	a38f      	add	r3, pc, #572	; (adr r3, 800a0e0 <__ieee754_log+0x308>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	460d      	mov	r5, r1
 8009eac:	4630      	mov	r0, r6
 8009eae:	4639      	mov	r1, r7
 8009eb0:	f7f6 fbaa 	bl	8000608 <__aeabi_dmul>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4620      	mov	r0, r4
 8009eba:	4629      	mov	r1, r5
 8009ebc:	e7ba      	b.n	8009e34 <__ieee754_log+0x5c>
 8009ebe:	a38a      	add	r3, pc, #552	; (adr r3, 800a0e8 <__ieee754_log+0x310>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	4650      	mov	r0, sl
 8009ec6:	4659      	mov	r1, fp
 8009ec8:	f7f6 fb9e 	bl	8000608 <__aeabi_dmul>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	4999      	ldr	r1, [pc, #612]	; (800a138 <__ieee754_log+0x360>)
 8009ed4:	f7f6 f9e0 	bl	8000298 <__aeabi_dsub>
 8009ed8:	4652      	mov	r2, sl
 8009eda:	4606      	mov	r6, r0
 8009edc:	460f      	mov	r7, r1
 8009ede:	465b      	mov	r3, fp
 8009ee0:	4650      	mov	r0, sl
 8009ee2:	4659      	mov	r1, fp
 8009ee4:	f7f6 fb90 	bl	8000608 <__aeabi_dmul>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4630      	mov	r0, r6
 8009eee:	4639      	mov	r1, r7
 8009ef0:	f7f6 fb8a 	bl	8000608 <__aeabi_dmul>
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	460f      	mov	r7, r1
 8009ef8:	b914      	cbnz	r4, 8009f00 <__ieee754_log+0x128>
 8009efa:	4632      	mov	r2, r6
 8009efc:	463b      	mov	r3, r7
 8009efe:	e0a0      	b.n	800a042 <__ieee754_log+0x26a>
 8009f00:	4620      	mov	r0, r4
 8009f02:	f7f6 fb17 	bl	8000534 <__aeabi_i2d>
 8009f06:	a374      	add	r3, pc, #464	; (adr r3, 800a0d8 <__ieee754_log+0x300>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	4680      	mov	r8, r0
 8009f0e:	4689      	mov	r9, r1
 8009f10:	f7f6 fb7a 	bl	8000608 <__aeabi_dmul>
 8009f14:	a372      	add	r3, pc, #456	; (adr r3, 800a0e0 <__ieee754_log+0x308>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	460d      	mov	r5, r1
 8009f1e:	4640      	mov	r0, r8
 8009f20:	4649      	mov	r1, r9
 8009f22:	f7f6 fb71 	bl	8000608 <__aeabi_dmul>
 8009f26:	e0a5      	b.n	800a074 <__ieee754_log+0x29c>
 8009f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f2c:	f7f6 f9b6 	bl	800029c <__adddf3>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4650      	mov	r0, sl
 8009f36:	4659      	mov	r1, fp
 8009f38:	f7f6 fc90 	bl	800085c <__aeabi_ddiv>
 8009f3c:	e9cd 0100 	strd	r0, r1, [sp]
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7f6 faf7 	bl	8000534 <__aeabi_i2d>
 8009f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f4e:	4610      	mov	r0, r2
 8009f50:	4619      	mov	r1, r3
 8009f52:	f7f6 fb59 	bl	8000608 <__aeabi_dmul>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f5e:	f7f6 fb53 	bl	8000608 <__aeabi_dmul>
 8009f62:	a363      	add	r3, pc, #396	; (adr r3, 800a0f0 <__ieee754_log+0x318>)
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	4680      	mov	r8, r0
 8009f6a:	4689      	mov	r9, r1
 8009f6c:	f7f6 fb4c 	bl	8000608 <__aeabi_dmul>
 8009f70:	a361      	add	r3, pc, #388	; (adr r3, 800a0f8 <__ieee754_log+0x320>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	f7f6 f991 	bl	800029c <__adddf3>
 8009f7a:	4642      	mov	r2, r8
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	f7f6 fb43 	bl	8000608 <__aeabi_dmul>
 8009f82:	a35f      	add	r3, pc, #380	; (adr r3, 800a100 <__ieee754_log+0x328>)
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	f7f6 f988 	bl	800029c <__adddf3>
 8009f8c:	4642      	mov	r2, r8
 8009f8e:	464b      	mov	r3, r9
 8009f90:	f7f6 fb3a 	bl	8000608 <__aeabi_dmul>
 8009f94:	a35c      	add	r3, pc, #368	; (adr r3, 800a108 <__ieee754_log+0x330>)
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	f7f6 f97f 	bl	800029c <__adddf3>
 8009f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fa2:	f7f6 fb31 	bl	8000608 <__aeabi_dmul>
 8009fa6:	a35a      	add	r3, pc, #360	; (adr r3, 800a110 <__ieee754_log+0x338>)
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	f7f6 fb28 	bl	8000608 <__aeabi_dmul>
 8009fb8:	a357      	add	r3, pc, #348	; (adr r3, 800a118 <__ieee754_log+0x340>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 f96d 	bl	800029c <__adddf3>
 8009fc2:	4642      	mov	r2, r8
 8009fc4:	464b      	mov	r3, r9
 8009fc6:	f7f6 fb1f 	bl	8000608 <__aeabi_dmul>
 8009fca:	a355      	add	r3, pc, #340	; (adr r3, 800a120 <__ieee754_log+0x348>)
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f7f6 f964 	bl	800029c <__adddf3>
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	464b      	mov	r3, r9
 8009fd8:	f7f6 fb16 	bl	8000608 <__aeabi_dmul>
 8009fdc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009fe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fec:	f7f6 f956 	bl	800029c <__adddf3>
 8009ff0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8009ff4:	3551      	adds	r5, #81	; 0x51
 8009ff6:	4335      	orrs	r5, r6
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	4689      	mov	r9, r1
 8009ffe:	dd48      	ble.n	800a092 <__ieee754_log+0x2ba>
 800a000:	2200      	movs	r2, #0
 800a002:	4b4d      	ldr	r3, [pc, #308]	; (800a138 <__ieee754_log+0x360>)
 800a004:	4650      	mov	r0, sl
 800a006:	4659      	mov	r1, fp
 800a008:	f7f6 fafe 	bl	8000608 <__aeabi_dmul>
 800a00c:	4652      	mov	r2, sl
 800a00e:	465b      	mov	r3, fp
 800a010:	f7f6 fafa 	bl	8000608 <__aeabi_dmul>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4606      	mov	r6, r0
 800a01a:	460f      	mov	r7, r1
 800a01c:	4640      	mov	r0, r8
 800a01e:	4649      	mov	r1, r9
 800a020:	f7f6 f93c 	bl	800029c <__adddf3>
 800a024:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a028:	f7f6 faee 	bl	8000608 <__aeabi_dmul>
 800a02c:	4680      	mov	r8, r0
 800a02e:	4689      	mov	r9, r1
 800a030:	b964      	cbnz	r4, 800a04c <__ieee754_log+0x274>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4630      	mov	r0, r6
 800a038:	4639      	mov	r1, r7
 800a03a:	f7f6 f92d 	bl	8000298 <__aeabi_dsub>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4650      	mov	r0, sl
 800a044:	4659      	mov	r1, fp
 800a046:	f7f6 f927 	bl	8000298 <__aeabi_dsub>
 800a04a:	e6da      	b.n	8009e02 <__ieee754_log+0x2a>
 800a04c:	a322      	add	r3, pc, #136	; (adr r3, 800a0d8 <__ieee754_log+0x300>)
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a056:	f7f6 fad7 	bl	8000608 <__aeabi_dmul>
 800a05a:	a321      	add	r3, pc, #132	; (adr r3, 800a0e0 <__ieee754_log+0x308>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	4604      	mov	r4, r0
 800a062:	460d      	mov	r5, r1
 800a064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a068:	f7f6 face 	bl	8000608 <__aeabi_dmul>
 800a06c:	4642      	mov	r2, r8
 800a06e:	464b      	mov	r3, r9
 800a070:	f7f6 f914 	bl	800029c <__adddf3>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4630      	mov	r0, r6
 800a07a:	4639      	mov	r1, r7
 800a07c:	f7f6 f90c 	bl	8000298 <__aeabi_dsub>
 800a080:	4652      	mov	r2, sl
 800a082:	465b      	mov	r3, fp
 800a084:	f7f6 f908 	bl	8000298 <__aeabi_dsub>
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	4620      	mov	r0, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	e7d9      	b.n	800a046 <__ieee754_log+0x26e>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4650      	mov	r0, sl
 800a098:	4659      	mov	r1, fp
 800a09a:	f7f6 f8fd 	bl	8000298 <__aeabi_dsub>
 800a09e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0a2:	f7f6 fab1 	bl	8000608 <__aeabi_dmul>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	460f      	mov	r7, r1
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	f43f af25 	beq.w	8009efa <__ieee754_log+0x122>
 800a0b0:	a309      	add	r3, pc, #36	; (adr r3, 800a0d8 <__ieee754_log+0x300>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ba:	f7f6 faa5 	bl	8000608 <__aeabi_dmul>
 800a0be:	a308      	add	r3, pc, #32	; (adr r3, 800a0e0 <__ieee754_log+0x308>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	460d      	mov	r5, r1
 800a0c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0cc:	e729      	b.n	8009f22 <__ieee754_log+0x14a>
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	e696      	b.n	8009e02 <__ieee754_log+0x2a>
 800a0d4:	f3af 8000 	nop.w
 800a0d8:	fee00000 	.word	0xfee00000
 800a0dc:	3fe62e42 	.word	0x3fe62e42
 800a0e0:	35793c76 	.word	0x35793c76
 800a0e4:	3dea39ef 	.word	0x3dea39ef
 800a0e8:	55555555 	.word	0x55555555
 800a0ec:	3fd55555 	.word	0x3fd55555
 800a0f0:	df3e5244 	.word	0xdf3e5244
 800a0f4:	3fc2f112 	.word	0x3fc2f112
 800a0f8:	96cb03de 	.word	0x96cb03de
 800a0fc:	3fc74664 	.word	0x3fc74664
 800a100:	94229359 	.word	0x94229359
 800a104:	3fd24924 	.word	0x3fd24924
 800a108:	55555593 	.word	0x55555593
 800a10c:	3fe55555 	.word	0x3fe55555
 800a110:	d078c69f 	.word	0xd078c69f
 800a114:	3fc39a09 	.word	0x3fc39a09
 800a118:	1d8e78af 	.word	0x1d8e78af
 800a11c:	3fcc71c5 	.word	0x3fcc71c5
 800a120:	9997fa04 	.word	0x9997fa04
 800a124:	3fd99999 	.word	0x3fd99999
 800a128:	c3500000 	.word	0xc3500000
 800a12c:	43500000 	.word	0x43500000
 800a130:	7fefffff 	.word	0x7fefffff
 800a134:	3ff00000 	.word	0x3ff00000
 800a138:	3fe00000 	.word	0x3fe00000

0800a13c <finite>:
 800a13c:	ee10 3a90 	vmov	r3, s1
 800a140:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a144:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a148:	0fc0      	lsrs	r0, r0, #31
 800a14a:	4770      	bx	lr

0800a14c <matherr>:
 800a14c:	2000      	movs	r0, #0
 800a14e:	4770      	bx	lr

0800a150 <nan>:
 800a150:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a158 <nan+0x8>
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	00000000 	.word	0x00000000
 800a15c:	7ff80000 	.word	0x7ff80000

0800a160 <_close>:
 800a160:	4b02      	ldr	r3, [pc, #8]	; (800a16c <_close+0xc>)
 800a162:	2258      	movs	r2, #88	; 0x58
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	f04f 30ff 	mov.w	r0, #4294967295
 800a16a:	4770      	bx	lr
 800a16c:	20002704 	.word	0x20002704

0800a170 <_fstat>:
 800a170:	4b02      	ldr	r3, [pc, #8]	; (800a17c <_fstat+0xc>)
 800a172:	2258      	movs	r2, #88	; 0x58
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	f04f 30ff 	mov.w	r0, #4294967295
 800a17a:	4770      	bx	lr
 800a17c:	20002704 	.word	0x20002704

0800a180 <_isatty>:
 800a180:	4b02      	ldr	r3, [pc, #8]	; (800a18c <_isatty+0xc>)
 800a182:	2258      	movs	r2, #88	; 0x58
 800a184:	601a      	str	r2, [r3, #0]
 800a186:	2000      	movs	r0, #0
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	20002704 	.word	0x20002704

0800a190 <_lseek>:
 800a190:	4b02      	ldr	r3, [pc, #8]	; (800a19c <_lseek+0xc>)
 800a192:	2258      	movs	r2, #88	; 0x58
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	f04f 30ff 	mov.w	r0, #4294967295
 800a19a:	4770      	bx	lr
 800a19c:	20002704 	.word	0x20002704

0800a1a0 <_read>:
 800a1a0:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <_read+0xc>)
 800a1a2:	2258      	movs	r2, #88	; 0x58
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1aa:	4770      	bx	lr
 800a1ac:	20002704 	.word	0x20002704

0800a1b0 <_write>:
 800a1b0:	4b02      	ldr	r3, [pc, #8]	; (800a1bc <_write+0xc>)
 800a1b2:	2258      	movs	r2, #88	; 0x58
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ba:	4770      	bx	lr
 800a1bc:	20002704 	.word	0x20002704

0800a1c0 <_init>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	bf00      	nop
 800a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	4770      	bx	lr

0800a1cc <_fini>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	bf00      	nop
 800a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d2:	bc08      	pop	{r3}
 800a1d4:	469e      	mov	lr, r3
 800a1d6:	4770      	bx	lr
