
Log_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a558  0800a558  0001a558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a840  0800a840  00020434  2**0
                  CONTENTS
  4 .ARM          00000008  0800a840  0800a840  0001a840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a848  0800a848  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a848  0800a848  0001a848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a84c  0800a84c  0001a84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  0800a850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000434  0800ac84  00020434  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  0800ac84  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026444  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d15  00000000  00000000  000468a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002098  00000000  00000000  000495c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f78  00000000  00000000  0004b658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001812d  00000000  00000000  0004d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000108f8  00000000  00000000  000656fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099ff5  00000000  00000000  00075ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ffea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009800  00000000  00000000  00110068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000434 	.word	0x20000434
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a540 	.word	0x0800a540

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000438 	.word	0x20000438
 80001dc:	0800a540 	.word	0x0800a540

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebe:	f004 f847 	bl	8004f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec2:	f000 f885 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec6:	f000 f93d 	bl	8001144 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eca:	f000 f911 	bl	80010f0 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000ece:	f000 f8eb 	bl	80010a8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Initialize accelerometer
  int init_acc = IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f003 fbef 	bl	80046b8 <IKS01A2_MOTION_SENSOR_Init>
 8000eda:	6078      	str	r0, [r7, #4]
  if(init_acc == 0){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d111      	bne.n	8000f06 <main+0x4e>
	  if( HAL_UART_Transmit(&huart2, (uint8_t*)initMessage, MAX_BUF_SIZE, 100) != HAL_OK ) {Error_Handler();}
 8000ee2:	2364      	movs	r3, #100	; 0x64
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	4931      	ldr	r1, [pc, #196]	; (8000fac <main+0xf4>)
 8000ee8:	4831      	ldr	r0, [pc, #196]	; (8000fb0 <main+0xf8>)
 8000eea:	f006 fb42 	bl	8007572 <HAL_UART_Transmit>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <main+0x40>
 8000ef4:	f000 fa46 	bl	8001384 <Error_Handler>
	  while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){};
 8000ef8:	bf00      	nop
 8000efa:	482d      	ldr	r0, [pc, #180]	; (8000fb0 <main+0xf8>)
 8000efc:	f006 fd96 	bl	8007a2c <HAL_UART_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b20      	cmp	r3, #32
 8000f04:	d1f9      	bne.n	8000efa <main+0x42>
  }

  // Enabling accelerometer
  int enable_acc = IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8000f06:	2102      	movs	r1, #2
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f003 fccb 	bl	80048a4 <IKS01A2_MOTION_SENSOR_Enable>
 8000f0e:	6038      	str	r0, [r7, #0]
  if(enable_acc == 0){
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d111      	bne.n	8000f3a <main+0x82>
	  if( HAL_UART_Transmit(&huart2, (uint8_t*)enablingMessage, MAX_BUF_SIZE, 100) != HAL_OK ) {Error_Handler();}
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	4926      	ldr	r1, [pc, #152]	; (8000fb4 <main+0xfc>)
 8000f1c:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <main+0xf8>)
 8000f1e:	f006 fb28 	bl	8007572 <HAL_UART_Transmit>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <main+0x74>
 8000f28:	f000 fa2c 	bl	8001384 <Error_Handler>
	  while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){};
 8000f2c:	bf00      	nop
 8000f2e:	4820      	ldr	r0, [pc, #128]	; (8000fb0 <main+0xf8>)
 8000f30:	f006 fd7c 	bl	8007a2c <HAL_UART_GetState>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b20      	cmp	r3, #32
 8000f38:	d1f9      	bne.n	8000f2e <main+0x76>
  }


  // Get parameters of accelerometer
  IKS01A2_MOTION_SENSOR_GetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_odr);
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <main+0x100>)
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f003 fd7a 	bl	8004a38 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>
  IKS01A2_MOTION_SENSOR_GetSensitivity(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_sens);
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <main+0x104>)
 8000f46:	2102      	movs	r1, #2
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f003 fd31 	bl	80049b0 <IKS01A2_MOTION_SENSOR_GetSensitivity>
  IKS01A2_MOTION_SENSOR_GetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_fs);
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <main+0x108>)
 8000f50:	2102      	movs	r1, #2
 8000f52:	2000      	movs	r0, #0
 8000f54:	f003 fdb4 	bl	8004ac0 <IKS01A2_MOTION_SENSOR_GetFullScale>

  // Print parameters to UART
  snprintf(parameterMessage, MAX_BUF_SIZE, ">Output rate: %d[Hz]\r\n>Sensitivity: %d[g]\n\r>FullScale: %d[g]\r\n", accelerometer_odr, accelerometer_sens, accelerometer_fs);
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <main+0x100>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fafb 	bl	8000558 <__aeabi_f2d>
 8000f62:	4604      	mov	r4, r0
 8000f64:	460d      	mov	r5, r1
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <main+0x104>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff faf4 	bl	8000558 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4912      	ldr	r1, [pc, #72]	; (8000fc0 <main+0x108>)
 8000f76:	6809      	ldr	r1, [r1, #0]
 8000f78:	9104      	str	r1, [sp, #16]
 8000f7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f7e:	e9cd 4500 	strd	r4, r5, [sp]
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <main+0x10c>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <main+0x110>)
 8000f88:	f007 fee4 	bl	8008d54 <sniprintf>
  if( HAL_UART_Transmit(&huart2, (uint8_t*)parameterMessage, MAX_BUF_SIZE, 100) != HAL_OK ) {Error_Handler();}
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	2280      	movs	r2, #128	; 0x80
 8000f90:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <main+0x110>)
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <main+0xf8>)
 8000f94:	f006 faed 	bl	8007572 <HAL_UART_Transmit>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <main+0xea>
 8000f9e:	f000 f9f1 	bl	8001384 <Error_Handler>


  // Start timer
  HAL_TIM_Base_Start_IT(&htim10);
 8000fa2:	480a      	ldr	r0, [pc, #40]	; (8000fcc <main+0x114>)
 8000fa4:	f006 f8af 	bl	8007106 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <main+0xf0>
 8000faa:	bf00      	nop
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	200006f8 	.word	0x200006f8
 8000fb4:	20000080 	.word	0x20000080
 8000fb8:	20000748 	.word	0x20000748
 8000fbc:	200005f0 	.word	0x200005f0
 8000fc0:	200005f4 	.word	0x200005f4
 8000fc4:	0800a558 	.word	0x0800a558
 8000fc8:	20000530 	.word	0x20000530
 8000fcc:	200005b0 	.word	0x200005b0

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 fa54 	bl	800848c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <SystemClock_Config+0xd0>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <SystemClock_Config+0xd0>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <SystemClock_Config+0xd0>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <SystemClock_Config+0xd4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800101c:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <SystemClock_Config+0xd4>)
 800101e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <SystemClock_Config+0xd4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001044:	2310      	movs	r3, #16
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001048:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800104c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800104e:	2304      	movs	r3, #4
 8001050:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001052:	2307      	movs	r3, #7
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	4618      	mov	r0, r3
 800105c:	f005 fbc6 	bl	80067ec <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001066:	f000 f98d 	bl	8001384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2302      	movs	r3, #2
 8001070:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2102      	movs	r1, #2
 8001086:	4618      	mov	r0, r3
 8001088:	f005 fe20 	bl	8006ccc <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001092:	f000 f977 	bl	8001384 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	; 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000

080010a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <MX_TIM10_Init+0x44>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010b4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010b8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010c2:	2263      	movs	r2, #99	; 0x63
 80010c4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010d4:	f005 ffec 	bl	80070b0 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80010de:	f000 f951 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200005b0 	.word	0x200005b0
 80010ec:	40014400 	.word	0x40014400

080010f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_USART2_UART_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_USART2_UART_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_USART2_UART_Init+0x4c>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_USART2_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001128:	f006 f9d6 	bl	80074d8 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001132:	f000 f927 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200006f8 	.word	0x200006f8
 8001140:	40004400 	.word	0x40004400

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <MX_GPIO_Init+0xe0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a30      	ldr	r2, [pc, #192]	; (8001224 <MX_GPIO_Init+0xe0>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <MX_GPIO_Init+0xe0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_GPIO_Init+0xe0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a29      	ldr	r2, [pc, #164]	; (8001224 <MX_GPIO_Init+0xe0>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <MX_GPIO_Init+0xe0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_GPIO_Init+0xe0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a22      	ldr	r2, [pc, #136]	; (8001224 <MX_GPIO_Init+0xe0>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_GPIO_Init+0xe0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_GPIO_Init+0xe0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <MX_GPIO_Init+0xe0>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_GPIO_Init+0xe0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2120      	movs	r1, #32
 80011ce:	4816      	ldr	r0, [pc, #88]	; (8001228 <MX_GPIO_Init+0xe4>)
 80011d0:	f004 fac8 	bl	8005764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_GPIO_Init+0xe8>)
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4811      	ldr	r0, [pc, #68]	; (8001230 <MX_GPIO_Init+0xec>)
 80011ea:	f004 f857 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ee:	2320      	movs	r3, #32
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <MX_GPIO_Init+0xe4>)
 8001206:	f004 f849 	bl	800529c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2028      	movs	r0, #40	; 0x28
 8001210:	f003 ffeb 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001214:	2028      	movs	r0, #40	; 0x28
 8001216:	f004 f804 	bl	8005222 <HAL_NVIC_EnableIRQ>

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	10210000 	.word	0x10210000
 8001230:	40020800 	.word	0x40020800

08001234 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]

	counter += 1;		// +1 to total letter measured
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_GPIO_EXTI_Callback+0x98>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <HAL_GPIO_EXTI_Callback+0x98>)
 8001246:	6013      	str	r3, [r2, #0]
	data_counter = 0;	// reset counter of time stamps
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]

	// Output letter request
	if( HAL_UART_Transmit(&huart2, (uint8_t*)askMessage, sizeof(askMessage), 1000) != HAL_OK ){Error_Handler();}
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	491f      	ldr	r1, [pc, #124]	; (80012d4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001256:	4820      	ldr	r0, [pc, #128]	; (80012d8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001258:	f006 f98b 	bl	8007572 <HAL_UART_Transmit>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_GPIO_EXTI_Callback+0x32>
 8001262:	f000 f88f 	bl	8001384 <Error_Handler>
	// Receive letter
	if( HAL_UART_Receive(&huart2, (uint8_t*)RxMessage, LETTER_BUFFER_SIZE, 1000) != HAL_OK ){Error_Handler();}
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	2201      	movs	r2, #1
 800126c:	491b      	ldr	r1, [pc, #108]	; (80012dc <HAL_GPIO_EXTI_Callback+0xa8>)
 800126e:	481a      	ldr	r0, [pc, #104]	; (80012d8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001270:	f006 fa18 	bl	80076a4 <HAL_UART_Receive>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_GPIO_EXTI_Callback+0x4a>
 800127a:	f000 f883 	bl	8001384 <Error_Handler>
	while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){}
 800127e:	bf00      	nop
 8001280:	4815      	ldr	r0, [pc, #84]	; (80012d8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001282:	f006 fbd3 	bl	8007a2c <HAL_UART_GetState>
 8001286:	4603      	mov	r3, r0
 8001288:	2b20      	cmp	r3, #32
 800128a:	d1f9      	bne.n	8001280 <HAL_GPIO_EXTI_Callback+0x4c>
	snprintf(letterEndMessage, MAX_BUF_SIZE, ">Acquisition of [%s] letter \r\n", (char*)RxMessage);
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_GPIO_EXTI_Callback+0xa8>)
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_GPIO_EXTI_Callback+0xac>)
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	4814      	ldr	r0, [pc, #80]	; (80012e4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001294:	f007 fd5e 	bl	8008d54 <sniprintf>
	if( HAL_UART_Transmit(&huart2, (uint8_t*)letterEndMessage, MAX_BUF_SIZE, 1000) != HAL_OK ){Error_Handler();}
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	4911      	ldr	r1, [pc, #68]	; (80012e4 <HAL_GPIO_EXTI_Callback+0xb0>)
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80012a2:	f006 f966 	bl	8007572 <HAL_UART_Transmit>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_GPIO_EXTI_Callback+0x7c>
 80012ac:	f000 f86a 	bl	8001384 <Error_Handler>
	while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){}
 80012b0:	bf00      	nop
 80012b2:	4809      	ldr	r0, [pc, #36]	; (80012d8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80012b4:	f006 fbba 	bl	8007a2c <HAL_UART_GetState>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d1f9      	bne.n	80012b2 <HAL_GPIO_EXTI_Callback+0x7e>

	start_acquisition = 1;	// Enable data acquisition
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_GPIO_EXTI_Callback+0xb4>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000454 	.word	0x20000454
 80012d0:	20000458 	.word	0x20000458
 80012d4:	20000100 	.word	0x20000100
 80012d8:	200006f8 	.word	0x200006f8
 80012dc:	20000738 	.word	0x20000738
 80012e0:	0800a598 	.word	0x0800a598
 80012e4:	200005f8 	.word	0x200005f8
 80012e8:	20000450 	.word	0x20000450

080012ec <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	6078      	str	r0, [r7, #4]

	if(data_counter == sample_n){
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d103      	bne.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x1c>
		start_acquisition = 0;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE, "%d,%s,%ld,%ld,%ld\r\n", counter, (char*)RxMessage, (int32_t)acceleration.x, (int32_t)acceleration.y, (int32_t)acceleration.z);
		HAL_UART_Transmit(&huart2, (uint8_t*)dataOut, MAX_BUF_SIZE, 1);
	}else{
	}

}
 8001306:	e026      	b.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x6a>
	}else if(start_acquisition == 1){
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d122      	bne.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x6a>
		data_counter += 1;
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001318:	6013      	str	r3, [r2, #0]
		IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &acceleration);
 800131a:	4a14      	ldr	r2, [pc, #80]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800131c:	2102      	movs	r1, #2
 800131e:	2000      	movs	r0, #0
 8001320:	f003 fb02 	bl	8004928 <IKS01A2_MOTION_SENSOR_GetAxes>
		snprintf(dataOut, MAX_BUF_SIZE, "%d,%s,%ld,%ld,%ld\r\n", counter, (char*)RxMessage, (int32_t)acceleration.x, (int32_t)acceleration.y, (int32_t)acceleration.z);
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800132e:	6852      	ldr	r2, [r2, #4]
 8001330:	490e      	ldr	r1, [pc, #56]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001332:	6889      	ldr	r1, [r1, #8]
 8001334:	9103      	str	r1, [sp, #12]
 8001336:	9202      	str	r2, [sp, #8]
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4603      	mov	r3, r0
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001346:	f007 fd05 	bl	8008d54 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)dataOut, MAX_BUF_SIZE, 1);
 800134a:	2301      	movs	r3, #1
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	490b      	ldr	r1, [pc, #44]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001352:	f006 f90e 	bl	8007572 <HAL_UART_Transmit>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000458 	.word	0x20000458
 8001364:	20000180 	.word	0x20000180
 8001368:	20000450 	.word	0x20000450
 800136c:	2000073c 	.word	0x2000073c
 8001370:	20000454 	.word	0x20000454
 8001374:	20000738 	.word	0x20000738
 8001378:	0800a5b8 	.word	0x0800a5b8
 800137c:	20000678 	.word	0x20000678
 8001380:	200006f8 	.word	0x200006f8

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138a:	e7fe      	b.n	800138a <Error_Handler+0x6>

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_MspInit+0x5c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <HAL_MspInit+0x5c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_MspInit+0x5c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_MspInit+0x5c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <HAL_MspInit+0x5c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_MspInit+0x5c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ca:	2007      	movs	r0, #7
 80013cc:	f003 ff02 	bl	80051d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2051      	movs	r0, #81	; 0x51
 80013d6:	f003 ff08 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80013da:	2051      	movs	r0, #81	; 0x51
 80013dc:	f003 ff21 	bl	8005222 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_TIM_Base_MspInit+0x48>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d115      	bne.n	800142a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_TIM_Base_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <HAL_TIM_Base_MspInit+0x4c>)
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_TIM_Base_MspInit+0x4c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2019      	movs	r0, #25
 8001420:	f003 fee3 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001424:	2019      	movs	r0, #25
 8001426:	f003 fefc 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40014400 	.word	0x40014400
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_UART_MspInit+0x94>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d133      	bne.n	80014c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_UART_MspInit+0x98>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <HAL_UART_MspInit+0x98>)
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_UART_MspInit+0x98>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_UART_MspInit+0x98>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <HAL_UART_MspInit+0x98>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_UART_MspInit+0x98>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001496:	230c      	movs	r3, #12
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a6:	2307      	movs	r3, #7
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <HAL_UART_MspInit+0x9c>)
 80014b2:	f003 fef3 	bl	800529c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2026      	movs	r0, #38	; 0x26
 80014bc:	f003 fe95 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014c0:	2026      	movs	r0, #38	; 0x26
 80014c2:	f003 feae 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40004400 	.word	0x40004400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f003 fd64 	bl	8004ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001536:	f005 fe0a 	bl	800714e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200005b0 	.word	0x200005b0

08001544 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <USART2_IRQHandler+0x10>)
 800154a:	f006 f951 	bl	80077f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200006f8 	.word	0x200006f8

08001558 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800155c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001560:	f004 f91a 	bl	8005798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <BSP_I2C1_Init+0x58>)
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <BSP_I2C1_Init+0x5c>)
 8001586:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <BSP_I2C1_Init+0x60>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	4912      	ldr	r1, [pc, #72]	; (80015d8 <BSP_I2C1_Init+0x60>)
 8001590:	600a      	str	r2, [r1, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d117      	bne.n	80015c6 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001596:	480e      	ldr	r0, [pc, #56]	; (80015d0 <BSP_I2C1_Init+0x58>)
 8001598:	f004 fdb2 	bl	8006100 <HAL_I2C_GetState>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d111      	bne.n	80015c6 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <BSP_I2C1_Init+0x58>)
 80015a4:	f000 f8e2 	bl	800176c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10b      	bne.n	80015c6 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80015ae:	4808      	ldr	r0, [pc, #32]	; (80015d0 <BSP_I2C1_Init+0x58>)
 80015b0:	f000 f8a8 	bl	8001704 <MX_I2C1_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 80015ba:	f06f 0307 	mvn.w	r3, #7
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	e001      	b.n	80015c6 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80015c6:	687b      	ldr	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000074c 	.word	0x2000074c
 80015d4:	40005400 	.word	0x40005400
 80015d8:	2000045c 	.word	0x2000045c

080015dc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <BSP_I2C1_DeInit+0x48>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d014      	beq.n	8001618 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <BSP_I2C1_DeInit+0x48>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <BSP_I2C1_DeInit+0x48>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <BSP_I2C1_DeInit+0x48>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10b      	bne.n	8001618 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <BSP_I2C1_DeInit+0x4c>)
 8001602:	f000 f8fd 	bl	8001800 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001606:	4808      	ldr	r0, [pc, #32]	; (8001628 <BSP_I2C1_DeInit+0x4c>)
 8001608:	f004 fa16 	bl	8005a38 <HAL_I2C_DeInit>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001612:	f06f 0307 	mvn.w	r3, #7
 8001616:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000045c 	.word	0x2000045c
 8001628:	2000074c 	.word	0x2000074c

0800162c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af04      	add	r7, sp, #16
 8001632:	60ba      	str	r2, [r7, #8]
 8001634:	461a      	mov	r2, r3
 8001636:	4603      	mov	r3, r0
 8001638:	81fb      	strh	r3, [r7, #14]
 800163a:	460b      	mov	r3, r1
 800163c:	81bb      	strh	r3, [r7, #12]
 800163e:	4613      	mov	r3, r2
 8001640:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001646:	89ba      	ldrh	r2, [r7, #12]
 8001648:	89f9      	ldrh	r1, [r7, #14]
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <BSP_I2C1_WriteReg+0x60>)
 800165c:	f004 fa30 	bl	8005ac0 <HAL_I2C_Mem_Write>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00c      	beq.n	8001680 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <BSP_I2C1_WriteReg+0x60>)
 8001668:	f004 fd58 	bl	800611c <HAL_I2C_GetError>
 800166c:	4603      	mov	r3, r0
 800166e:	2b04      	cmp	r3, #4
 8001670:	d103      	bne.n	800167a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001672:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e002      	b.n	8001680 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800167a:	f06f 0303 	mvn.w	r3, #3
 800167e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001680:	697b      	ldr	r3, [r7, #20]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000074c 	.word	0x2000074c

08001690 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af04      	add	r7, sp, #16
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	81fb      	strh	r3, [r7, #14]
 800169e:	460b      	mov	r3, r1
 80016a0:	81bb      	strh	r3, [r7, #12]
 80016a2:	4613      	mov	r3, r2
 80016a4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80016aa:	89ba      	ldrh	r2, [r7, #12]
 80016ac:	89f9      	ldrh	r1, [r7, #14]
 80016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <BSP_I2C1_ReadReg+0x60>)
 80016c0:	f004 faf8 	bl	8005cb4 <HAL_I2C_Mem_Read>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00c      	beq.n	80016e4 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <BSP_I2C1_ReadReg+0x60>)
 80016cc:	f004 fd26 	bl	800611c <HAL_I2C_GetError>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d103      	bne.n	80016de <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016d6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e002      	b.n	80016e4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80016de:	f06f 0303 	mvn.w	r3, #3
 80016e2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80016e4:	697b      	ldr	r3, [r7, #20]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000074c 	.word	0x2000074c

080016f4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80016f8:	f003 fc90 	bl	800501c <HAL_GetTick>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a14      	ldr	r2, [pc, #80]	; (8001764 <MX_I2C1_Init+0x60>)
 8001714:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a13      	ldr	r2, [pc, #76]	; (8001768 <MX_I2C1_Init+0x64>)
 800171a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f004 f83d 	bl	80057c8 <HAL_I2C_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40005400 	.word	0x40005400
 8001768:	00061a80 	.word	0x00061a80

0800176c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <I2C1_MspInit+0x8c>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4a1e      	ldr	r2, [pc, #120]	; (80017f8 <I2C1_MspInit+0x8c>)
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	6313      	str	r3, [r2, #48]	; 0x30
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <I2C1_MspInit+0x8c>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001796:	2312      	movs	r3, #18
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80017a2:	2304      	movs	r3, #4
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <I2C1_MspInit+0x90>)
 80017ae:	f003 fd75 	bl	800529c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80017b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b8:	2312      	movs	r3, #18
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017bc:	2301      	movs	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80017c4:	2304      	movs	r3, #4
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <I2C1_MspInit+0x90>)
 80017d0:	f003 fd64 	bl	800529c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <I2C1_MspInit+0x8c>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <I2C1_MspInit+0x8c>)
 80017de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <I2C1_MspInit+0x8c>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020400 	.word	0x40020400

08001800 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <I2C1_MspDeInit+0x30>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <I2C1_MspDeInit+0x30>)
 800180e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001818:	4806      	ldr	r0, [pc, #24]	; (8001834 <I2C1_MspDeInit+0x34>)
 800181a:	f003 fec1 	bl	80055a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800181e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001822:	4804      	ldr	r0, [pc, #16]	; (8001834 <I2C1_MspDeInit+0x34>)
 8001824:	f003 febc 	bl	80055a0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f006 fde6 	bl	8008438 <__errno>
 800186c:	4602      	mov	r2, r0
 800186e:	230c      	movs	r3, #12
 8001870:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20018000 	.word	0x20018000
 8001898:	00000400 	.word	0x00000400
 800189c:	20000460 	.word	0x20000460
 80018a0:	200007b8 	.word	0x200007b8

080018a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <SystemInit+0x28>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <SystemInit+0x28>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SystemInit+0x28>)
 80018ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018be:	609a      	str	r2, [r3, #8]
#endif
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018d6:	e003      	b.n	80018e0 <LoopCopyDataInit>

080018d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018de:	3104      	adds	r1, #4

080018e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e8:	d3f6      	bcc.n	80018d8 <CopyDataInit>
  ldr  r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018ec:	e002      	b.n	80018f4 <LoopFillZerobss>

080018ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018f0:	f842 3b04 	str.w	r3, [r2], #4

080018f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f8:	d3f9      	bcc.n	80018ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018fa:	f7ff ffd3 	bl	80018a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f006 fda1 	bl	8008444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fad9 	bl	8000eb8 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001908:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800190c:	0800a850 	.word	0x0800a850
  ldr  r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001914:	20000434 	.word	0x20000434
  ldr  r2, =_sbss
 8001918:	20000434 	.word	0x20000434
  ldr  r3, = _ebss
 800191c:	200007b4 	.word	0x200007b4

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d103      	bne.n	8001940 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e04d      	b.n	80019dc <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	7b1a      	ldrb	r2, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a1b      	ldr	r2, [pc, #108]	; (80019e8 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 800197c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8001982:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e020      	b.n	80019dc <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4798      	blx	r3
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e016      	b.n	80019dc <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d112      	bne.n	80019dc <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10d      	bne.n	80019dc <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80019c0:	2301      	movs	r3, #1
 80019c2:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	461a      	mov	r2, r3
 80019c8:	2123      	movs	r1, #35	; 0x23
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fb52 	bl	8002074 <LSM303AGR_ACC_Write_Reg>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e000      	b.n	80019de <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	08002885 	.word	0x08002885
 80019ec:	080028e7 	.word	0x080028e7

080019f0 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	331c      	adds	r3, #28
 80019fc:	2101      	movs	r1, #1
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 f948 	bl	8002c94 <lsm303agr_xl_block_data_update_set>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e02c      	b.n	8001a6a <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	331c      	adds	r3, #28
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 faeb 	bl	8002ff2 <lsm303agr_xl_fifo_mode_set>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e020      	b.n	8001a6a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	331c      	adds	r3, #28
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 f84c 	bl	8002ad4 <lsm303agr_xl_data_rate_set>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e010      	b.n	8001a6a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	331c      	adds	r3, #28
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 f8c2 	bl	8002bd8 <lsm303agr_xl_full_scale_set>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e004      	b.n	8001a6a <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f87c 	bl	8001b78 <LSM303AGR_ACC_Disable>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e008      	b.n	8001a9e <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	331c      	adds	r3, #28
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 fa53 	bl	8002f62 <lsm303agr_xl_device_id_get>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e000      	b.n	8001aca <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2200      	movs	r2, #0
 8001aee:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2210      	movs	r2, #16
 8001b00:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <LSM303AGR_ACC_GetCapabilities+0x58>)
 8001b14:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	43c80000 	.word	0x43c80000

08001b30 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e014      	b.n	8001b70 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f103 021c 	add.w	r2, r3, #28
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f000 ffbd 	bl	8002ad4 <lsm303agr_xl_data_rate_set>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	e004      	b.n	8001b70 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e01f      	b.n	8001bce <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f103 021c 	add.w	r2, r3, #28
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	332a      	adds	r3, #42	; 0x2a
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f000 ffc0 	bl	8002b20 <lsm303agr_xl_data_rate_get>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	e010      	b.n	8001bce <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	331c      	adds	r3, #28
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 ff8e 	bl	8002ad4 <lsm303agr_xl_data_rate_set>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e004      	b.n	8001bce <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	331c      	adds	r3, #28
 8001be8:	f107 020b 	add.w	r2, r7, #11
 8001bec:	4611      	mov	r1, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 ff3c 	bl	8002a6c <lsm303agr_xl_operating_mode_get>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e02e      	b.n	8001c5e <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8001c00:	7afb      	ldrb	r3, [r7, #11]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d00d      	beq.n	8001c22 <LSM303AGR_ACC_GetSensitivity+0x4c>
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d015      	beq.n	8001c36 <LSM303AGR_ACC_GetSensitivity+0x60>
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11d      	bne.n	8001c4a <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fca9 	bl	8002568 <LSM303AGR_ACC_GetSensitivityHR>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01a      	beq.n	8001c52 <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	e01d      	b.n	8001c5e <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fce5 	bl	80025f4 <LSM303AGR_ACC_GetSensitivityNM>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d012      	beq.n	8001c56 <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
 8001c34:	e013      	b.n	8001c5e <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fd21 	bl	8002680 <LSM303AGR_ACC_GetSensitivityLP>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00a      	beq.n	8001c5a <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
 8001c48:	e009      	b.n	8001c5e <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	60fb      	str	r3, [r7, #12]
      break;
 8001c50:	e004      	b.n	8001c5c <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8001c52:	bf00      	nop
 8001c54:	e002      	b.n	8001c5c <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8001c56:	bf00      	nop
 8001c58:	e000      	b.n	8001c5c <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8001c5a:	bf00      	nop
  }

  return ret;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	331c      	adds	r3, #28
 8001c7a:	f107 020b 	add.w	r2, r7, #11
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fef3 	bl	8002a6c <lsm303agr_xl_operating_mode_get>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c90:	e09f      	b.n	8001dd2 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	331c      	adds	r3, #28
 8001c96:	f107 020a 	add.w	r2, r7, #10
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 ff3f 	bl	8002b20 <lsm303agr_xl_data_rate_get>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	e091      	b.n	8001dd2 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8001cae:	7afb      	ldrb	r3, [r7, #11]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d148      	bne.n	8001d46 <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 8001cb4:	7abb      	ldrb	r3, [r7, #10]
 8001cb6:	2b09      	cmp	r3, #9
 8001cb8:	d840      	bhi.n	8001d3c <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001ce9 	.word	0x08001ce9
 8001cc4:	08001cf3 	.word	0x08001cf3
 8001cc8:	08001cfd 	.word	0x08001cfd
 8001ccc:	08001d05 	.word	0x08001d05
 8001cd0:	08001d0d 	.word	0x08001d0d
 8001cd4:	08001d15 	.word	0x08001d15
 8001cd8:	08001d1d 	.word	0x08001d1d
 8001cdc:	08001d25 	.word	0x08001d25
 8001ce0:	08001d2d 	.word	0x08001d2d
 8001ce4:	08001d35 	.word	0x08001d35
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
        break;
 8001cf0:	e06e      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cf8:	601a      	str	r2, [r3, #0]
        break;
 8001cfa:	e069      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4a37      	ldr	r2, [pc, #220]	; (8001ddc <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8001d00:	601a      	str	r2, [r3, #0]
        break;
 8001d02:	e065      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4a36      	ldr	r2, [pc, #216]	; (8001de0 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8001d08:	601a      	str	r2, [r3, #0]
        break;
 8001d0a:	e061      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4a35      	ldr	r2, [pc, #212]	; (8001de4 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8001d10:	601a      	str	r2, [r3, #0]
        break;
 8001d12:	e05d      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8001d18:	601a      	str	r2, [r3, #0]
        break;
 8001d1a:	e059      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4a33      	ldr	r2, [pc, #204]	; (8001dec <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8001d20:	601a      	str	r2, [r3, #0]
        break;
 8001d22:	e055      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4a32      	ldr	r2, [pc, #200]	; (8001df0 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8001d28:	601a      	str	r2, [r3, #0]
        break;
 8001d2a:	e051      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8001d30:	601a      	str	r2, [r3, #0]
        break;
 8001d32:	e04d      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4a30      	ldr	r2, [pc, #192]	; (8001df8 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8001d38:	601a      	str	r2, [r3, #0]
        break;
 8001d3a:	e049      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	60fb      	str	r3, [r7, #12]
        break;
 8001d42:	bf00      	nop
 8001d44:	e044      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8001d46:	7abb      	ldrb	r3, [r7, #10]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d83d      	bhi.n	8001dc8 <LSM303AGR_ACC_GetOutputDataRate+0x160>
 8001d4c:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8001d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d52:	bf00      	nop
 8001d54:	08001d7d 	.word	0x08001d7d
 8001d58:	08001d87 	.word	0x08001d87
 8001d5c:	08001d91 	.word	0x08001d91
 8001d60:	08001d99 	.word	0x08001d99
 8001d64:	08001da1 	.word	0x08001da1
 8001d68:	08001da9 	.word	0x08001da9
 8001d6c:	08001db1 	.word	0x08001db1
 8001d70:	08001db9 	.word	0x08001db9
 8001d74:	08001dc9 	.word	0x08001dc9
 8001d78:	08001dc1 	.word	0x08001dc1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
        break;
 8001d84:	e024      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d8c:	601a      	str	r2, [r3, #0]
        break;
 8001d8e:	e01f      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8001d94:	601a      	str	r2, [r3, #0]
        break;
 8001d96:	e01b      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8001d9c:	601a      	str	r2, [r3, #0]
        break;
 8001d9e:	e017      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8001da4:	601a      	str	r2, [r3, #0]
        break;
 8001da6:	e013      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8001dac:	601a      	str	r2, [r3, #0]
        break;
 8001dae:	e00f      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8001db4:	601a      	str	r2, [r3, #0]
        break;
 8001db6:	e00b      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8001dbc:	601a      	str	r2, [r3, #0]
        break;
 8001dbe:	e007      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 8001dc4:	601a      	str	r2, [r3, #0]
        break;
 8001dc6:	e003      	b.n	8001dd0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	60fb      	str	r3, [r7, #12]
        break;
 8001dce:	bf00      	nop
    }
  }

  return ret;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	41200000 	.word	0x41200000
 8001de0:	41c80000 	.word	0x41c80000
 8001de4:	42480000 	.word	0x42480000
 8001de8:	42c80000 	.word	0x42c80000
 8001dec:	43480000 	.word	0x43480000
 8001df0:	43c80000 	.word	0x43c80000
 8001df4:	44ca8000 	.word	0x44ca8000
 8001df8:	45a80000 	.word	0x45a80000
 8001dfc:	44a80000 	.word	0x44a80000

08001e00 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d106      	bne.n	8001e24 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001e16:	ed97 0a00 	vldr	s0, [r7]
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fc76 	bl	800270c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	e005      	b.n	8001e30 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001e24:	ed97 0a00 	vldr	s0, [r7]
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fcd1 	bl	80027d0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8001e2e:	4603      	mov	r3, r0
  }
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	331c      	adds	r3, #28
 8001e4a:	f107 020b 	add.w	r2, r7, #11
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fee7 	bl	8002c24 <lsm303agr_xl_full_scale_get>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	e023      	b.n	8001eaa <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d81b      	bhi.n	8001ea0 <LSM303AGR_ACC_GetFullScale+0x68>
 8001e68:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <LSM303AGR_ACC_GetFullScale+0x38>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001e89 	.word	0x08001e89
 8001e78:	08001e91 	.word	0x08001e91
 8001e7c:	08001e99 	.word	0x08001e99
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2202      	movs	r2, #2
 8001e84:	601a      	str	r2, [r3, #0]
      break;
 8001e86:	e00f      	b.n	8001ea8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	601a      	str	r2, [r3, #0]
      break;
 8001e8e:	e00b      	b.n	8001ea8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2208      	movs	r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
      break;
 8001e96:	e007      	b.n	8001ea8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	601a      	str	r2, [r3, #0]
      break;
 8001e9e:	e003      	b.n	8001ea8 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea4:	60fb      	str	r3, [r7, #12]
      break;
 8001ea6:	bf00      	nop
  }

  return ret;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop

08001eb4 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	dd0b      	ble.n	8001edc <LSM303AGR_ACC_SetFullScale+0x28>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	dd06      	ble.n	8001ed8 <LSM303AGR_ACC_SetFullScale+0x24>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	dc01      	bgt.n	8001ed4 <LSM303AGR_ACC_SetFullScale+0x20>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e004      	b.n	8001ede <LSM303AGR_ACC_SetFullScale+0x2a>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e002      	b.n	8001ede <LSM303AGR_ACC_SetFullScale+0x2a>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <LSM303AGR_ACC_SetFullScale+0x2a>
 8001edc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8001ede:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	331c      	adds	r3, #28
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fe75 	bl	8002bd8 <lsm303agr_xl_full_scale_set>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	e000      	b.n	8001efc <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	331c      	adds	r3, #28
 8001f1a:	f107 020f 	add.w	r2, r7, #15
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fda3 	bl	8002a6c <lsm303agr_xl_operating_mode_get>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	e047      	b.n	8001fc2 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d006      	beq.n	8001f46 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d007      	beq.n	8001f4c <LSM303AGR_ACC_GetAxesRaw+0x48>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8001f40:	2310      	movs	r3, #16
 8001f42:	83fb      	strh	r3, [r7, #30]
      break;
 8001f44:	e00a      	b.n	8001f5c <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8001f46:	2340      	movs	r3, #64	; 0x40
 8001f48:	83fb      	strh	r3, [r7, #30]
      break;
 8001f4a:	e007      	b.n	8001f5c <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8001f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f50:	83fb      	strh	r3, [r7, #30]
      break;
 8001f52:	e003      	b.n	8001f5c <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	61bb      	str	r3, [r7, #24]
      break;
 8001f5a:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f62:	d101      	bne.n	8001f68 <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	e02c      	b.n	8001fc2 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	331c      	adds	r3, #28
 8001f6c:	f107 0210 	add.w	r2, r7, #16
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 feb4 	bl	8002ce0 <lsm303agr_acceleration_raw_get>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e01e      	b.n	8001fc2 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8001f84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8001f98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8001fac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	809a      	strh	r2, [r3, #4]

  return ret;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff8f 	bl	8001f04 <LSM303AGR_ACC_GetAxesRaw>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff0:	e03c      	b.n	800206c <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fdec 	bl	8001bd6 <LSM303AGR_ACC_GetSensitivity>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	e030      	b.n	800206c <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800200a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002016:	edd7 7a03 	vldr	s15, [r7, #12]
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002022:	ee17 2a90 	vmov	r2, s15
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800202a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002036:	edd7 7a03 	vldr	s15, [r7, #12]
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002042:	ee17 2a90 	vmov	r2, s15
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800204a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002056:	edd7 7a03 	vldr	s15, [r7, #12]
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002062:	ee17 2a90 	vmov	r2, s15
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f103 001c 	add.w	r0, r3, #28
 800208a:	1cba      	adds	r2, r7, #2
 800208c:	78f9      	ldrb	r1, [r7, #3]
 800208e:	2301      	movs	r3, #1
 8002090:	f000 fcd4 	bl	8002a3c <lsm303agr_write_reg>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	e000      	b.n	80020a2 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e04b      	b.n	8002160 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	7b1a      	ldrb	r2, [r3, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a1a      	ldr	r2, [pc, #104]	; (800216c <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002104:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800210a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e01e      	b.n	8002160 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4798      	blx	r3
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e014      	b.n	8002160 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	331c      	adds	r3, #28
 800214c:	2101      	movs	r1, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f000 ff75 	bl	800303e <lsm303agr_mag_i2c_interface_set>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e000      	b.n	8002162 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002160:	68fb      	ldr	r3, [r7, #12]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	08002949 	.word	0x08002949
 8002170:	080029ab 	.word	0x080029ab

08002174 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	331c      	adds	r3, #28
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fe7c 	bl	8002e80 <lsm303agr_mag_block_data_update_set>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e028      	b.n	80021e6 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	331c      	adds	r3, #28
 8002198:	2102      	movs	r1, #2
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fdeb 	bl	8002d76 <lsm303agr_mag_operating_mode_set>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e01c      	b.n	80021e6 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	331c      	adds	r3, #28
 80021b0:	2103      	movs	r1, #3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fe05 	bl	8002dc2 <lsm303agr_mag_data_rate_set>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	e010      	b.n	80021e6 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	331c      	adds	r3, #28
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 feeb 	bl	8002fa6 <lsm303agr_mag_self_test_set>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e004      	b.n	80021e6 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f874 	bl	80022e4 <LSM303AGR_MAG_Disable>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	e004      	b.n	8002212 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	331c      	adds	r3, #28
 8002228:	6839      	ldr	r1, [r7, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 feaa 	bl	8002f84 <lsm303agr_mag_device_id_get>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e000      	b.n	800223e <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2232      	movs	r2, #50	; 0x32
 800227a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002290:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	42c80000 	.word	0x42c80000

080022a4 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e010      	b.n	80022dc <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	331c      	adds	r3, #28
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fd58 	bl	8002d76 <lsm303agr_mag_operating_mode_set>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	e004      	b.n	80022dc <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e010      	b.n	800231c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	331c      	adds	r3, #28
 80022fe:	2102      	movs	r1, #2
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fd38 	bl	8002d76 <lsm303agr_mag_operating_mode_set>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
 8002310:	e004      	b.n	800231c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002334:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	331c      	adds	r3, #28
 8002356:	f107 020b 	add.w	r2, r7, #11
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fd57 	bl	8002e10 <lsm303agr_mag_data_rate_get>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	e023      	b.n	80023b6 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800236e:	7afb      	ldrb	r3, [r7, #11]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d81b      	bhi.n	80023ac <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	0800238d 	.word	0x0800238d
 8002380:	08002395 	.word	0x08002395
 8002384:	0800239d 	.word	0x0800239d
 8002388:	080023a5 	.word	0x080023a5
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002390:	601a      	str	r2, [r3, #0]
      break;
 8002392:	e00f      	b.n	80023b4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002398:	601a      	str	r2, [r3, #0]
      break;
 800239a:	e00b      	b.n	80023b4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80023a0:	601a      	str	r2, [r3, #0]
      break;
 80023a2:	e007      	b.n	80023b4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4a09      	ldr	r2, [pc, #36]	; (80023cc <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80023a8:	601a      	str	r2, [r3, #0]
      break;
 80023aa:	e003      	b.n	80023b4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
 80023b0:	60fb      	str	r3, [r7, #12]
      break;
 80023b2:	bf00      	nop
  }

  return ret;
 80023b4:	68fb      	ldr	r3, [r7, #12]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	41200000 	.word	0x41200000
 80023c4:	41a00000 	.word	0x41a00000
 80023c8:	42480000 	.word	0x42480000
 80023cc:	42c80000 	.word	0x42c80000

080023d0 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80023dc:	edd7 7a00 	vldr	s15, [r7]
 80023e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ec:	d801      	bhi.n	80023f2 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 80023ee:	2300      	movs	r3, #0
 80023f0:	e016      	b.n	8002420 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80023f2:	edd7 7a00 	vldr	s15, [r7]
 80023f6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80023fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d801      	bhi.n	8002408 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002404:	2301      	movs	r3, #1
 8002406:	e00b      	b.n	8002420 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002408:	edd7 7a00 	vldr	s15, [r7]
 800240c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002448 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	d801      	bhi.n	800241e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800241a:	2302      	movs	r3, #2
 800241c:	e000      	b.n	8002420 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800241e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002420:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	331c      	adds	r3, #28
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fcc9 	bl	8002dc2 <lsm303agr_mag_data_rate_set>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
 800243a:	e000      	b.n	800243e <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	42480000 	.word	0x42480000

0800244c <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2232      	movs	r2, #50	; 0x32
 800245a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	331c      	adds	r3, #28
 8002490:	f107 0208 	add.w	r2, r7, #8
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fd18 	bl	8002ecc <lsm303agr_magnetic_raw_get>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	e00c      	b.n	80024c2 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80024a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80024b0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80024b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	331c      	adds	r3, #28
 80024d8:	f107 0210 	add.w	r2, r7, #16
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fcf4 	bl	8002ecc <lsm303agr_magnetic_raw_get>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	e036      	b.n	800255e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ff14 	bl	8002324 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80024fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002508:	edd7 7a03 	vldr	s15, [r7, #12]
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002514:	ee17 2a90 	vmov	r2, s15
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800251c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002528:	edd7 7a03 	vldr	s15, [r7, #12]
 800252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002534:	ee17 2a90 	vmov	r2, s15
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800253c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002548:	edd7 7a03 	vldr	s15, [r7, #12]
 800254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002554:	ee17 2a90 	vmov	r2, s15
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	331c      	adds	r3, #28
 800257a:	f107 020b 	add.w	r2, r7, #11
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fb4f 	bl	8002c24 <lsm303agr_xl_full_scale_get>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	e023      	b.n	80025da <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d81b      	bhi.n	80025d0 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8002598:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	080025b1 	.word	0x080025b1
 80025a4:	080025b9 	.word	0x080025b9
 80025a8:	080025c1 	.word	0x080025c1
 80025ac:	080025c9 	.word	0x080025c9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80025b4:	601a      	str	r2, [r3, #0]
      break;
 80025b6:	e00f      	b.n	80025d8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80025bc:	601a      	str	r2, [r3, #0]
      break;
 80025be:	e00b      	b.n	80025d8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80025c4:	601a      	str	r2, [r3, #0]
      break;
 80025c6:	e007      	b.n	80025d8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80025cc:	601a      	str	r2, [r3, #0]
      break;
 80025ce:	e003      	b.n	80025d8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	60fb      	str	r3, [r7, #12]
      break;
 80025d6:	bf00      	nop
  }

  return ret;
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	3f7ae148 	.word	0x3f7ae148
 80025e8:	3ff9999a 	.word	0x3ff9999a
 80025ec:	4079999a 	.word	0x4079999a
 80025f0:	413b851f 	.word	0x413b851f

080025f4 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	331c      	adds	r3, #28
 8002606:	f107 020b 	add.w	r2, r7, #11
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fb09 	bl	8002c24 <lsm303agr_xl_full_scale_get>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	e023      	b.n	8002666 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800261e:	7afb      	ldrb	r3, [r7, #11]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d81b      	bhi.n	800265c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	0800263d 	.word	0x0800263d
 8002630:	08002645 	.word	0x08002645
 8002634:	0800264d 	.word	0x0800264d
 8002638:	08002655 	.word	0x08002655
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8002640:	601a      	str	r2, [r3, #0]
      break;
 8002642:	e00f      	b.n	8002664 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8002648:	601a      	str	r2, [r3, #0]
      break;
 800264a:	e00b      	b.n	8002664 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8002650:	601a      	str	r2, [r3, #0]
      break;
 8002652:	e007      	b.n	8002664 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8002658:	601a      	str	r2, [r3, #0]
      break;
 800265a:	e003      	b.n	8002664 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
 8002660:	60fb      	str	r3, [r7, #12]
      break;
 8002662:	bf00      	nop
  }

  return ret;
 8002664:	68fb      	ldr	r3, [r7, #12]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	4079999a 	.word	0x4079999a
 8002674:	40fa3d71 	.word	0x40fa3d71
 8002678:	417a147b 	.word	0x417a147b
 800267c:	423b999a 	.word	0x423b999a

08002680 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	331c      	adds	r3, #28
 8002692:	f107 020b 	add.w	r2, r7, #11
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fac3 	bl	8002c24 <lsm303agr_xl_full_scale_get>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	e023      	b.n	80026f2 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d81b      	bhi.n	80026e8 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80026b0:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026d1 	.word	0x080026d1
 80026c0:	080026d9 	.word	0x080026d9
 80026c4:	080026e1 	.word	0x080026e1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80026cc:	601a      	str	r2, [r3, #0]
      break;
 80026ce:	e00f      	b.n	80026f0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80026d4:	601a      	str	r2, [r3, #0]
      break;
 80026d6:	e00b      	b.n	80026f0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80026dc:	601a      	str	r2, [r3, #0]
      break;
 80026de:	e007      	b.n	80026f0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4a09      	ldr	r2, [pc, #36]	; (8002708 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 80026e4:	601a      	str	r2, [r3, #0]
      break;
 80026e6:	e003      	b.n	80026f0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ec:	60fb      	str	r3, [r7, #12]
      break;
 80026ee:	bf00      	nop
  }

  return ret;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	417a147b 	.word	0x417a147b
 8002700:	41fa147b 	.word	0x41fa147b
 8002704:	427a147b 	.word	0x427a147b
 8002708:	433b947b 	.word	0x433b947b

0800270c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002718:	edd7 7a00 	vldr	s15, [r7]
 800271c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	d801      	bhi.n	800272e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800272a:	2301      	movs	r3, #1
 800272c:	e037      	b.n	800279e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800272e:	edd7 7a00 	vldr	s15, [r7]
 8002732:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d801      	bhi.n	8002744 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002740:	2302      	movs	r3, #2
 8002742:	e02c      	b.n	800279e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002744:	edd7 7a00 	vldr	s15, [r7]
 8002748:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800274c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002754:	d801      	bhi.n	800275a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002756:	2303      	movs	r3, #3
 8002758:	e021      	b.n	800279e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800275a:	edd7 7a00 	vldr	s15, [r7]
 800275e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80027c4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8002762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	d801      	bhi.n	8002770 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 800276c:	2304      	movs	r3, #4
 800276e:	e016      	b.n	800279e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002770:	edd7 7a00 	vldr	s15, [r7]
 8002774:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80027c8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d801      	bhi.n	8002786 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002782:	2305      	movs	r3, #5
 8002784:	e00b      	b.n	800279e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002786:	edd7 7a00 	vldr	s15, [r7]
 800278a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80027cc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800278e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002796:	d801      	bhi.n	800279c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002798:	2306      	movs	r3, #6
 800279a:	e000      	b.n	800279e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800279c:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800279e:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	331c      	adds	r3, #28
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f993 	bl	8002ad4 <lsm303agr_xl_data_rate_set>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
 80027b8:	e000      	b.n	80027bc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	42480000 	.word	0x42480000
 80027c8:	42c80000 	.word	0x42c80000
 80027cc:	43480000 	.word	0x43480000

080027d0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80027dc:	edd7 7a00 	vldr	s15, [r7]
 80027e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ec:	d801      	bhi.n	80027f2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e037      	b.n	8002862 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80027f2:	edd7 7a00 	vldr	s15, [r7]
 80027f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	d801      	bhi.n	8002808 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002804:	2302      	movs	r3, #2
 8002806:	e02c      	b.n	8002862 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002808:	edd7 7a00 	vldr	s15, [r7]
 800280c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	d801      	bhi.n	800281e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800281a:	2303      	movs	r3, #3
 800281c:	e021      	b.n	8002862 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800281e:	edd7 7a00 	vldr	s15, [r7]
 8002822:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	d801      	bhi.n	8002834 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002830:	2304      	movs	r3, #4
 8002832:	e016      	b.n	8002862 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002834:	edd7 7a00 	vldr	s15, [r7]
 8002838:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800287c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 800283c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	d801      	bhi.n	800284a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002846:	2305      	movs	r3, #5
 8002848:	e00b      	b.n	8002862 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800284a:	edd7 7a00 	vldr	s15, [r7]
 800284e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002880 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8002852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	d801      	bhi.n	8002860 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 800285c:	2306      	movs	r3, #6
 800285e:	e000      	b.n	8002862 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002860:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	42480000 	.word	0x42480000
 800287c:	42c80000 	.word	0x42c80000
 8002880:	43480000 	.word	0x43480000

08002884 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	461a      	mov	r2, r3
 8002890:	460b      	mov	r3, r1
 8002892:	72fb      	strb	r3, [r7, #11]
 8002894:	4613      	mov	r3, r2
 8002896:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10e      	bne.n	80028c2 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	695c      	ldr	r4, [r3, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	7b1b      	ldrb	r3, [r3, #12]
 80028ac:	b298      	uxth	r0, r3
 80028ae:	7afb      	ldrb	r3, [r7, #11]
 80028b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	b299      	uxth	r1, r3
 80028b8:	893b      	ldrh	r3, [r7, #8]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	47a0      	blx	r4
 80028be:	4603      	mov	r3, r0
 80028c0:	e00d      	b.n	80028de <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	695c      	ldr	r4, [r3, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	7b1b      	ldrb	r3, [r3, #12]
 80028ca:	b298      	uxth	r0, r3
 80028cc:	7afb      	ldrb	r3, [r7, #11]
 80028ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	b299      	uxth	r1, r3
 80028d6:	893b      	ldrh	r3, [r7, #8]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	47a0      	blx	r4
 80028dc:	4603      	mov	r3, r0
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}

080028e6 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80028e6:	b590      	push	{r4, r7, lr}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	461a      	mov	r2, r3
 80028f2:	460b      	mov	r3, r1
 80028f4:	72fb      	strb	r3, [r7, #11]
 80028f6:	4613      	mov	r3, r2
 80028f8:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10e      	bne.n	8002924 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	691c      	ldr	r4, [r3, #16]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	7b1b      	ldrb	r3, [r3, #12]
 800290e:	b298      	uxth	r0, r3
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002916:	b2db      	uxtb	r3, r3
 8002918:	b299      	uxth	r1, r3
 800291a:	893b      	ldrh	r3, [r7, #8]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	47a0      	blx	r4
 8002920:	4603      	mov	r3, r0
 8002922:	e00d      	b.n	8002940 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	691c      	ldr	r4, [r3, #16]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	7b1b      	ldrb	r3, [r3, #12]
 800292c:	b298      	uxth	r0, r3
 800292e:	7afb      	ldrb	r3, [r7, #11]
 8002930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002934:	b2db      	uxtb	r3, r3
 8002936:	b299      	uxth	r1, r3
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	47a0      	blx	r4
 800293e:	4603      	mov	r3, r0
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd90      	pop	{r4, r7, pc}

08002948 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	461a      	mov	r2, r3
 8002954:	460b      	mov	r3, r1
 8002956:	72fb      	strb	r3, [r7, #11]
 8002958:	4613      	mov	r3, r2
 800295a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10e      	bne.n	8002986 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	695c      	ldr	r4, [r3, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	7b1b      	ldrb	r3, [r3, #12]
 8002970:	b298      	uxth	r0, r3
 8002972:	7afb      	ldrb	r3, [r7, #11]
 8002974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002978:	b2db      	uxtb	r3, r3
 800297a:	b299      	uxth	r1, r3
 800297c:	893b      	ldrh	r3, [r7, #8]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	47a0      	blx	r4
 8002982:	4603      	mov	r3, r0
 8002984:	e00d      	b.n	80029a2 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	695c      	ldr	r4, [r3, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	7b1b      	ldrb	r3, [r3, #12]
 800298e:	b298      	uxth	r0, r3
 8002990:	7afb      	ldrb	r3, [r7, #11]
 8002992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002996:	b2db      	uxtb	r3, r3
 8002998:	b299      	uxth	r1, r3
 800299a:	893b      	ldrh	r3, [r7, #8]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	47a0      	blx	r4
 80029a0:	4603      	mov	r3, r0
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}

080029aa <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80029aa:	b590      	push	{r4, r7, lr}
 80029ac:	b087      	sub	sp, #28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	461a      	mov	r2, r3
 80029b6:	460b      	mov	r3, r1
 80029b8:	72fb      	strb	r3, [r7, #11]
 80029ba:	4613      	mov	r3, r2
 80029bc:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10e      	bne.n	80029e8 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	691c      	ldr	r4, [r3, #16]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	7b1b      	ldrb	r3, [r3, #12]
 80029d2:	b298      	uxth	r0, r3
 80029d4:	7afb      	ldrb	r3, [r7, #11]
 80029d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	b299      	uxth	r1, r3
 80029de:	893b      	ldrh	r3, [r7, #8]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	47a0      	blx	r4
 80029e4:	4603      	mov	r3, r0
 80029e6:	e00d      	b.n	8002a04 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	691c      	ldr	r4, [r3, #16]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	7b1b      	ldrb	r3, [r3, #12]
 80029f0:	b298      	uxth	r0, r3
 80029f2:	7afb      	ldrb	r3, [r7, #11]
 80029f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	b299      	uxth	r1, r3
 80029fc:	893b      	ldrh	r3, [r7, #8]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	47a0      	blx	r4
 8002a02:	4603      	mov	r3, r0
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd90      	pop	{r4, r7, pc}

08002a0c <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	461a      	mov	r2, r3
 8002a18:	460b      	mov	r3, r1
 8002a1a:	72fb      	strb	r3, [r7, #11]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685c      	ldr	r4, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6898      	ldr	r0, [r3, #8]
 8002a28:	893b      	ldrh	r3, [r7, #8]
 8002a2a:	7af9      	ldrb	r1, [r7, #11]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	47a0      	blx	r4
 8002a30:	6178      	str	r0, [r7, #20]
  return ret;
 8002a32:	697b      	ldr	r3, [r7, #20]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd90      	pop	{r4, r7, pc}

08002a3c <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	461a      	mov	r2, r3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	72fb      	strb	r3, [r7, #11]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681c      	ldr	r4, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6898      	ldr	r0, [r3, #8]
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	7af9      	ldrb	r1, [r7, #11]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	47a0      	blx	r4
 8002a60:	6178      	str	r0, [r7, #20]
  return ret;
 8002a62:	697b      	ldr	r3, [r7, #20]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}

08002a6c <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002a76:	f107 020c 	add.w	r2, r7, #12
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffc4 	bl	8002a0c <lsm303agr_read_reg>
 8002a84:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002a8c:	f107 0210 	add.w	r2, r7, #16
 8002a90:	2301      	movs	r3, #1
 8002a92:	2123      	movs	r1, #35	; 0x23
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ffb9 	bl	8002a0c <lsm303agr_read_reg>
 8002a9a:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8002a9c:	7b3b      	ldrb	r3, [r7, #12]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e00c      	b.n	8002aca <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8002ab0:	7c3b      	ldrb	r3, [r7, #16]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e002      	b.n	8002aca <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002aca:	697b      	ldr	r3, [r7, #20]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002ae0:	f107 0208 	add.w	r2, r7, #8
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff8f 	bl	8002a0c <lsm303agr_read_reg>
 8002aee:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	7a3b      	ldrb	r3, [r7, #8]
 8002b00:	f362 1307 	bfi	r3, r2, #4, #4
 8002b04:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002b06:	f107 0208 	add.w	r2, r7, #8
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	2120      	movs	r1, #32
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ff94 	bl	8002a3c <lsm303agr_write_reg>
 8002b14:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002b2a:	f107 0208 	add.w	r2, r7, #8
 8002b2e:	2301      	movs	r3, #1
 8002b30:	2120      	movs	r1, #32
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff6a 	bl	8002a0c <lsm303agr_read_reg>
 8002b38:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8002b3a:	7a3b      	ldrb	r3, [r7, #8]
 8002b3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b09      	cmp	r3, #9
 8002b44:	d83e      	bhi.n	8002bc4 <lsm303agr_xl_data_rate_get+0xa4>
 8002b46:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <lsm303agr_xl_data_rate_get+0x2c>)
 8002b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4c:	08002b75 	.word	0x08002b75
 8002b50:	08002b7d 	.word	0x08002b7d
 8002b54:	08002b85 	.word	0x08002b85
 8002b58:	08002b8d 	.word	0x08002b8d
 8002b5c:	08002b95 	.word	0x08002b95
 8002b60:	08002b9d 	.word	0x08002b9d
 8002b64:	08002ba5 	.word	0x08002ba5
 8002b68:	08002bad 	.word	0x08002bad
 8002b6c:	08002bb5 	.word	0x08002bb5
 8002b70:	08002bbd 	.word	0x08002bbd
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
      break;
 8002b7a:	e027      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
      break;
 8002b82:	e023      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]
      break;
 8002b8a:	e01f      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2203      	movs	r2, #3
 8002b90:	701a      	strb	r2, [r3, #0]
      break;
 8002b92:	e01b      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2204      	movs	r2, #4
 8002b98:	701a      	strb	r2, [r3, #0]
      break;
 8002b9a:	e017      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	701a      	strb	r2, [r3, #0]
      break;
 8002ba2:	e013      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2206      	movs	r2, #6
 8002ba8:	701a      	strb	r2, [r3, #0]
      break;
 8002baa:	e00f      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2207      	movs	r2, #7
 8002bb0:	701a      	strb	r2, [r3, #0]
      break;
 8002bb2:	e00b      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	701a      	strb	r2, [r3, #0]
      break;
 8002bba:	e007      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2209      	movs	r2, #9
 8002bc0:	701a      	strb	r2, [r3, #0]
      break;
 8002bc2:	e003      	b.n	8002bcc <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
      break;
 8002bca:	bf00      	nop
  }

  return ret;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop

08002bd8 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002be4:	f107 0208 	add.w	r2, r7, #8
 8002be8:	2301      	movs	r3, #1
 8002bea:	2123      	movs	r1, #35	; 0x23
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff0d 	bl	8002a0c <lsm303agr_read_reg>
 8002bf2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10f      	bne.n	8002c1a <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	7a3b      	ldrb	r3, [r7, #8]
 8002c04:	f362 1305 	bfi	r3, r2, #4, #2
 8002c08:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002c0a:	f107 0208 	add.w	r2, r7, #8
 8002c0e:	2301      	movs	r3, #1
 8002c10:	2123      	movs	r1, #35	; 0x23
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ff12 	bl	8002a3c <lsm303agr_write_reg>
 8002c18:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002c2e:	f107 0208 	add.w	r2, r7, #8
 8002c32:	2301      	movs	r3, #1
 8002c34:	2123      	movs	r1, #35	; 0x23
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fee8 	bl	8002a0c <lsm303agr_read_reg>
 8002c3c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8002c3e:	7a3b      	ldrb	r3, [r7, #8]
 8002c40:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d81a      	bhi.n	8002c80 <lsm303agr_xl_full_scale_get+0x5c>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <lsm303agr_xl_full_scale_get+0x2c>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c69 	.word	0x08002c69
 8002c58:	08002c71 	.word	0x08002c71
 8002c5c:	08002c79 	.word	0x08002c79
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
      break;
 8002c66:	e00f      	b.n	8002c88 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
      break;
 8002c6e:	e00b      	b.n	8002c88 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
      break;
 8002c76:	e007      	b.n	8002c88 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	701a      	strb	r2, [r3, #0]
      break;
 8002c7e:	e003      	b.n	8002c88 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
      break;
 8002c86:	bf00      	nop
  }

  return ret;
 8002c88:	68fb      	ldr	r3, [r7, #12]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop

08002c94 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002ca0:	f107 0208 	add.w	r2, r7, #8
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2123      	movs	r1, #35	; 0x23
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff feaf 	bl	8002a0c <lsm303agr_read_reg>
 8002cae:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10f      	bne.n	8002cd6 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	7a3b      	ldrb	r3, [r7, #8]
 8002cc0:	f362 13c7 	bfi	r3, r2, #7, #1
 8002cc4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002cc6:	f107 0208 	add.w	r2, r7, #8
 8002cca:	2301      	movs	r3, #1
 8002ccc:	2123      	movs	r1, #35	; 0x23
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff feb4 	bl	8002a3c <lsm303agr_write_reg>
 8002cd4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8002cea:	f107 020c 	add.w	r2, r7, #12
 8002cee:	2306      	movs	r3, #6
 8002cf0:	2128      	movs	r1, #40	; 0x28
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fe8a 	bl	8002a0c <lsm303agr_read_reg>
 8002cf8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002cfa:	7b7b      	ldrb	r3, [r7, #13]
 8002cfc:	b21a      	sxth	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	7b3b      	ldrb	r3, [r7, #12]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	3302      	adds	r3, #2
 8002d22:	b212      	sxth	r2, r2
 8002d24:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	3302      	adds	r3, #2
 8002d40:	b212      	sxth	r2, r2
 8002d42:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002d44:	7c7a      	ldrb	r2, [r7, #17]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	b212      	sxth	r2, r2
 8002d4c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	3304      	adds	r3, #4
 8002d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	7c3b      	ldrb	r3, [r7, #16]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	3304      	adds	r3, #4
 8002d68:	b212      	sxth	r2, r2
 8002d6a:	801a      	strh	r2, [r3, #0]
  return ret;
 8002d6c:	697b      	ldr	r3, [r7, #20]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002d82:	f107 0208 	add.w	r2, r7, #8
 8002d86:	2301      	movs	r3, #1
 8002d88:	2160      	movs	r1, #96	; 0x60
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fe3e 	bl	8002a0c <lsm303agr_read_reg>
 8002d90:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	7a3b      	ldrb	r3, [r7, #8]
 8002da2:	f362 0301 	bfi	r3, r2, #0, #2
 8002da6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002da8:	f107 0208 	add.w	r2, r7, #8
 8002dac:	2301      	movs	r3, #1
 8002dae:	2160      	movs	r1, #96	; 0x60
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff fe43 	bl	8002a3c <lsm303agr_write_reg>
 8002db6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8002db8:	68fb      	ldr	r3, [r7, #12]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002dce:	f107 0208 	add.w	r2, r7, #8
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	2160      	movs	r1, #96	; 0x60
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fe18 	bl	8002a0c <lsm303agr_read_reg>
 8002ddc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	7a3b      	ldrb	r3, [r7, #8]
 8002dee:	f362 0383 	bfi	r3, r2, #2, #2
 8002df2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002df4:	f107 0208 	add.w	r2, r7, #8
 8002df8:	2301      	movs	r3, #1
 8002dfa:	2160      	movs	r1, #96	; 0x60
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff fe1d 	bl	8002a3c <lsm303agr_write_reg>
 8002e02:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8002e04:	68fb      	ldr	r3, [r7, #12]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002e1a:	f107 0208 	add.w	r2, r7, #8
 8002e1e:	2301      	movs	r3, #1
 8002e20:	2160      	movs	r1, #96	; 0x60
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff fdf2 	bl	8002a0c <lsm303agr_read_reg>
 8002e28:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8002e2a:	7a3b      	ldrb	r3, [r7, #8]
 8002e2c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d81a      	bhi.n	8002e6c <lsm303agr_mag_data_rate_get+0x5c>
 8002e36:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <lsm303agr_mag_data_rate_get+0x2c>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e4d 	.word	0x08002e4d
 8002e40:	08002e55 	.word	0x08002e55
 8002e44:	08002e5d 	.word	0x08002e5d
 8002e48:	08002e65 	.word	0x08002e65
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
      break;
 8002e52:	e00f      	b.n	8002e74 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
      break;
 8002e5a:	e00b      	b.n	8002e74 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	701a      	strb	r2, [r3, #0]
      break;
 8002e62:	e007      	b.n	8002e74 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2203      	movs	r2, #3
 8002e68:	701a      	strb	r2, [r3, #0]
      break;
 8002e6a:	e003      	b.n	8002e74 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
      break;
 8002e72:	bf00      	nop
  }

  return ret;
 8002e74:	68fb      	ldr	r3, [r7, #12]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop

08002e80 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002e8c:	f107 0208 	add.w	r2, r7, #8
 8002e90:	2301      	movs	r3, #1
 8002e92:	2162      	movs	r1, #98	; 0x62
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fdb9 	bl	8002a0c <lsm303agr_read_reg>
 8002e9a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	7a3b      	ldrb	r3, [r7, #8]
 8002eac:	f362 1304 	bfi	r3, r2, #4, #1
 8002eb0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002eb2:	f107 0208 	add.w	r2, r7, #8
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	2162      	movs	r1, #98	; 0x62
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff fdbe 	bl	8002a3c <lsm303agr_write_reg>
 8002ec0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8002ed6:	f107 020c 	add.w	r2, r7, #12
 8002eda:	2306      	movs	r3, #6
 8002edc:	2168      	movs	r1, #104	; 0x68
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fd94 	bl	8002a0c <lsm303agr_read_reg>
 8002ee4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002ee6:	7b7b      	ldrb	r3, [r7, #13]
 8002ee8:	b21a      	sxth	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	7b3b      	ldrb	r3, [r7, #12]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b21a      	sxth	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	b212      	sxth	r2, r2
 8002f10:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	3302      	adds	r3, #2
 8002f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	b212      	sxth	r2, r2
 8002f2e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002f30:	7c7a      	ldrb	r2, [r7, #17]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	3304      	adds	r3, #4
 8002f36:	b212      	sxth	r2, r2
 8002f38:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	7c3b      	ldrb	r3, [r7, #16]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	3304      	adds	r3, #4
 8002f54:	b212      	sxth	r2, r2
 8002f56:	801a      	strh	r2, [r3, #0]
  return ret;
 8002f58:	697b      	ldr	r3, [r7, #20]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	210f      	movs	r1, #15
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fd4a 	bl	8002a0c <lsm303agr_read_reg>
 8002f78:	60f8      	str	r0, [r7, #12]
  return ret;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8002f8e:	2301      	movs	r3, #1
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	214f      	movs	r1, #79	; 0x4f
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff fd39 	bl	8002a0c <lsm303agr_read_reg>
 8002f9a:	60f8      	str	r0, [r7, #12]
  return ret;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002fb2:	f107 0208 	add.w	r2, r7, #8
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	2162      	movs	r1, #98	; 0x62
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fd26 	bl	8002a0c <lsm303agr_read_reg>
 8002fc0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10f      	bne.n	8002fe8 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	7a3b      	ldrb	r3, [r7, #8]
 8002fd2:	f362 0341 	bfi	r3, r2, #1, #1
 8002fd6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002fd8:	f107 0208 	add.w	r2, r7, #8
 8002fdc:	2301      	movs	r3, #1
 8002fde:	2162      	movs	r1, #98	; 0x62
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fd2b 	bl	8002a3c <lsm303agr_write_reg>
 8002fe6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8002ffe:	f107 0208 	add.w	r2, r7, #8
 8003002:	2301      	movs	r3, #1
 8003004:	212e      	movs	r1, #46	; 0x2e
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff fd00 	bl	8002a0c <lsm303agr_read_reg>
 800300c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10f      	bne.n	8003034 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	b2da      	uxtb	r2, r3
 800301c:	7a3b      	ldrb	r3, [r7, #8]
 800301e:	f362 1387 	bfi	r3, r2, #6, #2
 8003022:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003024:	f107 0208 	add.w	r2, r7, #8
 8003028:	2301      	movs	r3, #1
 800302a:	212e      	movs	r1, #46	; 0x2e
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff fd05 	bl	8002a3c <lsm303agr_write_reg>
 8003032:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003034:	68fb      	ldr	r3, [r7, #12]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800304a:	f107 0208 	add.w	r2, r7, #8
 800304e:	2301      	movs	r3, #1
 8003050:	2162      	movs	r1, #98	; 0x62
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fcda 	bl	8002a0c <lsm303agr_read_reg>
 8003058:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10f      	bne.n	8003080 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	b2da      	uxtb	r2, r3
 8003068:	7a3b      	ldrb	r3, [r7, #8]
 800306a:	f362 1345 	bfi	r3, r2, #5, #1
 800306e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003070:	f107 0208 	add.w	r2, r7, #8
 8003074:	2301      	movs	r3, #1
 8003076:	2162      	movs	r1, #98	; 0x62
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff fcdf 	bl	8002a3c <lsm303agr_write_reg>
 800307e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003080:	68fb      	ldr	r3, [r7, #12]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d103      	bne.n	80030a8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e04d      	b.n	8003144 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	7b1a      	ldrb	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <LSM6DSL_RegisterBusIO+0xc4>)
 80030e4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <LSM6DSL_RegisterBusIO+0xc8>)
 80030ea:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e020      	b.n	8003144 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4798      	blx	r3
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e016      	b.n	8003144 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d112      	bne.n	8003144 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10d      	bne.n	8003144 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003128:	230c      	movs	r3, #12
 800312a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	461a      	mov	r2, r3
 8003130:	2112      	movs	r1, #18
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fd2d 	bl	8003b92 <LSM6DSL_Write_Reg>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003144:	68fb      	ldr	r3, [r7, #12]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	08004001 	.word	0x08004001
 8003154:	08004037 	.word	0x08004037

08003158 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	331c      	adds	r3, #28
 8003164:	2101      	movs	r1, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fa59 	bl	800461e <lsm6dsl_auto_increment_set>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	e054      	b.n	8003222 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	331c      	adds	r3, #28
 800317c:	2101      	movs	r1, #1
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f980 	bl	8004484 <lsm6dsl_block_data_update_set>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	e048      	b.n	8003222 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	331c      	adds	r3, #28
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f001 fa67 	bl	800466a <lsm6dsl_fifo_mode_set>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295
 80031a6:	e03c      	b.n	8003222 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2204      	movs	r2, #4
 80031ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	331c      	adds	r3, #28
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 ffe6 	bl	8004188 <lsm6dsl_xl_data_rate_set>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e02c      	b.n	8003222 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	331c      	adds	r3, #28
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 ff7c 	bl	80040cc <lsm6dsl_xl_full_scale_set>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
 80031de:	e020      	b.n	8003222 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2204      	movs	r2, #4
 80031e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	331c      	adds	r3, #28
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 f8c0 	bl	8004374 <lsm6dsl_gy_data_rate_set>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295
 80031fe:	e010      	b.n	8003222 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	331c      	adds	r3, #28
 8003204:	2106      	movs	r1, #6
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f84c 	bl	80042a4 <lsm6dsl_gy_full_scale_set>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	e004      	b.n	8003222 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f888 	bl	8003348 <LSM6DSL_ACC_Disable>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
 8003242:	e015      	b.n	8003270 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa9a 	bl	800377e <LSM6DSL_GYRO_Disable>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
 8003254:	e00c      	b.n	8003270 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	331c      	adds	r3, #28
 8003286:	6839      	ldr	r1, [r7, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f9b7 	bl	80045fc <lsm6dsl_device_id_get>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
 8003298:	e000      	b.n	800329c <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2201      	movs	r2, #1
 80032b8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80032cc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2210      	movs	r2, #16
 80032d2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	4a07      	ldr	r2, [pc, #28]	; (80032fc <LSM6DSL_GetCapabilities+0x58>)
 80032de:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4a06      	ldr	r2, [pc, #24]	; (80032fc <LSM6DSL_GetCapabilities+0x58>)
 80032e4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	45d02000 	.word	0x45d02000

08003300 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e014      	b.n	8003340 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f103 021c 	add.w	r2, r3, #28
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f000 ff2f 	bl	8004188 <lsm6dsl_xl_data_rate_set>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
 8003334:	e004      	b.n	8003340 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e01f      	b.n	800339e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f103 021c 	add.w	r2, r3, #28
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	332b      	adds	r3, #43	; 0x2b
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f000 ff32 	bl	80041d4 <lsm6dsl_xl_data_rate_get>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
 800337a:	e010      	b.n	800339e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	331c      	adds	r3, #28
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f000 ff00 	bl	8004188 <lsm6dsl_xl_data_rate_set>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	e004      	b.n	800339e <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	331c      	adds	r3, #28
 80033ba:	f107 020b 	add.w	r2, r7, #11
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fea9 	bl	8004118 <lsm6dsl_xl_full_scale_get>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
 80033d0:	e023      	b.n	800341a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80033d2:	7afb      	ldrb	r3, [r7, #11]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d81b      	bhi.n	8003410 <LSM6DSL_ACC_GetSensitivity+0x68>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <LSM6DSL_ACC_GetSensitivity+0x38>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	080033f1 	.word	0x080033f1
 80033e4:	08003409 	.word	0x08003409
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003401 	.word	0x08003401
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4a0c      	ldr	r2, [pc, #48]	; (8003424 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80033f4:	601a      	str	r2, [r3, #0]
      break;
 80033f6:	e00f      	b.n	8003418 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <LSM6DSL_ACC_GetSensitivity+0x80>)
 80033fc:	601a      	str	r2, [r3, #0]
      break;
 80033fe:	e00b      	b.n	8003418 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003404:	601a      	str	r2, [r3, #0]
      break;
 8003406:	e007      	b.n	8003418 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4a09      	ldr	r2, [pc, #36]	; (8003430 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800340c:	601a      	str	r2, [r3, #0]
      break;
 800340e:	e003      	b.n	8003418 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	60fb      	str	r3, [r7, #12]
      break;
 8003416:	bf00      	nop
  }

  return ret;
 8003418:	68fb      	ldr	r3, [r7, #12]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	3d79db23 	.word	0x3d79db23
 8003428:	3df9db23 	.word	0x3df9db23
 800342c:	3e79db23 	.word	0x3e79db23
 8003430:	3ef9db23 	.word	0x3ef9db23

08003434 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	331c      	adds	r3, #28
 8003446:	f107 020b 	add.w	r2, r7, #11
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fec1 	bl	80041d4 <lsm6dsl_xl_data_rate_get>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
 800345c:	e054      	b.n	8003508 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800345e:	7afb      	ldrb	r3, [r7, #11]
 8003460:	2b0b      	cmp	r3, #11
 8003462:	d84c      	bhi.n	80034fe <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	0800349d 	.word	0x0800349d
 8003470:	080034af 	.word	0x080034af
 8003474:	080034b7 	.word	0x080034b7
 8003478:	080034bf 	.word	0x080034bf
 800347c:	080034c7 	.word	0x080034c7
 8003480:	080034cf 	.word	0x080034cf
 8003484:	080034d7 	.word	0x080034d7
 8003488:	080034df 	.word	0x080034df
 800348c:	080034e7 	.word	0x080034e7
 8003490:	080034ef 	.word	0x080034ef
 8003494:	080034f7 	.word	0x080034f7
 8003498:	080034a7 	.word	0x080034a7
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
      break;
 80034a4:	e02f      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80034aa:	601a      	str	r2, [r3, #0]
      break;
 80034ac:	e02b      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80034b2:	601a      	str	r2, [r3, #0]
      break;
 80034b4:	e027      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	4a17      	ldr	r2, [pc, #92]	; (8003518 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 80034ba:	601a      	str	r2, [r3, #0]
      break;
 80034bc:	e023      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	4a16      	ldr	r2, [pc, #88]	; (800351c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80034c2:	601a      	str	r2, [r3, #0]
      break;
 80034c4:	e01f      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	4a15      	ldr	r2, [pc, #84]	; (8003520 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80034ca:	601a      	str	r2, [r3, #0]
      break;
 80034cc:	e01b      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	4a14      	ldr	r2, [pc, #80]	; (8003524 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 80034d2:	601a      	str	r2, [r3, #0]
      break;
 80034d4:	e017      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	4a13      	ldr	r2, [pc, #76]	; (8003528 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 80034da:	601a      	str	r2, [r3, #0]
      break;
 80034dc:	e013      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 80034e2:	601a      	str	r2, [r3, #0]
      break;
 80034e4:	e00f      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	4a11      	ldr	r2, [pc, #68]	; (8003530 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 80034ea:	601a      	str	r2, [r3, #0]
      break;
 80034ec:	e00b      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	4a10      	ldr	r2, [pc, #64]	; (8003534 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 80034f2:	601a      	str	r2, [r3, #0]
      break;
 80034f4:	e007      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 80034fa:	601a      	str	r2, [r3, #0]
      break;
 80034fc:	e003      	b.n	8003506 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	60fb      	str	r3, [r7, #12]
      break;
 8003504:	bf00      	nop
  }

  return ret;
 8003506:	68fb      	ldr	r3, [r7, #12]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	3fcccccd 	.word	0x3fcccccd
 8003514:	41480000 	.word	0x41480000
 8003518:	41d00000 	.word	0x41d00000
 800351c:	42500000 	.word	0x42500000
 8003520:	42d00000 	.word	0x42d00000
 8003524:	43500000 	.word	0x43500000
 8003528:	43d00000 	.word	0x43d00000
 800352c:	44504000 	.word	0x44504000
 8003530:	44cf8000 	.word	0x44cf8000
 8003534:	45502000 	.word	0x45502000
 8003538:	45d02000 	.word	0x45d02000

0800353c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800354e:	2b01      	cmp	r3, #1
 8003550:	d106      	bne.n	8003560 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003552:	ed97 0a00 	vldr	s0, [r7]
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fb36 	bl	8003bc8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800355c:	4603      	mov	r3, r0
 800355e:	e005      	b.n	800356c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003560:	ed97 0a00 	vldr	s0, [r7]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fbbb 	bl	8003ce0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800356a:	4603      	mov	r3, r0
  }
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	331c      	adds	r3, #28
 8003586:	f107 020b 	add.w	r2, r7, #11
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fdc3 	bl	8004118 <lsm6dsl_xl_full_scale_get>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003598:	f04f 33ff 	mov.w	r3, #4294967295
 800359c:	e023      	b.n	80035e6 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d81b      	bhi.n	80035dc <LSM6DSL_ACC_GetFullScale+0x68>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <LSM6DSL_ACC_GetFullScale+0x38>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035d5 	.word	0x080035d5
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035cd 	.word	0x080035cd
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2202      	movs	r2, #2
 80035c0:	601a      	str	r2, [r3, #0]
      break;
 80035c2:	e00f      	b.n	80035e4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2204      	movs	r2, #4
 80035c8:	601a      	str	r2, [r3, #0]
      break;
 80035ca:	e00b      	b.n	80035e4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2208      	movs	r2, #8
 80035d0:	601a      	str	r2, [r3, #0]
      break;
 80035d2:	e007      	b.n	80035e4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2210      	movs	r2, #16
 80035d8:	601a      	str	r2, [r3, #0]
      break;
 80035da:	e003      	b.n	80035e4 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295
 80035e0:	60fb      	str	r3, [r7, #12]
      break;
 80035e2:	bf00      	nop
  }

  return ret;
 80035e4:	68fb      	ldr	r3, [r7, #12]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop

080035f0 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	dd0b      	ble.n	8003618 <LSM6DSL_ACC_SetFullScale+0x28>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b04      	cmp	r3, #4
 8003604:	dd06      	ble.n	8003614 <LSM6DSL_ACC_SetFullScale+0x24>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b08      	cmp	r3, #8
 800360a:	dc01      	bgt.n	8003610 <LSM6DSL_ACC_SetFullScale+0x20>
 800360c:	2303      	movs	r3, #3
 800360e:	e004      	b.n	800361a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003610:	2301      	movs	r3, #1
 8003612:	e002      	b.n	800361a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003614:	2302      	movs	r3, #2
 8003616:	e000      	b.n	800361a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003618:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800361a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	331c      	adds	r3, #28
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fd51 	bl	80040cc <lsm6dsl_xl_full_scale_set>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8003630:	f04f 33ff 	mov.w	r3, #4294967295
 8003634:	e000      	b.n	8003638 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	331c      	adds	r3, #28
 800364e:	f107 0208 	add.w	r2, r7, #8
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f000 ff86 	bl	8004566 <lsm6dsl_acceleration_raw_get>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
 8003664:	e00c      	b.n	8003680 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003666:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800366e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003676:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	331c      	adds	r3, #28
 800369c:	f107 0210 	add.w	r2, r7, #16
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 ff5f 	bl	8004566 <lsm6dsl_acceleration_raw_get>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295
 80036b2:	e03c      	b.n	800372e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80036b4:	f107 030c 	add.w	r3, r7, #12
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fe74 	bl	80033a8 <LSM6DSL_ACC_GetSensitivity>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	e030      	b.n	800372e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80036cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80036d0:	ee07 3a90 	vmov	s15, r3
 80036d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e4:	ee17 2a90 	vmov	r2, s15
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80036ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003704:	ee17 2a90 	vmov	r2, s15
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800370c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003718:	edd7 7a03 	vldr	s15, [r7, #12]
 800371c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003724:	ee17 2a90 	vmov	r2, s15
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	e014      	b.n	8003776 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f103 021c 	add.w	r2, r3, #28
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f000 fe0a 	bl	8004374 <lsm6dsl_gy_data_rate_set>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	e004      	b.n	8003776 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e01f      	b.n	80037d4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f103 021c 	add.w	r2, r3, #28
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	332c      	adds	r3, #44	; 0x2c
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f000 fe0d 	bl	80043c0 <lsm6dsl_gy_data_rate_get>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
 80037b0:	e010      	b.n	80037d4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	331c      	adds	r3, #28
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fddb 	bl	8004374 <lsm6dsl_gy_data_rate_set>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295
 80037c8:	e004      	b.n	80037d4 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	331c      	adds	r3, #28
 80037ee:	f107 020b 	add.w	r2, r7, #11
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fd7b 	bl	80042f0 <lsm6dsl_gy_full_scale_get>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	e02d      	b.n	8003862 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003806:	7afb      	ldrb	r3, [r7, #11]
 8003808:	2b06      	cmp	r3, #6
 800380a:	d825      	bhi.n	8003858 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003839 	.word	0x08003839
 8003818:	08003831 	.word	0x08003831
 800381c:	08003841 	.word	0x08003841
 8003820:	08003859 	.word	0x08003859
 8003824:	08003849 	.word	0x08003849
 8003828:	08003859 	.word	0x08003859
 800382c:	08003851 	.word	0x08003851
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4a0e      	ldr	r2, [pc, #56]	; (800386c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8003834:	601a      	str	r2, [r3, #0]
      break;
 8003836:	e013      	b.n	8003860 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800383c:	601a      	str	r2, [r3, #0]
      break;
 800383e:	e00f      	b.n	8003860 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8003844:	601a      	str	r2, [r3, #0]
      break;
 8003846:	e00b      	b.n	8003860 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800384c:	601a      	str	r2, [r3, #0]
      break;
 800384e:	e007      	b.n	8003860 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8003854:	601a      	str	r2, [r3, #0]
      break;
 8003856:	e003      	b.n	8003860 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	60fb      	str	r3, [r7, #12]
      break;
 800385e:	bf00      	nop
  }

  return ret;
 8003860:	68fb      	ldr	r3, [r7, #12]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	408c0000 	.word	0x408c0000
 8003870:	410c0000 	.word	0x410c0000
 8003874:	418c0000 	.word	0x418c0000
 8003878:	420c0000 	.word	0x420c0000
 800387c:	428c0000 	.word	0x428c0000

08003880 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	331c      	adds	r3, #28
 8003892:	f107 020b 	add.w	r2, r7, #11
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fd91 	bl	80043c0 <lsm6dsl_gy_data_rate_get>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295
 80038a8:	e04e      	b.n	8003948 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80038aa:	7afb      	ldrb	r3, [r7, #11]
 80038ac:	2b0a      	cmp	r3, #10
 80038ae:	d846      	bhi.n	800393e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038e5 	.word	0x080038e5
 80038bc:	080038ef 	.word	0x080038ef
 80038c0:	080038f7 	.word	0x080038f7
 80038c4:	080038ff 	.word	0x080038ff
 80038c8:	08003907 	.word	0x08003907
 80038cc:	0800390f 	.word	0x0800390f
 80038d0:	08003917 	.word	0x08003917
 80038d4:	0800391f 	.word	0x0800391f
 80038d8:	08003927 	.word	0x08003927
 80038dc:	0800392f 	.word	0x0800392f
 80038e0:	08003937 	.word	0x08003937
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
      break;
 80038ec:	e02b      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	4a17      	ldr	r2, [pc, #92]	; (8003950 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80038f2:	601a      	str	r2, [r3, #0]
      break;
 80038f4:	e027      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	4a16      	ldr	r2, [pc, #88]	; (8003954 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80038fa:	601a      	str	r2, [r3, #0]
      break;
 80038fc:	e023      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8003902:	601a      	str	r2, [r3, #0]
      break;
 8003904:	e01f      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 800390a:	601a      	str	r2, [r3, #0]
      break;
 800390c:	e01b      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	4a13      	ldr	r2, [pc, #76]	; (8003960 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8003912:	601a      	str	r2, [r3, #0]
      break;
 8003914:	e017      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	4a12      	ldr	r2, [pc, #72]	; (8003964 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800391a:	601a      	str	r2, [r3, #0]
      break;
 800391c:	e013      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	4a11      	ldr	r2, [pc, #68]	; (8003968 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8003922:	601a      	str	r2, [r3, #0]
      break;
 8003924:	e00f      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	4a10      	ldr	r2, [pc, #64]	; (800396c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800392a:	601a      	str	r2, [r3, #0]
      break;
 800392c:	e00b      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8003932:	601a      	str	r2, [r3, #0]
      break;
 8003934:	e007      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800393a:	601a      	str	r2, [r3, #0]
      break;
 800393c:	e003      	b.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
 8003942:	60fb      	str	r3, [r7, #12]
      break;
 8003944:	bf00      	nop
  }

  return ret;
 8003946:	68fb      	ldr	r3, [r7, #12]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	41480000 	.word	0x41480000
 8003954:	41d00000 	.word	0x41d00000
 8003958:	42500000 	.word	0x42500000
 800395c:	42d00000 	.word	0x42d00000
 8003960:	43500000 	.word	0x43500000
 8003964:	43d00000 	.word	0x43d00000
 8003968:	44504000 	.word	0x44504000
 800396c:	44cf8000 	.word	0x44cf8000
 8003970:	45502000 	.word	0x45502000
 8003974:	45d02000 	.word	0x45d02000

08003978 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800398a:	2b01      	cmp	r3, #1
 800398c:	d106      	bne.n	800399c <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800398e:	ed97 0a00 	vldr	s0, [r7]
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa26 	bl	8003de4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8003998:	4603      	mov	r3, r0
 800399a:	e005      	b.n	80039a8 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800399c:	ed97 0a00 	vldr	s0, [r7]
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 faab 	bl	8003efc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 80039a6:	4603      	mov	r3, r0
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	331c      	adds	r3, #28
 80039c2:	f107 020b 	add.w	r2, r7, #11
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fc91 	bl	80042f0 <lsm6dsl_gy_full_scale_get>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295
 80039d8:	e030      	b.n	8003a3c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80039da:	7afb      	ldrb	r3, [r7, #11]
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d828      	bhi.n	8003a32 <LSM6DSL_GYRO_GetFullScale+0x82>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <LSM6DSL_GYRO_GetFullScale+0x38>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a1f 	.word	0x08003a1f
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a29 	.word	0x08003a29
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	227d      	movs	r2, #125	; 0x7d
 8003a08:	601a      	str	r2, [r3, #0]
      break;
 8003a0a:	e016      	b.n	8003a3a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	22fa      	movs	r2, #250	; 0xfa
 8003a10:	601a      	str	r2, [r3, #0]
      break;
 8003a12:	e012      	b.n	8003a3a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a1a:	601a      	str	r2, [r3, #0]
      break;
 8003a1c:	e00d      	b.n	8003a3a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a24:	601a      	str	r2, [r3, #0]
      break;
 8003a26:	e008      	b.n	8003a3a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a2e:	601a      	str	r2, [r3, #0]
      break;
 8003a30:	e003      	b.n	8003a3a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	60fb      	str	r3, [r7, #12]
      break;
 8003a38:	bf00      	nop
  }

  return ret;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b7d      	cmp	r3, #125	; 0x7d
 8003a52:	dd12      	ble.n	8003a7a <LSM6DSL_GYRO_SetFullScale+0x36>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2bfa      	cmp	r3, #250	; 0xfa
 8003a58:	dd0d      	ble.n	8003a76 <LSM6DSL_GYRO_SetFullScale+0x32>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a60:	dd07      	ble.n	8003a72 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a68:	dc01      	bgt.n	8003a6e <LSM6DSL_GYRO_SetFullScale+0x2a>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	e006      	b.n	8003a7c <LSM6DSL_GYRO_SetFullScale+0x38>
 8003a6e:	2306      	movs	r3, #6
 8003a70:	e004      	b.n	8003a7c <LSM6DSL_GYRO_SetFullScale+0x38>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e002      	b.n	8003a7c <LSM6DSL_GYRO_SetFullScale+0x38>
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <LSM6DSL_GYRO_SetFullScale+0x38>
 8003a7a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8003a7c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	331c      	adds	r3, #28
 8003a82:	7bfa      	ldrb	r2, [r7, #15]
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fc0c 	bl	80042a4 <lsm6dsl_gy_full_scale_set>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	e000      	b.n	8003a9a <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	331c      	adds	r3, #28
 8003ab0:	f107 0208 	add.w	r2, r7, #8
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fd0a 	bl	80044d0 <lsm6dsl_angular_rate_raw_get>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	e00c      	b.n	8003ae2 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003ac8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003ad0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003ad8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	331c      	adds	r3, #28
 8003af8:	f107 0210 	add.w	r2, r7, #16
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fce6 	bl	80044d0 <lsm6dsl_angular_rate_raw_get>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0e:	e03c      	b.n	8003b8a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fe60 	bl	80037dc <LSM6DSL_GYRO_GetSensitivity>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295
 8003b26:	e030      	b.n	8003b8a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003b28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b40:	ee17 2a90 	vmov	r2, s15
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003b48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b60:	ee17 2a90 	vmov	r2, s15
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003b68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b80:	ee17 2a90 	vmov	r2, s15
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	70fb      	strb	r3, [r7, #3]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f103 001c 	add.w	r0, r3, #28
 8003ba8:	1cba      	adds	r2, r7, #2
 8003baa:	78f9      	ldrb	r1, [r7, #3]
 8003bac:	2301      	movs	r3, #1
 8003bae:	f000 fa75 	bl	800409c <lsm6dsl_write_reg>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbc:	e000      	b.n	8003bc0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003bd4:	edd7 7a00 	vldr	s15, [r7]
 8003bd8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be4:	d801      	bhi.n	8003bea <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e058      	b.n	8003c9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003bea:	edd7 7a00 	vldr	s15, [r7]
 8003bee:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	d801      	bhi.n	8003c00 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e04d      	b.n	8003c9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c00:	edd7 7a00 	vldr	s15, [r7]
 8003c04:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003cc4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	d801      	bhi.n	8003c16 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003c12:	2303      	movs	r3, #3
 8003c14:	e042      	b.n	8003c9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c16:	edd7 7a00 	vldr	s15, [r7]
 8003c1a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003cc8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c26:	d801      	bhi.n	8003c2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	e037      	b.n	8003c9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c2c:	edd7 7a00 	vldr	s15, [r7]
 8003c30:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003ccc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3c:	d801      	bhi.n	8003c42 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003c3e:	2305      	movs	r3, #5
 8003c40:	e02c      	b.n	8003c9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c42:	edd7 7a00 	vldr	s15, [r7]
 8003c46:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003cd0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8003c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c52:	d801      	bhi.n	8003c58 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003c54:	2306      	movs	r3, #6
 8003c56:	e021      	b.n	8003c9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c58:	edd7 7a00 	vldr	s15, [r7]
 8003c5c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003cd4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c68:	d801      	bhi.n	8003c6e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8003c6a:	2307      	movs	r3, #7
 8003c6c:	e016      	b.n	8003c9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c6e:	edd7 7a00 	vldr	s15, [r7]
 8003c72:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003cd8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8003c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7e:	d801      	bhi.n	8003c84 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003c80:	2308      	movs	r3, #8
 8003c82:	e00b      	b.n	8003c9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c84:	edd7 7a00 	vldr	s15, [r7]
 8003c88:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003cdc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	d801      	bhi.n	8003c9a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8003c96:	2309      	movs	r3, #9
 8003c98:	e000      	b.n	8003c9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c9a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003c9c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	331c      	adds	r3, #28
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fa6e 	bl	8004188 <lsm6dsl_xl_data_rate_set>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	e000      	b.n	8003cba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	42500000 	.word	0x42500000
 8003cc8:	42d00000 	.word	0x42d00000
 8003ccc:	43500000 	.word	0x43500000
 8003cd0:	43d00000 	.word	0x43d00000
 8003cd4:	44504000 	.word	0x44504000
 8003cd8:	44cf8000 	.word	0x44cf8000
 8003cdc:	45502000 	.word	0x45502000

08003ce0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003cec:	edd7 7a00 	vldr	s15, [r7]
 8003cf0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfc:	d801      	bhi.n	8003d02 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e058      	b.n	8003db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d02:	edd7 7a00 	vldr	s15, [r7]
 8003d06:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d12:	d801      	bhi.n	8003d18 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e04d      	b.n	8003db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d18:	edd7 7a00 	vldr	s15, [r7]
 8003d1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003dc8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d28:	d801      	bhi.n	8003d2e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e042      	b.n	8003db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d2e:	edd7 7a00 	vldr	s15, [r7]
 8003d32:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003dcc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8003d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3e:	d801      	bhi.n	8003d44 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003d40:	2304      	movs	r3, #4
 8003d42:	e037      	b.n	8003db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d44:	edd7 7a00 	vldr	s15, [r7]
 8003d48:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003dd0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d54:	d801      	bhi.n	8003d5a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003d56:	2305      	movs	r3, #5
 8003d58:	e02c      	b.n	8003db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d5a:	edd7 7a00 	vldr	s15, [r7]
 8003d5e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003dd4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d801      	bhi.n	8003d70 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003d6c:	2306      	movs	r3, #6
 8003d6e:	e021      	b.n	8003db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d70:	edd7 7a00 	vldr	s15, [r7]
 8003d74:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003dd8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	d801      	bhi.n	8003d86 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003d82:	2307      	movs	r3, #7
 8003d84:	e016      	b.n	8003db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d86:	edd7 7a00 	vldr	s15, [r7]
 8003d8a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003ddc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8003d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	d801      	bhi.n	8003d9c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003d98:	2308      	movs	r3, #8
 8003d9a:	e00b      	b.n	8003db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d9c:	edd7 7a00 	vldr	s15, [r7]
 8003da0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003de0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dac:	d801      	bhi.n	8003db2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8003dae:	2309      	movs	r3, #9
 8003db0:	e000      	b.n	8003db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003db2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	42500000 	.word	0x42500000
 8003dcc:	42d00000 	.word	0x42d00000
 8003dd0:	43500000 	.word	0x43500000
 8003dd4:	43d00000 	.word	0x43d00000
 8003dd8:	44504000 	.word	0x44504000
 8003ddc:	44cf8000 	.word	0x44cf8000
 8003de0:	45502000 	.word	0x45502000

08003de4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003df0:	edd7 7a00 	vldr	s15, [r7]
 8003df4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e00:	d801      	bhi.n	8003e06 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e058      	b.n	8003eb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e06:	edd7 7a00 	vldr	s15, [r7]
 8003e0a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e16:	d801      	bhi.n	8003e1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e04d      	b.n	8003eb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e1c:	edd7 7a00 	vldr	s15, [r7]
 8003e20:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003ee0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2c:	d801      	bhi.n	8003e32 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e042      	b.n	8003eb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e32:	edd7 7a00 	vldr	s15, [r7]
 8003e36:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003ee4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8003e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e42:	d801      	bhi.n	8003e48 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003e44:	2304      	movs	r3, #4
 8003e46:	e037      	b.n	8003eb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e48:	edd7 7a00 	vldr	s15, [r7]
 8003e4c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003ee8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	d801      	bhi.n	8003e5e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8003e5a:	2305      	movs	r3, #5
 8003e5c:	e02c      	b.n	8003eb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e5e:	edd7 7a00 	vldr	s15, [r7]
 8003e62:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003eec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8003e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	d801      	bhi.n	8003e74 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003e70:	2306      	movs	r3, #6
 8003e72:	e021      	b.n	8003eb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e74:	edd7 7a00 	vldr	s15, [r7]
 8003e78:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ef0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e84:	d801      	bhi.n	8003e8a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8003e86:	2307      	movs	r3, #7
 8003e88:	e016      	b.n	8003eb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e8a:	edd7 7a00 	vldr	s15, [r7]
 8003e8e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003ef4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9a:	d801      	bhi.n	8003ea0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	e00b      	b.n	8003eb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ea0:	edd7 7a00 	vldr	s15, [r7]
 8003ea4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003ef8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb0:	d801      	bhi.n	8003eb6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003eb2:	2309      	movs	r3, #9
 8003eb4:	e000      	b.n	8003eb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003eb6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003eb8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	331c      	adds	r3, #28
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fa56 	bl	8004374 <lsm6dsl_gy_data_rate_set>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	e000      	b.n	8003ed6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	42500000 	.word	0x42500000
 8003ee4:	42d00000 	.word	0x42d00000
 8003ee8:	43500000 	.word	0x43500000
 8003eec:	43d00000 	.word	0x43d00000
 8003ef0:	44504000 	.word	0x44504000
 8003ef4:	44cf8000 	.word	0x44cf8000
 8003ef8:	45502000 	.word	0x45502000

08003efc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003f08:	edd7 7a00 	vldr	s15, [r7]
 8003f0c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	d801      	bhi.n	8003f1e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e058      	b.n	8003fd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f1e:	edd7 7a00 	vldr	s15, [r7]
 8003f22:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2e:	d801      	bhi.n	8003f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e04d      	b.n	8003fd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f34:	edd7 7a00 	vldr	s15, [r7]
 8003f38:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003fe4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8003f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f44:	d801      	bhi.n	8003f4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8003f46:	2303      	movs	r3, #3
 8003f48:	e042      	b.n	8003fd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f4a:	edd7 7a00 	vldr	s15, [r7]
 8003f4e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003fe8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8003f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	d801      	bhi.n	8003f60 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	e037      	b.n	8003fd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f60:	edd7 7a00 	vldr	s15, [r7]
 8003f64:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003fec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8003f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f70:	d801      	bhi.n	8003f76 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003f72:	2305      	movs	r3, #5
 8003f74:	e02c      	b.n	8003fd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f76:	edd7 7a00 	vldr	s15, [r7]
 8003f7a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ff0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f86:	d801      	bhi.n	8003f8c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003f88:	2306      	movs	r3, #6
 8003f8a:	e021      	b.n	8003fd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f8c:	edd7 7a00 	vldr	s15, [r7]
 8003f90:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003ff4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8003f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9c:	d801      	bhi.n	8003fa2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	e016      	b.n	8003fd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003fa2:	edd7 7a00 	vldr	s15, [r7]
 8003fa6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003ff8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8003faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb2:	d801      	bhi.n	8003fb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003fb4:	2308      	movs	r3, #8
 8003fb6:	e00b      	b.n	8003fd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003fb8:	edd7 7a00 	vldr	s15, [r7]
 8003fbc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003ffc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc8:	d801      	bhi.n	8003fce <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8003fca:	2309      	movs	r3, #9
 8003fcc:	e000      	b.n	8003fd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003fce:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	42500000 	.word	0x42500000
 8003fe8:	42d00000 	.word	0x42d00000
 8003fec:	43500000 	.word	0x43500000
 8003ff0:	43d00000 	.word	0x43d00000
 8003ff4:	44504000 	.word	0x44504000
 8003ff8:	44cf8000 	.word	0x44cf8000
 8003ffc:	45502000 	.word	0x45502000

08004000 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	461a      	mov	r2, r3
 800400c:	460b      	mov	r3, r1
 800400e:	72fb      	strb	r3, [r7, #11]
 8004010:	4613      	mov	r3, r2
 8004012:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	695c      	ldr	r4, [r3, #20]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	7b1b      	ldrb	r3, [r3, #12]
 8004020:	b298      	uxth	r0, r3
 8004022:	7afb      	ldrb	r3, [r7, #11]
 8004024:	b299      	uxth	r1, r3
 8004026:	893b      	ldrh	r3, [r7, #8]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	47a0      	blx	r4
 800402c:	4603      	mov	r3, r0
}
 800402e:	4618      	mov	r0, r3
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	bd90      	pop	{r4, r7, pc}

08004036 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004036:	b590      	push	{r4, r7, lr}
 8004038:	b087      	sub	sp, #28
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	461a      	mov	r2, r3
 8004042:	460b      	mov	r3, r1
 8004044:	72fb      	strb	r3, [r7, #11]
 8004046:	4613      	mov	r3, r2
 8004048:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	691c      	ldr	r4, [r3, #16]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	7b1b      	ldrb	r3, [r3, #12]
 8004056:	b298      	uxth	r0, r3
 8004058:	7afb      	ldrb	r3, [r7, #11]
 800405a:	b299      	uxth	r1, r3
 800405c:	893b      	ldrh	r3, [r7, #8]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	47a0      	blx	r4
 8004062:	4603      	mov	r3, r0
}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	bd90      	pop	{r4, r7, pc}

0800406c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	461a      	mov	r2, r3
 8004078:	460b      	mov	r3, r1
 800407a:	72fb      	strb	r3, [r7, #11]
 800407c:	4613      	mov	r3, r2
 800407e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685c      	ldr	r4, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6898      	ldr	r0, [r3, #8]
 8004088:	893b      	ldrh	r3, [r7, #8]
 800408a:	7af9      	ldrb	r1, [r7, #11]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	47a0      	blx	r4
 8004090:	6178      	str	r0, [r7, #20]
  return ret;
 8004092:	697b      	ldr	r3, [r7, #20]
}
 8004094:	4618      	mov	r0, r3
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd90      	pop	{r4, r7, pc}

0800409c <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	461a      	mov	r2, r3
 80040a8:	460b      	mov	r3, r1
 80040aa:	72fb      	strb	r3, [r7, #11]
 80040ac:	4613      	mov	r3, r2
 80040ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681c      	ldr	r4, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6898      	ldr	r0, [r3, #8]
 80040b8:	893b      	ldrh	r3, [r7, #8]
 80040ba:	7af9      	ldrb	r1, [r7, #11]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	47a0      	blx	r4
 80040c0:	6178      	str	r0, [r7, #20]
  return ret;
 80040c2:	697b      	ldr	r3, [r7, #20]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}

080040cc <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80040d8:	f107 0208 	add.w	r2, r7, #8
 80040dc:	2301      	movs	r3, #1
 80040de:	2110      	movs	r1, #16
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff ffc3 	bl	800406c <lsm6dsl_read_reg>
 80040e6:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	7a3b      	ldrb	r3, [r7, #8]
 80040f8:	f362 0383 	bfi	r3, r2, #2, #2
 80040fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80040fe:	f107 0208 	add.w	r2, r7, #8
 8004102:	2301      	movs	r3, #1
 8004104:	2110      	movs	r1, #16
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ffc8 	bl	800409c <lsm6dsl_write_reg>
 800410c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004122:	f107 0208 	add.w	r2, r7, #8
 8004126:	2301      	movs	r3, #1
 8004128:	2110      	movs	r1, #16
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ff9e 	bl	800406c <lsm6dsl_read_reg>
 8004130:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004132:	7a3b      	ldrb	r3, [r7, #8]
 8004134:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b03      	cmp	r3, #3
 800413c:	d81a      	bhi.n	8004174 <lsm6dsl_xl_full_scale_get+0x5c>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <lsm6dsl_xl_full_scale_get+0x2c>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004155 	.word	0x08004155
 8004148:	0800415d 	.word	0x0800415d
 800414c:	08004165 	.word	0x08004165
 8004150:	0800416d 	.word	0x0800416d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
      break;
 800415a:	e00f      	b.n	800417c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e00b      	b.n	800417c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2202      	movs	r2, #2
 8004168:	701a      	strb	r2, [r3, #0]
      break;
 800416a:	e007      	b.n	800417c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2203      	movs	r2, #3
 8004170:	701a      	strb	r2, [r3, #0]
      break;
 8004172:	e003      	b.n	800417c <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2204      	movs	r2, #4
 8004178:	701a      	strb	r2, [r3, #0]
      break;
 800417a:	bf00      	nop
  }

  return ret;
 800417c:	68fb      	ldr	r3, [r7, #12]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop

08004188 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004194:	f107 0208 	add.w	r2, r7, #8
 8004198:	2301      	movs	r3, #1
 800419a:	2110      	movs	r1, #16
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ff65 	bl	800406c <lsm6dsl_read_reg>
 80041a2:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	7a3b      	ldrb	r3, [r7, #8]
 80041b4:	f362 1307 	bfi	r3, r2, #4, #4
 80041b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80041ba:	f107 0208 	add.w	r2, r7, #8
 80041be:	2301      	movs	r3, #1
 80041c0:	2110      	movs	r1, #16
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff6a 	bl	800409c <lsm6dsl_write_reg>
 80041c8:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80041ca:	68fb      	ldr	r3, [r7, #12]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80041de:	f107 0208 	add.w	r2, r7, #8
 80041e2:	2301      	movs	r3, #1
 80041e4:	2110      	movs	r1, #16
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ff40 	bl	800406c <lsm6dsl_read_reg>
 80041ec:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 80041ee:	7a3b      	ldrb	r3, [r7, #8]
 80041f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b0b      	cmp	r3, #11
 80041f8:	d84a      	bhi.n	8004290 <lsm6dsl_xl_data_rate_get+0xbc>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <lsm6dsl_xl_data_rate_get+0x2c>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004231 	.word	0x08004231
 8004204:	08004239 	.word	0x08004239
 8004208:	08004241 	.word	0x08004241
 800420c:	08004249 	.word	0x08004249
 8004210:	08004251 	.word	0x08004251
 8004214:	08004259 	.word	0x08004259
 8004218:	08004261 	.word	0x08004261
 800421c:	08004269 	.word	0x08004269
 8004220:	08004271 	.word	0x08004271
 8004224:	08004279 	.word	0x08004279
 8004228:	08004281 	.word	0x08004281
 800422c:	08004289 	.word	0x08004289
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
      break;
 8004236:	e02f      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
      break;
 800423e:	e02b      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2202      	movs	r2, #2
 8004244:	701a      	strb	r2, [r3, #0]
      break;
 8004246:	e027      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2203      	movs	r2, #3
 800424c:	701a      	strb	r2, [r3, #0]
      break;
 800424e:	e023      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2204      	movs	r2, #4
 8004254:	701a      	strb	r2, [r3, #0]
      break;
 8004256:	e01f      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2205      	movs	r2, #5
 800425c:	701a      	strb	r2, [r3, #0]
      break;
 800425e:	e01b      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2206      	movs	r2, #6
 8004264:	701a      	strb	r2, [r3, #0]
      break;
 8004266:	e017      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2207      	movs	r2, #7
 800426c:	701a      	strb	r2, [r3, #0]
      break;
 800426e:	e013      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2208      	movs	r2, #8
 8004274:	701a      	strb	r2, [r3, #0]
      break;
 8004276:	e00f      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2209      	movs	r2, #9
 800427c:	701a      	strb	r2, [r3, #0]
      break;
 800427e:	e00b      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	220a      	movs	r2, #10
 8004284:	701a      	strb	r2, [r3, #0]
      break;
 8004286:	e007      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	220b      	movs	r2, #11
 800428c:	701a      	strb	r2, [r3, #0]
      break;
 800428e:	e003      	b.n	8004298 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	220c      	movs	r2, #12
 8004294:	701a      	strb	r2, [r3, #0]
      break;
 8004296:	bf00      	nop
  }

  return ret;
 8004298:	68fb      	ldr	r3, [r7, #12]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop

080042a4 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80042b0:	f107 0208 	add.w	r2, r7, #8
 80042b4:	2301      	movs	r3, #1
 80042b6:	2111      	movs	r1, #17
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff fed7 	bl	800406c <lsm6dsl_read_reg>
 80042be:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	7a3b      	ldrb	r3, [r7, #8]
 80042d0:	f362 0343 	bfi	r3, r2, #1, #3
 80042d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80042d6:	f107 0208 	add.w	r2, r7, #8
 80042da:	2301      	movs	r3, #1
 80042dc:	2111      	movs	r1, #17
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fedc 	bl	800409c <lsm6dsl_write_reg>
 80042e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80042fa:	f107 0208 	add.w	r2, r7, #8
 80042fe:	2301      	movs	r3, #1
 8004300:	2111      	movs	r1, #17
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff feb2 	bl	800406c <lsm6dsl_read_reg>
 8004308:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 800430a:	7a3b      	ldrb	r3, [r7, #8]
 800430c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b06      	cmp	r3, #6
 8004314:	d824      	bhi.n	8004360 <lsm6dsl_gy_full_scale_get+0x70>
 8004316:	a201      	add	r2, pc, #4	; (adr r2, 800431c <lsm6dsl_gy_full_scale_get+0x2c>)
 8004318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431c:	08004339 	.word	0x08004339
 8004320:	08004341 	.word	0x08004341
 8004324:	08004349 	.word	0x08004349
 8004328:	08004361 	.word	0x08004361
 800432c:	08004351 	.word	0x08004351
 8004330:	08004361 	.word	0x08004361
 8004334:	08004359 	.word	0x08004359
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
      break;
 800433e:	e013      	b.n	8004368 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
      break;
 8004346:	e00f      	b.n	8004368 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
      break;
 800434e:	e00b      	b.n	8004368 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2204      	movs	r2, #4
 8004354:	701a      	strb	r2, [r3, #0]
      break;
 8004356:	e007      	b.n	8004368 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2206      	movs	r2, #6
 800435c:	701a      	strb	r2, [r3, #0]
      break;
 800435e:	e003      	b.n	8004368 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2207      	movs	r2, #7
 8004364:	701a      	strb	r2, [r3, #0]
      break;
 8004366:	bf00      	nop
  }

  return ret;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop

08004374 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004380:	f107 0208 	add.w	r2, r7, #8
 8004384:	2301      	movs	r3, #1
 8004386:	2111      	movs	r1, #17
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff fe6f 	bl	800406c <lsm6dsl_read_reg>
 800438e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	b2da      	uxtb	r2, r3
 800439e:	7a3b      	ldrb	r3, [r7, #8]
 80043a0:	f362 1307 	bfi	r3, r2, #4, #4
 80043a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80043a6:	f107 0208 	add.w	r2, r7, #8
 80043aa:	2301      	movs	r3, #1
 80043ac:	2111      	movs	r1, #17
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fe74 	bl	800409c <lsm6dsl_write_reg>
 80043b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80043b6:	68fb      	ldr	r3, [r7, #12]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80043ca:	f107 0208 	add.w	r2, r7, #8
 80043ce:	2301      	movs	r3, #1
 80043d0:	2111      	movs	r1, #17
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff fe4a 	bl	800406c <lsm6dsl_read_reg>
 80043d8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 80043da:	7a3b      	ldrb	r3, [r7, #8]
 80043dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b0a      	cmp	r3, #10
 80043e4:	d844      	bhi.n	8004470 <lsm6dsl_gy_data_rate_get+0xb0>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <lsm6dsl_gy_data_rate_get+0x2c>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004419 	.word	0x08004419
 80043f0:	08004421 	.word	0x08004421
 80043f4:	08004429 	.word	0x08004429
 80043f8:	08004431 	.word	0x08004431
 80043fc:	08004439 	.word	0x08004439
 8004400:	08004441 	.word	0x08004441
 8004404:	08004449 	.word	0x08004449
 8004408:	08004451 	.word	0x08004451
 800440c:	08004459 	.word	0x08004459
 8004410:	08004461 	.word	0x08004461
 8004414:	08004469 	.word	0x08004469
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
      break;
 800441e:	e02b      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
      break;
 8004426:	e027      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2202      	movs	r2, #2
 800442c:	701a      	strb	r2, [r3, #0]
      break;
 800442e:	e023      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2203      	movs	r2, #3
 8004434:	701a      	strb	r2, [r3, #0]
      break;
 8004436:	e01f      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2204      	movs	r2, #4
 800443c:	701a      	strb	r2, [r3, #0]
      break;
 800443e:	e01b      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2205      	movs	r2, #5
 8004444:	701a      	strb	r2, [r3, #0]
      break;
 8004446:	e017      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2206      	movs	r2, #6
 800444c:	701a      	strb	r2, [r3, #0]
      break;
 800444e:	e013      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2207      	movs	r2, #7
 8004454:	701a      	strb	r2, [r3, #0]
      break;
 8004456:	e00f      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2208      	movs	r2, #8
 800445c:	701a      	strb	r2, [r3, #0]
      break;
 800445e:	e00b      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2209      	movs	r2, #9
 8004464:	701a      	strb	r2, [r3, #0]
      break;
 8004466:	e007      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	220a      	movs	r2, #10
 800446c:	701a      	strb	r2, [r3, #0]
      break;
 800446e:	e003      	b.n	8004478 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	220b      	movs	r2, #11
 8004474:	701a      	strb	r2, [r3, #0]
      break;
 8004476:	bf00      	nop
  }

  return ret;
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop

08004484 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004490:	f107 0208 	add.w	r2, r7, #8
 8004494:	2301      	movs	r3, #1
 8004496:	2112      	movs	r1, #18
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fde7 	bl	800406c <lsm6dsl_read_reg>
 800449e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10f      	bne.n	80044c6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	7a3b      	ldrb	r3, [r7, #8]
 80044b0:	f362 1386 	bfi	r3, r2, #6, #1
 80044b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80044b6:	f107 0208 	add.w	r2, r7, #8
 80044ba:	2301      	movs	r3, #1
 80044bc:	2112      	movs	r1, #18
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fdec 	bl	800409c <lsm6dsl_write_reg>
 80044c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044c6:	68fb      	ldr	r3, [r7, #12]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80044da:	f107 020c 	add.w	r2, r7, #12
 80044de:	2306      	movs	r3, #6
 80044e0:	2122      	movs	r1, #34	; 0x22
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff fdc2 	bl	800406c <lsm6dsl_read_reg>
 80044e8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80044ea:	7b7b      	ldrb	r3, [r7, #13]
 80044ec:	b21a      	sxth	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	7b3b      	ldrb	r3, [r7, #12]
 8004500:	b29b      	uxth	r3, r3
 8004502:	4413      	add	r3, r2
 8004504:	b29b      	uxth	r3, r3
 8004506:	b21a      	sxth	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	3302      	adds	r3, #2
 8004512:	b212      	sxth	r2, r2
 8004514:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	3302      	adds	r3, #2
 800451a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800451e:	b29b      	uxth	r3, r3
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	b29a      	uxth	r2, r3
 8004524:	7bbb      	ldrb	r3, [r7, #14]
 8004526:	b29b      	uxth	r3, r3
 8004528:	4413      	add	r3, r2
 800452a:	b29a      	uxth	r2, r3
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	3302      	adds	r3, #2
 8004530:	b212      	sxth	r2, r2
 8004532:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004534:	7c7a      	ldrb	r2, [r7, #17]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	3304      	adds	r3, #4
 800453a:	b212      	sxth	r2, r2
 800453c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	3304      	adds	r3, #4
 8004542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004546:	b29b      	uxth	r3, r3
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	b29a      	uxth	r2, r3
 800454c:	7c3b      	ldrb	r3, [r7, #16]
 800454e:	b29b      	uxth	r3, r3
 8004550:	4413      	add	r3, r2
 8004552:	b29a      	uxth	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	3304      	adds	r3, #4
 8004558:	b212      	sxth	r2, r2
 800455a:	801a      	strh	r2, [r3, #0]
  return ret;
 800455c:	697b      	ldr	r3, [r7, #20]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b086      	sub	sp, #24
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004570:	f107 020c 	add.w	r2, r7, #12
 8004574:	2306      	movs	r3, #6
 8004576:	2128      	movs	r1, #40	; 0x28
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fd77 	bl	800406c <lsm6dsl_read_reg>
 800457e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004580:	7b7b      	ldrb	r3, [r7, #13]
 8004582:	b21a      	sxth	r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800458e:	b29b      	uxth	r3, r3
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	b29a      	uxth	r2, r3
 8004594:	7b3b      	ldrb	r3, [r7, #12]
 8004596:	b29b      	uxth	r3, r3
 8004598:	4413      	add	r3, r2
 800459a:	b29b      	uxth	r3, r3
 800459c:	b21a      	sxth	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	3302      	adds	r3, #2
 80045a8:	b212      	sxth	r2, r2
 80045aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	3302      	adds	r3, #2
 80045b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	7bbb      	ldrb	r3, [r7, #14]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	4413      	add	r3, r2
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	3302      	adds	r3, #2
 80045c6:	b212      	sxth	r2, r2
 80045c8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80045ca:	7c7a      	ldrb	r2, [r7, #17]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3304      	adds	r3, #4
 80045d0:	b212      	sxth	r2, r2
 80045d2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	3304      	adds	r3, #4
 80045d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	7c3b      	ldrb	r3, [r7, #16]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	3304      	adds	r3, #4
 80045ee:	b212      	sxth	r2, r2
 80045f0:	801a      	strh	r2, [r3, #0]
  return ret;
 80045f2:	697b      	ldr	r3, [r7, #20]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8004606:	2301      	movs	r3, #1
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	210f      	movs	r1, #15
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fd2d 	bl	800406c <lsm6dsl_read_reg>
 8004612:	60f8      	str	r0, [r7, #12]
  return ret;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	460b      	mov	r3, r1
 8004628:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800462a:	f107 0208 	add.w	r2, r7, #8
 800462e:	2301      	movs	r3, #1
 8004630:	2112      	movs	r1, #18
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fd1a 	bl	800406c <lsm6dsl_read_reg>
 8004638:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10f      	bne.n	8004660 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	b2da      	uxtb	r2, r3
 8004648:	7a3b      	ldrb	r3, [r7, #8]
 800464a:	f362 0382 	bfi	r3, r2, #2, #1
 800464e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004650:	f107 0208 	add.w	r2, r7, #8
 8004654:	2301      	movs	r3, #1
 8004656:	2112      	movs	r1, #18
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff fd1f 	bl	800409c <lsm6dsl_write_reg>
 800465e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004660:	68fb      	ldr	r3, [r7, #12]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	460b      	mov	r3, r1
 8004674:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004676:	f107 0208 	add.w	r2, r7, #8
 800467a:	2301      	movs	r3, #1
 800467c:	210a      	movs	r1, #10
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fcf4 	bl	800406c <lsm6dsl_read_reg>
 8004684:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10f      	bne.n	80046ac <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	b2da      	uxtb	r2, r3
 8004694:	7a3b      	ldrb	r3, [r7, #8]
 8004696:	f362 0302 	bfi	r3, r2, #0, #3
 800469a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800469c:	f107 0208 	add.w	r2, r7, #8
 80046a0:	2301      	movs	r3, #1
 80046a2:	210a      	movs	r1, #10
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fcf9 	bl	800409c <lsm6dsl_write_reg>
 80046aa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08e      	sub	sp, #56	; 0x38
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80046c6:	2301      	movs	r3, #1
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d036      	beq.n	8004742 <IKS01A2_MOTION_SENSOR_Init+0x8a>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d302      	bcc.n	80046de <IKS01A2_MOTION_SENSOR_Init+0x26>
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d064      	beq.n	80047a6 <IKS01A2_MOTION_SENSOR_Init+0xee>
 80046dc:	e095      	b.n	800480a <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 80046de:	6838      	ldr	r0, [r7, #0]
 80046e0:	f000 fa32 	bl	8004b48 <LSM6DSL_0_Probe>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295
 80046ee:	e0cc      	b.n	800488a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80046f0:	4a68      	ldr	r2, [pc, #416]	; (8004894 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	4967      	ldr	r1, [pc, #412]	; (8004898 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004702:	f107 010c 	add.w	r1, r7, #12
 8004706:	4610      	mov	r0, r2
 8004708:	4798      	blx	r3
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004710:	f06f 0306 	mvn.w	r3, #6
 8004714:	e0b9      	b.n	800488a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004716:	7b3b      	ldrb	r3, [r7, #12]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d103      	bne.n	8004724 <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004724:	7b7b      	ldrb	r3, [r7, #13]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d103      	bne.n	8004732 <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004732:	7bbb      	ldrb	r3, [r7, #14]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d16c      	bne.n	8004812 <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	f043 0304 	orr.w	r3, r3, #4
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004740:	e067      	b.n	8004812 <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8004742:	6838      	ldr	r0, [r7, #0]
 8004744:	f000 fabc 	bl	8004cc0 <LSM303AGR_ACC_0_Probe>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 800474e:	f04f 33ff 	mov.w	r3, #4294967295
 8004752:	e09a      	b.n	800488a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004754:	4a4f      	ldr	r2, [pc, #316]	; (8004894 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	494e      	ldr	r1, [pc, #312]	; (8004898 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004766:	f107 010c 	add.w	r1, r7, #12
 800476a:	4610      	mov	r0, r2
 800476c:	4798      	blx	r3
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004774:	f06f 0306 	mvn.w	r3, #6
 8004778:	e087      	b.n	800488a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 800477a:	7b3b      	ldrb	r3, [r7, #12]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d103      	bne.n	8004788 <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	f043 0302 	orr.w	r3, r3, #2
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004788:	7b7b      	ldrb	r3, [r7, #13]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d103      	bne.n	8004796 <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004796:	7bbb      	ldrb	r3, [r7, #14]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d13c      	bne.n	8004816 <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	f043 0304 	orr.w	r3, r3, #4
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80047a4:	e037      	b.n	8004816 <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80047a6:	6838      	ldr	r0, [r7, #0]
 80047a8:	f000 fb2e 	bl	8004e08 <LSM303AGR_MAG_0_Probe>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	e068      	b.n	800488a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80047b8:	4a36      	ldr	r2, [pc, #216]	; (8004894 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	4935      	ldr	r1, [pc, #212]	; (8004898 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80047ca:	f107 010c 	add.w	r1, r7, #12
 80047ce:	4610      	mov	r0, r2
 80047d0:	4798      	blx	r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80047d8:	f06f 0306 	mvn.w	r3, #6
 80047dc:	e055      	b.n	800488a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80047de:	7b3b      	ldrb	r3, [r7, #12]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d103      	bne.n	80047ec <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	f043 0302 	orr.w	r3, r3, #2
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80047ec:	7b7b      	ldrb	r3, [r7, #13]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d103      	bne.n	80047fa <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80047fa:	7bbb      	ldrb	r3, [r7, #14]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10c      	bne.n	800481a <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004808:	e007      	b.n	800481a <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800480a:	f06f 0301 	mvn.w	r3, #1
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8004810:	e004      	b.n	800481c <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 800481a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	e031      	b.n	800488a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8004826:	2300      	movs	r3, #0
 8004828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482a:	e02a      	b.n	8004882 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	4013      	ands	r3, r2
 8004832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004834:	429a      	cmp	r2, r3
 8004836:	d11e      	bne.n	8004876 <IKS01A2_MOTION_SENSOR_Init+0x1be>
 8004838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	4013      	ands	r3, r2
 800483e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004840:	429a      	cmp	r2, r3
 8004842:	d118      	bne.n	8004876 <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004844:	4a15      	ldr	r2, [pc, #84]	; (800489c <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800484c:	4814      	ldr	r0, [pc, #80]	; (80048a0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	440b      	add	r3, r1
 8004858:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	490e      	ldr	r1, [pc, #56]	; (8004898 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004866:	4610      	mov	r0, r2
 8004868:	4798      	blx	r3
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004870:	f06f 0304 	mvn.w	r3, #4
 8004874:	e009      	b.n	800488a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487e:	3301      	adds	r3, #1
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	2b02      	cmp	r3, #2
 8004886:	d9d1      	bls.n	800482c <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800488a:	4618      	mov	r0, r3
 800488c:	3738      	adds	r7, #56	; 0x38
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000488 	.word	0x20000488
 8004898:	200007a0 	.word	0x200007a0
 800489c:	20000248 	.word	0x20000248
 80048a0:	20000464 	.word	0x20000464

080048a4 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d903      	bls.n	80048bc <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80048b4:	f06f 0301 	mvn.w	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e028      	b.n	800490e <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80048bc:	4a16      	ldr	r2, [pc, #88]	; (8004918 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4013      	ands	r3, r2
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d11c      	bne.n	8004908 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80048ce:	4a13      	ldr	r2, [pc, #76]	; (800491c <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048d6:	4812      	ldr	r0, [pc, #72]	; (8004920 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	440b      	add	r3, r1
 80048e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	490e      	ldr	r1, [pc, #56]	; (8004924 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80048f0:	4610      	mov	r0, r2
 80048f2:	4798      	blx	r3
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80048fa:	f06f 0304 	mvn.w	r3, #4
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e005      	b.n	800490e <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	e002      	b.n	800490e <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004908:	f06f 0301 	mvn.w	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800490e:	68fb      	ldr	r3, [r7, #12]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000494 	.word	0x20000494
 800491c:	20000248 	.word	0x20000248
 8004920:	20000464 	.word	0x20000464
 8004924:	200007a0 	.word	0x200007a0

08004928 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d903      	bls.n	8004942 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800493a:	f06f 0301 	mvn.w	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	e029      	b.n	8004996 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4013      	ands	r3, r2
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	d11d      	bne.n	8004990 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8004954:	4a13      	ldr	r2, [pc, #76]	; (80049a4 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800495c:	4812      	ldr	r0, [pc, #72]	; (80049a8 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4613      	mov	r3, r2
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	440b      	add	r3, r1
 8004968:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	490f      	ldr	r1, [pc, #60]	; (80049ac <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4610      	mov	r0, r2
 800497a:	4798      	blx	r3
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004982:	f06f 0304 	mvn.w	r3, #4
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e005      	b.n	8004996 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	e002      	b.n	8004996 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004990:	f06f 0301 	mvn.w	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004996:	697b      	ldr	r3, [r7, #20]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000494 	.word	0x20000494
 80049a4:	20000248 	.word	0x20000248
 80049a8:	20000464 	.word	0x20000464
 80049ac:	200007a0 	.word	0x200007a0

080049b0 <IKS01A2_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d903      	bls.n	80049ca <IKS01A2_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80049c2:	f06f 0301 	mvn.w	r3, #1
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	e029      	b.n	8004a1e <IKS01A2_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80049ca:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x78>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d11d      	bne.n	8004a18 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance],
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <IKS01A2_MOTION_SENSOR_GetSensitivity+0x7c>)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049e4:	4812      	ldr	r0, [pc, #72]	; (8004a30 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x80>)
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4613      	mov	r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4413      	add	r3, r2
 80049ee:	440b      	add	r3, r1
 80049f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	490f      	ldr	r1, [pc, #60]	; (8004a34 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x84>)
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4610      	mov	r0, r2
 8004a02:	4798      	blx	r3
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x62>
          Sensitivity) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a0a:	f06f 0304 	mvn.w	r3, #4
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e005      	b.n	8004a1e <IKS01A2_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e002      	b.n	8004a1e <IKS01A2_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004a18:	f06f 0301 	mvn.w	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004a1e:	697b      	ldr	r3, [r7, #20]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000494 	.word	0x20000494
 8004a2c:	20000248 	.word	0x20000248
 8004a30:	20000464 	.word	0x20000464
 8004a34:	200007a0 	.word	0x200007a0

08004a38 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr pointer to Output Data Rate read value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d903      	bls.n	8004a52 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004a4a:	f06f 0301 	mvn.w	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e029      	b.n	8004aa6 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004a52:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d11d      	bne.n	8004aa0 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004a64:	4a13      	ldr	r2, [pc, #76]	; (8004ab4 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a6c:	4812      	ldr	r0, [pc, #72]	; (8004ab8 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x80>)
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	440b      	add	r3, r1
 8004a78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	490f      	ldr	r1, [pc, #60]	; (8004abc <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4798      	blx	r3
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a92:	f06f 0304 	mvn.w	r3, #4
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e005      	b.n	8004aa6 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e002      	b.n	8004aa6 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004aa0:	f06f 0301 	mvn.w	r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004aa6:	697b      	ldr	r3, [r7, #20]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000494 	.word	0x20000494
 8004ab4:	20000248 	.word	0x20000248
 8004ab8:	20000464 	.word	0x20000464
 8004abc:	200007a0 	.word	0x200007a0

08004ac0 <IKS01A2_MOTION_SENSOR_GetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale pointer to Fullscale read value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d903      	bls.n	8004ada <IKS01A2_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004ad2:	f06f 0301 	mvn.w	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e029      	b.n	8004b2e <IKS01A2_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004ada:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <IKS01A2_MOTION_SENSOR_GetFullScale+0x78>)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11d      	bne.n	8004b28 <IKS01A2_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8004aec:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <IKS01A2_MOTION_SENSOR_GetFullScale+0x7c>)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004af4:	4812      	ldr	r0, [pc, #72]	; (8004b40 <IKS01A2_MOTION_SENSOR_GetFullScale+0x80>)
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4613      	mov	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4413      	add	r3, r2
 8004afe:	440b      	add	r3, r1
 8004b00:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	490f      	ldr	r1, [pc, #60]	; (8004b44 <IKS01A2_MOTION_SENSOR_GetFullScale+0x84>)
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4610      	mov	r0, r2
 8004b12:	4798      	blx	r3
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <IKS01A2_MOTION_SENSOR_GetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b1a:	f06f 0304 	mvn.w	r3, #4
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e005      	b.n	8004b2e <IKS01A2_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e002      	b.n	8004b2e <IKS01A2_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004b28:	f06f 0301 	mvn.w	r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004b2e:	697b      	ldr	r3, [r7, #20]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000494 	.word	0x20000494
 8004b3c:	20000248 	.word	0x20000248
 8004b40:	20000464 	.word	0x20000464
 8004b44:	200007a0 	.word	0x200007a0

08004b48 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b092      	sub	sp, #72	; 0x48
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8004b54:	2300      	movs	r3, #0
 8004b56:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8004b58:	23d7      	movs	r3, #215	; 0xd7
 8004b5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004b5e:	4b4a      	ldr	r3, [pc, #296]	; (8004c88 <LSM6DSL_0_Probe+0x140>)
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004b62:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <LSM6DSL_0_Probe+0x144>)
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <LSM6DSL_0_Probe+0x148>)
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004b6a:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <LSM6DSL_0_Probe+0x14c>)
 8004b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004b6e:	4b4a      	ldr	r3, [pc, #296]	; (8004c98 <LSM6DSL_0_Probe+0x150>)
 8004b70:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8004b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b76:	4619      	mov	r1, r3
 8004b78:	4848      	ldr	r0, [pc, #288]	; (8004c9c <LSM6DSL_0_Probe+0x154>)
 8004b7a:	f7fe fa87 	bl	800308c <LSM6DSL_RegisterBusIO>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004b84:	f06f 0306 	mvn.w	r3, #6
 8004b88:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8a:	e077      	b.n	8004c7c <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8004b8c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004b90:	4619      	mov	r1, r3
 8004b92:	4842      	ldr	r0, [pc, #264]	; (8004c9c <LSM6DSL_0_Probe+0x154>)
 8004b94:	f7fe fb70 	bl	8003278 <LSM6DSL_ReadID>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004b9e:	f06f 0306 	mvn.w	r3, #6
 8004ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba4:	e06a      	b.n	8004c7c <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8004ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004baa:	2b6a      	cmp	r3, #106	; 0x6a
 8004bac:	d003      	beq.n	8004bb6 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004bae:	f06f 0306 	mvn.w	r3, #6
 8004bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb4:	e062      	b.n	8004c7c <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8004bb6:	f107 0308 	add.w	r3, r7, #8
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4837      	ldr	r0, [pc, #220]	; (8004c9c <LSM6DSL_0_Probe+0x154>)
 8004bbe:	f7fe fb71 	bl	80032a4 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004bc2:	7a7b      	ldrb	r3, [r7, #9]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	7a3b      	ldrb	r3, [r7, #8]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	7abb      	ldrb	r3, [r7, #10]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <LSM6DSL_0_Probe+0x158>)
 8004bd4:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8004bd6:	4b33      	ldr	r3, [pc, #204]	; (8004ca4 <LSM6DSL_0_Probe+0x15c>)
 8004bd8:	4a30      	ldr	r2, [pc, #192]	; (8004c9c <LSM6DSL_0_Probe+0x154>)
 8004bda:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <LSM6DSL_0_Probe+0x160>)
 8004bde:	4a33      	ldr	r2, [pc, #204]	; (8004cac <LSM6DSL_0_Probe+0x164>)
 8004be0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11d      	bne.n	8004c24 <LSM6DSL_0_Probe+0xdc>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d018      	beq.n	8004c24 <LSM6DSL_0_Probe+0xdc>
 8004bf2:	7a7b      	ldrb	r3, [r7, #9]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d115      	bne.n	8004c24 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8004bf8:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <LSM6DSL_0_Probe+0x168>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a2d      	ldr	r2, [pc, #180]	; (8004cb4 <LSM6DSL_0_Probe+0x16c>)
 8004bfe:	492e      	ldr	r1, [pc, #184]	; (8004cb8 <LSM6DSL_0_Probe+0x170>)
 8004c00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8004c04:	4b28      	ldr	r3, [pc, #160]	; (8004ca8 <LSM6DSL_0_Probe+0x160>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <LSM6DSL_0_Probe+0x15c>)
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4798      	blx	r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c18:	f06f 0304 	mvn.w	r3, #4
 8004c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1e:	e001      	b.n	8004c24 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d11d      	bne.n	8004c66 <LSM6DSL_0_Probe+0x11e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d018      	beq.n	8004c66 <LSM6DSL_0_Probe+0x11e>
 8004c34:	7a3b      	ldrb	r3, [r7, #8]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d115      	bne.n	8004c66 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <LSM6DSL_0_Probe+0x168>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <LSM6DSL_0_Probe+0x16c>)
 8004c40:	491e      	ldr	r1, [pc, #120]	; (8004cbc <LSM6DSL_0_Probe+0x174>)
 8004c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8004c46:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <LSM6DSL_0_Probe+0x160>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <LSM6DSL_0_Probe+0x15c>)
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	4610      	mov	r0, r2
 8004c52:	4798      	blx	r3
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c5a:	f06f 0304 	mvn.w	r3, #4
 8004c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c60:	e001      	b.n	8004c66 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8004c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d107      	bne.n	8004c7c <LSM6DSL_0_Probe+0x134>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c76:	f06f 0304 	mvn.w	r3, #4
 8004c7a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8004c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3748      	adds	r7, #72	; 0x48
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	08001579 	.word	0x08001579
 8004c8c:	080015dd 	.word	0x080015dd
 8004c90:	08001691 	.word	0x08001691
 8004c94:	0800162d 	.word	0x0800162d
 8004c98:	080016f5 	.word	0x080016f5
 8004c9c:	200004a0 	.word	0x200004a0
 8004ca0:	20000494 	.word	0x20000494
 8004ca4:	200007a0 	.word	0x200007a0
 8004ca8:	20000488 	.word	0x20000488
 8004cac:	200001f0 	.word	0x200001f0
 8004cb0:	20000248 	.word	0x20000248
 8004cb4:	20000464 	.word	0x20000464
 8004cb8:	20000224 	.word	0x20000224
 8004cbc:	20000200 	.word	0x20000200

08004cc0 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b092      	sub	sp, #72	; 0x48
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8004ccc:	2300      	movs	r3, #0
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8004cd0:	2333      	movs	r3, #51	; 0x33
 8004cd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004cd6:	4b3f      	ldr	r3, [pc, #252]	; (8004dd4 <LSM303AGR_ACC_0_Probe+0x114>)
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004cda:	4b3f      	ldr	r3, [pc, #252]	; (8004dd8 <LSM303AGR_ACC_0_Probe+0x118>)
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004cde:	4b3f      	ldr	r3, [pc, #252]	; (8004ddc <LSM303AGR_ACC_0_Probe+0x11c>)
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004ce2:	4b3f      	ldr	r3, [pc, #252]	; (8004de0 <LSM303AGR_ACC_0_Probe+0x120>)
 8004ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004ce6:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <LSM303AGR_ACC_0_Probe+0x124>)
 8004ce8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8004cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cee:	4619      	mov	r1, r3
 8004cf0:	483d      	ldr	r0, [pc, #244]	; (8004de8 <LSM303AGR_ACC_0_Probe+0x128>)
 8004cf2:	f7fc fe17 	bl	8001924 <LSM303AGR_ACC_RegisterBusIO>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004cfc:	f06f 0306 	mvn.w	r3, #6
 8004d00:	647b      	str	r3, [r7, #68]	; 0x44
 8004d02:	e062      	b.n	8004dca <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8004d04:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4837      	ldr	r0, [pc, #220]	; (8004de8 <LSM303AGR_ACC_0_Probe+0x128>)
 8004d0c:	f7fc fecb 	bl	8001aa6 <LSM303AGR_ACC_ReadID>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004d16:	f06f 0306 	mvn.w	r3, #6
 8004d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d1c:	e055      	b.n	8004dca <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8004d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d22:	2b33      	cmp	r3, #51	; 0x33
 8004d24:	d003      	beq.n	8004d2e <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004d26:	f06f 0306 	mvn.w	r3, #6
 8004d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d2c:	e04d      	b.n	8004dca <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8004d2e:	f107 0308 	add.w	r3, r7, #8
 8004d32:	4619      	mov	r1, r3
 8004d34:	482c      	ldr	r0, [pc, #176]	; (8004de8 <LSM303AGR_ACC_0_Probe+0x128>)
 8004d36:	f7fc fecd 	bl	8001ad4 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004d3a:	7a7b      	ldrb	r3, [r7, #9]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	7a3b      	ldrb	r3, [r7, #8]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8004d44:	7abb      	ldrb	r3, [r7, #10]
 8004d46:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	4a28      	ldr	r2, [pc, #160]	; (8004dec <LSM303AGR_ACC_0_Probe+0x12c>)
 8004d4c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8004d4e:	4b28      	ldr	r3, [pc, #160]	; (8004df0 <LSM303AGR_ACC_0_Probe+0x130>)
 8004d50:	4a25      	ldr	r2, [pc, #148]	; (8004de8 <LSM303AGR_ACC_0_Probe+0x128>)
 8004d52:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8004d54:	4b27      	ldr	r3, [pc, #156]	; (8004df4 <LSM303AGR_ACC_0_Probe+0x134>)
 8004d56:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <LSM303AGR_ACC_0_Probe+0x138>)
 8004d58:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d11e      	bne.n	8004d9e <LSM303AGR_ACC_0_Probe+0xde>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d019      	beq.n	8004d9e <LSM303AGR_ACC_0_Probe+0xde>
 8004d6a:	7a3b      	ldrb	r3, [r7, #8]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d116      	bne.n	8004d9e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004d70:	4b22      	ldr	r3, [pc, #136]	; (8004dfc <LSM303AGR_ACC_0_Probe+0x13c>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a22      	ldr	r2, [pc, #136]	; (8004e00 <LSM303AGR_ACC_0_Probe+0x140>)
 8004d76:	3303      	adds	r3, #3
 8004d78:	4922      	ldr	r1, [pc, #136]	; (8004e04 <LSM303AGR_ACC_0_Probe+0x144>)
 8004d7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8004d7e:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <LSM303AGR_ACC_0_Probe+0x134>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <LSM303AGR_ACC_0_Probe+0x130>)
 8004d86:	6852      	ldr	r2, [r2, #4]
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4798      	blx	r3
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d92:	f06f 0304 	mvn.w	r3, #4
 8004d96:	647b      	str	r3, [r7, #68]	; 0x44
 8004d98:	e001      	b.n	8004d9e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8004d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d107      	bne.n	8004db4 <LSM303AGR_ACC_0_Probe+0xf4>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004dae:	f06f 0304 	mvn.w	r3, #4
 8004db2:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8004db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d107      	bne.n	8004dca <LSM303AGR_ACC_0_Probe+0x10a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004dc4:	f06f 0304 	mvn.w	r3, #4
 8004dc8:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8004dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3748      	adds	r7, #72	; 0x48
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	08001579 	.word	0x08001579
 8004dd8:	080015dd 	.word	0x080015dd
 8004ddc:	08001691 	.word	0x08001691
 8004de0:	0800162d 	.word	0x0800162d
 8004de4:	080016f5 	.word	0x080016f5
 8004de8:	200004d0 	.word	0x200004d0
 8004dec:	20000494 	.word	0x20000494
 8004df0:	200007a0 	.word	0x200007a0
 8004df4:	20000488 	.word	0x20000488
 8004df8:	20000188 	.word	0x20000188
 8004dfc:	20000248 	.word	0x20000248
 8004e00:	20000464 	.word	0x20000464
 8004e04:	20000198 	.word	0x20000198

08004e08 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b092      	sub	sp, #72	; 0x48
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8004e14:	2300      	movs	r3, #0
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8004e18:	233d      	movs	r3, #61	; 0x3d
 8004e1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004e1e:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <LSM303AGR_MAG_0_Probe+0x114>)
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004e22:	4b3f      	ldr	r3, [pc, #252]	; (8004f20 <LSM303AGR_MAG_0_Probe+0x118>)
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004e26:	4b3f      	ldr	r3, [pc, #252]	; (8004f24 <LSM303AGR_MAG_0_Probe+0x11c>)
 8004e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <LSM303AGR_MAG_0_Probe+0x120>)
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004e2e:	4b3f      	ldr	r3, [pc, #252]	; (8004f2c <LSM303AGR_MAG_0_Probe+0x124>)
 8004e30:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8004e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e36:	4619      	mov	r1, r3
 8004e38:	483d      	ldr	r0, [pc, #244]	; (8004f30 <LSM303AGR_MAG_0_Probe+0x128>)
 8004e3a:	f7fd f937 	bl	80020ac <LSM303AGR_MAG_RegisterBusIO>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e44:	f06f 0306 	mvn.w	r3, #6
 8004e48:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4a:	e062      	b.n	8004f12 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8004e4c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004e50:	4619      	mov	r1, r3
 8004e52:	4837      	ldr	r0, [pc, #220]	; (8004f30 <LSM303AGR_MAG_0_Probe+0x128>)
 8004e54:	f7fd f9e1 	bl	800221a <LSM303AGR_MAG_ReadID>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e5e:	f06f 0306 	mvn.w	r3, #6
 8004e62:	647b      	str	r3, [r7, #68]	; 0x44
 8004e64:	e055      	b.n	8004f12 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8004e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d003      	beq.n	8004e76 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e6e:	f06f 0306 	mvn.w	r3, #6
 8004e72:	647b      	str	r3, [r7, #68]	; 0x44
 8004e74:	e04d      	b.n	8004f12 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8004e76:	f107 0308 	add.w	r3, r7, #8
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	482c      	ldr	r0, [pc, #176]	; (8004f30 <LSM303AGR_MAG_0_Probe+0x128>)
 8004e7e:	f7fd f9e3 	bl	8002248 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004e82:	7a7b      	ldrb	r3, [r7, #9]
 8004e84:	461a      	mov	r2, r3
 8004e86:	7a3b      	ldrb	r3, [r7, #8]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8004e8c:	7abb      	ldrb	r3, [r7, #10]
 8004e8e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004e90:	4313      	orrs	r3, r2
 8004e92:	4a28      	ldr	r2, [pc, #160]	; (8004f34 <LSM303AGR_MAG_0_Probe+0x12c>)
 8004e94:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8004e96:	4b28      	ldr	r3, [pc, #160]	; (8004f38 <LSM303AGR_MAG_0_Probe+0x130>)
 8004e98:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <LSM303AGR_MAG_0_Probe+0x128>)
 8004e9a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8004e9c:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <LSM303AGR_MAG_0_Probe+0x134>)
 8004e9e:	4a28      	ldr	r2, [pc, #160]	; (8004f40 <LSM303AGR_MAG_0_Probe+0x138>)
 8004ea0:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8004ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d11e      	bne.n	8004ee6 <LSM303AGR_MAG_0_Probe+0xde>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d019      	beq.n	8004ee6 <LSM303AGR_MAG_0_Probe+0xde>
 8004eb2:	7abb      	ldrb	r3, [r7, #10]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d116      	bne.n	8004ee6 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004eb8:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <LSM303AGR_MAG_0_Probe+0x13c>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <LSM303AGR_MAG_0_Probe+0x140>)
 8004ebe:	3306      	adds	r3, #6
 8004ec0:	4922      	ldr	r1, [pc, #136]	; (8004f4c <LSM303AGR_MAG_0_Probe+0x144>)
 8004ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <LSM303AGR_MAG_0_Probe+0x134>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <LSM303AGR_MAG_0_Probe+0x130>)
 8004ece:	6892      	ldr	r2, [r2, #8]
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4798      	blx	r3
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004eda:	f06f 0304 	mvn.w	r3, #4
 8004ede:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee0:	e001      	b.n	8004ee6 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8004ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d107      	bne.n	8004efc <LSM303AGR_MAG_0_Probe+0xf4>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ef6:	f06f 0304 	mvn.w	r3, #4
 8004efa:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8004efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d107      	bne.n	8004f12 <LSM303AGR_MAG_0_Probe+0x10a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f0c:	f06f 0304 	mvn.w	r3, #4
 8004f10:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8004f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3748      	adds	r7, #72	; 0x48
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	08001579 	.word	0x08001579
 8004f20:	080015dd 	.word	0x080015dd
 8004f24:	08001691 	.word	0x08001691
 8004f28:	0800162d 	.word	0x0800162d
 8004f2c:	080016f5 	.word	0x080016f5
 8004f30:	200004fc 	.word	0x200004fc
 8004f34:	20000494 	.word	0x20000494
 8004f38:	200007a0 	.word	0x200007a0
 8004f3c:	20000488 	.word	0x20000488
 8004f40:	200001bc 	.word	0x200001bc
 8004f44:	20000248 	.word	0x20000248
 8004f48:	20000464 	.word	0x20000464
 8004f4c:	200001cc 	.word	0x200001cc

08004f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f54:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <HAL_Init+0x40>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0d      	ldr	r2, [pc, #52]	; (8004f90 <HAL_Init+0x40>)
 8004f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_Init+0x40>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_Init+0x40>)
 8004f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f6c:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <HAL_Init+0x40>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a07      	ldr	r2, [pc, #28]	; (8004f90 <HAL_Init+0x40>)
 8004f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f78:	2003      	movs	r0, #3
 8004f7a:	f000 f92b 	bl	80051d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f000 f808 	bl	8004f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f84:	f7fc fa02 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023c00 	.word	0x40023c00

08004f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f9c:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <HAL_InitTick+0x54>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_InitTick+0x58>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f943 	bl	800523e <HAL_SYSTICK_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e00e      	b.n	8004fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b0f      	cmp	r3, #15
 8004fc6:	d80a      	bhi.n	8004fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fc8:	2200      	movs	r2, #0
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	f000 f90b 	bl	80051ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fd4:	4a06      	ldr	r2, [pc, #24]	; (8004ff0 <HAL_InitTick+0x5c>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000184 	.word	0x20000184
 8004fec:	20000260 	.word	0x20000260
 8004ff0:	2000025c 	.word	0x2000025c

08004ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <HAL_IncTick+0x20>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_IncTick+0x24>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4413      	add	r3, r2
 8005004:	4a04      	ldr	r2, [pc, #16]	; (8005018 <HAL_IncTick+0x24>)
 8005006:	6013      	str	r3, [r2, #0]
}
 8005008:	bf00      	nop
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000260 	.word	0x20000260
 8005018:	200007ac 	.word	0x200007ac

0800501c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return uwTick;
 8005020:	4b03      	ldr	r3, [pc, #12]	; (8005030 <HAL_GetTick+0x14>)
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	200007ac 	.word	0x200007ac

08005034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <__NVIC_SetPriorityGrouping+0x44>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005050:	4013      	ands	r3, r2
 8005052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800505c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005066:	4a04      	ldr	r2, [pc, #16]	; (8005078 <__NVIC_SetPriorityGrouping+0x44>)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	60d3      	str	r3, [r2, #12]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <__NVIC_GetPriorityGrouping+0x18>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	0a1b      	lsrs	r3, r3, #8
 8005086:	f003 0307 	and.w	r3, r3, #7
}
 800508a:	4618      	mov	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	db0b      	blt.n	80050c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	f003 021f 	and.w	r2, r3, #31
 80050b0:	4907      	ldr	r1, [pc, #28]	; (80050d0 <__NVIC_EnableIRQ+0x38>)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2001      	movs	r0, #1
 80050ba:	fa00 f202 	lsl.w	r2, r0, r2
 80050be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000e100 	.word	0xe000e100

080050d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	6039      	str	r1, [r7, #0]
 80050de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	db0a      	blt.n	80050fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	490c      	ldr	r1, [pc, #48]	; (8005120 <__NVIC_SetPriority+0x4c>)
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	0112      	lsls	r2, r2, #4
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	440b      	add	r3, r1
 80050f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050fc:	e00a      	b.n	8005114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	4908      	ldr	r1, [pc, #32]	; (8005124 <__NVIC_SetPriority+0x50>)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	3b04      	subs	r3, #4
 800510c:	0112      	lsls	r2, r2, #4
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	440b      	add	r3, r1
 8005112:	761a      	strb	r2, [r3, #24]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	e000e100 	.word	0xe000e100
 8005124:	e000ed00 	.word	0xe000ed00

08005128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f1c3 0307 	rsb	r3, r3, #7
 8005142:	2b04      	cmp	r3, #4
 8005144:	bf28      	it	cs
 8005146:	2304      	movcs	r3, #4
 8005148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3304      	adds	r3, #4
 800514e:	2b06      	cmp	r3, #6
 8005150:	d902      	bls.n	8005158 <NVIC_EncodePriority+0x30>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3b03      	subs	r3, #3
 8005156:	e000      	b.n	800515a <NVIC_EncodePriority+0x32>
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43da      	mvns	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	401a      	ands	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005170:	f04f 31ff 	mov.w	r1, #4294967295
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	43d9      	mvns	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005180:	4313      	orrs	r3, r2
         );
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3b01      	subs	r3, #1
 800519c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051a0:	d301      	bcc.n	80051a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051a2:	2301      	movs	r3, #1
 80051a4:	e00f      	b.n	80051c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051a6:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <SysTick_Config+0x40>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ae:	210f      	movs	r1, #15
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	f7ff ff8e 	bl	80050d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <SysTick_Config+0x40>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <SysTick_Config+0x40>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010

080051d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ff29 	bl	8005034 <__NVIC_SetPriorityGrouping>
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	4603      	mov	r3, r0
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051fc:	f7ff ff3e 	bl	800507c <__NVIC_GetPriorityGrouping>
 8005200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	6978      	ldr	r0, [r7, #20]
 8005208:	f7ff ff8e 	bl	8005128 <NVIC_EncodePriority>
 800520c:	4602      	mov	r2, r0
 800520e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff ff5d 	bl	80050d4 <__NVIC_SetPriority>
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	4603      	mov	r3, r0
 800522a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800522c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ff31 	bl	8005098 <__NVIC_EnableIRQ>
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff ffa2 	bl	8005190 <SysTick_Config>
 800524c:	4603      	mov	r3, r0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d004      	beq.n	8005274 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e00c      	b.n	800528e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2205      	movs	r2, #5
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e159      	b.n	800556c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052b8:	2201      	movs	r2, #1
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4013      	ands	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	f040 8148 	bne.w	8005566 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d00b      	beq.n	80052f6 <HAL_GPIO_Init+0x5a>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d007      	beq.n	80052f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052ea:	2b11      	cmp	r3, #17
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b12      	cmp	r3, #18
 80052f4:	d130      	bne.n	8005358 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	2203      	movs	r2, #3
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4313      	orrs	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800532c:	2201      	movs	r2, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 0201 	and.w	r2, r3, #1
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	2203      	movs	r2, #3
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4313      	orrs	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d003      	beq.n	8005398 <HAL_GPIO_Init+0xfc>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b12      	cmp	r3, #18
 8005396:	d123      	bne.n	80053e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	08da      	lsrs	r2, r3, #3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3208      	adds	r2, #8
 80053a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	220f      	movs	r2, #15
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	08da      	lsrs	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3208      	adds	r2, #8
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	2203      	movs	r2, #3
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 0203 	and.w	r2, r3, #3
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80a2 	beq.w	8005566 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	4b56      	ldr	r3, [pc, #344]	; (8005580 <HAL_GPIO_Init+0x2e4>)
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	4a55      	ldr	r2, [pc, #340]	; (8005580 <HAL_GPIO_Init+0x2e4>)
 800542c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005430:	6453      	str	r3, [r2, #68]	; 0x44
 8005432:	4b53      	ldr	r3, [pc, #332]	; (8005580 <HAL_GPIO_Init+0x2e4>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800543e:	4a51      	ldr	r2, [pc, #324]	; (8005584 <HAL_GPIO_Init+0x2e8>)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	089b      	lsrs	r3, r3, #2
 8005444:	3302      	adds	r3, #2
 8005446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	220f      	movs	r2, #15
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a48      	ldr	r2, [pc, #288]	; (8005588 <HAL_GPIO_Init+0x2ec>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d019      	beq.n	800549e <HAL_GPIO_Init+0x202>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a47      	ldr	r2, [pc, #284]	; (800558c <HAL_GPIO_Init+0x2f0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_GPIO_Init+0x1fe>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a46      	ldr	r2, [pc, #280]	; (8005590 <HAL_GPIO_Init+0x2f4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00d      	beq.n	8005496 <HAL_GPIO_Init+0x1fa>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a45      	ldr	r2, [pc, #276]	; (8005594 <HAL_GPIO_Init+0x2f8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <HAL_GPIO_Init+0x1f6>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a44      	ldr	r2, [pc, #272]	; (8005598 <HAL_GPIO_Init+0x2fc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d101      	bne.n	800548e <HAL_GPIO_Init+0x1f2>
 800548a:	2304      	movs	r3, #4
 800548c:	e008      	b.n	80054a0 <HAL_GPIO_Init+0x204>
 800548e:	2307      	movs	r3, #7
 8005490:	e006      	b.n	80054a0 <HAL_GPIO_Init+0x204>
 8005492:	2303      	movs	r3, #3
 8005494:	e004      	b.n	80054a0 <HAL_GPIO_Init+0x204>
 8005496:	2302      	movs	r3, #2
 8005498:	e002      	b.n	80054a0 <HAL_GPIO_Init+0x204>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_GPIO_Init+0x204>
 800549e:	2300      	movs	r3, #0
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	f002 0203 	and.w	r2, r2, #3
 80054a6:	0092      	lsls	r2, r2, #2
 80054a8:	4093      	lsls	r3, r2
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054b0:	4934      	ldr	r1, [pc, #208]	; (8005584 <HAL_GPIO_Init+0x2e8>)
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	089b      	lsrs	r3, r3, #2
 80054b6:	3302      	adds	r3, #2
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054be:	4b37      	ldr	r3, [pc, #220]	; (800559c <HAL_GPIO_Init+0x300>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	43db      	mvns	r3, r3
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	4013      	ands	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054e2:	4a2e      	ldr	r2, [pc, #184]	; (800559c <HAL_GPIO_Init+0x300>)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054e8:	4b2c      	ldr	r3, [pc, #176]	; (800559c <HAL_GPIO_Init+0x300>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	43db      	mvns	r3, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4013      	ands	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800550c:	4a23      	ldr	r2, [pc, #140]	; (800559c <HAL_GPIO_Init+0x300>)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005512:	4b22      	ldr	r3, [pc, #136]	; (800559c <HAL_GPIO_Init+0x300>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005536:	4a19      	ldr	r2, [pc, #100]	; (800559c <HAL_GPIO_Init+0x300>)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800553c:	4b17      	ldr	r3, [pc, #92]	; (800559c <HAL_GPIO_Init+0x300>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005560:	4a0e      	ldr	r2, [pc, #56]	; (800559c <HAL_GPIO_Init+0x300>)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2b0f      	cmp	r3, #15
 8005570:	f67f aea2 	bls.w	80052b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005574:	bf00      	nop
 8005576:	3724      	adds	r7, #36	; 0x24
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	40023800 	.word	0x40023800
 8005584:	40013800 	.word	0x40013800
 8005588:	40020000 	.word	0x40020000
 800558c:	40020400 	.word	0x40020400
 8005590:	40020800 	.word	0x40020800
 8005594:	40020c00 	.word	0x40020c00
 8005598:	40021000 	.word	0x40021000
 800559c:	40013c00 	.word	0x40013c00

080055a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e0bb      	b.n	8005734 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055bc:	2201      	movs	r2, #1
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4013      	ands	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	f040 80ab 	bne.w	800572e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80055d8:	4a5b      	ldr	r2, [pc, #364]	; (8005748 <HAL_GPIO_DeInit+0x1a8>)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	3302      	adds	r3, #2
 80055e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0303 	and.w	r3, r3, #3
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	220f      	movs	r2, #15
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	4013      	ands	r3, r2
 80055f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a53      	ldr	r2, [pc, #332]	; (800574c <HAL_GPIO_DeInit+0x1ac>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d019      	beq.n	8005636 <HAL_GPIO_DeInit+0x96>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a52      	ldr	r2, [pc, #328]	; (8005750 <HAL_GPIO_DeInit+0x1b0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_GPIO_DeInit+0x92>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a51      	ldr	r2, [pc, #324]	; (8005754 <HAL_GPIO_DeInit+0x1b4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00d      	beq.n	800562e <HAL_GPIO_DeInit+0x8e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a50      	ldr	r2, [pc, #320]	; (8005758 <HAL_GPIO_DeInit+0x1b8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d007      	beq.n	800562a <HAL_GPIO_DeInit+0x8a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a4f      	ldr	r2, [pc, #316]	; (800575c <HAL_GPIO_DeInit+0x1bc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d101      	bne.n	8005626 <HAL_GPIO_DeInit+0x86>
 8005622:	2304      	movs	r3, #4
 8005624:	e008      	b.n	8005638 <HAL_GPIO_DeInit+0x98>
 8005626:	2307      	movs	r3, #7
 8005628:	e006      	b.n	8005638 <HAL_GPIO_DeInit+0x98>
 800562a:	2303      	movs	r3, #3
 800562c:	e004      	b.n	8005638 <HAL_GPIO_DeInit+0x98>
 800562e:	2302      	movs	r3, #2
 8005630:	e002      	b.n	8005638 <HAL_GPIO_DeInit+0x98>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_GPIO_DeInit+0x98>
 8005636:	2300      	movs	r3, #0
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	f002 0203 	and.w	r2, r2, #3
 800563e:	0092      	lsls	r2, r2, #2
 8005640:	4093      	lsls	r3, r2
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	d132      	bne.n	80056ae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005648:	4b45      	ldr	r3, [pc, #276]	; (8005760 <HAL_GPIO_DeInit+0x1c0>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	43db      	mvns	r3, r3
 8005650:	4943      	ldr	r1, [pc, #268]	; (8005760 <HAL_GPIO_DeInit+0x1c0>)
 8005652:	4013      	ands	r3, r2
 8005654:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005656:	4b42      	ldr	r3, [pc, #264]	; (8005760 <HAL_GPIO_DeInit+0x1c0>)
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	43db      	mvns	r3, r3
 800565e:	4940      	ldr	r1, [pc, #256]	; (8005760 <HAL_GPIO_DeInit+0x1c0>)
 8005660:	4013      	ands	r3, r2
 8005662:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005664:	4b3e      	ldr	r3, [pc, #248]	; (8005760 <HAL_GPIO_DeInit+0x1c0>)
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	43db      	mvns	r3, r3
 800566c:	493c      	ldr	r1, [pc, #240]	; (8005760 <HAL_GPIO_DeInit+0x1c0>)
 800566e:	4013      	ands	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005672:	4b3b      	ldr	r3, [pc, #236]	; (8005760 <HAL_GPIO_DeInit+0x1c0>)
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	43db      	mvns	r3, r3
 800567a:	4939      	ldr	r1, [pc, #228]	; (8005760 <HAL_GPIO_DeInit+0x1c0>)
 800567c:	4013      	ands	r3, r2
 800567e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	220f      	movs	r2, #15
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005690:	4a2d      	ldr	r2, [pc, #180]	; (8005748 <HAL_GPIO_DeInit+0x1a8>)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	089b      	lsrs	r3, r3, #2
 8005696:	3302      	adds	r3, #2
 8005698:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	43da      	mvns	r2, r3
 80056a0:	4829      	ldr	r0, [pc, #164]	; (8005748 <HAL_GPIO_DeInit+0x1a8>)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	089b      	lsrs	r3, r3, #2
 80056a6:	400a      	ands	r2, r1
 80056a8:	3302      	adds	r3, #2
 80056aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	2103      	movs	r1, #3
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	43db      	mvns	r3, r3
 80056be:	401a      	ands	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	08da      	lsrs	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3208      	adds	r2, #8
 80056cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	220f      	movs	r2, #15
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	08d2      	lsrs	r2, r2, #3
 80056e4:	4019      	ands	r1, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3208      	adds	r2, #8
 80056ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	2103      	movs	r1, #3
 80056f8:	fa01 f303 	lsl.w	r3, r1, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	401a      	ands	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	2101      	movs	r1, #1
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	fa01 f303 	lsl.w	r3, r1, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	2103      	movs	r1, #3
 8005722:	fa01 f303 	lsl.w	r3, r1, r3
 8005726:	43db      	mvns	r3, r3
 8005728:	401a      	ands	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	3301      	adds	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b0f      	cmp	r3, #15
 8005738:	f67f af40 	bls.w	80055bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40013800 	.word	0x40013800
 800574c:	40020000 	.word	0x40020000
 8005750:	40020400 	.word	0x40020400
 8005754:	40020800 	.word	0x40020800
 8005758:	40020c00 	.word	0x40020c00
 800575c:	40021000 	.word	0x40021000
 8005760:	40013c00 	.word	0x40013c00

08005764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
 8005770:	4613      	mov	r3, r2
 8005772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005774:	787b      	ldrb	r3, [r7, #1]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800577a:	887a      	ldrh	r2, [r7, #2]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005780:	e003      	b.n	800578a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005782:	887b      	ldrh	r3, [r7, #2]
 8005784:	041a      	lsls	r2, r3, #16
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	619a      	str	r2, [r3, #24]
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d006      	beq.n	80057bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057ae:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fb fd3c 	bl	8001234 <HAL_GPIO_EXTI_Callback>
  }
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40013c00 	.word	0x40013c00

080057c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e11f      	b.n	8005a1a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f951 	bl	8005a96 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800581a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800582a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800582c:	f001 fc18 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 8005830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4a7b      	ldr	r2, [pc, #492]	; (8005a24 <HAL_I2C_Init+0x25c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d807      	bhi.n	800584c <HAL_I2C_Init+0x84>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a7a      	ldr	r2, [pc, #488]	; (8005a28 <HAL_I2C_Init+0x260>)
 8005840:	4293      	cmp	r3, r2
 8005842:	bf94      	ite	ls
 8005844:	2301      	movls	r3, #1
 8005846:	2300      	movhi	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	e006      	b.n	800585a <HAL_I2C_Init+0x92>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a77      	ldr	r2, [pc, #476]	; (8005a2c <HAL_I2C_Init+0x264>)
 8005850:	4293      	cmp	r3, r2
 8005852:	bf94      	ite	ls
 8005854:	2301      	movls	r3, #1
 8005856:	2300      	movhi	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0db      	b.n	8005a1a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a72      	ldr	r2, [pc, #456]	; (8005a30 <HAL_I2C_Init+0x268>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0c9b      	lsrs	r3, r3, #18
 800586c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a64      	ldr	r2, [pc, #400]	; (8005a24 <HAL_I2C_Init+0x25c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d802      	bhi.n	800589c <HAL_I2C_Init+0xd4>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	3301      	adds	r3, #1
 800589a:	e009      	b.n	80058b0 <HAL_I2C_Init+0xe8>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	4a63      	ldr	r2, [pc, #396]	; (8005a34 <HAL_I2C_Init+0x26c>)
 80058a8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ac:	099b      	lsrs	r3, r3, #6
 80058ae:	3301      	adds	r3, #1
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4956      	ldr	r1, [pc, #344]	; (8005a24 <HAL_I2C_Init+0x25c>)
 80058cc:	428b      	cmp	r3, r1
 80058ce:	d80d      	bhi.n	80058ec <HAL_I2C_Init+0x124>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1e59      	subs	r1, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	fbb1 f3f3 	udiv	r3, r1, r3
 80058de:	3301      	adds	r3, #1
 80058e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	bf38      	it	cc
 80058e8:	2304      	movcc	r3, #4
 80058ea:	e04f      	b.n	800598c <HAL_I2C_Init+0x1c4>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d111      	bne.n	8005918 <HAL_I2C_Init+0x150>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1e58      	subs	r0, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6859      	ldr	r1, [r3, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	440b      	add	r3, r1
 8005902:	fbb0 f3f3 	udiv	r3, r0, r3
 8005906:	3301      	adds	r3, #1
 8005908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf0c      	ite	eq
 8005910:	2301      	moveq	r3, #1
 8005912:	2300      	movne	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	e012      	b.n	800593e <HAL_I2C_Init+0x176>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	1e58      	subs	r0, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6859      	ldr	r1, [r3, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	0099      	lsls	r1, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	fbb0 f3f3 	udiv	r3, r0, r3
 800592e:	3301      	adds	r3, #1
 8005930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_I2C_Init+0x17e>
 8005942:	2301      	movs	r3, #1
 8005944:	e022      	b.n	800598c <HAL_I2C_Init+0x1c4>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10e      	bne.n	800596c <HAL_I2C_Init+0x1a4>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1e58      	subs	r0, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6859      	ldr	r1, [r3, #4]
 8005956:	460b      	mov	r3, r1
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	440b      	add	r3, r1
 800595c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005960:	3301      	adds	r3, #1
 8005962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596a:	e00f      	b.n	800598c <HAL_I2C_Init+0x1c4>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1e58      	subs	r0, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6859      	ldr	r1, [r3, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	0099      	lsls	r1, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005982:	3301      	adds	r3, #1
 8005984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	6809      	ldr	r1, [r1, #0]
 8005990:	4313      	orrs	r3, r2
 8005992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69da      	ldr	r2, [r3, #28]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6911      	ldr	r1, [r2, #16]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68d2      	ldr	r2, [r2, #12]
 80059c6:	4311      	orrs	r1, r2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6812      	ldr	r2, [r2, #0]
 80059cc:	430b      	orrs	r3, r1
 80059ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	000186a0 	.word	0x000186a0
 8005a28:	001e847f 	.word	0x001e847f
 8005a2c:	003d08ff 	.word	0x003d08ff
 8005a30:	431bde83 	.word	0x431bde83
 8005a34:	10624dd3 	.word	0x10624dd3

08005a38 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e021      	b.n	8005a8e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2224      	movs	r2, #36	; 0x24
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f821 	bl	8005aaa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	4608      	mov	r0, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	817b      	strh	r3, [r7, #10]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	813b      	strh	r3, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ada:	f7ff fa9f 	bl	800501c <HAL_GetTick>
 8005ade:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	f040 80d9 	bne.w	8005ca0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	2319      	movs	r3, #25
 8005af4:	2201      	movs	r2, #1
 8005af6:	496d      	ldr	r1, [pc, #436]	; (8005cac <HAL_I2C_Mem_Write+0x1ec>)
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fc99 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b04:	2302      	movs	r3, #2
 8005b06:	e0cc      	b.n	8005ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_I2C_Mem_Write+0x56>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0c5      	b.n	8005ca2 <HAL_I2C_Mem_Write+0x1e2>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d007      	beq.n	8005b3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2221      	movs	r2, #33	; 0x21
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2240      	movs	r2, #64	; 0x40
 8005b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a3a      	ldr	r2, [r7, #32]
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a4d      	ldr	r2, [pc, #308]	; (8005cb0 <HAL_I2C_Mem_Write+0x1f0>)
 8005b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b7e:	88f8      	ldrh	r0, [r7, #6]
 8005b80:	893a      	ldrh	r2, [r7, #8]
 8005b82:	8979      	ldrh	r1, [r7, #10]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	9301      	str	r3, [sp, #4]
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fad0 	bl	8006134 <I2C_RequestMemoryWrite>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d052      	beq.n	8005c40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e081      	b.n	8005ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fd1a 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00d      	beq.n	8005bca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d107      	bne.n	8005bc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e06b      	b.n	8005ca2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	781a      	ldrb	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d11b      	bne.n	8005c40 <HAL_I2C_Mem_Write+0x180>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d017      	beq.n	8005c40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1aa      	bne.n	8005b9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fd06 	bl	800665e <I2C_WaitOnBTFFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00d      	beq.n	8005c74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d107      	bne.n	8005c70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e016      	b.n	8005ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e000      	b.n	8005ca2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ca0:	2302      	movs	r3, #2
  }
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	00100002 	.word	0x00100002
 8005cb0:	ffff0000 	.word	0xffff0000

08005cb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08c      	sub	sp, #48	; 0x30
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cce:	f7ff f9a5 	bl	800501c <HAL_GetTick>
 8005cd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	f040 8208 	bne.w	80060f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	2319      	movs	r3, #25
 8005ce8:	2201      	movs	r2, #1
 8005cea:	497b      	ldr	r1, [pc, #492]	; (8005ed8 <HAL_I2C_Mem_Read+0x224>)
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fb9f 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e1fb      	b.n	80060f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_I2C_Mem_Read+0x56>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e1f4      	b.n	80060f4 <HAL_I2C_Mem_Read+0x440>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d007      	beq.n	8005d30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2222      	movs	r2, #34	; 0x22
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2240      	movs	r2, #64	; 0x40
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a5b      	ldr	r2, [pc, #364]	; (8005edc <HAL_I2C_Mem_Read+0x228>)
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d72:	88f8      	ldrh	r0, [r7, #6]
 8005d74:	893a      	ldrh	r2, [r7, #8]
 8005d76:	8979      	ldrh	r1, [r7, #10]
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4603      	mov	r3, r0
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 fa6c 	bl	8006260 <I2C_RequestMemoryRead>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e1b0      	b.n	80060f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d113      	bne.n	8005dc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	623b      	str	r3, [r7, #32]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	623b      	str	r3, [r7, #32]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	623b      	str	r3, [r7, #32]
 8005dae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e184      	b.n	80060cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d11b      	bne.n	8005e02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	e164      	b.n	80060cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d11b      	bne.n	8005e42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	e144      	b.n	80060cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e58:	e138      	b.n	80060cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	f200 80f1 	bhi.w	8006046 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d123      	bne.n	8005eb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fc35 	bl	80066e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e139      	b.n	80060f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005eb2:	e10b      	b.n	80060cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d14e      	bne.n	8005f5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4906      	ldr	r1, [pc, #24]	; (8005ee0 <HAL_I2C_Mem_Read+0x22c>)
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fab2 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e10e      	b.n	80060f4 <HAL_I2C_Mem_Read+0x440>
 8005ed6:	bf00      	nop
 8005ed8:	00100002 	.word	0x00100002
 8005edc:	ffff0000 	.word	0xffff0000
 8005ee0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f58:	e0b8      	b.n	80060cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	2200      	movs	r2, #0
 8005f62:	4966      	ldr	r1, [pc, #408]	; (80060fc <HAL_I2C_Mem_Read+0x448>)
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fa63 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0bf      	b.n	80060f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	494f      	ldr	r1, [pc, #316]	; (80060fc <HAL_I2C_Mem_Read+0x448>)
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fa35 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e091      	b.n	80060f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006044:	e042      	b.n	80060cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fb48 	bl	80066e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e04c      	b.n	80060f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b04      	cmp	r3, #4
 8006098:	d118      	bne.n	80060cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f47f aec2 	bne.w	8005e5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3728      	adds	r7, #40	; 0x28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	00010004 	.word	0x00010004

08006100 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610e:	b2db      	uxtb	r3, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	461a      	mov	r2, r3
 8006142:	4603      	mov	r3, r0
 8006144:	817b      	strh	r3, [r7, #10]
 8006146:	460b      	mov	r3, r1
 8006148:	813b      	strh	r3, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800615c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	2200      	movs	r2, #0
 8006166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f960 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00d      	beq.n	8006192 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006184:	d103      	bne.n	800618e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e05f      	b.n	8006252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006192:	897b      	ldrh	r3, [r7, #10]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	6a3a      	ldr	r2, [r7, #32]
 80061a6:	492d      	ldr	r1, [pc, #180]	; (800625c <I2C_RequestMemoryWrite+0x128>)
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f998 	bl	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e04c      	b.n	8006252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d0:	6a39      	ldr	r1, [r7, #32]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fa02 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00d      	beq.n	80061fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d107      	bne.n	80061f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e02b      	b.n	8006252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d105      	bne.n	800620c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006200:	893b      	ldrh	r3, [r7, #8]
 8006202:	b2da      	uxtb	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	611a      	str	r2, [r3, #16]
 800620a:	e021      	b.n	8006250 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800620c:	893b      	ldrh	r3, [r7, #8]
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	b29b      	uxth	r3, r3
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800621a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621c:	6a39      	ldr	r1, [r7, #32]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f9dc 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00d      	beq.n	8006246 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	2b04      	cmp	r3, #4
 8006230:	d107      	bne.n	8006242 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e005      	b.n	8006252 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006246:	893b      	ldrh	r3, [r7, #8]
 8006248:	b2da      	uxtb	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	00010002 	.word	0x00010002

08006260 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4603      	mov	r3, r0
 8006270:	817b      	strh	r3, [r7, #10]
 8006272:	460b      	mov	r3, r1
 8006274:	813b      	strh	r3, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006288:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f8c2 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c0:	d103      	bne.n	80062ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e0aa      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062ce:	897b      	ldrh	r3, [r7, #10]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	6a3a      	ldr	r2, [r7, #32]
 80062e2:	4952      	ldr	r1, [pc, #328]	; (800642c <I2C_RequestMemoryRead+0x1cc>)
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f8fa 	bl	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e097      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630c:	6a39      	ldr	r1, [r7, #32]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f964 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	2b04      	cmp	r3, #4
 8006320:	d107      	bne.n	8006332 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e076      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d105      	bne.n	8006348 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800633c:	893b      	ldrh	r3, [r7, #8]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	611a      	str	r2, [r3, #16]
 8006346:	e021      	b.n	800638c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006348:	893b      	ldrh	r3, [r7, #8]
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	b29b      	uxth	r3, r3
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006358:	6a39      	ldr	r1, [r7, #32]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f93e 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00d      	beq.n	8006382 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	2b04      	cmp	r3, #4
 800636c:	d107      	bne.n	800637e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e050      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006382:	893b      	ldrh	r3, [r7, #8]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800638c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638e:	6a39      	ldr	r1, [r7, #32]
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f923 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00d      	beq.n	80063b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d107      	bne.n	80063b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e035      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f82b 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00d      	beq.n	80063fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ee:	d103      	bne.n	80063f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e013      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063fc:	897b      	ldrh	r3, [r7, #10]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	6a3a      	ldr	r2, [r7, #32]
 8006410:	4906      	ldr	r1, [pc, #24]	; (800642c <I2C_RequestMemoryRead+0x1cc>)
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 f863 	bl	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	00010002 	.word	0x00010002

08006430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006440:	e025      	b.n	800648e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006448:	d021      	beq.n	800648e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644a:	f7fe fde7 	bl	800501c <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d116      	bne.n	800648e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f043 0220 	orr.w	r2, r3, #32
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e023      	b.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	0c1b      	lsrs	r3, r3, #16
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d10d      	bne.n	80064b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	43da      	mvns	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4013      	ands	r3, r2
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	e00c      	b.n	80064ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	43da      	mvns	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d0b6      	beq.n	8006442 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064ec:	e051      	b.n	8006592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064fc:	d123      	bne.n	8006546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006516:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0204 	orr.w	r2, r3, #4
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e046      	b.n	80065d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d021      	beq.n	8006592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654e:	f7fe fd65 	bl	800501c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	429a      	cmp	r2, r3
 800655c:	d302      	bcc.n	8006564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d116      	bne.n	8006592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f043 0220 	orr.w	r2, r3, #32
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e020      	b.n	80065d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	0c1b      	lsrs	r3, r3, #16
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d10c      	bne.n	80065b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	43da      	mvns	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4013      	ands	r3, r2
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bf14      	ite	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	2300      	moveq	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	e00b      	b.n	80065ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	43da      	mvns	r2, r3
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	4013      	ands	r3, r2
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d18d      	bne.n	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e8:	e02d      	b.n	8006646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f8ce 	bl	800678c <I2C_IsAcknowledgeFailed>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e02d      	b.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d021      	beq.n	8006646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006602:	f7fe fd0b 	bl	800501c <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	429a      	cmp	r2, r3
 8006610:	d302      	bcc.n	8006618 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d116      	bne.n	8006646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f043 0220 	orr.w	r2, r3, #32
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e007      	b.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006650:	2b80      	cmp	r3, #128	; 0x80
 8006652:	d1ca      	bne.n	80065ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800666a:	e02d      	b.n	80066c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f88d 	bl	800678c <I2C_IsAcknowledgeFailed>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e02d      	b.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d021      	beq.n	80066c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006684:	f7fe fcca 	bl	800501c <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	d302      	bcc.n	800669a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d116      	bne.n	80066c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e007      	b.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d1ca      	bne.n	800666c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066ec:	e042      	b.n	8006774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d119      	bne.n	8006730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0210 	mvn.w	r2, #16
 8006704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e029      	b.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006730:	f7fe fc74 	bl	800501c <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	429a      	cmp	r2, r3
 800673e:	d302      	bcc.n	8006746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d116      	bne.n	8006774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	f043 0220 	orr.w	r2, r3, #32
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e007      	b.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d1b5      	bne.n	80066ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a2:	d11b      	bne.n	80067dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	f043 0204 	orr.w	r2, r3, #4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e25b      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d075      	beq.n	80068f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800680a:	4ba3      	ldr	r3, [pc, #652]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 030c 	and.w	r3, r3, #12
 8006812:	2b04      	cmp	r3, #4
 8006814:	d00c      	beq.n	8006830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006816:	4ba0      	ldr	r3, [pc, #640]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800681e:	2b08      	cmp	r3, #8
 8006820:	d112      	bne.n	8006848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006822:	4b9d      	ldr	r3, [pc, #628]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800682a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800682e:	d10b      	bne.n	8006848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	4b99      	ldr	r3, [pc, #612]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d05b      	beq.n	80068f4 <HAL_RCC_OscConfig+0x108>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d157      	bne.n	80068f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e236      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006850:	d106      	bne.n	8006860 <HAL_RCC_OscConfig+0x74>
 8006852:	4b91      	ldr	r3, [pc, #580]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a90      	ldr	r2, [pc, #576]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e01d      	b.n	800689c <HAL_RCC_OscConfig+0xb0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006868:	d10c      	bne.n	8006884 <HAL_RCC_OscConfig+0x98>
 800686a:	4b8b      	ldr	r3, [pc, #556]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a8a      	ldr	r2, [pc, #552]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4b88      	ldr	r3, [pc, #544]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a87      	ldr	r2, [pc, #540]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800687c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e00b      	b.n	800689c <HAL_RCC_OscConfig+0xb0>
 8006884:	4b84      	ldr	r3, [pc, #528]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a83      	ldr	r2, [pc, #524]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800688a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	4b81      	ldr	r3, [pc, #516]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a80      	ldr	r2, [pc, #512]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800689a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d013      	beq.n	80068cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a4:	f7fe fbba 	bl	800501c <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ac:	f7fe fbb6 	bl	800501c <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b64      	cmp	r3, #100	; 0x64
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e1fb      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068be:	4b76      	ldr	r3, [pc, #472]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0xc0>
 80068ca:	e014      	b.n	80068f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068cc:	f7fe fba6 	bl	800501c <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d4:	f7fe fba2 	bl	800501c <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	; 0x64
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e1e7      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e6:	4b6c      	ldr	r3, [pc, #432]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f0      	bne.n	80068d4 <HAL_RCC_OscConfig+0xe8>
 80068f2:	e000      	b.n	80068f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d063      	beq.n	80069ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006902:	4b65      	ldr	r3, [pc, #404]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690e:	4b62      	ldr	r3, [pc, #392]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006916:	2b08      	cmp	r3, #8
 8006918:	d11c      	bne.n	8006954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691a:	4b5f      	ldr	r3, [pc, #380]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d116      	bne.n	8006954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006926:	4b5c      	ldr	r3, [pc, #368]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_RCC_OscConfig+0x152>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d001      	beq.n	800693e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e1bb      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693e:	4b56      	ldr	r3, [pc, #344]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4952      	ldr	r1, [pc, #328]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800694e:	4313      	orrs	r3, r2
 8006950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006952:	e03a      	b.n	80069ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d020      	beq.n	800699e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800695c:	4b4f      	ldr	r3, [pc, #316]	; (8006a9c <HAL_RCC_OscConfig+0x2b0>)
 800695e:	2201      	movs	r2, #1
 8006960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006962:	f7fe fb5b 	bl	800501c <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800696a:	f7fe fb57 	bl	800501c <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e19c      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697c:	4b46      	ldr	r3, [pc, #280]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0f0      	beq.n	800696a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006988:	4b43      	ldr	r3, [pc, #268]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	4940      	ldr	r1, [pc, #256]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006998:	4313      	orrs	r3, r2
 800699a:	600b      	str	r3, [r1, #0]
 800699c:	e015      	b.n	80069ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699e:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <HAL_RCC_OscConfig+0x2b0>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fe fb3a 	bl	800501c <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ac:	f7fe fb36 	bl	800501c <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e17b      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069be:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d030      	beq.n	8006a38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d016      	beq.n	8006a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069de:	4b30      	ldr	r3, [pc, #192]	; (8006aa0 <HAL_RCC_OscConfig+0x2b4>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7fe fb1a 	bl	800501c <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ec:	f7fe fb16 	bl	800501c <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e15b      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fe:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCC_OscConfig+0x200>
 8006a0a:	e015      	b.n	8006a38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a0c:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <HAL_RCC_OscConfig+0x2b4>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a12:	f7fe fb03 	bl	800501c <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a18:	e008      	b.n	8006a2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a1a:	f7fe faff 	bl	800501c <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e144      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f0      	bne.n	8006a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80a0 	beq.w	8006b86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4a:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	4a0e      	ldr	r2, [pc, #56]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a64:	6413      	str	r3, [r2, #64]	; 0x40
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <HAL_RCC_OscConfig+0x2b8>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d121      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a82:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <HAL_RCC_OscConfig+0x2b8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a07      	ldr	r2, [pc, #28]	; (8006aa4 <HAL_RCC_OscConfig+0x2b8>)
 8006a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8e:	f7fe fac5 	bl	800501c <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a94:	e011      	b.n	8006aba <HAL_RCC_OscConfig+0x2ce>
 8006a96:	bf00      	nop
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	42470000 	.word	0x42470000
 8006aa0:	42470e80 	.word	0x42470e80
 8006aa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa8:	f7fe fab8 	bl	800501c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e0fd      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aba:	4b81      	ldr	r3, [pc, #516]	; (8006cc0 <HAL_RCC_OscConfig+0x4d4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f0      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d106      	bne.n	8006adc <HAL_RCC_OscConfig+0x2f0>
 8006ace:	4b7d      	ldr	r3, [pc, #500]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	4a7c      	ldr	r2, [pc, #496]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006ad4:	f043 0301 	orr.w	r3, r3, #1
 8006ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8006ada:	e01c      	b.n	8006b16 <HAL_RCC_OscConfig+0x32a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	d10c      	bne.n	8006afe <HAL_RCC_OscConfig+0x312>
 8006ae4:	4b77      	ldr	r3, [pc, #476]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	4a76      	ldr	r2, [pc, #472]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006aea:	f043 0304 	orr.w	r3, r3, #4
 8006aee:	6713      	str	r3, [r2, #112]	; 0x70
 8006af0:	4b74      	ldr	r3, [pc, #464]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	4a73      	ldr	r2, [pc, #460]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6713      	str	r3, [r2, #112]	; 0x70
 8006afc:	e00b      	b.n	8006b16 <HAL_RCC_OscConfig+0x32a>
 8006afe:	4b71      	ldr	r3, [pc, #452]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	4a70      	ldr	r2, [pc, #448]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0a:	4b6e      	ldr	r3, [pc, #440]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	4a6d      	ldr	r2, [pc, #436]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b10:	f023 0304 	bic.w	r3, r3, #4
 8006b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d015      	beq.n	8006b4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1e:	f7fe fa7d 	bl	800501c <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7fe fa79 	bl	800501c <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e0bc      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3c:	4b61      	ldr	r3, [pc, #388]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0ee      	beq.n	8006b26 <HAL_RCC_OscConfig+0x33a>
 8006b48:	e014      	b.n	8006b74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b4a:	f7fe fa67 	bl	800501c <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b50:	e00a      	b.n	8006b68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b52:	f7fe fa63 	bl	800501c <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e0a6      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b68:	4b56      	ldr	r3, [pc, #344]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1ee      	bne.n	8006b52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d105      	bne.n	8006b86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b7a:	4b52      	ldr	r3, [pc, #328]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	4a51      	ldr	r2, [pc, #324]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8092 	beq.w	8006cb4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b90:	4b4c      	ldr	r3, [pc, #304]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 030c 	and.w	r3, r3, #12
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d05c      	beq.n	8006c56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d141      	bne.n	8006c28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba4:	4b48      	ldr	r3, [pc, #288]	; (8006cc8 <HAL_RCC_OscConfig+0x4dc>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006baa:	f7fe fa37 	bl	800501c <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb2:	f7fe fa33 	bl	800501c <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e078      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc4:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1f0      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	019b      	lsls	r3, r3, #6
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	3b01      	subs	r3, #1
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	4933      	ldr	r1, [pc, #204]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bfa:	4b33      	ldr	r3, [pc, #204]	; (8006cc8 <HAL_RCC_OscConfig+0x4dc>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c00:	f7fe fa0c 	bl	800501c <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c08:	f7fe fa08 	bl	800501c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e04d      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1a:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x41c>
 8006c26:	e045      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c28:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <HAL_RCC_OscConfig+0x4dc>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2e:	f7fe f9f5 	bl	800501c <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c36:	f7fe f9f1 	bl	800501c <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e036      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c48:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f0      	bne.n	8006c36 <HAL_RCC_OscConfig+0x44a>
 8006c54:	e02e      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e029      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c62:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d11c      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d115      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d10d      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d106      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d001      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40007000 	.word	0x40007000
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	42470060 	.word	0x42470060

08006ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e0cc      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce0:	4b68      	ldr	r3, [pc, #416]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d90c      	bls.n	8006d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cee:	4b65      	ldr	r3, [pc, #404]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf6:	4b63      	ldr	r3, [pc, #396]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0b8      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d020      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d20:	4b59      	ldr	r3, [pc, #356]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	4a58      	ldr	r2, [pc, #352]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d38:	4b53      	ldr	r3, [pc, #332]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4a52      	ldr	r2, [pc, #328]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d44:	4b50      	ldr	r3, [pc, #320]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	494d      	ldr	r1, [pc, #308]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d044      	beq.n	8006dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d107      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6a:	4b47      	ldr	r3, [pc, #284]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d119      	bne.n	8006daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e07f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d003      	beq.n	8006d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d107      	bne.n	8006d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d8a:	4b3f      	ldr	r3, [pc, #252]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e06f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d9a:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e067      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006daa:	4b37      	ldr	r3, [pc, #220]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f023 0203 	bic.w	r2, r3, #3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	4934      	ldr	r1, [pc, #208]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dbc:	f7fe f92e 	bl	800501c <HAL_GetTick>
 8006dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc2:	e00a      	b.n	8006dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc4:	f7fe f92a 	bl	800501c <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e04f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dda:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 020c 	and.w	r2, r3, #12
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d1eb      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dec:	4b25      	ldr	r3, [pc, #148]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d20c      	bcs.n	8006e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfa:	4b22      	ldr	r3, [pc, #136]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e02:	4b20      	ldr	r3, [pc, #128]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d001      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e032      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e20:	4b19      	ldr	r3, [pc, #100]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	4916      	ldr	r1, [pc, #88]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	490e      	ldr	r1, [pc, #56]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e52:	f000 f821 	bl	8006e98 <HAL_RCC_GetSysClockFreq>
 8006e56:	4601      	mov	r1, r0
 8006e58:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	091b      	lsrs	r3, r3, #4
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <HAL_RCC_ClockConfig+0x1c0>)
 8006e64:	5cd3      	ldrb	r3, [r2, r3]
 8006e66:	fa21 f303 	lsr.w	r3, r1, r3
 8006e6a:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe f88e 	bl	8004f94 <HAL_InitTick>

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40023c00 	.word	0x40023c00
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	0800a5cc 	.word	0x0800a5cc
 8006e90:	20000184 	.word	0x20000184
 8006e94:	2000025c 	.word	0x2000025c

08006e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	607b      	str	r3, [r7, #4]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eae:	4b63      	ldr	r3, [pc, #396]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 030c 	and.w	r3, r3, #12
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d007      	beq.n	8006eca <HAL_RCC_GetSysClockFreq+0x32>
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d008      	beq.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x38>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f040 80b4 	bne.w	800702c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec4:	4b5e      	ldr	r3, [pc, #376]	; (8007040 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006ec6:	60bb      	str	r3, [r7, #8]
       break;
 8006ec8:	e0b3      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eca:	4b5e      	ldr	r3, [pc, #376]	; (8007044 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006ecc:	60bb      	str	r3, [r7, #8]
      break;
 8006ece:	e0b0      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ed0:	4b5a      	ldr	r3, [pc, #360]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ed8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eda:	4b58      	ldr	r3, [pc, #352]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d04a      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee6:	4b55      	ldr	r3, [pc, #340]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	099b      	lsrs	r3, r3, #6
 8006eec:	f04f 0400 	mov.w	r4, #0
 8006ef0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	ea03 0501 	and.w	r5, r3, r1
 8006efc:	ea04 0602 	and.w	r6, r4, r2
 8006f00:	4629      	mov	r1, r5
 8006f02:	4632      	mov	r2, r6
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	f04f 0400 	mov.w	r4, #0
 8006f0c:	0154      	lsls	r4, r2, #5
 8006f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f12:	014b      	lsls	r3, r1, #5
 8006f14:	4619      	mov	r1, r3
 8006f16:	4622      	mov	r2, r4
 8006f18:	1b49      	subs	r1, r1, r5
 8006f1a:	eb62 0206 	sbc.w	r2, r2, r6
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	f04f 0400 	mov.w	r4, #0
 8006f26:	0194      	lsls	r4, r2, #6
 8006f28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f2c:	018b      	lsls	r3, r1, #6
 8006f2e:	1a5b      	subs	r3, r3, r1
 8006f30:	eb64 0402 	sbc.w	r4, r4, r2
 8006f34:	f04f 0100 	mov.w	r1, #0
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	00e2      	lsls	r2, r4, #3
 8006f3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f42:	00d9      	lsls	r1, r3, #3
 8006f44:	460b      	mov	r3, r1
 8006f46:	4614      	mov	r4, r2
 8006f48:	195b      	adds	r3, r3, r5
 8006f4a:	eb44 0406 	adc.w	r4, r4, r6
 8006f4e:	f04f 0100 	mov.w	r1, #0
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	0262      	lsls	r2, r4, #9
 8006f58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006f5c:	0259      	lsls	r1, r3, #9
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	4621      	mov	r1, r4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f04f 0400 	mov.w	r4, #0
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4623      	mov	r3, r4
 8006f70:	f7f9 fe22 	bl	8000bb8 <__aeabi_uldivmod>
 8006f74:	4603      	mov	r3, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e049      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f7c:	4b2f      	ldr	r3, [pc, #188]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	099b      	lsrs	r3, r3, #6
 8006f82:	f04f 0400 	mov.w	r4, #0
 8006f86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	ea03 0501 	and.w	r5, r3, r1
 8006f92:	ea04 0602 	and.w	r6, r4, r2
 8006f96:	4629      	mov	r1, r5
 8006f98:	4632      	mov	r2, r6
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	f04f 0400 	mov.w	r4, #0
 8006fa2:	0154      	lsls	r4, r2, #5
 8006fa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006fa8:	014b      	lsls	r3, r1, #5
 8006faa:	4619      	mov	r1, r3
 8006fac:	4622      	mov	r2, r4
 8006fae:	1b49      	subs	r1, r1, r5
 8006fb0:	eb62 0206 	sbc.w	r2, r2, r6
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	f04f 0400 	mov.w	r4, #0
 8006fbc:	0194      	lsls	r4, r2, #6
 8006fbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006fc2:	018b      	lsls	r3, r1, #6
 8006fc4:	1a5b      	subs	r3, r3, r1
 8006fc6:	eb64 0402 	sbc.w	r4, r4, r2
 8006fca:	f04f 0100 	mov.w	r1, #0
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	00e2      	lsls	r2, r4, #3
 8006fd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006fd8:	00d9      	lsls	r1, r3, #3
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4614      	mov	r4, r2
 8006fde:	195b      	adds	r3, r3, r5
 8006fe0:	eb44 0406 	adc.w	r4, r4, r6
 8006fe4:	f04f 0100 	mov.w	r1, #0
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	02a2      	lsls	r2, r4, #10
 8006fee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ff2:	0299      	lsls	r1, r3, #10
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4614      	mov	r4, r2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f04f 0400 	mov.w	r4, #0
 8007002:	461a      	mov	r2, r3
 8007004:	4623      	mov	r3, r4
 8007006:	f7f9 fdd7 	bl	8000bb8 <__aeabi_uldivmod>
 800700a:	4603      	mov	r3, r0
 800700c:	460c      	mov	r4, r1
 800700e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007010:	4b0a      	ldr	r3, [pc, #40]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	3301      	adds	r3, #1
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	60bb      	str	r3, [r7, #8]
      break;
 800702a:	e002      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800702e:	60bb      	str	r3, [r7, #8]
      break;
 8007030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007032:	68bb      	ldr	r3, [r7, #8]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800703c:	40023800 	.word	0x40023800
 8007040:	00f42400 	.word	0x00f42400
 8007044:	007a1200 	.word	0x007a1200

08007048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800704c:	4b03      	ldr	r3, [pc, #12]	; (800705c <HAL_RCC_GetHCLKFreq+0x14>)
 800704e:	681b      	ldr	r3, [r3, #0]
}
 8007050:	4618      	mov	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20000184 	.word	0x20000184

08007060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007064:	f7ff fff0 	bl	8007048 <HAL_RCC_GetHCLKFreq>
 8007068:	4601      	mov	r1, r0
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	0a9b      	lsrs	r3, r3, #10
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	4a03      	ldr	r2, [pc, #12]	; (8007084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007076:	5cd3      	ldrb	r3, [r2, r3]
 8007078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40023800 	.word	0x40023800
 8007084:	0800a5dc 	.word	0x0800a5dc

08007088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800708c:	f7ff ffdc 	bl	8007048 <HAL_RCC_GetHCLKFreq>
 8007090:	4601      	mov	r1, r0
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	0b5b      	lsrs	r3, r3, #13
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	4a03      	ldr	r2, [pc, #12]	; (80070ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800709e:	5cd3      	ldrb	r3, [r2, r3]
 80070a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40023800 	.word	0x40023800
 80070ac:	0800a5dc 	.word	0x0800a5dc

080070b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e01d      	b.n	80070fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fa f988 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f000 f95e 	bl	80073b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0201 	orr.w	r2, r2, #1
 800711c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b06      	cmp	r3, #6
 800712e:	d007      	beq.n	8007140 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b02      	cmp	r3, #2
 8007162:	d122      	bne.n	80071aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b02      	cmp	r3, #2
 8007170:	d11b      	bne.n	80071aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f06f 0202 	mvn.w	r2, #2
 800717a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	f003 0303 	and.w	r3, r3, #3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f8ee 	bl	8007372 <HAL_TIM_IC_CaptureCallback>
 8007196:	e005      	b.n	80071a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f8e0 	bl	800735e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f8f1 	bl	8007386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d122      	bne.n	80071fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d11b      	bne.n	80071fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f06f 0204 	mvn.w	r2, #4
 80071ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f8c4 	bl	8007372 <HAL_TIM_IC_CaptureCallback>
 80071ea:	e005      	b.n	80071f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f8b6 	bl	800735e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f8c7 	bl	8007386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b08      	cmp	r3, #8
 800720a:	d122      	bne.n	8007252 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b08      	cmp	r3, #8
 8007218:	d11b      	bne.n	8007252 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f06f 0208 	mvn.w	r2, #8
 8007222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2204      	movs	r2, #4
 8007228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f89a 	bl	8007372 <HAL_TIM_IC_CaptureCallback>
 800723e:	e005      	b.n	800724c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f88c 	bl	800735e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f89d 	bl	8007386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	2b10      	cmp	r3, #16
 800725e:	d122      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b10      	cmp	r3, #16
 800726c:	d11b      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f06f 0210 	mvn.w	r2, #16
 8007276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2208      	movs	r2, #8
 800727c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f870 	bl	8007372 <HAL_TIM_IC_CaptureCallback>
 8007292:	e005      	b.n	80072a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f862 	bl	800735e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f873 	bl	8007386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d10e      	bne.n	80072d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d107      	bne.n	80072d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f06f 0201 	mvn.w	r2, #1
 80072ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7fa f80d 	bl	80012ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d10e      	bne.n	80072fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d107      	bne.n	80072fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f8e3 	bl	80074c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d10e      	bne.n	800732a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b40      	cmp	r3, #64	; 0x40
 8007318:	d107      	bne.n	800732a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f838 	bl	800739a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b20      	cmp	r3, #32
 8007336:	d10e      	bne.n	8007356 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b20      	cmp	r3, #32
 8007344:	d107      	bne.n	8007356 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f06f 0220 	mvn.w	r2, #32
 800734e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f8ad 	bl	80074b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
	...

080073b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a34      	ldr	r2, [pc, #208]	; (8007494 <TIM_Base_SetConfig+0xe4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00f      	beq.n	80073e8 <TIM_Base_SetConfig+0x38>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ce:	d00b      	beq.n	80073e8 <TIM_Base_SetConfig+0x38>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a31      	ldr	r2, [pc, #196]	; (8007498 <TIM_Base_SetConfig+0xe8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d007      	beq.n	80073e8 <TIM_Base_SetConfig+0x38>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a30      	ldr	r2, [pc, #192]	; (800749c <TIM_Base_SetConfig+0xec>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_Base_SetConfig+0x38>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a2f      	ldr	r2, [pc, #188]	; (80074a0 <TIM_Base_SetConfig+0xf0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d108      	bne.n	80073fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a25      	ldr	r2, [pc, #148]	; (8007494 <TIM_Base_SetConfig+0xe4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01b      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d017      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a22      	ldr	r2, [pc, #136]	; (8007498 <TIM_Base_SetConfig+0xe8>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a21      	ldr	r2, [pc, #132]	; (800749c <TIM_Base_SetConfig+0xec>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00f      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a20      	ldr	r2, [pc, #128]	; (80074a0 <TIM_Base_SetConfig+0xf0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00b      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1f      	ldr	r2, [pc, #124]	; (80074a4 <TIM_Base_SetConfig+0xf4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <TIM_Base_SetConfig+0xf8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <TIM_Base_SetConfig+0xfc>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d108      	bne.n	800744c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a08      	ldr	r2, [pc, #32]	; (8007494 <TIM_Base_SetConfig+0xe4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d103      	bne.n	8007480 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	615a      	str	r2, [r3, #20]
}
 8007486:	bf00      	nop
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40010000 	.word	0x40010000
 8007498:	40000400 	.word	0x40000400
 800749c:	40000800 	.word	0x40000800
 80074a0:	40000c00 	.word	0x40000c00
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40014400 	.word	0x40014400
 80074ac:	40014800 	.word	0x40014800

080074b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e03f      	b.n	800756a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d106      	bne.n	8007504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7f9 ff9c 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2224      	movs	r2, #36	; 0x24
 8007508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800751a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc0f 	bl	8007d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	691a      	ldr	r2, [r3, #16]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b088      	sub	sp, #32
 8007576:	af02      	add	r7, sp, #8
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	4613      	mov	r3, r2
 8007580:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b20      	cmp	r3, #32
 8007590:	f040 8083 	bne.w	800769a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_UART_Transmit+0x2e>
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e07b      	b.n	800769c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_UART_Transmit+0x40>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e074      	b.n	800769c <HAL_UART_Transmit+0x12a>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2221      	movs	r2, #33	; 0x21
 80075c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80075c8:	f7fd fd28 	bl	800501c <HAL_GetTick>
 80075cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	88fa      	ldrh	r2, [r7, #6]
 80075d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	88fa      	ldrh	r2, [r7, #6]
 80075d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80075e2:	e042      	b.n	800766a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fa:	d122      	bne.n	8007642 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2200      	movs	r2, #0
 8007604:	2180      	movs	r1, #128	; 0x80
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fa2e 	bl	8007a68 <UART_WaitOnFlagUntilTimeout>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e042      	b.n	800769c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	461a      	mov	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007628:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d103      	bne.n	800763a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	3302      	adds	r3, #2
 8007636:	60bb      	str	r3, [r7, #8]
 8007638:	e017      	b.n	800766a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	3301      	adds	r3, #1
 800763e:	60bb      	str	r3, [r7, #8]
 8007640:	e013      	b.n	800766a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2200      	movs	r2, #0
 800764a:	2180      	movs	r1, #128	; 0x80
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fa0b 	bl	8007a68 <UART_WaitOnFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e01f      	b.n	800769c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	60ba      	str	r2, [r7, #8]
 8007662:	781a      	ldrb	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1b7      	bne.n	80075e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2200      	movs	r2, #0
 800767c:	2140      	movs	r1, #64	; 0x40
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f9f2 	bl	8007a68 <UART_WaitOnFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e006      	b.n	800769c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	e000      	b.n	800769c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800769a:	2302      	movs	r3, #2
  }
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	4613      	mov	r3, r2
 80076b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	f040 8090 	bne.w	80077e6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <HAL_UART_Receive+0x2e>
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e088      	b.n	80077e8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_UART_Receive+0x40>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e081      	b.n	80077e8 <HAL_UART_Receive+0x144>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2222      	movs	r2, #34	; 0x22
 80076f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80076fa:	f7fd fc8f 	bl	800501c <HAL_GetTick>
 80076fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	88fa      	ldrh	r2, [r7, #6]
 8007704:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	88fa      	ldrh	r2, [r7, #6]
 800770a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007714:	e05c      	b.n	80077d0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772c:	d12b      	bne.n	8007786 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2200      	movs	r2, #0
 8007736:	2120      	movs	r1, #32
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f995 	bl	8007a68 <UART_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e04f      	b.n	80077e8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10c      	bne.n	800776e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007760:	b29a      	uxth	r2, r3
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	3302      	adds	r3, #2
 800776a:	60bb      	str	r3, [r7, #8]
 800776c:	e030      	b.n	80077d0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	b29b      	uxth	r3, r3
 8007776:	b2db      	uxtb	r3, r3
 8007778:	b29a      	uxth	r2, r3
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	3301      	adds	r3, #1
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	e024      	b.n	80077d0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2200      	movs	r2, #0
 800778e:	2120      	movs	r1, #32
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f969 	bl	8007a68 <UART_WaitOnFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e023      	b.n	80077e8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d108      	bne.n	80077ba <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	60ba      	str	r2, [r7, #8]
 80077b4:	b2ca      	uxtb	r2, r1
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	e00a      	b.n	80077d0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	1c59      	adds	r1, r3, #1
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d19d      	bne.n	8007716 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2220      	movs	r2, #32
 80077de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	e000      	b.n	80077e8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80077e6:	2302      	movs	r3, #2
  }
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f003 030f 	and.w	r3, r3, #15
 800781e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10d      	bne.n	8007842 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d008      	beq.n	8007842 <HAL_UART_IRQHandler+0x52>
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f9fe 	bl	8007c3c <UART_Receive_IT>
      return;
 8007840:	e0d1      	b.n	80079e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 80b0 	beq.w	80079aa <HAL_UART_IRQHandler+0x1ba>
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d105      	bne.n	8007860 <HAL_UART_IRQHandler+0x70>
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80a5 	beq.w	80079aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <HAL_UART_IRQHandler+0x90>
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <HAL_UART_IRQHandler+0xb0>
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007898:	f043 0202 	orr.w	r2, r3, #2
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <HAL_UART_IRQHandler+0xd0>
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b8:	f043 0204 	orr.w	r2, r3, #4
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00f      	beq.n	80078ea <HAL_UART_IRQHandler+0xfa>
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <HAL_UART_IRQHandler+0xee>
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	f043 0208 	orr.w	r2, r3, #8
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d078      	beq.n	80079e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f003 0320 	and.w	r3, r3, #32
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_UART_IRQHandler+0x11c>
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f003 0320 	and.w	r3, r3, #32
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f998 	bl	8007c3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	bf0c      	ite	eq
 800791a:	2301      	moveq	r3, #1
 800791c:	2300      	movne	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d102      	bne.n	8007934 <HAL_UART_IRQHandler+0x144>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d031      	beq.n	8007998 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f8e1 	bl	8007afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d123      	bne.n	8007990 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007956:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d013      	beq.n	8007988 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007964:	4a21      	ldr	r2, [pc, #132]	; (80079ec <HAL_UART_IRQHandler+0x1fc>)
 8007966:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796c:	4618      	mov	r0, r3
 800796e:	f7fd fc72 	bl	8005256 <HAL_DMA_Abort_IT>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d016      	beq.n	80079a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007982:	4610      	mov	r0, r2
 8007984:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007986:	e00e      	b.n	80079a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f845 	bl	8007a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798e:	e00a      	b.n	80079a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f841 	bl	8007a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007996:	e006      	b.n	80079a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f83d 	bl	8007a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80079a4:	e01e      	b.n	80079e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a6:	bf00      	nop
    return;
 80079a8:	e01c      	b.n	80079e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d008      	beq.n	80079c6 <HAL_UART_IRQHandler+0x1d6>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8ce 	bl	8007b60 <UART_Transmit_IT>
    return;
 80079c4:	e00f      	b.n	80079e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <HAL_UART_IRQHandler+0x1f6>
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f916 	bl	8007c0c <UART_EndTransmit_IT>
    return;
 80079e0:	bf00      	nop
 80079e2:	e000      	b.n	80079e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80079e4:	bf00      	nop
  }
}
 80079e6:	3720      	adds	r7, #32
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	08007b39 	.word	0x08007b39

080079f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b2db      	uxtb	r3, r3
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a78:	e02c      	b.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a80:	d028      	beq.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d007      	beq.n	8007a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a88:	f7fd fac8 	bl	800501c <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d21d      	bcs.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007aa6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695a      	ldr	r2, [r3, #20]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0201 	bic.w	r2, r2, #1
 8007ab6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e00f      	b.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	4013      	ands	r3, r2
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	bf0c      	ite	eq
 8007ae4:	2301      	moveq	r3, #1
 8007ae6:	2300      	movne	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d0c3      	beq.n	8007a7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	695a      	ldr	r2, [r3, #20]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff ff60 	bl	8007a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b21      	cmp	r3, #33	; 0x21
 8007b72:	d144      	bne.n	8007bfe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7c:	d11a      	bne.n	8007bb4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b92:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d105      	bne.n	8007ba8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	1c9a      	adds	r2, r3, #2
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	621a      	str	r2, [r3, #32]
 8007ba6:	e00e      	b.n	8007bc6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	621a      	str	r2, [r3, #32]
 8007bb2:	e008      	b.n	8007bc6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	1c59      	adds	r1, r3, #1
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6211      	str	r1, [r2, #32]
 8007bbe:	781a      	ldrb	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10f      	bne.n	8007bfa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007be8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e000      	b.n	8007c00 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007bfe:	2302      	movs	r3, #2
  }
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff fedf 	bl	80079f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b22      	cmp	r3, #34	; 0x22
 8007c4e:	d171      	bne.n	8007d34 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c58:	d123      	bne.n	8007ca2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10e      	bne.n	8007c86 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7e:	1c9a      	adds	r2, r3, #2
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28
 8007c84:	e029      	b.n	8007cda <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8007ca0:	e01b      	b.n	8007cda <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10a      	bne.n	8007cc0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6858      	ldr	r0, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	1c59      	adds	r1, r3, #1
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	6291      	str	r1, [r2, #40]	; 0x28
 8007cba:	b2c2      	uxtb	r2, r0
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	e00c      	b.n	8007cda <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	1c58      	adds	r0, r3, #1
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	6288      	str	r0, [r1, #40]	; 0x28
 8007cd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d120      	bne.n	8007d30 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0220 	bic.w	r2, r2, #32
 8007cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	695a      	ldr	r2, [r3, #20]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0201 	bic.w	r2, r2, #1
 8007d1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff fe6c 	bl	8007a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e002      	b.n	8007d36 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e000      	b.n	8007d36 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007d34:	2302      	movs	r3, #2
  }
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	b085      	sub	sp, #20
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007d82:	f023 030c 	bic.w	r3, r3, #12
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dae:	f040 818b 	bne.w	80080c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4ac1      	ldr	r2, [pc, #772]	; (80080bc <UART_SetConfig+0x37c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d005      	beq.n	8007dc8 <UART_SetConfig+0x88>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4abf      	ldr	r2, [pc, #764]	; (80080c0 <UART_SetConfig+0x380>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	f040 80bd 	bne.w	8007f42 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007dc8:	f7ff f95e 	bl	8007088 <HAL_RCC_GetPCLK2Freq>
 8007dcc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	461d      	mov	r5, r3
 8007dd2:	f04f 0600 	mov.w	r6, #0
 8007dd6:	46a8      	mov	r8, r5
 8007dd8:	46b1      	mov	r9, r6
 8007dda:	eb18 0308 	adds.w	r3, r8, r8
 8007dde:	eb49 0409 	adc.w	r4, r9, r9
 8007de2:	4698      	mov	r8, r3
 8007de4:	46a1      	mov	r9, r4
 8007de6:	eb18 0805 	adds.w	r8, r8, r5
 8007dea:	eb49 0906 	adc.w	r9, r9, r6
 8007dee:	f04f 0100 	mov.w	r1, #0
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007dfa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007dfe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e02:	4688      	mov	r8, r1
 8007e04:	4691      	mov	r9, r2
 8007e06:	eb18 0005 	adds.w	r0, r8, r5
 8007e0a:	eb49 0106 	adc.w	r1, r9, r6
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	461d      	mov	r5, r3
 8007e14:	f04f 0600 	mov.w	r6, #0
 8007e18:	196b      	adds	r3, r5, r5
 8007e1a:	eb46 0406 	adc.w	r4, r6, r6
 8007e1e:	461a      	mov	r2, r3
 8007e20:	4623      	mov	r3, r4
 8007e22:	f7f8 fec9 	bl	8000bb8 <__aeabi_uldivmod>
 8007e26:	4603      	mov	r3, r0
 8007e28:	460c      	mov	r4, r1
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	4ba5      	ldr	r3, [pc, #660]	; (80080c4 <UART_SetConfig+0x384>)
 8007e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e32:	095b      	lsrs	r3, r3, #5
 8007e34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	461d      	mov	r5, r3
 8007e3c:	f04f 0600 	mov.w	r6, #0
 8007e40:	46a9      	mov	r9, r5
 8007e42:	46b2      	mov	sl, r6
 8007e44:	eb19 0309 	adds.w	r3, r9, r9
 8007e48:	eb4a 040a 	adc.w	r4, sl, sl
 8007e4c:	4699      	mov	r9, r3
 8007e4e:	46a2      	mov	sl, r4
 8007e50:	eb19 0905 	adds.w	r9, r9, r5
 8007e54:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e58:	f04f 0100 	mov.w	r1, #0
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	4692      	mov	sl, r2
 8007e70:	eb19 0005 	adds.w	r0, r9, r5
 8007e74:	eb4a 0106 	adc.w	r1, sl, r6
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	461d      	mov	r5, r3
 8007e7e:	f04f 0600 	mov.w	r6, #0
 8007e82:	196b      	adds	r3, r5, r5
 8007e84:	eb46 0406 	adc.w	r4, r6, r6
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4623      	mov	r3, r4
 8007e8c:	f7f8 fe94 	bl	8000bb8 <__aeabi_uldivmod>
 8007e90:	4603      	mov	r3, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	461a      	mov	r2, r3
 8007e96:	4b8b      	ldr	r3, [pc, #556]	; (80080c4 <UART_SetConfig+0x384>)
 8007e98:	fba3 1302 	umull	r1, r3, r3, r2
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	2164      	movs	r1, #100	; 0x64
 8007ea0:	fb01 f303 	mul.w	r3, r1, r3
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	3332      	adds	r3, #50	; 0x32
 8007eaa:	4a86      	ldr	r2, [pc, #536]	; (80080c4 <UART_SetConfig+0x384>)
 8007eac:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eb8:	4498      	add	r8, r3
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	461d      	mov	r5, r3
 8007ebe:	f04f 0600 	mov.w	r6, #0
 8007ec2:	46a9      	mov	r9, r5
 8007ec4:	46b2      	mov	sl, r6
 8007ec6:	eb19 0309 	adds.w	r3, r9, r9
 8007eca:	eb4a 040a 	adc.w	r4, sl, sl
 8007ece:	4699      	mov	r9, r3
 8007ed0:	46a2      	mov	sl, r4
 8007ed2:	eb19 0905 	adds.w	r9, r9, r5
 8007ed6:	eb4a 0a06 	adc.w	sl, sl, r6
 8007eda:	f04f 0100 	mov.w	r1, #0
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ee6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007eea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007eee:	4689      	mov	r9, r1
 8007ef0:	4692      	mov	sl, r2
 8007ef2:	eb19 0005 	adds.w	r0, r9, r5
 8007ef6:	eb4a 0106 	adc.w	r1, sl, r6
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	461d      	mov	r5, r3
 8007f00:	f04f 0600 	mov.w	r6, #0
 8007f04:	196b      	adds	r3, r5, r5
 8007f06:	eb46 0406 	adc.w	r4, r6, r6
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	f7f8 fe53 	bl	8000bb8 <__aeabi_uldivmod>
 8007f12:	4603      	mov	r3, r0
 8007f14:	460c      	mov	r4, r1
 8007f16:	461a      	mov	r2, r3
 8007f18:	4b6a      	ldr	r3, [pc, #424]	; (80080c4 <UART_SetConfig+0x384>)
 8007f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	2164      	movs	r1, #100	; 0x64
 8007f22:	fb01 f303 	mul.w	r3, r1, r3
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	3332      	adds	r3, #50	; 0x32
 8007f2c:	4a65      	ldr	r2, [pc, #404]	; (80080c4 <UART_SetConfig+0x384>)
 8007f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	f003 0207 	and.w	r2, r3, #7
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4442      	add	r2, r8
 8007f3e:	609a      	str	r2, [r3, #8]
 8007f40:	e26f      	b.n	8008422 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f42:	f7ff f88d 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 8007f46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	461d      	mov	r5, r3
 8007f4c:	f04f 0600 	mov.w	r6, #0
 8007f50:	46a8      	mov	r8, r5
 8007f52:	46b1      	mov	r9, r6
 8007f54:	eb18 0308 	adds.w	r3, r8, r8
 8007f58:	eb49 0409 	adc.w	r4, r9, r9
 8007f5c:	4698      	mov	r8, r3
 8007f5e:	46a1      	mov	r9, r4
 8007f60:	eb18 0805 	adds.w	r8, r8, r5
 8007f64:	eb49 0906 	adc.w	r9, r9, r6
 8007f68:	f04f 0100 	mov.w	r1, #0
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f7c:	4688      	mov	r8, r1
 8007f7e:	4691      	mov	r9, r2
 8007f80:	eb18 0005 	adds.w	r0, r8, r5
 8007f84:	eb49 0106 	adc.w	r1, r9, r6
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	461d      	mov	r5, r3
 8007f8e:	f04f 0600 	mov.w	r6, #0
 8007f92:	196b      	adds	r3, r5, r5
 8007f94:	eb46 0406 	adc.w	r4, r6, r6
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	f7f8 fe0c 	bl	8000bb8 <__aeabi_uldivmod>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4b47      	ldr	r3, [pc, #284]	; (80080c4 <UART_SetConfig+0x384>)
 8007fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	461d      	mov	r5, r3
 8007fb6:	f04f 0600 	mov.w	r6, #0
 8007fba:	46a9      	mov	r9, r5
 8007fbc:	46b2      	mov	sl, r6
 8007fbe:	eb19 0309 	adds.w	r3, r9, r9
 8007fc2:	eb4a 040a 	adc.w	r4, sl, sl
 8007fc6:	4699      	mov	r9, r3
 8007fc8:	46a2      	mov	sl, r4
 8007fca:	eb19 0905 	adds.w	r9, r9, r5
 8007fce:	eb4a 0a06 	adc.w	sl, sl, r6
 8007fd2:	f04f 0100 	mov.w	r1, #0
 8007fd6:	f04f 0200 	mov.w	r2, #0
 8007fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fe6:	4689      	mov	r9, r1
 8007fe8:	4692      	mov	sl, r2
 8007fea:	eb19 0005 	adds.w	r0, r9, r5
 8007fee:	eb4a 0106 	adc.w	r1, sl, r6
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	461d      	mov	r5, r3
 8007ff8:	f04f 0600 	mov.w	r6, #0
 8007ffc:	196b      	adds	r3, r5, r5
 8007ffe:	eb46 0406 	adc.w	r4, r6, r6
 8008002:	461a      	mov	r2, r3
 8008004:	4623      	mov	r3, r4
 8008006:	f7f8 fdd7 	bl	8000bb8 <__aeabi_uldivmod>
 800800a:	4603      	mov	r3, r0
 800800c:	460c      	mov	r4, r1
 800800e:	461a      	mov	r2, r3
 8008010:	4b2c      	ldr	r3, [pc, #176]	; (80080c4 <UART_SetConfig+0x384>)
 8008012:	fba3 1302 	umull	r1, r3, r3, r2
 8008016:	095b      	lsrs	r3, r3, #5
 8008018:	2164      	movs	r1, #100	; 0x64
 800801a:	fb01 f303 	mul.w	r3, r1, r3
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	3332      	adds	r3, #50	; 0x32
 8008024:	4a27      	ldr	r2, [pc, #156]	; (80080c4 <UART_SetConfig+0x384>)
 8008026:	fba2 2303 	umull	r2, r3, r2, r3
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008032:	4498      	add	r8, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	461d      	mov	r5, r3
 8008038:	f04f 0600 	mov.w	r6, #0
 800803c:	46a9      	mov	r9, r5
 800803e:	46b2      	mov	sl, r6
 8008040:	eb19 0309 	adds.w	r3, r9, r9
 8008044:	eb4a 040a 	adc.w	r4, sl, sl
 8008048:	4699      	mov	r9, r3
 800804a:	46a2      	mov	sl, r4
 800804c:	eb19 0905 	adds.w	r9, r9, r5
 8008050:	eb4a 0a06 	adc.w	sl, sl, r6
 8008054:	f04f 0100 	mov.w	r1, #0
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008060:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008064:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008068:	4689      	mov	r9, r1
 800806a:	4692      	mov	sl, r2
 800806c:	eb19 0005 	adds.w	r0, r9, r5
 8008070:	eb4a 0106 	adc.w	r1, sl, r6
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	461d      	mov	r5, r3
 800807a:	f04f 0600 	mov.w	r6, #0
 800807e:	196b      	adds	r3, r5, r5
 8008080:	eb46 0406 	adc.w	r4, r6, r6
 8008084:	461a      	mov	r2, r3
 8008086:	4623      	mov	r3, r4
 8008088:	f7f8 fd96 	bl	8000bb8 <__aeabi_uldivmod>
 800808c:	4603      	mov	r3, r0
 800808e:	460c      	mov	r4, r1
 8008090:	461a      	mov	r2, r3
 8008092:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <UART_SetConfig+0x384>)
 8008094:	fba3 1302 	umull	r1, r3, r3, r2
 8008098:	095b      	lsrs	r3, r3, #5
 800809a:	2164      	movs	r1, #100	; 0x64
 800809c:	fb01 f303 	mul.w	r3, r1, r3
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	3332      	adds	r3, #50	; 0x32
 80080a6:	4a07      	ldr	r2, [pc, #28]	; (80080c4 <UART_SetConfig+0x384>)
 80080a8:	fba2 2303 	umull	r2, r3, r2, r3
 80080ac:	095b      	lsrs	r3, r3, #5
 80080ae:	f003 0207 	and.w	r2, r3, #7
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4442      	add	r2, r8
 80080b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80080ba:	e1b2      	b.n	8008422 <UART_SetConfig+0x6e2>
 80080bc:	40011000 	.word	0x40011000
 80080c0:	40011400 	.word	0x40011400
 80080c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4ad7      	ldr	r2, [pc, #860]	; (800842c <UART_SetConfig+0x6ec>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d005      	beq.n	80080de <UART_SetConfig+0x39e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4ad6      	ldr	r2, [pc, #856]	; (8008430 <UART_SetConfig+0x6f0>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	f040 80d1 	bne.w	8008280 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80080de:	f7fe ffd3 	bl	8007088 <HAL_RCC_GetPCLK2Freq>
 80080e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	469a      	mov	sl, r3
 80080e8:	f04f 0b00 	mov.w	fp, #0
 80080ec:	46d0      	mov	r8, sl
 80080ee:	46d9      	mov	r9, fp
 80080f0:	eb18 0308 	adds.w	r3, r8, r8
 80080f4:	eb49 0409 	adc.w	r4, r9, r9
 80080f8:	4698      	mov	r8, r3
 80080fa:	46a1      	mov	r9, r4
 80080fc:	eb18 080a 	adds.w	r8, r8, sl
 8008100:	eb49 090b 	adc.w	r9, r9, fp
 8008104:	f04f 0100 	mov.w	r1, #0
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008110:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008114:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008118:	4688      	mov	r8, r1
 800811a:	4691      	mov	r9, r2
 800811c:	eb1a 0508 	adds.w	r5, sl, r8
 8008120:	eb4b 0609 	adc.w	r6, fp, r9
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	4619      	mov	r1, r3
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	f04f 0400 	mov.w	r4, #0
 8008136:	0094      	lsls	r4, r2, #2
 8008138:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800813c:	008b      	lsls	r3, r1, #2
 800813e:	461a      	mov	r2, r3
 8008140:	4623      	mov	r3, r4
 8008142:	4628      	mov	r0, r5
 8008144:	4631      	mov	r1, r6
 8008146:	f7f8 fd37 	bl	8000bb8 <__aeabi_uldivmod>
 800814a:	4603      	mov	r3, r0
 800814c:	460c      	mov	r4, r1
 800814e:	461a      	mov	r2, r3
 8008150:	4bb8      	ldr	r3, [pc, #736]	; (8008434 <UART_SetConfig+0x6f4>)
 8008152:	fba3 2302 	umull	r2, r3, r3, r2
 8008156:	095b      	lsrs	r3, r3, #5
 8008158:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	469b      	mov	fp, r3
 8008160:	f04f 0c00 	mov.w	ip, #0
 8008164:	46d9      	mov	r9, fp
 8008166:	46e2      	mov	sl, ip
 8008168:	eb19 0309 	adds.w	r3, r9, r9
 800816c:	eb4a 040a 	adc.w	r4, sl, sl
 8008170:	4699      	mov	r9, r3
 8008172:	46a2      	mov	sl, r4
 8008174:	eb19 090b 	adds.w	r9, r9, fp
 8008178:	eb4a 0a0c 	adc.w	sl, sl, ip
 800817c:	f04f 0100 	mov.w	r1, #0
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800818c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008190:	4689      	mov	r9, r1
 8008192:	4692      	mov	sl, r2
 8008194:	eb1b 0509 	adds.w	r5, fp, r9
 8008198:	eb4c 060a 	adc.w	r6, ip, sl
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	f04f 0400 	mov.w	r4, #0
 80081ae:	0094      	lsls	r4, r2, #2
 80081b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081b4:	008b      	lsls	r3, r1, #2
 80081b6:	461a      	mov	r2, r3
 80081b8:	4623      	mov	r3, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	4631      	mov	r1, r6
 80081be:	f7f8 fcfb 	bl	8000bb8 <__aeabi_uldivmod>
 80081c2:	4603      	mov	r3, r0
 80081c4:	460c      	mov	r4, r1
 80081c6:	461a      	mov	r2, r3
 80081c8:	4b9a      	ldr	r3, [pc, #616]	; (8008434 <UART_SetConfig+0x6f4>)
 80081ca:	fba3 1302 	umull	r1, r3, r3, r2
 80081ce:	095b      	lsrs	r3, r3, #5
 80081d0:	2164      	movs	r1, #100	; 0x64
 80081d2:	fb01 f303 	mul.w	r3, r1, r3
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	3332      	adds	r3, #50	; 0x32
 80081dc:	4a95      	ldr	r2, [pc, #596]	; (8008434 <UART_SetConfig+0x6f4>)
 80081de:	fba2 2303 	umull	r2, r3, r2, r3
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081e8:	4498      	add	r8, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	469b      	mov	fp, r3
 80081ee:	f04f 0c00 	mov.w	ip, #0
 80081f2:	46d9      	mov	r9, fp
 80081f4:	46e2      	mov	sl, ip
 80081f6:	eb19 0309 	adds.w	r3, r9, r9
 80081fa:	eb4a 040a 	adc.w	r4, sl, sl
 80081fe:	4699      	mov	r9, r3
 8008200:	46a2      	mov	sl, r4
 8008202:	eb19 090b 	adds.w	r9, r9, fp
 8008206:	eb4a 0a0c 	adc.w	sl, sl, ip
 800820a:	f04f 0100 	mov.w	r1, #0
 800820e:	f04f 0200 	mov.w	r2, #0
 8008212:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008216:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800821a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800821e:	4689      	mov	r9, r1
 8008220:	4692      	mov	sl, r2
 8008222:	eb1b 0509 	adds.w	r5, fp, r9
 8008226:	eb4c 060a 	adc.w	r6, ip, sl
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	4619      	mov	r1, r3
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	f04f 0400 	mov.w	r4, #0
 800823c:	0094      	lsls	r4, r2, #2
 800823e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008242:	008b      	lsls	r3, r1, #2
 8008244:	461a      	mov	r2, r3
 8008246:	4623      	mov	r3, r4
 8008248:	4628      	mov	r0, r5
 800824a:	4631      	mov	r1, r6
 800824c:	f7f8 fcb4 	bl	8000bb8 <__aeabi_uldivmod>
 8008250:	4603      	mov	r3, r0
 8008252:	460c      	mov	r4, r1
 8008254:	461a      	mov	r2, r3
 8008256:	4b77      	ldr	r3, [pc, #476]	; (8008434 <UART_SetConfig+0x6f4>)
 8008258:	fba3 1302 	umull	r1, r3, r3, r2
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	2164      	movs	r1, #100	; 0x64
 8008260:	fb01 f303 	mul.w	r3, r1, r3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	3332      	adds	r3, #50	; 0x32
 800826a:	4a72      	ldr	r2, [pc, #456]	; (8008434 <UART_SetConfig+0x6f4>)
 800826c:	fba2 2303 	umull	r2, r3, r2, r3
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	f003 020f 	and.w	r2, r3, #15
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4442      	add	r2, r8
 800827c:	609a      	str	r2, [r3, #8]
 800827e:	e0d0      	b.n	8008422 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008280:	f7fe feee 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 8008284:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	469a      	mov	sl, r3
 800828a:	f04f 0b00 	mov.w	fp, #0
 800828e:	46d0      	mov	r8, sl
 8008290:	46d9      	mov	r9, fp
 8008292:	eb18 0308 	adds.w	r3, r8, r8
 8008296:	eb49 0409 	adc.w	r4, r9, r9
 800829a:	4698      	mov	r8, r3
 800829c:	46a1      	mov	r9, r4
 800829e:	eb18 080a 	adds.w	r8, r8, sl
 80082a2:	eb49 090b 	adc.w	r9, r9, fp
 80082a6:	f04f 0100 	mov.w	r1, #0
 80082aa:	f04f 0200 	mov.w	r2, #0
 80082ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082ba:	4688      	mov	r8, r1
 80082bc:	4691      	mov	r9, r2
 80082be:	eb1a 0508 	adds.w	r5, sl, r8
 80082c2:	eb4b 0609 	adc.w	r6, fp, r9
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	4619      	mov	r1, r3
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	f04f 0400 	mov.w	r4, #0
 80082d8:	0094      	lsls	r4, r2, #2
 80082da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80082de:	008b      	lsls	r3, r1, #2
 80082e0:	461a      	mov	r2, r3
 80082e2:	4623      	mov	r3, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	4631      	mov	r1, r6
 80082e8:	f7f8 fc66 	bl	8000bb8 <__aeabi_uldivmod>
 80082ec:	4603      	mov	r3, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	461a      	mov	r2, r3
 80082f2:	4b50      	ldr	r3, [pc, #320]	; (8008434 <UART_SetConfig+0x6f4>)
 80082f4:	fba3 2302 	umull	r2, r3, r3, r2
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	469b      	mov	fp, r3
 8008302:	f04f 0c00 	mov.w	ip, #0
 8008306:	46d9      	mov	r9, fp
 8008308:	46e2      	mov	sl, ip
 800830a:	eb19 0309 	adds.w	r3, r9, r9
 800830e:	eb4a 040a 	adc.w	r4, sl, sl
 8008312:	4699      	mov	r9, r3
 8008314:	46a2      	mov	sl, r4
 8008316:	eb19 090b 	adds.w	r9, r9, fp
 800831a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800831e:	f04f 0100 	mov.w	r1, #0
 8008322:	f04f 0200 	mov.w	r2, #0
 8008326:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800832a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800832e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008332:	4689      	mov	r9, r1
 8008334:	4692      	mov	sl, r2
 8008336:	eb1b 0509 	adds.w	r5, fp, r9
 800833a:	eb4c 060a 	adc.w	r6, ip, sl
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	4619      	mov	r1, r3
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	f04f 0400 	mov.w	r4, #0
 8008350:	0094      	lsls	r4, r2, #2
 8008352:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008356:	008b      	lsls	r3, r1, #2
 8008358:	461a      	mov	r2, r3
 800835a:	4623      	mov	r3, r4
 800835c:	4628      	mov	r0, r5
 800835e:	4631      	mov	r1, r6
 8008360:	f7f8 fc2a 	bl	8000bb8 <__aeabi_uldivmod>
 8008364:	4603      	mov	r3, r0
 8008366:	460c      	mov	r4, r1
 8008368:	461a      	mov	r2, r3
 800836a:	4b32      	ldr	r3, [pc, #200]	; (8008434 <UART_SetConfig+0x6f4>)
 800836c:	fba3 1302 	umull	r1, r3, r3, r2
 8008370:	095b      	lsrs	r3, r3, #5
 8008372:	2164      	movs	r1, #100	; 0x64
 8008374:	fb01 f303 	mul.w	r3, r1, r3
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	3332      	adds	r3, #50	; 0x32
 800837e:	4a2d      	ldr	r2, [pc, #180]	; (8008434 <UART_SetConfig+0x6f4>)
 8008380:	fba2 2303 	umull	r2, r3, r2, r3
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800838a:	4498      	add	r8, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	469b      	mov	fp, r3
 8008390:	f04f 0c00 	mov.w	ip, #0
 8008394:	46d9      	mov	r9, fp
 8008396:	46e2      	mov	sl, ip
 8008398:	eb19 0309 	adds.w	r3, r9, r9
 800839c:	eb4a 040a 	adc.w	r4, sl, sl
 80083a0:	4699      	mov	r9, r3
 80083a2:	46a2      	mov	sl, r4
 80083a4:	eb19 090b 	adds.w	r9, r9, fp
 80083a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083ac:	f04f 0100 	mov.w	r1, #0
 80083b0:	f04f 0200 	mov.w	r2, #0
 80083b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083c0:	4689      	mov	r9, r1
 80083c2:	4692      	mov	sl, r2
 80083c4:	eb1b 0509 	adds.w	r5, fp, r9
 80083c8:	eb4c 060a 	adc.w	r6, ip, sl
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	4619      	mov	r1, r3
 80083d2:	f04f 0200 	mov.w	r2, #0
 80083d6:	f04f 0300 	mov.w	r3, #0
 80083da:	f04f 0400 	mov.w	r4, #0
 80083de:	0094      	lsls	r4, r2, #2
 80083e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80083e4:	008b      	lsls	r3, r1, #2
 80083e6:	461a      	mov	r2, r3
 80083e8:	4623      	mov	r3, r4
 80083ea:	4628      	mov	r0, r5
 80083ec:	4631      	mov	r1, r6
 80083ee:	f7f8 fbe3 	bl	8000bb8 <__aeabi_uldivmod>
 80083f2:	4603      	mov	r3, r0
 80083f4:	460c      	mov	r4, r1
 80083f6:	461a      	mov	r2, r3
 80083f8:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <UART_SetConfig+0x6f4>)
 80083fa:	fba3 1302 	umull	r1, r3, r3, r2
 80083fe:	095b      	lsrs	r3, r3, #5
 8008400:	2164      	movs	r1, #100	; 0x64
 8008402:	fb01 f303 	mul.w	r3, r1, r3
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	3332      	adds	r3, #50	; 0x32
 800840c:	4a09      	ldr	r2, [pc, #36]	; (8008434 <UART_SetConfig+0x6f4>)
 800840e:	fba2 2303 	umull	r2, r3, r2, r3
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	f003 020f 	and.w	r2, r3, #15
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4442      	add	r2, r8
 800841e:	609a      	str	r2, [r3, #8]
}
 8008420:	e7ff      	b.n	8008422 <UART_SetConfig+0x6e2>
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	40011000 	.word	0x40011000
 8008430:	40011400 	.word	0x40011400
 8008434:	51eb851f 	.word	0x51eb851f

08008438 <__errno>:
 8008438:	4b01      	ldr	r3, [pc, #4]	; (8008440 <__errno+0x8>)
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000264 	.word	0x20000264

08008444 <__libc_init_array>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	4e0d      	ldr	r6, [pc, #52]	; (800847c <__libc_init_array+0x38>)
 8008448:	4c0d      	ldr	r4, [pc, #52]	; (8008480 <__libc_init_array+0x3c>)
 800844a:	1ba4      	subs	r4, r4, r6
 800844c:	10a4      	asrs	r4, r4, #2
 800844e:	2500      	movs	r5, #0
 8008450:	42a5      	cmp	r5, r4
 8008452:	d109      	bne.n	8008468 <__libc_init_array+0x24>
 8008454:	4e0b      	ldr	r6, [pc, #44]	; (8008484 <__libc_init_array+0x40>)
 8008456:	4c0c      	ldr	r4, [pc, #48]	; (8008488 <__libc_init_array+0x44>)
 8008458:	f002 f872 	bl	800a540 <_init>
 800845c:	1ba4      	subs	r4, r4, r6
 800845e:	10a4      	asrs	r4, r4, #2
 8008460:	2500      	movs	r5, #0
 8008462:	42a5      	cmp	r5, r4
 8008464:	d105      	bne.n	8008472 <__libc_init_array+0x2e>
 8008466:	bd70      	pop	{r4, r5, r6, pc}
 8008468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800846c:	4798      	blx	r3
 800846e:	3501      	adds	r5, #1
 8008470:	e7ee      	b.n	8008450 <__libc_init_array+0xc>
 8008472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008476:	4798      	blx	r3
 8008478:	3501      	adds	r5, #1
 800847a:	e7f2      	b.n	8008462 <__libc_init_array+0x1e>
 800847c:	0800a848 	.word	0x0800a848
 8008480:	0800a848 	.word	0x0800a848
 8008484:	0800a848 	.word	0x0800a848
 8008488:	0800a84c 	.word	0x0800a84c

0800848c <memset>:
 800848c:	4402      	add	r2, r0
 800848e:	4603      	mov	r3, r0
 8008490:	4293      	cmp	r3, r2
 8008492:	d100      	bne.n	8008496 <memset+0xa>
 8008494:	4770      	bx	lr
 8008496:	f803 1b01 	strb.w	r1, [r3], #1
 800849a:	e7f9      	b.n	8008490 <memset+0x4>

0800849c <__cvt>:
 800849c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084a0:	ec55 4b10 	vmov	r4, r5, d0
 80084a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80084a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	460e      	mov	r6, r1
 80084ae:	4691      	mov	r9, r2
 80084b0:	4619      	mov	r1, r3
 80084b2:	bfb8      	it	lt
 80084b4:	4622      	movlt	r2, r4
 80084b6:	462b      	mov	r3, r5
 80084b8:	f027 0720 	bic.w	r7, r7, #32
 80084bc:	bfbb      	ittet	lt
 80084be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084c2:	461d      	movlt	r5, r3
 80084c4:	2300      	movge	r3, #0
 80084c6:	232d      	movlt	r3, #45	; 0x2d
 80084c8:	bfb8      	it	lt
 80084ca:	4614      	movlt	r4, r2
 80084cc:	2f46      	cmp	r7, #70	; 0x46
 80084ce:	700b      	strb	r3, [r1, #0]
 80084d0:	d004      	beq.n	80084dc <__cvt+0x40>
 80084d2:	2f45      	cmp	r7, #69	; 0x45
 80084d4:	d100      	bne.n	80084d8 <__cvt+0x3c>
 80084d6:	3601      	adds	r6, #1
 80084d8:	2102      	movs	r1, #2
 80084da:	e000      	b.n	80084de <__cvt+0x42>
 80084dc:	2103      	movs	r1, #3
 80084de:	ab03      	add	r3, sp, #12
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	ab02      	add	r3, sp, #8
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	4632      	mov	r2, r6
 80084e8:	4653      	mov	r3, sl
 80084ea:	ec45 4b10 	vmov	d0, r4, r5
 80084ee:	f000 fcf3 	bl	8008ed8 <_dtoa_r>
 80084f2:	2f47      	cmp	r7, #71	; 0x47
 80084f4:	4680      	mov	r8, r0
 80084f6:	d102      	bne.n	80084fe <__cvt+0x62>
 80084f8:	f019 0f01 	tst.w	r9, #1
 80084fc:	d026      	beq.n	800854c <__cvt+0xb0>
 80084fe:	2f46      	cmp	r7, #70	; 0x46
 8008500:	eb08 0906 	add.w	r9, r8, r6
 8008504:	d111      	bne.n	800852a <__cvt+0x8e>
 8008506:	f898 3000 	ldrb.w	r3, [r8]
 800850a:	2b30      	cmp	r3, #48	; 0x30
 800850c:	d10a      	bne.n	8008524 <__cvt+0x88>
 800850e:	2200      	movs	r2, #0
 8008510:	2300      	movs	r3, #0
 8008512:	4620      	mov	r0, r4
 8008514:	4629      	mov	r1, r5
 8008516:	f7f8 fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 800851a:	b918      	cbnz	r0, 8008524 <__cvt+0x88>
 800851c:	f1c6 0601 	rsb	r6, r6, #1
 8008520:	f8ca 6000 	str.w	r6, [sl]
 8008524:	f8da 3000 	ldr.w	r3, [sl]
 8008528:	4499      	add	r9, r3
 800852a:	2200      	movs	r2, #0
 800852c:	2300      	movs	r3, #0
 800852e:	4620      	mov	r0, r4
 8008530:	4629      	mov	r1, r5
 8008532:	f7f8 fad1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008536:	b938      	cbnz	r0, 8008548 <__cvt+0xac>
 8008538:	2230      	movs	r2, #48	; 0x30
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	454b      	cmp	r3, r9
 800853e:	d205      	bcs.n	800854c <__cvt+0xb0>
 8008540:	1c59      	adds	r1, r3, #1
 8008542:	9103      	str	r1, [sp, #12]
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	e7f8      	b.n	800853a <__cvt+0x9e>
 8008548:	f8cd 900c 	str.w	r9, [sp, #12]
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008550:	eba3 0308 	sub.w	r3, r3, r8
 8008554:	4640      	mov	r0, r8
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	b004      	add	sp, #16
 800855a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800855e <__exponent>:
 800855e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008560:	2900      	cmp	r1, #0
 8008562:	4604      	mov	r4, r0
 8008564:	bfba      	itte	lt
 8008566:	4249      	neglt	r1, r1
 8008568:	232d      	movlt	r3, #45	; 0x2d
 800856a:	232b      	movge	r3, #43	; 0x2b
 800856c:	2909      	cmp	r1, #9
 800856e:	f804 2b02 	strb.w	r2, [r4], #2
 8008572:	7043      	strb	r3, [r0, #1]
 8008574:	dd20      	ble.n	80085b8 <__exponent+0x5a>
 8008576:	f10d 0307 	add.w	r3, sp, #7
 800857a:	461f      	mov	r7, r3
 800857c:	260a      	movs	r6, #10
 800857e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008582:	fb06 1115 	mls	r1, r6, r5, r1
 8008586:	3130      	adds	r1, #48	; 0x30
 8008588:	2d09      	cmp	r5, #9
 800858a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800858e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008592:	4629      	mov	r1, r5
 8008594:	dc09      	bgt.n	80085aa <__exponent+0x4c>
 8008596:	3130      	adds	r1, #48	; 0x30
 8008598:	3b02      	subs	r3, #2
 800859a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800859e:	42bb      	cmp	r3, r7
 80085a0:	4622      	mov	r2, r4
 80085a2:	d304      	bcc.n	80085ae <__exponent+0x50>
 80085a4:	1a10      	subs	r0, r2, r0
 80085a6:	b003      	add	sp, #12
 80085a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085aa:	4613      	mov	r3, r2
 80085ac:	e7e7      	b.n	800857e <__exponent+0x20>
 80085ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085b2:	f804 2b01 	strb.w	r2, [r4], #1
 80085b6:	e7f2      	b.n	800859e <__exponent+0x40>
 80085b8:	2330      	movs	r3, #48	; 0x30
 80085ba:	4419      	add	r1, r3
 80085bc:	7083      	strb	r3, [r0, #2]
 80085be:	1d02      	adds	r2, r0, #4
 80085c0:	70c1      	strb	r1, [r0, #3]
 80085c2:	e7ef      	b.n	80085a4 <__exponent+0x46>

080085c4 <_printf_float>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	b08d      	sub	sp, #52	; 0x34
 80085ca:	460c      	mov	r4, r1
 80085cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80085d0:	4616      	mov	r6, r2
 80085d2:	461f      	mov	r7, r3
 80085d4:	4605      	mov	r5, r0
 80085d6:	f001 fa37 	bl	8009a48 <_localeconv_r>
 80085da:	6803      	ldr	r3, [r0, #0]
 80085dc:	9304      	str	r3, [sp, #16]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7f7 fdfe 	bl	80001e0 <strlen>
 80085e4:	2300      	movs	r3, #0
 80085e6:	930a      	str	r3, [sp, #40]	; 0x28
 80085e8:	f8d8 3000 	ldr.w	r3, [r8]
 80085ec:	9005      	str	r0, [sp, #20]
 80085ee:	3307      	adds	r3, #7
 80085f0:	f023 0307 	bic.w	r3, r3, #7
 80085f4:	f103 0208 	add.w	r2, r3, #8
 80085f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80085fc:	f8d4 b000 	ldr.w	fp, [r4]
 8008600:	f8c8 2000 	str.w	r2, [r8]
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800860c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008610:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008614:	9307      	str	r3, [sp, #28]
 8008616:	f8cd 8018 	str.w	r8, [sp, #24]
 800861a:	f04f 32ff 	mov.w	r2, #4294967295
 800861e:	4ba7      	ldr	r3, [pc, #668]	; (80088bc <_printf_float+0x2f8>)
 8008620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008624:	f7f8 fa8a 	bl	8000b3c <__aeabi_dcmpun>
 8008628:	bb70      	cbnz	r0, 8008688 <_printf_float+0xc4>
 800862a:	f04f 32ff 	mov.w	r2, #4294967295
 800862e:	4ba3      	ldr	r3, [pc, #652]	; (80088bc <_printf_float+0x2f8>)
 8008630:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008634:	f7f8 fa64 	bl	8000b00 <__aeabi_dcmple>
 8008638:	bb30      	cbnz	r0, 8008688 <_printf_float+0xc4>
 800863a:	2200      	movs	r2, #0
 800863c:	2300      	movs	r3, #0
 800863e:	4640      	mov	r0, r8
 8008640:	4649      	mov	r1, r9
 8008642:	f7f8 fa53 	bl	8000aec <__aeabi_dcmplt>
 8008646:	b110      	cbz	r0, 800864e <_printf_float+0x8a>
 8008648:	232d      	movs	r3, #45	; 0x2d
 800864a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800864e:	4a9c      	ldr	r2, [pc, #624]	; (80088c0 <_printf_float+0x2fc>)
 8008650:	4b9c      	ldr	r3, [pc, #624]	; (80088c4 <_printf_float+0x300>)
 8008652:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008656:	bf8c      	ite	hi
 8008658:	4690      	movhi	r8, r2
 800865a:	4698      	movls	r8, r3
 800865c:	2303      	movs	r3, #3
 800865e:	f02b 0204 	bic.w	r2, fp, #4
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	6022      	str	r2, [r4, #0]
 8008666:	f04f 0900 	mov.w	r9, #0
 800866a:	9700      	str	r7, [sp, #0]
 800866c:	4633      	mov	r3, r6
 800866e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008670:	4621      	mov	r1, r4
 8008672:	4628      	mov	r0, r5
 8008674:	f000 f9e6 	bl	8008a44 <_printf_common>
 8008678:	3001      	adds	r0, #1
 800867a:	f040 808d 	bne.w	8008798 <_printf_float+0x1d4>
 800867e:	f04f 30ff 	mov.w	r0, #4294967295
 8008682:	b00d      	add	sp, #52	; 0x34
 8008684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008688:	4642      	mov	r2, r8
 800868a:	464b      	mov	r3, r9
 800868c:	4640      	mov	r0, r8
 800868e:	4649      	mov	r1, r9
 8008690:	f7f8 fa54 	bl	8000b3c <__aeabi_dcmpun>
 8008694:	b110      	cbz	r0, 800869c <_printf_float+0xd8>
 8008696:	4a8c      	ldr	r2, [pc, #560]	; (80088c8 <_printf_float+0x304>)
 8008698:	4b8c      	ldr	r3, [pc, #560]	; (80088cc <_printf_float+0x308>)
 800869a:	e7da      	b.n	8008652 <_printf_float+0x8e>
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	1c4b      	adds	r3, r1, #1
 80086a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80086a4:	a80a      	add	r0, sp, #40	; 0x28
 80086a6:	d13e      	bne.n	8008726 <_printf_float+0x162>
 80086a8:	2306      	movs	r3, #6
 80086aa:	6063      	str	r3, [r4, #4]
 80086ac:	2300      	movs	r3, #0
 80086ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80086b2:	ab09      	add	r3, sp, #36	; 0x24
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	ec49 8b10 	vmov	d0, r8, r9
 80086ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	f8cd a004 	str.w	sl, [sp, #4]
 80086c4:	6861      	ldr	r1, [r4, #4]
 80086c6:	4628      	mov	r0, r5
 80086c8:	f7ff fee8 	bl	800849c <__cvt>
 80086cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80086d0:	2b47      	cmp	r3, #71	; 0x47
 80086d2:	4680      	mov	r8, r0
 80086d4:	d109      	bne.n	80086ea <_printf_float+0x126>
 80086d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d8:	1cd8      	adds	r0, r3, #3
 80086da:	db02      	blt.n	80086e2 <_printf_float+0x11e>
 80086dc:	6862      	ldr	r2, [r4, #4]
 80086de:	4293      	cmp	r3, r2
 80086e0:	dd47      	ble.n	8008772 <_printf_float+0x1ae>
 80086e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80086e6:	fa5f fa8a 	uxtb.w	sl, sl
 80086ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80086ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086f0:	d824      	bhi.n	800873c <_printf_float+0x178>
 80086f2:	3901      	subs	r1, #1
 80086f4:	4652      	mov	r2, sl
 80086f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086fa:	9109      	str	r1, [sp, #36]	; 0x24
 80086fc:	f7ff ff2f 	bl	800855e <__exponent>
 8008700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008702:	1813      	adds	r3, r2, r0
 8008704:	2a01      	cmp	r2, #1
 8008706:	4681      	mov	r9, r0
 8008708:	6123      	str	r3, [r4, #16]
 800870a:	dc02      	bgt.n	8008712 <_printf_float+0x14e>
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	07d1      	lsls	r1, r2, #31
 8008710:	d501      	bpl.n	8008716 <_printf_float+0x152>
 8008712:	3301      	adds	r3, #1
 8008714:	6123      	str	r3, [r4, #16]
 8008716:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0a5      	beq.n	800866a <_printf_float+0xa6>
 800871e:	232d      	movs	r3, #45	; 0x2d
 8008720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008724:	e7a1      	b.n	800866a <_printf_float+0xa6>
 8008726:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800872a:	f000 8177 	beq.w	8008a1c <_printf_float+0x458>
 800872e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008732:	d1bb      	bne.n	80086ac <_printf_float+0xe8>
 8008734:	2900      	cmp	r1, #0
 8008736:	d1b9      	bne.n	80086ac <_printf_float+0xe8>
 8008738:	2301      	movs	r3, #1
 800873a:	e7b6      	b.n	80086aa <_printf_float+0xe6>
 800873c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008740:	d119      	bne.n	8008776 <_printf_float+0x1b2>
 8008742:	2900      	cmp	r1, #0
 8008744:	6863      	ldr	r3, [r4, #4]
 8008746:	dd0c      	ble.n	8008762 <_printf_float+0x19e>
 8008748:	6121      	str	r1, [r4, #16]
 800874a:	b913      	cbnz	r3, 8008752 <_printf_float+0x18e>
 800874c:	6822      	ldr	r2, [r4, #0]
 800874e:	07d2      	lsls	r2, r2, #31
 8008750:	d502      	bpl.n	8008758 <_printf_float+0x194>
 8008752:	3301      	adds	r3, #1
 8008754:	440b      	add	r3, r1
 8008756:	6123      	str	r3, [r4, #16]
 8008758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875a:	65a3      	str	r3, [r4, #88]	; 0x58
 800875c:	f04f 0900 	mov.w	r9, #0
 8008760:	e7d9      	b.n	8008716 <_printf_float+0x152>
 8008762:	b913      	cbnz	r3, 800876a <_printf_float+0x1a6>
 8008764:	6822      	ldr	r2, [r4, #0]
 8008766:	07d0      	lsls	r0, r2, #31
 8008768:	d501      	bpl.n	800876e <_printf_float+0x1aa>
 800876a:	3302      	adds	r3, #2
 800876c:	e7f3      	b.n	8008756 <_printf_float+0x192>
 800876e:	2301      	movs	r3, #1
 8008770:	e7f1      	b.n	8008756 <_printf_float+0x192>
 8008772:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008776:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800877a:	4293      	cmp	r3, r2
 800877c:	db05      	blt.n	800878a <_printf_float+0x1c6>
 800877e:	6822      	ldr	r2, [r4, #0]
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	07d1      	lsls	r1, r2, #31
 8008784:	d5e8      	bpl.n	8008758 <_printf_float+0x194>
 8008786:	3301      	adds	r3, #1
 8008788:	e7e5      	b.n	8008756 <_printf_float+0x192>
 800878a:	2b00      	cmp	r3, #0
 800878c:	bfd4      	ite	le
 800878e:	f1c3 0302 	rsble	r3, r3, #2
 8008792:	2301      	movgt	r3, #1
 8008794:	4413      	add	r3, r2
 8008796:	e7de      	b.n	8008756 <_printf_float+0x192>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	055a      	lsls	r2, r3, #21
 800879c:	d407      	bmi.n	80087ae <_printf_float+0x1ea>
 800879e:	6923      	ldr	r3, [r4, #16]
 80087a0:	4642      	mov	r2, r8
 80087a2:	4631      	mov	r1, r6
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b8      	blx	r7
 80087a8:	3001      	adds	r0, #1
 80087aa:	d12b      	bne.n	8008804 <_printf_float+0x240>
 80087ac:	e767      	b.n	800867e <_printf_float+0xba>
 80087ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80087b2:	f240 80dc 	bls.w	800896e <_printf_float+0x3aa>
 80087b6:	2200      	movs	r2, #0
 80087b8:	2300      	movs	r3, #0
 80087ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087be:	f7f8 f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d033      	beq.n	800882e <_printf_float+0x26a>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4a41      	ldr	r2, [pc, #260]	; (80088d0 <_printf_float+0x30c>)
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f af54 	beq.w	800867e <_printf_float+0xba>
 80087d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087da:	429a      	cmp	r2, r3
 80087dc:	db02      	blt.n	80087e4 <_printf_float+0x220>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	07d8      	lsls	r0, r3, #31
 80087e2:	d50f      	bpl.n	8008804 <_printf_float+0x240>
 80087e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087e8:	4631      	mov	r1, r6
 80087ea:	4628      	mov	r0, r5
 80087ec:	47b8      	blx	r7
 80087ee:	3001      	adds	r0, #1
 80087f0:	f43f af45 	beq.w	800867e <_printf_float+0xba>
 80087f4:	f04f 0800 	mov.w	r8, #0
 80087f8:	f104 091a 	add.w	r9, r4, #26
 80087fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087fe:	3b01      	subs	r3, #1
 8008800:	4543      	cmp	r3, r8
 8008802:	dc09      	bgt.n	8008818 <_printf_float+0x254>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	079b      	lsls	r3, r3, #30
 8008808:	f100 8103 	bmi.w	8008a12 <_printf_float+0x44e>
 800880c:	68e0      	ldr	r0, [r4, #12]
 800880e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008810:	4298      	cmp	r0, r3
 8008812:	bfb8      	it	lt
 8008814:	4618      	movlt	r0, r3
 8008816:	e734      	b.n	8008682 <_printf_float+0xbe>
 8008818:	2301      	movs	r3, #1
 800881a:	464a      	mov	r2, r9
 800881c:	4631      	mov	r1, r6
 800881e:	4628      	mov	r0, r5
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	f43f af2b 	beq.w	800867e <_printf_float+0xba>
 8008828:	f108 0801 	add.w	r8, r8, #1
 800882c:	e7e6      	b.n	80087fc <_printf_float+0x238>
 800882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc2b      	bgt.n	800888c <_printf_float+0x2c8>
 8008834:	2301      	movs	r3, #1
 8008836:	4a26      	ldr	r2, [pc, #152]	; (80088d0 <_printf_float+0x30c>)
 8008838:	4631      	mov	r1, r6
 800883a:	4628      	mov	r0, r5
 800883c:	47b8      	blx	r7
 800883e:	3001      	adds	r0, #1
 8008840:	f43f af1d 	beq.w	800867e <_printf_float+0xba>
 8008844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008846:	b923      	cbnz	r3, 8008852 <_printf_float+0x28e>
 8008848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800884a:	b913      	cbnz	r3, 8008852 <_printf_float+0x28e>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	07d9      	lsls	r1, r3, #31
 8008850:	d5d8      	bpl.n	8008804 <_printf_float+0x240>
 8008852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008856:	4631      	mov	r1, r6
 8008858:	4628      	mov	r0, r5
 800885a:	47b8      	blx	r7
 800885c:	3001      	adds	r0, #1
 800885e:	f43f af0e 	beq.w	800867e <_printf_float+0xba>
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	f104 0a1a 	add.w	sl, r4, #26
 800886a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886c:	425b      	negs	r3, r3
 800886e:	454b      	cmp	r3, r9
 8008870:	dc01      	bgt.n	8008876 <_printf_float+0x2b2>
 8008872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008874:	e794      	b.n	80087a0 <_printf_float+0x1dc>
 8008876:	2301      	movs	r3, #1
 8008878:	4652      	mov	r2, sl
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	f43f aefc 	beq.w	800867e <_printf_float+0xba>
 8008886:	f109 0901 	add.w	r9, r9, #1
 800888a:	e7ee      	b.n	800886a <_printf_float+0x2a6>
 800888c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800888e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008890:	429a      	cmp	r2, r3
 8008892:	bfa8      	it	ge
 8008894:	461a      	movge	r2, r3
 8008896:	2a00      	cmp	r2, #0
 8008898:	4691      	mov	r9, r2
 800889a:	dd07      	ble.n	80088ac <_printf_float+0x2e8>
 800889c:	4613      	mov	r3, r2
 800889e:	4631      	mov	r1, r6
 80088a0:	4642      	mov	r2, r8
 80088a2:	4628      	mov	r0, r5
 80088a4:	47b8      	blx	r7
 80088a6:	3001      	adds	r0, #1
 80088a8:	f43f aee9 	beq.w	800867e <_printf_float+0xba>
 80088ac:	f104 031a 	add.w	r3, r4, #26
 80088b0:	f04f 0b00 	mov.w	fp, #0
 80088b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088b8:	9306      	str	r3, [sp, #24]
 80088ba:	e015      	b.n	80088e8 <_printf_float+0x324>
 80088bc:	7fefffff 	.word	0x7fefffff
 80088c0:	0800a5e8 	.word	0x0800a5e8
 80088c4:	0800a5e4 	.word	0x0800a5e4
 80088c8:	0800a5f0 	.word	0x0800a5f0
 80088cc:	0800a5ec 	.word	0x0800a5ec
 80088d0:	0800a5f4 	.word	0x0800a5f4
 80088d4:	2301      	movs	r3, #1
 80088d6:	9a06      	ldr	r2, [sp, #24]
 80088d8:	4631      	mov	r1, r6
 80088da:	4628      	mov	r0, r5
 80088dc:	47b8      	blx	r7
 80088de:	3001      	adds	r0, #1
 80088e0:	f43f aecd 	beq.w	800867e <_printf_float+0xba>
 80088e4:	f10b 0b01 	add.w	fp, fp, #1
 80088e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80088ec:	ebaa 0309 	sub.w	r3, sl, r9
 80088f0:	455b      	cmp	r3, fp
 80088f2:	dcef      	bgt.n	80088d4 <_printf_float+0x310>
 80088f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088f8:	429a      	cmp	r2, r3
 80088fa:	44d0      	add	r8, sl
 80088fc:	db15      	blt.n	800892a <_printf_float+0x366>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	07da      	lsls	r2, r3, #31
 8008902:	d412      	bmi.n	800892a <_printf_float+0x366>
 8008904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008906:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008908:	eba3 020a 	sub.w	r2, r3, sl
 800890c:	eba3 0a01 	sub.w	sl, r3, r1
 8008910:	4592      	cmp	sl, r2
 8008912:	bfa8      	it	ge
 8008914:	4692      	movge	sl, r2
 8008916:	f1ba 0f00 	cmp.w	sl, #0
 800891a:	dc0e      	bgt.n	800893a <_printf_float+0x376>
 800891c:	f04f 0800 	mov.w	r8, #0
 8008920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008924:	f104 091a 	add.w	r9, r4, #26
 8008928:	e019      	b.n	800895e <_printf_float+0x39a>
 800892a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	d1e5      	bne.n	8008904 <_printf_float+0x340>
 8008938:	e6a1      	b.n	800867e <_printf_float+0xba>
 800893a:	4653      	mov	r3, sl
 800893c:	4642      	mov	r2, r8
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	d1e9      	bne.n	800891c <_printf_float+0x358>
 8008948:	e699      	b.n	800867e <_printf_float+0xba>
 800894a:	2301      	movs	r3, #1
 800894c:	464a      	mov	r2, r9
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	f43f ae92 	beq.w	800867e <_printf_float+0xba>
 800895a:	f108 0801 	add.w	r8, r8, #1
 800895e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008962:	1a9b      	subs	r3, r3, r2
 8008964:	eba3 030a 	sub.w	r3, r3, sl
 8008968:	4543      	cmp	r3, r8
 800896a:	dcee      	bgt.n	800894a <_printf_float+0x386>
 800896c:	e74a      	b.n	8008804 <_printf_float+0x240>
 800896e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008970:	2a01      	cmp	r2, #1
 8008972:	dc01      	bgt.n	8008978 <_printf_float+0x3b4>
 8008974:	07db      	lsls	r3, r3, #31
 8008976:	d53a      	bpl.n	80089ee <_printf_float+0x42a>
 8008978:	2301      	movs	r3, #1
 800897a:	4642      	mov	r2, r8
 800897c:	4631      	mov	r1, r6
 800897e:	4628      	mov	r0, r5
 8008980:	47b8      	blx	r7
 8008982:	3001      	adds	r0, #1
 8008984:	f43f ae7b 	beq.w	800867e <_printf_float+0xba>
 8008988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800898c:	4631      	mov	r1, r6
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f108 0801 	add.w	r8, r8, #1
 8008998:	f43f ae71 	beq.w	800867e <_printf_float+0xba>
 800899c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899e:	2200      	movs	r2, #0
 80089a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80089a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089a8:	2300      	movs	r3, #0
 80089aa:	f7f8 f895 	bl	8000ad8 <__aeabi_dcmpeq>
 80089ae:	b9c8      	cbnz	r0, 80089e4 <_printf_float+0x420>
 80089b0:	4653      	mov	r3, sl
 80089b2:	4642      	mov	r2, r8
 80089b4:	4631      	mov	r1, r6
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	d10e      	bne.n	80089dc <_printf_float+0x418>
 80089be:	e65e      	b.n	800867e <_printf_float+0xba>
 80089c0:	2301      	movs	r3, #1
 80089c2:	4652      	mov	r2, sl
 80089c4:	4631      	mov	r1, r6
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	f43f ae57 	beq.w	800867e <_printf_float+0xba>
 80089d0:	f108 0801 	add.w	r8, r8, #1
 80089d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d6:	3b01      	subs	r3, #1
 80089d8:	4543      	cmp	r3, r8
 80089da:	dcf1      	bgt.n	80089c0 <_printf_float+0x3fc>
 80089dc:	464b      	mov	r3, r9
 80089de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089e2:	e6de      	b.n	80087a2 <_printf_float+0x1de>
 80089e4:	f04f 0800 	mov.w	r8, #0
 80089e8:	f104 0a1a 	add.w	sl, r4, #26
 80089ec:	e7f2      	b.n	80089d4 <_printf_float+0x410>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e7df      	b.n	80089b2 <_printf_float+0x3ee>
 80089f2:	2301      	movs	r3, #1
 80089f4:	464a      	mov	r2, r9
 80089f6:	4631      	mov	r1, r6
 80089f8:	4628      	mov	r0, r5
 80089fa:	47b8      	blx	r7
 80089fc:	3001      	adds	r0, #1
 80089fe:	f43f ae3e 	beq.w	800867e <_printf_float+0xba>
 8008a02:	f108 0801 	add.w	r8, r8, #1
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	4543      	cmp	r3, r8
 8008a0e:	dcf0      	bgt.n	80089f2 <_printf_float+0x42e>
 8008a10:	e6fc      	b.n	800880c <_printf_float+0x248>
 8008a12:	f04f 0800 	mov.w	r8, #0
 8008a16:	f104 0919 	add.w	r9, r4, #25
 8008a1a:	e7f4      	b.n	8008a06 <_printf_float+0x442>
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	f43f ae8b 	beq.w	8008738 <_printf_float+0x174>
 8008a22:	2300      	movs	r3, #0
 8008a24:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008a28:	ab09      	add	r3, sp, #36	; 0x24
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	ec49 8b10 	vmov	d0, r8, r9
 8008a30:	6022      	str	r2, [r4, #0]
 8008a32:	f8cd a004 	str.w	sl, [sp, #4]
 8008a36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f7ff fd2e 	bl	800849c <__cvt>
 8008a40:	4680      	mov	r8, r0
 8008a42:	e648      	b.n	80086d6 <_printf_float+0x112>

08008a44 <_printf_common>:
 8008a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	4691      	mov	r9, r2
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	688a      	ldr	r2, [r1, #8]
 8008a4e:	690b      	ldr	r3, [r1, #16]
 8008a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a54:	4293      	cmp	r3, r2
 8008a56:	bfb8      	it	lt
 8008a58:	4613      	movlt	r3, r2
 8008a5a:	f8c9 3000 	str.w	r3, [r9]
 8008a5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a62:	4606      	mov	r6, r0
 8008a64:	460c      	mov	r4, r1
 8008a66:	b112      	cbz	r2, 8008a6e <_printf_common+0x2a>
 8008a68:	3301      	adds	r3, #1
 8008a6a:	f8c9 3000 	str.w	r3, [r9]
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	0699      	lsls	r1, r3, #26
 8008a72:	bf42      	ittt	mi
 8008a74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a78:	3302      	addmi	r3, #2
 8008a7a:	f8c9 3000 	strmi.w	r3, [r9]
 8008a7e:	6825      	ldr	r5, [r4, #0]
 8008a80:	f015 0506 	ands.w	r5, r5, #6
 8008a84:	d107      	bne.n	8008a96 <_printf_common+0x52>
 8008a86:	f104 0a19 	add.w	sl, r4, #25
 8008a8a:	68e3      	ldr	r3, [r4, #12]
 8008a8c:	f8d9 2000 	ldr.w	r2, [r9]
 8008a90:	1a9b      	subs	r3, r3, r2
 8008a92:	42ab      	cmp	r3, r5
 8008a94:	dc28      	bgt.n	8008ae8 <_printf_common+0xa4>
 8008a96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	3300      	adds	r3, #0
 8008a9e:	bf18      	it	ne
 8008aa0:	2301      	movne	r3, #1
 8008aa2:	0692      	lsls	r2, r2, #26
 8008aa4:	d42d      	bmi.n	8008b02 <_printf_common+0xbe>
 8008aa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aaa:	4639      	mov	r1, r7
 8008aac:	4630      	mov	r0, r6
 8008aae:	47c0      	blx	r8
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d020      	beq.n	8008af6 <_printf_common+0xb2>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	68e5      	ldr	r5, [r4, #12]
 8008ab8:	f8d9 2000 	ldr.w	r2, [r9]
 8008abc:	f003 0306 	and.w	r3, r3, #6
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	bf08      	it	eq
 8008ac4:	1aad      	subeq	r5, r5, r2
 8008ac6:	68a3      	ldr	r3, [r4, #8]
 8008ac8:	6922      	ldr	r2, [r4, #16]
 8008aca:	bf0c      	ite	eq
 8008acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ad0:	2500      	movne	r5, #0
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	bfc4      	itt	gt
 8008ad6:	1a9b      	subgt	r3, r3, r2
 8008ad8:	18ed      	addgt	r5, r5, r3
 8008ada:	f04f 0900 	mov.w	r9, #0
 8008ade:	341a      	adds	r4, #26
 8008ae0:	454d      	cmp	r5, r9
 8008ae2:	d11a      	bne.n	8008b1a <_printf_common+0xd6>
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	e008      	b.n	8008afa <_printf_common+0xb6>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	4652      	mov	r2, sl
 8008aec:	4639      	mov	r1, r7
 8008aee:	4630      	mov	r0, r6
 8008af0:	47c0      	blx	r8
 8008af2:	3001      	adds	r0, #1
 8008af4:	d103      	bne.n	8008afe <_printf_common+0xba>
 8008af6:	f04f 30ff 	mov.w	r0, #4294967295
 8008afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afe:	3501      	adds	r5, #1
 8008b00:	e7c3      	b.n	8008a8a <_printf_common+0x46>
 8008b02:	18e1      	adds	r1, r4, r3
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	2030      	movs	r0, #48	; 0x30
 8008b08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b0c:	4422      	add	r2, r4
 8008b0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b16:	3302      	adds	r3, #2
 8008b18:	e7c5      	b.n	8008aa6 <_printf_common+0x62>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	4639      	mov	r1, r7
 8008b20:	4630      	mov	r0, r6
 8008b22:	47c0      	blx	r8
 8008b24:	3001      	adds	r0, #1
 8008b26:	d0e6      	beq.n	8008af6 <_printf_common+0xb2>
 8008b28:	f109 0901 	add.w	r9, r9, #1
 8008b2c:	e7d8      	b.n	8008ae0 <_printf_common+0x9c>
	...

08008b30 <_printf_i>:
 8008b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b38:	460c      	mov	r4, r1
 8008b3a:	7e09      	ldrb	r1, [r1, #24]
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	296e      	cmp	r1, #110	; 0x6e
 8008b40:	4617      	mov	r7, r2
 8008b42:	4606      	mov	r6, r0
 8008b44:	4698      	mov	r8, r3
 8008b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b48:	f000 80b3 	beq.w	8008cb2 <_printf_i+0x182>
 8008b4c:	d822      	bhi.n	8008b94 <_printf_i+0x64>
 8008b4e:	2963      	cmp	r1, #99	; 0x63
 8008b50:	d036      	beq.n	8008bc0 <_printf_i+0x90>
 8008b52:	d80a      	bhi.n	8008b6a <_printf_i+0x3a>
 8008b54:	2900      	cmp	r1, #0
 8008b56:	f000 80b9 	beq.w	8008ccc <_printf_i+0x19c>
 8008b5a:	2958      	cmp	r1, #88	; 0x58
 8008b5c:	f000 8083 	beq.w	8008c66 <_printf_i+0x136>
 8008b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b68:	e032      	b.n	8008bd0 <_printf_i+0xa0>
 8008b6a:	2964      	cmp	r1, #100	; 0x64
 8008b6c:	d001      	beq.n	8008b72 <_printf_i+0x42>
 8008b6e:	2969      	cmp	r1, #105	; 0x69
 8008b70:	d1f6      	bne.n	8008b60 <_printf_i+0x30>
 8008b72:	6820      	ldr	r0, [r4, #0]
 8008b74:	6813      	ldr	r3, [r2, #0]
 8008b76:	0605      	lsls	r5, r0, #24
 8008b78:	f103 0104 	add.w	r1, r3, #4
 8008b7c:	d52a      	bpl.n	8008bd4 <_printf_i+0xa4>
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6011      	str	r1, [r2, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	da03      	bge.n	8008b8e <_printf_i+0x5e>
 8008b86:	222d      	movs	r2, #45	; 0x2d
 8008b88:	425b      	negs	r3, r3
 8008b8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b8e:	486f      	ldr	r0, [pc, #444]	; (8008d4c <_printf_i+0x21c>)
 8008b90:	220a      	movs	r2, #10
 8008b92:	e039      	b.n	8008c08 <_printf_i+0xd8>
 8008b94:	2973      	cmp	r1, #115	; 0x73
 8008b96:	f000 809d 	beq.w	8008cd4 <_printf_i+0x1a4>
 8008b9a:	d808      	bhi.n	8008bae <_printf_i+0x7e>
 8008b9c:	296f      	cmp	r1, #111	; 0x6f
 8008b9e:	d020      	beq.n	8008be2 <_printf_i+0xb2>
 8008ba0:	2970      	cmp	r1, #112	; 0x70
 8008ba2:	d1dd      	bne.n	8008b60 <_printf_i+0x30>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	f043 0320 	orr.w	r3, r3, #32
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	e003      	b.n	8008bb6 <_printf_i+0x86>
 8008bae:	2975      	cmp	r1, #117	; 0x75
 8008bb0:	d017      	beq.n	8008be2 <_printf_i+0xb2>
 8008bb2:	2978      	cmp	r1, #120	; 0x78
 8008bb4:	d1d4      	bne.n	8008b60 <_printf_i+0x30>
 8008bb6:	2378      	movs	r3, #120	; 0x78
 8008bb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bbc:	4864      	ldr	r0, [pc, #400]	; (8008d50 <_printf_i+0x220>)
 8008bbe:	e055      	b.n	8008c6c <_printf_i+0x13c>
 8008bc0:	6813      	ldr	r3, [r2, #0]
 8008bc2:	1d19      	adds	r1, r3, #4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6011      	str	r1, [r2, #0]
 8008bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e08c      	b.n	8008cee <_printf_i+0x1be>
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6011      	str	r1, [r2, #0]
 8008bd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bdc:	bf18      	it	ne
 8008bde:	b21b      	sxthne	r3, r3
 8008be0:	e7cf      	b.n	8008b82 <_printf_i+0x52>
 8008be2:	6813      	ldr	r3, [r2, #0]
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	1d18      	adds	r0, r3, #4
 8008be8:	6010      	str	r0, [r2, #0]
 8008bea:	0628      	lsls	r0, r5, #24
 8008bec:	d501      	bpl.n	8008bf2 <_printf_i+0xc2>
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	e002      	b.n	8008bf8 <_printf_i+0xc8>
 8008bf2:	0668      	lsls	r0, r5, #25
 8008bf4:	d5fb      	bpl.n	8008bee <_printf_i+0xbe>
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	4854      	ldr	r0, [pc, #336]	; (8008d4c <_printf_i+0x21c>)
 8008bfa:	296f      	cmp	r1, #111	; 0x6f
 8008bfc:	bf14      	ite	ne
 8008bfe:	220a      	movne	r2, #10
 8008c00:	2208      	moveq	r2, #8
 8008c02:	2100      	movs	r1, #0
 8008c04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c08:	6865      	ldr	r5, [r4, #4]
 8008c0a:	60a5      	str	r5, [r4, #8]
 8008c0c:	2d00      	cmp	r5, #0
 8008c0e:	f2c0 8095 	blt.w	8008d3c <_printf_i+0x20c>
 8008c12:	6821      	ldr	r1, [r4, #0]
 8008c14:	f021 0104 	bic.w	r1, r1, #4
 8008c18:	6021      	str	r1, [r4, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d13d      	bne.n	8008c9a <_printf_i+0x16a>
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	f040 808e 	bne.w	8008d40 <_printf_i+0x210>
 8008c24:	4665      	mov	r5, ip
 8008c26:	2a08      	cmp	r2, #8
 8008c28:	d10b      	bne.n	8008c42 <_printf_i+0x112>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	07db      	lsls	r3, r3, #31
 8008c2e:	d508      	bpl.n	8008c42 <_printf_i+0x112>
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	6862      	ldr	r2, [r4, #4]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	bfde      	ittt	le
 8008c38:	2330      	movle	r3, #48	; 0x30
 8008c3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c42:	ebac 0305 	sub.w	r3, ip, r5
 8008c46:	6123      	str	r3, [r4, #16]
 8008c48:	f8cd 8000 	str.w	r8, [sp]
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	aa03      	add	r2, sp, #12
 8008c50:	4621      	mov	r1, r4
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff fef6 	bl	8008a44 <_printf_common>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d14d      	bne.n	8008cf8 <_printf_i+0x1c8>
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	b005      	add	sp, #20
 8008c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c66:	4839      	ldr	r0, [pc, #228]	; (8008d4c <_printf_i+0x21c>)
 8008c68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c6c:	6813      	ldr	r3, [r2, #0]
 8008c6e:	6821      	ldr	r1, [r4, #0]
 8008c70:	1d1d      	adds	r5, r3, #4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6015      	str	r5, [r2, #0]
 8008c76:	060a      	lsls	r2, r1, #24
 8008c78:	d50b      	bpl.n	8008c92 <_printf_i+0x162>
 8008c7a:	07ca      	lsls	r2, r1, #31
 8008c7c:	bf44      	itt	mi
 8008c7e:	f041 0120 	orrmi.w	r1, r1, #32
 8008c82:	6021      	strmi	r1, [r4, #0]
 8008c84:	b91b      	cbnz	r3, 8008c8e <_printf_i+0x15e>
 8008c86:	6822      	ldr	r2, [r4, #0]
 8008c88:	f022 0220 	bic.w	r2, r2, #32
 8008c8c:	6022      	str	r2, [r4, #0]
 8008c8e:	2210      	movs	r2, #16
 8008c90:	e7b7      	b.n	8008c02 <_printf_i+0xd2>
 8008c92:	064d      	lsls	r5, r1, #25
 8008c94:	bf48      	it	mi
 8008c96:	b29b      	uxthmi	r3, r3
 8008c98:	e7ef      	b.n	8008c7a <_printf_i+0x14a>
 8008c9a:	4665      	mov	r5, ip
 8008c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ca0:	fb02 3311 	mls	r3, r2, r1, r3
 8008ca4:	5cc3      	ldrb	r3, [r0, r3]
 8008ca6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008caa:	460b      	mov	r3, r1
 8008cac:	2900      	cmp	r1, #0
 8008cae:	d1f5      	bne.n	8008c9c <_printf_i+0x16c>
 8008cb0:	e7b9      	b.n	8008c26 <_printf_i+0xf6>
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	6825      	ldr	r5, [r4, #0]
 8008cb6:	6961      	ldr	r1, [r4, #20]
 8008cb8:	1d18      	adds	r0, r3, #4
 8008cba:	6010      	str	r0, [r2, #0]
 8008cbc:	0628      	lsls	r0, r5, #24
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	d501      	bpl.n	8008cc6 <_printf_i+0x196>
 8008cc2:	6019      	str	r1, [r3, #0]
 8008cc4:	e002      	b.n	8008ccc <_printf_i+0x19c>
 8008cc6:	066a      	lsls	r2, r5, #25
 8008cc8:	d5fb      	bpl.n	8008cc2 <_printf_i+0x192>
 8008cca:	8019      	strh	r1, [r3, #0]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	4665      	mov	r5, ip
 8008cd2:	e7b9      	b.n	8008c48 <_printf_i+0x118>
 8008cd4:	6813      	ldr	r3, [r2, #0]
 8008cd6:	1d19      	adds	r1, r3, #4
 8008cd8:	6011      	str	r1, [r2, #0]
 8008cda:	681d      	ldr	r5, [r3, #0]
 8008cdc:	6862      	ldr	r2, [r4, #4]
 8008cde:	2100      	movs	r1, #0
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f7f7 fa85 	bl	80001f0 <memchr>
 8008ce6:	b108      	cbz	r0, 8008cec <_printf_i+0x1bc>
 8008ce8:	1b40      	subs	r0, r0, r5
 8008cea:	6060      	str	r0, [r4, #4]
 8008cec:	6863      	ldr	r3, [r4, #4]
 8008cee:	6123      	str	r3, [r4, #16]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf6:	e7a7      	b.n	8008c48 <_printf_i+0x118>
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	4630      	mov	r0, r6
 8008d00:	47c0      	blx	r8
 8008d02:	3001      	adds	r0, #1
 8008d04:	d0aa      	beq.n	8008c5c <_printf_i+0x12c>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	079b      	lsls	r3, r3, #30
 8008d0a:	d413      	bmi.n	8008d34 <_printf_i+0x204>
 8008d0c:	68e0      	ldr	r0, [r4, #12]
 8008d0e:	9b03      	ldr	r3, [sp, #12]
 8008d10:	4298      	cmp	r0, r3
 8008d12:	bfb8      	it	lt
 8008d14:	4618      	movlt	r0, r3
 8008d16:	e7a3      	b.n	8008c60 <_printf_i+0x130>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	464a      	mov	r2, r9
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	4630      	mov	r0, r6
 8008d20:	47c0      	blx	r8
 8008d22:	3001      	adds	r0, #1
 8008d24:	d09a      	beq.n	8008c5c <_printf_i+0x12c>
 8008d26:	3501      	adds	r5, #1
 8008d28:	68e3      	ldr	r3, [r4, #12]
 8008d2a:	9a03      	ldr	r2, [sp, #12]
 8008d2c:	1a9b      	subs	r3, r3, r2
 8008d2e:	42ab      	cmp	r3, r5
 8008d30:	dcf2      	bgt.n	8008d18 <_printf_i+0x1e8>
 8008d32:	e7eb      	b.n	8008d0c <_printf_i+0x1dc>
 8008d34:	2500      	movs	r5, #0
 8008d36:	f104 0919 	add.w	r9, r4, #25
 8008d3a:	e7f5      	b.n	8008d28 <_printf_i+0x1f8>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1ac      	bne.n	8008c9a <_printf_i+0x16a>
 8008d40:	7803      	ldrb	r3, [r0, #0]
 8008d42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d4a:	e76c      	b.n	8008c26 <_printf_i+0xf6>
 8008d4c:	0800a5f6 	.word	0x0800a5f6
 8008d50:	0800a607 	.word	0x0800a607

08008d54 <sniprintf>:
 8008d54:	b40c      	push	{r2, r3}
 8008d56:	b530      	push	{r4, r5, lr}
 8008d58:	4b17      	ldr	r3, [pc, #92]	; (8008db8 <sniprintf+0x64>)
 8008d5a:	1e0c      	subs	r4, r1, #0
 8008d5c:	b09d      	sub	sp, #116	; 0x74
 8008d5e:	681d      	ldr	r5, [r3, #0]
 8008d60:	da08      	bge.n	8008d74 <sniprintf+0x20>
 8008d62:	238b      	movs	r3, #139	; 0x8b
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6a:	b01d      	add	sp, #116	; 0x74
 8008d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d70:	b002      	add	sp, #8
 8008d72:	4770      	bx	lr
 8008d74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d7c:	bf14      	ite	ne
 8008d7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d82:	4623      	moveq	r3, r4
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d8c:	9002      	str	r0, [sp, #8]
 8008d8e:	9006      	str	r0, [sp, #24]
 8008d90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d96:	ab21      	add	r3, sp, #132	; 0x84
 8008d98:	a902      	add	r1, sp, #8
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	f001 fa5f 	bl	800a260 <_svfiprintf_r>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	bfbc      	itt	lt
 8008da6:	238b      	movlt	r3, #139	; 0x8b
 8008da8:	602b      	strlt	r3, [r5, #0]
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	d0dd      	beq.n	8008d6a <sniprintf+0x16>
 8008dae:	9b02      	ldr	r3, [sp, #8]
 8008db0:	2200      	movs	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	e7d9      	b.n	8008d6a <sniprintf+0x16>
 8008db6:	bf00      	nop
 8008db8:	20000264 	.word	0x20000264

08008dbc <quorem>:
 8008dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	6903      	ldr	r3, [r0, #16]
 8008dc2:	690c      	ldr	r4, [r1, #16]
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	4680      	mov	r8, r0
 8008dc8:	f2c0 8082 	blt.w	8008ed0 <quorem+0x114>
 8008dcc:	3c01      	subs	r4, #1
 8008dce:	f101 0714 	add.w	r7, r1, #20
 8008dd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008dd6:	f100 0614 	add.w	r6, r0, #20
 8008dda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008dde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008de2:	eb06 030c 	add.w	r3, r6, ip
 8008de6:	3501      	adds	r5, #1
 8008de8:	eb07 090c 	add.w	r9, r7, ip
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	fbb0 f5f5 	udiv	r5, r0, r5
 8008df2:	b395      	cbz	r5, 8008e5a <quorem+0x9e>
 8008df4:	f04f 0a00 	mov.w	sl, #0
 8008df8:	4638      	mov	r0, r7
 8008dfa:	46b6      	mov	lr, r6
 8008dfc:	46d3      	mov	fp, sl
 8008dfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e02:	b293      	uxth	r3, r2
 8008e04:	fb05 a303 	mla	r3, r5, r3, sl
 8008e08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	ebab 0303 	sub.w	r3, fp, r3
 8008e12:	0c12      	lsrs	r2, r2, #16
 8008e14:	f8de b000 	ldr.w	fp, [lr]
 8008e18:	fb05 a202 	mla	r2, r5, r2, sl
 8008e1c:	fa13 f38b 	uxtah	r3, r3, fp
 8008e20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008e24:	fa1f fb82 	uxth.w	fp, r2
 8008e28:	f8de 2000 	ldr.w	r2, [lr]
 8008e2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e3a:	4581      	cmp	r9, r0
 8008e3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008e40:	f84e 3b04 	str.w	r3, [lr], #4
 8008e44:	d2db      	bcs.n	8008dfe <quorem+0x42>
 8008e46:	f856 300c 	ldr.w	r3, [r6, ip]
 8008e4a:	b933      	cbnz	r3, 8008e5a <quorem+0x9e>
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	3b04      	subs	r3, #4
 8008e50:	429e      	cmp	r6, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	d330      	bcc.n	8008eb8 <quorem+0xfc>
 8008e56:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	f001 f82a 	bl	8009eb4 <__mcmp>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	db25      	blt.n	8008eb0 <quorem+0xf4>
 8008e64:	3501      	adds	r5, #1
 8008e66:	4630      	mov	r0, r6
 8008e68:	f04f 0c00 	mov.w	ip, #0
 8008e6c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008e70:	f8d0 e000 	ldr.w	lr, [r0]
 8008e74:	b293      	uxth	r3, r2
 8008e76:	ebac 0303 	sub.w	r3, ip, r3
 8008e7a:	0c12      	lsrs	r2, r2, #16
 8008e7c:	fa13 f38e 	uxtah	r3, r3, lr
 8008e80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e8e:	45b9      	cmp	r9, r7
 8008e90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e94:	f840 3b04 	str.w	r3, [r0], #4
 8008e98:	d2e8      	bcs.n	8008e6c <quorem+0xb0>
 8008e9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008e9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008ea2:	b92a      	cbnz	r2, 8008eb0 <quorem+0xf4>
 8008ea4:	3b04      	subs	r3, #4
 8008ea6:	429e      	cmp	r6, r3
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	d30b      	bcc.n	8008ec4 <quorem+0x108>
 8008eac:	f8c8 4010 	str.w	r4, [r8, #16]
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	b003      	add	sp, #12
 8008eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb8:	6812      	ldr	r2, [r2, #0]
 8008eba:	3b04      	subs	r3, #4
 8008ebc:	2a00      	cmp	r2, #0
 8008ebe:	d1ca      	bne.n	8008e56 <quorem+0x9a>
 8008ec0:	3c01      	subs	r4, #1
 8008ec2:	e7c5      	b.n	8008e50 <quorem+0x94>
 8008ec4:	6812      	ldr	r2, [r2, #0]
 8008ec6:	3b04      	subs	r3, #4
 8008ec8:	2a00      	cmp	r2, #0
 8008eca:	d1ef      	bne.n	8008eac <quorem+0xf0>
 8008ecc:	3c01      	subs	r4, #1
 8008ece:	e7ea      	b.n	8008ea6 <quorem+0xea>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7ee      	b.n	8008eb2 <quorem+0xf6>
 8008ed4:	0000      	movs	r0, r0
	...

08008ed8 <_dtoa_r>:
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	ec57 6b10 	vmov	r6, r7, d0
 8008ee0:	b097      	sub	sp, #92	; 0x5c
 8008ee2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ee4:	9106      	str	r1, [sp, #24]
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	920b      	str	r2, [sp, #44]	; 0x2c
 8008eea:	9312      	str	r3, [sp, #72]	; 0x48
 8008eec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ef0:	e9cd 6700 	strd	r6, r7, [sp]
 8008ef4:	b93d      	cbnz	r5, 8008f06 <_dtoa_r+0x2e>
 8008ef6:	2010      	movs	r0, #16
 8008ef8:	f000 fdb4 	bl	8009a64 <malloc>
 8008efc:	6260      	str	r0, [r4, #36]	; 0x24
 8008efe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f02:	6005      	str	r5, [r0, #0]
 8008f04:	60c5      	str	r5, [r0, #12]
 8008f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f08:	6819      	ldr	r1, [r3, #0]
 8008f0a:	b151      	cbz	r1, 8008f22 <_dtoa_r+0x4a>
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	604a      	str	r2, [r1, #4]
 8008f10:	2301      	movs	r3, #1
 8008f12:	4093      	lsls	r3, r2
 8008f14:	608b      	str	r3, [r1, #8]
 8008f16:	4620      	mov	r0, r4
 8008f18:	f000 fdeb 	bl	8009af2 <_Bfree>
 8008f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	1e3b      	subs	r3, r7, #0
 8008f24:	bfbb      	ittet	lt
 8008f26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f2a:	9301      	strlt	r3, [sp, #4]
 8008f2c:	2300      	movge	r3, #0
 8008f2e:	2201      	movlt	r2, #1
 8008f30:	bfac      	ite	ge
 8008f32:	f8c8 3000 	strge.w	r3, [r8]
 8008f36:	f8c8 2000 	strlt.w	r2, [r8]
 8008f3a:	4baf      	ldr	r3, [pc, #700]	; (80091f8 <_dtoa_r+0x320>)
 8008f3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f40:	ea33 0308 	bics.w	r3, r3, r8
 8008f44:	d114      	bne.n	8008f70 <_dtoa_r+0x98>
 8008f46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	9b00      	ldr	r3, [sp, #0]
 8008f50:	b923      	cbnz	r3, 8008f5c <_dtoa_r+0x84>
 8008f52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f000 8542 	beq.w	80099e0 <_dtoa_r+0xb08>
 8008f5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800920c <_dtoa_r+0x334>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 8544 	beq.w	80099f0 <_dtoa_r+0xb18>
 8008f68:	f10b 0303 	add.w	r3, fp, #3
 8008f6c:	f000 bd3e 	b.w	80099ec <_dtoa_r+0xb14>
 8008f70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f74:	2200      	movs	r2, #0
 8008f76:	2300      	movs	r3, #0
 8008f78:	4630      	mov	r0, r6
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	f7f7 fdac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f80:	4681      	mov	r9, r0
 8008f82:	b168      	cbz	r0, 8008fa0 <_dtoa_r+0xc8>
 8008f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f86:	2301      	movs	r3, #1
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8524 	beq.w	80099da <_dtoa_r+0xb02>
 8008f92:	4b9a      	ldr	r3, [pc, #616]	; (80091fc <_dtoa_r+0x324>)
 8008f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f96:	f103 3bff 	add.w	fp, r3, #4294967295
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	f000 bd28 	b.w	80099f0 <_dtoa_r+0xb18>
 8008fa0:	aa14      	add	r2, sp, #80	; 0x50
 8008fa2:	a915      	add	r1, sp, #84	; 0x54
 8008fa4:	ec47 6b10 	vmov	d0, r6, r7
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fffa 	bl	8009fa2 <__d2b>
 8008fae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fb2:	9004      	str	r0, [sp, #16]
 8008fb4:	2d00      	cmp	r5, #0
 8008fb6:	d07c      	beq.n	80090b2 <_dtoa_r+0x1da>
 8008fb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fbc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008fc0:	46b2      	mov	sl, r6
 8008fc2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008fca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4b8b      	ldr	r3, [pc, #556]	; (8009200 <_dtoa_r+0x328>)
 8008fd2:	4650      	mov	r0, sl
 8008fd4:	4659      	mov	r1, fp
 8008fd6:	f7f7 f95f 	bl	8000298 <__aeabi_dsub>
 8008fda:	a381      	add	r3, pc, #516	; (adr r3, 80091e0 <_dtoa_r+0x308>)
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f7f7 fb12 	bl	8000608 <__aeabi_dmul>
 8008fe4:	a380      	add	r3, pc, #512	; (adr r3, 80091e8 <_dtoa_r+0x310>)
 8008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fea:	f7f7 f957 	bl	800029c <__adddf3>
 8008fee:	4606      	mov	r6, r0
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	460f      	mov	r7, r1
 8008ff4:	f7f7 fa9e 	bl	8000534 <__aeabi_i2d>
 8008ff8:	a37d      	add	r3, pc, #500	; (adr r3, 80091f0 <_dtoa_r+0x318>)
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f7f7 fb03 	bl	8000608 <__aeabi_dmul>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4630      	mov	r0, r6
 8009008:	4639      	mov	r1, r7
 800900a:	f7f7 f947 	bl	800029c <__adddf3>
 800900e:	4606      	mov	r6, r0
 8009010:	460f      	mov	r7, r1
 8009012:	f7f7 fda9 	bl	8000b68 <__aeabi_d2iz>
 8009016:	2200      	movs	r2, #0
 8009018:	4682      	mov	sl, r0
 800901a:	2300      	movs	r3, #0
 800901c:	4630      	mov	r0, r6
 800901e:	4639      	mov	r1, r7
 8009020:	f7f7 fd64 	bl	8000aec <__aeabi_dcmplt>
 8009024:	b148      	cbz	r0, 800903a <_dtoa_r+0x162>
 8009026:	4650      	mov	r0, sl
 8009028:	f7f7 fa84 	bl	8000534 <__aeabi_i2d>
 800902c:	4632      	mov	r2, r6
 800902e:	463b      	mov	r3, r7
 8009030:	f7f7 fd52 	bl	8000ad8 <__aeabi_dcmpeq>
 8009034:	b908      	cbnz	r0, 800903a <_dtoa_r+0x162>
 8009036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800903a:	f1ba 0f16 	cmp.w	sl, #22
 800903e:	d859      	bhi.n	80090f4 <_dtoa_r+0x21c>
 8009040:	4970      	ldr	r1, [pc, #448]	; (8009204 <_dtoa_r+0x32c>)
 8009042:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800904a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800904e:	f7f7 fd6b 	bl	8000b28 <__aeabi_dcmpgt>
 8009052:	2800      	cmp	r0, #0
 8009054:	d050      	beq.n	80090f8 <_dtoa_r+0x220>
 8009056:	f10a 3aff 	add.w	sl, sl, #4294967295
 800905a:	2300      	movs	r3, #0
 800905c:	930f      	str	r3, [sp, #60]	; 0x3c
 800905e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009060:	1b5d      	subs	r5, r3, r5
 8009062:	f1b5 0801 	subs.w	r8, r5, #1
 8009066:	bf49      	itett	mi
 8009068:	f1c5 0301 	rsbmi	r3, r5, #1
 800906c:	2300      	movpl	r3, #0
 800906e:	9305      	strmi	r3, [sp, #20]
 8009070:	f04f 0800 	movmi.w	r8, #0
 8009074:	bf58      	it	pl
 8009076:	9305      	strpl	r3, [sp, #20]
 8009078:	f1ba 0f00 	cmp.w	sl, #0
 800907c:	db3e      	blt.n	80090fc <_dtoa_r+0x224>
 800907e:	2300      	movs	r3, #0
 8009080:	44d0      	add	r8, sl
 8009082:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	9b06      	ldr	r3, [sp, #24]
 800908a:	2b09      	cmp	r3, #9
 800908c:	f200 8090 	bhi.w	80091b0 <_dtoa_r+0x2d8>
 8009090:	2b05      	cmp	r3, #5
 8009092:	bfc4      	itt	gt
 8009094:	3b04      	subgt	r3, #4
 8009096:	9306      	strgt	r3, [sp, #24]
 8009098:	9b06      	ldr	r3, [sp, #24]
 800909a:	f1a3 0302 	sub.w	r3, r3, #2
 800909e:	bfcc      	ite	gt
 80090a0:	2500      	movgt	r5, #0
 80090a2:	2501      	movle	r5, #1
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	f200 808f 	bhi.w	80091c8 <_dtoa_r+0x2f0>
 80090aa:	e8df f003 	tbb	[pc, r3]
 80090ae:	7f7d      	.short	0x7f7d
 80090b0:	7131      	.short	0x7131
 80090b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80090b6:	441d      	add	r5, r3
 80090b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80090bc:	2820      	cmp	r0, #32
 80090be:	dd13      	ble.n	80090e8 <_dtoa_r+0x210>
 80090c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80090c4:	9b00      	ldr	r3, [sp, #0]
 80090c6:	fa08 f800 	lsl.w	r8, r8, r0
 80090ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80090ce:	fa23 f000 	lsr.w	r0, r3, r0
 80090d2:	ea48 0000 	orr.w	r0, r8, r0
 80090d6:	f7f7 fa1d 	bl	8000514 <__aeabi_ui2d>
 80090da:	2301      	movs	r3, #1
 80090dc:	4682      	mov	sl, r0
 80090de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80090e2:	3d01      	subs	r5, #1
 80090e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80090e6:	e772      	b.n	8008fce <_dtoa_r+0xf6>
 80090e8:	9b00      	ldr	r3, [sp, #0]
 80090ea:	f1c0 0020 	rsb	r0, r0, #32
 80090ee:	fa03 f000 	lsl.w	r0, r3, r0
 80090f2:	e7f0      	b.n	80090d6 <_dtoa_r+0x1fe>
 80090f4:	2301      	movs	r3, #1
 80090f6:	e7b1      	b.n	800905c <_dtoa_r+0x184>
 80090f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80090fa:	e7b0      	b.n	800905e <_dtoa_r+0x186>
 80090fc:	9b05      	ldr	r3, [sp, #20]
 80090fe:	eba3 030a 	sub.w	r3, r3, sl
 8009102:	9305      	str	r3, [sp, #20]
 8009104:	f1ca 0300 	rsb	r3, sl, #0
 8009108:	9307      	str	r3, [sp, #28]
 800910a:	2300      	movs	r3, #0
 800910c:	930e      	str	r3, [sp, #56]	; 0x38
 800910e:	e7bb      	b.n	8009088 <_dtoa_r+0x1b0>
 8009110:	2301      	movs	r3, #1
 8009112:	930a      	str	r3, [sp, #40]	; 0x28
 8009114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009116:	2b00      	cmp	r3, #0
 8009118:	dd59      	ble.n	80091ce <_dtoa_r+0x2f6>
 800911a:	9302      	str	r3, [sp, #8]
 800911c:	4699      	mov	r9, r3
 800911e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009120:	2200      	movs	r2, #0
 8009122:	6072      	str	r2, [r6, #4]
 8009124:	2204      	movs	r2, #4
 8009126:	f102 0014 	add.w	r0, r2, #20
 800912a:	4298      	cmp	r0, r3
 800912c:	6871      	ldr	r1, [r6, #4]
 800912e:	d953      	bls.n	80091d8 <_dtoa_r+0x300>
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fcaa 	bl	8009a8a <_Balloc>
 8009136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009138:	6030      	str	r0, [r6, #0]
 800913a:	f1b9 0f0e 	cmp.w	r9, #14
 800913e:	f8d3 b000 	ldr.w	fp, [r3]
 8009142:	f200 80e6 	bhi.w	8009312 <_dtoa_r+0x43a>
 8009146:	2d00      	cmp	r5, #0
 8009148:	f000 80e3 	beq.w	8009312 <_dtoa_r+0x43a>
 800914c:	ed9d 7b00 	vldr	d7, [sp]
 8009150:	f1ba 0f00 	cmp.w	sl, #0
 8009154:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009158:	dd74      	ble.n	8009244 <_dtoa_r+0x36c>
 800915a:	4a2a      	ldr	r2, [pc, #168]	; (8009204 <_dtoa_r+0x32c>)
 800915c:	f00a 030f 	and.w	r3, sl, #15
 8009160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009164:	ed93 7b00 	vldr	d7, [r3]
 8009168:	ea4f 162a 	mov.w	r6, sl, asr #4
 800916c:	06f0      	lsls	r0, r6, #27
 800916e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009172:	d565      	bpl.n	8009240 <_dtoa_r+0x368>
 8009174:	4b24      	ldr	r3, [pc, #144]	; (8009208 <_dtoa_r+0x330>)
 8009176:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800917a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800917e:	f7f7 fb6d 	bl	800085c <__aeabi_ddiv>
 8009182:	e9cd 0100 	strd	r0, r1, [sp]
 8009186:	f006 060f 	and.w	r6, r6, #15
 800918a:	2503      	movs	r5, #3
 800918c:	4f1e      	ldr	r7, [pc, #120]	; (8009208 <_dtoa_r+0x330>)
 800918e:	e04c      	b.n	800922a <_dtoa_r+0x352>
 8009190:	2301      	movs	r3, #1
 8009192:	930a      	str	r3, [sp, #40]	; 0x28
 8009194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009196:	4453      	add	r3, sl
 8009198:	f103 0901 	add.w	r9, r3, #1
 800919c:	9302      	str	r3, [sp, #8]
 800919e:	464b      	mov	r3, r9
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	bfb8      	it	lt
 80091a4:	2301      	movlt	r3, #1
 80091a6:	e7ba      	b.n	800911e <_dtoa_r+0x246>
 80091a8:	2300      	movs	r3, #0
 80091aa:	e7b2      	b.n	8009112 <_dtoa_r+0x23a>
 80091ac:	2300      	movs	r3, #0
 80091ae:	e7f0      	b.n	8009192 <_dtoa_r+0x2ba>
 80091b0:	2501      	movs	r5, #1
 80091b2:	2300      	movs	r3, #0
 80091b4:	9306      	str	r3, [sp, #24]
 80091b6:	950a      	str	r5, [sp, #40]	; 0x28
 80091b8:	f04f 33ff 	mov.w	r3, #4294967295
 80091bc:	9302      	str	r3, [sp, #8]
 80091be:	4699      	mov	r9, r3
 80091c0:	2200      	movs	r2, #0
 80091c2:	2312      	movs	r3, #18
 80091c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80091c6:	e7aa      	b.n	800911e <_dtoa_r+0x246>
 80091c8:	2301      	movs	r3, #1
 80091ca:	930a      	str	r3, [sp, #40]	; 0x28
 80091cc:	e7f4      	b.n	80091b8 <_dtoa_r+0x2e0>
 80091ce:	2301      	movs	r3, #1
 80091d0:	9302      	str	r3, [sp, #8]
 80091d2:	4699      	mov	r9, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	e7f5      	b.n	80091c4 <_dtoa_r+0x2ec>
 80091d8:	3101      	adds	r1, #1
 80091da:	6071      	str	r1, [r6, #4]
 80091dc:	0052      	lsls	r2, r2, #1
 80091de:	e7a2      	b.n	8009126 <_dtoa_r+0x24e>
 80091e0:	636f4361 	.word	0x636f4361
 80091e4:	3fd287a7 	.word	0x3fd287a7
 80091e8:	8b60c8b3 	.word	0x8b60c8b3
 80091ec:	3fc68a28 	.word	0x3fc68a28
 80091f0:	509f79fb 	.word	0x509f79fb
 80091f4:	3fd34413 	.word	0x3fd34413
 80091f8:	7ff00000 	.word	0x7ff00000
 80091fc:	0800a5f5 	.word	0x0800a5f5
 8009200:	3ff80000 	.word	0x3ff80000
 8009204:	0800a650 	.word	0x0800a650
 8009208:	0800a628 	.word	0x0800a628
 800920c:	0800a621 	.word	0x0800a621
 8009210:	07f1      	lsls	r1, r6, #31
 8009212:	d508      	bpl.n	8009226 <_dtoa_r+0x34e>
 8009214:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800921c:	f7f7 f9f4 	bl	8000608 <__aeabi_dmul>
 8009220:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009224:	3501      	adds	r5, #1
 8009226:	1076      	asrs	r6, r6, #1
 8009228:	3708      	adds	r7, #8
 800922a:	2e00      	cmp	r6, #0
 800922c:	d1f0      	bne.n	8009210 <_dtoa_r+0x338>
 800922e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009236:	f7f7 fb11 	bl	800085c <__aeabi_ddiv>
 800923a:	e9cd 0100 	strd	r0, r1, [sp]
 800923e:	e01a      	b.n	8009276 <_dtoa_r+0x39e>
 8009240:	2502      	movs	r5, #2
 8009242:	e7a3      	b.n	800918c <_dtoa_r+0x2b4>
 8009244:	f000 80a0 	beq.w	8009388 <_dtoa_r+0x4b0>
 8009248:	f1ca 0600 	rsb	r6, sl, #0
 800924c:	4b9f      	ldr	r3, [pc, #636]	; (80094cc <_dtoa_r+0x5f4>)
 800924e:	4fa0      	ldr	r7, [pc, #640]	; (80094d0 <_dtoa_r+0x5f8>)
 8009250:	f006 020f 	and.w	r2, r6, #15
 8009254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009260:	f7f7 f9d2 	bl	8000608 <__aeabi_dmul>
 8009264:	e9cd 0100 	strd	r0, r1, [sp]
 8009268:	1136      	asrs	r6, r6, #4
 800926a:	2300      	movs	r3, #0
 800926c:	2502      	movs	r5, #2
 800926e:	2e00      	cmp	r6, #0
 8009270:	d17f      	bne.n	8009372 <_dtoa_r+0x49a>
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e1      	bne.n	800923a <_dtoa_r+0x362>
 8009276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 8087 	beq.w	800938c <_dtoa_r+0x4b4>
 800927e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009282:	2200      	movs	r2, #0
 8009284:	4b93      	ldr	r3, [pc, #588]	; (80094d4 <_dtoa_r+0x5fc>)
 8009286:	4630      	mov	r0, r6
 8009288:	4639      	mov	r1, r7
 800928a:	f7f7 fc2f 	bl	8000aec <__aeabi_dcmplt>
 800928e:	2800      	cmp	r0, #0
 8009290:	d07c      	beq.n	800938c <_dtoa_r+0x4b4>
 8009292:	f1b9 0f00 	cmp.w	r9, #0
 8009296:	d079      	beq.n	800938c <_dtoa_r+0x4b4>
 8009298:	9b02      	ldr	r3, [sp, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	dd35      	ble.n	800930a <_dtoa_r+0x432>
 800929e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80092a2:	9308      	str	r3, [sp, #32]
 80092a4:	4639      	mov	r1, r7
 80092a6:	2200      	movs	r2, #0
 80092a8:	4b8b      	ldr	r3, [pc, #556]	; (80094d8 <_dtoa_r+0x600>)
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7f7 f9ac 	bl	8000608 <__aeabi_dmul>
 80092b0:	e9cd 0100 	strd	r0, r1, [sp]
 80092b4:	9f02      	ldr	r7, [sp, #8]
 80092b6:	3501      	adds	r5, #1
 80092b8:	4628      	mov	r0, r5
 80092ba:	f7f7 f93b 	bl	8000534 <__aeabi_i2d>
 80092be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092c2:	f7f7 f9a1 	bl	8000608 <__aeabi_dmul>
 80092c6:	2200      	movs	r2, #0
 80092c8:	4b84      	ldr	r3, [pc, #528]	; (80094dc <_dtoa_r+0x604>)
 80092ca:	f7f6 ffe7 	bl	800029c <__adddf3>
 80092ce:	4605      	mov	r5, r0
 80092d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80092d4:	2f00      	cmp	r7, #0
 80092d6:	d15d      	bne.n	8009394 <_dtoa_r+0x4bc>
 80092d8:	2200      	movs	r2, #0
 80092da:	4b81      	ldr	r3, [pc, #516]	; (80094e0 <_dtoa_r+0x608>)
 80092dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092e0:	f7f6 ffda 	bl	8000298 <__aeabi_dsub>
 80092e4:	462a      	mov	r2, r5
 80092e6:	4633      	mov	r3, r6
 80092e8:	e9cd 0100 	strd	r0, r1, [sp]
 80092ec:	f7f7 fc1c 	bl	8000b28 <__aeabi_dcmpgt>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	f040 8288 	bne.w	8009806 <_dtoa_r+0x92e>
 80092f6:	462a      	mov	r2, r5
 80092f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80092fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009300:	f7f7 fbf4 	bl	8000aec <__aeabi_dcmplt>
 8009304:	2800      	cmp	r0, #0
 8009306:	f040 827c 	bne.w	8009802 <_dtoa_r+0x92a>
 800930a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800930e:	e9cd 2300 	strd	r2, r3, [sp]
 8009312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009314:	2b00      	cmp	r3, #0
 8009316:	f2c0 8150 	blt.w	80095ba <_dtoa_r+0x6e2>
 800931a:	f1ba 0f0e 	cmp.w	sl, #14
 800931e:	f300 814c 	bgt.w	80095ba <_dtoa_r+0x6e2>
 8009322:	4b6a      	ldr	r3, [pc, #424]	; (80094cc <_dtoa_r+0x5f4>)
 8009324:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009328:	ed93 7b00 	vldr	d7, [r3]
 800932c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800932e:	2b00      	cmp	r3, #0
 8009330:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009334:	f280 80d8 	bge.w	80094e8 <_dtoa_r+0x610>
 8009338:	f1b9 0f00 	cmp.w	r9, #0
 800933c:	f300 80d4 	bgt.w	80094e8 <_dtoa_r+0x610>
 8009340:	f040 825e 	bne.w	8009800 <_dtoa_r+0x928>
 8009344:	2200      	movs	r2, #0
 8009346:	4b66      	ldr	r3, [pc, #408]	; (80094e0 <_dtoa_r+0x608>)
 8009348:	ec51 0b17 	vmov	r0, r1, d7
 800934c:	f7f7 f95c 	bl	8000608 <__aeabi_dmul>
 8009350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009354:	f7f7 fbde 	bl	8000b14 <__aeabi_dcmpge>
 8009358:	464f      	mov	r7, r9
 800935a:	464e      	mov	r6, r9
 800935c:	2800      	cmp	r0, #0
 800935e:	f040 8234 	bne.w	80097ca <_dtoa_r+0x8f2>
 8009362:	2331      	movs	r3, #49	; 0x31
 8009364:	f10b 0501 	add.w	r5, fp, #1
 8009368:	f88b 3000 	strb.w	r3, [fp]
 800936c:	f10a 0a01 	add.w	sl, sl, #1
 8009370:	e22f      	b.n	80097d2 <_dtoa_r+0x8fa>
 8009372:	07f2      	lsls	r2, r6, #31
 8009374:	d505      	bpl.n	8009382 <_dtoa_r+0x4aa>
 8009376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800937a:	f7f7 f945 	bl	8000608 <__aeabi_dmul>
 800937e:	3501      	adds	r5, #1
 8009380:	2301      	movs	r3, #1
 8009382:	1076      	asrs	r6, r6, #1
 8009384:	3708      	adds	r7, #8
 8009386:	e772      	b.n	800926e <_dtoa_r+0x396>
 8009388:	2502      	movs	r5, #2
 800938a:	e774      	b.n	8009276 <_dtoa_r+0x39e>
 800938c:	f8cd a020 	str.w	sl, [sp, #32]
 8009390:	464f      	mov	r7, r9
 8009392:	e791      	b.n	80092b8 <_dtoa_r+0x3e0>
 8009394:	4b4d      	ldr	r3, [pc, #308]	; (80094cc <_dtoa_r+0x5f4>)
 8009396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800939a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800939e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d047      	beq.n	8009434 <_dtoa_r+0x55c>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	2000      	movs	r0, #0
 80093aa:	494e      	ldr	r1, [pc, #312]	; (80094e4 <_dtoa_r+0x60c>)
 80093ac:	f7f7 fa56 	bl	800085c <__aeabi_ddiv>
 80093b0:	462a      	mov	r2, r5
 80093b2:	4633      	mov	r3, r6
 80093b4:	f7f6 ff70 	bl	8000298 <__aeabi_dsub>
 80093b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093bc:	465d      	mov	r5, fp
 80093be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093c2:	f7f7 fbd1 	bl	8000b68 <__aeabi_d2iz>
 80093c6:	4606      	mov	r6, r0
 80093c8:	f7f7 f8b4 	bl	8000534 <__aeabi_i2d>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093d4:	f7f6 ff60 	bl	8000298 <__aeabi_dsub>
 80093d8:	3630      	adds	r6, #48	; 0x30
 80093da:	f805 6b01 	strb.w	r6, [r5], #1
 80093de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80093e2:	e9cd 0100 	strd	r0, r1, [sp]
 80093e6:	f7f7 fb81 	bl	8000aec <__aeabi_dcmplt>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d163      	bne.n	80094b6 <_dtoa_r+0x5de>
 80093ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093f2:	2000      	movs	r0, #0
 80093f4:	4937      	ldr	r1, [pc, #220]	; (80094d4 <_dtoa_r+0x5fc>)
 80093f6:	f7f6 ff4f 	bl	8000298 <__aeabi_dsub>
 80093fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80093fe:	f7f7 fb75 	bl	8000aec <__aeabi_dcmplt>
 8009402:	2800      	cmp	r0, #0
 8009404:	f040 80b7 	bne.w	8009576 <_dtoa_r+0x69e>
 8009408:	eba5 030b 	sub.w	r3, r5, fp
 800940c:	429f      	cmp	r7, r3
 800940e:	f77f af7c 	ble.w	800930a <_dtoa_r+0x432>
 8009412:	2200      	movs	r2, #0
 8009414:	4b30      	ldr	r3, [pc, #192]	; (80094d8 <_dtoa_r+0x600>)
 8009416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800941a:	f7f7 f8f5 	bl	8000608 <__aeabi_dmul>
 800941e:	2200      	movs	r2, #0
 8009420:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009424:	4b2c      	ldr	r3, [pc, #176]	; (80094d8 <_dtoa_r+0x600>)
 8009426:	e9dd 0100 	ldrd	r0, r1, [sp]
 800942a:	f7f7 f8ed 	bl	8000608 <__aeabi_dmul>
 800942e:	e9cd 0100 	strd	r0, r1, [sp]
 8009432:	e7c4      	b.n	80093be <_dtoa_r+0x4e6>
 8009434:	462a      	mov	r2, r5
 8009436:	4633      	mov	r3, r6
 8009438:	f7f7 f8e6 	bl	8000608 <__aeabi_dmul>
 800943c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009440:	eb0b 0507 	add.w	r5, fp, r7
 8009444:	465e      	mov	r6, fp
 8009446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800944a:	f7f7 fb8d 	bl	8000b68 <__aeabi_d2iz>
 800944e:	4607      	mov	r7, r0
 8009450:	f7f7 f870 	bl	8000534 <__aeabi_i2d>
 8009454:	3730      	adds	r7, #48	; 0x30
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800945e:	f7f6 ff1b 	bl	8000298 <__aeabi_dsub>
 8009462:	f806 7b01 	strb.w	r7, [r6], #1
 8009466:	42ae      	cmp	r6, r5
 8009468:	e9cd 0100 	strd	r0, r1, [sp]
 800946c:	f04f 0200 	mov.w	r2, #0
 8009470:	d126      	bne.n	80094c0 <_dtoa_r+0x5e8>
 8009472:	4b1c      	ldr	r3, [pc, #112]	; (80094e4 <_dtoa_r+0x60c>)
 8009474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009478:	f7f6 ff10 	bl	800029c <__adddf3>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009484:	f7f7 fb50 	bl	8000b28 <__aeabi_dcmpgt>
 8009488:	2800      	cmp	r0, #0
 800948a:	d174      	bne.n	8009576 <_dtoa_r+0x69e>
 800948c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009490:	2000      	movs	r0, #0
 8009492:	4914      	ldr	r1, [pc, #80]	; (80094e4 <_dtoa_r+0x60c>)
 8009494:	f7f6 ff00 	bl	8000298 <__aeabi_dsub>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094a0:	f7f7 fb24 	bl	8000aec <__aeabi_dcmplt>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f43f af30 	beq.w	800930a <_dtoa_r+0x432>
 80094aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094ae:	2b30      	cmp	r3, #48	; 0x30
 80094b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80094b4:	d002      	beq.n	80094bc <_dtoa_r+0x5e4>
 80094b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80094ba:	e04a      	b.n	8009552 <_dtoa_r+0x67a>
 80094bc:	4615      	mov	r5, r2
 80094be:	e7f4      	b.n	80094aa <_dtoa_r+0x5d2>
 80094c0:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <_dtoa_r+0x600>)
 80094c2:	f7f7 f8a1 	bl	8000608 <__aeabi_dmul>
 80094c6:	e9cd 0100 	strd	r0, r1, [sp]
 80094ca:	e7bc      	b.n	8009446 <_dtoa_r+0x56e>
 80094cc:	0800a650 	.word	0x0800a650
 80094d0:	0800a628 	.word	0x0800a628
 80094d4:	3ff00000 	.word	0x3ff00000
 80094d8:	40240000 	.word	0x40240000
 80094dc:	401c0000 	.word	0x401c0000
 80094e0:	40140000 	.word	0x40140000
 80094e4:	3fe00000 	.word	0x3fe00000
 80094e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80094ec:	465d      	mov	r5, fp
 80094ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094f2:	4630      	mov	r0, r6
 80094f4:	4639      	mov	r1, r7
 80094f6:	f7f7 f9b1 	bl	800085c <__aeabi_ddiv>
 80094fa:	f7f7 fb35 	bl	8000b68 <__aeabi_d2iz>
 80094fe:	4680      	mov	r8, r0
 8009500:	f7f7 f818 	bl	8000534 <__aeabi_i2d>
 8009504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009508:	f7f7 f87e 	bl	8000608 <__aeabi_dmul>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	4630      	mov	r0, r6
 8009512:	4639      	mov	r1, r7
 8009514:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009518:	f7f6 febe 	bl	8000298 <__aeabi_dsub>
 800951c:	f805 6b01 	strb.w	r6, [r5], #1
 8009520:	eba5 060b 	sub.w	r6, r5, fp
 8009524:	45b1      	cmp	r9, r6
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	d139      	bne.n	80095a0 <_dtoa_r+0x6c8>
 800952c:	f7f6 feb6 	bl	800029c <__adddf3>
 8009530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009534:	4606      	mov	r6, r0
 8009536:	460f      	mov	r7, r1
 8009538:	f7f7 faf6 	bl	8000b28 <__aeabi_dcmpgt>
 800953c:	b9c8      	cbnz	r0, 8009572 <_dtoa_r+0x69a>
 800953e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009542:	4630      	mov	r0, r6
 8009544:	4639      	mov	r1, r7
 8009546:	f7f7 fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800954a:	b110      	cbz	r0, 8009552 <_dtoa_r+0x67a>
 800954c:	f018 0f01 	tst.w	r8, #1
 8009550:	d10f      	bne.n	8009572 <_dtoa_r+0x69a>
 8009552:	9904      	ldr	r1, [sp, #16]
 8009554:	4620      	mov	r0, r4
 8009556:	f000 facc 	bl	8009af2 <_Bfree>
 800955a:	2300      	movs	r3, #0
 800955c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800955e:	702b      	strb	r3, [r5, #0]
 8009560:	f10a 0301 	add.w	r3, sl, #1
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 8241 	beq.w	80099f0 <_dtoa_r+0xb18>
 800956e:	601d      	str	r5, [r3, #0]
 8009570:	e23e      	b.n	80099f0 <_dtoa_r+0xb18>
 8009572:	f8cd a020 	str.w	sl, [sp, #32]
 8009576:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800957a:	2a39      	cmp	r2, #57	; 0x39
 800957c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009580:	d108      	bne.n	8009594 <_dtoa_r+0x6bc>
 8009582:	459b      	cmp	fp, r3
 8009584:	d10a      	bne.n	800959c <_dtoa_r+0x6c4>
 8009586:	9b08      	ldr	r3, [sp, #32]
 8009588:	3301      	adds	r3, #1
 800958a:	9308      	str	r3, [sp, #32]
 800958c:	2330      	movs	r3, #48	; 0x30
 800958e:	f88b 3000 	strb.w	r3, [fp]
 8009592:	465b      	mov	r3, fp
 8009594:	781a      	ldrb	r2, [r3, #0]
 8009596:	3201      	adds	r2, #1
 8009598:	701a      	strb	r2, [r3, #0]
 800959a:	e78c      	b.n	80094b6 <_dtoa_r+0x5de>
 800959c:	461d      	mov	r5, r3
 800959e:	e7ea      	b.n	8009576 <_dtoa_r+0x69e>
 80095a0:	2200      	movs	r2, #0
 80095a2:	4b9b      	ldr	r3, [pc, #620]	; (8009810 <_dtoa_r+0x938>)
 80095a4:	f7f7 f830 	bl	8000608 <__aeabi_dmul>
 80095a8:	2200      	movs	r2, #0
 80095aa:	2300      	movs	r3, #0
 80095ac:	4606      	mov	r6, r0
 80095ae:	460f      	mov	r7, r1
 80095b0:	f7f7 fa92 	bl	8000ad8 <__aeabi_dcmpeq>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d09a      	beq.n	80094ee <_dtoa_r+0x616>
 80095b8:	e7cb      	b.n	8009552 <_dtoa_r+0x67a>
 80095ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095bc:	2a00      	cmp	r2, #0
 80095be:	f000 808b 	beq.w	80096d8 <_dtoa_r+0x800>
 80095c2:	9a06      	ldr	r2, [sp, #24]
 80095c4:	2a01      	cmp	r2, #1
 80095c6:	dc6e      	bgt.n	80096a6 <_dtoa_r+0x7ce>
 80095c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	d067      	beq.n	800969e <_dtoa_r+0x7c6>
 80095ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095d2:	9f07      	ldr	r7, [sp, #28]
 80095d4:	9d05      	ldr	r5, [sp, #20]
 80095d6:	9a05      	ldr	r2, [sp, #20]
 80095d8:	2101      	movs	r1, #1
 80095da:	441a      	add	r2, r3
 80095dc:	4620      	mov	r0, r4
 80095de:	9205      	str	r2, [sp, #20]
 80095e0:	4498      	add	r8, r3
 80095e2:	f000 fb26 	bl	8009c32 <__i2b>
 80095e6:	4606      	mov	r6, r0
 80095e8:	2d00      	cmp	r5, #0
 80095ea:	dd0c      	ble.n	8009606 <_dtoa_r+0x72e>
 80095ec:	f1b8 0f00 	cmp.w	r8, #0
 80095f0:	dd09      	ble.n	8009606 <_dtoa_r+0x72e>
 80095f2:	4545      	cmp	r5, r8
 80095f4:	9a05      	ldr	r2, [sp, #20]
 80095f6:	462b      	mov	r3, r5
 80095f8:	bfa8      	it	ge
 80095fa:	4643      	movge	r3, r8
 80095fc:	1ad2      	subs	r2, r2, r3
 80095fe:	9205      	str	r2, [sp, #20]
 8009600:	1aed      	subs	r5, r5, r3
 8009602:	eba8 0803 	sub.w	r8, r8, r3
 8009606:	9b07      	ldr	r3, [sp, #28]
 8009608:	b1eb      	cbz	r3, 8009646 <_dtoa_r+0x76e>
 800960a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800960c:	2b00      	cmp	r3, #0
 800960e:	d067      	beq.n	80096e0 <_dtoa_r+0x808>
 8009610:	b18f      	cbz	r7, 8009636 <_dtoa_r+0x75e>
 8009612:	4631      	mov	r1, r6
 8009614:	463a      	mov	r2, r7
 8009616:	4620      	mov	r0, r4
 8009618:	f000 fbaa 	bl	8009d70 <__pow5mult>
 800961c:	9a04      	ldr	r2, [sp, #16]
 800961e:	4601      	mov	r1, r0
 8009620:	4606      	mov	r6, r0
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fb0e 	bl	8009c44 <__multiply>
 8009628:	9904      	ldr	r1, [sp, #16]
 800962a:	9008      	str	r0, [sp, #32]
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fa60 	bl	8009af2 <_Bfree>
 8009632:	9b08      	ldr	r3, [sp, #32]
 8009634:	9304      	str	r3, [sp, #16]
 8009636:	9b07      	ldr	r3, [sp, #28]
 8009638:	1bda      	subs	r2, r3, r7
 800963a:	d004      	beq.n	8009646 <_dtoa_r+0x76e>
 800963c:	9904      	ldr	r1, [sp, #16]
 800963e:	4620      	mov	r0, r4
 8009640:	f000 fb96 	bl	8009d70 <__pow5mult>
 8009644:	9004      	str	r0, [sp, #16]
 8009646:	2101      	movs	r1, #1
 8009648:	4620      	mov	r0, r4
 800964a:	f000 faf2 	bl	8009c32 <__i2b>
 800964e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009650:	4607      	mov	r7, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 81d0 	beq.w	80099f8 <_dtoa_r+0xb20>
 8009658:	461a      	mov	r2, r3
 800965a:	4601      	mov	r1, r0
 800965c:	4620      	mov	r0, r4
 800965e:	f000 fb87 	bl	8009d70 <__pow5mult>
 8009662:	9b06      	ldr	r3, [sp, #24]
 8009664:	2b01      	cmp	r3, #1
 8009666:	4607      	mov	r7, r0
 8009668:	dc40      	bgt.n	80096ec <_dtoa_r+0x814>
 800966a:	9b00      	ldr	r3, [sp, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d139      	bne.n	80096e4 <_dtoa_r+0x80c>
 8009670:	9b01      	ldr	r3, [sp, #4]
 8009672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009676:	2b00      	cmp	r3, #0
 8009678:	d136      	bne.n	80096e8 <_dtoa_r+0x810>
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009680:	0d1b      	lsrs	r3, r3, #20
 8009682:	051b      	lsls	r3, r3, #20
 8009684:	b12b      	cbz	r3, 8009692 <_dtoa_r+0x7ba>
 8009686:	9b05      	ldr	r3, [sp, #20]
 8009688:	3301      	adds	r3, #1
 800968a:	9305      	str	r3, [sp, #20]
 800968c:	f108 0801 	add.w	r8, r8, #1
 8009690:	2301      	movs	r3, #1
 8009692:	9307      	str	r3, [sp, #28]
 8009694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009696:	2b00      	cmp	r3, #0
 8009698:	d12a      	bne.n	80096f0 <_dtoa_r+0x818>
 800969a:	2001      	movs	r0, #1
 800969c:	e030      	b.n	8009700 <_dtoa_r+0x828>
 800969e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096a4:	e795      	b.n	80095d2 <_dtoa_r+0x6fa>
 80096a6:	9b07      	ldr	r3, [sp, #28]
 80096a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80096ac:	42bb      	cmp	r3, r7
 80096ae:	bfbf      	itttt	lt
 80096b0:	9b07      	ldrlt	r3, [sp, #28]
 80096b2:	9707      	strlt	r7, [sp, #28]
 80096b4:	1afa      	sublt	r2, r7, r3
 80096b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80096b8:	bfbb      	ittet	lt
 80096ba:	189b      	addlt	r3, r3, r2
 80096bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80096be:	1bdf      	subge	r7, r3, r7
 80096c0:	2700      	movlt	r7, #0
 80096c2:	f1b9 0f00 	cmp.w	r9, #0
 80096c6:	bfb5      	itete	lt
 80096c8:	9b05      	ldrlt	r3, [sp, #20]
 80096ca:	9d05      	ldrge	r5, [sp, #20]
 80096cc:	eba3 0509 	sublt.w	r5, r3, r9
 80096d0:	464b      	movge	r3, r9
 80096d2:	bfb8      	it	lt
 80096d4:	2300      	movlt	r3, #0
 80096d6:	e77e      	b.n	80095d6 <_dtoa_r+0x6fe>
 80096d8:	9f07      	ldr	r7, [sp, #28]
 80096da:	9d05      	ldr	r5, [sp, #20]
 80096dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80096de:	e783      	b.n	80095e8 <_dtoa_r+0x710>
 80096e0:	9a07      	ldr	r2, [sp, #28]
 80096e2:	e7ab      	b.n	800963c <_dtoa_r+0x764>
 80096e4:	2300      	movs	r3, #0
 80096e6:	e7d4      	b.n	8009692 <_dtoa_r+0x7ba>
 80096e8:	9b00      	ldr	r3, [sp, #0]
 80096ea:	e7d2      	b.n	8009692 <_dtoa_r+0x7ba>
 80096ec:	2300      	movs	r3, #0
 80096ee:	9307      	str	r3, [sp, #28]
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80096f6:	6918      	ldr	r0, [r3, #16]
 80096f8:	f000 fa4d 	bl	8009b96 <__hi0bits>
 80096fc:	f1c0 0020 	rsb	r0, r0, #32
 8009700:	4440      	add	r0, r8
 8009702:	f010 001f 	ands.w	r0, r0, #31
 8009706:	d047      	beq.n	8009798 <_dtoa_r+0x8c0>
 8009708:	f1c0 0320 	rsb	r3, r0, #32
 800970c:	2b04      	cmp	r3, #4
 800970e:	dd3b      	ble.n	8009788 <_dtoa_r+0x8b0>
 8009710:	9b05      	ldr	r3, [sp, #20]
 8009712:	f1c0 001c 	rsb	r0, r0, #28
 8009716:	4403      	add	r3, r0
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	4405      	add	r5, r0
 800971c:	4480      	add	r8, r0
 800971e:	9b05      	ldr	r3, [sp, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	dd05      	ble.n	8009730 <_dtoa_r+0x858>
 8009724:	461a      	mov	r2, r3
 8009726:	9904      	ldr	r1, [sp, #16]
 8009728:	4620      	mov	r0, r4
 800972a:	f000 fb6f 	bl	8009e0c <__lshift>
 800972e:	9004      	str	r0, [sp, #16]
 8009730:	f1b8 0f00 	cmp.w	r8, #0
 8009734:	dd05      	ble.n	8009742 <_dtoa_r+0x86a>
 8009736:	4639      	mov	r1, r7
 8009738:	4642      	mov	r2, r8
 800973a:	4620      	mov	r0, r4
 800973c:	f000 fb66 	bl	8009e0c <__lshift>
 8009740:	4607      	mov	r7, r0
 8009742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009744:	b353      	cbz	r3, 800979c <_dtoa_r+0x8c4>
 8009746:	4639      	mov	r1, r7
 8009748:	9804      	ldr	r0, [sp, #16]
 800974a:	f000 fbb3 	bl	8009eb4 <__mcmp>
 800974e:	2800      	cmp	r0, #0
 8009750:	da24      	bge.n	800979c <_dtoa_r+0x8c4>
 8009752:	2300      	movs	r3, #0
 8009754:	220a      	movs	r2, #10
 8009756:	9904      	ldr	r1, [sp, #16]
 8009758:	4620      	mov	r0, r4
 800975a:	f000 f9e1 	bl	8009b20 <__multadd>
 800975e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009760:	9004      	str	r0, [sp, #16]
 8009762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 814d 	beq.w	8009a06 <_dtoa_r+0xb2e>
 800976c:	2300      	movs	r3, #0
 800976e:	4631      	mov	r1, r6
 8009770:	220a      	movs	r2, #10
 8009772:	4620      	mov	r0, r4
 8009774:	f000 f9d4 	bl	8009b20 <__multadd>
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	4606      	mov	r6, r0
 800977e:	dc4f      	bgt.n	8009820 <_dtoa_r+0x948>
 8009780:	9b06      	ldr	r3, [sp, #24]
 8009782:	2b02      	cmp	r3, #2
 8009784:	dd4c      	ble.n	8009820 <_dtoa_r+0x948>
 8009786:	e011      	b.n	80097ac <_dtoa_r+0x8d4>
 8009788:	d0c9      	beq.n	800971e <_dtoa_r+0x846>
 800978a:	9a05      	ldr	r2, [sp, #20]
 800978c:	331c      	adds	r3, #28
 800978e:	441a      	add	r2, r3
 8009790:	9205      	str	r2, [sp, #20]
 8009792:	441d      	add	r5, r3
 8009794:	4498      	add	r8, r3
 8009796:	e7c2      	b.n	800971e <_dtoa_r+0x846>
 8009798:	4603      	mov	r3, r0
 800979a:	e7f6      	b.n	800978a <_dtoa_r+0x8b2>
 800979c:	f1b9 0f00 	cmp.w	r9, #0
 80097a0:	dc38      	bgt.n	8009814 <_dtoa_r+0x93c>
 80097a2:	9b06      	ldr	r3, [sp, #24]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	dd35      	ble.n	8009814 <_dtoa_r+0x93c>
 80097a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80097ac:	9b02      	ldr	r3, [sp, #8]
 80097ae:	b963      	cbnz	r3, 80097ca <_dtoa_r+0x8f2>
 80097b0:	4639      	mov	r1, r7
 80097b2:	2205      	movs	r2, #5
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 f9b3 	bl	8009b20 <__multadd>
 80097ba:	4601      	mov	r1, r0
 80097bc:	4607      	mov	r7, r0
 80097be:	9804      	ldr	r0, [sp, #16]
 80097c0:	f000 fb78 	bl	8009eb4 <__mcmp>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f73f adcc 	bgt.w	8009362 <_dtoa_r+0x48a>
 80097ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097cc:	465d      	mov	r5, fp
 80097ce:	ea6f 0a03 	mvn.w	sl, r3
 80097d2:	f04f 0900 	mov.w	r9, #0
 80097d6:	4639      	mov	r1, r7
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 f98a 	bl	8009af2 <_Bfree>
 80097de:	2e00      	cmp	r6, #0
 80097e0:	f43f aeb7 	beq.w	8009552 <_dtoa_r+0x67a>
 80097e4:	f1b9 0f00 	cmp.w	r9, #0
 80097e8:	d005      	beq.n	80097f6 <_dtoa_r+0x91e>
 80097ea:	45b1      	cmp	r9, r6
 80097ec:	d003      	beq.n	80097f6 <_dtoa_r+0x91e>
 80097ee:	4649      	mov	r1, r9
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 f97e 	bl	8009af2 <_Bfree>
 80097f6:	4631      	mov	r1, r6
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 f97a 	bl	8009af2 <_Bfree>
 80097fe:	e6a8      	b.n	8009552 <_dtoa_r+0x67a>
 8009800:	2700      	movs	r7, #0
 8009802:	463e      	mov	r6, r7
 8009804:	e7e1      	b.n	80097ca <_dtoa_r+0x8f2>
 8009806:	f8dd a020 	ldr.w	sl, [sp, #32]
 800980a:	463e      	mov	r6, r7
 800980c:	e5a9      	b.n	8009362 <_dtoa_r+0x48a>
 800980e:	bf00      	nop
 8009810:	40240000 	.word	0x40240000
 8009814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009816:	f8cd 9008 	str.w	r9, [sp, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 80fa 	beq.w	8009a14 <_dtoa_r+0xb3c>
 8009820:	2d00      	cmp	r5, #0
 8009822:	dd05      	ble.n	8009830 <_dtoa_r+0x958>
 8009824:	4631      	mov	r1, r6
 8009826:	462a      	mov	r2, r5
 8009828:	4620      	mov	r0, r4
 800982a:	f000 faef 	bl	8009e0c <__lshift>
 800982e:	4606      	mov	r6, r0
 8009830:	9b07      	ldr	r3, [sp, #28]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d04c      	beq.n	80098d0 <_dtoa_r+0x9f8>
 8009836:	6871      	ldr	r1, [r6, #4]
 8009838:	4620      	mov	r0, r4
 800983a:	f000 f926 	bl	8009a8a <_Balloc>
 800983e:	6932      	ldr	r2, [r6, #16]
 8009840:	3202      	adds	r2, #2
 8009842:	4605      	mov	r5, r0
 8009844:	0092      	lsls	r2, r2, #2
 8009846:	f106 010c 	add.w	r1, r6, #12
 800984a:	300c      	adds	r0, #12
 800984c:	f000 f912 	bl	8009a74 <memcpy>
 8009850:	2201      	movs	r2, #1
 8009852:	4629      	mov	r1, r5
 8009854:	4620      	mov	r0, r4
 8009856:	f000 fad9 	bl	8009e0c <__lshift>
 800985a:	9b00      	ldr	r3, [sp, #0]
 800985c:	f8cd b014 	str.w	fp, [sp, #20]
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	46b1      	mov	r9, r6
 8009866:	9307      	str	r3, [sp, #28]
 8009868:	4606      	mov	r6, r0
 800986a:	4639      	mov	r1, r7
 800986c:	9804      	ldr	r0, [sp, #16]
 800986e:	f7ff faa5 	bl	8008dbc <quorem>
 8009872:	4649      	mov	r1, r9
 8009874:	4605      	mov	r5, r0
 8009876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800987a:	9804      	ldr	r0, [sp, #16]
 800987c:	f000 fb1a 	bl	8009eb4 <__mcmp>
 8009880:	4632      	mov	r2, r6
 8009882:	9000      	str	r0, [sp, #0]
 8009884:	4639      	mov	r1, r7
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fb2e 	bl	8009ee8 <__mdiff>
 800988c:	68c3      	ldr	r3, [r0, #12]
 800988e:	4602      	mov	r2, r0
 8009890:	bb03      	cbnz	r3, 80098d4 <_dtoa_r+0x9fc>
 8009892:	4601      	mov	r1, r0
 8009894:	9008      	str	r0, [sp, #32]
 8009896:	9804      	ldr	r0, [sp, #16]
 8009898:	f000 fb0c 	bl	8009eb4 <__mcmp>
 800989c:	9a08      	ldr	r2, [sp, #32]
 800989e:	4603      	mov	r3, r0
 80098a0:	4611      	mov	r1, r2
 80098a2:	4620      	mov	r0, r4
 80098a4:	9308      	str	r3, [sp, #32]
 80098a6:	f000 f924 	bl	8009af2 <_Bfree>
 80098aa:	9b08      	ldr	r3, [sp, #32]
 80098ac:	b9a3      	cbnz	r3, 80098d8 <_dtoa_r+0xa00>
 80098ae:	9a06      	ldr	r2, [sp, #24]
 80098b0:	b992      	cbnz	r2, 80098d8 <_dtoa_r+0xa00>
 80098b2:	9a07      	ldr	r2, [sp, #28]
 80098b4:	b982      	cbnz	r2, 80098d8 <_dtoa_r+0xa00>
 80098b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098ba:	d029      	beq.n	8009910 <_dtoa_r+0xa38>
 80098bc:	9b00      	ldr	r3, [sp, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	dd01      	ble.n	80098c6 <_dtoa_r+0x9ee>
 80098c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80098c6:	9b05      	ldr	r3, [sp, #20]
 80098c8:	1c5d      	adds	r5, r3, #1
 80098ca:	f883 8000 	strb.w	r8, [r3]
 80098ce:	e782      	b.n	80097d6 <_dtoa_r+0x8fe>
 80098d0:	4630      	mov	r0, r6
 80098d2:	e7c2      	b.n	800985a <_dtoa_r+0x982>
 80098d4:	2301      	movs	r3, #1
 80098d6:	e7e3      	b.n	80098a0 <_dtoa_r+0x9c8>
 80098d8:	9a00      	ldr	r2, [sp, #0]
 80098da:	2a00      	cmp	r2, #0
 80098dc:	db04      	blt.n	80098e8 <_dtoa_r+0xa10>
 80098de:	d125      	bne.n	800992c <_dtoa_r+0xa54>
 80098e0:	9a06      	ldr	r2, [sp, #24]
 80098e2:	bb1a      	cbnz	r2, 800992c <_dtoa_r+0xa54>
 80098e4:	9a07      	ldr	r2, [sp, #28]
 80098e6:	bb0a      	cbnz	r2, 800992c <_dtoa_r+0xa54>
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	ddec      	ble.n	80098c6 <_dtoa_r+0x9ee>
 80098ec:	2201      	movs	r2, #1
 80098ee:	9904      	ldr	r1, [sp, #16]
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fa8b 	bl	8009e0c <__lshift>
 80098f6:	4639      	mov	r1, r7
 80098f8:	9004      	str	r0, [sp, #16]
 80098fa:	f000 fadb 	bl	8009eb4 <__mcmp>
 80098fe:	2800      	cmp	r0, #0
 8009900:	dc03      	bgt.n	800990a <_dtoa_r+0xa32>
 8009902:	d1e0      	bne.n	80098c6 <_dtoa_r+0x9ee>
 8009904:	f018 0f01 	tst.w	r8, #1
 8009908:	d0dd      	beq.n	80098c6 <_dtoa_r+0x9ee>
 800990a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800990e:	d1d8      	bne.n	80098c2 <_dtoa_r+0x9ea>
 8009910:	9b05      	ldr	r3, [sp, #20]
 8009912:	9a05      	ldr	r2, [sp, #20]
 8009914:	1c5d      	adds	r5, r3, #1
 8009916:	2339      	movs	r3, #57	; 0x39
 8009918:	7013      	strb	r3, [r2, #0]
 800991a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800991e:	2b39      	cmp	r3, #57	; 0x39
 8009920:	f105 32ff 	add.w	r2, r5, #4294967295
 8009924:	d04f      	beq.n	80099c6 <_dtoa_r+0xaee>
 8009926:	3301      	adds	r3, #1
 8009928:	7013      	strb	r3, [r2, #0]
 800992a:	e754      	b.n	80097d6 <_dtoa_r+0x8fe>
 800992c:	9a05      	ldr	r2, [sp, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f102 0501 	add.w	r5, r2, #1
 8009934:	dd06      	ble.n	8009944 <_dtoa_r+0xa6c>
 8009936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800993a:	d0e9      	beq.n	8009910 <_dtoa_r+0xa38>
 800993c:	f108 0801 	add.w	r8, r8, #1
 8009940:	9b05      	ldr	r3, [sp, #20]
 8009942:	e7c2      	b.n	80098ca <_dtoa_r+0x9f2>
 8009944:	9a02      	ldr	r2, [sp, #8]
 8009946:	f805 8c01 	strb.w	r8, [r5, #-1]
 800994a:	eba5 030b 	sub.w	r3, r5, fp
 800994e:	4293      	cmp	r3, r2
 8009950:	d021      	beq.n	8009996 <_dtoa_r+0xabe>
 8009952:	2300      	movs	r3, #0
 8009954:	220a      	movs	r2, #10
 8009956:	9904      	ldr	r1, [sp, #16]
 8009958:	4620      	mov	r0, r4
 800995a:	f000 f8e1 	bl	8009b20 <__multadd>
 800995e:	45b1      	cmp	r9, r6
 8009960:	9004      	str	r0, [sp, #16]
 8009962:	f04f 0300 	mov.w	r3, #0
 8009966:	f04f 020a 	mov.w	r2, #10
 800996a:	4649      	mov	r1, r9
 800996c:	4620      	mov	r0, r4
 800996e:	d105      	bne.n	800997c <_dtoa_r+0xaa4>
 8009970:	f000 f8d6 	bl	8009b20 <__multadd>
 8009974:	4681      	mov	r9, r0
 8009976:	4606      	mov	r6, r0
 8009978:	9505      	str	r5, [sp, #20]
 800997a:	e776      	b.n	800986a <_dtoa_r+0x992>
 800997c:	f000 f8d0 	bl	8009b20 <__multadd>
 8009980:	4631      	mov	r1, r6
 8009982:	4681      	mov	r9, r0
 8009984:	2300      	movs	r3, #0
 8009986:	220a      	movs	r2, #10
 8009988:	4620      	mov	r0, r4
 800998a:	f000 f8c9 	bl	8009b20 <__multadd>
 800998e:	4606      	mov	r6, r0
 8009990:	e7f2      	b.n	8009978 <_dtoa_r+0xaa0>
 8009992:	f04f 0900 	mov.w	r9, #0
 8009996:	2201      	movs	r2, #1
 8009998:	9904      	ldr	r1, [sp, #16]
 800999a:	4620      	mov	r0, r4
 800999c:	f000 fa36 	bl	8009e0c <__lshift>
 80099a0:	4639      	mov	r1, r7
 80099a2:	9004      	str	r0, [sp, #16]
 80099a4:	f000 fa86 	bl	8009eb4 <__mcmp>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	dcb6      	bgt.n	800991a <_dtoa_r+0xa42>
 80099ac:	d102      	bne.n	80099b4 <_dtoa_r+0xadc>
 80099ae:	f018 0f01 	tst.w	r8, #1
 80099b2:	d1b2      	bne.n	800991a <_dtoa_r+0xa42>
 80099b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099b8:	2b30      	cmp	r3, #48	; 0x30
 80099ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80099be:	f47f af0a 	bne.w	80097d6 <_dtoa_r+0x8fe>
 80099c2:	4615      	mov	r5, r2
 80099c4:	e7f6      	b.n	80099b4 <_dtoa_r+0xadc>
 80099c6:	4593      	cmp	fp, r2
 80099c8:	d105      	bne.n	80099d6 <_dtoa_r+0xafe>
 80099ca:	2331      	movs	r3, #49	; 0x31
 80099cc:	f10a 0a01 	add.w	sl, sl, #1
 80099d0:	f88b 3000 	strb.w	r3, [fp]
 80099d4:	e6ff      	b.n	80097d6 <_dtoa_r+0x8fe>
 80099d6:	4615      	mov	r5, r2
 80099d8:	e79f      	b.n	800991a <_dtoa_r+0xa42>
 80099da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009a40 <_dtoa_r+0xb68>
 80099de:	e007      	b.n	80099f0 <_dtoa_r+0xb18>
 80099e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009a44 <_dtoa_r+0xb6c>
 80099e6:	b11b      	cbz	r3, 80099f0 <_dtoa_r+0xb18>
 80099e8:	f10b 0308 	add.w	r3, fp, #8
 80099ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099ee:	6013      	str	r3, [r2, #0]
 80099f0:	4658      	mov	r0, fp
 80099f2:	b017      	add	sp, #92	; 0x5c
 80099f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f8:	9b06      	ldr	r3, [sp, #24]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	f77f ae35 	ble.w	800966a <_dtoa_r+0x792>
 8009a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a02:	9307      	str	r3, [sp, #28]
 8009a04:	e649      	b.n	800969a <_dtoa_r+0x7c2>
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	dc03      	bgt.n	8009a14 <_dtoa_r+0xb3c>
 8009a0c:	9b06      	ldr	r3, [sp, #24]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	f73f aecc 	bgt.w	80097ac <_dtoa_r+0x8d4>
 8009a14:	465d      	mov	r5, fp
 8009a16:	4639      	mov	r1, r7
 8009a18:	9804      	ldr	r0, [sp, #16]
 8009a1a:	f7ff f9cf 	bl	8008dbc <quorem>
 8009a1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a22:	f805 8b01 	strb.w	r8, [r5], #1
 8009a26:	9a02      	ldr	r2, [sp, #8]
 8009a28:	eba5 030b 	sub.w	r3, r5, fp
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	ddb0      	ble.n	8009992 <_dtoa_r+0xaba>
 8009a30:	2300      	movs	r3, #0
 8009a32:	220a      	movs	r2, #10
 8009a34:	9904      	ldr	r1, [sp, #16]
 8009a36:	4620      	mov	r0, r4
 8009a38:	f000 f872 	bl	8009b20 <__multadd>
 8009a3c:	9004      	str	r0, [sp, #16]
 8009a3e:	e7ea      	b.n	8009a16 <_dtoa_r+0xb3e>
 8009a40:	0800a5f4 	.word	0x0800a5f4
 8009a44:	0800a618 	.word	0x0800a618

08009a48 <_localeconv_r>:
 8009a48:	4b04      	ldr	r3, [pc, #16]	; (8009a5c <_localeconv_r+0x14>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6a18      	ldr	r0, [r3, #32]
 8009a4e:	4b04      	ldr	r3, [pc, #16]	; (8009a60 <_localeconv_r+0x18>)
 8009a50:	2800      	cmp	r0, #0
 8009a52:	bf08      	it	eq
 8009a54:	4618      	moveq	r0, r3
 8009a56:	30f0      	adds	r0, #240	; 0xf0
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20000264 	.word	0x20000264
 8009a60:	200002c8 	.word	0x200002c8

08009a64 <malloc>:
 8009a64:	4b02      	ldr	r3, [pc, #8]	; (8009a70 <malloc+0xc>)
 8009a66:	4601      	mov	r1, r0
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	f000 bb45 	b.w	800a0f8 <_malloc_r>
 8009a6e:	bf00      	nop
 8009a70:	20000264 	.word	0x20000264

08009a74 <memcpy>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	1e43      	subs	r3, r0, #1
 8009a78:	440a      	add	r2, r1
 8009a7a:	4291      	cmp	r1, r2
 8009a7c:	d100      	bne.n	8009a80 <memcpy+0xc>
 8009a7e:	bd10      	pop	{r4, pc}
 8009a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a88:	e7f7      	b.n	8009a7a <memcpy+0x6>

08009a8a <_Balloc>:
 8009a8a:	b570      	push	{r4, r5, r6, lr}
 8009a8c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a8e:	4604      	mov	r4, r0
 8009a90:	460e      	mov	r6, r1
 8009a92:	b93d      	cbnz	r5, 8009aa4 <_Balloc+0x1a>
 8009a94:	2010      	movs	r0, #16
 8009a96:	f7ff ffe5 	bl	8009a64 <malloc>
 8009a9a:	6260      	str	r0, [r4, #36]	; 0x24
 8009a9c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009aa0:	6005      	str	r5, [r0, #0]
 8009aa2:	60c5      	str	r5, [r0, #12]
 8009aa4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009aa6:	68eb      	ldr	r3, [r5, #12]
 8009aa8:	b183      	cbz	r3, 8009acc <_Balloc+0x42>
 8009aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009ab2:	b9b8      	cbnz	r0, 8009ae4 <_Balloc+0x5a>
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	fa01 f506 	lsl.w	r5, r1, r6
 8009aba:	1d6a      	adds	r2, r5, #5
 8009abc:	0092      	lsls	r2, r2, #2
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f000 fabe 	bl	800a040 <_calloc_r>
 8009ac4:	b160      	cbz	r0, 8009ae0 <_Balloc+0x56>
 8009ac6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009aca:	e00e      	b.n	8009aea <_Balloc+0x60>
 8009acc:	2221      	movs	r2, #33	; 0x21
 8009ace:	2104      	movs	r1, #4
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f000 fab5 	bl	800a040 <_calloc_r>
 8009ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ad8:	60e8      	str	r0, [r5, #12]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1e4      	bne.n	8009aaa <_Balloc+0x20>
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	6802      	ldr	r2, [r0, #0]
 8009ae6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009aea:	2300      	movs	r3, #0
 8009aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009af0:	e7f7      	b.n	8009ae2 <_Balloc+0x58>

08009af2 <_Bfree>:
 8009af2:	b570      	push	{r4, r5, r6, lr}
 8009af4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009af6:	4606      	mov	r6, r0
 8009af8:	460d      	mov	r5, r1
 8009afa:	b93c      	cbnz	r4, 8009b0c <_Bfree+0x1a>
 8009afc:	2010      	movs	r0, #16
 8009afe:	f7ff ffb1 	bl	8009a64 <malloc>
 8009b02:	6270      	str	r0, [r6, #36]	; 0x24
 8009b04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b08:	6004      	str	r4, [r0, #0]
 8009b0a:	60c4      	str	r4, [r0, #12]
 8009b0c:	b13d      	cbz	r5, 8009b1e <_Bfree+0x2c>
 8009b0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b10:	686a      	ldr	r2, [r5, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b18:	6029      	str	r1, [r5, #0]
 8009b1a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009b1e:	bd70      	pop	{r4, r5, r6, pc}

08009b20 <__multadd>:
 8009b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b24:	690d      	ldr	r5, [r1, #16]
 8009b26:	461f      	mov	r7, r3
 8009b28:	4606      	mov	r6, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	f101 0c14 	add.w	ip, r1, #20
 8009b30:	2300      	movs	r3, #0
 8009b32:	f8dc 0000 	ldr.w	r0, [ip]
 8009b36:	b281      	uxth	r1, r0
 8009b38:	fb02 7101 	mla	r1, r2, r1, r7
 8009b3c:	0c0f      	lsrs	r7, r1, #16
 8009b3e:	0c00      	lsrs	r0, r0, #16
 8009b40:	fb02 7000 	mla	r0, r2, r0, r7
 8009b44:	b289      	uxth	r1, r1
 8009b46:	3301      	adds	r3, #1
 8009b48:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009b4c:	429d      	cmp	r5, r3
 8009b4e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009b52:	f84c 1b04 	str.w	r1, [ip], #4
 8009b56:	dcec      	bgt.n	8009b32 <__multadd+0x12>
 8009b58:	b1d7      	cbz	r7, 8009b90 <__multadd+0x70>
 8009b5a:	68a3      	ldr	r3, [r4, #8]
 8009b5c:	42ab      	cmp	r3, r5
 8009b5e:	dc12      	bgt.n	8009b86 <__multadd+0x66>
 8009b60:	6861      	ldr	r1, [r4, #4]
 8009b62:	4630      	mov	r0, r6
 8009b64:	3101      	adds	r1, #1
 8009b66:	f7ff ff90 	bl	8009a8a <_Balloc>
 8009b6a:	6922      	ldr	r2, [r4, #16]
 8009b6c:	3202      	adds	r2, #2
 8009b6e:	f104 010c 	add.w	r1, r4, #12
 8009b72:	4680      	mov	r8, r0
 8009b74:	0092      	lsls	r2, r2, #2
 8009b76:	300c      	adds	r0, #12
 8009b78:	f7ff ff7c 	bl	8009a74 <memcpy>
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f7ff ffb7 	bl	8009af2 <_Bfree>
 8009b84:	4644      	mov	r4, r8
 8009b86:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b8a:	3501      	adds	r5, #1
 8009b8c:	615f      	str	r7, [r3, #20]
 8009b8e:	6125      	str	r5, [r4, #16]
 8009b90:	4620      	mov	r0, r4
 8009b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b96 <__hi0bits>:
 8009b96:	0c02      	lsrs	r2, r0, #16
 8009b98:	0412      	lsls	r2, r2, #16
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	b9b2      	cbnz	r2, 8009bcc <__hi0bits+0x36>
 8009b9e:	0403      	lsls	r3, r0, #16
 8009ba0:	2010      	movs	r0, #16
 8009ba2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009ba6:	bf04      	itt	eq
 8009ba8:	021b      	lsleq	r3, r3, #8
 8009baa:	3008      	addeq	r0, #8
 8009bac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009bb0:	bf04      	itt	eq
 8009bb2:	011b      	lsleq	r3, r3, #4
 8009bb4:	3004      	addeq	r0, #4
 8009bb6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009bba:	bf04      	itt	eq
 8009bbc:	009b      	lsleq	r3, r3, #2
 8009bbe:	3002      	addeq	r0, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	db06      	blt.n	8009bd2 <__hi0bits+0x3c>
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	d503      	bpl.n	8009bd0 <__hi0bits+0x3a>
 8009bc8:	3001      	adds	r0, #1
 8009bca:	4770      	bx	lr
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e7e8      	b.n	8009ba2 <__hi0bits+0xc>
 8009bd0:	2020      	movs	r0, #32
 8009bd2:	4770      	bx	lr

08009bd4 <__lo0bits>:
 8009bd4:	6803      	ldr	r3, [r0, #0]
 8009bd6:	f013 0207 	ands.w	r2, r3, #7
 8009bda:	4601      	mov	r1, r0
 8009bdc:	d00b      	beq.n	8009bf6 <__lo0bits+0x22>
 8009bde:	07da      	lsls	r2, r3, #31
 8009be0:	d423      	bmi.n	8009c2a <__lo0bits+0x56>
 8009be2:	0798      	lsls	r0, r3, #30
 8009be4:	bf49      	itett	mi
 8009be6:	085b      	lsrmi	r3, r3, #1
 8009be8:	089b      	lsrpl	r3, r3, #2
 8009bea:	2001      	movmi	r0, #1
 8009bec:	600b      	strmi	r3, [r1, #0]
 8009bee:	bf5c      	itt	pl
 8009bf0:	600b      	strpl	r3, [r1, #0]
 8009bf2:	2002      	movpl	r0, #2
 8009bf4:	4770      	bx	lr
 8009bf6:	b298      	uxth	r0, r3
 8009bf8:	b9a8      	cbnz	r0, 8009c26 <__lo0bits+0x52>
 8009bfa:	0c1b      	lsrs	r3, r3, #16
 8009bfc:	2010      	movs	r0, #16
 8009bfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c02:	bf04      	itt	eq
 8009c04:	0a1b      	lsreq	r3, r3, #8
 8009c06:	3008      	addeq	r0, #8
 8009c08:	071a      	lsls	r2, r3, #28
 8009c0a:	bf04      	itt	eq
 8009c0c:	091b      	lsreq	r3, r3, #4
 8009c0e:	3004      	addeq	r0, #4
 8009c10:	079a      	lsls	r2, r3, #30
 8009c12:	bf04      	itt	eq
 8009c14:	089b      	lsreq	r3, r3, #2
 8009c16:	3002      	addeq	r0, #2
 8009c18:	07da      	lsls	r2, r3, #31
 8009c1a:	d402      	bmi.n	8009c22 <__lo0bits+0x4e>
 8009c1c:	085b      	lsrs	r3, r3, #1
 8009c1e:	d006      	beq.n	8009c2e <__lo0bits+0x5a>
 8009c20:	3001      	adds	r0, #1
 8009c22:	600b      	str	r3, [r1, #0]
 8009c24:	4770      	bx	lr
 8009c26:	4610      	mov	r0, r2
 8009c28:	e7e9      	b.n	8009bfe <__lo0bits+0x2a>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	4770      	bx	lr
 8009c2e:	2020      	movs	r0, #32
 8009c30:	4770      	bx	lr

08009c32 <__i2b>:
 8009c32:	b510      	push	{r4, lr}
 8009c34:	460c      	mov	r4, r1
 8009c36:	2101      	movs	r1, #1
 8009c38:	f7ff ff27 	bl	8009a8a <_Balloc>
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	6144      	str	r4, [r0, #20]
 8009c40:	6102      	str	r2, [r0, #16]
 8009c42:	bd10      	pop	{r4, pc}

08009c44 <__multiply>:
 8009c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c48:	4614      	mov	r4, r2
 8009c4a:	690a      	ldr	r2, [r1, #16]
 8009c4c:	6923      	ldr	r3, [r4, #16]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	bfb8      	it	lt
 8009c52:	460b      	movlt	r3, r1
 8009c54:	4688      	mov	r8, r1
 8009c56:	bfbc      	itt	lt
 8009c58:	46a0      	movlt	r8, r4
 8009c5a:	461c      	movlt	r4, r3
 8009c5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c6c:	eb07 0609 	add.w	r6, r7, r9
 8009c70:	42b3      	cmp	r3, r6
 8009c72:	bfb8      	it	lt
 8009c74:	3101      	addlt	r1, #1
 8009c76:	f7ff ff08 	bl	8009a8a <_Balloc>
 8009c7a:	f100 0514 	add.w	r5, r0, #20
 8009c7e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009c82:	462b      	mov	r3, r5
 8009c84:	2200      	movs	r2, #0
 8009c86:	4573      	cmp	r3, lr
 8009c88:	d316      	bcc.n	8009cb8 <__multiply+0x74>
 8009c8a:	f104 0214 	add.w	r2, r4, #20
 8009c8e:	f108 0114 	add.w	r1, r8, #20
 8009c92:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009c96:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	9b00      	ldr	r3, [sp, #0]
 8009c9e:	9201      	str	r2, [sp, #4]
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d80c      	bhi.n	8009cbe <__multiply+0x7a>
 8009ca4:	2e00      	cmp	r6, #0
 8009ca6:	dd03      	ble.n	8009cb0 <__multiply+0x6c>
 8009ca8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d05d      	beq.n	8009d6c <__multiply+0x128>
 8009cb0:	6106      	str	r6, [r0, #16]
 8009cb2:	b003      	add	sp, #12
 8009cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb8:	f843 2b04 	str.w	r2, [r3], #4
 8009cbc:	e7e3      	b.n	8009c86 <__multiply+0x42>
 8009cbe:	f8b2 b000 	ldrh.w	fp, [r2]
 8009cc2:	f1bb 0f00 	cmp.w	fp, #0
 8009cc6:	d023      	beq.n	8009d10 <__multiply+0xcc>
 8009cc8:	4689      	mov	r9, r1
 8009cca:	46ac      	mov	ip, r5
 8009ccc:	f04f 0800 	mov.w	r8, #0
 8009cd0:	f859 4b04 	ldr.w	r4, [r9], #4
 8009cd4:	f8dc a000 	ldr.w	sl, [ip]
 8009cd8:	b2a3      	uxth	r3, r4
 8009cda:	fa1f fa8a 	uxth.w	sl, sl
 8009cde:	fb0b a303 	mla	r3, fp, r3, sl
 8009ce2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ce6:	f8dc 4000 	ldr.w	r4, [ip]
 8009cea:	4443      	add	r3, r8
 8009cec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009cf0:	fb0b 840a 	mla	r4, fp, sl, r8
 8009cf4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009cf8:	46e2      	mov	sl, ip
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d00:	454f      	cmp	r7, r9
 8009d02:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d06:	f84a 3b04 	str.w	r3, [sl], #4
 8009d0a:	d82b      	bhi.n	8009d64 <__multiply+0x120>
 8009d0c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009d10:	9b01      	ldr	r3, [sp, #4]
 8009d12:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009d16:	3204      	adds	r2, #4
 8009d18:	f1ba 0f00 	cmp.w	sl, #0
 8009d1c:	d020      	beq.n	8009d60 <__multiply+0x11c>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	4689      	mov	r9, r1
 8009d22:	46a8      	mov	r8, r5
 8009d24:	f04f 0b00 	mov.w	fp, #0
 8009d28:	f8b9 c000 	ldrh.w	ip, [r9]
 8009d2c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009d30:	fb0a 440c 	mla	r4, sl, ip, r4
 8009d34:	445c      	add	r4, fp
 8009d36:	46c4      	mov	ip, r8
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d3e:	f84c 3b04 	str.w	r3, [ip], #4
 8009d42:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d46:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009d4a:	0c1b      	lsrs	r3, r3, #16
 8009d4c:	fb0a b303 	mla	r3, sl, r3, fp
 8009d50:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009d54:	454f      	cmp	r7, r9
 8009d56:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009d5a:	d805      	bhi.n	8009d68 <__multiply+0x124>
 8009d5c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d60:	3504      	adds	r5, #4
 8009d62:	e79b      	b.n	8009c9c <__multiply+0x58>
 8009d64:	46d4      	mov	ip, sl
 8009d66:	e7b3      	b.n	8009cd0 <__multiply+0x8c>
 8009d68:	46e0      	mov	r8, ip
 8009d6a:	e7dd      	b.n	8009d28 <__multiply+0xe4>
 8009d6c:	3e01      	subs	r6, #1
 8009d6e:	e799      	b.n	8009ca4 <__multiply+0x60>

08009d70 <__pow5mult>:
 8009d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d74:	4615      	mov	r5, r2
 8009d76:	f012 0203 	ands.w	r2, r2, #3
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	460f      	mov	r7, r1
 8009d7e:	d007      	beq.n	8009d90 <__pow5mult+0x20>
 8009d80:	3a01      	subs	r2, #1
 8009d82:	4c21      	ldr	r4, [pc, #132]	; (8009e08 <__pow5mult+0x98>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d8a:	f7ff fec9 	bl	8009b20 <__multadd>
 8009d8e:	4607      	mov	r7, r0
 8009d90:	10ad      	asrs	r5, r5, #2
 8009d92:	d035      	beq.n	8009e00 <__pow5mult+0x90>
 8009d94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d96:	b93c      	cbnz	r4, 8009da8 <__pow5mult+0x38>
 8009d98:	2010      	movs	r0, #16
 8009d9a:	f7ff fe63 	bl	8009a64 <malloc>
 8009d9e:	6270      	str	r0, [r6, #36]	; 0x24
 8009da0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009da4:	6004      	str	r4, [r0, #0]
 8009da6:	60c4      	str	r4, [r0, #12]
 8009da8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009dac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009db0:	b94c      	cbnz	r4, 8009dc6 <__pow5mult+0x56>
 8009db2:	f240 2171 	movw	r1, #625	; 0x271
 8009db6:	4630      	mov	r0, r6
 8009db8:	f7ff ff3b 	bl	8009c32 <__i2b>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	6003      	str	r3, [r0, #0]
 8009dc6:	f04f 0800 	mov.w	r8, #0
 8009dca:	07eb      	lsls	r3, r5, #31
 8009dcc:	d50a      	bpl.n	8009de4 <__pow5mult+0x74>
 8009dce:	4639      	mov	r1, r7
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff ff36 	bl	8009c44 <__multiply>
 8009dd8:	4639      	mov	r1, r7
 8009dda:	4681      	mov	r9, r0
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7ff fe88 	bl	8009af2 <_Bfree>
 8009de2:	464f      	mov	r7, r9
 8009de4:	106d      	asrs	r5, r5, #1
 8009de6:	d00b      	beq.n	8009e00 <__pow5mult+0x90>
 8009de8:	6820      	ldr	r0, [r4, #0]
 8009dea:	b938      	cbnz	r0, 8009dfc <__pow5mult+0x8c>
 8009dec:	4622      	mov	r2, r4
 8009dee:	4621      	mov	r1, r4
 8009df0:	4630      	mov	r0, r6
 8009df2:	f7ff ff27 	bl	8009c44 <__multiply>
 8009df6:	6020      	str	r0, [r4, #0]
 8009df8:	f8c0 8000 	str.w	r8, [r0]
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	e7e4      	b.n	8009dca <__pow5mult+0x5a>
 8009e00:	4638      	mov	r0, r7
 8009e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e06:	bf00      	nop
 8009e08:	0800a718 	.word	0x0800a718

08009e0c <__lshift>:
 8009e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e10:	460c      	mov	r4, r1
 8009e12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	6849      	ldr	r1, [r1, #4]
 8009e1a:	eb0a 0903 	add.w	r9, sl, r3
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	4607      	mov	r7, r0
 8009e22:	4616      	mov	r6, r2
 8009e24:	f109 0501 	add.w	r5, r9, #1
 8009e28:	42ab      	cmp	r3, r5
 8009e2a:	db32      	blt.n	8009e92 <__lshift+0x86>
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	f7ff fe2c 	bl	8009a8a <_Balloc>
 8009e32:	2300      	movs	r3, #0
 8009e34:	4680      	mov	r8, r0
 8009e36:	f100 0114 	add.w	r1, r0, #20
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	4553      	cmp	r3, sl
 8009e3e:	db2b      	blt.n	8009e98 <__lshift+0x8c>
 8009e40:	6920      	ldr	r0, [r4, #16]
 8009e42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e46:	f104 0314 	add.w	r3, r4, #20
 8009e4a:	f016 021f 	ands.w	r2, r6, #31
 8009e4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e52:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e56:	d025      	beq.n	8009ea4 <__lshift+0x98>
 8009e58:	f1c2 0e20 	rsb	lr, r2, #32
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	681e      	ldr	r6, [r3, #0]
 8009e60:	468a      	mov	sl, r1
 8009e62:	4096      	lsls	r6, r2
 8009e64:	4330      	orrs	r0, r6
 8009e66:	f84a 0b04 	str.w	r0, [sl], #4
 8009e6a:	f853 0b04 	ldr.w	r0, [r3], #4
 8009e6e:	459c      	cmp	ip, r3
 8009e70:	fa20 f00e 	lsr.w	r0, r0, lr
 8009e74:	d814      	bhi.n	8009ea0 <__lshift+0x94>
 8009e76:	6048      	str	r0, [r1, #4]
 8009e78:	b108      	cbz	r0, 8009e7e <__lshift+0x72>
 8009e7a:	f109 0502 	add.w	r5, r9, #2
 8009e7e:	3d01      	subs	r5, #1
 8009e80:	4638      	mov	r0, r7
 8009e82:	f8c8 5010 	str.w	r5, [r8, #16]
 8009e86:	4621      	mov	r1, r4
 8009e88:	f7ff fe33 	bl	8009af2 <_Bfree>
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	3101      	adds	r1, #1
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	e7c7      	b.n	8009e28 <__lshift+0x1c>
 8009e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	e7cd      	b.n	8009e3c <__lshift+0x30>
 8009ea0:	4651      	mov	r1, sl
 8009ea2:	e7dc      	b.n	8009e5e <__lshift+0x52>
 8009ea4:	3904      	subs	r1, #4
 8009ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eaa:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eae:	459c      	cmp	ip, r3
 8009eb0:	d8f9      	bhi.n	8009ea6 <__lshift+0x9a>
 8009eb2:	e7e4      	b.n	8009e7e <__lshift+0x72>

08009eb4 <__mcmp>:
 8009eb4:	6903      	ldr	r3, [r0, #16]
 8009eb6:	690a      	ldr	r2, [r1, #16]
 8009eb8:	1a9b      	subs	r3, r3, r2
 8009eba:	b530      	push	{r4, r5, lr}
 8009ebc:	d10c      	bne.n	8009ed8 <__mcmp+0x24>
 8009ebe:	0092      	lsls	r2, r2, #2
 8009ec0:	3014      	adds	r0, #20
 8009ec2:	3114      	adds	r1, #20
 8009ec4:	1884      	adds	r4, r0, r2
 8009ec6:	4411      	add	r1, r2
 8009ec8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ecc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ed0:	4295      	cmp	r5, r2
 8009ed2:	d003      	beq.n	8009edc <__mcmp+0x28>
 8009ed4:	d305      	bcc.n	8009ee2 <__mcmp+0x2e>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4618      	mov	r0, r3
 8009eda:	bd30      	pop	{r4, r5, pc}
 8009edc:	42a0      	cmp	r0, r4
 8009ede:	d3f3      	bcc.n	8009ec8 <__mcmp+0x14>
 8009ee0:	e7fa      	b.n	8009ed8 <__mcmp+0x24>
 8009ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee6:	e7f7      	b.n	8009ed8 <__mcmp+0x24>

08009ee8 <__mdiff>:
 8009ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eec:	460d      	mov	r5, r1
 8009eee:	4607      	mov	r7, r0
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	f7ff ffdd 	bl	8009eb4 <__mcmp>
 8009efa:	1e06      	subs	r6, r0, #0
 8009efc:	d108      	bne.n	8009f10 <__mdiff+0x28>
 8009efe:	4631      	mov	r1, r6
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff fdc2 	bl	8009a8a <_Balloc>
 8009f06:	2301      	movs	r3, #1
 8009f08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f10:	bfa4      	itt	ge
 8009f12:	4623      	movge	r3, r4
 8009f14:	462c      	movge	r4, r5
 8009f16:	4638      	mov	r0, r7
 8009f18:	6861      	ldr	r1, [r4, #4]
 8009f1a:	bfa6      	itte	ge
 8009f1c:	461d      	movge	r5, r3
 8009f1e:	2600      	movge	r6, #0
 8009f20:	2601      	movlt	r6, #1
 8009f22:	f7ff fdb2 	bl	8009a8a <_Balloc>
 8009f26:	692b      	ldr	r3, [r5, #16]
 8009f28:	60c6      	str	r6, [r0, #12]
 8009f2a:	6926      	ldr	r6, [r4, #16]
 8009f2c:	f105 0914 	add.w	r9, r5, #20
 8009f30:	f104 0214 	add.w	r2, r4, #20
 8009f34:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009f38:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009f3c:	f100 0514 	add.w	r5, r0, #20
 8009f40:	f04f 0e00 	mov.w	lr, #0
 8009f44:	f852 ab04 	ldr.w	sl, [r2], #4
 8009f48:	f859 4b04 	ldr.w	r4, [r9], #4
 8009f4c:	fa1e f18a 	uxtah	r1, lr, sl
 8009f50:	b2a3      	uxth	r3, r4
 8009f52:	1ac9      	subs	r1, r1, r3
 8009f54:	0c23      	lsrs	r3, r4, #16
 8009f56:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009f5a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009f5e:	b289      	uxth	r1, r1
 8009f60:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009f64:	45c8      	cmp	r8, r9
 8009f66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009f6a:	4694      	mov	ip, r2
 8009f6c:	f845 3b04 	str.w	r3, [r5], #4
 8009f70:	d8e8      	bhi.n	8009f44 <__mdiff+0x5c>
 8009f72:	45bc      	cmp	ip, r7
 8009f74:	d304      	bcc.n	8009f80 <__mdiff+0x98>
 8009f76:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009f7a:	b183      	cbz	r3, 8009f9e <__mdiff+0xb6>
 8009f7c:	6106      	str	r6, [r0, #16]
 8009f7e:	e7c5      	b.n	8009f0c <__mdiff+0x24>
 8009f80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009f84:	fa1e f381 	uxtah	r3, lr, r1
 8009f88:	141a      	asrs	r2, r3, #16
 8009f8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f94:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009f98:	f845 3b04 	str.w	r3, [r5], #4
 8009f9c:	e7e9      	b.n	8009f72 <__mdiff+0x8a>
 8009f9e:	3e01      	subs	r6, #1
 8009fa0:	e7e9      	b.n	8009f76 <__mdiff+0x8e>

08009fa2 <__d2b>:
 8009fa2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fa6:	460e      	mov	r6, r1
 8009fa8:	2101      	movs	r1, #1
 8009faa:	ec59 8b10 	vmov	r8, r9, d0
 8009fae:	4615      	mov	r5, r2
 8009fb0:	f7ff fd6b 	bl	8009a8a <_Balloc>
 8009fb4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009fb8:	4607      	mov	r7, r0
 8009fba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fbe:	bb34      	cbnz	r4, 800a00e <__d2b+0x6c>
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	f1b8 0300 	subs.w	r3, r8, #0
 8009fc6:	d027      	beq.n	800a018 <__d2b+0x76>
 8009fc8:	a802      	add	r0, sp, #8
 8009fca:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009fce:	f7ff fe01 	bl	8009bd4 <__lo0bits>
 8009fd2:	9900      	ldr	r1, [sp, #0]
 8009fd4:	b1f0      	cbz	r0, 800a014 <__d2b+0x72>
 8009fd6:	9a01      	ldr	r2, [sp, #4]
 8009fd8:	f1c0 0320 	rsb	r3, r0, #32
 8009fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe0:	430b      	orrs	r3, r1
 8009fe2:	40c2      	lsrs	r2, r0
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	9201      	str	r2, [sp, #4]
 8009fe8:	9b01      	ldr	r3, [sp, #4]
 8009fea:	61bb      	str	r3, [r7, #24]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	bf14      	ite	ne
 8009ff0:	2102      	movne	r1, #2
 8009ff2:	2101      	moveq	r1, #1
 8009ff4:	6139      	str	r1, [r7, #16]
 8009ff6:	b1c4      	cbz	r4, 800a02a <__d2b+0x88>
 8009ff8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009ffc:	4404      	add	r4, r0
 8009ffe:	6034      	str	r4, [r6, #0]
 800a000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a004:	6028      	str	r0, [r5, #0]
 800a006:	4638      	mov	r0, r7
 800a008:	b003      	add	sp, #12
 800a00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a00e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a012:	e7d5      	b.n	8009fc0 <__d2b+0x1e>
 800a014:	6179      	str	r1, [r7, #20]
 800a016:	e7e7      	b.n	8009fe8 <__d2b+0x46>
 800a018:	a801      	add	r0, sp, #4
 800a01a:	f7ff fddb 	bl	8009bd4 <__lo0bits>
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	617b      	str	r3, [r7, #20]
 800a022:	2101      	movs	r1, #1
 800a024:	6139      	str	r1, [r7, #16]
 800a026:	3020      	adds	r0, #32
 800a028:	e7e5      	b.n	8009ff6 <__d2b+0x54>
 800a02a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a02e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a032:	6030      	str	r0, [r6, #0]
 800a034:	6918      	ldr	r0, [r3, #16]
 800a036:	f7ff fdae 	bl	8009b96 <__hi0bits>
 800a03a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a03e:	e7e1      	b.n	800a004 <__d2b+0x62>

0800a040 <_calloc_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	fb02 f401 	mul.w	r4, r2, r1
 800a046:	4621      	mov	r1, r4
 800a048:	f000 f856 	bl	800a0f8 <_malloc_r>
 800a04c:	4605      	mov	r5, r0
 800a04e:	b118      	cbz	r0, 800a058 <_calloc_r+0x18>
 800a050:	4622      	mov	r2, r4
 800a052:	2100      	movs	r1, #0
 800a054:	f7fe fa1a 	bl	800848c <memset>
 800a058:	4628      	mov	r0, r5
 800a05a:	bd38      	pop	{r3, r4, r5, pc}

0800a05c <_free_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4605      	mov	r5, r0
 800a060:	2900      	cmp	r1, #0
 800a062:	d045      	beq.n	800a0f0 <_free_r+0x94>
 800a064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a068:	1f0c      	subs	r4, r1, #4
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	bfb8      	it	lt
 800a06e:	18e4      	addlt	r4, r4, r3
 800a070:	f000 fa29 	bl	800a4c6 <__malloc_lock>
 800a074:	4a1f      	ldr	r2, [pc, #124]	; (800a0f4 <_free_r+0x98>)
 800a076:	6813      	ldr	r3, [r2, #0]
 800a078:	4610      	mov	r0, r2
 800a07a:	b933      	cbnz	r3, 800a08a <_free_r+0x2e>
 800a07c:	6063      	str	r3, [r4, #4]
 800a07e:	6014      	str	r4, [r2, #0]
 800a080:	4628      	mov	r0, r5
 800a082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a086:	f000 ba1f 	b.w	800a4c8 <__malloc_unlock>
 800a08a:	42a3      	cmp	r3, r4
 800a08c:	d90c      	bls.n	800a0a8 <_free_r+0x4c>
 800a08e:	6821      	ldr	r1, [r4, #0]
 800a090:	1862      	adds	r2, r4, r1
 800a092:	4293      	cmp	r3, r2
 800a094:	bf04      	itt	eq
 800a096:	681a      	ldreq	r2, [r3, #0]
 800a098:	685b      	ldreq	r3, [r3, #4]
 800a09a:	6063      	str	r3, [r4, #4]
 800a09c:	bf04      	itt	eq
 800a09e:	1852      	addeq	r2, r2, r1
 800a0a0:	6022      	streq	r2, [r4, #0]
 800a0a2:	6004      	str	r4, [r0, #0]
 800a0a4:	e7ec      	b.n	800a080 <_free_r+0x24>
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	b10a      	cbz	r2, 800a0b0 <_free_r+0x54>
 800a0ac:	42a2      	cmp	r2, r4
 800a0ae:	d9fa      	bls.n	800a0a6 <_free_r+0x4a>
 800a0b0:	6819      	ldr	r1, [r3, #0]
 800a0b2:	1858      	adds	r0, r3, r1
 800a0b4:	42a0      	cmp	r0, r4
 800a0b6:	d10b      	bne.n	800a0d0 <_free_r+0x74>
 800a0b8:	6820      	ldr	r0, [r4, #0]
 800a0ba:	4401      	add	r1, r0
 800a0bc:	1858      	adds	r0, r3, r1
 800a0be:	4282      	cmp	r2, r0
 800a0c0:	6019      	str	r1, [r3, #0]
 800a0c2:	d1dd      	bne.n	800a080 <_free_r+0x24>
 800a0c4:	6810      	ldr	r0, [r2, #0]
 800a0c6:	6852      	ldr	r2, [r2, #4]
 800a0c8:	605a      	str	r2, [r3, #4]
 800a0ca:	4401      	add	r1, r0
 800a0cc:	6019      	str	r1, [r3, #0]
 800a0ce:	e7d7      	b.n	800a080 <_free_r+0x24>
 800a0d0:	d902      	bls.n	800a0d8 <_free_r+0x7c>
 800a0d2:	230c      	movs	r3, #12
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	e7d3      	b.n	800a080 <_free_r+0x24>
 800a0d8:	6820      	ldr	r0, [r4, #0]
 800a0da:	1821      	adds	r1, r4, r0
 800a0dc:	428a      	cmp	r2, r1
 800a0de:	bf04      	itt	eq
 800a0e0:	6811      	ldreq	r1, [r2, #0]
 800a0e2:	6852      	ldreq	r2, [r2, #4]
 800a0e4:	6062      	str	r2, [r4, #4]
 800a0e6:	bf04      	itt	eq
 800a0e8:	1809      	addeq	r1, r1, r0
 800a0ea:	6021      	streq	r1, [r4, #0]
 800a0ec:	605c      	str	r4, [r3, #4]
 800a0ee:	e7c7      	b.n	800a080 <_free_r+0x24>
 800a0f0:	bd38      	pop	{r3, r4, r5, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20000528 	.word	0x20000528

0800a0f8 <_malloc_r>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	1ccd      	adds	r5, r1, #3
 800a0fc:	f025 0503 	bic.w	r5, r5, #3
 800a100:	3508      	adds	r5, #8
 800a102:	2d0c      	cmp	r5, #12
 800a104:	bf38      	it	cc
 800a106:	250c      	movcc	r5, #12
 800a108:	2d00      	cmp	r5, #0
 800a10a:	4606      	mov	r6, r0
 800a10c:	db01      	blt.n	800a112 <_malloc_r+0x1a>
 800a10e:	42a9      	cmp	r1, r5
 800a110:	d903      	bls.n	800a11a <_malloc_r+0x22>
 800a112:	230c      	movs	r3, #12
 800a114:	6033      	str	r3, [r6, #0]
 800a116:	2000      	movs	r0, #0
 800a118:	bd70      	pop	{r4, r5, r6, pc}
 800a11a:	f000 f9d4 	bl	800a4c6 <__malloc_lock>
 800a11e:	4a21      	ldr	r2, [pc, #132]	; (800a1a4 <_malloc_r+0xac>)
 800a120:	6814      	ldr	r4, [r2, #0]
 800a122:	4621      	mov	r1, r4
 800a124:	b991      	cbnz	r1, 800a14c <_malloc_r+0x54>
 800a126:	4c20      	ldr	r4, [pc, #128]	; (800a1a8 <_malloc_r+0xb0>)
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	b91b      	cbnz	r3, 800a134 <_malloc_r+0x3c>
 800a12c:	4630      	mov	r0, r6
 800a12e:	f000 f98f 	bl	800a450 <_sbrk_r>
 800a132:	6020      	str	r0, [r4, #0]
 800a134:	4629      	mov	r1, r5
 800a136:	4630      	mov	r0, r6
 800a138:	f000 f98a 	bl	800a450 <_sbrk_r>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	d124      	bne.n	800a18a <_malloc_r+0x92>
 800a140:	230c      	movs	r3, #12
 800a142:	6033      	str	r3, [r6, #0]
 800a144:	4630      	mov	r0, r6
 800a146:	f000 f9bf 	bl	800a4c8 <__malloc_unlock>
 800a14a:	e7e4      	b.n	800a116 <_malloc_r+0x1e>
 800a14c:	680b      	ldr	r3, [r1, #0]
 800a14e:	1b5b      	subs	r3, r3, r5
 800a150:	d418      	bmi.n	800a184 <_malloc_r+0x8c>
 800a152:	2b0b      	cmp	r3, #11
 800a154:	d90f      	bls.n	800a176 <_malloc_r+0x7e>
 800a156:	600b      	str	r3, [r1, #0]
 800a158:	50cd      	str	r5, [r1, r3]
 800a15a:	18cc      	adds	r4, r1, r3
 800a15c:	4630      	mov	r0, r6
 800a15e:	f000 f9b3 	bl	800a4c8 <__malloc_unlock>
 800a162:	f104 000b 	add.w	r0, r4, #11
 800a166:	1d23      	adds	r3, r4, #4
 800a168:	f020 0007 	bic.w	r0, r0, #7
 800a16c:	1ac3      	subs	r3, r0, r3
 800a16e:	d0d3      	beq.n	800a118 <_malloc_r+0x20>
 800a170:	425a      	negs	r2, r3
 800a172:	50e2      	str	r2, [r4, r3]
 800a174:	e7d0      	b.n	800a118 <_malloc_r+0x20>
 800a176:	428c      	cmp	r4, r1
 800a178:	684b      	ldr	r3, [r1, #4]
 800a17a:	bf16      	itet	ne
 800a17c:	6063      	strne	r3, [r4, #4]
 800a17e:	6013      	streq	r3, [r2, #0]
 800a180:	460c      	movne	r4, r1
 800a182:	e7eb      	b.n	800a15c <_malloc_r+0x64>
 800a184:	460c      	mov	r4, r1
 800a186:	6849      	ldr	r1, [r1, #4]
 800a188:	e7cc      	b.n	800a124 <_malloc_r+0x2c>
 800a18a:	1cc4      	adds	r4, r0, #3
 800a18c:	f024 0403 	bic.w	r4, r4, #3
 800a190:	42a0      	cmp	r0, r4
 800a192:	d005      	beq.n	800a1a0 <_malloc_r+0xa8>
 800a194:	1a21      	subs	r1, r4, r0
 800a196:	4630      	mov	r0, r6
 800a198:	f000 f95a 	bl	800a450 <_sbrk_r>
 800a19c:	3001      	adds	r0, #1
 800a19e:	d0cf      	beq.n	800a140 <_malloc_r+0x48>
 800a1a0:	6025      	str	r5, [r4, #0]
 800a1a2:	e7db      	b.n	800a15c <_malloc_r+0x64>
 800a1a4:	20000528 	.word	0x20000528
 800a1a8:	2000052c 	.word	0x2000052c

0800a1ac <__ssputs_r>:
 800a1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b0:	688e      	ldr	r6, [r1, #8]
 800a1b2:	429e      	cmp	r6, r3
 800a1b4:	4682      	mov	sl, r0
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	4690      	mov	r8, r2
 800a1ba:	4699      	mov	r9, r3
 800a1bc:	d837      	bhi.n	800a22e <__ssputs_r+0x82>
 800a1be:	898a      	ldrh	r2, [r1, #12]
 800a1c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1c4:	d031      	beq.n	800a22a <__ssputs_r+0x7e>
 800a1c6:	6825      	ldr	r5, [r4, #0]
 800a1c8:	6909      	ldr	r1, [r1, #16]
 800a1ca:	1a6f      	subs	r7, r5, r1
 800a1cc:	6965      	ldr	r5, [r4, #20]
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1d4:	fb95 f5f3 	sdiv	r5, r5, r3
 800a1d8:	f109 0301 	add.w	r3, r9, #1
 800a1dc:	443b      	add	r3, r7
 800a1de:	429d      	cmp	r5, r3
 800a1e0:	bf38      	it	cc
 800a1e2:	461d      	movcc	r5, r3
 800a1e4:	0553      	lsls	r3, r2, #21
 800a1e6:	d530      	bpl.n	800a24a <__ssputs_r+0x9e>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7ff ff85 	bl	800a0f8 <_malloc_r>
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	b950      	cbnz	r0, 800a208 <__ssputs_r+0x5c>
 800a1f2:	230c      	movs	r3, #12
 800a1f4:	f8ca 3000 	str.w	r3, [sl]
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1fe:	81a3      	strh	r3, [r4, #12]
 800a200:	f04f 30ff 	mov.w	r0, #4294967295
 800a204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a208:	463a      	mov	r2, r7
 800a20a:	6921      	ldr	r1, [r4, #16]
 800a20c:	f7ff fc32 	bl	8009a74 <memcpy>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	6126      	str	r6, [r4, #16]
 800a21e:	6165      	str	r5, [r4, #20]
 800a220:	443e      	add	r6, r7
 800a222:	1bed      	subs	r5, r5, r7
 800a224:	6026      	str	r6, [r4, #0]
 800a226:	60a5      	str	r5, [r4, #8]
 800a228:	464e      	mov	r6, r9
 800a22a:	454e      	cmp	r6, r9
 800a22c:	d900      	bls.n	800a230 <__ssputs_r+0x84>
 800a22e:	464e      	mov	r6, r9
 800a230:	4632      	mov	r2, r6
 800a232:	4641      	mov	r1, r8
 800a234:	6820      	ldr	r0, [r4, #0]
 800a236:	f000 f92d 	bl	800a494 <memmove>
 800a23a:	68a3      	ldr	r3, [r4, #8]
 800a23c:	1b9b      	subs	r3, r3, r6
 800a23e:	60a3      	str	r3, [r4, #8]
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	441e      	add	r6, r3
 800a244:	6026      	str	r6, [r4, #0]
 800a246:	2000      	movs	r0, #0
 800a248:	e7dc      	b.n	800a204 <__ssputs_r+0x58>
 800a24a:	462a      	mov	r2, r5
 800a24c:	f000 f93d 	bl	800a4ca <_realloc_r>
 800a250:	4606      	mov	r6, r0
 800a252:	2800      	cmp	r0, #0
 800a254:	d1e2      	bne.n	800a21c <__ssputs_r+0x70>
 800a256:	6921      	ldr	r1, [r4, #16]
 800a258:	4650      	mov	r0, sl
 800a25a:	f7ff feff 	bl	800a05c <_free_r>
 800a25e:	e7c8      	b.n	800a1f2 <__ssputs_r+0x46>

0800a260 <_svfiprintf_r>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	461d      	mov	r5, r3
 800a266:	898b      	ldrh	r3, [r1, #12]
 800a268:	061f      	lsls	r7, r3, #24
 800a26a:	b09d      	sub	sp, #116	; 0x74
 800a26c:	4680      	mov	r8, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	4616      	mov	r6, r2
 800a272:	d50f      	bpl.n	800a294 <_svfiprintf_r+0x34>
 800a274:	690b      	ldr	r3, [r1, #16]
 800a276:	b96b      	cbnz	r3, 800a294 <_svfiprintf_r+0x34>
 800a278:	2140      	movs	r1, #64	; 0x40
 800a27a:	f7ff ff3d 	bl	800a0f8 <_malloc_r>
 800a27e:	6020      	str	r0, [r4, #0]
 800a280:	6120      	str	r0, [r4, #16]
 800a282:	b928      	cbnz	r0, 800a290 <_svfiprintf_r+0x30>
 800a284:	230c      	movs	r3, #12
 800a286:	f8c8 3000 	str.w	r3, [r8]
 800a28a:	f04f 30ff 	mov.w	r0, #4294967295
 800a28e:	e0c8      	b.n	800a422 <_svfiprintf_r+0x1c2>
 800a290:	2340      	movs	r3, #64	; 0x40
 800a292:	6163      	str	r3, [r4, #20]
 800a294:	2300      	movs	r3, #0
 800a296:	9309      	str	r3, [sp, #36]	; 0x24
 800a298:	2320      	movs	r3, #32
 800a29a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a29e:	2330      	movs	r3, #48	; 0x30
 800a2a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2a4:	9503      	str	r5, [sp, #12]
 800a2a6:	f04f 0b01 	mov.w	fp, #1
 800a2aa:	4637      	mov	r7, r6
 800a2ac:	463d      	mov	r5, r7
 800a2ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2b2:	b10b      	cbz	r3, 800a2b8 <_svfiprintf_r+0x58>
 800a2b4:	2b25      	cmp	r3, #37	; 0x25
 800a2b6:	d13e      	bne.n	800a336 <_svfiprintf_r+0xd6>
 800a2b8:	ebb7 0a06 	subs.w	sl, r7, r6
 800a2bc:	d00b      	beq.n	800a2d6 <_svfiprintf_r+0x76>
 800a2be:	4653      	mov	r3, sl
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	4640      	mov	r0, r8
 800a2c6:	f7ff ff71 	bl	800a1ac <__ssputs_r>
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	f000 80a4 	beq.w	800a418 <_svfiprintf_r+0x1b8>
 800a2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d2:	4453      	add	r3, sl
 800a2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d6:	783b      	ldrb	r3, [r7, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 809d 	beq.w	800a418 <_svfiprintf_r+0x1b8>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	9307      	str	r3, [sp, #28]
 800a2ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2f0:	931a      	str	r3, [sp, #104]	; 0x68
 800a2f2:	462f      	mov	r7, r5
 800a2f4:	2205      	movs	r2, #5
 800a2f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a2fa:	4850      	ldr	r0, [pc, #320]	; (800a43c <_svfiprintf_r+0x1dc>)
 800a2fc:	f7f5 ff78 	bl	80001f0 <memchr>
 800a300:	9b04      	ldr	r3, [sp, #16]
 800a302:	b9d0      	cbnz	r0, 800a33a <_svfiprintf_r+0xda>
 800a304:	06d9      	lsls	r1, r3, #27
 800a306:	bf44      	itt	mi
 800a308:	2220      	movmi	r2, #32
 800a30a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a30e:	071a      	lsls	r2, r3, #28
 800a310:	bf44      	itt	mi
 800a312:	222b      	movmi	r2, #43	; 0x2b
 800a314:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a318:	782a      	ldrb	r2, [r5, #0]
 800a31a:	2a2a      	cmp	r2, #42	; 0x2a
 800a31c:	d015      	beq.n	800a34a <_svfiprintf_r+0xea>
 800a31e:	9a07      	ldr	r2, [sp, #28]
 800a320:	462f      	mov	r7, r5
 800a322:	2000      	movs	r0, #0
 800a324:	250a      	movs	r5, #10
 800a326:	4639      	mov	r1, r7
 800a328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a32c:	3b30      	subs	r3, #48	; 0x30
 800a32e:	2b09      	cmp	r3, #9
 800a330:	d94d      	bls.n	800a3ce <_svfiprintf_r+0x16e>
 800a332:	b1b8      	cbz	r0, 800a364 <_svfiprintf_r+0x104>
 800a334:	e00f      	b.n	800a356 <_svfiprintf_r+0xf6>
 800a336:	462f      	mov	r7, r5
 800a338:	e7b8      	b.n	800a2ac <_svfiprintf_r+0x4c>
 800a33a:	4a40      	ldr	r2, [pc, #256]	; (800a43c <_svfiprintf_r+0x1dc>)
 800a33c:	1a80      	subs	r0, r0, r2
 800a33e:	fa0b f000 	lsl.w	r0, fp, r0
 800a342:	4318      	orrs	r0, r3
 800a344:	9004      	str	r0, [sp, #16]
 800a346:	463d      	mov	r5, r7
 800a348:	e7d3      	b.n	800a2f2 <_svfiprintf_r+0x92>
 800a34a:	9a03      	ldr	r2, [sp, #12]
 800a34c:	1d11      	adds	r1, r2, #4
 800a34e:	6812      	ldr	r2, [r2, #0]
 800a350:	9103      	str	r1, [sp, #12]
 800a352:	2a00      	cmp	r2, #0
 800a354:	db01      	blt.n	800a35a <_svfiprintf_r+0xfa>
 800a356:	9207      	str	r2, [sp, #28]
 800a358:	e004      	b.n	800a364 <_svfiprintf_r+0x104>
 800a35a:	4252      	negs	r2, r2
 800a35c:	f043 0302 	orr.w	r3, r3, #2
 800a360:	9207      	str	r2, [sp, #28]
 800a362:	9304      	str	r3, [sp, #16]
 800a364:	783b      	ldrb	r3, [r7, #0]
 800a366:	2b2e      	cmp	r3, #46	; 0x2e
 800a368:	d10c      	bne.n	800a384 <_svfiprintf_r+0x124>
 800a36a:	787b      	ldrb	r3, [r7, #1]
 800a36c:	2b2a      	cmp	r3, #42	; 0x2a
 800a36e:	d133      	bne.n	800a3d8 <_svfiprintf_r+0x178>
 800a370:	9b03      	ldr	r3, [sp, #12]
 800a372:	1d1a      	adds	r2, r3, #4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	9203      	str	r2, [sp, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	bfb8      	it	lt
 800a37c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a380:	3702      	adds	r7, #2
 800a382:	9305      	str	r3, [sp, #20]
 800a384:	4d2e      	ldr	r5, [pc, #184]	; (800a440 <_svfiprintf_r+0x1e0>)
 800a386:	7839      	ldrb	r1, [r7, #0]
 800a388:	2203      	movs	r2, #3
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7f5 ff30 	bl	80001f0 <memchr>
 800a390:	b138      	cbz	r0, 800a3a2 <_svfiprintf_r+0x142>
 800a392:	2340      	movs	r3, #64	; 0x40
 800a394:	1b40      	subs	r0, r0, r5
 800a396:	fa03 f000 	lsl.w	r0, r3, r0
 800a39a:	9b04      	ldr	r3, [sp, #16]
 800a39c:	4303      	orrs	r3, r0
 800a39e:	3701      	adds	r7, #1
 800a3a0:	9304      	str	r3, [sp, #16]
 800a3a2:	7839      	ldrb	r1, [r7, #0]
 800a3a4:	4827      	ldr	r0, [pc, #156]	; (800a444 <_svfiprintf_r+0x1e4>)
 800a3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3aa:	2206      	movs	r2, #6
 800a3ac:	1c7e      	adds	r6, r7, #1
 800a3ae:	f7f5 ff1f 	bl	80001f0 <memchr>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d038      	beq.n	800a428 <_svfiprintf_r+0x1c8>
 800a3b6:	4b24      	ldr	r3, [pc, #144]	; (800a448 <_svfiprintf_r+0x1e8>)
 800a3b8:	bb13      	cbnz	r3, 800a400 <_svfiprintf_r+0x1a0>
 800a3ba:	9b03      	ldr	r3, [sp, #12]
 800a3bc:	3307      	adds	r3, #7
 800a3be:	f023 0307 	bic.w	r3, r3, #7
 800a3c2:	3308      	adds	r3, #8
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c8:	444b      	add	r3, r9
 800a3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a3cc:	e76d      	b.n	800a2aa <_svfiprintf_r+0x4a>
 800a3ce:	fb05 3202 	mla	r2, r5, r2, r3
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	460f      	mov	r7, r1
 800a3d6:	e7a6      	b.n	800a326 <_svfiprintf_r+0xc6>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	3701      	adds	r7, #1
 800a3dc:	9305      	str	r3, [sp, #20]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	250a      	movs	r5, #10
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e8:	3a30      	subs	r2, #48	; 0x30
 800a3ea:	2a09      	cmp	r2, #9
 800a3ec:	d903      	bls.n	800a3f6 <_svfiprintf_r+0x196>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0c8      	beq.n	800a384 <_svfiprintf_r+0x124>
 800a3f2:	9105      	str	r1, [sp, #20]
 800a3f4:	e7c6      	b.n	800a384 <_svfiprintf_r+0x124>
 800a3f6:	fb05 2101 	mla	r1, r5, r1, r2
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	4607      	mov	r7, r0
 800a3fe:	e7f0      	b.n	800a3e2 <_svfiprintf_r+0x182>
 800a400:	ab03      	add	r3, sp, #12
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	4622      	mov	r2, r4
 800a406:	4b11      	ldr	r3, [pc, #68]	; (800a44c <_svfiprintf_r+0x1ec>)
 800a408:	a904      	add	r1, sp, #16
 800a40a:	4640      	mov	r0, r8
 800a40c:	f7fe f8da 	bl	80085c4 <_printf_float>
 800a410:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a414:	4681      	mov	r9, r0
 800a416:	d1d6      	bne.n	800a3c6 <_svfiprintf_r+0x166>
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	065b      	lsls	r3, r3, #25
 800a41c:	f53f af35 	bmi.w	800a28a <_svfiprintf_r+0x2a>
 800a420:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a422:	b01d      	add	sp, #116	; 0x74
 800a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a428:	ab03      	add	r3, sp, #12
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	4622      	mov	r2, r4
 800a42e:	4b07      	ldr	r3, [pc, #28]	; (800a44c <_svfiprintf_r+0x1ec>)
 800a430:	a904      	add	r1, sp, #16
 800a432:	4640      	mov	r0, r8
 800a434:	f7fe fb7c 	bl	8008b30 <_printf_i>
 800a438:	e7ea      	b.n	800a410 <_svfiprintf_r+0x1b0>
 800a43a:	bf00      	nop
 800a43c:	0800a724 	.word	0x0800a724
 800a440:	0800a72a 	.word	0x0800a72a
 800a444:	0800a72e 	.word	0x0800a72e
 800a448:	080085c5 	.word	0x080085c5
 800a44c:	0800a1ad 	.word	0x0800a1ad

0800a450 <_sbrk_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4c06      	ldr	r4, [pc, #24]	; (800a46c <_sbrk_r+0x1c>)
 800a454:	2300      	movs	r3, #0
 800a456:	4605      	mov	r5, r0
 800a458:	4608      	mov	r0, r1
 800a45a:	6023      	str	r3, [r4, #0]
 800a45c:	f7f7 f9ec 	bl	8001838 <_sbrk>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d102      	bne.n	800a46a <_sbrk_r+0x1a>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	b103      	cbz	r3, 800a46a <_sbrk_r+0x1a>
 800a468:	602b      	str	r3, [r5, #0]
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	200007b0 	.word	0x200007b0

0800a470 <__ascii_mbtowc>:
 800a470:	b082      	sub	sp, #8
 800a472:	b901      	cbnz	r1, 800a476 <__ascii_mbtowc+0x6>
 800a474:	a901      	add	r1, sp, #4
 800a476:	b142      	cbz	r2, 800a48a <__ascii_mbtowc+0x1a>
 800a478:	b14b      	cbz	r3, 800a48e <__ascii_mbtowc+0x1e>
 800a47a:	7813      	ldrb	r3, [r2, #0]
 800a47c:	600b      	str	r3, [r1, #0]
 800a47e:	7812      	ldrb	r2, [r2, #0]
 800a480:	1c10      	adds	r0, r2, #0
 800a482:	bf18      	it	ne
 800a484:	2001      	movne	r0, #1
 800a486:	b002      	add	sp, #8
 800a488:	4770      	bx	lr
 800a48a:	4610      	mov	r0, r2
 800a48c:	e7fb      	b.n	800a486 <__ascii_mbtowc+0x16>
 800a48e:	f06f 0001 	mvn.w	r0, #1
 800a492:	e7f8      	b.n	800a486 <__ascii_mbtowc+0x16>

0800a494 <memmove>:
 800a494:	4288      	cmp	r0, r1
 800a496:	b510      	push	{r4, lr}
 800a498:	eb01 0302 	add.w	r3, r1, r2
 800a49c:	d807      	bhi.n	800a4ae <memmove+0x1a>
 800a49e:	1e42      	subs	r2, r0, #1
 800a4a0:	4299      	cmp	r1, r3
 800a4a2:	d00a      	beq.n	800a4ba <memmove+0x26>
 800a4a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a4ac:	e7f8      	b.n	800a4a0 <memmove+0xc>
 800a4ae:	4283      	cmp	r3, r0
 800a4b0:	d9f5      	bls.n	800a49e <memmove+0xa>
 800a4b2:	1881      	adds	r1, r0, r2
 800a4b4:	1ad2      	subs	r2, r2, r3
 800a4b6:	42d3      	cmn	r3, r2
 800a4b8:	d100      	bne.n	800a4bc <memmove+0x28>
 800a4ba:	bd10      	pop	{r4, pc}
 800a4bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a4c4:	e7f7      	b.n	800a4b6 <memmove+0x22>

0800a4c6 <__malloc_lock>:
 800a4c6:	4770      	bx	lr

0800a4c8 <__malloc_unlock>:
 800a4c8:	4770      	bx	lr

0800a4ca <_realloc_r>:
 800a4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	4614      	mov	r4, r2
 800a4d0:	460e      	mov	r6, r1
 800a4d2:	b921      	cbnz	r1, 800a4de <_realloc_r+0x14>
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4da:	f7ff be0d 	b.w	800a0f8 <_malloc_r>
 800a4de:	b922      	cbnz	r2, 800a4ea <_realloc_r+0x20>
 800a4e0:	f7ff fdbc 	bl	800a05c <_free_r>
 800a4e4:	4625      	mov	r5, r4
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ea:	f000 f821 	bl	800a530 <_malloc_usable_size_r>
 800a4ee:	42a0      	cmp	r0, r4
 800a4f0:	d20f      	bcs.n	800a512 <_realloc_r+0x48>
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	f7ff fdff 	bl	800a0f8 <_malloc_r>
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d0f2      	beq.n	800a4e6 <_realloc_r+0x1c>
 800a500:	4631      	mov	r1, r6
 800a502:	4622      	mov	r2, r4
 800a504:	f7ff fab6 	bl	8009a74 <memcpy>
 800a508:	4631      	mov	r1, r6
 800a50a:	4638      	mov	r0, r7
 800a50c:	f7ff fda6 	bl	800a05c <_free_r>
 800a510:	e7e9      	b.n	800a4e6 <_realloc_r+0x1c>
 800a512:	4635      	mov	r5, r6
 800a514:	e7e7      	b.n	800a4e6 <_realloc_r+0x1c>

0800a516 <__ascii_wctomb>:
 800a516:	b149      	cbz	r1, 800a52c <__ascii_wctomb+0x16>
 800a518:	2aff      	cmp	r2, #255	; 0xff
 800a51a:	bf85      	ittet	hi
 800a51c:	238a      	movhi	r3, #138	; 0x8a
 800a51e:	6003      	strhi	r3, [r0, #0]
 800a520:	700a      	strbls	r2, [r1, #0]
 800a522:	f04f 30ff 	movhi.w	r0, #4294967295
 800a526:	bf98      	it	ls
 800a528:	2001      	movls	r0, #1
 800a52a:	4770      	bx	lr
 800a52c:	4608      	mov	r0, r1
 800a52e:	4770      	bx	lr

0800a530 <_malloc_usable_size_r>:
 800a530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a534:	1f18      	subs	r0, r3, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	bfbc      	itt	lt
 800a53a:	580b      	ldrlt	r3, [r1, r0]
 800a53c:	18c0      	addlt	r0, r0, r3
 800a53e:	4770      	bx	lr

0800a540 <_init>:
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a542:	bf00      	nop
 800a544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a546:	bc08      	pop	{r3}
 800a548:	469e      	mov	lr, r3
 800a54a:	4770      	bx	lr

0800a54c <_fini>:
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54e:	bf00      	nop
 800a550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a552:	bc08      	pop	{r3}
 800a554:	469e      	mov	lr, r3
 800a556:	4770      	bx	lr
