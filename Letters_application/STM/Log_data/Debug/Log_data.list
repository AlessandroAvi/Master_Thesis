
Log_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b204  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800b3a8  0800b3a8  0001b3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b814  0800b814  00020434  2**0
                  CONTENTS
  4 .ARM          00000008  0800b814  0800b814  0001b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b81c  0800b81c  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b81c  0800b81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b820  0800b820  0001b820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  0800b824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000434  0800bc58  00020434  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  0800bc58  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029805  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003396  00000000  00000000  00049c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002140  00000000  00000000  0004d000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002010  00000000  00000000  0004f140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f68  00000000  00000000  00051150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad9a  00000000  00000000  0006a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b317  00000000  00000000  00084e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a24c  00000000  00000000  001201bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000434 	.word	0x20000434
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b38c 	.word	0x0800b38c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000438 	.word	0x20000438
 80001dc:	0800b38c 	.word	0x0800b38c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f004 f8e1 	bl	800507c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f885 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 f93d 	bl	800113c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f911 	bl	80010e8 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000ec6:	f000 f8eb 	bl	80010a0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Initialize accelerometer
  int init_acc = IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8000eca:	2102      	movs	r1, #2
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f003 fc83 	bl	80047d8 <IKS01A2_MOTION_SENSOR_Init>
 8000ed2:	6078      	str	r0, [r7, #4]
  if(init_acc == 0){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d111      	bne.n	8000efe <main+0x4e>
	  if( HAL_UART_Transmit(&huart2, (uint8_t*)initMessage, MAX_BUF_SIZE, 100) != HAL_OK ) {Error_Handler();}
 8000eda:	2364      	movs	r3, #100	; 0x64
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	4931      	ldr	r1, [pc, #196]	; (8000fa4 <main+0xf4>)
 8000ee0:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <main+0xf8>)
 8000ee2:	f006 fbf6 	bl	80076d2 <HAL_UART_Transmit>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <main+0x40>
 8000eec:	f000 fa46 	bl	800137c <Error_Handler>
	  while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){};
 8000ef0:	bf00      	nop
 8000ef2:	482d      	ldr	r0, [pc, #180]	; (8000fa8 <main+0xf8>)
 8000ef4:	f006 fe4a 	bl	8007b8c <HAL_UART_GetState>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b20      	cmp	r3, #32
 8000efc:	d1f9      	bne.n	8000ef2 <main+0x42>
  }

  // Enabling accelerometer
  int enable_acc = IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8000efe:	2102      	movs	r1, #2
 8000f00:	2000      	movs	r0, #0
 8000f02:	f003 fd65 	bl	80049d0 <IKS01A2_MOTION_SENSOR_Enable>
 8000f06:	6038      	str	r0, [r7, #0]
  if(enable_acc == 0){
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d111      	bne.n	8000f32 <main+0x82>
	  if( HAL_UART_Transmit(&huart2, (uint8_t*)enablingMessage, MAX_BUF_SIZE, 100) != HAL_OK ) {Error_Handler();}
 8000f0e:	2364      	movs	r3, #100	; 0x64
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	4926      	ldr	r1, [pc, #152]	; (8000fac <main+0xfc>)
 8000f14:	4824      	ldr	r0, [pc, #144]	; (8000fa8 <main+0xf8>)
 8000f16:	f006 fbdc 	bl	80076d2 <HAL_UART_Transmit>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <main+0x74>
 8000f20:	f000 fa2c 	bl	800137c <Error_Handler>
	  while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){};
 8000f24:	bf00      	nop
 8000f26:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <main+0xf8>)
 8000f28:	f006 fe30 	bl	8007b8c <HAL_UART_GetState>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	d1f9      	bne.n	8000f26 <main+0x76>
  }


  // Get parameters of accelerometer
  IKS01A2_MOTION_SENSOR_GetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_odr);
 8000f32:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <main+0x100>)
 8000f34:	2102      	movs	r1, #2
 8000f36:	2000      	movs	r0, #0
 8000f38:	f003 fe14 	bl	8004b64 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>
  IKS01A2_MOTION_SENSOR_GetSensitivity(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_sens);
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <main+0x104>)
 8000f3e:	2102      	movs	r1, #2
 8000f40:	2000      	movs	r0, #0
 8000f42:	f003 fdcb 	bl	8004adc <IKS01A2_MOTION_SENSOR_GetSensitivity>
  IKS01A2_MOTION_SENSOR_GetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_fs);
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <main+0x108>)
 8000f48:	2102      	movs	r1, #2
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f003 fe4e 	bl	8004bec <IKS01A2_MOTION_SENSOR_GetFullScale>

  // Print parameters to UART
  snprintf(parameterMessage, MAX_BUF_SIZE, ">Output rate: %d[Hz]\r\n>Sensitivity: %d[g]\n\r>FullScale: %d[g]\r\n", accelerometer_odr, accelerometer_sens, accelerometer_fs);
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <main+0x100>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff faff 	bl	8000558 <__aeabi_f2d>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	460d      	mov	r5, r1
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <main+0x104>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff faf8 	bl	8000558 <__aeabi_f2d>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4912      	ldr	r1, [pc, #72]	; (8000fb8 <main+0x108>)
 8000f6e:	6809      	ldr	r1, [r1, #0]
 8000f70:	9104      	str	r1, [sp, #16]
 8000f72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f76:	e9cd 4500 	strd	r4, r5, [sp]
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <main+0x10c>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <main+0x110>)
 8000f80:	f007 ffc6 	bl	8008f10 <sniprintf>
  if( HAL_UART_Transmit(&huart2, (uint8_t*)parameterMessage, MAX_BUF_SIZE, 100) != HAL_OK ) {Error_Handler();}
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <main+0x110>)
 8000f8a:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <main+0xf8>)
 8000f8c:	f006 fba1 	bl	80076d2 <HAL_UART_Transmit>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <main+0xea>
 8000f96:	f000 f9f1 	bl	800137c <Error_Handler>


  // Start timer
  HAL_TIM_Base_Start_IT(&htim10);
 8000f9a:	480a      	ldr	r0, [pc, #40]	; (8000fc4 <main+0x114>)
 8000f9c:	f006 f963 	bl	8007266 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <main+0xf0>
 8000fa2:	bf00      	nop
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	200006f8 	.word	0x200006f8
 8000fac:	20000080 	.word	0x20000080
 8000fb0:	20000748 	.word	0x20000748
 8000fb4:	200005f0 	.word	0x200005f0
 8000fb8:	200005f4 	.word	0x200005f4
 8000fbc:	0800b3a8 	.word	0x0800b3a8
 8000fc0:	20000530 	.word	0x20000530
 8000fc4:	200005b0 	.word	0x200005b0

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	; 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2230      	movs	r2, #48	; 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f007 fb28 	bl	800862c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <SystemClock_Config+0xd0>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	4a28      	ldr	r2, [pc, #160]	; (8001098 <SystemClock_Config+0xd0>)
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <SystemClock_Config+0xd0>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <SystemClock_Config+0xd4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <SystemClock_Config+0xd4>)
 8001016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <SystemClock_Config+0xd4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001028:	2302      	movs	r3, #2
 800102a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001030:	2310      	movs	r3, #16
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800103c:	2310      	movs	r3, #16
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001040:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001044:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001046:	2304      	movs	r3, #4
 8001048:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800104a:	2307      	movs	r3, #7
 800104c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	4618      	mov	r0, r3
 8001054:	f005 fc70 	bl	8006938 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800105e:	f000 f98d 	bl	800137c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f005 feca 	bl	8006e18 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800108a:	f000 f977 	bl	800137c <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	; 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_TIM10_Init+0x40>)
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <MX_TIM10_Init+0x44>)
 80010a8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <MX_TIM10_Init+0x40>)
 80010ac:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010b0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_TIM10_Init+0x40>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_TIM10_Init+0x40>)
 80010ba:	2263      	movs	r2, #99	; 0x63
 80010bc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_TIM10_Init+0x40>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_TIM10_Init+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_TIM10_Init+0x40>)
 80010cc:	f006 f8a0 	bl	8007210 <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80010d6:	f000 f951 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200005b0 	.word	0x200005b0
 80010e4:	40014400 	.word	0x40014400

080010e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_USART2_UART_Init+0x50>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 8001120:	f006 fa8a 	bl	8007638 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800112a:	f000 f927 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200006f8 	.word	0x200006f8
 8001138:	40004400 	.word	0x40004400

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <MX_GPIO_Init+0xe0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a30      	ldr	r2, [pc, #192]	; (800121c <MX_GPIO_Init+0xe0>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <MX_GPIO_Init+0xe0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <MX_GPIO_Init+0xe0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a29      	ldr	r2, [pc, #164]	; (800121c <MX_GPIO_Init+0xe0>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <MX_GPIO_Init+0xe0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <MX_GPIO_Init+0xe0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a22      	ldr	r2, [pc, #136]	; (800121c <MX_GPIO_Init+0xe0>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <MX_GPIO_Init+0xe0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_GPIO_Init+0xe0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a1b      	ldr	r2, [pc, #108]	; (800121c <MX_GPIO_Init+0xe0>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_GPIO_Init+0xe0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2120      	movs	r1, #32
 80011c6:	4816      	ldr	r0, [pc, #88]	; (8001220 <MX_GPIO_Init+0xe4>)
 80011c8:	f004 fb66 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_GPIO_Init+0xe8>)
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_GPIO_Init+0xec>)
 80011e2:	f004 f8f1 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e6:	2320      	movs	r3, #32
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <MX_GPIO_Init+0xe4>)
 80011fe:	f004 f8e3 	bl	80053c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2028      	movs	r0, #40	; 0x28
 8001208:	f004 f885 	bl	8005316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120c:	2028      	movs	r0, #40	; 0x28
 800120e:	f004 f89e 	bl	800534e <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000
 8001224:	10210000 	.word	0x10210000
 8001228:	40020800 	.word	0x40020800

0800122c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]

	counter += 1;		// +1 to total letter measured
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x98>)
 800123e:	6013      	str	r3, [r2, #0]
	data_counter = 0;	// reset counter of time stamps
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]

	// Output letter request
	if( HAL_UART_Transmit(&huart2, (uint8_t*)askMessage, sizeof(askMessage), 1000) != HAL_OK ){Error_Handler();}
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	2280      	movs	r2, #128	; 0x80
 800124c:	491f      	ldr	r1, [pc, #124]	; (80012cc <HAL_GPIO_EXTI_Callback+0xa0>)
 800124e:	4820      	ldr	r0, [pc, #128]	; (80012d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001250:	f006 fa3f 	bl	80076d2 <HAL_UART_Transmit>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_GPIO_EXTI_Callback+0x32>
 800125a:	f000 f88f 	bl	800137c <Error_Handler>
	// Receive letter
	if( HAL_UART_Receive(&huart2, (uint8_t*)RxMessage, LETTER_BUFFER_SIZE, 1000) != HAL_OK ){Error_Handler();}
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	2201      	movs	r2, #1
 8001264:	491b      	ldr	r1, [pc, #108]	; (80012d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001266:	481a      	ldr	r0, [pc, #104]	; (80012d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001268:	f006 facc 	bl	8007804 <HAL_UART_Receive>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_GPIO_EXTI_Callback+0x4a>
 8001272:	f000 f883 	bl	800137c <Error_Handler>
	while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){}
 8001276:	bf00      	nop
 8001278:	4815      	ldr	r0, [pc, #84]	; (80012d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800127a:	f006 fc87 	bl	8007b8c <HAL_UART_GetState>
 800127e:	4603      	mov	r3, r0
 8001280:	2b20      	cmp	r3, #32
 8001282:	d1f9      	bne.n	8001278 <HAL_GPIO_EXTI_Callback+0x4c>
	snprintf(letterEndMessage, MAX_BUF_SIZE, ">Acquisition of [%s] letter \r\n", (char*)RxMessage);
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <HAL_GPIO_EXTI_Callback+0xb0>)
 800128c:	f007 fe40 	bl	8008f10 <sniprintf>
	if( HAL_UART_Transmit(&huart2, (uint8_t*)letterEndMessage, MAX_BUF_SIZE, 1000) != HAL_OK ){Error_Handler();}
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	4911      	ldr	r1, [pc, #68]	; (80012dc <HAL_GPIO_EXTI_Callback+0xb0>)
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800129a:	f006 fa1a 	bl	80076d2 <HAL_UART_Transmit>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_GPIO_EXTI_Callback+0x7c>
 80012a4:	f000 f86a 	bl	800137c <Error_Handler>
	while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){}
 80012a8:	bf00      	nop
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 80012ac:	f006 fc6e 	bl	8007b8c <HAL_UART_GetState>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b20      	cmp	r3, #32
 80012b4:	d1f9      	bne.n	80012aa <HAL_GPIO_EXTI_Callback+0x7e>

	start_acquisition = 1;	// Enable data acquisition
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_GPIO_EXTI_Callback+0xb4>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000454 	.word	0x20000454
 80012c8:	20000458 	.word	0x20000458
 80012cc:	20000100 	.word	0x20000100
 80012d0:	200006f8 	.word	0x200006f8
 80012d4:	20000738 	.word	0x20000738
 80012d8:	0800b3e8 	.word	0x0800b3e8
 80012dc:	200005f8 	.word	0x200005f8
 80012e0:	20000450 	.word	0x20000450

080012e4 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	6078      	str	r0, [r7, #4]

	if(data_counter == sample_n){
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d103      	bne.n	8001300 <HAL_TIM_PeriodElapsedCallback+0x1c>
		start_acquisition = 0;
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE, "%d,%s,%ld,%ld,%ld\r\n", counter, (char*)RxMessage, (int32_t)acceleration.x, (int32_t)acceleration.y, (int32_t)acceleration.z);
		HAL_UART_Transmit(&huart2, (uint8_t*)dataOut, MAX_BUF_SIZE, 1);
	}else{
	}

}
 80012fe:	e026      	b.n	800134e <HAL_TIM_PeriodElapsedCallback+0x6a>
	}else if(start_acquisition == 1){
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d122      	bne.n	800134e <HAL_TIM_PeriodElapsedCallback+0x6a>
		data_counter += 1;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001310:	6013      	str	r3, [r2, #0]
		IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &acceleration);
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001314:	2102      	movs	r1, #2
 8001316:	2000      	movs	r0, #0
 8001318:	f003 fb9c 	bl	8004a54 <IKS01A2_MOTION_SENSOR_GetAxes>
		snprintf(dataOut, MAX_BUF_SIZE, "%d,%s,%ld,%ld,%ld\r\n", counter, (char*)RxMessage, (int32_t)acceleration.x, (int32_t)acceleration.y, (int32_t)acceleration.z);
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001326:	6852      	ldr	r2, [r2, #4]
 8001328:	490e      	ldr	r1, [pc, #56]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800132a:	6889      	ldr	r1, [r1, #8]
 800132c:	9103      	str	r1, [sp, #12]
 800132e:	9202      	str	r2, [sp, #8]
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4603      	mov	r3, r0
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800133e:	f007 fde7 	bl	8008f10 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)dataOut, MAX_BUF_SIZE, 1);
 8001342:	2301      	movs	r3, #1
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	490b      	ldr	r1, [pc, #44]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800134a:	f006 f9c2 	bl	80076d2 <HAL_UART_Transmit>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000458 	.word	0x20000458
 800135c:	20000180 	.word	0x20000180
 8001360:	20000450 	.word	0x20000450
 8001364:	2000073c 	.word	0x2000073c
 8001368:	20000454 	.word	0x20000454
 800136c:	20000738 	.word	0x20000738
 8001370:	0800b408 	.word	0x0800b408
 8001374:	20000678 	.word	0x20000678
 8001378:	200006f8 	.word	0x200006f8

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_MspInit+0x5c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <HAL_MspInit+0x5c>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_MspInit+0x5c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_MspInit+0x5c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HAL_MspInit+0x5c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_MspInit+0x5c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f003 ff9a 	bl	8005300 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2051      	movs	r0, #81	; 0x51
 80013d2:	f003 ffa0 	bl	8005316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80013d6:	2051      	movs	r0, #81	; 0x51
 80013d8:	f003 ffb9 	bl	800534e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_TIM_Base_MspInit+0x48>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d115      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_TIM_Base_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <HAL_TIM_Base_MspInit+0x4c>)
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_TIM_Base_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2019      	movs	r0, #25
 800141c:	f003 ff7b 	bl	8005316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001420:	2019      	movs	r0, #25
 8001422:	f003 ff94 	bl	800534e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40014400 	.word	0x40014400
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_UART_MspInit+0x94>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d133      	bne.n	80014c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_UART_MspInit+0x98>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_UART_MspInit+0x98>)
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_UART_MspInit+0x98>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_UART_MspInit+0x98>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_UART_MspInit+0x98>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_UART_MspInit+0x98>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001492:	230c      	movs	r3, #12
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a2:	2307      	movs	r3, #7
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <HAL_UART_MspInit+0x9c>)
 80014ae:	f003 ff8b 	bl	80053c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2026      	movs	r0, #38	; 0x26
 80014b8:	f003 ff2d 	bl	8005316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014bc:	2026      	movs	r0, #38	; 0x26
 80014be:	f003 ff46 	bl	800534e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40004400 	.word	0x40004400
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f003 fdfc 	bl	8005120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001532:	f005 febc 	bl	80072ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200005b0 	.word	0x200005b0

08001540 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <USART2_IRQHandler+0x10>)
 8001546:	f006 fa03 	bl	8007950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200006f8 	.word	0x200006f8

08001554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001558:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800155c:	f004 f9b6 	bl	80058cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <BSP_I2C1_Init+0x58>)
 8001580:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <BSP_I2C1_Init+0x5c>)
 8001582:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <BSP_I2C1_Init+0x60>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	4912      	ldr	r1, [pc, #72]	; (80015d4 <BSP_I2C1_Init+0x60>)
 800158c:	600a      	str	r2, [r1, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d117      	bne.n	80015c2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <BSP_I2C1_Init+0x58>)
 8001594:	f004 fe5a 	bl	800624c <HAL_I2C_GetState>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d111      	bne.n	80015c2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <BSP_I2C1_Init+0x58>)
 80015a0:	f000 f8e2 	bl	8001768 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10b      	bne.n	80015c2 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80015aa:	4808      	ldr	r0, [pc, #32]	; (80015cc <BSP_I2C1_Init+0x58>)
 80015ac:	f000 f8a8 	bl	8001700 <MX_I2C1_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 80015b6:	f06f 0307 	mvn.w	r3, #7
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	e001      	b.n	80015c2 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80015c2:	687b      	ldr	r3, [r7, #4]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000074c 	.word	0x2000074c
 80015d0:	40005400 	.word	0x40005400
 80015d4:	2000045c 	.word	0x2000045c

080015d8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <BSP_I2C1_DeInit+0x48>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d014      	beq.n	8001614 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <BSP_I2C1_DeInit+0x48>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <BSP_I2C1_DeInit+0x48>)
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <BSP_I2C1_DeInit+0x48>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10b      	bne.n	8001614 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <BSP_I2C1_DeInit+0x4c>)
 80015fe:	f000 f8fd 	bl	80017fc <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001602:	4808      	ldr	r0, [pc, #32]	; (8001624 <BSP_I2C1_DeInit+0x4c>)
 8001604:	f004 fabe 	bl	8005b84 <HAL_I2C_DeInit>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800160e:	f06f 0307 	mvn.w	r3, #7
 8001612:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000045c 	.word	0x2000045c
 8001624:	2000074c 	.word	0x2000074c

08001628 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af04      	add	r7, sp, #16
 800162e:	60ba      	str	r2, [r7, #8]
 8001630:	461a      	mov	r2, r3
 8001632:	4603      	mov	r3, r0
 8001634:	81fb      	strh	r3, [r7, #14]
 8001636:	460b      	mov	r3, r1
 8001638:	81bb      	strh	r3, [r7, #12]
 800163a:	4613      	mov	r3, r2
 800163c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001642:	89ba      	ldrh	r2, [r7, #12]
 8001644:	89f9      	ldrh	r1, [r7, #14]
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2301      	movs	r3, #1
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <BSP_I2C1_WriteReg+0x60>)
 8001658:	f004 fad8 	bl	8005c0c <HAL_I2C_Mem_Write>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00c      	beq.n	800167c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <BSP_I2C1_WriteReg+0x60>)
 8001664:	f004 fe00 	bl	8006268 <HAL_I2C_GetError>
 8001668:	4603      	mov	r3, r0
 800166a:	2b04      	cmp	r3, #4
 800166c:	d103      	bne.n	8001676 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800166e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e002      	b.n	800167c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001676:	f06f 0303 	mvn.w	r3, #3
 800167a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800167c:	697b      	ldr	r3, [r7, #20]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000074c 	.word	0x2000074c

0800168c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af04      	add	r7, sp, #16
 8001692:	60ba      	str	r2, [r7, #8]
 8001694:	461a      	mov	r2, r3
 8001696:	4603      	mov	r3, r0
 8001698:	81fb      	strh	r3, [r7, #14]
 800169a:	460b      	mov	r3, r1
 800169c:	81bb      	strh	r3, [r7, #12]
 800169e:	4613      	mov	r3, r2
 80016a0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80016a6:	89ba      	ldrh	r2, [r7, #12]
 80016a8:	89f9      	ldrh	r1, [r7, #14]
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <BSP_I2C1_ReadReg+0x60>)
 80016bc:	f004 fba0 	bl	8005e00 <HAL_I2C_Mem_Read>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00c      	beq.n	80016e0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016c6:	4809      	ldr	r0, [pc, #36]	; (80016ec <BSP_I2C1_ReadReg+0x60>)
 80016c8:	f004 fdce 	bl	8006268 <HAL_I2C_GetError>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d103      	bne.n	80016da <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016d2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e002      	b.n	80016e0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80016da:	f06f 0303 	mvn.w	r3, #3
 80016de:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80016e0:	697b      	ldr	r3, [r7, #20]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000074c 	.word	0x2000074c

080016f0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80016f4:	f003 fd28 	bl	8005148 <HAL_GetTick>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <MX_I2C1_Init+0x60>)
 8001710:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a13      	ldr	r2, [pc, #76]	; (8001764 <MX_I2C1_Init+0x64>)
 8001716:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f004 f8d9 	bl	80058fc <HAL_I2C_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40005400 	.word	0x40005400
 8001764:	00061a80 	.word	0x00061a80

08001768 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <I2C1_MspInit+0x8c>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <I2C1_MspInit+0x8c>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <I2C1_MspInit+0x8c>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800178c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001792:	2312      	movs	r3, #18
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001796:	2301      	movs	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800179e:	2304      	movs	r3, #4
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4813      	ldr	r0, [pc, #76]	; (80017f8 <I2C1_MspInit+0x90>)
 80017aa:	f003 fe0d 	bl	80053c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80017ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b4:	2312      	movs	r3, #18
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80017c0:	2304      	movs	r3, #4
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	480b      	ldr	r0, [pc, #44]	; (80017f8 <I2C1_MspInit+0x90>)
 80017cc:	f003 fdfc 	bl	80053c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <I2C1_MspInit+0x8c>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <I2C1_MspInit+0x8c>)
 80017da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <I2C1_MspInit+0x8c>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020400 	.word	0x40020400

080017fc <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <I2C1_MspDeInit+0x30>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a08      	ldr	r2, [pc, #32]	; (800182c <I2C1_MspDeInit+0x30>)
 800180a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001814:	4806      	ldr	r0, [pc, #24]	; (8001830 <I2C1_MspDeInit+0x34>)
 8001816:	f003 ff5b 	bl	80056d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800181a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800181e:	4804      	ldr	r0, [pc, #16]	; (8001830 <I2C1_MspDeInit+0x34>)
 8001820:	f003 ff56 	bl	80056d0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
	return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_kill>:

int _kill(int pid, int sig)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800184e:	f006 fec3 	bl	80085d8 <__errno>
 8001852:	4603      	mov	r3, r0
 8001854:	2216      	movs	r2, #22
 8001856:	601a      	str	r2, [r3, #0]
	return -1;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_exit>:

void _exit (int status)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffe7 	bl	8001844 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001876:	e7fe      	b.n	8001876 <_exit+0x12>

08001878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e00a      	b.n	80018a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800188a:	f3af 8000 	nop.w
 800188e:	4601      	mov	r1, r0
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	b2ca      	uxtb	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf0      	blt.n	800188a <_read+0x12>
	}

return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e009      	b.n	80018d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbf1      	blt.n	80018c4 <_write+0x12>
	}
	return len;
 80018e0:	687b      	ldr	r3, [r7, #4]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_close>:

int _close(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001912:	605a      	str	r2, [r3, #4]
	return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_isatty>:

int _isatty(int file)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
	return 1;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	return 0;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <_sbrk+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <_sbrk+0x60>)
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <_sbrk+0x64>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <_sbrk+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d207      	bcs.n	8001994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001984:	f006 fe28 	bl	80085d8 <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e009      	b.n	80019a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20018000 	.word	0x20018000
 80019b4:	00000400 	.word	0x00000400
 80019b8:	20000460 	.word	0x20000460
 80019bc:	200007c0 	.word	0x200007c0

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <SystemInit+0x28>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <SystemInit+0x28>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SystemInit+0x28>)
 80019d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019da:	609a      	str	r2, [r3, #8]
#endif
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019f2:	e003      	b.n	80019fc <LoopCopyDataInit>

080019f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019fa:	3104      	adds	r1, #4

080019fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019fc:	480b      	ldr	r0, [pc, #44]	; (8001a2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a04:	d3f6      	bcc.n	80019f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a08:	e002      	b.n	8001a10 <LoopFillZerobss>

08001a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a0c:	f842 3b04 	str.w	r3, [r2], #4

08001a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a14:	d3f9      	bcc.n	8001a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a16:	f7ff ffd3 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f006 fde3 	bl	80085e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1e:	f7ff fa47 	bl	8000eb0 <main>
  bx  lr    
 8001a22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a24:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001a28:	0800b824 	.word	0x0800b824
  ldr  r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a30:	20000434 	.word	0x20000434
  ldr  r2, =_sbss
 8001a34:	20000434 	.word	0x20000434
  ldr  r3, = _ebss
 8001a38:	200007c0 	.word	0x200007c0

08001a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC_IRQHandler>
	...

08001a40 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	e04d      	b.n	8001af8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	7b1a      	ldrb	r2, [r3, #12]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8001a98:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8001a9e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e020      	b.n	8001af8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4798      	blx	r3
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e016      	b.n	8001af8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d112      	bne.n	8001af8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10d      	bne.n	8001af8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001adc:	2301      	movs	r3, #1
 8001ade:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2123      	movs	r1, #35	; 0x23
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fb55 	bl	8002196 <LSM303AGR_ACC_Write_Reg>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	e000      	b.n	8001afa <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8001af8:	68fb      	ldr	r3, [r7, #12]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	080029a5 	.word	0x080029a5
 8001b08:	08002a07 	.word	0x08002a07

08001b0c <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	331c      	adds	r3, #28
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 f94a 	bl	8002db4 <lsm303agr_xl_block_data_update_set>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e02c      	b.n	8001b86 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	331c      	adds	r3, #28
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 faed 	bl	8003112 <lsm303agr_xl_fifo_mode_set>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e020      	b.n	8001b86 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2205      	movs	r2, #5
 8001b48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	331c      	adds	r3, #28
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 f84e 	bl	8002bf4 <lsm303agr_xl_data_rate_set>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e010      	b.n	8001b86 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	331c      	adds	r3, #28
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f001 f8c4 	bl	8002cf8 <lsm303agr_xl_full_scale_set>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e004      	b.n	8001b86 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f87c 	bl	8001c94 <LSM303AGR_ACC_Disable>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e008      	b.n	8001bba <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	331c      	adds	r3, #28
 8001bd0:	6839      	ldr	r1, [r7, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 fa55 	bl	8003082 <lsm303agr_xl_device_id_get>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	e000      	b.n	8001be6 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8001c30:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	43c80000 	.word	0x43c80000

08001c4c <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e014      	b.n	8001c8c <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f103 021c 	add.w	r2, r3, #28
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4610      	mov	r0, r2
 8001c72:	f000 ffbf 	bl	8002bf4 <lsm303agr_xl_data_rate_set>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	e004      	b.n	8001c8c <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e01f      	b.n	8001cea <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f103 021c 	add.w	r2, r3, #28
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	332a      	adds	r3, #42	; 0x2a
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f000 ffc2 	bl	8002c40 <lsm303agr_xl_data_rate_get>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e010      	b.n	8001cea <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	331c      	adds	r3, #28
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 ff90 	bl	8002bf4 <lsm303agr_xl_data_rate_set>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e004      	b.n	8001cea <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	331c      	adds	r3, #28
 8001d04:	f107 020b 	add.w	r2, r7, #11
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 ff3e 	bl	8002b8c <lsm303agr_xl_operating_mode_get>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1a:	e031      	b.n	8001d80 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d01a      	beq.n	8001d58 <LSM303AGR_ACC_GetSensitivity+0x66>
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	dc22      	bgt.n	8001d6c <LSM303AGR_ACC_GetSensitivity+0x7a>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d00a      	beq.n	8001d44 <LSM303AGR_ACC_GetSensitivity+0x52>
 8001d2e:	e01d      	b.n	8001d6c <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fca8 	bl	8002688 <LSM303AGR_ACC_GetSensitivityHR>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01a      	beq.n	8001d74 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e01d      	b.n	8001d80 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8001d44:	6839      	ldr	r1, [r7, #0]
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fce4 	bl	8002714 <LSM303AGR_ACC_GetSensitivityNM>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d012      	beq.n	8001d78 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e013      	b.n	8001d80 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fd20 	bl	80027a0 <LSM303AGR_ACC_GetSensitivityLP>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	60fb      	str	r3, [r7, #12]
      break;
 8001d72:	e004      	b.n	8001d7e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8001d74:	bf00      	nop
 8001d76:	e002      	b.n	8001d7e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8001d78:	bf00      	nop
 8001d7a:	e000      	b.n	8001d7e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8001d7c:	bf00      	nop
  }

  return ret;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	331c      	adds	r3, #28
 8001d9a:	f107 020b 	add.w	r2, r7, #11
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fef3 	bl	8002b8c <lsm303agr_xl_operating_mode_get>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	e09d      	b.n	8001eee <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	331c      	adds	r3, #28
 8001db6:	f107 020a 	add.w	r2, r7, #10
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 ff3f 	bl	8002c40 <lsm303agr_xl_data_rate_get>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	e08f      	b.n	8001eee <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d147      	bne.n	8001e64 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8001dd4:	7abb      	ldrb	r3, [r7, #10]
 8001dd6:	2b09      	cmp	r3, #9
 8001dd8:	d840      	bhi.n	8001e5c <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	08001e13 	.word	0x08001e13
 8001de8:	08001e1d 	.word	0x08001e1d
 8001dec:	08001e25 	.word	0x08001e25
 8001df0:	08001e2d 	.word	0x08001e2d
 8001df4:	08001e35 	.word	0x08001e35
 8001df8:	08001e3d 	.word	0x08001e3d
 8001dfc:	08001e45 	.word	0x08001e45
 8001e00:	08001e4d 	.word	0x08001e4d
 8001e04:	08001e55 	.word	0x08001e55
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
        break;
 8001e10:	e06c      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e18:	601a      	str	r2, [r3, #0]
        break;
 8001e1a:	e067      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4a36      	ldr	r2, [pc, #216]	; (8001ef8 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8001e20:	601a      	str	r2, [r3, #0]
        break;
 8001e22:	e063      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4a35      	ldr	r2, [pc, #212]	; (8001efc <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8001e28:	601a      	str	r2, [r3, #0]
        break;
 8001e2a:	e05f      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8001e30:	601a      	str	r2, [r3, #0]
        break;
 8001e32:	e05b      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8001e38:	601a      	str	r2, [r3, #0]
        break;
 8001e3a:	e057      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4a32      	ldr	r2, [pc, #200]	; (8001f08 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8001e40:	601a      	str	r2, [r3, #0]
        break;
 8001e42:	e053      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4a31      	ldr	r2, [pc, #196]	; (8001f0c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8001e48:	601a      	str	r2, [r3, #0]
        break;
 8001e4a:	e04f      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8001e50:	601a      	str	r2, [r3, #0]
        break;
 8001e52:	e04b      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4a2f      	ldr	r2, [pc, #188]	; (8001f14 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8001e58:	601a      	str	r2, [r3, #0]
        break;
 8001e5a:	e047      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	60fb      	str	r3, [r7, #12]
        break;
 8001e62:	e043      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8001e64:	7abb      	ldrb	r3, [r7, #10]
 8001e66:	2b09      	cmp	r3, #9
 8001e68:	d83c      	bhi.n	8001ee4 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001e99 	.word	0x08001e99
 8001e74:	08001ea3 	.word	0x08001ea3
 8001e78:	08001ead 	.word	0x08001ead
 8001e7c:	08001eb5 	.word	0x08001eb5
 8001e80:	08001ebd 	.word	0x08001ebd
 8001e84:	08001ec5 	.word	0x08001ec5
 8001e88:	08001ecd 	.word	0x08001ecd
 8001e8c:	08001ed5 	.word	0x08001ed5
 8001e90:	08001ee5 	.word	0x08001ee5
 8001e94:	08001edd 	.word	0x08001edd
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
        break;
 8001ea0:	e024      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ea8:	601a      	str	r2, [r3, #0]
        break;
 8001eaa:	e01f      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8001eb0:	601a      	str	r2, [r3, #0]
        break;
 8001eb2:	e01b      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4a11      	ldr	r2, [pc, #68]	; (8001efc <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8001eb8:	601a      	str	r2, [r3, #0]
        break;
 8001eba:	e017      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8001ec0:	601a      	str	r2, [r3, #0]
        break;
 8001ec2:	e013      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8001ec8:	601a      	str	r2, [r3, #0]
        break;
 8001eca:	e00f      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8001ed0:	601a      	str	r2, [r3, #0]
        break;
 8001ed2:	e00b      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8001ed8:	601a      	str	r2, [r3, #0]
        break;
 8001eda:	e007      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8001ee0:	601a      	str	r2, [r3, #0]
        break;
 8001ee2:	e003      	b.n	8001eec <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee8:	60fb      	str	r3, [r7, #12]
        break;
 8001eea:	bf00      	nop
    }
  }

  return ret;
 8001eec:	68fb      	ldr	r3, [r7, #12]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	41200000 	.word	0x41200000
 8001efc:	41c80000 	.word	0x41c80000
 8001f00:	42480000 	.word	0x42480000
 8001f04:	42c80000 	.word	0x42c80000
 8001f08:	43480000 	.word	0x43480000
 8001f0c:	43c80000 	.word	0x43c80000
 8001f10:	44ca8000 	.word	0x44ca8000
 8001f14:	45a80000 	.word	0x45a80000
 8001f18:	44a80000 	.word	0x44a80000

08001f1c <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d106      	bne.n	8001f40 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001f32:	ed97 0a00 	vldr	s0, [r7]
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fc78 	bl	800282c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	e005      	b.n	8001f4c <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001f40:	ed97 0a00 	vldr	s0, [r7]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fcd3 	bl	80028f0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8001f4a:	4603      	mov	r3, r0
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	331c      	adds	r3, #28
 8001f66:	f107 020b 	add.w	r2, r7, #11
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fee9 	bl	8002d44 <lsm303agr_xl_full_scale_get>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7c:	e023      	b.n	8001fc6 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d81b      	bhi.n	8001fbc <LSM303AGR_ACC_GetFullScale+0x68>
 8001f84:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <LSM303AGR_ACC_GetFullScale+0x38>)
 8001f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8a:	bf00      	nop
 8001f8c:	08001f9d 	.word	0x08001f9d
 8001f90:	08001fa5 	.word	0x08001fa5
 8001f94:	08001fad 	.word	0x08001fad
 8001f98:	08001fb5 	.word	0x08001fb5
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	601a      	str	r2, [r3, #0]
      break;
 8001fa2:	e00f      	b.n	8001fc4 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	601a      	str	r2, [r3, #0]
      break;
 8001faa:	e00b      	b.n	8001fc4 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2208      	movs	r2, #8
 8001fb0:	601a      	str	r2, [r3, #0]
      break;
 8001fb2:	e007      	b.n	8001fc4 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	601a      	str	r2, [r3, #0]
      break;
 8001fba:	e003      	b.n	8001fc4 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	60fb      	str	r3, [r7, #12]
      break;
 8001fc2:	bf00      	nop
  }

  return ret;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop

08001fd0 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	dd0b      	ble.n	8001ff8 <LSM303AGR_ACC_SetFullScale+0x28>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	dd06      	ble.n	8001ff4 <LSM303AGR_ACC_SetFullScale+0x24>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	dc01      	bgt.n	8001ff0 <LSM303AGR_ACC_SetFullScale+0x20>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e004      	b.n	8001ffa <LSM303AGR_ACC_SetFullScale+0x2a>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e002      	b.n	8001ffa <LSM303AGR_ACC_SetFullScale+0x2a>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <LSM303AGR_ACC_SetFullScale+0x2a>
 8001ff8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8001ffa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	331c      	adds	r3, #28
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fe77 	bl	8002cf8 <lsm303agr_xl_full_scale_set>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	e000      	b.n	8002018 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	331c      	adds	r3, #28
 8002036:	f107 020f 	add.w	r2, r7, #15
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fda5 	bl	8002b8c <lsm303agr_xl_operating_mode_get>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	e04a      	b.n	80020e4 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d00c      	beq.n	800206e <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002054:	2b02      	cmp	r3, #2
 8002056:	dc0e      	bgt.n	8002076 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <LSM303AGR_ACC_GetAxesRaw+0x42>
 800205c:	2b01      	cmp	r3, #1
 800205e:	d003      	beq.n	8002068 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002060:	e009      	b.n	8002076 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002062:	2310      	movs	r3, #16
 8002064:	83fb      	strh	r3, [r7, #30]
      break;
 8002066:	e00a      	b.n	800207e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002068:	2340      	movs	r3, #64	; 0x40
 800206a:	83fb      	strh	r3, [r7, #30]
      break;
 800206c:	e007      	b.n	800207e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 800206e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002072:	83fb      	strh	r3, [r7, #30]
      break;
 8002074:	e003      	b.n	800207e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	61bb      	str	r3, [r7, #24]
      break;
 800207c:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d101      	bne.n	800208a <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	e02c      	b.n	80020e4 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	331c      	adds	r3, #28
 800208e:	f107 0210 	add.w	r2, r7, #16
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f000 feb3 	bl	8002e00 <lsm303agr_acceleration_raw_get>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
 80020a4:	e01e      	b.n	80020e4 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80020a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80020aa:	461a      	mov	r2, r3
 80020ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80020ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020be:	461a      	mov	r2, r3
 80020c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80020ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80020dc:	b21a      	sxth	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	809a      	strh	r2, [r3, #4]

  return ret;
 80020e2:	69bb      	ldr	r3, [r7, #24]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff8c 	bl	8002020 <LSM303AGR_ACC_GetAxesRaw>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e03c      	b.n	800218e <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fde9 	bl	8001cf2 <LSM303AGR_ACC_GetSensitivity>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e030      	b.n	800218e <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800212c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002138:	edd7 7a03 	vldr	s15, [r7, #12]
 800213c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002144:	ee17 2a90 	vmov	r2, s15
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800214c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002158:	edd7 7a03 	vldr	s15, [r7, #12]
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002164:	ee17 2a90 	vmov	r2, s15
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800216c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002178:	edd7 7a03 	vldr	s15, [r7, #12]
 800217c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002184:	ee17 2a90 	vmov	r2, s15
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
 80021a2:	4613      	mov	r3, r2
 80021a4:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f103 001c 	add.w	r0, r3, #28
 80021ac:	1cba      	adds	r2, r7, #2
 80021ae:	78f9      	ldrb	r1, [r7, #3]
 80021b0:	2301      	movs	r3, #1
 80021b2:	f000 fcd3 	bl	8002b5c <lsm303agr_write_reg>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
 80021c0:	e000      	b.n	80021c4 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	e04b      	b.n	8002280 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	7b1a      	ldrb	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a1a      	ldr	r2, [pc, #104]	; (800228c <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002224:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800222a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e01e      	b.n	8002280 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4798      	blx	r3
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e014      	b.n	8002280 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	331c      	adds	r3, #28
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f000 ff75 	bl	800315e <lsm303agr_mag_i2c_interface_set>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	e000      	b.n	8002282 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002280:	68fb      	ldr	r3, [r7, #12]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	08002a69 	.word	0x08002a69
 8002290:	08002acb 	.word	0x08002acb

08002294 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	331c      	adds	r3, #28
 80022a0:	2101      	movs	r1, #1
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fe7c 	bl	8002fa0 <lsm303agr_mag_block_data_update_set>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	e028      	b.n	8002306 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	331c      	adds	r3, #28
 80022b8:	2102      	movs	r1, #2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fdeb 	bl	8002e96 <lsm303agr_mag_operating_mode_set>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	e01c      	b.n	8002306 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	331c      	adds	r3, #28
 80022d0:	2103      	movs	r1, #3
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fe05 	bl	8002ee2 <lsm303agr_mag_data_rate_set>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e010      	b.n	8002306 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	331c      	adds	r3, #28
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 feeb 	bl	80030c6 <lsm303agr_mag_self_test_set>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e004      	b.n	8002306 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f874 	bl	8002404 <LSM303AGR_MAG_Disable>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	e004      	b.n	8002332 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	331c      	adds	r3, #28
 8002348:	6839      	ldr	r1, [r7, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f000 feaa 	bl	80030a4 <lsm303agr_mag_device_id_get>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	e000      	b.n	800235e <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2232      	movs	r2, #50	; 0x32
 800239a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <LSM303AGR_MAG_GetCapabilities+0x58>)
 80023b0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	42c80000 	.word	0x42c80000

080023c4 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e010      	b.n	80023fc <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	331c      	adds	r3, #28
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fd58 	bl	8002e96 <lsm303agr_mag_operating_mode_set>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	e004      	b.n	80023fc <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e010      	b.n	800243c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	331c      	adds	r3, #28
 800241e:	2102      	movs	r1, #2
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fd38 	bl	8002e96 <lsm303agr_mag_operating_mode_set>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
 8002430:	e004      	b.n	800243c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002454:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	331c      	adds	r3, #28
 8002476:	f107 020b 	add.w	r2, r7, #11
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fd57 	bl	8002f30 <lsm303agr_mag_data_rate_get>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	e023      	b.n	80024d6 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800248e:	7afb      	ldrb	r3, [r7, #11]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d81b      	bhi.n	80024cc <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024b5 	.word	0x080024b5
 80024a4:	080024bd 	.word	0x080024bd
 80024a8:	080024c5 	.word	0x080024c5
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80024b0:	601a      	str	r2, [r3, #0]
      break;
 80024b2:	e00f      	b.n	80024d4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80024b8:	601a      	str	r2, [r3, #0]
      break;
 80024ba:	e00b      	b.n	80024d4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80024c0:	601a      	str	r2, [r3, #0]
      break;
 80024c2:	e007      	b.n	80024d4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80024c8:	601a      	str	r2, [r3, #0]
      break;
 80024ca:	e003      	b.n	80024d4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	60fb      	str	r3, [r7, #12]
      break;
 80024d2:	bf00      	nop
  }

  return ret;
 80024d4:	68fb      	ldr	r3, [r7, #12]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	41200000 	.word	0x41200000
 80024e4:	41a00000 	.word	0x41a00000
 80024e8:	42480000 	.word	0x42480000
 80024ec:	42c80000 	.word	0x42c80000

080024f0 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80024fc:	edd7 7a00 	vldr	s15, [r7]
 8002500:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d801      	bhi.n	8002512 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800250e:	2300      	movs	r3, #0
 8002510:	e016      	b.n	8002540 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002512:	edd7 7a00 	vldr	s15, [r7]
 8002516:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800251a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d801      	bhi.n	8002528 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002524:	2301      	movs	r3, #1
 8002526:	e00b      	b.n	8002540 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002528:	edd7 7a00 	vldr	s15, [r7]
 800252c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002568 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	d801      	bhi.n	800253e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800253a:	2302      	movs	r3, #2
 800253c:	e000      	b.n	8002540 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800253e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002540:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	331c      	adds	r3, #28
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fcc9 	bl	8002ee2 <lsm303agr_mag_data_rate_set>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e000      	b.n	800255e <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	42480000 	.word	0x42480000

0800256c <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2232      	movs	r2, #50	; 0x32
 800257a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	331c      	adds	r3, #28
 80025b0:	f107 0208 	add.w	r2, r7, #8
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fd18 	bl	8002fec <lsm303agr_magnetic_raw_get>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	e00c      	b.n	80025e2 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80025c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80025d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80025d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	331c      	adds	r3, #28
 80025f8:	f107 0210 	add.w	r2, r7, #16
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fcf4 	bl	8002fec <lsm303agr_magnetic_raw_get>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e036      	b.n	800267e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ff14 	bl	8002444 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800261c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002628:	edd7 7a03 	vldr	s15, [r7, #12]
 800262c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002634:	ee17 2a90 	vmov	r2, s15
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800263c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002648:	edd7 7a03 	vldr	s15, [r7, #12]
 800264c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002654:	ee17 2a90 	vmov	r2, s15
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800265c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002668:	edd7 7a03 	vldr	s15, [r7, #12]
 800266c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002674:	ee17 2a90 	vmov	r2, s15
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	331c      	adds	r3, #28
 800269a:	f107 020b 	add.w	r2, r7, #11
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fb4f 	bl	8002d44 <lsm303agr_xl_full_scale_get>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
 80026b0:	e023      	b.n	80026fa <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d81b      	bhi.n	80026f0 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026d9 	.word	0x080026d9
 80026c8:	080026e1 	.word	0x080026e1
 80026cc:	080026e9 	.word	0x080026e9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4a0c      	ldr	r2, [pc, #48]	; (8002704 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80026d4:	601a      	str	r2, [r3, #0]
      break;
 80026d6:	e00f      	b.n	80026f8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80026dc:	601a      	str	r2, [r3, #0]
      break;
 80026de:	e00b      	b.n	80026f8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80026e4:	601a      	str	r2, [r3, #0]
      break;
 80026e6:	e007      	b.n	80026f8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80026ec:	601a      	str	r2, [r3, #0]
      break;
 80026ee:	e003      	b.n	80026f8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
 80026f4:	60fb      	str	r3, [r7, #12]
      break;
 80026f6:	bf00      	nop
  }

  return ret;
 80026f8:	68fb      	ldr	r3, [r7, #12]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	3f7ae148 	.word	0x3f7ae148
 8002708:	3ff9999a 	.word	0x3ff9999a
 800270c:	4079999a 	.word	0x4079999a
 8002710:	413b851f 	.word	0x413b851f

08002714 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	331c      	adds	r3, #28
 8002726:	f107 020b 	add.w	r2, r7, #11
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fb09 	bl	8002d44 <lsm303agr_xl_full_scale_get>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	e023      	b.n	8002786 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d81b      	bhi.n	800277c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8002744:	a201      	add	r2, pc, #4	; (adr r2, 800274c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	0800275d 	.word	0x0800275d
 8002750:	08002765 	.word	0x08002765
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002775 	.word	0x08002775
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8002760:	601a      	str	r2, [r3, #0]
      break;
 8002762:	e00f      	b.n	8002784 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8002768:	601a      	str	r2, [r3, #0]
      break;
 800276a:	e00b      	b.n	8002784 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8002770:	601a      	str	r2, [r3, #0]
      break;
 8002772:	e007      	b.n	8002784 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8002778:	601a      	str	r2, [r3, #0]
      break;
 800277a:	e003      	b.n	8002784 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	60fb      	str	r3, [r7, #12]
      break;
 8002782:	bf00      	nop
  }

  return ret;
 8002784:	68fb      	ldr	r3, [r7, #12]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	4079999a 	.word	0x4079999a
 8002794:	40fa3d71 	.word	0x40fa3d71
 8002798:	417a147b 	.word	0x417a147b
 800279c:	423b999a 	.word	0x423b999a

080027a0 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	331c      	adds	r3, #28
 80027b2:	f107 020b 	add.w	r2, r7, #11
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fac3 	bl	8002d44 <lsm303agr_xl_full_scale_get>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295
 80027c8:	e023      	b.n	8002812 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d81b      	bhi.n	8002808 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027f1 	.word	0x080027f1
 80027e0:	080027f9 	.word	0x080027f9
 80027e4:	08002801 	.word	0x08002801
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4a0c      	ldr	r2, [pc, #48]	; (800281c <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80027ec:	601a      	str	r2, [r3, #0]
      break;
 80027ee:	e00f      	b.n	8002810 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80027f4:	601a      	str	r2, [r3, #0]
      break;
 80027f6:	e00b      	b.n	8002810 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80027fc:	601a      	str	r2, [r3, #0]
      break;
 80027fe:	e007      	b.n	8002810 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8002804:	601a      	str	r2, [r3, #0]
      break;
 8002806:	e003      	b.n	8002810 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	60fb      	str	r3, [r7, #12]
      break;
 800280e:	bf00      	nop
  }

  return ret;
 8002810:	68fb      	ldr	r3, [r7, #12]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	417a147b 	.word	0x417a147b
 8002820:	41fa147b 	.word	0x41fa147b
 8002824:	427a147b 	.word	0x427a147b
 8002828:	433b947b 	.word	0x433b947b

0800282c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002838:	edd7 7a00 	vldr	s15, [r7]
 800283c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	d801      	bhi.n	800284e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800284a:	2301      	movs	r3, #1
 800284c:	e037      	b.n	80028be <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800284e:	edd7 7a00 	vldr	s15, [r7]
 8002852:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285e:	d801      	bhi.n	8002864 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002860:	2302      	movs	r3, #2
 8002862:	e02c      	b.n	80028be <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002864:	edd7 7a00 	vldr	s15, [r7]
 8002868:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800286c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	d801      	bhi.n	800287a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002876:	2303      	movs	r3, #3
 8002878:	e021      	b.n	80028be <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800287a:	edd7 7a00 	vldr	s15, [r7]
 800287e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80028e4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8002882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	d801      	bhi.n	8002890 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 800288c:	2304      	movs	r3, #4
 800288e:	e016      	b.n	80028be <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002890:	edd7 7a00 	vldr	s15, [r7]
 8002894:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80028e8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	d801      	bhi.n	80028a6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e00b      	b.n	80028be <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80028a6:	edd7 7a00 	vldr	s15, [r7]
 80028aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80028ec <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80028ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	d801      	bhi.n	80028bc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80028b8:	2306      	movs	r3, #6
 80028ba:	e000      	b.n	80028be <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80028bc:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80028be:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	331c      	adds	r3, #28
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f993 	bl	8002bf4 <lsm303agr_xl_data_rate_set>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
 80028d8:	e000      	b.n	80028dc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	42480000 	.word	0x42480000
 80028e8:	42c80000 	.word	0x42c80000
 80028ec:	43480000 	.word	0x43480000

080028f0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80028fc:	edd7 7a00 	vldr	s15, [r7]
 8002900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290c:	d801      	bhi.n	8002912 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 800290e:	2301      	movs	r3, #1
 8002910:	e037      	b.n	8002982 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002912:	edd7 7a00 	vldr	s15, [r7]
 8002916:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800291a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	d801      	bhi.n	8002928 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002924:	2302      	movs	r3, #2
 8002926:	e02c      	b.n	8002982 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002928:	edd7 7a00 	vldr	s15, [r7]
 800292c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	d801      	bhi.n	800293e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800293a:	2303      	movs	r3, #3
 800293c:	e021      	b.n	8002982 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800293e:	edd7 7a00 	vldr	s15, [r7]
 8002942:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002998 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	d801      	bhi.n	8002954 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002950:	2304      	movs	r3, #4
 8002952:	e016      	b.n	8002982 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002954:	edd7 7a00 	vldr	s15, [r7]
 8002958:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800299c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 800295c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002964:	d801      	bhi.n	800296a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002966:	2305      	movs	r3, #5
 8002968:	e00b      	b.n	8002982 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800296a:	edd7 7a00 	vldr	s15, [r7]
 800296e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80029a0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8002972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297a:	d801      	bhi.n	8002980 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 800297c:	2306      	movs	r3, #6
 800297e:	e000      	b.n	8002982 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002980:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	42480000 	.word	0x42480000
 800299c:	42c80000 	.word	0x42c80000
 80029a0:	43480000 	.word	0x43480000

080029a4 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	461a      	mov	r2, r3
 80029b0:	460b      	mov	r3, r1
 80029b2:	72fb      	strb	r3, [r7, #11]
 80029b4:	4613      	mov	r3, r2
 80029b6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10e      	bne.n	80029e2 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	695c      	ldr	r4, [r3, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	7b1b      	ldrb	r3, [r3, #12]
 80029cc:	b298      	uxth	r0, r3
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	b299      	uxth	r1, r3
 80029d8:	893b      	ldrh	r3, [r7, #8]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	47a0      	blx	r4
 80029de:	4603      	mov	r3, r0
 80029e0:	e00d      	b.n	80029fe <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	695c      	ldr	r4, [r3, #20]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	7b1b      	ldrb	r3, [r3, #12]
 80029ea:	b298      	uxth	r0, r3
 80029ec:	7afb      	ldrb	r3, [r7, #11]
 80029ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	b299      	uxth	r1, r3
 80029f6:	893b      	ldrh	r3, [r7, #8]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	47a0      	blx	r4
 80029fc:	4603      	mov	r3, r0
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}

08002a06 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a06:	b590      	push	{r4, r7, lr}
 8002a08:	b087      	sub	sp, #28
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	461a      	mov	r2, r3
 8002a12:	460b      	mov	r3, r1
 8002a14:	72fb      	strb	r3, [r7, #11]
 8002a16:	4613      	mov	r3, r2
 8002a18:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10e      	bne.n	8002a44 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	691c      	ldr	r4, [r3, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	7b1b      	ldrb	r3, [r3, #12]
 8002a2e:	b298      	uxth	r0, r3
 8002a30:	7afb      	ldrb	r3, [r7, #11]
 8002a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	b299      	uxth	r1, r3
 8002a3a:	893b      	ldrh	r3, [r7, #8]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	47a0      	blx	r4
 8002a40:	4603      	mov	r3, r0
 8002a42:	e00d      	b.n	8002a60 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	691c      	ldr	r4, [r3, #16]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	7b1b      	ldrb	r3, [r3, #12]
 8002a4c:	b298      	uxth	r0, r3
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	b299      	uxth	r1, r3
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	47a0      	blx	r4
 8002a5e:	4603      	mov	r3, r0
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd90      	pop	{r4, r7, pc}

08002a68 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	72fb      	strb	r3, [r7, #11]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10e      	bne.n	8002aa6 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	695c      	ldr	r4, [r3, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	7b1b      	ldrb	r3, [r3, #12]
 8002a90:	b298      	uxth	r0, r3
 8002a92:	7afb      	ldrb	r3, [r7, #11]
 8002a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	b299      	uxth	r1, r3
 8002a9c:	893b      	ldrh	r3, [r7, #8]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	47a0      	blx	r4
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	e00d      	b.n	8002ac2 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	695c      	ldr	r4, [r3, #20]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	7b1b      	ldrb	r3, [r3, #12]
 8002aae:	b298      	uxth	r0, r3
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	b299      	uxth	r1, r3
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	47a0      	blx	r4
 8002ac0:	4603      	mov	r3, r0
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}

08002aca <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002aca:	b590      	push	{r4, r7, lr}
 8002acc:	b087      	sub	sp, #28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	72fb      	strb	r3, [r7, #11]
 8002ada:	4613      	mov	r3, r2
 8002adc:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10e      	bne.n	8002b08 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	691c      	ldr	r4, [r3, #16]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	7b1b      	ldrb	r3, [r3, #12]
 8002af2:	b298      	uxth	r0, r3
 8002af4:	7afb      	ldrb	r3, [r7, #11]
 8002af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	b299      	uxth	r1, r3
 8002afe:	893b      	ldrh	r3, [r7, #8]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	47a0      	blx	r4
 8002b04:	4603      	mov	r3, r0
 8002b06:	e00d      	b.n	8002b24 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	691c      	ldr	r4, [r3, #16]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	7b1b      	ldrb	r3, [r3, #12]
 8002b10:	b298      	uxth	r0, r3
 8002b12:	7afb      	ldrb	r3, [r7, #11]
 8002b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	b299      	uxth	r1, r3
 8002b1c:	893b      	ldrh	r3, [r7, #8]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	47a0      	blx	r4
 8002b22:	4603      	mov	r3, r0
  }
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}

08002b2c <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	461a      	mov	r2, r3
 8002b38:	460b      	mov	r3, r1
 8002b3a:	72fb      	strb	r3, [r7, #11]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685c      	ldr	r4, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6898      	ldr	r0, [r3, #8]
 8002b48:	893b      	ldrh	r3, [r7, #8]
 8002b4a:	7af9      	ldrb	r1, [r7, #11]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	47a0      	blx	r4
 8002b50:	6178      	str	r0, [r7, #20]
  return ret;
 8002b52:	697b      	ldr	r3, [r7, #20]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}

08002b5c <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	461a      	mov	r2, r3
 8002b68:	460b      	mov	r3, r1
 8002b6a:	72fb      	strb	r3, [r7, #11]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681c      	ldr	r4, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6898      	ldr	r0, [r3, #8]
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	7af9      	ldrb	r1, [r7, #11]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	47a0      	blx	r4
 8002b80:	6178      	str	r0, [r7, #20]
  return ret;
 8002b82:	697b      	ldr	r3, [r7, #20]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}

08002b8c <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002b96:	f107 020c 	add.w	r2, r7, #12
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffc4 	bl	8002b2c <lsm303agr_read_reg>
 8002ba4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002bac:	f107 0210 	add.w	r2, r7, #16
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	2123      	movs	r1, #35	; 0x23
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ffb9 	bl	8002b2c <lsm303agr_read_reg>
 8002bba:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8002bbc:	7b3b      	ldrb	r3, [r7, #12]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e00c      	b.n	8002bea <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8002bd0:	7c3b      	ldrb	r3, [r7, #16]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e002      	b.n	8002bea <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002bea:	697b      	ldr	r3, [r7, #20]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002c00:	f107 0208 	add.w	r2, r7, #8
 8002c04:	2301      	movs	r3, #1
 8002c06:	2120      	movs	r1, #32
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff8f 	bl	8002b2c <lsm303agr_read_reg>
 8002c0e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	7a3b      	ldrb	r3, [r7, #8]
 8002c20:	f362 1307 	bfi	r3, r2, #4, #4
 8002c24:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002c26:	f107 0208 	add.w	r2, r7, #8
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ff94 	bl	8002b5c <lsm303agr_write_reg>
 8002c34:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002c4a:	f107 0208 	add.w	r2, r7, #8
 8002c4e:	2301      	movs	r3, #1
 8002c50:	2120      	movs	r1, #32
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff6a 	bl	8002b2c <lsm303agr_read_reg>
 8002c58:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8002c5a:	7a3b      	ldrb	r3, [r7, #8]
 8002c5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b09      	cmp	r3, #9
 8002c64:	d83e      	bhi.n	8002ce4 <lsm303agr_xl_data_rate_get+0xa4>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <lsm303agr_xl_data_rate_get+0x2c>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002c95 	.word	0x08002c95
 8002c70:	08002c9d 	.word	0x08002c9d
 8002c74:	08002ca5 	.word	0x08002ca5
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cb5 	.word	0x08002cb5
 8002c80:	08002cbd 	.word	0x08002cbd
 8002c84:	08002cc5 	.word	0x08002cc5
 8002c88:	08002ccd 	.word	0x08002ccd
 8002c8c:	08002cd5 	.word	0x08002cd5
 8002c90:	08002cdd 	.word	0x08002cdd
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
      break;
 8002c9a:	e027      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
      break;
 8002ca2:	e023      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
      break;
 8002caa:	e01f      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2203      	movs	r2, #3
 8002cb0:	701a      	strb	r2, [r3, #0]
      break;
 8002cb2:	e01b      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	701a      	strb	r2, [r3, #0]
      break;
 8002cba:	e017      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2205      	movs	r2, #5
 8002cc0:	701a      	strb	r2, [r3, #0]
      break;
 8002cc2:	e013      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2206      	movs	r2, #6
 8002cc8:	701a      	strb	r2, [r3, #0]
      break;
 8002cca:	e00f      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2207      	movs	r2, #7
 8002cd0:	701a      	strb	r2, [r3, #0]
      break;
 8002cd2:	e00b      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	701a      	strb	r2, [r3, #0]
      break;
 8002cda:	e007      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2209      	movs	r2, #9
 8002ce0:	701a      	strb	r2, [r3, #0]
      break;
 8002ce2:	e003      	b.n	8002cec <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
      break;
 8002cea:	bf00      	nop
  }

  return ret;
 8002cec:	68fb      	ldr	r3, [r7, #12]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop

08002cf8 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002d04:	f107 0208 	add.w	r2, r7, #8
 8002d08:	2301      	movs	r3, #1
 8002d0a:	2123      	movs	r1, #35	; 0x23
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff0d 	bl	8002b2c <lsm303agr_read_reg>
 8002d12:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	7a3b      	ldrb	r3, [r7, #8]
 8002d24:	f362 1305 	bfi	r3, r2, #4, #2
 8002d28:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002d2a:	f107 0208 	add.w	r2, r7, #8
 8002d2e:	2301      	movs	r3, #1
 8002d30:	2123      	movs	r1, #35	; 0x23
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ff12 	bl	8002b5c <lsm303agr_write_reg>
 8002d38:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002d4e:	f107 0208 	add.w	r2, r7, #8
 8002d52:	2301      	movs	r3, #1
 8002d54:	2123      	movs	r1, #35	; 0x23
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff fee8 	bl	8002b2c <lsm303agr_read_reg>
 8002d5c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8002d5e:	7a3b      	ldrb	r3, [r7, #8]
 8002d60:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d81a      	bhi.n	8002da0 <lsm303agr_xl_full_scale_get+0x5c>
 8002d6a:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <lsm303agr_xl_full_scale_get+0x2c>)
 8002d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d89 	.word	0x08002d89
 8002d78:	08002d91 	.word	0x08002d91
 8002d7c:	08002d99 	.word	0x08002d99
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
      break;
 8002d86:	e00f      	b.n	8002da8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
      break;
 8002d8e:	e00b      	b.n	8002da8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2202      	movs	r2, #2
 8002d94:	701a      	strb	r2, [r3, #0]
      break;
 8002d96:	e007      	b.n	8002da8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	701a      	strb	r2, [r3, #0]
      break;
 8002d9e:	e003      	b.n	8002da8 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
      break;
 8002da6:	bf00      	nop
  }

  return ret;
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop

08002db4 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002dc0:	f107 0208 	add.w	r2, r7, #8
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	2123      	movs	r1, #35	; 0x23
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff feaf 	bl	8002b2c <lsm303agr_read_reg>
 8002dce:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	7a3b      	ldrb	r3, [r7, #8]
 8002de0:	f362 13c7 	bfi	r3, r2, #7, #1
 8002de4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002de6:	f107 0208 	add.w	r2, r7, #8
 8002dea:	2301      	movs	r3, #1
 8002dec:	2123      	movs	r1, #35	; 0x23
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff feb4 	bl	8002b5c <lsm303agr_write_reg>
 8002df4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8002e0a:	f107 020c 	add.w	r2, r7, #12
 8002e0e:	2306      	movs	r3, #6
 8002e10:	2128      	movs	r1, #40	; 0x28
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fe8a 	bl	8002b2c <lsm303agr_read_reg>
 8002e18:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002e1a:	7b7b      	ldrb	r3, [r7, #13]
 8002e1c:	b21a      	sxth	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	7b3b      	ldrb	r3, [r7, #12]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	b21a      	sxth	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	3302      	adds	r3, #2
 8002e42:	b212      	sxth	r2, r2
 8002e44:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3302      	adds	r3, #2
 8002e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	7bbb      	ldrb	r3, [r7, #14]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	3302      	adds	r3, #2
 8002e60:	b212      	sxth	r2, r2
 8002e62:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002e64:	7c7a      	ldrb	r2, [r7, #17]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	b212      	sxth	r2, r2
 8002e6c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	3304      	adds	r3, #4
 8002e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	7c3b      	ldrb	r3, [r7, #16]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	3304      	adds	r3, #4
 8002e88:	b212      	sxth	r2, r2
 8002e8a:	801a      	strh	r2, [r3, #0]
  return ret;
 8002e8c:	697b      	ldr	r3, [r7, #20]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002ea2:	f107 0208 	add.w	r2, r7, #8
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	2160      	movs	r1, #96	; 0x60
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fe3e 	bl	8002b2c <lsm303agr_read_reg>
 8002eb0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10f      	bne.n	8002ed8 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	7a3b      	ldrb	r3, [r7, #8]
 8002ec2:	f362 0301 	bfi	r3, r2, #0, #2
 8002ec6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002ec8:	f107 0208 	add.w	r2, r7, #8
 8002ecc:	2301      	movs	r3, #1
 8002ece:	2160      	movs	r1, #96	; 0x60
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fe43 	bl	8002b5c <lsm303agr_write_reg>
 8002ed6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002eee:	f107 0208 	add.w	r2, r7, #8
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	2160      	movs	r1, #96	; 0x60
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fe18 	bl	8002b2c <lsm303agr_read_reg>
 8002efc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10f      	bne.n	8002f24 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	7a3b      	ldrb	r3, [r7, #8]
 8002f0e:	f362 0383 	bfi	r3, r2, #2, #2
 8002f12:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002f14:	f107 0208 	add.w	r2, r7, #8
 8002f18:	2301      	movs	r3, #1
 8002f1a:	2160      	movs	r1, #96	; 0x60
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fe1d 	bl	8002b5c <lsm303agr_write_reg>
 8002f22:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8002f24:	68fb      	ldr	r3, [r7, #12]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002f3a:	f107 0208 	add.w	r2, r7, #8
 8002f3e:	2301      	movs	r3, #1
 8002f40:	2160      	movs	r1, #96	; 0x60
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fdf2 	bl	8002b2c <lsm303agr_read_reg>
 8002f48:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8002f4a:	7a3b      	ldrb	r3, [r7, #8]
 8002f4c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d81a      	bhi.n	8002f8c <lsm303agr_mag_data_rate_get+0x5c>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <lsm303agr_mag_data_rate_get+0x2c>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f75 	.word	0x08002f75
 8002f64:	08002f7d 	.word	0x08002f7d
 8002f68:	08002f85 	.word	0x08002f85
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
      break;
 8002f72:	e00f      	b.n	8002f94 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
      break;
 8002f7a:	e00b      	b.n	8002f94 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	701a      	strb	r2, [r3, #0]
      break;
 8002f82:	e007      	b.n	8002f94 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2203      	movs	r2, #3
 8002f88:	701a      	strb	r2, [r3, #0]
      break;
 8002f8a:	e003      	b.n	8002f94 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
      break;
 8002f92:	bf00      	nop
  }

  return ret;
 8002f94:	68fb      	ldr	r3, [r7, #12]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop

08002fa0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002fac:	f107 0208 	add.w	r2, r7, #8
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	2162      	movs	r1, #98	; 0x62
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff fdb9 	bl	8002b2c <lsm303agr_read_reg>
 8002fba:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	7a3b      	ldrb	r3, [r7, #8]
 8002fcc:	f362 1304 	bfi	r3, r2, #4, #1
 8002fd0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002fd2:	f107 0208 	add.w	r2, r7, #8
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	2162      	movs	r1, #98	; 0x62
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fdbe 	bl	8002b5c <lsm303agr_write_reg>
 8002fe0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8002ff6:	f107 020c 	add.w	r2, r7, #12
 8002ffa:	2306      	movs	r3, #6
 8002ffc:	2168      	movs	r1, #104	; 0x68
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fd94 	bl	8002b2c <lsm303agr_read_reg>
 8003004:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003006:	7b7b      	ldrb	r3, [r7, #13]
 8003008:	b21a      	sxth	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003014:	b29b      	uxth	r3, r3
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	b29a      	uxth	r2, r3
 800301a:	7b3b      	ldrb	r3, [r7, #12]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4413      	add	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	b21a      	sxth	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	3302      	adds	r3, #2
 800302e:	b212      	sxth	r2, r2
 8003030:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	3302      	adds	r3, #2
 8003036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800303a:	b29b      	uxth	r3, r3
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	b29a      	uxth	r2, r3
 8003040:	7bbb      	ldrb	r3, [r7, #14]
 8003042:	b29b      	uxth	r3, r3
 8003044:	4413      	add	r3, r2
 8003046:	b29a      	uxth	r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	3302      	adds	r3, #2
 800304c:	b212      	sxth	r2, r2
 800304e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003050:	7c7a      	ldrb	r2, [r7, #17]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	3304      	adds	r3, #4
 8003056:	b212      	sxth	r2, r2
 8003058:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	3304      	adds	r3, #4
 800305e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003062:	b29b      	uxth	r3, r3
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	b29a      	uxth	r2, r3
 8003068:	7c3b      	ldrb	r3, [r7, #16]
 800306a:	b29b      	uxth	r3, r3
 800306c:	4413      	add	r3, r2
 800306e:	b29a      	uxth	r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	3304      	adds	r3, #4
 8003074:	b212      	sxth	r2, r2
 8003076:	801a      	strh	r2, [r3, #0]
  return ret;
 8003078:	697b      	ldr	r3, [r7, #20]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 800308c:	2301      	movs	r3, #1
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	210f      	movs	r1, #15
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fd4a 	bl	8002b2c <lsm303agr_read_reg>
 8003098:	60f8      	str	r0, [r7, #12]
  return ret;
 800309a:	68fb      	ldr	r3, [r7, #12]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80030ae:	2301      	movs	r3, #1
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	214f      	movs	r1, #79	; 0x4f
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fd39 	bl	8002b2c <lsm303agr_read_reg>
 80030ba:	60f8      	str	r0, [r7, #12]
  return ret;
 80030bc:	68fb      	ldr	r3, [r7, #12]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80030d2:	f107 0208 	add.w	r2, r7, #8
 80030d6:	2301      	movs	r3, #1
 80030d8:	2162      	movs	r1, #98	; 0x62
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fd26 	bl	8002b2c <lsm303agr_read_reg>
 80030e0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10f      	bne.n	8003108 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	7a3b      	ldrb	r3, [r7, #8]
 80030f2:	f362 0341 	bfi	r3, r2, #1, #1
 80030f6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80030f8:	f107 0208 	add.w	r2, r7, #8
 80030fc:	2301      	movs	r3, #1
 80030fe:	2162      	movs	r1, #98	; 0x62
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fd2b 	bl	8002b5c <lsm303agr_write_reg>
 8003106:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003108:	68fb      	ldr	r3, [r7, #12]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800311e:	f107 0208 	add.w	r2, r7, #8
 8003122:	2301      	movs	r3, #1
 8003124:	212e      	movs	r1, #46	; 0x2e
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fd00 	bl	8002b2c <lsm303agr_read_reg>
 800312c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10f      	bne.n	8003154 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	b2da      	uxtb	r2, r3
 800313c:	7a3b      	ldrb	r3, [r7, #8]
 800313e:	f362 1387 	bfi	r3, r2, #6, #2
 8003142:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003144:	f107 0208 	add.w	r2, r7, #8
 8003148:	2301      	movs	r3, #1
 800314a:	212e      	movs	r1, #46	; 0x2e
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fd05 	bl	8002b5c <lsm303agr_write_reg>
 8003152:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003154:	68fb      	ldr	r3, [r7, #12]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800316a:	f107 0208 	add.w	r2, r7, #8
 800316e:	2301      	movs	r3, #1
 8003170:	2162      	movs	r1, #98	; 0x62
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fcda 	bl	8002b2c <lsm303agr_read_reg>
 8003178:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10f      	bne.n	80031a0 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	b2da      	uxtb	r2, r3
 8003188:	7a3b      	ldrb	r3, [r7, #8]
 800318a:	f362 1345 	bfi	r3, r2, #5, #1
 800318e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003190:	f107 0208 	add.w	r2, r7, #8
 8003194:	2301      	movs	r3, #1
 8003196:	2162      	movs	r1, #98	; 0x62
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fcdf 	bl	8002b5c <lsm303agr_write_reg>
 800319e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d103      	bne.n	80031c8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e04d      	b.n	8003264 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	7b1a      	ldrb	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a1b      	ldr	r2, [pc, #108]	; (8003270 <LSM6DSL_RegisterBusIO+0xc4>)
 8003204:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <LSM6DSL_RegisterBusIO+0xc8>)
 800320a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d103      	bne.n	8003222 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e020      	b.n	8003264 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4798      	blx	r3
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e016      	b.n	8003264 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d112      	bne.n	8003264 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10d      	bne.n	8003264 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003248:	230c      	movs	r3, #12
 800324a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800324c:	7afb      	ldrb	r3, [r7, #11]
 800324e:	461a      	mov	r2, r3
 8003250:	2112      	movs	r1, #18
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fd2d 	bl	8003cb2 <LSM6DSL_Write_Reg>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003264:	68fb      	ldr	r3, [r7, #12]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	08004121 	.word	0x08004121
 8003274:	08004157 	.word	0x08004157

08003278 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	331c      	adds	r3, #28
 8003284:	2101      	movs	r1, #1
 8003286:	4618      	mov	r0, r3
 8003288:	f001 fa59 	bl	800473e <lsm6dsl_auto_increment_set>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	e054      	b.n	8003342 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	331c      	adds	r3, #28
 800329c:	2101      	movs	r1, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 f980 	bl	80045a4 <lsm6dsl_block_data_update_set>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	e048      	b.n	8003342 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	331c      	adds	r3, #28
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fa67 	bl	800478a <lsm6dsl_fifo_mode_set>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	e03c      	b.n	8003342 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2204      	movs	r2, #4
 80032cc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	331c      	adds	r3, #28
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 ffe6 	bl	80042a8 <lsm6dsl_xl_data_rate_set>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	e02c      	b.n	8003342 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	331c      	adds	r3, #28
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 ff7c 	bl	80041ec <lsm6dsl_xl_full_scale_set>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
 80032fe:	e020      	b.n	8003342 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2204      	movs	r2, #4
 8003304:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	331c      	adds	r3, #28
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f8c0 	bl	8004494 <lsm6dsl_gy_data_rate_set>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
 800331e:	e010      	b.n	8003342 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	331c      	adds	r3, #28
 8003324:	2106      	movs	r1, #6
 8003326:	4618      	mov	r0, r3
 8003328:	f001 f84c 	bl	80043c4 <lsm6dsl_gy_full_scale_set>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	e004      	b.n	8003342 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f888 	bl	8003468 <LSM6DSL_ACC_Disable>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	e015      	b.n	8003390 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fa9a 	bl	800389e <LSM6DSL_GYRO_Disable>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
 8003374:	e00c      	b.n	8003390 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	331c      	adds	r3, #28
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 f9b7 	bl	800471c <lsm6dsl_device_id_get>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	e000      	b.n	80033bc <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2201      	movs	r2, #1
 80033d8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033ec:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2210      	movs	r2, #16
 80033f2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <LSM6DSL_GetCapabilities+0x58>)
 80033fe:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4a06      	ldr	r2, [pc, #24]	; (800341c <LSM6DSL_GetCapabilities+0x58>)
 8003404:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	45d02000 	.word	0x45d02000

08003420 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e014      	b.n	8003460 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f103 021c 	add.w	r2, r3, #28
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003442:	4619      	mov	r1, r3
 8003444:	4610      	mov	r0, r2
 8003446:	f000 ff2f 	bl	80042a8 <lsm6dsl_xl_data_rate_set>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003450:	f04f 33ff 	mov.w	r3, #4294967295
 8003454:	e004      	b.n	8003460 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	e01f      	b.n	80034be <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f103 021c 	add.w	r2, r3, #28
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	332b      	adds	r3, #43	; 0x2b
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 ff32 	bl	80042f4 <lsm6dsl_xl_data_rate_get>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
 800349a:	e010      	b.n	80034be <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	331c      	adds	r3, #28
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 ff00 	bl	80042a8 <lsm6dsl_xl_data_rate_set>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	e004      	b.n	80034be <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	331c      	adds	r3, #28
 80034da:	f107 020b 	add.w	r2, r7, #11
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fea9 	bl	8004238 <lsm6dsl_xl_full_scale_get>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80034ec:	f04f 33ff 	mov.w	r3, #4294967295
 80034f0:	e023      	b.n	800353a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80034f2:	7afb      	ldrb	r3, [r7, #11]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d81b      	bhi.n	8003530 <LSM6DSL_ACC_GetSensitivity+0x68>
 80034f8:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <LSM6DSL_ACC_GetSensitivity+0x38>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003511 	.word	0x08003511
 8003504:	08003529 	.word	0x08003529
 8003508:	08003519 	.word	0x08003519
 800350c:	08003521 	.word	0x08003521
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4a0c      	ldr	r2, [pc, #48]	; (8003544 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003514:	601a      	str	r2, [r3, #0]
      break;
 8003516:	e00f      	b.n	8003538 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800351c:	601a      	str	r2, [r3, #0]
      break;
 800351e:	e00b      	b.n	8003538 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4a0a      	ldr	r2, [pc, #40]	; (800354c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003524:	601a      	str	r2, [r3, #0]
      break;
 8003526:	e007      	b.n	8003538 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800352c:	601a      	str	r2, [r3, #0]
      break;
 800352e:	e003      	b.n	8003538 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	60fb      	str	r3, [r7, #12]
      break;
 8003536:	bf00      	nop
  }

  return ret;
 8003538:	68fb      	ldr	r3, [r7, #12]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	3d79db23 	.word	0x3d79db23
 8003548:	3df9db23 	.word	0x3df9db23
 800354c:	3e79db23 	.word	0x3e79db23
 8003550:	3ef9db23 	.word	0x3ef9db23

08003554 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	331c      	adds	r3, #28
 8003566:	f107 020b 	add.w	r2, r7, #11
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fec1 	bl	80042f4 <lsm6dsl_xl_data_rate_get>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	e054      	b.n	8003628 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800357e:	7afb      	ldrb	r3, [r7, #11]
 8003580:	2b0b      	cmp	r3, #11
 8003582:	d84c      	bhi.n	800361e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035bd 	.word	0x080035bd
 8003590:	080035cf 	.word	0x080035cf
 8003594:	080035d7 	.word	0x080035d7
 8003598:	080035df 	.word	0x080035df
 800359c:	080035e7 	.word	0x080035e7
 80035a0:	080035ef 	.word	0x080035ef
 80035a4:	080035f7 	.word	0x080035f7
 80035a8:	080035ff 	.word	0x080035ff
 80035ac:	08003607 	.word	0x08003607
 80035b0:	0800360f 	.word	0x0800360f
 80035b4:	08003617 	.word	0x08003617
 80035b8:	080035c7 	.word	0x080035c7
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
      break;
 80035c4:	e02f      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	4a19      	ldr	r2, [pc, #100]	; (8003630 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80035ca:	601a      	str	r2, [r3, #0]
      break;
 80035cc:	e02b      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	4a18      	ldr	r2, [pc, #96]	; (8003634 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80035d2:	601a      	str	r2, [r3, #0]
      break;
 80035d4:	e027      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	4a17      	ldr	r2, [pc, #92]	; (8003638 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 80035da:	601a      	str	r2, [r3, #0]
      break;
 80035dc:	e023      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	4a16      	ldr	r2, [pc, #88]	; (800363c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80035e2:	601a      	str	r2, [r3, #0]
      break;
 80035e4:	e01f      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80035ea:	601a      	str	r2, [r3, #0]
      break;
 80035ec:	e01b      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 80035f2:	601a      	str	r2, [r3, #0]
      break;
 80035f4:	e017      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	4a13      	ldr	r2, [pc, #76]	; (8003648 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 80035fa:	601a      	str	r2, [r3, #0]
      break;
 80035fc:	e013      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	4a12      	ldr	r2, [pc, #72]	; (800364c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8003602:	601a      	str	r2, [r3, #0]
      break;
 8003604:	e00f      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	4a11      	ldr	r2, [pc, #68]	; (8003650 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 800360a:	601a      	str	r2, [r3, #0]
      break;
 800360c:	e00b      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	4a10      	ldr	r2, [pc, #64]	; (8003654 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8003612:	601a      	str	r2, [r3, #0]
      break;
 8003614:	e007      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	4a0f      	ldr	r2, [pc, #60]	; (8003658 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800361a:	601a      	str	r2, [r3, #0]
      break;
 800361c:	e003      	b.n	8003626 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
 8003622:	60fb      	str	r3, [r7, #12]
      break;
 8003624:	bf00      	nop
  }

  return ret;
 8003626:	68fb      	ldr	r3, [r7, #12]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	3fcccccd 	.word	0x3fcccccd
 8003634:	41480000 	.word	0x41480000
 8003638:	41d00000 	.word	0x41d00000
 800363c:	42500000 	.word	0x42500000
 8003640:	42d00000 	.word	0x42d00000
 8003644:	43500000 	.word	0x43500000
 8003648:	43d00000 	.word	0x43d00000
 800364c:	44504000 	.word	0x44504000
 8003650:	44cf8000 	.word	0x44cf8000
 8003654:	45502000 	.word	0x45502000
 8003658:	45d02000 	.word	0x45d02000

0800365c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800366e:	2b01      	cmp	r3, #1
 8003670:	d106      	bne.n	8003680 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003672:	ed97 0a00 	vldr	s0, [r7]
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fb36 	bl	8003ce8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800367c:	4603      	mov	r3, r0
 800367e:	e005      	b.n	800368c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003680:	ed97 0a00 	vldr	s0, [r7]
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fbbb 	bl	8003e00 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800368a:	4603      	mov	r3, r0
  }
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	331c      	adds	r3, #28
 80036a6:	f107 020b 	add.w	r2, r7, #11
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fdc3 	bl	8004238 <lsm6dsl_xl_full_scale_get>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	e023      	b.n	8003706 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80036be:	7afb      	ldrb	r3, [r7, #11]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d81b      	bhi.n	80036fc <LSM6DSL_ACC_GetFullScale+0x68>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <LSM6DSL_ACC_GetFullScale+0x38>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036ed 	.word	0x080036ed
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2202      	movs	r2, #2
 80036e0:	601a      	str	r2, [r3, #0]
      break;
 80036e2:	e00f      	b.n	8003704 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2204      	movs	r2, #4
 80036e8:	601a      	str	r2, [r3, #0]
      break;
 80036ea:	e00b      	b.n	8003704 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2208      	movs	r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
      break;
 80036f2:	e007      	b.n	8003704 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2210      	movs	r2, #16
 80036f8:	601a      	str	r2, [r3, #0]
      break;
 80036fa:	e003      	b.n	8003704 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80036fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003700:	60fb      	str	r3, [r7, #12]
      break;
 8003702:	bf00      	nop
  }

  return ret;
 8003704:	68fb      	ldr	r3, [r7, #12]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop

08003710 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b02      	cmp	r3, #2
 800371e:	dd0b      	ble.n	8003738 <LSM6DSL_ACC_SetFullScale+0x28>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b04      	cmp	r3, #4
 8003724:	dd06      	ble.n	8003734 <LSM6DSL_ACC_SetFullScale+0x24>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b08      	cmp	r3, #8
 800372a:	dc01      	bgt.n	8003730 <LSM6DSL_ACC_SetFullScale+0x20>
 800372c:	2303      	movs	r3, #3
 800372e:	e004      	b.n	800373a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003730:	2301      	movs	r3, #1
 8003732:	e002      	b.n	800373a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003734:	2302      	movs	r3, #2
 8003736:	e000      	b.n	800373a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003738:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800373a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	331c      	adds	r3, #28
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fd51 	bl	80041ec <lsm6dsl_xl_full_scale_set>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	e000      	b.n	8003758 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	331c      	adds	r3, #28
 800376e:	f107 0208 	add.w	r2, r7, #8
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f000 ff86 	bl	8004686 <lsm6dsl_acceleration_raw_get>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8003780:	f04f 33ff 	mov.w	r3, #4294967295
 8003784:	e00c      	b.n	80037a0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003786:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800378e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003796:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	331c      	adds	r3, #28
 80037bc:	f107 0210 	add.w	r2, r7, #16
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 ff5f 	bl	8004686 <lsm6dsl_acceleration_raw_get>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e03c      	b.n	800384e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fe74 	bl	80034c8 <LSM6DSL_ACC_GetSensitivity>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	e030      	b.n	800384e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80037ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037f0:	ee07 3a90 	vmov	s15, r3
 80037f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80037fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003804:	ee17 2a90 	vmov	r2, s15
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800380c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003818:	edd7 7a03 	vldr	s15, [r7, #12]
 800381c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003824:	ee17 2a90 	vmov	r2, s15
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800382c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003838:	edd7 7a03 	vldr	s15, [r7, #12]
 800383c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003844:	ee17 2a90 	vmov	r2, s15
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e014      	b.n	8003896 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f103 021c 	add.w	r2, r3, #28
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f000 fe0a 	bl	8004494 <lsm6dsl_gy_data_rate_set>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	e004      	b.n	8003896 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e01f      	b.n	80038f4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f103 021c 	add.w	r2, r3, #28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	332c      	adds	r3, #44	; 0x2c
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f000 fe0d 	bl	80044e0 <lsm6dsl_gy_data_rate_get>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295
 80038d0:	e010      	b.n	80038f4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	331c      	adds	r3, #28
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fddb 	bl	8004494 <lsm6dsl_gy_data_rate_set>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80038e4:	f04f 33ff 	mov.w	r3, #4294967295
 80038e8:	e004      	b.n	80038f4 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	331c      	adds	r3, #28
 800390e:	f107 020b 	add.w	r2, r7, #11
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fd7b 	bl	8004410 <lsm6dsl_gy_full_scale_get>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003920:	f04f 33ff 	mov.w	r3, #4294967295
 8003924:	e02d      	b.n	8003982 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003926:	7afb      	ldrb	r3, [r7, #11]
 8003928:	2b06      	cmp	r3, #6
 800392a:	d825      	bhi.n	8003978 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003959 	.word	0x08003959
 8003938:	08003951 	.word	0x08003951
 800393c:	08003961 	.word	0x08003961
 8003940:	08003979 	.word	0x08003979
 8003944:	08003969 	.word	0x08003969
 8003948:	08003979 	.word	0x08003979
 800394c:	08003971 	.word	0x08003971
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4a0e      	ldr	r2, [pc, #56]	; (800398c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8003954:	601a      	str	r2, [r3, #0]
      break;
 8003956:	e013      	b.n	8003980 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4a0d      	ldr	r2, [pc, #52]	; (8003990 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800395c:	601a      	str	r2, [r3, #0]
      break;
 800395e:	e00f      	b.n	8003980 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8003964:	601a      	str	r2, [r3, #0]
      break;
 8003966:	e00b      	b.n	8003980 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800396c:	601a      	str	r2, [r3, #0]
      break;
 800396e:	e007      	b.n	8003980 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8003974:	601a      	str	r2, [r3, #0]
      break;
 8003976:	e003      	b.n	8003980 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	60fb      	str	r3, [r7, #12]
      break;
 800397e:	bf00      	nop
  }

  return ret;
 8003980:	68fb      	ldr	r3, [r7, #12]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	408c0000 	.word	0x408c0000
 8003990:	410c0000 	.word	0x410c0000
 8003994:	418c0000 	.word	0x418c0000
 8003998:	420c0000 	.word	0x420c0000
 800399c:	428c0000 	.word	0x428c0000

080039a0 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	331c      	adds	r3, #28
 80039b2:	f107 020b 	add.w	r2, r7, #11
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fd91 	bl	80044e0 <lsm6dsl_gy_data_rate_get>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295
 80039c8:	e04e      	b.n	8003a68 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80039ca:	7afb      	ldrb	r3, [r7, #11]
 80039cc:	2b0a      	cmp	r3, #10
 80039ce:	d846      	bhi.n	8003a5e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a0f 	.word	0x08003a0f
 80039e0:	08003a17 	.word	0x08003a17
 80039e4:	08003a1f 	.word	0x08003a1f
 80039e8:	08003a27 	.word	0x08003a27
 80039ec:	08003a2f 	.word	0x08003a2f
 80039f0:	08003a37 	.word	0x08003a37
 80039f4:	08003a3f 	.word	0x08003a3f
 80039f8:	08003a47 	.word	0x08003a47
 80039fc:	08003a4f 	.word	0x08003a4f
 8003a00:	08003a57 	.word	0x08003a57
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
      break;
 8003a0c:	e02b      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8003a12:	601a      	str	r2, [r3, #0]
      break;
 8003a14:	e027      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	4a16      	ldr	r2, [pc, #88]	; (8003a74 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8003a1a:	601a      	str	r2, [r3, #0]
      break;
 8003a1c:	e023      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8003a22:	601a      	str	r2, [r3, #0]
      break;
 8003a24:	e01f      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8003a2a:	601a      	str	r2, [r3, #0]
      break;
 8003a2c:	e01b      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8003a32:	601a      	str	r2, [r3, #0]
      break;
 8003a34:	e017      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8003a3a:	601a      	str	r2, [r3, #0]
      break;
 8003a3c:	e013      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	4a11      	ldr	r2, [pc, #68]	; (8003a88 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8003a42:	601a      	str	r2, [r3, #0]
      break;
 8003a44:	e00f      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8003a4a:	601a      	str	r2, [r3, #0]
      break;
 8003a4c:	e00b      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8003a52:	601a      	str	r2, [r3, #0]
      break;
 8003a54:	e007      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8003a5a:	601a      	str	r2, [r3, #0]
      break;
 8003a5c:	e003      	b.n	8003a66 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	60fb      	str	r3, [r7, #12]
      break;
 8003a64:	bf00      	nop
  }

  return ret;
 8003a66:	68fb      	ldr	r3, [r7, #12]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	41480000 	.word	0x41480000
 8003a74:	41d00000 	.word	0x41d00000
 8003a78:	42500000 	.word	0x42500000
 8003a7c:	42d00000 	.word	0x42d00000
 8003a80:	43500000 	.word	0x43500000
 8003a84:	43d00000 	.word	0x43d00000
 8003a88:	44504000 	.word	0x44504000
 8003a8c:	44cf8000 	.word	0x44cf8000
 8003a90:	45502000 	.word	0x45502000
 8003a94:	45d02000 	.word	0x45d02000

08003a98 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d106      	bne.n	8003abc <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003aae:	ed97 0a00 	vldr	s0, [r7]
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa26 	bl	8003f04 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	e005      	b.n	8003ac8 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003abc:	ed97 0a00 	vldr	s0, [r7]
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 faab 	bl	800401c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8003ac6:	4603      	mov	r3, r0
  }
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	331c      	adds	r3, #28
 8003ae2:	f107 020b 	add.w	r2, r7, #11
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fc91 	bl	8004410 <lsm6dsl_gy_full_scale_get>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	e030      	b.n	8003b5c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8003afa:	7afb      	ldrb	r3, [r7, #11]
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d828      	bhi.n	8003b52 <LSM6DSL_GYRO_GetFullScale+0x82>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003b25 	.word	0x08003b25
 8003b10:	08003b35 	.word	0x08003b35
 8003b14:	08003b53 	.word	0x08003b53
 8003b18:	08003b3f 	.word	0x08003b3f
 8003b1c:	08003b53 	.word	0x08003b53
 8003b20:	08003b49 	.word	0x08003b49
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	227d      	movs	r2, #125	; 0x7d
 8003b28:	601a      	str	r2, [r3, #0]
      break;
 8003b2a:	e016      	b.n	8003b5a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	22fa      	movs	r2, #250	; 0xfa
 8003b30:	601a      	str	r2, [r3, #0]
      break;
 8003b32:	e012      	b.n	8003b5a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b3a:	601a      	str	r2, [r3, #0]
      break;
 8003b3c:	e00d      	b.n	8003b5a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b44:	601a      	str	r2, [r3, #0]
      break;
 8003b46:	e008      	b.n	8003b5a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003b4e:	601a      	str	r2, [r3, #0]
      break;
 8003b50:	e003      	b.n	8003b5a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	60fb      	str	r3, [r7, #12]
      break;
 8003b58:	bf00      	nop
  }

  return ret;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b7d      	cmp	r3, #125	; 0x7d
 8003b72:	dd12      	ble.n	8003b9a <LSM6DSL_GYRO_SetFullScale+0x36>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2bfa      	cmp	r3, #250	; 0xfa
 8003b78:	dd0d      	ble.n	8003b96 <LSM6DSL_GYRO_SetFullScale+0x32>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b80:	dd07      	ble.n	8003b92 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b88:	dc01      	bgt.n	8003b8e <LSM6DSL_GYRO_SetFullScale+0x2a>
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	e006      	b.n	8003b9c <LSM6DSL_GYRO_SetFullScale+0x38>
 8003b8e:	2306      	movs	r3, #6
 8003b90:	e004      	b.n	8003b9c <LSM6DSL_GYRO_SetFullScale+0x38>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e002      	b.n	8003b9c <LSM6DSL_GYRO_SetFullScale+0x38>
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <LSM6DSL_GYRO_SetFullScale+0x38>
 8003b9a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8003b9c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	331c      	adds	r3, #28
 8003ba2:	7bfa      	ldrb	r2, [r7, #15]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fc0c 	bl	80043c4 <lsm6dsl_gy_full_scale_set>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	e000      	b.n	8003bba <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	331c      	adds	r3, #28
 8003bd0:	f107 0208 	add.w	r2, r7, #8
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fd0a 	bl	80045f0 <lsm6dsl_angular_rate_raw_get>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	e00c      	b.n	8003c02 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003be8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003bf0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003bf8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	331c      	adds	r3, #28
 8003c18:	f107 0210 	add.w	r2, r7, #16
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fce6 	bl	80045f0 <lsm6dsl_angular_rate_raw_get>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	e03c      	b.n	8003caa <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003c30:	f107 030c 	add.w	r3, r7, #12
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fe60 	bl	80038fc <LSM6DSL_GYRO_GetSensitivity>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
 8003c46:	e030      	b.n	8003caa <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003c48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c60:	ee17 2a90 	vmov	r2, s15
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003c68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c80:	ee17 2a90 	vmov	r2, s15
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003c88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca0:	ee17 2a90 	vmov	r2, s15
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	70fb      	strb	r3, [r7, #3]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f103 001c 	add.w	r0, r3, #28
 8003cc8:	1cba      	adds	r2, r7, #2
 8003cca:	78f9      	ldrb	r1, [r7, #3]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f000 fa75 	bl	80041bc <lsm6dsl_write_reg>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e000      	b.n	8003ce0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003cf4:	edd7 7a00 	vldr	s15, [r7]
 8003cf8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d04:	d801      	bhi.n	8003d0a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e058      	b.n	8003dbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d0a:	edd7 7a00 	vldr	s15, [r7]
 8003d0e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1a:	d801      	bhi.n	8003d20 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e04d      	b.n	8003dbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d20:	edd7 7a00 	vldr	s15, [r7]
 8003d24:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003de4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d30:	d801      	bhi.n	8003d36 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003d32:	2303      	movs	r3, #3
 8003d34:	e042      	b.n	8003dbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d36:	edd7 7a00 	vldr	s15, [r7]
 8003d3a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003de8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d46:	d801      	bhi.n	8003d4c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	e037      	b.n	8003dbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d4c:	edd7 7a00 	vldr	s15, [r7]
 8003d50:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003dec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	d801      	bhi.n	8003d62 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003d5e:	2305      	movs	r3, #5
 8003d60:	e02c      	b.n	8003dbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d62:	edd7 7a00 	vldr	s15, [r7]
 8003d66:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003df0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8003d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d72:	d801      	bhi.n	8003d78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003d74:	2306      	movs	r3, #6
 8003d76:	e021      	b.n	8003dbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d78:	edd7 7a00 	vldr	s15, [r7]
 8003d7c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003df4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d88:	d801      	bhi.n	8003d8e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8003d8a:	2307      	movs	r3, #7
 8003d8c:	e016      	b.n	8003dbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003d8e:	edd7 7a00 	vldr	s15, [r7]
 8003d92:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003df8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8003d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9e:	d801      	bhi.n	8003da4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003da0:	2308      	movs	r3, #8
 8003da2:	e00b      	b.n	8003dbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003da4:	edd7 7a00 	vldr	s15, [r7]
 8003da8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db4:	d801      	bhi.n	8003dba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8003db6:	2309      	movs	r3, #9
 8003db8:	e000      	b.n	8003dbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003dba:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003dbc:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	331c      	adds	r3, #28
 8003dc2:	7bfa      	ldrb	r2, [r7, #15]
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fa6e 	bl	80042a8 <lsm6dsl_xl_data_rate_set>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	e000      	b.n	8003dda <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	42500000 	.word	0x42500000
 8003de8:	42d00000 	.word	0x42d00000
 8003dec:	43500000 	.word	0x43500000
 8003df0:	43d00000 	.word	0x43d00000
 8003df4:	44504000 	.word	0x44504000
 8003df8:	44cf8000 	.word	0x44cf8000
 8003dfc:	45502000 	.word	0x45502000

08003e00 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003e0c:	edd7 7a00 	vldr	s15, [r7]
 8003e10:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1c:	d801      	bhi.n	8003e22 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e058      	b.n	8003ed4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e22:	edd7 7a00 	vldr	s15, [r7]
 8003e26:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e32:	d801      	bhi.n	8003e38 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e04d      	b.n	8003ed4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e38:	edd7 7a00 	vldr	s15, [r7]
 8003e3c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e48:	d801      	bhi.n	8003e4e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e042      	b.n	8003ed4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e4e:	edd7 7a00 	vldr	s15, [r7]
 8003e52:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003eec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8003e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5e:	d801      	bhi.n	8003e64 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003e60:	2304      	movs	r3, #4
 8003e62:	e037      	b.n	8003ed4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e64:	edd7 7a00 	vldr	s15, [r7]
 8003e68:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003ef0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e74:	d801      	bhi.n	8003e7a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003e76:	2305      	movs	r3, #5
 8003e78:	e02c      	b.n	8003ed4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e7a:	edd7 7a00 	vldr	s15, [r7]
 8003e7e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ef4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8a:	d801      	bhi.n	8003e90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003e8c:	2306      	movs	r3, #6
 8003e8e:	e021      	b.n	8003ed4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e90:	edd7 7a00 	vldr	s15, [r7]
 8003e94:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003ef8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea0:	d801      	bhi.n	8003ea6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	e016      	b.n	8003ed4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003ea6:	edd7 7a00 	vldr	s15, [r7]
 8003eaa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003efc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8003eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb6:	d801      	bhi.n	8003ebc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003eb8:	2308      	movs	r3, #8
 8003eba:	e00b      	b.n	8003ed4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003ebc:	edd7 7a00 	vldr	s15, [r7]
 8003ec0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003f00 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ecc:	d801      	bhi.n	8003ed2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8003ece:	2309      	movs	r3, #9
 8003ed0:	e000      	b.n	8003ed4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003ed2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	42500000 	.word	0x42500000
 8003eec:	42d00000 	.word	0x42d00000
 8003ef0:	43500000 	.word	0x43500000
 8003ef4:	43d00000 	.word	0x43d00000
 8003ef8:	44504000 	.word	0x44504000
 8003efc:	44cf8000 	.word	0x44cf8000
 8003f00:	45502000 	.word	0x45502000

08003f04 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003f10:	edd7 7a00 	vldr	s15, [r7]
 8003f14:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f20:	d801      	bhi.n	8003f26 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e058      	b.n	8003fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f26:	edd7 7a00 	vldr	s15, [r7]
 8003f2a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f36:	d801      	bhi.n	8003f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e04d      	b.n	8003fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f3c:	edd7 7a00 	vldr	s15, [r7]
 8003f40:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004000 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4c:	d801      	bhi.n	8003f52 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e042      	b.n	8003fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f52:	edd7 7a00 	vldr	s15, [r7]
 8003f56:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004004 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8003f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f62:	d801      	bhi.n	8003f68 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003f64:	2304      	movs	r3, #4
 8003f66:	e037      	b.n	8003fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f68:	edd7 7a00 	vldr	s15, [r7]
 8003f6c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004008 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f78:	d801      	bhi.n	8003f7e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8003f7a:	2305      	movs	r3, #5
 8003f7c:	e02c      	b.n	8003fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f7e:	edd7 7a00 	vldr	s15, [r7]
 8003f82:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800400c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8003f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8e:	d801      	bhi.n	8003f94 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003f90:	2306      	movs	r3, #6
 8003f92:	e021      	b.n	8003fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f94:	edd7 7a00 	vldr	s15, [r7]
 8003f98:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004010 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa4:	d801      	bhi.n	8003faa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8003fa6:	2307      	movs	r3, #7
 8003fa8:	e016      	b.n	8003fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003faa:	edd7 7a00 	vldr	s15, [r7]
 8003fae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004014 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fba:	d801      	bhi.n	8003fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	e00b      	b.n	8003fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003fc0:	edd7 7a00 	vldr	s15, [r7]
 8003fc4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd0:	d801      	bhi.n	8003fd6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003fd2:	2309      	movs	r3, #9
 8003fd4:	e000      	b.n	8003fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003fd6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003fd8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	331c      	adds	r3, #28
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fa56 	bl	8004494 <lsm6dsl_gy_data_rate_set>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	e000      	b.n	8003ff6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	42500000 	.word	0x42500000
 8004004:	42d00000 	.word	0x42d00000
 8004008:	43500000 	.word	0x43500000
 800400c:	43d00000 	.word	0x43d00000
 8004010:	44504000 	.word	0x44504000
 8004014:	44cf8000 	.word	0x44cf8000
 8004018:	45502000 	.word	0x45502000

0800401c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004028:	edd7 7a00 	vldr	s15, [r7]
 800402c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004038:	d801      	bhi.n	800403e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800403a:	2301      	movs	r3, #1
 800403c:	e058      	b.n	80040f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800403e:	edd7 7a00 	vldr	s15, [r7]
 8004042:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404e:	d801      	bhi.n	8004054 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004050:	2302      	movs	r3, #2
 8004052:	e04d      	b.n	80040f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004054:	edd7 7a00 	vldr	s15, [r7]
 8004058:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004104 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800405c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004064:	d801      	bhi.n	800406a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004066:	2303      	movs	r3, #3
 8004068:	e042      	b.n	80040f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800406a:	edd7 7a00 	vldr	s15, [r7]
 800406e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004108 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	d801      	bhi.n	8004080 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800407c:	2304      	movs	r3, #4
 800407e:	e037      	b.n	80040f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004080:	edd7 7a00 	vldr	s15, [r7]
 8004084:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800410c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800408c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004090:	d801      	bhi.n	8004096 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004092:	2305      	movs	r3, #5
 8004094:	e02c      	b.n	80040f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004096:	edd7 7a00 	vldr	s15, [r7]
 800409a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004110 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800409e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a6:	d801      	bhi.n	80040ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80040a8:	2306      	movs	r3, #6
 80040aa:	e021      	b.n	80040f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80040ac:	edd7 7a00 	vldr	s15, [r7]
 80040b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004114 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80040b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040bc:	d801      	bhi.n	80040c2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80040be:	2307      	movs	r3, #7
 80040c0:	e016      	b.n	80040f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80040c2:	edd7 7a00 	vldr	s15, [r7]
 80040c6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004118 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80040ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d2:	d801      	bhi.n	80040d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80040d4:	2308      	movs	r3, #8
 80040d6:	e00b      	b.n	80040f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80040d8:	edd7 7a00 	vldr	s15, [r7]
 80040dc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800411c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80040e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e8:	d801      	bhi.n	80040ee <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80040ea:	2309      	movs	r3, #9
 80040ec:	e000      	b.n	80040f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80040ee:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	42500000 	.word	0x42500000
 8004108:	42d00000 	.word	0x42d00000
 800410c:	43500000 	.word	0x43500000
 8004110:	43d00000 	.word	0x43d00000
 8004114:	44504000 	.word	0x44504000
 8004118:	44cf8000 	.word	0x44cf8000
 800411c:	45502000 	.word	0x45502000

08004120 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	461a      	mov	r2, r3
 800412c:	460b      	mov	r3, r1
 800412e:	72fb      	strb	r3, [r7, #11]
 8004130:	4613      	mov	r3, r2
 8004132:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	695c      	ldr	r4, [r3, #20]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	7b1b      	ldrb	r3, [r3, #12]
 8004140:	b298      	uxth	r0, r3
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	b299      	uxth	r1, r3
 8004146:	893b      	ldrh	r3, [r7, #8]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	47a0      	blx	r4
 800414c:	4603      	mov	r3, r0
}
 800414e:	4618      	mov	r0, r3
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd90      	pop	{r4, r7, pc}

08004156 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004156:	b590      	push	{r4, r7, lr}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	461a      	mov	r2, r3
 8004162:	460b      	mov	r3, r1
 8004164:	72fb      	strb	r3, [r7, #11]
 8004166:	4613      	mov	r3, r2
 8004168:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	691c      	ldr	r4, [r3, #16]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	7b1b      	ldrb	r3, [r3, #12]
 8004176:	b298      	uxth	r0, r3
 8004178:	7afb      	ldrb	r3, [r7, #11]
 800417a:	b299      	uxth	r1, r3
 800417c:	893b      	ldrh	r3, [r7, #8]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	47a0      	blx	r4
 8004182:	4603      	mov	r3, r0
}
 8004184:	4618      	mov	r0, r3
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}

0800418c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	461a      	mov	r2, r3
 8004198:	460b      	mov	r3, r1
 800419a:	72fb      	strb	r3, [r7, #11]
 800419c:	4613      	mov	r3, r2
 800419e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685c      	ldr	r4, [r3, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6898      	ldr	r0, [r3, #8]
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	7af9      	ldrb	r1, [r7, #11]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	47a0      	blx	r4
 80041b0:	6178      	str	r0, [r7, #20]
  return ret;
 80041b2:	697b      	ldr	r3, [r7, #20]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd90      	pop	{r4, r7, pc}

080041bc <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	461a      	mov	r2, r3
 80041c8:	460b      	mov	r3, r1
 80041ca:	72fb      	strb	r3, [r7, #11]
 80041cc:	4613      	mov	r3, r2
 80041ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681c      	ldr	r4, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6898      	ldr	r0, [r3, #8]
 80041d8:	893b      	ldrh	r3, [r7, #8]
 80041da:	7af9      	ldrb	r1, [r7, #11]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	47a0      	blx	r4
 80041e0:	6178      	str	r0, [r7, #20]
  return ret;
 80041e2:	697b      	ldr	r3, [r7, #20]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd90      	pop	{r4, r7, pc}

080041ec <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80041f8:	f107 0208 	add.w	r2, r7, #8
 80041fc:	2301      	movs	r3, #1
 80041fe:	2110      	movs	r1, #16
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ffc3 	bl	800418c <lsm6dsl_read_reg>
 8004206:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10f      	bne.n	800422e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	b2da      	uxtb	r2, r3
 8004216:	7a3b      	ldrb	r3, [r7, #8]
 8004218:	f362 0383 	bfi	r3, r2, #2, #2
 800421c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800421e:	f107 0208 	add.w	r2, r7, #8
 8004222:	2301      	movs	r3, #1
 8004224:	2110      	movs	r1, #16
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ffc8 	bl	80041bc <lsm6dsl_write_reg>
 800422c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800422e:	68fb      	ldr	r3, [r7, #12]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004242:	f107 0208 	add.w	r2, r7, #8
 8004246:	2301      	movs	r3, #1
 8004248:	2110      	movs	r1, #16
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ff9e 	bl	800418c <lsm6dsl_read_reg>
 8004250:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004252:	7a3b      	ldrb	r3, [r7, #8]
 8004254:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b03      	cmp	r3, #3
 800425c:	d81a      	bhi.n	8004294 <lsm6dsl_xl_full_scale_get+0x5c>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <lsm6dsl_xl_full_scale_get+0x2c>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004275 	.word	0x08004275
 8004268:	0800427d 	.word	0x0800427d
 800426c:	08004285 	.word	0x08004285
 8004270:	0800428d 	.word	0x0800428d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
      break;
 800427a:	e00f      	b.n	800429c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
      break;
 8004282:	e00b      	b.n	800429c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2202      	movs	r2, #2
 8004288:	701a      	strb	r2, [r3, #0]
      break;
 800428a:	e007      	b.n	800429c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2203      	movs	r2, #3
 8004290:	701a      	strb	r2, [r3, #0]
      break;
 8004292:	e003      	b.n	800429c <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2204      	movs	r2, #4
 8004298:	701a      	strb	r2, [r3, #0]
      break;
 800429a:	bf00      	nop
  }

  return ret;
 800429c:	68fb      	ldr	r3, [r7, #12]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop

080042a8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80042b4:	f107 0208 	add.w	r2, r7, #8
 80042b8:	2301      	movs	r3, #1
 80042ba:	2110      	movs	r1, #16
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ff65 	bl	800418c <lsm6dsl_read_reg>
 80042c2:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	7a3b      	ldrb	r3, [r7, #8]
 80042d4:	f362 1307 	bfi	r3, r2, #4, #4
 80042d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80042da:	f107 0208 	add.w	r2, r7, #8
 80042de:	2301      	movs	r3, #1
 80042e0:	2110      	movs	r1, #16
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff ff6a 	bl	80041bc <lsm6dsl_write_reg>
 80042e8:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80042fe:	f107 0208 	add.w	r2, r7, #8
 8004302:	2301      	movs	r3, #1
 8004304:	2110      	movs	r1, #16
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ff40 	bl	800418c <lsm6dsl_read_reg>
 800430c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800430e:	7a3b      	ldrb	r3, [r7, #8]
 8004310:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b0b      	cmp	r3, #11
 8004318:	d84a      	bhi.n	80043b0 <lsm6dsl_xl_data_rate_get+0xbc>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <lsm6dsl_xl_data_rate_get+0x2c>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004351 	.word	0x08004351
 8004324:	08004359 	.word	0x08004359
 8004328:	08004361 	.word	0x08004361
 800432c:	08004369 	.word	0x08004369
 8004330:	08004371 	.word	0x08004371
 8004334:	08004379 	.word	0x08004379
 8004338:	08004381 	.word	0x08004381
 800433c:	08004389 	.word	0x08004389
 8004340:	08004391 	.word	0x08004391
 8004344:	08004399 	.word	0x08004399
 8004348:	080043a1 	.word	0x080043a1
 800434c:	080043a9 	.word	0x080043a9
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
      break;
 8004356:	e02f      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
      break;
 800435e:	e02b      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2202      	movs	r2, #2
 8004364:	701a      	strb	r2, [r3, #0]
      break;
 8004366:	e027      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2203      	movs	r2, #3
 800436c:	701a      	strb	r2, [r3, #0]
      break;
 800436e:	e023      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2204      	movs	r2, #4
 8004374:	701a      	strb	r2, [r3, #0]
      break;
 8004376:	e01f      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2205      	movs	r2, #5
 800437c:	701a      	strb	r2, [r3, #0]
      break;
 800437e:	e01b      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2206      	movs	r2, #6
 8004384:	701a      	strb	r2, [r3, #0]
      break;
 8004386:	e017      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2207      	movs	r2, #7
 800438c:	701a      	strb	r2, [r3, #0]
      break;
 800438e:	e013      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2208      	movs	r2, #8
 8004394:	701a      	strb	r2, [r3, #0]
      break;
 8004396:	e00f      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2209      	movs	r2, #9
 800439c:	701a      	strb	r2, [r3, #0]
      break;
 800439e:	e00b      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	220a      	movs	r2, #10
 80043a4:	701a      	strb	r2, [r3, #0]
      break;
 80043a6:	e007      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	220b      	movs	r2, #11
 80043ac:	701a      	strb	r2, [r3, #0]
      break;
 80043ae:	e003      	b.n	80043b8 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	220c      	movs	r2, #12
 80043b4:	701a      	strb	r2, [r3, #0]
      break;
 80043b6:	bf00      	nop
  }

  return ret;
 80043b8:	68fb      	ldr	r3, [r7, #12]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop

080043c4 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80043d0:	f107 0208 	add.w	r2, r7, #8
 80043d4:	2301      	movs	r3, #1
 80043d6:	2111      	movs	r1, #17
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fed7 	bl	800418c <lsm6dsl_read_reg>
 80043de:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	7a3b      	ldrb	r3, [r7, #8]
 80043f0:	f362 0343 	bfi	r3, r2, #1, #3
 80043f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80043f6:	f107 0208 	add.w	r2, r7, #8
 80043fa:	2301      	movs	r3, #1
 80043fc:	2111      	movs	r1, #17
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fedc 	bl	80041bc <lsm6dsl_write_reg>
 8004404:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004406:	68fb      	ldr	r3, [r7, #12]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800441a:	f107 0208 	add.w	r2, r7, #8
 800441e:	2301      	movs	r3, #1
 8004420:	2111      	movs	r1, #17
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff feb2 	bl	800418c <lsm6dsl_read_reg>
 8004428:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 800442a:	7a3b      	ldrb	r3, [r7, #8]
 800442c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b06      	cmp	r3, #6
 8004434:	d824      	bhi.n	8004480 <lsm6dsl_gy_full_scale_get+0x70>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <lsm6dsl_gy_full_scale_get+0x2c>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	08004459 	.word	0x08004459
 8004440:	08004461 	.word	0x08004461
 8004444:	08004469 	.word	0x08004469
 8004448:	08004481 	.word	0x08004481
 800444c:	08004471 	.word	0x08004471
 8004450:	08004481 	.word	0x08004481
 8004454:	08004479 	.word	0x08004479
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
      break;
 800445e:	e013      	b.n	8004488 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
      break;
 8004466:	e00f      	b.n	8004488 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2202      	movs	r2, #2
 800446c:	701a      	strb	r2, [r3, #0]
      break;
 800446e:	e00b      	b.n	8004488 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2204      	movs	r2, #4
 8004474:	701a      	strb	r2, [r3, #0]
      break;
 8004476:	e007      	b.n	8004488 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2206      	movs	r2, #6
 800447c:	701a      	strb	r2, [r3, #0]
      break;
 800447e:	e003      	b.n	8004488 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2207      	movs	r2, #7
 8004484:	701a      	strb	r2, [r3, #0]
      break;
 8004486:	bf00      	nop
  }

  return ret;
 8004488:	68fb      	ldr	r3, [r7, #12]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop

08004494 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80044a0:	f107 0208 	add.w	r2, r7, #8
 80044a4:	2301      	movs	r3, #1
 80044a6:	2111      	movs	r1, #17
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fe6f 	bl	800418c <lsm6dsl_read_reg>
 80044ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10f      	bne.n	80044d6 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	7a3b      	ldrb	r3, [r7, #8]
 80044c0:	f362 1307 	bfi	r3, r2, #4, #4
 80044c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80044c6:	f107 0208 	add.w	r2, r7, #8
 80044ca:	2301      	movs	r3, #1
 80044cc:	2111      	movs	r1, #17
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fe74 	bl	80041bc <lsm6dsl_write_reg>
 80044d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044d6:	68fb      	ldr	r3, [r7, #12]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80044ea:	f107 0208 	add.w	r2, r7, #8
 80044ee:	2301      	movs	r3, #1
 80044f0:	2111      	movs	r1, #17
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fe4a 	bl	800418c <lsm6dsl_read_reg>
 80044f8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 80044fa:	7a3b      	ldrb	r3, [r7, #8]
 80044fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b0a      	cmp	r3, #10
 8004504:	d844      	bhi.n	8004590 <lsm6dsl_gy_data_rate_get+0xb0>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <lsm6dsl_gy_data_rate_get+0x2c>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004539 	.word	0x08004539
 8004510:	08004541 	.word	0x08004541
 8004514:	08004549 	.word	0x08004549
 8004518:	08004551 	.word	0x08004551
 800451c:	08004559 	.word	0x08004559
 8004520:	08004561 	.word	0x08004561
 8004524:	08004569 	.word	0x08004569
 8004528:	08004571 	.word	0x08004571
 800452c:	08004579 	.word	0x08004579
 8004530:	08004581 	.word	0x08004581
 8004534:	08004589 	.word	0x08004589
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
      break;
 800453e:	e02b      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
      break;
 8004546:	e027      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2202      	movs	r2, #2
 800454c:	701a      	strb	r2, [r3, #0]
      break;
 800454e:	e023      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2203      	movs	r2, #3
 8004554:	701a      	strb	r2, [r3, #0]
      break;
 8004556:	e01f      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2204      	movs	r2, #4
 800455c:	701a      	strb	r2, [r3, #0]
      break;
 800455e:	e01b      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2205      	movs	r2, #5
 8004564:	701a      	strb	r2, [r3, #0]
      break;
 8004566:	e017      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2206      	movs	r2, #6
 800456c:	701a      	strb	r2, [r3, #0]
      break;
 800456e:	e013      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2207      	movs	r2, #7
 8004574:	701a      	strb	r2, [r3, #0]
      break;
 8004576:	e00f      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2208      	movs	r2, #8
 800457c:	701a      	strb	r2, [r3, #0]
      break;
 800457e:	e00b      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2209      	movs	r2, #9
 8004584:	701a      	strb	r2, [r3, #0]
      break;
 8004586:	e007      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	220a      	movs	r2, #10
 800458c:	701a      	strb	r2, [r3, #0]
      break;
 800458e:	e003      	b.n	8004598 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	220b      	movs	r2, #11
 8004594:	701a      	strb	r2, [r3, #0]
      break;
 8004596:	bf00      	nop
  }

  return ret;
 8004598:	68fb      	ldr	r3, [r7, #12]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop

080045a4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80045b0:	f107 0208 	add.w	r2, r7, #8
 80045b4:	2301      	movs	r3, #1
 80045b6:	2112      	movs	r1, #18
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fde7 	bl	800418c <lsm6dsl_read_reg>
 80045be:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10f      	bne.n	80045e6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	7a3b      	ldrb	r3, [r7, #8]
 80045d0:	f362 1386 	bfi	r3, r2, #6, #1
 80045d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80045d6:	f107 0208 	add.w	r2, r7, #8
 80045da:	2301      	movs	r3, #1
 80045dc:	2112      	movs	r1, #18
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fdec 	bl	80041bc <lsm6dsl_write_reg>
 80045e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80045fa:	f107 020c 	add.w	r2, r7, #12
 80045fe:	2306      	movs	r3, #6
 8004600:	2122      	movs	r1, #34	; 0x22
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fdc2 	bl	800418c <lsm6dsl_read_reg>
 8004608:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800460a:	7b7b      	ldrb	r3, [r7, #13]
 800460c:	b21a      	sxth	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004618:	b29b      	uxth	r3, r3
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	b29a      	uxth	r2, r3
 800461e:	7b3b      	ldrb	r3, [r7, #12]
 8004620:	b29b      	uxth	r3, r3
 8004622:	4413      	add	r3, r2
 8004624:	b29b      	uxth	r3, r3
 8004626:	b21a      	sxth	r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800462c:	7bfa      	ldrb	r2, [r7, #15]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	3302      	adds	r3, #2
 8004632:	b212      	sxth	r2, r2
 8004634:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	3302      	adds	r3, #2
 800463a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463e:	b29b      	uxth	r3, r3
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	b29a      	uxth	r2, r3
 8004644:	7bbb      	ldrb	r3, [r7, #14]
 8004646:	b29b      	uxth	r3, r3
 8004648:	4413      	add	r3, r2
 800464a:	b29a      	uxth	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3302      	adds	r3, #2
 8004650:	b212      	sxth	r2, r2
 8004652:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004654:	7c7a      	ldrb	r2, [r7, #17]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	3304      	adds	r3, #4
 800465a:	b212      	sxth	r2, r2
 800465c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	3304      	adds	r3, #4
 8004662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004666:	b29b      	uxth	r3, r3
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	b29a      	uxth	r2, r3
 800466c:	7c3b      	ldrb	r3, [r7, #16]
 800466e:	b29b      	uxth	r3, r3
 8004670:	4413      	add	r3, r2
 8004672:	b29a      	uxth	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	3304      	adds	r3, #4
 8004678:	b212      	sxth	r2, r2
 800467a:	801a      	strh	r2, [r3, #0]
  return ret;
 800467c:	697b      	ldr	r3, [r7, #20]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b086      	sub	sp, #24
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004690:	f107 020c 	add.w	r2, r7, #12
 8004694:	2306      	movs	r3, #6
 8004696:	2128      	movs	r1, #40	; 0x28
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff fd77 	bl	800418c <lsm6dsl_read_reg>
 800469e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80046a0:	7b7b      	ldrb	r3, [r7, #13]
 80046a2:	b21a      	sxth	r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	7b3b      	ldrb	r3, [r7, #12]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	4413      	add	r3, r2
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	b21a      	sxth	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80046c2:	7bfa      	ldrb	r2, [r7, #15]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	3302      	adds	r3, #2
 80046c8:	b212      	sxth	r2, r2
 80046ca:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	3302      	adds	r3, #2
 80046d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	b29a      	uxth	r2, r3
 80046da:	7bbb      	ldrb	r3, [r7, #14]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	4413      	add	r3, r2
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	3302      	adds	r3, #2
 80046e6:	b212      	sxth	r2, r2
 80046e8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80046ea:	7c7a      	ldrb	r2, [r7, #17]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	3304      	adds	r3, #4
 80046f0:	b212      	sxth	r2, r2
 80046f2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	3304      	adds	r3, #4
 80046f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	b29a      	uxth	r2, r3
 8004702:	7c3b      	ldrb	r3, [r7, #16]
 8004704:	b29b      	uxth	r3, r3
 8004706:	4413      	add	r3, r2
 8004708:	b29a      	uxth	r2, r3
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	3304      	adds	r3, #4
 800470e:	b212      	sxth	r2, r2
 8004710:	801a      	strh	r2, [r3, #0]
  return ret;
 8004712:	697b      	ldr	r3, [r7, #20]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8004726:	2301      	movs	r3, #1
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	210f      	movs	r1, #15
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fd2d 	bl	800418c <lsm6dsl_read_reg>
 8004732:	60f8      	str	r0, [r7, #12]
  return ret;
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	460b      	mov	r3, r1
 8004748:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800474a:	f107 0208 	add.w	r2, r7, #8
 800474e:	2301      	movs	r3, #1
 8004750:	2112      	movs	r1, #18
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fd1a 	bl	800418c <lsm6dsl_read_reg>
 8004758:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10f      	bne.n	8004780 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	7a3b      	ldrb	r3, [r7, #8]
 800476a:	f362 0382 	bfi	r3, r2, #2, #1
 800476e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004770:	f107 0208 	add.w	r2, r7, #8
 8004774:	2301      	movs	r3, #1
 8004776:	2112      	movs	r1, #18
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fd1f 	bl	80041bc <lsm6dsl_write_reg>
 800477e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004780:	68fb      	ldr	r3, [r7, #12]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	460b      	mov	r3, r1
 8004794:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004796:	f107 0208 	add.w	r2, r7, #8
 800479a:	2301      	movs	r3, #1
 800479c:	210a      	movs	r1, #10
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff fcf4 	bl	800418c <lsm6dsl_read_reg>
 80047a4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10f      	bne.n	80047cc <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	7a3b      	ldrb	r3, [r7, #8]
 80047b6:	f362 0302 	bfi	r3, r2, #0, #3
 80047ba:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80047bc:	f107 0208 	add.w	r2, r7, #8
 80047c0:	2301      	movs	r3, #1
 80047c2:	210a      	movs	r1, #10
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff fcf9 	bl	80041bc <lsm6dsl_write_reg>
 80047ca:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80047cc:	68fb      	ldr	r3, [r7, #12]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08e      	sub	sp, #56	; 0x38
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80047e6:	2301      	movs	r3, #1
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d06e      	beq.n	80048d2 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	f200 809d 	bhi.w	8004936 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <IKS01A2_MOTION_SENSOR_Init+0x32>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d032      	beq.n	800486e <IKS01A2_MOTION_SENSOR_Init+0x96>
 8004808:	e095      	b.n	8004936 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800480a:	6838      	ldr	r0, [r7, #0]
 800480c:	f000 fa32 	bl	8004c74 <LSM6DSL_0_Probe>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8004816:	f04f 33ff 	mov.w	r3, #4294967295
 800481a:	e0cc      	b.n	80049b6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800481c:	4a68      	ldr	r2, [pc, #416]	; (80049c0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4967      	ldr	r1, [pc, #412]	; (80049c4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800482e:	f107 010c 	add.w	r1, r7, #12
 8004832:	4610      	mov	r0, r2
 8004834:	4798      	blx	r3
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800483c:	f06f 0306 	mvn.w	r3, #6
 8004840:	e0b9      	b.n	80049b6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8004842:	7b3b      	ldrb	r3, [r7, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d103      	bne.n	8004850 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	f043 0302 	orr.w	r3, r3, #2
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004850:	7b7b      	ldrb	r3, [r7, #13]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d103      	bne.n	800485e <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800485e:	7bbb      	ldrb	r3, [r7, #14]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d16c      	bne.n	800493e <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800486c:	e067      	b.n	800493e <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800486e:	6838      	ldr	r0, [r7, #0]
 8004870:	f000 fabc 	bl	8004dec <LSM303AGR_ACC_0_Probe>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800487a:	f04f 33ff 	mov.w	r3, #4294967295
 800487e:	e09a      	b.n	80049b6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004880:	4a4f      	ldr	r2, [pc, #316]	; (80049c0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	494e      	ldr	r1, [pc, #312]	; (80049c4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004892:	f107 010c 	add.w	r1, r7, #12
 8004896:	4610      	mov	r0, r2
 8004898:	4798      	blx	r3
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80048a0:	f06f 0306 	mvn.w	r3, #6
 80048a4:	e087      	b.n	80049b6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80048a6:	7b3b      	ldrb	r3, [r7, #12]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d103      	bne.n	80048b4 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	f043 0302 	orr.w	r3, r3, #2
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80048b4:	7b7b      	ldrb	r3, [r7, #13]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d103      	bne.n	80048c2 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80048c2:	7bbb      	ldrb	r3, [r7, #14]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d13c      	bne.n	8004942 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80048d0:	e037      	b.n	8004942 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80048d2:	6838      	ldr	r0, [r7, #0]
 80048d4:	f000 fb2e 	bl	8004f34 <LSM303AGR_MAG_0_Probe>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	e068      	b.n	80049b6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80048e4:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4935      	ldr	r1, [pc, #212]	; (80049c4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80048f6:	f107 010c 	add.w	r1, r7, #12
 80048fa:	4610      	mov	r0, r2
 80048fc:	4798      	blx	r3
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004904:	f06f 0306 	mvn.w	r3, #6
 8004908:	e055      	b.n	80049b6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800490a:	7b3b      	ldrb	r3, [r7, #12]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d103      	bne.n	8004918 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	f043 0302 	orr.w	r3, r3, #2
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004918:	7b7b      	ldrb	r3, [r7, #13]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d103      	bne.n	8004926 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004926:	7bbb      	ldrb	r3, [r7, #14]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10c      	bne.n	8004946 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	f043 0304 	orr.w	r3, r3, #4
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004934:	e007      	b.n	8004946 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004936:	f06f 0301 	mvn.w	r3, #1
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800493c:	e004      	b.n	8004948 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8004946:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004950:	e031      	b.n	80049b6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8004952:	2300      	movs	r3, #0
 8004954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004956:	e02a      	b.n	80049ae <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	4013      	ands	r3, r2
 800495e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004960:	429a      	cmp	r2, r3
 8004962:	d11e      	bne.n	80049a2 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8004964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	4013      	ands	r3, r2
 800496a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496c:	429a      	cmp	r2, r3
 800496e:	d118      	bne.n	80049a2 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004970:	4a15      	ldr	r2, [pc, #84]	; (80049c8 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004978:	4814      	ldr	r0, [pc, #80]	; (80049cc <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	4413      	add	r3, r2
 8004982:	440b      	add	r3, r1
 8004984:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	490e      	ldr	r1, [pc, #56]	; (80049c4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004992:	4610      	mov	r0, r2
 8004994:	4798      	blx	r3
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800499c:	f06f 0304 	mvn.w	r3, #4
 80049a0:	e009      	b.n	80049b6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	3301      	adds	r3, #1
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d9d1      	bls.n	8004958 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3738      	adds	r7, #56	; 0x38
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000488 	.word	0x20000488
 80049c4:	200007a0 	.word	0x200007a0
 80049c8:	20000248 	.word	0x20000248
 80049cc:	20000464 	.word	0x20000464

080049d0 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d903      	bls.n	80049e8 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80049e0:	f06f 0301 	mvn.w	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e028      	b.n	8004a3a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80049e8:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4013      	ands	r3, r2
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d11c      	bne.n	8004a34 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a02:	4812      	ldr	r0, [pc, #72]	; (8004a4c <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	490e      	ldr	r1, [pc, #56]	; (8004a50 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4798      	blx	r3
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a26:	f06f 0304 	mvn.w	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e005      	b.n	8004a3a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e002      	b.n	8004a3a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004a34:	f06f 0301 	mvn.w	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000494 	.word	0x20000494
 8004a48:	20000248 	.word	0x20000248
 8004a4c:	20000464 	.word	0x20000464
 8004a50:	200007a0 	.word	0x200007a0

08004a54 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d903      	bls.n	8004a6e <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004a66:	f06f 0301 	mvn.w	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	e029      	b.n	8004ac2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d11d      	bne.n	8004abc <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a88:	4812      	ldr	r0, [pc, #72]	; (8004ad4 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4413      	add	r3, r2
 8004a92:	440b      	add	r3, r1
 8004a94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	490f      	ldr	r1, [pc, #60]	; (8004ad8 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4798      	blx	r3
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004aae:	f06f 0304 	mvn.w	r3, #4
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e005      	b.n	8004ac2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	e002      	b.n	8004ac2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004abc:	f06f 0301 	mvn.w	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004ac2:	697b      	ldr	r3, [r7, #20]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000494 	.word	0x20000494
 8004ad0:	20000248 	.word	0x20000248
 8004ad4:	20000464 	.word	0x20000464
 8004ad8:	200007a0 	.word	0x200007a0

08004adc <IKS01A2_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d903      	bls.n	8004af6 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004aee:	f06f 0301 	mvn.w	r3, #1
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e029      	b.n	8004b4a <IKS01A2_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004af6:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x78>)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d11d      	bne.n	8004b44 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance],
 8004b08:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x7c>)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b10:	4812      	ldr	r0, [pc, #72]	; (8004b5c <IKS01A2_MOTION_SENSOR_GetSensitivity+0x80>)
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4613      	mov	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	4413      	add	r3, r2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	490f      	ldr	r1, [pc, #60]	; (8004b60 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x84>)
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4798      	blx	r3
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <IKS01A2_MOTION_SENSOR_GetSensitivity+0x62>
          Sensitivity) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b36:	f06f 0304 	mvn.w	r3, #4
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e005      	b.n	8004b4a <IKS01A2_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e002      	b.n	8004b4a <IKS01A2_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004b44:	f06f 0301 	mvn.w	r3, #1
 8004b48:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004b4a:	697b      	ldr	r3, [r7, #20]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000494 	.word	0x20000494
 8004b58:	20000248 	.word	0x20000248
 8004b5c:	20000464 	.word	0x20000464
 8004b60:	200007a0 	.word	0x200007a0

08004b64 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr pointer to Output Data Rate read value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d903      	bls.n	8004b7e <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004b76:	f06f 0301 	mvn.w	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e029      	b.n	8004bd2 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d11d      	bne.n	8004bcc <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004b90:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b98:	4812      	ldr	r0, [pc, #72]	; (8004be4 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x80>)
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	490f      	ldr	r1, [pc, #60]	; (8004be8 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4798      	blx	r3
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004bbe:	f06f 0304 	mvn.w	r3, #4
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e005      	b.n	8004bd2 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	e002      	b.n	8004bd2 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004bcc:	f06f 0301 	mvn.w	r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004bd2:	697b      	ldr	r3, [r7, #20]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000494 	.word	0x20000494
 8004be0:	20000248 	.word	0x20000248
 8004be4:	20000464 	.word	0x20000464
 8004be8:	200007a0 	.word	0x200007a0

08004bec <IKS01A2_MOTION_SENSOR_GetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale pointer to Fullscale read value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d903      	bls.n	8004c06 <IKS01A2_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004bfe:	f06f 0301 	mvn.w	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e029      	b.n	8004c5a <IKS01A2_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004c06:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <IKS01A2_MOTION_SENSOR_GetFullScale+0x78>)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4013      	ands	r3, r2
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d11d      	bne.n	8004c54 <IKS01A2_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <IKS01A2_MOTION_SENSOR_GetFullScale+0x7c>)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c20:	4812      	ldr	r0, [pc, #72]	; (8004c6c <IKS01A2_MOTION_SENSOR_GetFullScale+0x80>)
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4613      	mov	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	490f      	ldr	r1, [pc, #60]	; (8004c70 <IKS01A2_MOTION_SENSOR_GetFullScale+0x84>)
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4798      	blx	r3
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <IKS01A2_MOTION_SENSOR_GetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c46:	f06f 0304 	mvn.w	r3, #4
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e005      	b.n	8004c5a <IKS01A2_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e002      	b.n	8004c5a <IKS01A2_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004c54:	f06f 0301 	mvn.w	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004c5a:	697b      	ldr	r3, [r7, #20]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000494 	.word	0x20000494
 8004c68:	20000248 	.word	0x20000248
 8004c6c:	20000464 	.word	0x20000464
 8004c70:	200007a0 	.word	0x200007a0

08004c74 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b092      	sub	sp, #72	; 0x48
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8004c80:	2300      	movs	r3, #0
 8004c82:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8004c84:	23d7      	movs	r3, #215	; 0xd7
 8004c86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004c8a:	4b4a      	ldr	r3, [pc, #296]	; (8004db4 <LSM6DSL_0_Probe+0x140>)
 8004c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004c8e:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <LSM6DSL_0_Probe+0x144>)
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004c92:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <LSM6DSL_0_Probe+0x148>)
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004c96:	4b4a      	ldr	r3, [pc, #296]	; (8004dc0 <LSM6DSL_0_Probe+0x14c>)
 8004c98:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004c9a:	4b4a      	ldr	r3, [pc, #296]	; (8004dc4 <LSM6DSL_0_Probe+0x150>)
 8004c9c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8004c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4848      	ldr	r0, [pc, #288]	; (8004dc8 <LSM6DSL_0_Probe+0x154>)
 8004ca6:	f7fe fa81 	bl	80031ac <LSM6DSL_RegisterBusIO>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004cb0:	f06f 0306 	mvn.w	r3, #6
 8004cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb6:	e077      	b.n	8004da8 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8004cb8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4842      	ldr	r0, [pc, #264]	; (8004dc8 <LSM6DSL_0_Probe+0x154>)
 8004cc0:	f7fe fb6a 	bl	8003398 <LSM6DSL_ReadID>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004cca:	f06f 0306 	mvn.w	r3, #6
 8004cce:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd0:	e06a      	b.n	8004da8 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8004cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd6:	2b6a      	cmp	r3, #106	; 0x6a
 8004cd8:	d003      	beq.n	8004ce2 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004cda:	f06f 0306 	mvn.w	r3, #6
 8004cde:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce0:	e062      	b.n	8004da8 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8004ce2:	f107 0308 	add.w	r3, r7, #8
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4837      	ldr	r0, [pc, #220]	; (8004dc8 <LSM6DSL_0_Probe+0x154>)
 8004cea:	f7fe fb6b 	bl	80033c4 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004cee:	7a7b      	ldrb	r3, [r7, #9]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	7a3b      	ldrb	r3, [r7, #8]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	7abb      	ldrb	r3, [r7, #10]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	4a33      	ldr	r2, [pc, #204]	; (8004dcc <LSM6DSL_0_Probe+0x158>)
 8004d00:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8004d02:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <LSM6DSL_0_Probe+0x15c>)
 8004d04:	4a30      	ldr	r2, [pc, #192]	; (8004dc8 <LSM6DSL_0_Probe+0x154>)
 8004d06:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8004d08:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <LSM6DSL_0_Probe+0x160>)
 8004d0a:	4a33      	ldr	r2, [pc, #204]	; (8004dd8 <LSM6DSL_0_Probe+0x164>)
 8004d0c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8004d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11d      	bne.n	8004d50 <LSM6DSL_0_Probe+0xdc>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d018      	beq.n	8004d50 <LSM6DSL_0_Probe+0xdc>
 8004d1e:	7a7b      	ldrb	r3, [r7, #9]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d115      	bne.n	8004d50 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8004d24:	4b2d      	ldr	r3, [pc, #180]	; (8004ddc <LSM6DSL_0_Probe+0x168>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a2d      	ldr	r2, [pc, #180]	; (8004de0 <LSM6DSL_0_Probe+0x16c>)
 8004d2a:	492e      	ldr	r1, [pc, #184]	; (8004de4 <LSM6DSL_0_Probe+0x170>)
 8004d2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8004d30:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <LSM6DSL_0_Probe+0x160>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <LSM6DSL_0_Probe+0x15c>)
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4798      	blx	r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d44:	f06f 0304 	mvn.w	r3, #4
 8004d48:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4a:	e001      	b.n	8004d50 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11d      	bne.n	8004d92 <LSM6DSL_0_Probe+0x11e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d018      	beq.n	8004d92 <LSM6DSL_0_Probe+0x11e>
 8004d60:	7a3b      	ldrb	r3, [r7, #8]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d115      	bne.n	8004d92 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <LSM6DSL_0_Probe+0x168>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <LSM6DSL_0_Probe+0x16c>)
 8004d6c:	491e      	ldr	r1, [pc, #120]	; (8004de8 <LSM6DSL_0_Probe+0x174>)
 8004d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8004d72:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <LSM6DSL_0_Probe+0x160>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <LSM6DSL_0_Probe+0x15c>)
 8004d7a:	6812      	ldr	r2, [r2, #0]
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4798      	blx	r3
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d86:	f06f 0304 	mvn.w	r3, #4
 8004d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8c:	e001      	b.n	8004d92 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8004d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d107      	bne.n	8004da8 <LSM6DSL_0_Probe+0x134>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004da2:	f06f 0304 	mvn.w	r3, #4
 8004da6:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8004da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3748      	adds	r7, #72	; 0x48
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	08001575 	.word	0x08001575
 8004db8:	080015d9 	.word	0x080015d9
 8004dbc:	0800168d 	.word	0x0800168d
 8004dc0:	08001629 	.word	0x08001629
 8004dc4:	080016f1 	.word	0x080016f1
 8004dc8:	200004a0 	.word	0x200004a0
 8004dcc:	20000494 	.word	0x20000494
 8004dd0:	200007a0 	.word	0x200007a0
 8004dd4:	20000488 	.word	0x20000488
 8004dd8:	200001f0 	.word	0x200001f0
 8004ddc:	20000248 	.word	0x20000248
 8004de0:	20000464 	.word	0x20000464
 8004de4:	20000224 	.word	0x20000224
 8004de8:	20000200 	.word	0x20000200

08004dec <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b092      	sub	sp, #72	; 0x48
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8004df8:	2300      	movs	r3, #0
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8004dfc:	2333      	movs	r3, #51	; 0x33
 8004dfe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004e02:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <LSM303AGR_ACC_0_Probe+0x114>)
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004e06:	4b3f      	ldr	r3, [pc, #252]	; (8004f04 <LSM303AGR_ACC_0_Probe+0x118>)
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <LSM303AGR_ACC_0_Probe+0x11c>)
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004e0e:	4b3f      	ldr	r3, [pc, #252]	; (8004f0c <LSM303AGR_ACC_0_Probe+0x120>)
 8004e10:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004e12:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <LSM303AGR_ACC_0_Probe+0x124>)
 8004e14:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8004e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	483d      	ldr	r0, [pc, #244]	; (8004f14 <LSM303AGR_ACC_0_Probe+0x128>)
 8004e1e:	f7fc fe0f 	bl	8001a40 <LSM303AGR_ACC_RegisterBusIO>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e28:	f06f 0306 	mvn.w	r3, #6
 8004e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2e:	e062      	b.n	8004ef6 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8004e30:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004e34:	4619      	mov	r1, r3
 8004e36:	4837      	ldr	r0, [pc, #220]	; (8004f14 <LSM303AGR_ACC_0_Probe+0x128>)
 8004e38:	f7fc fec3 	bl	8001bc2 <LSM303AGR_ACC_ReadID>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e42:	f06f 0306 	mvn.w	r3, #6
 8004e46:	647b      	str	r3, [r7, #68]	; 0x44
 8004e48:	e055      	b.n	8004ef6 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8004e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e4e:	2b33      	cmp	r3, #51	; 0x33
 8004e50:	d003      	beq.n	8004e5a <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e52:	f06f 0306 	mvn.w	r3, #6
 8004e56:	647b      	str	r3, [r7, #68]	; 0x44
 8004e58:	e04d      	b.n	8004ef6 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	4619      	mov	r1, r3
 8004e60:	482c      	ldr	r0, [pc, #176]	; (8004f14 <LSM303AGR_ACC_0_Probe+0x128>)
 8004e62:	f7fc fec5 	bl	8001bf0 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004e66:	7a7b      	ldrb	r3, [r7, #9]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	7a3b      	ldrb	r3, [r7, #8]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8004e70:	7abb      	ldrb	r3, [r7, #10]
 8004e72:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004e74:	4313      	orrs	r3, r2
 8004e76:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <LSM303AGR_ACC_0_Probe+0x12c>)
 8004e78:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8004e7a:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <LSM303AGR_ACC_0_Probe+0x130>)
 8004e7c:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <LSM303AGR_ACC_0_Probe+0x128>)
 8004e7e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8004e80:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <LSM303AGR_ACC_0_Probe+0x134>)
 8004e82:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <LSM303AGR_ACC_0_Probe+0x138>)
 8004e84:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11e      	bne.n	8004eca <LSM303AGR_ACC_0_Probe+0xde>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d019      	beq.n	8004eca <LSM303AGR_ACC_0_Probe+0xde>
 8004e96:	7a3b      	ldrb	r3, [r7, #8]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d116      	bne.n	8004eca <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004e9c:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <LSM303AGR_ACC_0_Probe+0x13c>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <LSM303AGR_ACC_0_Probe+0x140>)
 8004ea2:	3303      	adds	r3, #3
 8004ea4:	4922      	ldr	r1, [pc, #136]	; (8004f30 <LSM303AGR_ACC_0_Probe+0x144>)
 8004ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <LSM303AGR_ACC_0_Probe+0x134>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1a      	ldr	r2, [pc, #104]	; (8004f1c <LSM303AGR_ACC_0_Probe+0x130>)
 8004eb2:	6852      	ldr	r2, [r2, #4]
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4798      	blx	r3
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ebe:	f06f 0304 	mvn.w	r3, #4
 8004ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ec4:	e001      	b.n	8004eca <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8004eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d107      	bne.n	8004ee0 <LSM303AGR_ACC_0_Probe+0xf4>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004eda:	f06f 0304 	mvn.w	r3, #4
 8004ede:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8004ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d107      	bne.n	8004ef6 <LSM303AGR_ACC_0_Probe+0x10a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ef0:	f06f 0304 	mvn.w	r3, #4
 8004ef4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8004ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3748      	adds	r7, #72	; 0x48
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	08001575 	.word	0x08001575
 8004f04:	080015d9 	.word	0x080015d9
 8004f08:	0800168d 	.word	0x0800168d
 8004f0c:	08001629 	.word	0x08001629
 8004f10:	080016f1 	.word	0x080016f1
 8004f14:	200004d0 	.word	0x200004d0
 8004f18:	20000494 	.word	0x20000494
 8004f1c:	200007a0 	.word	0x200007a0
 8004f20:	20000488 	.word	0x20000488
 8004f24:	20000188 	.word	0x20000188
 8004f28:	20000248 	.word	0x20000248
 8004f2c:	20000464 	.word	0x20000464
 8004f30:	20000198 	.word	0x20000198

08004f34 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b092      	sub	sp, #72	; 0x48
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8004f40:	2300      	movs	r3, #0
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8004f44:	233d      	movs	r3, #61	; 0x3d
 8004f46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004f4a:	4b3f      	ldr	r3, [pc, #252]	; (8005048 <LSM303AGR_MAG_0_Probe+0x114>)
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004f4e:	4b3f      	ldr	r3, [pc, #252]	; (800504c <LSM303AGR_MAG_0_Probe+0x118>)
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004f52:	4b3f      	ldr	r3, [pc, #252]	; (8005050 <LSM303AGR_MAG_0_Probe+0x11c>)
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004f56:	4b3f      	ldr	r3, [pc, #252]	; (8005054 <LSM303AGR_MAG_0_Probe+0x120>)
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004f5a:	4b3f      	ldr	r3, [pc, #252]	; (8005058 <LSM303AGR_MAG_0_Probe+0x124>)
 8004f5c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8004f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f62:	4619      	mov	r1, r3
 8004f64:	483d      	ldr	r0, [pc, #244]	; (800505c <LSM303AGR_MAG_0_Probe+0x128>)
 8004f66:	f7fd f931 	bl	80021cc <LSM303AGR_MAG_RegisterBusIO>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004f70:	f06f 0306 	mvn.w	r3, #6
 8004f74:	647b      	str	r3, [r7, #68]	; 0x44
 8004f76:	e062      	b.n	800503e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8004f78:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4837      	ldr	r0, [pc, #220]	; (800505c <LSM303AGR_MAG_0_Probe+0x128>)
 8004f80:	f7fd f9db 	bl	800233a <LSM303AGR_MAG_ReadID>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004f8a:	f06f 0306 	mvn.w	r3, #6
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f90:	e055      	b.n	800503e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8004f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d003      	beq.n	8004fa2 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004f9a:	f06f 0306 	mvn.w	r3, #6
 8004f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa0:	e04d      	b.n	800503e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8004fa2:	f107 0308 	add.w	r3, r7, #8
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	482c      	ldr	r0, [pc, #176]	; (800505c <LSM303AGR_MAG_0_Probe+0x128>)
 8004faa:	f7fd f9dd 	bl	8002368 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004fae:	7a7b      	ldrb	r3, [r7, #9]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	7a3b      	ldrb	r3, [r7, #8]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8004fb8:	7abb      	ldrb	r3, [r7, #10]
 8004fba:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	4a28      	ldr	r2, [pc, #160]	; (8005060 <LSM303AGR_MAG_0_Probe+0x12c>)
 8004fc0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8004fc2:	4b28      	ldr	r3, [pc, #160]	; (8005064 <LSM303AGR_MAG_0_Probe+0x130>)
 8004fc4:	4a25      	ldr	r2, [pc, #148]	; (800505c <LSM303AGR_MAG_0_Probe+0x128>)
 8004fc6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8004fc8:	4b27      	ldr	r3, [pc, #156]	; (8005068 <LSM303AGR_MAG_0_Probe+0x134>)
 8004fca:	4a28      	ldr	r2, [pc, #160]	; (800506c <LSM303AGR_MAG_0_Probe+0x138>)
 8004fcc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8004fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11e      	bne.n	8005012 <LSM303AGR_MAG_0_Probe+0xde>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d019      	beq.n	8005012 <LSM303AGR_MAG_0_Probe+0xde>
 8004fde:	7abb      	ldrb	r3, [r7, #10]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d116      	bne.n	8005012 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004fe4:	4b22      	ldr	r3, [pc, #136]	; (8005070 <LSM303AGR_MAG_0_Probe+0x13c>)
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	4a22      	ldr	r2, [pc, #136]	; (8005074 <LSM303AGR_MAG_0_Probe+0x140>)
 8004fea:	3306      	adds	r3, #6
 8004fec:	4922      	ldr	r1, [pc, #136]	; (8005078 <LSM303AGR_MAG_0_Probe+0x144>)
 8004fee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8004ff2:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <LSM303AGR_MAG_0_Probe+0x134>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <LSM303AGR_MAG_0_Probe+0x130>)
 8004ffa:	6892      	ldr	r2, [r2, #8]
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4798      	blx	r3
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005006:	f06f 0304 	mvn.w	r3, #4
 800500a:	647b      	str	r3, [r7, #68]	; 0x44
 800500c:	e001      	b.n	8005012 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800500e:	2300      	movs	r3, #0
 8005010:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005014:	2b00      	cmp	r3, #0
 8005016:	d107      	bne.n	8005028 <LSM303AGR_MAG_0_Probe+0xf4>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005022:	f06f 0304 	mvn.w	r3, #4
 8005026:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502a:	2b00      	cmp	r3, #0
 800502c:	d107      	bne.n	800503e <LSM303AGR_MAG_0_Probe+0x10a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005038:	f06f 0304 	mvn.w	r3, #4
 800503c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800503e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005040:	4618      	mov	r0, r3
 8005042:	3748      	adds	r7, #72	; 0x48
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	08001575 	.word	0x08001575
 800504c:	080015d9 	.word	0x080015d9
 8005050:	0800168d 	.word	0x0800168d
 8005054:	08001629 	.word	0x08001629
 8005058:	080016f1 	.word	0x080016f1
 800505c:	200004fc 	.word	0x200004fc
 8005060:	20000494 	.word	0x20000494
 8005064:	200007a0 	.word	0x200007a0
 8005068:	20000488 	.word	0x20000488
 800506c:	200001bc 	.word	0x200001bc
 8005070:	20000248 	.word	0x20000248
 8005074:	20000464 	.word	0x20000464
 8005078:	200001cc 	.word	0x200001cc

0800507c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005080:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <HAL_Init+0x40>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <HAL_Init+0x40>)
 8005086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800508a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_Init+0x40>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <HAL_Init+0x40>)
 8005092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005098:	4b08      	ldr	r3, [pc, #32]	; (80050bc <HAL_Init+0x40>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a07      	ldr	r2, [pc, #28]	; (80050bc <HAL_Init+0x40>)
 800509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050a4:	2003      	movs	r0, #3
 80050a6:	f000 f92b 	bl	8005300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050aa:	2000      	movs	r0, #0
 80050ac:	f000 f808 	bl	80050c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050b0:	f7fc f96a 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40023c00 	.word	0x40023c00

080050c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050c8:	4b12      	ldr	r3, [pc, #72]	; (8005114 <HAL_InitTick+0x54>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <HAL_InitTick+0x58>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f943 	bl	800536a <HAL_SYSTICK_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e00e      	b.n	800510c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b0f      	cmp	r3, #15
 80050f2:	d80a      	bhi.n	800510a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050f4:	2200      	movs	r2, #0
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	f000 f90b 	bl	8005316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005100:	4a06      	ldr	r2, [pc, #24]	; (800511c <HAL_InitTick+0x5c>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e000      	b.n	800510c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20000184 	.word	0x20000184
 8005118:	20000260 	.word	0x20000260
 800511c:	2000025c 	.word	0x2000025c

08005120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_IncTick+0x20>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_IncTick+0x24>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4413      	add	r3, r2
 8005130:	4a04      	ldr	r2, [pc, #16]	; (8005144 <HAL_IncTick+0x24>)
 8005132:	6013      	str	r3, [r2, #0]
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000260 	.word	0x20000260
 8005144:	200007ac 	.word	0x200007ac

08005148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return uwTick;
 800514c:	4b03      	ldr	r3, [pc, #12]	; (800515c <HAL_GetTick+0x14>)
 800514e:	681b      	ldr	r3, [r3, #0]
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	200007ac 	.word	0x200007ac

08005160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800517c:	4013      	ands	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800518c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005192:	4a04      	ldr	r2, [pc, #16]	; (80051a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	60d3      	str	r3, [r2, #12]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <__NVIC_GetPriorityGrouping+0x18>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	0a1b      	lsrs	r3, r3, #8
 80051b2:	f003 0307 	and.w	r3, r3, #7
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	e000ed00 	.word	0xe000ed00

080051c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	db0b      	blt.n	80051ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	f003 021f 	and.w	r2, r3, #31
 80051dc:	4907      	ldr	r1, [pc, #28]	; (80051fc <__NVIC_EnableIRQ+0x38>)
 80051de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2001      	movs	r0, #1
 80051e6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	e000e100 	.word	0xe000e100

08005200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	6039      	str	r1, [r7, #0]
 800520a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800520c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005210:	2b00      	cmp	r3, #0
 8005212:	db0a      	blt.n	800522a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	490c      	ldr	r1, [pc, #48]	; (800524c <__NVIC_SetPriority+0x4c>)
 800521a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521e:	0112      	lsls	r2, r2, #4
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	440b      	add	r3, r1
 8005224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005228:	e00a      	b.n	8005240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	b2da      	uxtb	r2, r3
 800522e:	4908      	ldr	r1, [pc, #32]	; (8005250 <__NVIC_SetPriority+0x50>)
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	3b04      	subs	r3, #4
 8005238:	0112      	lsls	r2, r2, #4
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	440b      	add	r3, r1
 800523e:	761a      	strb	r2, [r3, #24]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000e100 	.word	0xe000e100
 8005250:	e000ed00 	.word	0xe000ed00

08005254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f1c3 0307 	rsb	r3, r3, #7
 800526e:	2b04      	cmp	r3, #4
 8005270:	bf28      	it	cs
 8005272:	2304      	movcs	r3, #4
 8005274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	3304      	adds	r3, #4
 800527a:	2b06      	cmp	r3, #6
 800527c:	d902      	bls.n	8005284 <NVIC_EncodePriority+0x30>
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3b03      	subs	r3, #3
 8005282:	e000      	b.n	8005286 <NVIC_EncodePriority+0x32>
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005288:	f04f 32ff 	mov.w	r2, #4294967295
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43da      	mvns	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	401a      	ands	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800529c:	f04f 31ff 	mov.w	r1, #4294967295
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	fa01 f303 	lsl.w	r3, r1, r3
 80052a6:	43d9      	mvns	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052ac:	4313      	orrs	r3, r2
         );
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052cc:	d301      	bcc.n	80052d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052ce:	2301      	movs	r3, #1
 80052d0:	e00f      	b.n	80052f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052d2:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <SysTick_Config+0x40>)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052da:	210f      	movs	r1, #15
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	f7ff ff8e 	bl	8005200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <SysTick_Config+0x40>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ea:	4b04      	ldr	r3, [pc, #16]	; (80052fc <SysTick_Config+0x40>)
 80052ec:	2207      	movs	r2, #7
 80052ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	e000e010 	.word	0xe000e010

08005300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ff29 	bl	8005160 <__NVIC_SetPriorityGrouping>
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005316:	b580      	push	{r7, lr}
 8005318:	b086      	sub	sp, #24
 800531a:	af00      	add	r7, sp, #0
 800531c:	4603      	mov	r3, r0
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005328:	f7ff ff3e 	bl	80051a8 <__NVIC_GetPriorityGrouping>
 800532c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	f7ff ff8e 	bl	8005254 <NVIC_EncodePriority>
 8005338:	4602      	mov	r2, r0
 800533a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff ff5d 	bl	8005200 <__NVIC_SetPriority>
}
 8005346:	bf00      	nop
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	4603      	mov	r3, r0
 8005356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff ff31 	bl	80051c4 <__NVIC_EnableIRQ>
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff ffa2 	bl	80052bc <SysTick_Config>
 8005378:	4603      	mov	r3, r0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d004      	beq.n	80053a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2280      	movs	r2, #128	; 0x80
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e00c      	b.n	80053ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2205      	movs	r2, #5
 80053a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b089      	sub	sp, #36	; 0x24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053da:	2300      	movs	r3, #0
 80053dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	e159      	b.n	8005698 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053e4:	2201      	movs	r2, #1
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4013      	ands	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	f040 8148 	bne.w	8005692 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d00b      	beq.n	8005422 <HAL_GPIO_Init+0x5a>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d007      	beq.n	8005422 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005416:	2b11      	cmp	r3, #17
 8005418:	d003      	beq.n	8005422 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b12      	cmp	r3, #18
 8005420:	d130      	bne.n	8005484 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	2203      	movs	r2, #3
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43db      	mvns	r3, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	4013      	ands	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005458:	2201      	movs	r2, #1
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 0201 	and.w	r2, r3, #1
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	2203      	movs	r2, #3
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	4013      	ands	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d003      	beq.n	80054c4 <HAL_GPIO_Init+0xfc>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b12      	cmp	r3, #18
 80054c2:	d123      	bne.n	800550c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	08da      	lsrs	r2, r3, #3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3208      	adds	r2, #8
 80054cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	220f      	movs	r2, #15
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	08da      	lsrs	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3208      	adds	r2, #8
 8005506:	69b9      	ldr	r1, [r7, #24]
 8005508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	2203      	movs	r2, #3
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f003 0203 	and.w	r2, r3, #3
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80a2 	beq.w	8005692 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	4b57      	ldr	r3, [pc, #348]	; (80056b0 <HAL_GPIO_Init+0x2e8>)
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	4a56      	ldr	r2, [pc, #344]	; (80056b0 <HAL_GPIO_Init+0x2e8>)
 8005558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800555c:	6453      	str	r3, [r2, #68]	; 0x44
 800555e:	4b54      	ldr	r3, [pc, #336]	; (80056b0 <HAL_GPIO_Init+0x2e8>)
 8005560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800556a:	4a52      	ldr	r2, [pc, #328]	; (80056b4 <HAL_GPIO_Init+0x2ec>)
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	089b      	lsrs	r3, r3, #2
 8005570:	3302      	adds	r3, #2
 8005572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	220f      	movs	r2, #15
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	43db      	mvns	r3, r3
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	4013      	ands	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a49      	ldr	r2, [pc, #292]	; (80056b8 <HAL_GPIO_Init+0x2f0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d019      	beq.n	80055ca <HAL_GPIO_Init+0x202>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a48      	ldr	r2, [pc, #288]	; (80056bc <HAL_GPIO_Init+0x2f4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_GPIO_Init+0x1fe>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a47      	ldr	r2, [pc, #284]	; (80056c0 <HAL_GPIO_Init+0x2f8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00d      	beq.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a46      	ldr	r2, [pc, #280]	; (80056c4 <HAL_GPIO_Init+0x2fc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d007      	beq.n	80055be <HAL_GPIO_Init+0x1f6>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a45      	ldr	r2, [pc, #276]	; (80056c8 <HAL_GPIO_Init+0x300>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d101      	bne.n	80055ba <HAL_GPIO_Init+0x1f2>
 80055b6:	2304      	movs	r3, #4
 80055b8:	e008      	b.n	80055cc <HAL_GPIO_Init+0x204>
 80055ba:	2307      	movs	r3, #7
 80055bc:	e006      	b.n	80055cc <HAL_GPIO_Init+0x204>
 80055be:	2303      	movs	r3, #3
 80055c0:	e004      	b.n	80055cc <HAL_GPIO_Init+0x204>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e002      	b.n	80055cc <HAL_GPIO_Init+0x204>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <HAL_GPIO_Init+0x204>
 80055ca:	2300      	movs	r3, #0
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	f002 0203 	and.w	r2, r2, #3
 80055d2:	0092      	lsls	r2, r2, #2
 80055d4:	4093      	lsls	r3, r2
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055dc:	4935      	ldr	r1, [pc, #212]	; (80056b4 <HAL_GPIO_Init+0x2ec>)
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	089b      	lsrs	r3, r3, #2
 80055e2:	3302      	adds	r3, #2
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055ea:	4b38      	ldr	r3, [pc, #224]	; (80056cc <HAL_GPIO_Init+0x304>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	43db      	mvns	r3, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	4013      	ands	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800560e:	4a2f      	ldr	r2, [pc, #188]	; (80056cc <HAL_GPIO_Init+0x304>)
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005614:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <HAL_GPIO_Init+0x304>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	43db      	mvns	r3, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4013      	ands	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005638:	4a24      	ldr	r2, [pc, #144]	; (80056cc <HAL_GPIO_Init+0x304>)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800563e:	4b23      	ldr	r3, [pc, #140]	; (80056cc <HAL_GPIO_Init+0x304>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	43db      	mvns	r3, r3
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	4013      	ands	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005662:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <HAL_GPIO_Init+0x304>)
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005668:	4b18      	ldr	r3, [pc, #96]	; (80056cc <HAL_GPIO_Init+0x304>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	43db      	mvns	r3, r3
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4013      	ands	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800568c:	4a0f      	ldr	r2, [pc, #60]	; (80056cc <HAL_GPIO_Init+0x304>)
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3301      	adds	r3, #1
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2b0f      	cmp	r3, #15
 800569c:	f67f aea2 	bls.w	80053e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	3724      	adds	r7, #36	; 0x24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40023800 	.word	0x40023800
 80056b4:	40013800 	.word	0x40013800
 80056b8:	40020000 	.word	0x40020000
 80056bc:	40020400 	.word	0x40020400
 80056c0:	40020800 	.word	0x40020800
 80056c4:	40020c00 	.word	0x40020c00
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40013c00 	.word	0x40013c00

080056d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	e0bb      	b.n	8005864 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056ec:	2201      	movs	r2, #1
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4013      	ands	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	429a      	cmp	r2, r3
 8005704:	f040 80ab 	bne.w	800585e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005708:	4a5c      	ldr	r2, [pc, #368]	; (800587c <HAL_GPIO_DeInit+0x1ac>)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	3302      	adds	r3, #2
 8005710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005714:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	220f      	movs	r2, #15
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	4013      	ands	r3, r2
 8005728:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a54      	ldr	r2, [pc, #336]	; (8005880 <HAL_GPIO_DeInit+0x1b0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d019      	beq.n	8005766 <HAL_GPIO_DeInit+0x96>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a53      	ldr	r2, [pc, #332]	; (8005884 <HAL_GPIO_DeInit+0x1b4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_GPIO_DeInit+0x92>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a52      	ldr	r2, [pc, #328]	; (8005888 <HAL_GPIO_DeInit+0x1b8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00d      	beq.n	800575e <HAL_GPIO_DeInit+0x8e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a51      	ldr	r2, [pc, #324]	; (800588c <HAL_GPIO_DeInit+0x1bc>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <HAL_GPIO_DeInit+0x8a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a50      	ldr	r2, [pc, #320]	; (8005890 <HAL_GPIO_DeInit+0x1c0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <HAL_GPIO_DeInit+0x86>
 8005752:	2304      	movs	r3, #4
 8005754:	e008      	b.n	8005768 <HAL_GPIO_DeInit+0x98>
 8005756:	2307      	movs	r3, #7
 8005758:	e006      	b.n	8005768 <HAL_GPIO_DeInit+0x98>
 800575a:	2303      	movs	r3, #3
 800575c:	e004      	b.n	8005768 <HAL_GPIO_DeInit+0x98>
 800575e:	2302      	movs	r3, #2
 8005760:	e002      	b.n	8005768 <HAL_GPIO_DeInit+0x98>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_GPIO_DeInit+0x98>
 8005766:	2300      	movs	r3, #0
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	f002 0203 	and.w	r2, r2, #3
 800576e:	0092      	lsls	r2, r2, #2
 8005770:	4093      	lsls	r3, r2
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	429a      	cmp	r2, r3
 8005776:	d132      	bne.n	80057de <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005778:	4b46      	ldr	r3, [pc, #280]	; (8005894 <HAL_GPIO_DeInit+0x1c4>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	43db      	mvns	r3, r3
 8005780:	4944      	ldr	r1, [pc, #272]	; (8005894 <HAL_GPIO_DeInit+0x1c4>)
 8005782:	4013      	ands	r3, r2
 8005784:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005786:	4b43      	ldr	r3, [pc, #268]	; (8005894 <HAL_GPIO_DeInit+0x1c4>)
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	43db      	mvns	r3, r3
 800578e:	4941      	ldr	r1, [pc, #260]	; (8005894 <HAL_GPIO_DeInit+0x1c4>)
 8005790:	4013      	ands	r3, r2
 8005792:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005794:	4b3f      	ldr	r3, [pc, #252]	; (8005894 <HAL_GPIO_DeInit+0x1c4>)
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	43db      	mvns	r3, r3
 800579c:	493d      	ldr	r1, [pc, #244]	; (8005894 <HAL_GPIO_DeInit+0x1c4>)
 800579e:	4013      	ands	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80057a2:	4b3c      	ldr	r3, [pc, #240]	; (8005894 <HAL_GPIO_DeInit+0x1c4>)
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	43db      	mvns	r3, r3
 80057aa:	493a      	ldr	r1, [pc, #232]	; (8005894 <HAL_GPIO_DeInit+0x1c4>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	220f      	movs	r2, #15
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80057c0:	4a2e      	ldr	r2, [pc, #184]	; (800587c <HAL_GPIO_DeInit+0x1ac>)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	089b      	lsrs	r3, r3, #2
 80057c6:	3302      	adds	r3, #2
 80057c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	43da      	mvns	r2, r3
 80057d0:	482a      	ldr	r0, [pc, #168]	; (800587c <HAL_GPIO_DeInit+0x1ac>)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	089b      	lsrs	r3, r3, #2
 80057d6:	400a      	ands	r2, r1
 80057d8:	3302      	adds	r3, #2
 80057da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	2103      	movs	r1, #3
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	401a      	ands	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	08da      	lsrs	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3208      	adds	r2, #8
 80057fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	220f      	movs	r2, #15
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	43db      	mvns	r3, r3
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	08d2      	lsrs	r2, r2, #3
 8005814:	4019      	ands	r1, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3208      	adds	r2, #8
 800581a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	2103      	movs	r1, #3
 8005828:	fa01 f303 	lsl.w	r3, r1, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	401a      	ands	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	2101      	movs	r1, #1
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	2103      	movs	r1, #3
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	401a      	ands	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	3301      	adds	r3, #1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	f67f af40 	bls.w	80056ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40013800 	.word	0x40013800
 8005880:	40020000 	.word	0x40020000
 8005884:	40020400 	.word	0x40020400
 8005888:	40020800 	.word	0x40020800
 800588c:	40020c00 	.word	0x40020c00
 8005890:	40021000 	.word	0x40021000
 8005894:	40013c00 	.word	0x40013c00

08005898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	807b      	strh	r3, [r7, #2]
 80058a4:	4613      	mov	r3, r2
 80058a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058a8:	787b      	ldrb	r3, [r7, #1]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ae:	887a      	ldrh	r2, [r7, #2]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058b4:	e003      	b.n	80058be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058b6:	887b      	ldrh	r3, [r7, #2]
 80058b8:	041a      	lsls	r2, r3, #16
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	619a      	str	r2, [r3, #24]
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d006      	beq.n	80058f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058e2:	4a05      	ldr	r2, [pc, #20]	; (80058f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fb fc9e 	bl	800122c <HAL_GPIO_EXTI_Callback>
  }
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40013c00 	.word	0x40013c00

080058fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e12b      	b.n	8005b66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f95d 	bl	8005be2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800594e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800595e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005960:	f001 fc2e 	bl	80071c0 <HAL_RCC_GetPCLK1Freq>
 8005964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4a81      	ldr	r2, [pc, #516]	; (8005b70 <HAL_I2C_Init+0x274>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d807      	bhi.n	8005980 <HAL_I2C_Init+0x84>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a80      	ldr	r2, [pc, #512]	; (8005b74 <HAL_I2C_Init+0x278>)
 8005974:	4293      	cmp	r3, r2
 8005976:	bf94      	ite	ls
 8005978:	2301      	movls	r3, #1
 800597a:	2300      	movhi	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e006      	b.n	800598e <HAL_I2C_Init+0x92>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a7d      	ldr	r2, [pc, #500]	; (8005b78 <HAL_I2C_Init+0x27c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	bf94      	ite	ls
 8005988:	2301      	movls	r3, #1
 800598a:	2300      	movhi	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e0e7      	b.n	8005b66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a78      	ldr	r2, [pc, #480]	; (8005b7c <HAL_I2C_Init+0x280>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	0c9b      	lsrs	r3, r3, #18
 80059a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4a6a      	ldr	r2, [pc, #424]	; (8005b70 <HAL_I2C_Init+0x274>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d802      	bhi.n	80059d0 <HAL_I2C_Init+0xd4>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3301      	adds	r3, #1
 80059ce:	e009      	b.n	80059e4 <HAL_I2C_Init+0xe8>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	4a69      	ldr	r2, [pc, #420]	; (8005b80 <HAL_I2C_Init+0x284>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	099b      	lsrs	r3, r3, #6
 80059e2:	3301      	adds	r3, #1
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6812      	ldr	r2, [r2, #0]
 80059e8:	430b      	orrs	r3, r1
 80059ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	495c      	ldr	r1, [pc, #368]	; (8005b70 <HAL_I2C_Init+0x274>)
 8005a00:	428b      	cmp	r3, r1
 8005a02:	d819      	bhi.n	8005a38 <HAL_I2C_Init+0x13c>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	1e59      	subs	r1, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a12:	1c59      	adds	r1, r3, #1
 8005a14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a18:	400b      	ands	r3, r1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_I2C_Init+0x138>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1e59      	subs	r1, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a32:	e051      	b.n	8005ad8 <HAL_I2C_Init+0x1dc>
 8005a34:	2304      	movs	r3, #4
 8005a36:	e04f      	b.n	8005ad8 <HAL_I2C_Init+0x1dc>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d111      	bne.n	8005a64 <HAL_I2C_Init+0x168>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	1e58      	subs	r0, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6859      	ldr	r1, [r3, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	440b      	add	r3, r1
 8005a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a52:	3301      	adds	r3, #1
 8005a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	e012      	b.n	8005a8a <HAL_I2C_Init+0x18e>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1e58      	subs	r0, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6859      	ldr	r1, [r3, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	0099      	lsls	r1, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Init+0x196>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e022      	b.n	8005ad8 <HAL_I2C_Init+0x1dc>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10e      	bne.n	8005ab8 <HAL_I2C_Init+0x1bc>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1e58      	subs	r0, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	440b      	add	r3, r1
 8005aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aac:	3301      	adds	r3, #1
 8005aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab6:	e00f      	b.n	8005ad8 <HAL_I2C_Init+0x1dc>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	1e58      	subs	r0, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6859      	ldr	r1, [r3, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	0099      	lsls	r1, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	6809      	ldr	r1, [r1, #0]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69da      	ldr	r2, [r3, #28]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6911      	ldr	r1, [r2, #16]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68d2      	ldr	r2, [r2, #12]
 8005b12:	4311      	orrs	r1, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	000186a0 	.word	0x000186a0
 8005b74:	001e847f 	.word	0x001e847f
 8005b78:	003d08ff 	.word	0x003d08ff
 8005b7c:	431bde83 	.word	0x431bde83
 8005b80:	10624dd3 	.word	0x10624dd3

08005b84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e021      	b.n	8005bda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2224      	movs	r2, #36	; 0x24
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f821 	bl	8005bf6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	4608      	mov	r0, r1
 8005c16:	4611      	mov	r1, r2
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	817b      	strh	r3, [r7, #10]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	813b      	strh	r3, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c26:	f7ff fa8f 	bl	8005148 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	f040 80d9 	bne.w	8005dec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	2319      	movs	r3, #25
 8005c40:	2201      	movs	r2, #1
 8005c42:	496d      	ldr	r1, [pc, #436]	; (8005df8 <HAL_I2C_Mem_Write+0x1ec>)
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fc99 	bl	800657c <I2C_WaitOnFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
 8005c52:	e0cc      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_I2C_Mem_Write+0x56>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e0c5      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d007      	beq.n	8005c88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2221      	movs	r2, #33	; 0x21
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2240      	movs	r2, #64	; 0x40
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a4d      	ldr	r2, [pc, #308]	; (8005dfc <HAL_I2C_Mem_Write+0x1f0>)
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cca:	88f8      	ldrh	r0, [r7, #6]
 8005ccc:	893a      	ldrh	r2, [r7, #8]
 8005cce:	8979      	ldrh	r1, [r7, #10]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4603      	mov	r3, r0
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fad0 	bl	8006280 <I2C_RequestMemoryWrite>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d052      	beq.n	8005d8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e081      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fd1a 	bl	8006728 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d107      	bne.n	8005d12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e06b      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d11b      	bne.n	8005d8c <HAL_I2C_Mem_Write+0x180>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d017      	beq.n	8005d8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1aa      	bne.n	8005cea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fd06 	bl	80067aa <I2C_WaitOnBTFFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00d      	beq.n	8005dc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d107      	bne.n	8005dbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e016      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e000      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	00100002 	.word	0x00100002
 8005dfc:	ffff0000 	.word	0xffff0000

08005e00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	; 0x30
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	817b      	strh	r3, [r7, #10]
 8005e12:	460b      	mov	r3, r1
 8005e14:	813b      	strh	r3, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e1a:	f7ff f995 	bl	8005148 <HAL_GetTick>
 8005e1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	f040 8208 	bne.w	800623e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	2319      	movs	r3, #25
 8005e34:	2201      	movs	r2, #1
 8005e36:	497b      	ldr	r1, [pc, #492]	; (8006024 <HAL_I2C_Mem_Read+0x224>)
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fb9f 	bl	800657c <I2C_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
 8005e46:	e1fb      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_I2C_Mem_Read+0x56>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e1f4      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d007      	beq.n	8005e7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2222      	movs	r2, #34	; 0x22
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2240      	movs	r2, #64	; 0x40
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4a5b      	ldr	r2, [pc, #364]	; (8006028 <HAL_I2C_Mem_Read+0x228>)
 8005ebc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ebe:	88f8      	ldrh	r0, [r7, #6]
 8005ec0:	893a      	ldrh	r2, [r7, #8]
 8005ec2:	8979      	ldrh	r1, [r7, #10]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4603      	mov	r3, r0
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 fa6c 	bl	80063ac <I2C_RequestMemoryRead>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e1b0      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d113      	bne.n	8005f0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	623b      	str	r3, [r7, #32]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	e184      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d11b      	bne.n	8005f4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f26:	2300      	movs	r3, #0
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	e164      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d11b      	bne.n	8005f8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	e144      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fa4:	e138      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	f200 80f1 	bhi.w	8006192 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d123      	bne.n	8006000 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fc35 	bl	800682c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e139      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ffe:	e10b      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006004:	2b02      	cmp	r3, #2
 8006006:	d14e      	bne.n	80060a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	2200      	movs	r2, #0
 8006010:	4906      	ldr	r1, [pc, #24]	; (800602c <HAL_I2C_Mem_Read+0x22c>)
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fab2 	bl	800657c <I2C_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d008      	beq.n	8006030 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e10e      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
 8006022:	bf00      	nop
 8006024:	00100002 	.word	0x00100002
 8006028:	ffff0000 	.word	0xffff0000
 800602c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060a4:	e0b8      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	2200      	movs	r2, #0
 80060ae:	4966      	ldr	r1, [pc, #408]	; (8006248 <HAL_I2C_Mem_Read+0x448>)
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fa63 	bl	800657c <I2C_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0bf      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	2200      	movs	r2, #0
 800610a:	494f      	ldr	r1, [pc, #316]	; (8006248 <HAL_I2C_Mem_Read+0x448>)
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 fa35 	bl	800657c <I2C_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e091      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006190:	e042      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006194:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fb48 	bl	800682c <I2C_WaitOnRXNEFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e04c      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d118      	bne.n	8006218 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621c:	2b00      	cmp	r3, #0
 800621e:	f47f aec2 	bne.w	8005fa6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e000      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800623e:	2302      	movs	r3, #2
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3728      	adds	r7, #40	; 0x28
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	00010004 	.word	0x00010004

0800624c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625a:	b2db      	uxtb	r3, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	461a      	mov	r2, r3
 800628e:	4603      	mov	r3, r0
 8006290:	817b      	strh	r3, [r7, #10]
 8006292:	460b      	mov	r3, r1
 8006294:	813b      	strh	r3, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f960 	bl	800657c <I2C_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00d      	beq.n	80062de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d0:	d103      	bne.n	80062da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e05f      	b.n	800639e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062de:	897b      	ldrh	r3, [r7, #10]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	6a3a      	ldr	r2, [r7, #32]
 80062f2:	492d      	ldr	r1, [pc, #180]	; (80063a8 <I2C_RequestMemoryWrite+0x128>)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f998 	bl	800662a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e04c      	b.n	800639e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	6a39      	ldr	r1, [r7, #32]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 fa02 	bl	8006728 <I2C_WaitOnTXEFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00d      	beq.n	8006346 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	2b04      	cmp	r3, #4
 8006330:	d107      	bne.n	8006342 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e02b      	b.n	800639e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d105      	bne.n	8006358 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800634c:	893b      	ldrh	r3, [r7, #8]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	611a      	str	r2, [r3, #16]
 8006356:	e021      	b.n	800639c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006358:	893b      	ldrh	r3, [r7, #8]
 800635a:	0a1b      	lsrs	r3, r3, #8
 800635c:	b29b      	uxth	r3, r3
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	6a39      	ldr	r1, [r7, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f9dc 	bl	8006728 <I2C_WaitOnTXEFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2b04      	cmp	r3, #4
 800637c:	d107      	bne.n	800638e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e005      	b.n	800639e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006392:	893b      	ldrh	r3, [r7, #8]
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	00010002 	.word	0x00010002

080063ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	4608      	mov	r0, r1
 80063b6:	4611      	mov	r1, r2
 80063b8:	461a      	mov	r2, r3
 80063ba:	4603      	mov	r3, r0
 80063bc:	817b      	strh	r3, [r7, #10]
 80063be:	460b      	mov	r3, r1
 80063c0:	813b      	strh	r3, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 f8c2 	bl	800657c <I2C_WaitOnFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00d      	beq.n	800641a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640c:	d103      	bne.n	8006416 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e0aa      	b.n	8006570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800641a:	897b      	ldrh	r3, [r7, #10]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	6a3a      	ldr	r2, [r7, #32]
 800642e:	4952      	ldr	r1, [pc, #328]	; (8006578 <I2C_RequestMemoryRead+0x1cc>)
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f8fa 	bl	800662a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e097      	b.n	8006570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006440:	2300      	movs	r3, #0
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006458:	6a39      	ldr	r1, [r7, #32]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f964 	bl	8006728 <I2C_WaitOnTXEFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00d      	beq.n	8006482 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	2b04      	cmp	r3, #4
 800646c:	d107      	bne.n	800647e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e076      	b.n	8006570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d105      	bne.n	8006494 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006488:	893b      	ldrh	r3, [r7, #8]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	611a      	str	r2, [r3, #16]
 8006492:	e021      	b.n	80064d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006494:	893b      	ldrh	r3, [r7, #8]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	b29b      	uxth	r3, r3
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a4:	6a39      	ldr	r1, [r7, #32]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f93e 	bl	8006728 <I2C_WaitOnTXEFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00d      	beq.n	80064ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d107      	bne.n	80064ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e050      	b.n	8006570 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064ce:	893b      	ldrh	r3, [r7, #8]
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064da:	6a39      	ldr	r1, [r7, #32]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f923 	bl	8006728 <I2C_WaitOnTXEFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00d      	beq.n	8006504 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d107      	bne.n	8006500 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e035      	b.n	8006570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006512:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	2200      	movs	r2, #0
 800651c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f82b 	bl	800657c <I2C_WaitOnFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00d      	beq.n	8006548 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800653a:	d103      	bne.n	8006544 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006542:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e013      	b.n	8006570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006548:	897b      	ldrh	r3, [r7, #10]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	6a3a      	ldr	r2, [r7, #32]
 800655c:	4906      	ldr	r1, [pc, #24]	; (8006578 <I2C_RequestMemoryRead+0x1cc>)
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f863 	bl	800662a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	00010002 	.word	0x00010002

0800657c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800658c:	e025      	b.n	80065da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	d021      	beq.n	80065da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006596:	f7fe fdd7 	bl	8005148 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d302      	bcc.n	80065ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d116      	bne.n	80065da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f043 0220 	orr.w	r2, r3, #32
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e023      	b.n	8006622 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d10d      	bne.n	8006600 <I2C_WaitOnFlagUntilTimeout+0x84>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	43da      	mvns	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4013      	ands	r3, r2
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bf0c      	ite	eq
 80065f6:	2301      	moveq	r3, #1
 80065f8:	2300      	movne	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	e00c      	b.n	800661a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	43da      	mvns	r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4013      	ands	r3, r2
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	bf0c      	ite	eq
 8006612:	2301      	moveq	r3, #1
 8006614:	2300      	movne	r3, #0
 8006616:	b2db      	uxtb	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	429a      	cmp	r2, r3
 800661e:	d0b6      	beq.n	800658e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006638:	e051      	b.n	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006648:	d123      	bne.n	8006692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006658:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006662:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f043 0204 	orr.w	r2, r3, #4
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e046      	b.n	8006720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d021      	beq.n	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800669a:	f7fe fd55 	bl	8005148 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d302      	bcc.n	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d116      	bne.n	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f043 0220 	orr.w	r2, r3, #32
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e020      	b.n	8006720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	0c1b      	lsrs	r3, r3, #16
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d10c      	bne.n	8006702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	43da      	mvns	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf14      	ite	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	2300      	moveq	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	e00b      	b.n	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	43da      	mvns	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4013      	ands	r3, r2
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d18d      	bne.n	800663a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006734:	e02d      	b.n	8006792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f8ce 	bl	80068d8 <I2C_IsAcknowledgeFailed>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e02d      	b.n	80067a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d021      	beq.n	8006792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674e:	f7fe fcfb 	bl	8005148 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	429a      	cmp	r2, r3
 800675c:	d302      	bcc.n	8006764 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d116      	bne.n	8006792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e007      	b.n	80067a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679c:	2b80      	cmp	r3, #128	; 0x80
 800679e:	d1ca      	bne.n	8006736 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067b6:	e02d      	b.n	8006814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f88d 	bl	80068d8 <I2C_IsAcknowledgeFailed>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e02d      	b.n	8006824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ce:	d021      	beq.n	8006814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d0:	f7fe fcba 	bl	8005148 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d302      	bcc.n	80067e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d116      	bne.n	8006814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	f043 0220 	orr.w	r2, r3, #32
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e007      	b.n	8006824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b04      	cmp	r3, #4
 8006820:	d1ca      	bne.n	80067b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006838:	e042      	b.n	80068c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b10      	cmp	r3, #16
 8006846:	d119      	bne.n	800687c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0210 	mvn.w	r2, #16
 8006850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e029      	b.n	80068d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800687c:	f7fe fc64 	bl	8005148 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	d302      	bcc.n	8006892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d116      	bne.n	80068c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e007      	b.n	80068d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d1b5      	bne.n	800683a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ee:	d11b      	bne.n	8006928 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	f043 0204 	orr.w	r2, r3, #4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e25b      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d075      	beq.n	8006a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006956:	4ba3      	ldr	r3, [pc, #652]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 030c 	and.w	r3, r3, #12
 800695e:	2b04      	cmp	r3, #4
 8006960:	d00c      	beq.n	800697c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006962:	4ba0      	ldr	r3, [pc, #640]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800696a:	2b08      	cmp	r3, #8
 800696c:	d112      	bne.n	8006994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800696e:	4b9d      	ldr	r3, [pc, #628]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800697a:	d10b      	bne.n	8006994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800697c:	4b99      	ldr	r3, [pc, #612]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d05b      	beq.n	8006a40 <HAL_RCC_OscConfig+0x108>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d157      	bne.n	8006a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e236      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d106      	bne.n	80069ac <HAL_RCC_OscConfig+0x74>
 800699e:	4b91      	ldr	r3, [pc, #580]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a90      	ldr	r2, [pc, #576]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	e01d      	b.n	80069e8 <HAL_RCC_OscConfig+0xb0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069b4:	d10c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x98>
 80069b6:	4b8b      	ldr	r3, [pc, #556]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a8a      	ldr	r2, [pc, #552]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	4b88      	ldr	r3, [pc, #544]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a87      	ldr	r2, [pc, #540]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	e00b      	b.n	80069e8 <HAL_RCC_OscConfig+0xb0>
 80069d0:	4b84      	ldr	r3, [pc, #528]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a83      	ldr	r2, [pc, #524]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	4b81      	ldr	r3, [pc, #516]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a80      	ldr	r2, [pc, #512]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d013      	beq.n	8006a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f0:	f7fe fbaa 	bl	8005148 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069f8:	f7fe fba6 	bl	8005148 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b64      	cmp	r3, #100	; 0x64
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e1fb      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	4b76      	ldr	r3, [pc, #472]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0xc0>
 8006a16:	e014      	b.n	8006a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a18:	f7fe fb96 	bl	8005148 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a20:	f7fe fb92 	bl	8005148 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b64      	cmp	r3, #100	; 0x64
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e1e7      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a32:	4b6c      	ldr	r3, [pc, #432]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f0      	bne.n	8006a20 <HAL_RCC_OscConfig+0xe8>
 8006a3e:	e000      	b.n	8006a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d063      	beq.n	8006b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a4e:	4b65      	ldr	r3, [pc, #404]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 030c 	and.w	r3, r3, #12
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00b      	beq.n	8006a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a5a:	4b62      	ldr	r3, [pc, #392]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d11c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a66:	4b5f      	ldr	r3, [pc, #380]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d116      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a72:	4b5c      	ldr	r3, [pc, #368]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <HAL_RCC_OscConfig+0x152>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d001      	beq.n	8006a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e1bb      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8a:	4b56      	ldr	r3, [pc, #344]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4952      	ldr	r1, [pc, #328]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9e:	e03a      	b.n	8006b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d020      	beq.n	8006aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aa8:	4b4f      	ldr	r3, [pc, #316]	; (8006be8 <HAL_RCC_OscConfig+0x2b0>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aae:	f7fe fb4b 	bl	8005148 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ab6:	f7fe fb47 	bl	8005148 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e19c      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac8:	4b46      	ldr	r3, [pc, #280]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0f0      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad4:	4b43      	ldr	r3, [pc, #268]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4940      	ldr	r1, [pc, #256]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	600b      	str	r3, [r1, #0]
 8006ae8:	e015      	b.n	8006b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aea:	4b3f      	ldr	r3, [pc, #252]	; (8006be8 <HAL_RCC_OscConfig+0x2b0>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af0:	f7fe fb2a 	bl	8005148 <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af8:	f7fe fb26 	bl	8005148 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e17b      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b0a:	4b36      	ldr	r3, [pc, #216]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f0      	bne.n	8006af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d030      	beq.n	8006b84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d016      	beq.n	8006b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b2a:	4b30      	ldr	r3, [pc, #192]	; (8006bec <HAL_RCC_OscConfig+0x2b4>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7fe fb0a 	bl	8005148 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b38:	f7fe fb06 	bl	8005148 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e15b      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b4a:	4b26      	ldr	r3, [pc, #152]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f0      	beq.n	8006b38 <HAL_RCC_OscConfig+0x200>
 8006b56:	e015      	b.n	8006b84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b58:	4b24      	ldr	r3, [pc, #144]	; (8006bec <HAL_RCC_OscConfig+0x2b4>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5e:	f7fe faf3 	bl	8005148 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b66:	f7fe faef 	bl	8005148 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e144      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b78:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f0      	bne.n	8006b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80a0 	beq.w	8006cd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b92:	2300      	movs	r3, #0
 8006b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b96:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10f      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bba:	60bb      	str	r3, [r7, #8]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_OscConfig+0x2b8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d121      	bne.n	8006c12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bce:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <HAL_RCC_OscConfig+0x2b8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a07      	ldr	r2, [pc, #28]	; (8006bf0 <HAL_RCC_OscConfig+0x2b8>)
 8006bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bda:	f7fe fab5 	bl	8005148 <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be0:	e011      	b.n	8006c06 <HAL_RCC_OscConfig+0x2ce>
 8006be2:	bf00      	nop
 8006be4:	40023800 	.word	0x40023800
 8006be8:	42470000 	.word	0x42470000
 8006bec:	42470e80 	.word	0x42470e80
 8006bf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf4:	f7fe faa8 	bl	8005148 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e0fd      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c06:	4b81      	ldr	r3, [pc, #516]	; (8006e0c <HAL_RCC_OscConfig+0x4d4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0f0      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d106      	bne.n	8006c28 <HAL_RCC_OscConfig+0x2f0>
 8006c1a:	4b7d      	ldr	r3, [pc, #500]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	4a7c      	ldr	r2, [pc, #496]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	6713      	str	r3, [r2, #112]	; 0x70
 8006c26:	e01c      	b.n	8006c62 <HAL_RCC_OscConfig+0x32a>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b05      	cmp	r3, #5
 8006c2e:	d10c      	bne.n	8006c4a <HAL_RCC_OscConfig+0x312>
 8006c30:	4b77      	ldr	r3, [pc, #476]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	4a76      	ldr	r2, [pc, #472]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c36:	f043 0304 	orr.w	r3, r3, #4
 8006c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c3c:	4b74      	ldr	r3, [pc, #464]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	4a73      	ldr	r2, [pc, #460]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	6713      	str	r3, [r2, #112]	; 0x70
 8006c48:	e00b      	b.n	8006c62 <HAL_RCC_OscConfig+0x32a>
 8006c4a:	4b71      	ldr	r3, [pc, #452]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4e:	4a70      	ldr	r2, [pc, #448]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	6713      	str	r3, [r2, #112]	; 0x70
 8006c56:	4b6e      	ldr	r3, [pc, #440]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	4a6d      	ldr	r2, [pc, #436]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c5c:	f023 0304 	bic.w	r3, r3, #4
 8006c60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d015      	beq.n	8006c96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6a:	f7fe fa6d 	bl	8005148 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c70:	e00a      	b.n	8006c88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c72:	f7fe fa69 	bl	8005148 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e0bc      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c88:	4b61      	ldr	r3, [pc, #388]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0ee      	beq.n	8006c72 <HAL_RCC_OscConfig+0x33a>
 8006c94:	e014      	b.n	8006cc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c96:	f7fe fa57 	bl	8005148 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c9c:	e00a      	b.n	8006cb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c9e:	f7fe fa53 	bl	8005148 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e0a6      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb4:	4b56      	ldr	r3, [pc, #344]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1ee      	bne.n	8006c9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d105      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc6:	4b52      	ldr	r3, [pc, #328]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	4a51      	ldr	r2, [pc, #324]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8092 	beq.w	8006e00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cdc:	4b4c      	ldr	r3, [pc, #304]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 030c 	and.w	r3, r3, #12
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d05c      	beq.n	8006da2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d141      	bne.n	8006d74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf0:	4b48      	ldr	r3, [pc, #288]	; (8006e14 <HAL_RCC_OscConfig+0x4dc>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf6:	f7fe fa27 	bl	8005148 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cfe:	f7fe fa23 	bl	8005148 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e078      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d10:	4b3f      	ldr	r3, [pc, #252]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	019b      	lsls	r3, r3, #6
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	3b01      	subs	r3, #1
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	061b      	lsls	r3, r3, #24
 8006d40:	4933      	ldr	r1, [pc, #204]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d46:	4b33      	ldr	r3, [pc, #204]	; (8006e14 <HAL_RCC_OscConfig+0x4dc>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d4c:	f7fe f9fc 	bl	8005148 <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d54:	f7fe f9f8 	bl	8005148 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e04d      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d66:	4b2a      	ldr	r3, [pc, #168]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0f0      	beq.n	8006d54 <HAL_RCC_OscConfig+0x41c>
 8006d72:	e045      	b.n	8006e00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d74:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <HAL_RCC_OscConfig+0x4dc>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7a:	f7fe f9e5 	bl	8005148 <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d80:	e008      	b.n	8006d94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d82:	f7fe f9e1 	bl	8005148 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e036      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d94:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f0      	bne.n	8006d82 <HAL_RCC_OscConfig+0x44a>
 8006da0:	e02e      	b.n	8006e00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e029      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d11c      	bne.n	8006dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d115      	bne.n	8006dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10d      	bne.n	8006dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d106      	bne.n	8006dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d001      	beq.n	8006e00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40007000 	.word	0x40007000
 8006e10:	40023800 	.word	0x40023800
 8006e14:	42470060 	.word	0x42470060

08006e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0cc      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e2c:	4b68      	ldr	r3, [pc, #416]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d90c      	bls.n	8006e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3a:	4b65      	ldr	r3, [pc, #404]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e42:	4b63      	ldr	r3, [pc, #396]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d001      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e0b8      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d020      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e6c:	4b59      	ldr	r3, [pc, #356]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4a58      	ldr	r2, [pc, #352]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e84:	4b53      	ldr	r3, [pc, #332]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	4a52      	ldr	r2, [pc, #328]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e90:	4b50      	ldr	r3, [pc, #320]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	494d      	ldr	r1, [pc, #308]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d044      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d107      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eb6:	4b47      	ldr	r3, [pc, #284]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d119      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e07f      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d003      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d107      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed6:	4b3f      	ldr	r3, [pc, #252]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e06f      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ee6:	4b3b      	ldr	r3, [pc, #236]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e067      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ef6:	4b37      	ldr	r3, [pc, #220]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f023 0203 	bic.w	r2, r3, #3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4934      	ldr	r1, [pc, #208]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f08:	f7fe f91e 	bl	8005148 <HAL_GetTick>
 8006f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0e:	e00a      	b.n	8006f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f10:	f7fe f91a 	bl	8005148 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e04f      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f26:	4b2b      	ldr	r3, [pc, #172]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 020c 	and.w	r2, r3, #12
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d1eb      	bne.n	8006f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f38:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d20c      	bcs.n	8006f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f46:	4b22      	ldr	r3, [pc, #136]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4e:	4b20      	ldr	r3, [pc, #128]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d001      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e032      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f6c:	4b19      	ldr	r3, [pc, #100]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	4916      	ldr	r1, [pc, #88]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d009      	beq.n	8006f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f8a:	4b12      	ldr	r3, [pc, #72]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	490e      	ldr	r1, [pc, #56]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f9e:	f000 f821 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	091b      	lsrs	r3, r3, #4
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	490a      	ldr	r1, [pc, #40]	; (8006fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8006fb0:	5ccb      	ldrb	r3, [r1, r3]
 8006fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb6:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <HAL_RCC_ClockConfig+0x1c4>)
 8006fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fba:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe f87e 	bl	80050c0 <HAL_InitTick>

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	40023c00 	.word	0x40023c00
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	0800b41c 	.word	0x0800b41c
 8006fdc:	20000184 	.word	0x20000184
 8006fe0:	2000025c 	.word	0x2000025c

08006fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	607b      	str	r3, [r7, #4]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ffc:	4b67      	ldr	r3, [pc, #412]	; (800719c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 030c 	and.w	r3, r3, #12
 8007004:	2b08      	cmp	r3, #8
 8007006:	d00d      	beq.n	8007024 <HAL_RCC_GetSysClockFreq+0x40>
 8007008:	2b08      	cmp	r3, #8
 800700a:	f200 80bd 	bhi.w	8007188 <HAL_RCC_GetSysClockFreq+0x1a4>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_RCC_GetSysClockFreq+0x34>
 8007012:	2b04      	cmp	r3, #4
 8007014:	d003      	beq.n	800701e <HAL_RCC_GetSysClockFreq+0x3a>
 8007016:	e0b7      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007018:	4b61      	ldr	r3, [pc, #388]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800701a:	60bb      	str	r3, [r7, #8]
       break;
 800701c:	e0b7      	b.n	800718e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800701e:	4b61      	ldr	r3, [pc, #388]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007020:	60bb      	str	r3, [r7, #8]
      break;
 8007022:	e0b4      	b.n	800718e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007024:	4b5d      	ldr	r3, [pc, #372]	; (800719c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800702c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800702e:	4b5b      	ldr	r3, [pc, #364]	; (800719c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d04d      	beq.n	80070d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800703a:	4b58      	ldr	r3, [pc, #352]	; (800719c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	099b      	lsrs	r3, r3, #6
 8007040:	461a      	mov	r2, r3
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	f240 10ff 	movw	r0, #511	; 0x1ff
 800704a:	f04f 0100 	mov.w	r1, #0
 800704e:	ea02 0800 	and.w	r8, r2, r0
 8007052:	ea03 0901 	and.w	r9, r3, r1
 8007056:	4640      	mov	r0, r8
 8007058:	4649      	mov	r1, r9
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	014b      	lsls	r3, r1, #5
 8007064:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007068:	0142      	lsls	r2, r0, #5
 800706a:	4610      	mov	r0, r2
 800706c:	4619      	mov	r1, r3
 800706e:	ebb0 0008 	subs.w	r0, r0, r8
 8007072:	eb61 0109 	sbc.w	r1, r1, r9
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	018b      	lsls	r3, r1, #6
 8007080:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007084:	0182      	lsls	r2, r0, #6
 8007086:	1a12      	subs	r2, r2, r0
 8007088:	eb63 0301 	sbc.w	r3, r3, r1
 800708c:	f04f 0000 	mov.w	r0, #0
 8007090:	f04f 0100 	mov.w	r1, #0
 8007094:	00d9      	lsls	r1, r3, #3
 8007096:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800709a:	00d0      	lsls	r0, r2, #3
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	eb12 0208 	adds.w	r2, r2, r8
 80070a4:	eb43 0309 	adc.w	r3, r3, r9
 80070a8:	f04f 0000 	mov.w	r0, #0
 80070ac:	f04f 0100 	mov.w	r1, #0
 80070b0:	0259      	lsls	r1, r3, #9
 80070b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80070b6:	0250      	lsls	r0, r2, #9
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4610      	mov	r0, r2
 80070be:	4619      	mov	r1, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	f7f9 fd76 	bl	8000bb8 <__aeabi_uldivmod>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4613      	mov	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	e04a      	b.n	800716c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070d6:	4b31      	ldr	r3, [pc, #196]	; (800719c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	099b      	lsrs	r3, r3, #6
 80070dc:	461a      	mov	r2, r3
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070e6:	f04f 0100 	mov.w	r1, #0
 80070ea:	ea02 0400 	and.w	r4, r2, r0
 80070ee:	ea03 0501 	and.w	r5, r3, r1
 80070f2:	4620      	mov	r0, r4
 80070f4:	4629      	mov	r1, r5
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	014b      	lsls	r3, r1, #5
 8007100:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007104:	0142      	lsls	r2, r0, #5
 8007106:	4610      	mov	r0, r2
 8007108:	4619      	mov	r1, r3
 800710a:	1b00      	subs	r0, r0, r4
 800710c:	eb61 0105 	sbc.w	r1, r1, r5
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	018b      	lsls	r3, r1, #6
 800711a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800711e:	0182      	lsls	r2, r0, #6
 8007120:	1a12      	subs	r2, r2, r0
 8007122:	eb63 0301 	sbc.w	r3, r3, r1
 8007126:	f04f 0000 	mov.w	r0, #0
 800712a:	f04f 0100 	mov.w	r1, #0
 800712e:	00d9      	lsls	r1, r3, #3
 8007130:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007134:	00d0      	lsls	r0, r2, #3
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	1912      	adds	r2, r2, r4
 800713c:	eb45 0303 	adc.w	r3, r5, r3
 8007140:	f04f 0000 	mov.w	r0, #0
 8007144:	f04f 0100 	mov.w	r1, #0
 8007148:	0299      	lsls	r1, r3, #10
 800714a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800714e:	0290      	lsls	r0, r2, #10
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	461a      	mov	r2, r3
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	f7f9 fd2a 	bl	8000bb8 <__aeabi_uldivmod>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4613      	mov	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	0c1b      	lsrs	r3, r3, #16
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	3301      	adds	r3, #1
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	fbb2 f3f3 	udiv	r3, r2, r3
 8007184:	60bb      	str	r3, [r7, #8]
      break;
 8007186:	e002      	b.n	800718e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800718a:	60bb      	str	r3, [r7, #8]
      break;
 800718c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800718e:	68bb      	ldr	r3, [r7, #8]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800719a:	bf00      	nop
 800719c:	40023800 	.word	0x40023800
 80071a0:	00f42400 	.word	0x00f42400
 80071a4:	007a1200 	.word	0x007a1200

080071a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071ac:	4b03      	ldr	r3, [pc, #12]	; (80071bc <HAL_RCC_GetHCLKFreq+0x14>)
 80071ae:	681b      	ldr	r3, [r3, #0]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000184 	.word	0x20000184

080071c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071c4:	f7ff fff0 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 80071c8:	4602      	mov	r2, r0
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	0a9b      	lsrs	r3, r3, #10
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	4903      	ldr	r1, [pc, #12]	; (80071e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071d6:	5ccb      	ldrb	r3, [r1, r3]
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071dc:	4618      	mov	r0, r3
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40023800 	.word	0x40023800
 80071e4:	0800b42c 	.word	0x0800b42c

080071e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071ec:	f7ff ffdc 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 80071f0:	4602      	mov	r2, r0
 80071f2:	4b05      	ldr	r3, [pc, #20]	; (8007208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	0b5b      	lsrs	r3, r3, #13
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	4903      	ldr	r1, [pc, #12]	; (800720c <HAL_RCC_GetPCLK2Freq+0x24>)
 80071fe:	5ccb      	ldrb	r3, [r1, r3]
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007204:	4618      	mov	r0, r3
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40023800 	.word	0x40023800
 800720c:	0800b42c 	.word	0x0800b42c

08007210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e01d      	b.n	800725e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d106      	bne.n	800723c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fa f8d6 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3304      	adds	r3, #4
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f000 f95e 	bl	8007510 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b06      	cmp	r3, #6
 800728e:	d007      	beq.n	80072a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d122      	bne.n	800730a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d11b      	bne.n	800730a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f06f 0202 	mvn.w	r2, #2
 80072da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f003 0303 	and.w	r3, r3, #3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f8ee 	bl	80074d2 <HAL_TIM_IC_CaptureCallback>
 80072f6:	e005      	b.n	8007304 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f8e0 	bl	80074be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f8f1 	bl	80074e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b04      	cmp	r3, #4
 8007316:	d122      	bne.n	800735e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b04      	cmp	r3, #4
 8007324:	d11b      	bne.n	800735e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f06f 0204 	mvn.w	r2, #4
 800732e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f8c4 	bl	80074d2 <HAL_TIM_IC_CaptureCallback>
 800734a:	e005      	b.n	8007358 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f8b6 	bl	80074be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f8c7 	bl	80074e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d122      	bne.n	80073b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b08      	cmp	r3, #8
 8007378:	d11b      	bne.n	80073b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f06f 0208 	mvn.w	r2, #8
 8007382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2204      	movs	r2, #4
 8007388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f89a 	bl	80074d2 <HAL_TIM_IC_CaptureCallback>
 800739e:	e005      	b.n	80073ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f88c 	bl	80074be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f89d 	bl	80074e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b10      	cmp	r3, #16
 80073be:	d122      	bne.n	8007406 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f003 0310 	and.w	r3, r3, #16
 80073ca:	2b10      	cmp	r3, #16
 80073cc:	d11b      	bne.n	8007406 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f06f 0210 	mvn.w	r2, #16
 80073d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2208      	movs	r2, #8
 80073dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f870 	bl	80074d2 <HAL_TIM_IC_CaptureCallback>
 80073f2:	e005      	b.n	8007400 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f862 	bl	80074be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f873 	bl	80074e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d10e      	bne.n	8007432 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b01      	cmp	r3, #1
 8007420:	d107      	bne.n	8007432 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f06f 0201 	mvn.w	r2, #1
 800742a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7f9 ff59 	bl	80012e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743c:	2b80      	cmp	r3, #128	; 0x80
 800743e:	d10e      	bne.n	800745e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744a:	2b80      	cmp	r3, #128	; 0x80
 800744c:	d107      	bne.n	800745e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f8e3 	bl	8007624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b40      	cmp	r3, #64	; 0x40
 800746a:	d10e      	bne.n	800748a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	d107      	bne.n	800748a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f838 	bl	80074fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b20      	cmp	r3, #32
 8007496:	d10e      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d107      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f06f 0220 	mvn.w	r2, #32
 80074ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f8ad 	bl	8007610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
	...

08007510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a34      	ldr	r2, [pc, #208]	; (80075f4 <TIM_Base_SetConfig+0xe4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d00f      	beq.n	8007548 <TIM_Base_SetConfig+0x38>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752e:	d00b      	beq.n	8007548 <TIM_Base_SetConfig+0x38>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a31      	ldr	r2, [pc, #196]	; (80075f8 <TIM_Base_SetConfig+0xe8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d007      	beq.n	8007548 <TIM_Base_SetConfig+0x38>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a30      	ldr	r2, [pc, #192]	; (80075fc <TIM_Base_SetConfig+0xec>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d003      	beq.n	8007548 <TIM_Base_SetConfig+0x38>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a2f      	ldr	r2, [pc, #188]	; (8007600 <TIM_Base_SetConfig+0xf0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d108      	bne.n	800755a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a25      	ldr	r2, [pc, #148]	; (80075f4 <TIM_Base_SetConfig+0xe4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d01b      	beq.n	800759a <TIM_Base_SetConfig+0x8a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007568:	d017      	beq.n	800759a <TIM_Base_SetConfig+0x8a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a22      	ldr	r2, [pc, #136]	; (80075f8 <TIM_Base_SetConfig+0xe8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <TIM_Base_SetConfig+0x8a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a21      	ldr	r2, [pc, #132]	; (80075fc <TIM_Base_SetConfig+0xec>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00f      	beq.n	800759a <TIM_Base_SetConfig+0x8a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a20      	ldr	r2, [pc, #128]	; (8007600 <TIM_Base_SetConfig+0xf0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00b      	beq.n	800759a <TIM_Base_SetConfig+0x8a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a1f      	ldr	r2, [pc, #124]	; (8007604 <TIM_Base_SetConfig+0xf4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d007      	beq.n	800759a <TIM_Base_SetConfig+0x8a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <TIM_Base_SetConfig+0xf8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <TIM_Base_SetConfig+0x8a>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a1d      	ldr	r2, [pc, #116]	; (800760c <TIM_Base_SetConfig+0xfc>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d108      	bne.n	80075ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a08      	ldr	r2, [pc, #32]	; (80075f4 <TIM_Base_SetConfig+0xe4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d103      	bne.n	80075e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	615a      	str	r2, [r3, #20]
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40014000 	.word	0x40014000
 8007608:	40014400 	.word	0x40014400
 800760c:	40014800 	.word	0x40014800

08007610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e03f      	b.n	80076ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d106      	bne.n	8007664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7f9 feea 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2224      	movs	r2, #36	; 0x24
 8007668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800767a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc0f 	bl	8007ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	695a      	ldr	r2, [r3, #20]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b088      	sub	sp, #32
 80076d6:	af02      	add	r7, sp, #8
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	603b      	str	r3, [r7, #0]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	f040 8083 	bne.w	80077fa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_UART_Transmit+0x2e>
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e07b      	b.n	80077fc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800770a:	2b01      	cmp	r3, #1
 800770c:	d101      	bne.n	8007712 <HAL_UART_Transmit+0x40>
 800770e:	2302      	movs	r3, #2
 8007710:	e074      	b.n	80077fc <HAL_UART_Transmit+0x12a>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2221      	movs	r2, #33	; 0x21
 8007724:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007728:	f7fd fd0e 	bl	8005148 <HAL_GetTick>
 800772c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	88fa      	ldrh	r2, [r7, #6]
 8007732:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007742:	e042      	b.n	80077ca <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775a:	d122      	bne.n	80077a2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2200      	movs	r2, #0
 8007764:	2180      	movs	r1, #128	; 0x80
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fa2e 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e042      	b.n	80077fc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007788:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	3302      	adds	r3, #2
 8007796:	60bb      	str	r3, [r7, #8]
 8007798:	e017      	b.n	80077ca <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	3301      	adds	r3, #1
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	e013      	b.n	80077ca <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2200      	movs	r2, #0
 80077aa:	2180      	movs	r1, #128	; 0x80
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fa0b 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e01f      	b.n	80077fc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	60ba      	str	r2, [r7, #8]
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1b7      	bne.n	8007744 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2200      	movs	r2, #0
 80077dc:	2140      	movs	r1, #64	; 0x40
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 f9f2 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e006      	b.n	80077fc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e000      	b.n	80077fc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80077fa:	2302      	movs	r3, #2
  }
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af02      	add	r7, sp, #8
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	4613      	mov	r3, r2
 8007812:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b20      	cmp	r3, #32
 8007822:	f040 8090 	bne.w	8007946 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_UART_Receive+0x2e>
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e088      	b.n	8007948 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_UART_Receive+0x40>
 8007840:	2302      	movs	r3, #2
 8007842:	e081      	b.n	8007948 <HAL_UART_Receive+0x144>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2222      	movs	r2, #34	; 0x22
 8007856:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800785a:	f7fd fc75 	bl	8005148 <HAL_GetTick>
 800785e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	88fa      	ldrh	r2, [r7, #6]
 8007864:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	88fa      	ldrh	r2, [r7, #6]
 800786a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007874:	e05c      	b.n	8007930 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788c:	d12b      	bne.n	80078e6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2200      	movs	r2, #0
 8007896:	2120      	movs	r1, #32
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f995 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e04f      	b.n	8007948 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10c      	bne.n	80078ce <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	3302      	adds	r3, #2
 80078ca:	60bb      	str	r3, [r7, #8]
 80078cc:	e030      	b.n	8007930 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	b29a      	uxth	r2, r3
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60bb      	str	r3, [r7, #8]
 80078e4:	e024      	b.n	8007930 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2200      	movs	r2, #0
 80078ee:	2120      	movs	r1, #32
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f969 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e023      	b.n	8007948 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d108      	bne.n	800791a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6859      	ldr	r1, [r3, #4]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	60ba      	str	r2, [r7, #8]
 8007914:	b2ca      	uxtb	r2, r1
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	e00a      	b.n	8007930 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	b2da      	uxtb	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	1c59      	adds	r1, r3, #1
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007934:	b29b      	uxth	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d19d      	bne.n	8007876 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2220      	movs	r2, #32
 800793e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	e000      	b.n	8007948 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007946:	2302      	movs	r3, #2
  }
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007970:	2300      	movs	r3, #0
 8007972:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10d      	bne.n	80079a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d008      	beq.n	80079a2 <HAL_UART_IRQHandler+0x52>
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f9fe 	bl	8007d9c <UART_Receive_IT>
      return;
 80079a0:	e0d0      	b.n	8007b44 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80b0 	beq.w	8007b0a <HAL_UART_IRQHandler+0x1ba>
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <HAL_UART_IRQHandler+0x70>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 80a5 	beq.w	8007b0a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <HAL_UART_IRQHandler+0x90>
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d8:	f043 0201 	orr.w	r2, r3, #1
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <HAL_UART_IRQHandler+0xb0>
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d005      	beq.n	8007a00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f8:	f043 0202 	orr.w	r2, r3, #2
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <HAL_UART_IRQHandler+0xd0>
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d005      	beq.n	8007a20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a18:	f043 0204 	orr.w	r2, r3, #4
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00f      	beq.n	8007a4a <HAL_UART_IRQHandler+0xfa>
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <HAL_UART_IRQHandler+0xee>
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a42:	f043 0208 	orr.w	r2, r3, #8
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d077      	beq.n	8007b42 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <HAL_UART_IRQHandler+0x11c>
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f998 	bl	8007d9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a76:	2b40      	cmp	r3, #64	; 0x40
 8007a78:	bf0c      	ite	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	2300      	movne	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <HAL_UART_IRQHandler+0x144>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d031      	beq.n	8007af8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f8e1 	bl	8007c5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b40      	cmp	r3, #64	; 0x40
 8007aa6:	d123      	bne.n	8007af0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695a      	ldr	r2, [r3, #20]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ab6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d013      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac4:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <HAL_UART_IRQHandler+0x1fc>)
 8007ac6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fd fc58 	bl	8005382 <HAL_DMA_Abort_IT>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d016      	beq.n	8007b06 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae6:	e00e      	b.n	8007b06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f845 	bl	8007b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aee:	e00a      	b.n	8007b06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f841 	bl	8007b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af6:	e006      	b.n	8007b06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f83d 	bl	8007b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007b04:	e01d      	b.n	8007b42 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b06:	bf00      	nop
    return;
 8007b08:	e01b      	b.n	8007b42 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d008      	beq.n	8007b26 <HAL_UART_IRQHandler+0x1d6>
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f8ce 	bl	8007cc0 <UART_Transmit_IT>
    return;
 8007b24:	e00e      	b.n	8007b44 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d009      	beq.n	8007b44 <HAL_UART_IRQHandler+0x1f4>
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f916 	bl	8007d6c <UART_EndTransmit_IT>
    return;
 8007b40:	e000      	b.n	8007b44 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007b42:	bf00      	nop
  }
}
 8007b44:	3720      	adds	r7, #32
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	08007c99 	.word	0x08007c99

08007b50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	b2db      	uxtb	r3, r3
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd8:	e02c      	b.n	8007c34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be0:	d028      	beq.n	8007c34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d007      	beq.n	8007bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007be8:	f7fd faae 	bl	8005148 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d21d      	bcs.n	8007c34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695a      	ldr	r2, [r3, #20]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0201 	bic.w	r2, r2, #1
 8007c16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e00f      	b.n	8007c54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	bf0c      	ite	eq
 8007c44:	2301      	moveq	r3, #1
 8007c46:	2300      	movne	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d0c3      	beq.n	8007bda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	695a      	ldr	r2, [r3, #20]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0201 	bic.w	r2, r2, #1
 8007c82:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff ff60 	bl	8007b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b21      	cmp	r3, #33	; 0x21
 8007cd2:	d144      	bne.n	8007d5e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cdc:	d11a      	bne.n	8007d14 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cf2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d105      	bne.n	8007d08 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	1c9a      	adds	r2, r3, #2
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]
 8007d06:	e00e      	b.n	8007d26 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	621a      	str	r2, [r3, #32]
 8007d12:	e008      	b.n	8007d26 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	1c59      	adds	r1, r3, #1
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6211      	str	r1, [r2, #32]
 8007d1e:	781a      	ldrb	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4619      	mov	r1, r3
 8007d34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10f      	bne.n	8007d5a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e000      	b.n	8007d60 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007d5e:	2302      	movs	r3, #2
  }
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fedf 	bl	8007b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b22      	cmp	r3, #34	; 0x22
 8007dae:	d171      	bne.n	8007e94 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d123      	bne.n	8007e02 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10e      	bne.n	8007de6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	1c9a      	adds	r2, r3, #2
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	629a      	str	r2, [r3, #40]	; 0x28
 8007de4:	e029      	b.n	8007e3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8007e00:	e01b      	b.n	8007e3a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6858      	ldr	r0, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	1c59      	adds	r1, r3, #1
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6291      	str	r1, [r2, #40]	; 0x28
 8007e1a:	b2c2      	uxtb	r2, r0
 8007e1c:	701a      	strb	r2, [r3, #0]
 8007e1e:	e00c      	b.n	8007e3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	1c58      	adds	r0, r3, #1
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	6288      	str	r0, [r1, #40]	; 0x28
 8007e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	4619      	mov	r1, r3
 8007e48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d120      	bne.n	8007e90 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0220 	bic.w	r2, r2, #32
 8007e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695a      	ldr	r2, [r3, #20]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0201 	bic.w	r2, r2, #1
 8007e7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff fe6c 	bl	8007b64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	e002      	b.n	8007e96 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e000      	b.n	8007e96 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007e94:	2302      	movs	r3, #2
  }
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	b0bd      	sub	sp, #244	; 0xf4
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebc:	68d9      	ldr	r1, [r3, #12]
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	ea40 0301 	orr.w	r3, r0, r1
 8007ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ef8:	f021 010c 	bic.w	r1, r1, #12
 8007efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f06:	430b      	orrs	r3, r1
 8007f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1a:	6999      	ldr	r1, [r3, #24]
 8007f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	ea40 0301 	orr.w	r3, r0, r1
 8007f26:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f32:	f040 81a5 	bne.w	8008280 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4bcd      	ldr	r3, [pc, #820]	; (8008274 <UART_SetConfig+0x3d4>)
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d006      	beq.n	8007f50 <UART_SetConfig+0xb0>
 8007f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	4bcb      	ldr	r3, [pc, #812]	; (8008278 <UART_SetConfig+0x3d8>)
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	f040 80cb 	bne.w	80080e6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f50:	f7ff f94a 	bl	80071e8 <HAL_RCC_GetPCLK2Freq>
 8007f54:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f5c:	461c      	mov	r4, r3
 8007f5e:	f04f 0500 	mov.w	r5, #0
 8007f62:	4622      	mov	r2, r4
 8007f64:	462b      	mov	r3, r5
 8007f66:	1891      	adds	r1, r2, r2
 8007f68:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007f6c:	415b      	adcs	r3, r3
 8007f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f72:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007f76:	1912      	adds	r2, r2, r4
 8007f78:	eb45 0303 	adc.w	r3, r5, r3
 8007f7c:	f04f 0000 	mov.w	r0, #0
 8007f80:	f04f 0100 	mov.w	r1, #0
 8007f84:	00d9      	lsls	r1, r3, #3
 8007f86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f8a:	00d0      	lsls	r0, r2, #3
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	1911      	adds	r1, r2, r4
 8007f92:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8007f96:	416b      	adcs	r3, r5
 8007f98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	1891      	adds	r1, r2, r2
 8007faa:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007fae:	415b      	adcs	r3, r3
 8007fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fb4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007fb8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007fbc:	f7f8 fdfc 	bl	8000bb8 <__aeabi_uldivmod>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4bad      	ldr	r3, [pc, #692]	; (800827c <UART_SetConfig+0x3dc>)
 8007fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007fca:	095b      	lsrs	r3, r3, #5
 8007fcc:	011e      	lsls	r6, r3, #4
 8007fce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fd2:	461c      	mov	r4, r3
 8007fd4:	f04f 0500 	mov.w	r5, #0
 8007fd8:	4622      	mov	r2, r4
 8007fda:	462b      	mov	r3, r5
 8007fdc:	1891      	adds	r1, r2, r2
 8007fde:	67b9      	str	r1, [r7, #120]	; 0x78
 8007fe0:	415b      	adcs	r3, r3
 8007fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fe4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007fe8:	1912      	adds	r2, r2, r4
 8007fea:	eb45 0303 	adc.w	r3, r5, r3
 8007fee:	f04f 0000 	mov.w	r0, #0
 8007ff2:	f04f 0100 	mov.w	r1, #0
 8007ff6:	00d9      	lsls	r1, r3, #3
 8007ff8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ffc:	00d0      	lsls	r0, r2, #3
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	1911      	adds	r1, r2, r4
 8008004:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008008:	416b      	adcs	r3, r5
 800800a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800800e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	461a      	mov	r2, r3
 8008016:	f04f 0300 	mov.w	r3, #0
 800801a:	1891      	adds	r1, r2, r2
 800801c:	6739      	str	r1, [r7, #112]	; 0x70
 800801e:	415b      	adcs	r3, r3
 8008020:	677b      	str	r3, [r7, #116]	; 0x74
 8008022:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008026:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800802a:	f7f8 fdc5 	bl	8000bb8 <__aeabi_uldivmod>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4b92      	ldr	r3, [pc, #584]	; (800827c <UART_SetConfig+0x3dc>)
 8008034:	fba3 1302 	umull	r1, r3, r3, r2
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	2164      	movs	r1, #100	; 0x64
 800803c:	fb01 f303 	mul.w	r3, r1, r3
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	3332      	adds	r3, #50	; 0x32
 8008046:	4a8d      	ldr	r2, [pc, #564]	; (800827c <UART_SetConfig+0x3dc>)
 8008048:	fba2 2303 	umull	r2, r3, r2, r3
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008054:	441e      	add	r6, r3
 8008056:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800805a:	4618      	mov	r0, r3
 800805c:	f04f 0100 	mov.w	r1, #0
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	1894      	adds	r4, r2, r2
 8008066:	66bc      	str	r4, [r7, #104]	; 0x68
 8008068:	415b      	adcs	r3, r3
 800806a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800806c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008070:	1812      	adds	r2, r2, r0
 8008072:	eb41 0303 	adc.w	r3, r1, r3
 8008076:	f04f 0400 	mov.w	r4, #0
 800807a:	f04f 0500 	mov.w	r5, #0
 800807e:	00dd      	lsls	r5, r3, #3
 8008080:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008084:	00d4      	lsls	r4, r2, #3
 8008086:	4622      	mov	r2, r4
 8008088:	462b      	mov	r3, r5
 800808a:	1814      	adds	r4, r2, r0
 800808c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008090:	414b      	adcs	r3, r1
 8008092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	461a      	mov	r2, r3
 800809e:	f04f 0300 	mov.w	r3, #0
 80080a2:	1891      	adds	r1, r2, r2
 80080a4:	6639      	str	r1, [r7, #96]	; 0x60
 80080a6:	415b      	adcs	r3, r3
 80080a8:	667b      	str	r3, [r7, #100]	; 0x64
 80080aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80080ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80080b2:	f7f8 fd81 	bl	8000bb8 <__aeabi_uldivmod>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4b70      	ldr	r3, [pc, #448]	; (800827c <UART_SetConfig+0x3dc>)
 80080bc:	fba3 1302 	umull	r1, r3, r3, r2
 80080c0:	095b      	lsrs	r3, r3, #5
 80080c2:	2164      	movs	r1, #100	; 0x64
 80080c4:	fb01 f303 	mul.w	r3, r1, r3
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	3332      	adds	r3, #50	; 0x32
 80080ce:	4a6b      	ldr	r2, [pc, #428]	; (800827c <UART_SetConfig+0x3dc>)
 80080d0:	fba2 2303 	umull	r2, r3, r2, r3
 80080d4:	095b      	lsrs	r3, r3, #5
 80080d6:	f003 0207 	and.w	r2, r3, #7
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4432      	add	r2, r6
 80080e2:	609a      	str	r2, [r3, #8]
 80080e4:	e26d      	b.n	80085c2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080e6:	f7ff f86b 	bl	80071c0 <HAL_RCC_GetPCLK1Freq>
 80080ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080f2:	461c      	mov	r4, r3
 80080f4:	f04f 0500 	mov.w	r5, #0
 80080f8:	4622      	mov	r2, r4
 80080fa:	462b      	mov	r3, r5
 80080fc:	1891      	adds	r1, r2, r2
 80080fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8008100:	415b      	adcs	r3, r3
 8008102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008104:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008108:	1912      	adds	r2, r2, r4
 800810a:	eb45 0303 	adc.w	r3, r5, r3
 800810e:	f04f 0000 	mov.w	r0, #0
 8008112:	f04f 0100 	mov.w	r1, #0
 8008116:	00d9      	lsls	r1, r3, #3
 8008118:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800811c:	00d0      	lsls	r0, r2, #3
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	1911      	adds	r1, r2, r4
 8008124:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008128:	416b      	adcs	r3, r5
 800812a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800812e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	461a      	mov	r2, r3
 8008136:	f04f 0300 	mov.w	r3, #0
 800813a:	1891      	adds	r1, r2, r2
 800813c:	6539      	str	r1, [r7, #80]	; 0x50
 800813e:	415b      	adcs	r3, r3
 8008140:	657b      	str	r3, [r7, #84]	; 0x54
 8008142:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008146:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800814a:	f7f8 fd35 	bl	8000bb8 <__aeabi_uldivmod>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4b4a      	ldr	r3, [pc, #296]	; (800827c <UART_SetConfig+0x3dc>)
 8008154:	fba3 2302 	umull	r2, r3, r3, r2
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	011e      	lsls	r6, r3, #4
 800815c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008160:	461c      	mov	r4, r3
 8008162:	f04f 0500 	mov.w	r5, #0
 8008166:	4622      	mov	r2, r4
 8008168:	462b      	mov	r3, r5
 800816a:	1891      	adds	r1, r2, r2
 800816c:	64b9      	str	r1, [r7, #72]	; 0x48
 800816e:	415b      	adcs	r3, r3
 8008170:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008172:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008176:	1912      	adds	r2, r2, r4
 8008178:	eb45 0303 	adc.w	r3, r5, r3
 800817c:	f04f 0000 	mov.w	r0, #0
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	00d9      	lsls	r1, r3, #3
 8008186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800818a:	00d0      	lsls	r0, r2, #3
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	1911      	adds	r1, r2, r4
 8008192:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008196:	416b      	adcs	r3, r5
 8008198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800819c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f04f 0300 	mov.w	r3, #0
 80081a8:	1891      	adds	r1, r2, r2
 80081aa:	6439      	str	r1, [r7, #64]	; 0x40
 80081ac:	415b      	adcs	r3, r3
 80081ae:	647b      	str	r3, [r7, #68]	; 0x44
 80081b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80081b8:	f7f8 fcfe 	bl	8000bb8 <__aeabi_uldivmod>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4b2e      	ldr	r3, [pc, #184]	; (800827c <UART_SetConfig+0x3dc>)
 80081c2:	fba3 1302 	umull	r1, r3, r3, r2
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	2164      	movs	r1, #100	; 0x64
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	3332      	adds	r3, #50	; 0x32
 80081d4:	4a29      	ldr	r2, [pc, #164]	; (800827c <UART_SetConfig+0x3dc>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	095b      	lsrs	r3, r3, #5
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081e2:	441e      	add	r6, r3
 80081e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081e8:	4618      	mov	r0, r3
 80081ea:	f04f 0100 	mov.w	r1, #0
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	1894      	adds	r4, r2, r2
 80081f4:	63bc      	str	r4, [r7, #56]	; 0x38
 80081f6:	415b      	adcs	r3, r3
 80081f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081fe:	1812      	adds	r2, r2, r0
 8008200:	eb41 0303 	adc.w	r3, r1, r3
 8008204:	f04f 0400 	mov.w	r4, #0
 8008208:	f04f 0500 	mov.w	r5, #0
 800820c:	00dd      	lsls	r5, r3, #3
 800820e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008212:	00d4      	lsls	r4, r2, #3
 8008214:	4622      	mov	r2, r4
 8008216:	462b      	mov	r3, r5
 8008218:	1814      	adds	r4, r2, r0
 800821a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800821e:	414b      	adcs	r3, r1
 8008220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	461a      	mov	r2, r3
 800822c:	f04f 0300 	mov.w	r3, #0
 8008230:	1891      	adds	r1, r2, r2
 8008232:	6339      	str	r1, [r7, #48]	; 0x30
 8008234:	415b      	adcs	r3, r3
 8008236:	637b      	str	r3, [r7, #52]	; 0x34
 8008238:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800823c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008240:	f7f8 fcba 	bl	8000bb8 <__aeabi_uldivmod>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <UART_SetConfig+0x3dc>)
 800824a:	fba3 1302 	umull	r1, r3, r3, r2
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	2164      	movs	r1, #100	; 0x64
 8008252:	fb01 f303 	mul.w	r3, r1, r3
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	3332      	adds	r3, #50	; 0x32
 800825c:	4a07      	ldr	r2, [pc, #28]	; (800827c <UART_SetConfig+0x3dc>)
 800825e:	fba2 2303 	umull	r2, r3, r2, r3
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	f003 0207 	and.w	r2, r3, #7
 8008268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4432      	add	r2, r6
 8008270:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008272:	e1a6      	b.n	80085c2 <UART_SetConfig+0x722>
 8008274:	40011000 	.word	0x40011000
 8008278:	40011400 	.word	0x40011400
 800827c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4bd1      	ldr	r3, [pc, #836]	; (80085cc <UART_SetConfig+0x72c>)
 8008288:	429a      	cmp	r2, r3
 800828a:	d006      	beq.n	800829a <UART_SetConfig+0x3fa>
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4bcf      	ldr	r3, [pc, #828]	; (80085d0 <UART_SetConfig+0x730>)
 8008294:	429a      	cmp	r2, r3
 8008296:	f040 80ca 	bne.w	800842e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800829a:	f7fe ffa5 	bl	80071e8 <HAL_RCC_GetPCLK2Freq>
 800829e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082a6:	461c      	mov	r4, r3
 80082a8:	f04f 0500 	mov.w	r5, #0
 80082ac:	4622      	mov	r2, r4
 80082ae:	462b      	mov	r3, r5
 80082b0:	1891      	adds	r1, r2, r2
 80082b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80082b4:	415b      	adcs	r3, r3
 80082b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082bc:	1912      	adds	r2, r2, r4
 80082be:	eb45 0303 	adc.w	r3, r5, r3
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f04f 0100 	mov.w	r1, #0
 80082ca:	00d9      	lsls	r1, r3, #3
 80082cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082d0:	00d0      	lsls	r0, r2, #3
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	eb12 0a04 	adds.w	sl, r2, r4
 80082da:	eb43 0b05 	adc.w	fp, r3, r5
 80082de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f04f 0100 	mov.w	r1, #0
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	008b      	lsls	r3, r1, #2
 80082f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082f8:	0082      	lsls	r2, r0, #2
 80082fa:	4650      	mov	r0, sl
 80082fc:	4659      	mov	r1, fp
 80082fe:	f7f8 fc5b 	bl	8000bb8 <__aeabi_uldivmod>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4bb3      	ldr	r3, [pc, #716]	; (80085d4 <UART_SetConfig+0x734>)
 8008308:	fba3 2302 	umull	r2, r3, r3, r2
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	011e      	lsls	r6, r3, #4
 8008310:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008314:	4618      	mov	r0, r3
 8008316:	f04f 0100 	mov.w	r1, #0
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	1894      	adds	r4, r2, r2
 8008320:	623c      	str	r4, [r7, #32]
 8008322:	415b      	adcs	r3, r3
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
 8008326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800832a:	1812      	adds	r2, r2, r0
 800832c:	eb41 0303 	adc.w	r3, r1, r3
 8008330:	f04f 0400 	mov.w	r4, #0
 8008334:	f04f 0500 	mov.w	r5, #0
 8008338:	00dd      	lsls	r5, r3, #3
 800833a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800833e:	00d4      	lsls	r4, r2, #3
 8008340:	4622      	mov	r2, r4
 8008342:	462b      	mov	r3, r5
 8008344:	1814      	adds	r4, r2, r0
 8008346:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800834a:	414b      	adcs	r3, r1
 800834c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	4618      	mov	r0, r3
 8008358:	f04f 0100 	mov.w	r1, #0
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	008b      	lsls	r3, r1, #2
 8008366:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800836a:	0082      	lsls	r2, r0, #2
 800836c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008370:	f7f8 fc22 	bl	8000bb8 <__aeabi_uldivmod>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4b96      	ldr	r3, [pc, #600]	; (80085d4 <UART_SetConfig+0x734>)
 800837a:	fba3 1302 	umull	r1, r3, r3, r2
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	2164      	movs	r1, #100	; 0x64
 8008382:	fb01 f303 	mul.w	r3, r1, r3
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	3332      	adds	r3, #50	; 0x32
 800838c:	4a91      	ldr	r2, [pc, #580]	; (80085d4 <UART_SetConfig+0x734>)
 800838e:	fba2 2303 	umull	r2, r3, r2, r3
 8008392:	095b      	lsrs	r3, r3, #5
 8008394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008398:	441e      	add	r6, r3
 800839a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800839e:	4618      	mov	r0, r3
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	1894      	adds	r4, r2, r2
 80083aa:	61bc      	str	r4, [r7, #24]
 80083ac:	415b      	adcs	r3, r3
 80083ae:	61fb      	str	r3, [r7, #28]
 80083b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083b4:	1812      	adds	r2, r2, r0
 80083b6:	eb41 0303 	adc.w	r3, r1, r3
 80083ba:	f04f 0400 	mov.w	r4, #0
 80083be:	f04f 0500 	mov.w	r5, #0
 80083c2:	00dd      	lsls	r5, r3, #3
 80083c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083c8:	00d4      	lsls	r4, r2, #3
 80083ca:	4622      	mov	r2, r4
 80083cc:	462b      	mov	r3, r5
 80083ce:	1814      	adds	r4, r2, r0
 80083d0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80083d4:	414b      	adcs	r3, r1
 80083d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f04f 0100 	mov.w	r1, #0
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	f04f 0300 	mov.w	r3, #0
 80083ee:	008b      	lsls	r3, r1, #2
 80083f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083f4:	0082      	lsls	r2, r0, #2
 80083f6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80083fa:	f7f8 fbdd 	bl	8000bb8 <__aeabi_uldivmod>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4b74      	ldr	r3, [pc, #464]	; (80085d4 <UART_SetConfig+0x734>)
 8008404:	fba3 1302 	umull	r1, r3, r3, r2
 8008408:	095b      	lsrs	r3, r3, #5
 800840a:	2164      	movs	r1, #100	; 0x64
 800840c:	fb01 f303 	mul.w	r3, r1, r3
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	3332      	adds	r3, #50	; 0x32
 8008416:	4a6f      	ldr	r2, [pc, #444]	; (80085d4 <UART_SetConfig+0x734>)
 8008418:	fba2 2303 	umull	r2, r3, r2, r3
 800841c:	095b      	lsrs	r3, r3, #5
 800841e:	f003 020f 	and.w	r2, r3, #15
 8008422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4432      	add	r2, r6
 800842a:	609a      	str	r2, [r3, #8]
 800842c:	e0c9      	b.n	80085c2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800842e:	f7fe fec7 	bl	80071c0 <HAL_RCC_GetPCLK1Freq>
 8008432:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800843a:	461c      	mov	r4, r3
 800843c:	f04f 0500 	mov.w	r5, #0
 8008440:	4622      	mov	r2, r4
 8008442:	462b      	mov	r3, r5
 8008444:	1891      	adds	r1, r2, r2
 8008446:	6139      	str	r1, [r7, #16]
 8008448:	415b      	adcs	r3, r3
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008450:	1912      	adds	r2, r2, r4
 8008452:	eb45 0303 	adc.w	r3, r5, r3
 8008456:	f04f 0000 	mov.w	r0, #0
 800845a:	f04f 0100 	mov.w	r1, #0
 800845e:	00d9      	lsls	r1, r3, #3
 8008460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008464:	00d0      	lsls	r0, r2, #3
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	eb12 0804 	adds.w	r8, r2, r4
 800846e:	eb43 0905 	adc.w	r9, r3, r5
 8008472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	4618      	mov	r0, r3
 800847a:	f04f 0100 	mov.w	r1, #0
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	008b      	lsls	r3, r1, #2
 8008488:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800848c:	0082      	lsls	r2, r0, #2
 800848e:	4640      	mov	r0, r8
 8008490:	4649      	mov	r1, r9
 8008492:	f7f8 fb91 	bl	8000bb8 <__aeabi_uldivmod>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4b4e      	ldr	r3, [pc, #312]	; (80085d4 <UART_SetConfig+0x734>)
 800849c:	fba3 2302 	umull	r2, r3, r3, r2
 80084a0:	095b      	lsrs	r3, r3, #5
 80084a2:	011e      	lsls	r6, r3, #4
 80084a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084a8:	4618      	mov	r0, r3
 80084aa:	f04f 0100 	mov.w	r1, #0
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	1894      	adds	r4, r2, r2
 80084b4:	60bc      	str	r4, [r7, #8]
 80084b6:	415b      	adcs	r3, r3
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084be:	1812      	adds	r2, r2, r0
 80084c0:	eb41 0303 	adc.w	r3, r1, r3
 80084c4:	f04f 0400 	mov.w	r4, #0
 80084c8:	f04f 0500 	mov.w	r5, #0
 80084cc:	00dd      	lsls	r5, r3, #3
 80084ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084d2:	00d4      	lsls	r4, r2, #3
 80084d4:	4622      	mov	r2, r4
 80084d6:	462b      	mov	r3, r5
 80084d8:	1814      	adds	r4, r2, r0
 80084da:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80084de:	414b      	adcs	r3, r1
 80084e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f04f 0100 	mov.w	r1, #0
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	f04f 0300 	mov.w	r3, #0
 80084f8:	008b      	lsls	r3, r1, #2
 80084fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084fe:	0082      	lsls	r2, r0, #2
 8008500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008504:	f7f8 fb58 	bl	8000bb8 <__aeabi_uldivmod>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4b31      	ldr	r3, [pc, #196]	; (80085d4 <UART_SetConfig+0x734>)
 800850e:	fba3 1302 	umull	r1, r3, r3, r2
 8008512:	095b      	lsrs	r3, r3, #5
 8008514:	2164      	movs	r1, #100	; 0x64
 8008516:	fb01 f303 	mul.w	r3, r1, r3
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	011b      	lsls	r3, r3, #4
 800851e:	3332      	adds	r3, #50	; 0x32
 8008520:	4a2c      	ldr	r2, [pc, #176]	; (80085d4 <UART_SetConfig+0x734>)
 8008522:	fba2 2303 	umull	r2, r3, r2, r3
 8008526:	095b      	lsrs	r3, r3, #5
 8008528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800852c:	441e      	add	r6, r3
 800852e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008532:	4618      	mov	r0, r3
 8008534:	f04f 0100 	mov.w	r1, #0
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	1894      	adds	r4, r2, r2
 800853e:	603c      	str	r4, [r7, #0]
 8008540:	415b      	adcs	r3, r3
 8008542:	607b      	str	r3, [r7, #4]
 8008544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008548:	1812      	adds	r2, r2, r0
 800854a:	eb41 0303 	adc.w	r3, r1, r3
 800854e:	f04f 0400 	mov.w	r4, #0
 8008552:	f04f 0500 	mov.w	r5, #0
 8008556:	00dd      	lsls	r5, r3, #3
 8008558:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800855c:	00d4      	lsls	r4, r2, #3
 800855e:	4622      	mov	r2, r4
 8008560:	462b      	mov	r3, r5
 8008562:	1814      	adds	r4, r2, r0
 8008564:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008568:	414b      	adcs	r3, r1
 800856a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800856e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	4618      	mov	r0, r3
 8008576:	f04f 0100 	mov.w	r1, #0
 800857a:	f04f 0200 	mov.w	r2, #0
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	008b      	lsls	r3, r1, #2
 8008584:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008588:	0082      	lsls	r2, r0, #2
 800858a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800858e:	f7f8 fb13 	bl	8000bb8 <__aeabi_uldivmod>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <UART_SetConfig+0x734>)
 8008598:	fba3 1302 	umull	r1, r3, r3, r2
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	2164      	movs	r1, #100	; 0x64
 80085a0:	fb01 f303 	mul.w	r3, r1, r3
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	3332      	adds	r3, #50	; 0x32
 80085aa:	4a0a      	ldr	r2, [pc, #40]	; (80085d4 <UART_SetConfig+0x734>)
 80085ac:	fba2 2303 	umull	r2, r3, r2, r3
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	f003 020f 	and.w	r2, r3, #15
 80085b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4432      	add	r2, r6
 80085be:	609a      	str	r2, [r3, #8]
}
 80085c0:	e7ff      	b.n	80085c2 <UART_SetConfig+0x722>
 80085c2:	bf00      	nop
 80085c4:	37f4      	adds	r7, #244	; 0xf4
 80085c6:	46bd      	mov	sp, r7
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	40011000 	.word	0x40011000
 80085d0:	40011400 	.word	0x40011400
 80085d4:	51eb851f 	.word	0x51eb851f

080085d8 <__errno>:
 80085d8:	4b01      	ldr	r3, [pc, #4]	; (80085e0 <__errno+0x8>)
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000264 	.word	0x20000264

080085e4 <__libc_init_array>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	4d0d      	ldr	r5, [pc, #52]	; (800861c <__libc_init_array+0x38>)
 80085e8:	4c0d      	ldr	r4, [pc, #52]	; (8008620 <__libc_init_array+0x3c>)
 80085ea:	1b64      	subs	r4, r4, r5
 80085ec:	10a4      	asrs	r4, r4, #2
 80085ee:	2600      	movs	r6, #0
 80085f0:	42a6      	cmp	r6, r4
 80085f2:	d109      	bne.n	8008608 <__libc_init_array+0x24>
 80085f4:	4d0b      	ldr	r5, [pc, #44]	; (8008624 <__libc_init_array+0x40>)
 80085f6:	4c0c      	ldr	r4, [pc, #48]	; (8008628 <__libc_init_array+0x44>)
 80085f8:	f002 fec8 	bl	800b38c <_init>
 80085fc:	1b64      	subs	r4, r4, r5
 80085fe:	10a4      	asrs	r4, r4, #2
 8008600:	2600      	movs	r6, #0
 8008602:	42a6      	cmp	r6, r4
 8008604:	d105      	bne.n	8008612 <__libc_init_array+0x2e>
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	f855 3b04 	ldr.w	r3, [r5], #4
 800860c:	4798      	blx	r3
 800860e:	3601      	adds	r6, #1
 8008610:	e7ee      	b.n	80085f0 <__libc_init_array+0xc>
 8008612:	f855 3b04 	ldr.w	r3, [r5], #4
 8008616:	4798      	blx	r3
 8008618:	3601      	adds	r6, #1
 800861a:	e7f2      	b.n	8008602 <__libc_init_array+0x1e>
 800861c:	0800b81c 	.word	0x0800b81c
 8008620:	0800b81c 	.word	0x0800b81c
 8008624:	0800b81c 	.word	0x0800b81c
 8008628:	0800b820 	.word	0x0800b820

0800862c <memset>:
 800862c:	4402      	add	r2, r0
 800862e:	4603      	mov	r3, r0
 8008630:	4293      	cmp	r3, r2
 8008632:	d100      	bne.n	8008636 <memset+0xa>
 8008634:	4770      	bx	lr
 8008636:	f803 1b01 	strb.w	r1, [r3], #1
 800863a:	e7f9      	b.n	8008630 <memset+0x4>

0800863c <__cvt>:
 800863c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	ec55 4b10 	vmov	r4, r5, d0
 8008644:	2d00      	cmp	r5, #0
 8008646:	460e      	mov	r6, r1
 8008648:	4619      	mov	r1, r3
 800864a:	462b      	mov	r3, r5
 800864c:	bfbb      	ittet	lt
 800864e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008652:	461d      	movlt	r5, r3
 8008654:	2300      	movge	r3, #0
 8008656:	232d      	movlt	r3, #45	; 0x2d
 8008658:	700b      	strb	r3, [r1, #0]
 800865a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800865c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008660:	4691      	mov	r9, r2
 8008662:	f023 0820 	bic.w	r8, r3, #32
 8008666:	bfbc      	itt	lt
 8008668:	4622      	movlt	r2, r4
 800866a:	4614      	movlt	r4, r2
 800866c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008670:	d005      	beq.n	800867e <__cvt+0x42>
 8008672:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008676:	d100      	bne.n	800867a <__cvt+0x3e>
 8008678:	3601      	adds	r6, #1
 800867a:	2102      	movs	r1, #2
 800867c:	e000      	b.n	8008680 <__cvt+0x44>
 800867e:	2103      	movs	r1, #3
 8008680:	ab03      	add	r3, sp, #12
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	ab02      	add	r3, sp, #8
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	ec45 4b10 	vmov	d0, r4, r5
 800868c:	4653      	mov	r3, sl
 800868e:	4632      	mov	r2, r6
 8008690:	f000 fcfe 	bl	8009090 <_dtoa_r>
 8008694:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008698:	4607      	mov	r7, r0
 800869a:	d102      	bne.n	80086a2 <__cvt+0x66>
 800869c:	f019 0f01 	tst.w	r9, #1
 80086a0:	d022      	beq.n	80086e8 <__cvt+0xac>
 80086a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086a6:	eb07 0906 	add.w	r9, r7, r6
 80086aa:	d110      	bne.n	80086ce <__cvt+0x92>
 80086ac:	783b      	ldrb	r3, [r7, #0]
 80086ae:	2b30      	cmp	r3, #48	; 0x30
 80086b0:	d10a      	bne.n	80086c8 <__cvt+0x8c>
 80086b2:	2200      	movs	r2, #0
 80086b4:	2300      	movs	r3, #0
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7f8 fa0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80086be:	b918      	cbnz	r0, 80086c8 <__cvt+0x8c>
 80086c0:	f1c6 0601 	rsb	r6, r6, #1
 80086c4:	f8ca 6000 	str.w	r6, [sl]
 80086c8:	f8da 3000 	ldr.w	r3, [sl]
 80086cc:	4499      	add	r9, r3
 80086ce:	2200      	movs	r2, #0
 80086d0:	2300      	movs	r3, #0
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f8 f9ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80086da:	b108      	cbz	r0, 80086e0 <__cvt+0xa4>
 80086dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80086e0:	2230      	movs	r2, #48	; 0x30
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	454b      	cmp	r3, r9
 80086e6:	d307      	bcc.n	80086f8 <__cvt+0xbc>
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ec:	1bdb      	subs	r3, r3, r7
 80086ee:	4638      	mov	r0, r7
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	b004      	add	sp, #16
 80086f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f8:	1c59      	adds	r1, r3, #1
 80086fa:	9103      	str	r1, [sp, #12]
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e7f0      	b.n	80086e2 <__cvt+0xa6>

08008700 <__exponent>:
 8008700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008702:	4603      	mov	r3, r0
 8008704:	2900      	cmp	r1, #0
 8008706:	bfb8      	it	lt
 8008708:	4249      	neglt	r1, r1
 800870a:	f803 2b02 	strb.w	r2, [r3], #2
 800870e:	bfb4      	ite	lt
 8008710:	222d      	movlt	r2, #45	; 0x2d
 8008712:	222b      	movge	r2, #43	; 0x2b
 8008714:	2909      	cmp	r1, #9
 8008716:	7042      	strb	r2, [r0, #1]
 8008718:	dd2a      	ble.n	8008770 <__exponent+0x70>
 800871a:	f10d 0407 	add.w	r4, sp, #7
 800871e:	46a4      	mov	ip, r4
 8008720:	270a      	movs	r7, #10
 8008722:	46a6      	mov	lr, r4
 8008724:	460a      	mov	r2, r1
 8008726:	fb91 f6f7 	sdiv	r6, r1, r7
 800872a:	fb07 1516 	mls	r5, r7, r6, r1
 800872e:	3530      	adds	r5, #48	; 0x30
 8008730:	2a63      	cmp	r2, #99	; 0x63
 8008732:	f104 34ff 	add.w	r4, r4, #4294967295
 8008736:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800873a:	4631      	mov	r1, r6
 800873c:	dcf1      	bgt.n	8008722 <__exponent+0x22>
 800873e:	3130      	adds	r1, #48	; 0x30
 8008740:	f1ae 0502 	sub.w	r5, lr, #2
 8008744:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008748:	1c44      	adds	r4, r0, #1
 800874a:	4629      	mov	r1, r5
 800874c:	4561      	cmp	r1, ip
 800874e:	d30a      	bcc.n	8008766 <__exponent+0x66>
 8008750:	f10d 0209 	add.w	r2, sp, #9
 8008754:	eba2 020e 	sub.w	r2, r2, lr
 8008758:	4565      	cmp	r5, ip
 800875a:	bf88      	it	hi
 800875c:	2200      	movhi	r2, #0
 800875e:	4413      	add	r3, r2
 8008760:	1a18      	subs	r0, r3, r0
 8008762:	b003      	add	sp, #12
 8008764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800876a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800876e:	e7ed      	b.n	800874c <__exponent+0x4c>
 8008770:	2330      	movs	r3, #48	; 0x30
 8008772:	3130      	adds	r1, #48	; 0x30
 8008774:	7083      	strb	r3, [r0, #2]
 8008776:	70c1      	strb	r1, [r0, #3]
 8008778:	1d03      	adds	r3, r0, #4
 800877a:	e7f1      	b.n	8008760 <__exponent+0x60>

0800877c <_printf_float>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	ed2d 8b02 	vpush	{d8}
 8008784:	b08d      	sub	sp, #52	; 0x34
 8008786:	460c      	mov	r4, r1
 8008788:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800878c:	4616      	mov	r6, r2
 800878e:	461f      	mov	r7, r3
 8008790:	4605      	mov	r5, r0
 8008792:	f001 fa69 	bl	8009c68 <_localeconv_r>
 8008796:	f8d0 a000 	ldr.w	sl, [r0]
 800879a:	4650      	mov	r0, sl
 800879c:	f7f7 fd20 	bl	80001e0 <strlen>
 80087a0:	2300      	movs	r3, #0
 80087a2:	930a      	str	r3, [sp, #40]	; 0x28
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	9305      	str	r3, [sp, #20]
 80087a8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087b0:	3307      	adds	r3, #7
 80087b2:	f023 0307 	bic.w	r3, r3, #7
 80087b6:	f103 0208 	add.w	r2, r3, #8
 80087ba:	f8c8 2000 	str.w	r2, [r8]
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087ce:	9307      	str	r3, [sp, #28]
 80087d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80087d4:	ee08 0a10 	vmov	s16, r0
 80087d8:	4b9f      	ldr	r3, [pc, #636]	; (8008a58 <_printf_float+0x2dc>)
 80087da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	f7f8 f9ab 	bl	8000b3c <__aeabi_dcmpun>
 80087e6:	bb88      	cbnz	r0, 800884c <_printf_float+0xd0>
 80087e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087ec:	4b9a      	ldr	r3, [pc, #616]	; (8008a58 <_printf_float+0x2dc>)
 80087ee:	f04f 32ff 	mov.w	r2, #4294967295
 80087f2:	f7f8 f985 	bl	8000b00 <__aeabi_dcmple>
 80087f6:	bb48      	cbnz	r0, 800884c <_printf_float+0xd0>
 80087f8:	2200      	movs	r2, #0
 80087fa:	2300      	movs	r3, #0
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f8 f974 	bl	8000aec <__aeabi_dcmplt>
 8008804:	b110      	cbz	r0, 800880c <_printf_float+0x90>
 8008806:	232d      	movs	r3, #45	; 0x2d
 8008808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800880c:	4b93      	ldr	r3, [pc, #588]	; (8008a5c <_printf_float+0x2e0>)
 800880e:	4894      	ldr	r0, [pc, #592]	; (8008a60 <_printf_float+0x2e4>)
 8008810:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008814:	bf94      	ite	ls
 8008816:	4698      	movls	r8, r3
 8008818:	4680      	movhi	r8, r0
 800881a:	2303      	movs	r3, #3
 800881c:	6123      	str	r3, [r4, #16]
 800881e:	9b05      	ldr	r3, [sp, #20]
 8008820:	f023 0204 	bic.w	r2, r3, #4
 8008824:	6022      	str	r2, [r4, #0]
 8008826:	f04f 0900 	mov.w	r9, #0
 800882a:	9700      	str	r7, [sp, #0]
 800882c:	4633      	mov	r3, r6
 800882e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008830:	4621      	mov	r1, r4
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f9d8 	bl	8008be8 <_printf_common>
 8008838:	3001      	adds	r0, #1
 800883a:	f040 8090 	bne.w	800895e <_printf_float+0x1e2>
 800883e:	f04f 30ff 	mov.w	r0, #4294967295
 8008842:	b00d      	add	sp, #52	; 0x34
 8008844:	ecbd 8b02 	vpop	{d8}
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	4640      	mov	r0, r8
 8008852:	4649      	mov	r1, r9
 8008854:	f7f8 f972 	bl	8000b3c <__aeabi_dcmpun>
 8008858:	b140      	cbz	r0, 800886c <_printf_float+0xf0>
 800885a:	464b      	mov	r3, r9
 800885c:	2b00      	cmp	r3, #0
 800885e:	bfbc      	itt	lt
 8008860:	232d      	movlt	r3, #45	; 0x2d
 8008862:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008866:	487f      	ldr	r0, [pc, #508]	; (8008a64 <_printf_float+0x2e8>)
 8008868:	4b7f      	ldr	r3, [pc, #508]	; (8008a68 <_printf_float+0x2ec>)
 800886a:	e7d1      	b.n	8008810 <_printf_float+0x94>
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008872:	9206      	str	r2, [sp, #24]
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	d13f      	bne.n	80088f8 <_printf_float+0x17c>
 8008878:	2306      	movs	r3, #6
 800887a:	6063      	str	r3, [r4, #4]
 800887c:	9b05      	ldr	r3, [sp, #20]
 800887e:	6861      	ldr	r1, [r4, #4]
 8008880:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008884:	2300      	movs	r3, #0
 8008886:	9303      	str	r3, [sp, #12]
 8008888:	ab0a      	add	r3, sp, #40	; 0x28
 800888a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800888e:	ab09      	add	r3, sp, #36	; 0x24
 8008890:	ec49 8b10 	vmov	d0, r8, r9
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	6022      	str	r2, [r4, #0]
 8008898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800889c:	4628      	mov	r0, r5
 800889e:	f7ff fecd 	bl	800863c <__cvt>
 80088a2:	9b06      	ldr	r3, [sp, #24]
 80088a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088a6:	2b47      	cmp	r3, #71	; 0x47
 80088a8:	4680      	mov	r8, r0
 80088aa:	d108      	bne.n	80088be <_printf_float+0x142>
 80088ac:	1cc8      	adds	r0, r1, #3
 80088ae:	db02      	blt.n	80088b6 <_printf_float+0x13a>
 80088b0:	6863      	ldr	r3, [r4, #4]
 80088b2:	4299      	cmp	r1, r3
 80088b4:	dd41      	ble.n	800893a <_printf_float+0x1be>
 80088b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80088ba:	fa5f fb8b 	uxtb.w	fp, fp
 80088be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088c2:	d820      	bhi.n	8008906 <_printf_float+0x18a>
 80088c4:	3901      	subs	r1, #1
 80088c6:	465a      	mov	r2, fp
 80088c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088cc:	9109      	str	r1, [sp, #36]	; 0x24
 80088ce:	f7ff ff17 	bl	8008700 <__exponent>
 80088d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d4:	1813      	adds	r3, r2, r0
 80088d6:	2a01      	cmp	r2, #1
 80088d8:	4681      	mov	r9, r0
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	dc02      	bgt.n	80088e4 <_printf_float+0x168>
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	07d2      	lsls	r2, r2, #31
 80088e2:	d501      	bpl.n	80088e8 <_printf_float+0x16c>
 80088e4:	3301      	adds	r3, #1
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d09c      	beq.n	800882a <_printf_float+0xae>
 80088f0:	232d      	movs	r3, #45	; 0x2d
 80088f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f6:	e798      	b.n	800882a <_printf_float+0xae>
 80088f8:	9a06      	ldr	r2, [sp, #24]
 80088fa:	2a47      	cmp	r2, #71	; 0x47
 80088fc:	d1be      	bne.n	800887c <_printf_float+0x100>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1bc      	bne.n	800887c <_printf_float+0x100>
 8008902:	2301      	movs	r3, #1
 8008904:	e7b9      	b.n	800887a <_printf_float+0xfe>
 8008906:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800890a:	d118      	bne.n	800893e <_printf_float+0x1c2>
 800890c:	2900      	cmp	r1, #0
 800890e:	6863      	ldr	r3, [r4, #4]
 8008910:	dd0b      	ble.n	800892a <_printf_float+0x1ae>
 8008912:	6121      	str	r1, [r4, #16]
 8008914:	b913      	cbnz	r3, 800891c <_printf_float+0x1a0>
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	07d0      	lsls	r0, r2, #31
 800891a:	d502      	bpl.n	8008922 <_printf_float+0x1a6>
 800891c:	3301      	adds	r3, #1
 800891e:	440b      	add	r3, r1
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	65a1      	str	r1, [r4, #88]	; 0x58
 8008924:	f04f 0900 	mov.w	r9, #0
 8008928:	e7de      	b.n	80088e8 <_printf_float+0x16c>
 800892a:	b913      	cbnz	r3, 8008932 <_printf_float+0x1b6>
 800892c:	6822      	ldr	r2, [r4, #0]
 800892e:	07d2      	lsls	r2, r2, #31
 8008930:	d501      	bpl.n	8008936 <_printf_float+0x1ba>
 8008932:	3302      	adds	r3, #2
 8008934:	e7f4      	b.n	8008920 <_printf_float+0x1a4>
 8008936:	2301      	movs	r3, #1
 8008938:	e7f2      	b.n	8008920 <_printf_float+0x1a4>
 800893a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800893e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008940:	4299      	cmp	r1, r3
 8008942:	db05      	blt.n	8008950 <_printf_float+0x1d4>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	6121      	str	r1, [r4, #16]
 8008948:	07d8      	lsls	r0, r3, #31
 800894a:	d5ea      	bpl.n	8008922 <_printf_float+0x1a6>
 800894c:	1c4b      	adds	r3, r1, #1
 800894e:	e7e7      	b.n	8008920 <_printf_float+0x1a4>
 8008950:	2900      	cmp	r1, #0
 8008952:	bfd4      	ite	le
 8008954:	f1c1 0202 	rsble	r2, r1, #2
 8008958:	2201      	movgt	r2, #1
 800895a:	4413      	add	r3, r2
 800895c:	e7e0      	b.n	8008920 <_printf_float+0x1a4>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	055a      	lsls	r2, r3, #21
 8008962:	d407      	bmi.n	8008974 <_printf_float+0x1f8>
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	4642      	mov	r2, r8
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	d12c      	bne.n	80089cc <_printf_float+0x250>
 8008972:	e764      	b.n	800883e <_printf_float+0xc2>
 8008974:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008978:	f240 80e0 	bls.w	8008b3c <_printf_float+0x3c0>
 800897c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008980:	2200      	movs	r2, #0
 8008982:	2300      	movs	r3, #0
 8008984:	f7f8 f8a8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008988:	2800      	cmp	r0, #0
 800898a:	d034      	beq.n	80089f6 <_printf_float+0x27a>
 800898c:	4a37      	ldr	r2, [pc, #220]	; (8008a6c <_printf_float+0x2f0>)
 800898e:	2301      	movs	r3, #1
 8008990:	4631      	mov	r1, r6
 8008992:	4628      	mov	r0, r5
 8008994:	47b8      	blx	r7
 8008996:	3001      	adds	r0, #1
 8008998:	f43f af51 	beq.w	800883e <_printf_float+0xc2>
 800899c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089a0:	429a      	cmp	r2, r3
 80089a2:	db02      	blt.n	80089aa <_printf_float+0x22e>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	07d8      	lsls	r0, r3, #31
 80089a8:	d510      	bpl.n	80089cc <_printf_float+0x250>
 80089aa:	ee18 3a10 	vmov	r3, s16
 80089ae:	4652      	mov	r2, sl
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b8      	blx	r7
 80089b6:	3001      	adds	r0, #1
 80089b8:	f43f af41 	beq.w	800883e <_printf_float+0xc2>
 80089bc:	f04f 0800 	mov.w	r8, #0
 80089c0:	f104 091a 	add.w	r9, r4, #26
 80089c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c6:	3b01      	subs	r3, #1
 80089c8:	4543      	cmp	r3, r8
 80089ca:	dc09      	bgt.n	80089e0 <_printf_float+0x264>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	079b      	lsls	r3, r3, #30
 80089d0:	f100 8105 	bmi.w	8008bde <_printf_float+0x462>
 80089d4:	68e0      	ldr	r0, [r4, #12]
 80089d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d8:	4298      	cmp	r0, r3
 80089da:	bfb8      	it	lt
 80089dc:	4618      	movlt	r0, r3
 80089de:	e730      	b.n	8008842 <_printf_float+0xc6>
 80089e0:	2301      	movs	r3, #1
 80089e2:	464a      	mov	r2, r9
 80089e4:	4631      	mov	r1, r6
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	f43f af27 	beq.w	800883e <_printf_float+0xc2>
 80089f0:	f108 0801 	add.w	r8, r8, #1
 80089f4:	e7e6      	b.n	80089c4 <_printf_float+0x248>
 80089f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dc39      	bgt.n	8008a70 <_printf_float+0x2f4>
 80089fc:	4a1b      	ldr	r2, [pc, #108]	; (8008a6c <_printf_float+0x2f0>)
 80089fe:	2301      	movs	r3, #1
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	f43f af19 	beq.w	800883e <_printf_float+0xc2>
 8008a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a10:	4313      	orrs	r3, r2
 8008a12:	d102      	bne.n	8008a1a <_printf_float+0x29e>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	07d9      	lsls	r1, r3, #31
 8008a18:	d5d8      	bpl.n	80089cc <_printf_float+0x250>
 8008a1a:	ee18 3a10 	vmov	r3, s16
 8008a1e:	4652      	mov	r2, sl
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f af09 	beq.w	800883e <_printf_float+0xc2>
 8008a2c:	f04f 0900 	mov.w	r9, #0
 8008a30:	f104 0a1a 	add.w	sl, r4, #26
 8008a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a36:	425b      	negs	r3, r3
 8008a38:	454b      	cmp	r3, r9
 8008a3a:	dc01      	bgt.n	8008a40 <_printf_float+0x2c4>
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3e:	e792      	b.n	8008966 <_printf_float+0x1ea>
 8008a40:	2301      	movs	r3, #1
 8008a42:	4652      	mov	r2, sl
 8008a44:	4631      	mov	r1, r6
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b8      	blx	r7
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	f43f aef7 	beq.w	800883e <_printf_float+0xc2>
 8008a50:	f109 0901 	add.w	r9, r9, #1
 8008a54:	e7ee      	b.n	8008a34 <_printf_float+0x2b8>
 8008a56:	bf00      	nop
 8008a58:	7fefffff 	.word	0x7fefffff
 8008a5c:	0800b438 	.word	0x0800b438
 8008a60:	0800b43c 	.word	0x0800b43c
 8008a64:	0800b444 	.word	0x0800b444
 8008a68:	0800b440 	.word	0x0800b440
 8008a6c:	0800b448 	.word	0x0800b448
 8008a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bfa8      	it	ge
 8008a78:	461a      	movge	r2, r3
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	4691      	mov	r9, r2
 8008a7e:	dc37      	bgt.n	8008af0 <_printf_float+0x374>
 8008a80:	f04f 0b00 	mov.w	fp, #0
 8008a84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a88:	f104 021a 	add.w	r2, r4, #26
 8008a8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a8e:	9305      	str	r3, [sp, #20]
 8008a90:	eba3 0309 	sub.w	r3, r3, r9
 8008a94:	455b      	cmp	r3, fp
 8008a96:	dc33      	bgt.n	8008b00 <_printf_float+0x384>
 8008a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	db3b      	blt.n	8008b18 <_printf_float+0x39c>
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	07da      	lsls	r2, r3, #31
 8008aa4:	d438      	bmi.n	8008b18 <_printf_float+0x39c>
 8008aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa8:	9b05      	ldr	r3, [sp, #20]
 8008aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	eba2 0901 	sub.w	r9, r2, r1
 8008ab2:	4599      	cmp	r9, r3
 8008ab4:	bfa8      	it	ge
 8008ab6:	4699      	movge	r9, r3
 8008ab8:	f1b9 0f00 	cmp.w	r9, #0
 8008abc:	dc35      	bgt.n	8008b2a <_printf_float+0x3ae>
 8008abe:	f04f 0800 	mov.w	r8, #0
 8008ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ac6:	f104 0a1a 	add.w	sl, r4, #26
 8008aca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	eba3 0309 	sub.w	r3, r3, r9
 8008ad4:	4543      	cmp	r3, r8
 8008ad6:	f77f af79 	ble.w	80089cc <_printf_float+0x250>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4652      	mov	r2, sl
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	f43f aeaa 	beq.w	800883e <_printf_float+0xc2>
 8008aea:	f108 0801 	add.w	r8, r8, #1
 8008aee:	e7ec      	b.n	8008aca <_printf_float+0x34e>
 8008af0:	4613      	mov	r3, r2
 8008af2:	4631      	mov	r1, r6
 8008af4:	4642      	mov	r2, r8
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	d1c0      	bne.n	8008a80 <_printf_float+0x304>
 8008afe:	e69e      	b.n	800883e <_printf_float+0xc2>
 8008b00:	2301      	movs	r3, #1
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	9205      	str	r2, [sp, #20]
 8008b08:	47b8      	blx	r7
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f43f ae97 	beq.w	800883e <_printf_float+0xc2>
 8008b10:	9a05      	ldr	r2, [sp, #20]
 8008b12:	f10b 0b01 	add.w	fp, fp, #1
 8008b16:	e7b9      	b.n	8008a8c <_printf_float+0x310>
 8008b18:	ee18 3a10 	vmov	r3, s16
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b8      	blx	r7
 8008b24:	3001      	adds	r0, #1
 8008b26:	d1be      	bne.n	8008aa6 <_printf_float+0x32a>
 8008b28:	e689      	b.n	800883e <_printf_float+0xc2>
 8008b2a:	9a05      	ldr	r2, [sp, #20]
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	4442      	add	r2, r8
 8008b30:	4631      	mov	r1, r6
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	d1c1      	bne.n	8008abe <_printf_float+0x342>
 8008b3a:	e680      	b.n	800883e <_printf_float+0xc2>
 8008b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b3e:	2a01      	cmp	r2, #1
 8008b40:	dc01      	bgt.n	8008b46 <_printf_float+0x3ca>
 8008b42:	07db      	lsls	r3, r3, #31
 8008b44:	d538      	bpl.n	8008bb8 <_printf_float+0x43c>
 8008b46:	2301      	movs	r3, #1
 8008b48:	4642      	mov	r2, r8
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	f43f ae74 	beq.w	800883e <_printf_float+0xc2>
 8008b56:	ee18 3a10 	vmov	r3, s16
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	47b8      	blx	r7
 8008b62:	3001      	adds	r0, #1
 8008b64:	f43f ae6b 	beq.w	800883e <_printf_float+0xc2>
 8008b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f7f7 ffb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b74:	b9d8      	cbnz	r0, 8008bae <_printf_float+0x432>
 8008b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b78:	f108 0201 	add.w	r2, r8, #1
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	d10e      	bne.n	8008ba6 <_printf_float+0x42a>
 8008b88:	e659      	b.n	800883e <_printf_float+0xc2>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	f43f ae52 	beq.w	800883e <_printf_float+0xc2>
 8008b9a:	f108 0801 	add.w	r8, r8, #1
 8008b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4543      	cmp	r3, r8
 8008ba4:	dcf1      	bgt.n	8008b8a <_printf_float+0x40e>
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bac:	e6dc      	b.n	8008968 <_printf_float+0x1ec>
 8008bae:	f04f 0800 	mov.w	r8, #0
 8008bb2:	f104 0a1a 	add.w	sl, r4, #26
 8008bb6:	e7f2      	b.n	8008b9e <_printf_float+0x422>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	4642      	mov	r2, r8
 8008bbc:	e7df      	b.n	8008b7e <_printf_float+0x402>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	464a      	mov	r2, r9
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f43f ae38 	beq.w	800883e <_printf_float+0xc2>
 8008bce:	f108 0801 	add.w	r8, r8, #1
 8008bd2:	68e3      	ldr	r3, [r4, #12]
 8008bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bd6:	1a5b      	subs	r3, r3, r1
 8008bd8:	4543      	cmp	r3, r8
 8008bda:	dcf0      	bgt.n	8008bbe <_printf_float+0x442>
 8008bdc:	e6fa      	b.n	80089d4 <_printf_float+0x258>
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	f104 0919 	add.w	r9, r4, #25
 8008be6:	e7f4      	b.n	8008bd2 <_printf_float+0x456>

08008be8 <_printf_common>:
 8008be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bec:	4616      	mov	r6, r2
 8008bee:	4699      	mov	r9, r3
 8008bf0:	688a      	ldr	r2, [r1, #8]
 8008bf2:	690b      	ldr	r3, [r1, #16]
 8008bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	bfb8      	it	lt
 8008bfc:	4613      	movlt	r3, r2
 8008bfe:	6033      	str	r3, [r6, #0]
 8008c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c04:	4607      	mov	r7, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	b10a      	cbz	r2, 8008c0e <_printf_common+0x26>
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	6033      	str	r3, [r6, #0]
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	0699      	lsls	r1, r3, #26
 8008c12:	bf42      	ittt	mi
 8008c14:	6833      	ldrmi	r3, [r6, #0]
 8008c16:	3302      	addmi	r3, #2
 8008c18:	6033      	strmi	r3, [r6, #0]
 8008c1a:	6825      	ldr	r5, [r4, #0]
 8008c1c:	f015 0506 	ands.w	r5, r5, #6
 8008c20:	d106      	bne.n	8008c30 <_printf_common+0x48>
 8008c22:	f104 0a19 	add.w	sl, r4, #25
 8008c26:	68e3      	ldr	r3, [r4, #12]
 8008c28:	6832      	ldr	r2, [r6, #0]
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	42ab      	cmp	r3, r5
 8008c2e:	dc26      	bgt.n	8008c7e <_printf_common+0x96>
 8008c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c34:	1e13      	subs	r3, r2, #0
 8008c36:	6822      	ldr	r2, [r4, #0]
 8008c38:	bf18      	it	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	0692      	lsls	r2, r2, #26
 8008c3e:	d42b      	bmi.n	8008c98 <_printf_common+0xb0>
 8008c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c44:	4649      	mov	r1, r9
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c0      	blx	r8
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d01e      	beq.n	8008c8c <_printf_common+0xa4>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	68e5      	ldr	r5, [r4, #12]
 8008c52:	6832      	ldr	r2, [r6, #0]
 8008c54:	f003 0306 	and.w	r3, r3, #6
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	bf08      	it	eq
 8008c5c:	1aad      	subeq	r5, r5, r2
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	6922      	ldr	r2, [r4, #16]
 8008c62:	bf0c      	ite	eq
 8008c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c68:	2500      	movne	r5, #0
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	bfc4      	itt	gt
 8008c6e:	1a9b      	subgt	r3, r3, r2
 8008c70:	18ed      	addgt	r5, r5, r3
 8008c72:	2600      	movs	r6, #0
 8008c74:	341a      	adds	r4, #26
 8008c76:	42b5      	cmp	r5, r6
 8008c78:	d11a      	bne.n	8008cb0 <_printf_common+0xc8>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e008      	b.n	8008c90 <_printf_common+0xa8>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4652      	mov	r2, sl
 8008c82:	4649      	mov	r1, r9
 8008c84:	4638      	mov	r0, r7
 8008c86:	47c0      	blx	r8
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d103      	bne.n	8008c94 <_printf_common+0xac>
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c94:	3501      	adds	r5, #1
 8008c96:	e7c6      	b.n	8008c26 <_printf_common+0x3e>
 8008c98:	18e1      	adds	r1, r4, r3
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	2030      	movs	r0, #48	; 0x30
 8008c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ca2:	4422      	add	r2, r4
 8008ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cac:	3302      	adds	r3, #2
 8008cae:	e7c7      	b.n	8008c40 <_printf_common+0x58>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	47c0      	blx	r8
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d0e6      	beq.n	8008c8c <_printf_common+0xa4>
 8008cbe:	3601      	adds	r6, #1
 8008cc0:	e7d9      	b.n	8008c76 <_printf_common+0x8e>
	...

08008cc4 <_printf_i>:
 8008cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4691      	mov	r9, r2
 8008ccc:	7e27      	ldrb	r7, [r4, #24]
 8008cce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cd0:	2f78      	cmp	r7, #120	; 0x78
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	469a      	mov	sl, r3
 8008cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cda:	d807      	bhi.n	8008cec <_printf_i+0x28>
 8008cdc:	2f62      	cmp	r7, #98	; 0x62
 8008cde:	d80a      	bhi.n	8008cf6 <_printf_i+0x32>
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	f000 80d8 	beq.w	8008e96 <_printf_i+0x1d2>
 8008ce6:	2f58      	cmp	r7, #88	; 0x58
 8008ce8:	f000 80a3 	beq.w	8008e32 <_printf_i+0x16e>
 8008cec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cf4:	e03a      	b.n	8008d6c <_printf_i+0xa8>
 8008cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cfa:	2b15      	cmp	r3, #21
 8008cfc:	d8f6      	bhi.n	8008cec <_printf_i+0x28>
 8008cfe:	a001      	add	r0, pc, #4	; (adr r0, 8008d04 <_printf_i+0x40>)
 8008d00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d04:	08008d5d 	.word	0x08008d5d
 8008d08:	08008d71 	.word	0x08008d71
 8008d0c:	08008ced 	.word	0x08008ced
 8008d10:	08008ced 	.word	0x08008ced
 8008d14:	08008ced 	.word	0x08008ced
 8008d18:	08008ced 	.word	0x08008ced
 8008d1c:	08008d71 	.word	0x08008d71
 8008d20:	08008ced 	.word	0x08008ced
 8008d24:	08008ced 	.word	0x08008ced
 8008d28:	08008ced 	.word	0x08008ced
 8008d2c:	08008ced 	.word	0x08008ced
 8008d30:	08008e7d 	.word	0x08008e7d
 8008d34:	08008da1 	.word	0x08008da1
 8008d38:	08008e5f 	.word	0x08008e5f
 8008d3c:	08008ced 	.word	0x08008ced
 8008d40:	08008ced 	.word	0x08008ced
 8008d44:	08008e9f 	.word	0x08008e9f
 8008d48:	08008ced 	.word	0x08008ced
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008ced 	.word	0x08008ced
 8008d54:	08008ced 	.word	0x08008ced
 8008d58:	08008e67 	.word	0x08008e67
 8008d5c:	680b      	ldr	r3, [r1, #0]
 8008d5e:	1d1a      	adds	r2, r3, #4
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	600a      	str	r2, [r1, #0]
 8008d64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e0a3      	b.n	8008eb8 <_printf_i+0x1f4>
 8008d70:	6825      	ldr	r5, [r4, #0]
 8008d72:	6808      	ldr	r0, [r1, #0]
 8008d74:	062e      	lsls	r6, r5, #24
 8008d76:	f100 0304 	add.w	r3, r0, #4
 8008d7a:	d50a      	bpl.n	8008d92 <_printf_i+0xce>
 8008d7c:	6805      	ldr	r5, [r0, #0]
 8008d7e:	600b      	str	r3, [r1, #0]
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	da03      	bge.n	8008d8c <_printf_i+0xc8>
 8008d84:	232d      	movs	r3, #45	; 0x2d
 8008d86:	426d      	negs	r5, r5
 8008d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d8c:	485e      	ldr	r0, [pc, #376]	; (8008f08 <_printf_i+0x244>)
 8008d8e:	230a      	movs	r3, #10
 8008d90:	e019      	b.n	8008dc6 <_printf_i+0x102>
 8008d92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d96:	6805      	ldr	r5, [r0, #0]
 8008d98:	600b      	str	r3, [r1, #0]
 8008d9a:	bf18      	it	ne
 8008d9c:	b22d      	sxthne	r5, r5
 8008d9e:	e7ef      	b.n	8008d80 <_printf_i+0xbc>
 8008da0:	680b      	ldr	r3, [r1, #0]
 8008da2:	6825      	ldr	r5, [r4, #0]
 8008da4:	1d18      	adds	r0, r3, #4
 8008da6:	6008      	str	r0, [r1, #0]
 8008da8:	0628      	lsls	r0, r5, #24
 8008daa:	d501      	bpl.n	8008db0 <_printf_i+0xec>
 8008dac:	681d      	ldr	r5, [r3, #0]
 8008dae:	e002      	b.n	8008db6 <_printf_i+0xf2>
 8008db0:	0669      	lsls	r1, r5, #25
 8008db2:	d5fb      	bpl.n	8008dac <_printf_i+0xe8>
 8008db4:	881d      	ldrh	r5, [r3, #0]
 8008db6:	4854      	ldr	r0, [pc, #336]	; (8008f08 <_printf_i+0x244>)
 8008db8:	2f6f      	cmp	r7, #111	; 0x6f
 8008dba:	bf0c      	ite	eq
 8008dbc:	2308      	moveq	r3, #8
 8008dbe:	230a      	movne	r3, #10
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dc6:	6866      	ldr	r6, [r4, #4]
 8008dc8:	60a6      	str	r6, [r4, #8]
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	bfa2      	ittt	ge
 8008dce:	6821      	ldrge	r1, [r4, #0]
 8008dd0:	f021 0104 	bicge.w	r1, r1, #4
 8008dd4:	6021      	strge	r1, [r4, #0]
 8008dd6:	b90d      	cbnz	r5, 8008ddc <_printf_i+0x118>
 8008dd8:	2e00      	cmp	r6, #0
 8008dda:	d04d      	beq.n	8008e78 <_printf_i+0x1b4>
 8008ddc:	4616      	mov	r6, r2
 8008dde:	fbb5 f1f3 	udiv	r1, r5, r3
 8008de2:	fb03 5711 	mls	r7, r3, r1, r5
 8008de6:	5dc7      	ldrb	r7, [r0, r7]
 8008de8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dec:	462f      	mov	r7, r5
 8008dee:	42bb      	cmp	r3, r7
 8008df0:	460d      	mov	r5, r1
 8008df2:	d9f4      	bls.n	8008dde <_printf_i+0x11a>
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d10b      	bne.n	8008e10 <_printf_i+0x14c>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	07df      	lsls	r7, r3, #31
 8008dfc:	d508      	bpl.n	8008e10 <_printf_i+0x14c>
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	6861      	ldr	r1, [r4, #4]
 8008e02:	4299      	cmp	r1, r3
 8008e04:	bfde      	ittt	le
 8008e06:	2330      	movle	r3, #48	; 0x30
 8008e08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e10:	1b92      	subs	r2, r2, r6
 8008e12:	6122      	str	r2, [r4, #16]
 8008e14:	f8cd a000 	str.w	sl, [sp]
 8008e18:	464b      	mov	r3, r9
 8008e1a:	aa03      	add	r2, sp, #12
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4640      	mov	r0, r8
 8008e20:	f7ff fee2 	bl	8008be8 <_printf_common>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d14c      	bne.n	8008ec2 <_printf_i+0x1fe>
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2c:	b004      	add	sp, #16
 8008e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e32:	4835      	ldr	r0, [pc, #212]	; (8008f08 <_printf_i+0x244>)
 8008e34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	680e      	ldr	r6, [r1, #0]
 8008e3c:	061f      	lsls	r7, r3, #24
 8008e3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e42:	600e      	str	r6, [r1, #0]
 8008e44:	d514      	bpl.n	8008e70 <_printf_i+0x1ac>
 8008e46:	07d9      	lsls	r1, r3, #31
 8008e48:	bf44      	itt	mi
 8008e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e4e:	6023      	strmi	r3, [r4, #0]
 8008e50:	b91d      	cbnz	r5, 8008e5a <_printf_i+0x196>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	f023 0320 	bic.w	r3, r3, #32
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	2310      	movs	r3, #16
 8008e5c:	e7b0      	b.n	8008dc0 <_printf_i+0xfc>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	f043 0320 	orr.w	r3, r3, #32
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	2378      	movs	r3, #120	; 0x78
 8008e68:	4828      	ldr	r0, [pc, #160]	; (8008f0c <_printf_i+0x248>)
 8008e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e6e:	e7e3      	b.n	8008e38 <_printf_i+0x174>
 8008e70:	065e      	lsls	r6, r3, #25
 8008e72:	bf48      	it	mi
 8008e74:	b2ad      	uxthmi	r5, r5
 8008e76:	e7e6      	b.n	8008e46 <_printf_i+0x182>
 8008e78:	4616      	mov	r6, r2
 8008e7a:	e7bb      	b.n	8008df4 <_printf_i+0x130>
 8008e7c:	680b      	ldr	r3, [r1, #0]
 8008e7e:	6826      	ldr	r6, [r4, #0]
 8008e80:	6960      	ldr	r0, [r4, #20]
 8008e82:	1d1d      	adds	r5, r3, #4
 8008e84:	600d      	str	r5, [r1, #0]
 8008e86:	0635      	lsls	r5, r6, #24
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	d501      	bpl.n	8008e90 <_printf_i+0x1cc>
 8008e8c:	6018      	str	r0, [r3, #0]
 8008e8e:	e002      	b.n	8008e96 <_printf_i+0x1d2>
 8008e90:	0671      	lsls	r1, r6, #25
 8008e92:	d5fb      	bpl.n	8008e8c <_printf_i+0x1c8>
 8008e94:	8018      	strh	r0, [r3, #0]
 8008e96:	2300      	movs	r3, #0
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	4616      	mov	r6, r2
 8008e9c:	e7ba      	b.n	8008e14 <_printf_i+0x150>
 8008e9e:	680b      	ldr	r3, [r1, #0]
 8008ea0:	1d1a      	adds	r2, r3, #4
 8008ea2:	600a      	str	r2, [r1, #0]
 8008ea4:	681e      	ldr	r6, [r3, #0]
 8008ea6:	6862      	ldr	r2, [r4, #4]
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7f7 f9a0 	bl	80001f0 <memchr>
 8008eb0:	b108      	cbz	r0, 8008eb6 <_printf_i+0x1f2>
 8008eb2:	1b80      	subs	r0, r0, r6
 8008eb4:	6060      	str	r0, [r4, #4]
 8008eb6:	6863      	ldr	r3, [r4, #4]
 8008eb8:	6123      	str	r3, [r4, #16]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec0:	e7a8      	b.n	8008e14 <_printf_i+0x150>
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	4632      	mov	r2, r6
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	4640      	mov	r0, r8
 8008eca:	47d0      	blx	sl
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d0ab      	beq.n	8008e28 <_printf_i+0x164>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	079b      	lsls	r3, r3, #30
 8008ed4:	d413      	bmi.n	8008efe <_printf_i+0x23a>
 8008ed6:	68e0      	ldr	r0, [r4, #12]
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	4298      	cmp	r0, r3
 8008edc:	bfb8      	it	lt
 8008ede:	4618      	movlt	r0, r3
 8008ee0:	e7a4      	b.n	8008e2c <_printf_i+0x168>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4640      	mov	r0, r8
 8008eea:	47d0      	blx	sl
 8008eec:	3001      	adds	r0, #1
 8008eee:	d09b      	beq.n	8008e28 <_printf_i+0x164>
 8008ef0:	3501      	adds	r5, #1
 8008ef2:	68e3      	ldr	r3, [r4, #12]
 8008ef4:	9903      	ldr	r1, [sp, #12]
 8008ef6:	1a5b      	subs	r3, r3, r1
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	dcf2      	bgt.n	8008ee2 <_printf_i+0x21e>
 8008efc:	e7eb      	b.n	8008ed6 <_printf_i+0x212>
 8008efe:	2500      	movs	r5, #0
 8008f00:	f104 0619 	add.w	r6, r4, #25
 8008f04:	e7f5      	b.n	8008ef2 <_printf_i+0x22e>
 8008f06:	bf00      	nop
 8008f08:	0800b44a 	.word	0x0800b44a
 8008f0c:	0800b45b 	.word	0x0800b45b

08008f10 <sniprintf>:
 8008f10:	b40c      	push	{r2, r3}
 8008f12:	b530      	push	{r4, r5, lr}
 8008f14:	4b17      	ldr	r3, [pc, #92]	; (8008f74 <sniprintf+0x64>)
 8008f16:	1e0c      	subs	r4, r1, #0
 8008f18:	681d      	ldr	r5, [r3, #0]
 8008f1a:	b09d      	sub	sp, #116	; 0x74
 8008f1c:	da08      	bge.n	8008f30 <sniprintf+0x20>
 8008f1e:	238b      	movs	r3, #139	; 0x8b
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	f04f 30ff 	mov.w	r0, #4294967295
 8008f26:	b01d      	add	sp, #116	; 0x74
 8008f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f2c:	b002      	add	sp, #8
 8008f2e:	4770      	bx	lr
 8008f30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f38:	bf14      	ite	ne
 8008f3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f3e:	4623      	moveq	r3, r4
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	9307      	str	r3, [sp, #28]
 8008f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f48:	9002      	str	r0, [sp, #8]
 8008f4a:	9006      	str	r0, [sp, #24]
 8008f4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f52:	ab21      	add	r3, sp, #132	; 0x84
 8008f54:	a902      	add	r1, sp, #8
 8008f56:	4628      	mov	r0, r5
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	f001 fb33 	bl	800a5c4 <_svfiprintf_r>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	bfbc      	itt	lt
 8008f62:	238b      	movlt	r3, #139	; 0x8b
 8008f64:	602b      	strlt	r3, [r5, #0]
 8008f66:	2c00      	cmp	r4, #0
 8008f68:	d0dd      	beq.n	8008f26 <sniprintf+0x16>
 8008f6a:	9b02      	ldr	r3, [sp, #8]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	701a      	strb	r2, [r3, #0]
 8008f70:	e7d9      	b.n	8008f26 <sniprintf+0x16>
 8008f72:	bf00      	nop
 8008f74:	20000264 	.word	0x20000264

08008f78 <quorem>:
 8008f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	6903      	ldr	r3, [r0, #16]
 8008f7e:	690c      	ldr	r4, [r1, #16]
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	4607      	mov	r7, r0
 8008f84:	f2c0 8081 	blt.w	800908a <quorem+0x112>
 8008f88:	3c01      	subs	r4, #1
 8008f8a:	f101 0814 	add.w	r8, r1, #20
 8008f8e:	f100 0514 	add.w	r5, r0, #20
 8008f92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fac:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fb0:	d331      	bcc.n	8009016 <quorem+0x9e>
 8008fb2:	f04f 0e00 	mov.w	lr, #0
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	46ac      	mov	ip, r5
 8008fba:	46f2      	mov	sl, lr
 8008fbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fc0:	b293      	uxth	r3, r2
 8008fc2:	fb06 e303 	mla	r3, r6, r3, lr
 8008fc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	ebaa 0303 	sub.w	r3, sl, r3
 8008fd0:	0c12      	lsrs	r2, r2, #16
 8008fd2:	f8dc a000 	ldr.w	sl, [ip]
 8008fd6:	fb06 e202 	mla	r2, r6, r2, lr
 8008fda:	fa13 f38a 	uxtah	r3, r3, sl
 8008fde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fe2:	fa1f fa82 	uxth.w	sl, r2
 8008fe6:	f8dc 2000 	ldr.w	r2, [ip]
 8008fea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008fee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ff8:	4581      	cmp	r9, r0
 8008ffa:	f84c 3b04 	str.w	r3, [ip], #4
 8008ffe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009002:	d2db      	bcs.n	8008fbc <quorem+0x44>
 8009004:	f855 300b 	ldr.w	r3, [r5, fp]
 8009008:	b92b      	cbnz	r3, 8009016 <quorem+0x9e>
 800900a:	9b01      	ldr	r3, [sp, #4]
 800900c:	3b04      	subs	r3, #4
 800900e:	429d      	cmp	r5, r3
 8009010:	461a      	mov	r2, r3
 8009012:	d32e      	bcc.n	8009072 <quorem+0xfa>
 8009014:	613c      	str	r4, [r7, #16]
 8009016:	4638      	mov	r0, r7
 8009018:	f001 f8be 	bl	800a198 <__mcmp>
 800901c:	2800      	cmp	r0, #0
 800901e:	db24      	blt.n	800906a <quorem+0xf2>
 8009020:	3601      	adds	r6, #1
 8009022:	4628      	mov	r0, r5
 8009024:	f04f 0c00 	mov.w	ip, #0
 8009028:	f858 2b04 	ldr.w	r2, [r8], #4
 800902c:	f8d0 e000 	ldr.w	lr, [r0]
 8009030:	b293      	uxth	r3, r2
 8009032:	ebac 0303 	sub.w	r3, ip, r3
 8009036:	0c12      	lsrs	r2, r2, #16
 8009038:	fa13 f38e 	uxtah	r3, r3, lr
 800903c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009044:	b29b      	uxth	r3, r3
 8009046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800904a:	45c1      	cmp	r9, r8
 800904c:	f840 3b04 	str.w	r3, [r0], #4
 8009050:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009054:	d2e8      	bcs.n	8009028 <quorem+0xb0>
 8009056:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800905a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800905e:	b922      	cbnz	r2, 800906a <quorem+0xf2>
 8009060:	3b04      	subs	r3, #4
 8009062:	429d      	cmp	r5, r3
 8009064:	461a      	mov	r2, r3
 8009066:	d30a      	bcc.n	800907e <quorem+0x106>
 8009068:	613c      	str	r4, [r7, #16]
 800906a:	4630      	mov	r0, r6
 800906c:	b003      	add	sp, #12
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009072:	6812      	ldr	r2, [r2, #0]
 8009074:	3b04      	subs	r3, #4
 8009076:	2a00      	cmp	r2, #0
 8009078:	d1cc      	bne.n	8009014 <quorem+0x9c>
 800907a:	3c01      	subs	r4, #1
 800907c:	e7c7      	b.n	800900e <quorem+0x96>
 800907e:	6812      	ldr	r2, [r2, #0]
 8009080:	3b04      	subs	r3, #4
 8009082:	2a00      	cmp	r2, #0
 8009084:	d1f0      	bne.n	8009068 <quorem+0xf0>
 8009086:	3c01      	subs	r4, #1
 8009088:	e7eb      	b.n	8009062 <quorem+0xea>
 800908a:	2000      	movs	r0, #0
 800908c:	e7ee      	b.n	800906c <quorem+0xf4>
	...

08009090 <_dtoa_r>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	ed2d 8b02 	vpush	{d8}
 8009098:	ec57 6b10 	vmov	r6, r7, d0
 800909c:	b095      	sub	sp, #84	; 0x54
 800909e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090a4:	9105      	str	r1, [sp, #20]
 80090a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80090aa:	4604      	mov	r4, r0
 80090ac:	9209      	str	r2, [sp, #36]	; 0x24
 80090ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80090b0:	b975      	cbnz	r5, 80090d0 <_dtoa_r+0x40>
 80090b2:	2010      	movs	r0, #16
 80090b4:	f000 fddc 	bl	8009c70 <malloc>
 80090b8:	4602      	mov	r2, r0
 80090ba:	6260      	str	r0, [r4, #36]	; 0x24
 80090bc:	b920      	cbnz	r0, 80090c8 <_dtoa_r+0x38>
 80090be:	4bb2      	ldr	r3, [pc, #712]	; (8009388 <_dtoa_r+0x2f8>)
 80090c0:	21ea      	movs	r1, #234	; 0xea
 80090c2:	48b2      	ldr	r0, [pc, #712]	; (800938c <_dtoa_r+0x2fc>)
 80090c4:	f001 fb8e 	bl	800a7e4 <__assert_func>
 80090c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090cc:	6005      	str	r5, [r0, #0]
 80090ce:	60c5      	str	r5, [r0, #12]
 80090d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d2:	6819      	ldr	r1, [r3, #0]
 80090d4:	b151      	cbz	r1, 80090ec <_dtoa_r+0x5c>
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	604a      	str	r2, [r1, #4]
 80090da:	2301      	movs	r3, #1
 80090dc:	4093      	lsls	r3, r2
 80090de:	608b      	str	r3, [r1, #8]
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fe1b 	bl	8009d1c <_Bfree>
 80090e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	1e3b      	subs	r3, r7, #0
 80090ee:	bfb9      	ittee	lt
 80090f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80090f4:	9303      	strlt	r3, [sp, #12]
 80090f6:	2300      	movge	r3, #0
 80090f8:	f8c8 3000 	strge.w	r3, [r8]
 80090fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009100:	4ba3      	ldr	r3, [pc, #652]	; (8009390 <_dtoa_r+0x300>)
 8009102:	bfbc      	itt	lt
 8009104:	2201      	movlt	r2, #1
 8009106:	f8c8 2000 	strlt.w	r2, [r8]
 800910a:	ea33 0309 	bics.w	r3, r3, r9
 800910e:	d11b      	bne.n	8009148 <_dtoa_r+0xb8>
 8009110:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009112:	f242 730f 	movw	r3, #9999	; 0x270f
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800911c:	4333      	orrs	r3, r6
 800911e:	f000 857a 	beq.w	8009c16 <_dtoa_r+0xb86>
 8009122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009124:	b963      	cbnz	r3, 8009140 <_dtoa_r+0xb0>
 8009126:	4b9b      	ldr	r3, [pc, #620]	; (8009394 <_dtoa_r+0x304>)
 8009128:	e024      	b.n	8009174 <_dtoa_r+0xe4>
 800912a:	4b9b      	ldr	r3, [pc, #620]	; (8009398 <_dtoa_r+0x308>)
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	3308      	adds	r3, #8
 8009130:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	9800      	ldr	r0, [sp, #0]
 8009136:	b015      	add	sp, #84	; 0x54
 8009138:	ecbd 8b02 	vpop	{d8}
 800913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009140:	4b94      	ldr	r3, [pc, #592]	; (8009394 <_dtoa_r+0x304>)
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	3303      	adds	r3, #3
 8009146:	e7f3      	b.n	8009130 <_dtoa_r+0xa0>
 8009148:	ed9d 7b02 	vldr	d7, [sp, #8]
 800914c:	2200      	movs	r2, #0
 800914e:	ec51 0b17 	vmov	r0, r1, d7
 8009152:	2300      	movs	r3, #0
 8009154:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009158:	f7f7 fcbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800915c:	4680      	mov	r8, r0
 800915e:	b158      	cbz	r0, 8009178 <_dtoa_r+0xe8>
 8009160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009162:	2301      	movs	r3, #1
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 8551 	beq.w	8009c10 <_dtoa_r+0xb80>
 800916e:	488b      	ldr	r0, [pc, #556]	; (800939c <_dtoa_r+0x30c>)
 8009170:	6018      	str	r0, [r3, #0]
 8009172:	1e43      	subs	r3, r0, #1
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	e7dd      	b.n	8009134 <_dtoa_r+0xa4>
 8009178:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800917c:	aa12      	add	r2, sp, #72	; 0x48
 800917e:	a913      	add	r1, sp, #76	; 0x4c
 8009180:	4620      	mov	r0, r4
 8009182:	f001 f8ad 	bl	800a2e0 <__d2b>
 8009186:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800918a:	4683      	mov	fp, r0
 800918c:	2d00      	cmp	r5, #0
 800918e:	d07c      	beq.n	800928a <_dtoa_r+0x1fa>
 8009190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009192:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800919a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800919e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091aa:	4b7d      	ldr	r3, [pc, #500]	; (80093a0 <_dtoa_r+0x310>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	4630      	mov	r0, r6
 80091b0:	4639      	mov	r1, r7
 80091b2:	f7f7 f871 	bl	8000298 <__aeabi_dsub>
 80091b6:	a36e      	add	r3, pc, #440	; (adr r3, 8009370 <_dtoa_r+0x2e0>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	f7f7 fa24 	bl	8000608 <__aeabi_dmul>
 80091c0:	a36d      	add	r3, pc, #436	; (adr r3, 8009378 <_dtoa_r+0x2e8>)
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 f869 	bl	800029c <__adddf3>
 80091ca:	4606      	mov	r6, r0
 80091cc:	4628      	mov	r0, r5
 80091ce:	460f      	mov	r7, r1
 80091d0:	f7f7 f9b0 	bl	8000534 <__aeabi_i2d>
 80091d4:	a36a      	add	r3, pc, #424	; (adr r3, 8009380 <_dtoa_r+0x2f0>)
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f7f7 fa15 	bl	8000608 <__aeabi_dmul>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4630      	mov	r0, r6
 80091e4:	4639      	mov	r1, r7
 80091e6:	f7f7 f859 	bl	800029c <__adddf3>
 80091ea:	4606      	mov	r6, r0
 80091ec:	460f      	mov	r7, r1
 80091ee:	f7f7 fcbb 	bl	8000b68 <__aeabi_d2iz>
 80091f2:	2200      	movs	r2, #0
 80091f4:	4682      	mov	sl, r0
 80091f6:	2300      	movs	r3, #0
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 fc76 	bl	8000aec <__aeabi_dcmplt>
 8009200:	b148      	cbz	r0, 8009216 <_dtoa_r+0x186>
 8009202:	4650      	mov	r0, sl
 8009204:	f7f7 f996 	bl	8000534 <__aeabi_i2d>
 8009208:	4632      	mov	r2, r6
 800920a:	463b      	mov	r3, r7
 800920c:	f7f7 fc64 	bl	8000ad8 <__aeabi_dcmpeq>
 8009210:	b908      	cbnz	r0, 8009216 <_dtoa_r+0x186>
 8009212:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009216:	f1ba 0f16 	cmp.w	sl, #22
 800921a:	d854      	bhi.n	80092c6 <_dtoa_r+0x236>
 800921c:	4b61      	ldr	r3, [pc, #388]	; (80093a4 <_dtoa_r+0x314>)
 800921e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800922a:	f7f7 fc5f 	bl	8000aec <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	d04b      	beq.n	80092ca <_dtoa_r+0x23a>
 8009232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009236:	2300      	movs	r3, #0
 8009238:	930e      	str	r3, [sp, #56]	; 0x38
 800923a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800923c:	1b5d      	subs	r5, r3, r5
 800923e:	1e6b      	subs	r3, r5, #1
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	bf43      	ittte	mi
 8009244:	2300      	movmi	r3, #0
 8009246:	f1c5 0801 	rsbmi	r8, r5, #1
 800924a:	9304      	strmi	r3, [sp, #16]
 800924c:	f04f 0800 	movpl.w	r8, #0
 8009250:	f1ba 0f00 	cmp.w	sl, #0
 8009254:	db3b      	blt.n	80092ce <_dtoa_r+0x23e>
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800925c:	4453      	add	r3, sl
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	2300      	movs	r3, #0
 8009262:	9306      	str	r3, [sp, #24]
 8009264:	9b05      	ldr	r3, [sp, #20]
 8009266:	2b09      	cmp	r3, #9
 8009268:	d869      	bhi.n	800933e <_dtoa_r+0x2ae>
 800926a:	2b05      	cmp	r3, #5
 800926c:	bfc4      	itt	gt
 800926e:	3b04      	subgt	r3, #4
 8009270:	9305      	strgt	r3, [sp, #20]
 8009272:	9b05      	ldr	r3, [sp, #20]
 8009274:	f1a3 0302 	sub.w	r3, r3, #2
 8009278:	bfcc      	ite	gt
 800927a:	2500      	movgt	r5, #0
 800927c:	2501      	movle	r5, #1
 800927e:	2b03      	cmp	r3, #3
 8009280:	d869      	bhi.n	8009356 <_dtoa_r+0x2c6>
 8009282:	e8df f003 	tbb	[pc, r3]
 8009286:	4e2c      	.short	0x4e2c
 8009288:	5a4c      	.short	0x5a4c
 800928a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800928e:	441d      	add	r5, r3
 8009290:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009294:	2b20      	cmp	r3, #32
 8009296:	bfc1      	itttt	gt
 8009298:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800929c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80092a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80092a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092a8:	bfda      	itte	le
 80092aa:	f1c3 0320 	rsble	r3, r3, #32
 80092ae:	fa06 f003 	lslle.w	r0, r6, r3
 80092b2:	4318      	orrgt	r0, r3
 80092b4:	f7f7 f92e 	bl	8000514 <__aeabi_ui2d>
 80092b8:	2301      	movs	r3, #1
 80092ba:	4606      	mov	r6, r0
 80092bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80092c0:	3d01      	subs	r5, #1
 80092c2:	9310      	str	r3, [sp, #64]	; 0x40
 80092c4:	e771      	b.n	80091aa <_dtoa_r+0x11a>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e7b6      	b.n	8009238 <_dtoa_r+0x1a8>
 80092ca:	900e      	str	r0, [sp, #56]	; 0x38
 80092cc:	e7b5      	b.n	800923a <_dtoa_r+0x1aa>
 80092ce:	f1ca 0300 	rsb	r3, sl, #0
 80092d2:	9306      	str	r3, [sp, #24]
 80092d4:	2300      	movs	r3, #0
 80092d6:	eba8 080a 	sub.w	r8, r8, sl
 80092da:	930d      	str	r3, [sp, #52]	; 0x34
 80092dc:	e7c2      	b.n	8009264 <_dtoa_r+0x1d4>
 80092de:	2300      	movs	r3, #0
 80092e0:	9308      	str	r3, [sp, #32]
 80092e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dc39      	bgt.n	800935c <_dtoa_r+0x2cc>
 80092e8:	f04f 0901 	mov.w	r9, #1
 80092ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80092f0:	464b      	mov	r3, r9
 80092f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80092f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092f8:	2200      	movs	r2, #0
 80092fa:	6042      	str	r2, [r0, #4]
 80092fc:	2204      	movs	r2, #4
 80092fe:	f102 0614 	add.w	r6, r2, #20
 8009302:	429e      	cmp	r6, r3
 8009304:	6841      	ldr	r1, [r0, #4]
 8009306:	d92f      	bls.n	8009368 <_dtoa_r+0x2d8>
 8009308:	4620      	mov	r0, r4
 800930a:	f000 fcc7 	bl	8009c9c <_Balloc>
 800930e:	9000      	str	r0, [sp, #0]
 8009310:	2800      	cmp	r0, #0
 8009312:	d14b      	bne.n	80093ac <_dtoa_r+0x31c>
 8009314:	4b24      	ldr	r3, [pc, #144]	; (80093a8 <_dtoa_r+0x318>)
 8009316:	4602      	mov	r2, r0
 8009318:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800931c:	e6d1      	b.n	80090c2 <_dtoa_r+0x32>
 800931e:	2301      	movs	r3, #1
 8009320:	e7de      	b.n	80092e0 <_dtoa_r+0x250>
 8009322:	2300      	movs	r3, #0
 8009324:	9308      	str	r3, [sp, #32]
 8009326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009328:	eb0a 0903 	add.w	r9, sl, r3
 800932c:	f109 0301 	add.w	r3, r9, #1
 8009330:	2b01      	cmp	r3, #1
 8009332:	9301      	str	r3, [sp, #4]
 8009334:	bfb8      	it	lt
 8009336:	2301      	movlt	r3, #1
 8009338:	e7dd      	b.n	80092f6 <_dtoa_r+0x266>
 800933a:	2301      	movs	r3, #1
 800933c:	e7f2      	b.n	8009324 <_dtoa_r+0x294>
 800933e:	2501      	movs	r5, #1
 8009340:	2300      	movs	r3, #0
 8009342:	9305      	str	r3, [sp, #20]
 8009344:	9508      	str	r5, [sp, #32]
 8009346:	f04f 39ff 	mov.w	r9, #4294967295
 800934a:	2200      	movs	r2, #0
 800934c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009350:	2312      	movs	r3, #18
 8009352:	9209      	str	r2, [sp, #36]	; 0x24
 8009354:	e7cf      	b.n	80092f6 <_dtoa_r+0x266>
 8009356:	2301      	movs	r3, #1
 8009358:	9308      	str	r3, [sp, #32]
 800935a:	e7f4      	b.n	8009346 <_dtoa_r+0x2b6>
 800935c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009360:	f8cd 9004 	str.w	r9, [sp, #4]
 8009364:	464b      	mov	r3, r9
 8009366:	e7c6      	b.n	80092f6 <_dtoa_r+0x266>
 8009368:	3101      	adds	r1, #1
 800936a:	6041      	str	r1, [r0, #4]
 800936c:	0052      	lsls	r2, r2, #1
 800936e:	e7c6      	b.n	80092fe <_dtoa_r+0x26e>
 8009370:	636f4361 	.word	0x636f4361
 8009374:	3fd287a7 	.word	0x3fd287a7
 8009378:	8b60c8b3 	.word	0x8b60c8b3
 800937c:	3fc68a28 	.word	0x3fc68a28
 8009380:	509f79fb 	.word	0x509f79fb
 8009384:	3fd34413 	.word	0x3fd34413
 8009388:	0800b479 	.word	0x0800b479
 800938c:	0800b490 	.word	0x0800b490
 8009390:	7ff00000 	.word	0x7ff00000
 8009394:	0800b475 	.word	0x0800b475
 8009398:	0800b46c 	.word	0x0800b46c
 800939c:	0800b449 	.word	0x0800b449
 80093a0:	3ff80000 	.word	0x3ff80000
 80093a4:	0800b588 	.word	0x0800b588
 80093a8:	0800b4ef 	.word	0x0800b4ef
 80093ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ae:	9a00      	ldr	r2, [sp, #0]
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	9b01      	ldr	r3, [sp, #4]
 80093b4:	2b0e      	cmp	r3, #14
 80093b6:	f200 80ad 	bhi.w	8009514 <_dtoa_r+0x484>
 80093ba:	2d00      	cmp	r5, #0
 80093bc:	f000 80aa 	beq.w	8009514 <_dtoa_r+0x484>
 80093c0:	f1ba 0f00 	cmp.w	sl, #0
 80093c4:	dd36      	ble.n	8009434 <_dtoa_r+0x3a4>
 80093c6:	4ac3      	ldr	r2, [pc, #780]	; (80096d4 <_dtoa_r+0x644>)
 80093c8:	f00a 030f 	and.w	r3, sl, #15
 80093cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093d0:	ed93 7b00 	vldr	d7, [r3]
 80093d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80093d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80093dc:	eeb0 8a47 	vmov.f32	s16, s14
 80093e0:	eef0 8a67 	vmov.f32	s17, s15
 80093e4:	d016      	beq.n	8009414 <_dtoa_r+0x384>
 80093e6:	4bbc      	ldr	r3, [pc, #752]	; (80096d8 <_dtoa_r+0x648>)
 80093e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093f0:	f7f7 fa34 	bl	800085c <__aeabi_ddiv>
 80093f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f8:	f007 070f 	and.w	r7, r7, #15
 80093fc:	2503      	movs	r5, #3
 80093fe:	4eb6      	ldr	r6, [pc, #728]	; (80096d8 <_dtoa_r+0x648>)
 8009400:	b957      	cbnz	r7, 8009418 <_dtoa_r+0x388>
 8009402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009406:	ec53 2b18 	vmov	r2, r3, d8
 800940a:	f7f7 fa27 	bl	800085c <__aeabi_ddiv>
 800940e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009412:	e029      	b.n	8009468 <_dtoa_r+0x3d8>
 8009414:	2502      	movs	r5, #2
 8009416:	e7f2      	b.n	80093fe <_dtoa_r+0x36e>
 8009418:	07f9      	lsls	r1, r7, #31
 800941a:	d508      	bpl.n	800942e <_dtoa_r+0x39e>
 800941c:	ec51 0b18 	vmov	r0, r1, d8
 8009420:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009424:	f7f7 f8f0 	bl	8000608 <__aeabi_dmul>
 8009428:	ec41 0b18 	vmov	d8, r0, r1
 800942c:	3501      	adds	r5, #1
 800942e:	107f      	asrs	r7, r7, #1
 8009430:	3608      	adds	r6, #8
 8009432:	e7e5      	b.n	8009400 <_dtoa_r+0x370>
 8009434:	f000 80a6 	beq.w	8009584 <_dtoa_r+0x4f4>
 8009438:	f1ca 0600 	rsb	r6, sl, #0
 800943c:	4ba5      	ldr	r3, [pc, #660]	; (80096d4 <_dtoa_r+0x644>)
 800943e:	4fa6      	ldr	r7, [pc, #664]	; (80096d8 <_dtoa_r+0x648>)
 8009440:	f006 020f 	and.w	r2, r6, #15
 8009444:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009450:	f7f7 f8da 	bl	8000608 <__aeabi_dmul>
 8009454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009458:	1136      	asrs	r6, r6, #4
 800945a:	2300      	movs	r3, #0
 800945c:	2502      	movs	r5, #2
 800945e:	2e00      	cmp	r6, #0
 8009460:	f040 8085 	bne.w	800956e <_dtoa_r+0x4de>
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1d2      	bne.n	800940e <_dtoa_r+0x37e>
 8009468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 808c 	beq.w	8009588 <_dtoa_r+0x4f8>
 8009470:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009474:	4b99      	ldr	r3, [pc, #612]	; (80096dc <_dtoa_r+0x64c>)
 8009476:	2200      	movs	r2, #0
 8009478:	4630      	mov	r0, r6
 800947a:	4639      	mov	r1, r7
 800947c:	f7f7 fb36 	bl	8000aec <__aeabi_dcmplt>
 8009480:	2800      	cmp	r0, #0
 8009482:	f000 8081 	beq.w	8009588 <_dtoa_r+0x4f8>
 8009486:	9b01      	ldr	r3, [sp, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d07d      	beq.n	8009588 <_dtoa_r+0x4f8>
 800948c:	f1b9 0f00 	cmp.w	r9, #0
 8009490:	dd3c      	ble.n	800950c <_dtoa_r+0x47c>
 8009492:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009496:	9307      	str	r3, [sp, #28]
 8009498:	2200      	movs	r2, #0
 800949a:	4b91      	ldr	r3, [pc, #580]	; (80096e0 <_dtoa_r+0x650>)
 800949c:	4630      	mov	r0, r6
 800949e:	4639      	mov	r1, r7
 80094a0:	f7f7 f8b2 	bl	8000608 <__aeabi_dmul>
 80094a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a8:	3501      	adds	r5, #1
 80094aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80094ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80094b2:	4628      	mov	r0, r5
 80094b4:	f7f7 f83e 	bl	8000534 <__aeabi_i2d>
 80094b8:	4632      	mov	r2, r6
 80094ba:	463b      	mov	r3, r7
 80094bc:	f7f7 f8a4 	bl	8000608 <__aeabi_dmul>
 80094c0:	4b88      	ldr	r3, [pc, #544]	; (80096e4 <_dtoa_r+0x654>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	f7f6 feea 	bl	800029c <__adddf3>
 80094c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80094cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094d0:	9303      	str	r3, [sp, #12]
 80094d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d15c      	bne.n	8009592 <_dtoa_r+0x502>
 80094d8:	4b83      	ldr	r3, [pc, #524]	; (80096e8 <_dtoa_r+0x658>)
 80094da:	2200      	movs	r2, #0
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f7f6 feda 	bl	8000298 <__aeabi_dsub>
 80094e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094e8:	4606      	mov	r6, r0
 80094ea:	460f      	mov	r7, r1
 80094ec:	f7f7 fb1c 	bl	8000b28 <__aeabi_dcmpgt>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	f040 8296 	bne.w	8009a22 <_dtoa_r+0x992>
 80094f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80094fa:	4630      	mov	r0, r6
 80094fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009500:	4639      	mov	r1, r7
 8009502:	f7f7 faf3 	bl	8000aec <__aeabi_dcmplt>
 8009506:	2800      	cmp	r0, #0
 8009508:	f040 8288 	bne.w	8009a1c <_dtoa_r+0x98c>
 800950c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009510:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009514:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009516:	2b00      	cmp	r3, #0
 8009518:	f2c0 8158 	blt.w	80097cc <_dtoa_r+0x73c>
 800951c:	f1ba 0f0e 	cmp.w	sl, #14
 8009520:	f300 8154 	bgt.w	80097cc <_dtoa_r+0x73c>
 8009524:	4b6b      	ldr	r3, [pc, #428]	; (80096d4 <_dtoa_r+0x644>)
 8009526:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800952a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800952e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009530:	2b00      	cmp	r3, #0
 8009532:	f280 80e3 	bge.w	80096fc <_dtoa_r+0x66c>
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f300 80df 	bgt.w	80096fc <_dtoa_r+0x66c>
 800953e:	f040 826d 	bne.w	8009a1c <_dtoa_r+0x98c>
 8009542:	4b69      	ldr	r3, [pc, #420]	; (80096e8 <_dtoa_r+0x658>)
 8009544:	2200      	movs	r2, #0
 8009546:	4640      	mov	r0, r8
 8009548:	4649      	mov	r1, r9
 800954a:	f7f7 f85d 	bl	8000608 <__aeabi_dmul>
 800954e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009552:	f7f7 fadf 	bl	8000b14 <__aeabi_dcmpge>
 8009556:	9e01      	ldr	r6, [sp, #4]
 8009558:	4637      	mov	r7, r6
 800955a:	2800      	cmp	r0, #0
 800955c:	f040 8243 	bne.w	80099e6 <_dtoa_r+0x956>
 8009560:	9d00      	ldr	r5, [sp, #0]
 8009562:	2331      	movs	r3, #49	; 0x31
 8009564:	f805 3b01 	strb.w	r3, [r5], #1
 8009568:	f10a 0a01 	add.w	sl, sl, #1
 800956c:	e23f      	b.n	80099ee <_dtoa_r+0x95e>
 800956e:	07f2      	lsls	r2, r6, #31
 8009570:	d505      	bpl.n	800957e <_dtoa_r+0x4ee>
 8009572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009576:	f7f7 f847 	bl	8000608 <__aeabi_dmul>
 800957a:	3501      	adds	r5, #1
 800957c:	2301      	movs	r3, #1
 800957e:	1076      	asrs	r6, r6, #1
 8009580:	3708      	adds	r7, #8
 8009582:	e76c      	b.n	800945e <_dtoa_r+0x3ce>
 8009584:	2502      	movs	r5, #2
 8009586:	e76f      	b.n	8009468 <_dtoa_r+0x3d8>
 8009588:	9b01      	ldr	r3, [sp, #4]
 800958a:	f8cd a01c 	str.w	sl, [sp, #28]
 800958e:	930c      	str	r3, [sp, #48]	; 0x30
 8009590:	e78d      	b.n	80094ae <_dtoa_r+0x41e>
 8009592:	9900      	ldr	r1, [sp, #0]
 8009594:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009598:	4b4e      	ldr	r3, [pc, #312]	; (80096d4 <_dtoa_r+0x644>)
 800959a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800959e:	4401      	add	r1, r0
 80095a0:	9102      	str	r1, [sp, #8]
 80095a2:	9908      	ldr	r1, [sp, #32]
 80095a4:	eeb0 8a47 	vmov.f32	s16, s14
 80095a8:	eef0 8a67 	vmov.f32	s17, s15
 80095ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095b4:	2900      	cmp	r1, #0
 80095b6:	d045      	beq.n	8009644 <_dtoa_r+0x5b4>
 80095b8:	494c      	ldr	r1, [pc, #304]	; (80096ec <_dtoa_r+0x65c>)
 80095ba:	2000      	movs	r0, #0
 80095bc:	f7f7 f94e 	bl	800085c <__aeabi_ddiv>
 80095c0:	ec53 2b18 	vmov	r2, r3, d8
 80095c4:	f7f6 fe68 	bl	8000298 <__aeabi_dsub>
 80095c8:	9d00      	ldr	r5, [sp, #0]
 80095ca:	ec41 0b18 	vmov	d8, r0, r1
 80095ce:	4639      	mov	r1, r7
 80095d0:	4630      	mov	r0, r6
 80095d2:	f7f7 fac9 	bl	8000b68 <__aeabi_d2iz>
 80095d6:	900c      	str	r0, [sp, #48]	; 0x30
 80095d8:	f7f6 ffac 	bl	8000534 <__aeabi_i2d>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4630      	mov	r0, r6
 80095e2:	4639      	mov	r1, r7
 80095e4:	f7f6 fe58 	bl	8000298 <__aeabi_dsub>
 80095e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095ea:	3330      	adds	r3, #48	; 0x30
 80095ec:	f805 3b01 	strb.w	r3, [r5], #1
 80095f0:	ec53 2b18 	vmov	r2, r3, d8
 80095f4:	4606      	mov	r6, r0
 80095f6:	460f      	mov	r7, r1
 80095f8:	f7f7 fa78 	bl	8000aec <__aeabi_dcmplt>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d165      	bne.n	80096cc <_dtoa_r+0x63c>
 8009600:	4632      	mov	r2, r6
 8009602:	463b      	mov	r3, r7
 8009604:	4935      	ldr	r1, [pc, #212]	; (80096dc <_dtoa_r+0x64c>)
 8009606:	2000      	movs	r0, #0
 8009608:	f7f6 fe46 	bl	8000298 <__aeabi_dsub>
 800960c:	ec53 2b18 	vmov	r2, r3, d8
 8009610:	f7f7 fa6c 	bl	8000aec <__aeabi_dcmplt>
 8009614:	2800      	cmp	r0, #0
 8009616:	f040 80b9 	bne.w	800978c <_dtoa_r+0x6fc>
 800961a:	9b02      	ldr	r3, [sp, #8]
 800961c:	429d      	cmp	r5, r3
 800961e:	f43f af75 	beq.w	800950c <_dtoa_r+0x47c>
 8009622:	4b2f      	ldr	r3, [pc, #188]	; (80096e0 <_dtoa_r+0x650>)
 8009624:	ec51 0b18 	vmov	r0, r1, d8
 8009628:	2200      	movs	r2, #0
 800962a:	f7f6 ffed 	bl	8000608 <__aeabi_dmul>
 800962e:	4b2c      	ldr	r3, [pc, #176]	; (80096e0 <_dtoa_r+0x650>)
 8009630:	ec41 0b18 	vmov	d8, r0, r1
 8009634:	2200      	movs	r2, #0
 8009636:	4630      	mov	r0, r6
 8009638:	4639      	mov	r1, r7
 800963a:	f7f6 ffe5 	bl	8000608 <__aeabi_dmul>
 800963e:	4606      	mov	r6, r0
 8009640:	460f      	mov	r7, r1
 8009642:	e7c4      	b.n	80095ce <_dtoa_r+0x53e>
 8009644:	ec51 0b17 	vmov	r0, r1, d7
 8009648:	f7f6 ffde 	bl	8000608 <__aeabi_dmul>
 800964c:	9b02      	ldr	r3, [sp, #8]
 800964e:	9d00      	ldr	r5, [sp, #0]
 8009650:	930c      	str	r3, [sp, #48]	; 0x30
 8009652:	ec41 0b18 	vmov	d8, r0, r1
 8009656:	4639      	mov	r1, r7
 8009658:	4630      	mov	r0, r6
 800965a:	f7f7 fa85 	bl	8000b68 <__aeabi_d2iz>
 800965e:	9011      	str	r0, [sp, #68]	; 0x44
 8009660:	f7f6 ff68 	bl	8000534 <__aeabi_i2d>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4630      	mov	r0, r6
 800966a:	4639      	mov	r1, r7
 800966c:	f7f6 fe14 	bl	8000298 <__aeabi_dsub>
 8009670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009672:	3330      	adds	r3, #48	; 0x30
 8009674:	f805 3b01 	strb.w	r3, [r5], #1
 8009678:	9b02      	ldr	r3, [sp, #8]
 800967a:	429d      	cmp	r5, r3
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	f04f 0200 	mov.w	r2, #0
 8009684:	d134      	bne.n	80096f0 <_dtoa_r+0x660>
 8009686:	4b19      	ldr	r3, [pc, #100]	; (80096ec <_dtoa_r+0x65c>)
 8009688:	ec51 0b18 	vmov	r0, r1, d8
 800968c:	f7f6 fe06 	bl	800029c <__adddf3>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4630      	mov	r0, r6
 8009696:	4639      	mov	r1, r7
 8009698:	f7f7 fa46 	bl	8000b28 <__aeabi_dcmpgt>
 800969c:	2800      	cmp	r0, #0
 800969e:	d175      	bne.n	800978c <_dtoa_r+0x6fc>
 80096a0:	ec53 2b18 	vmov	r2, r3, d8
 80096a4:	4911      	ldr	r1, [pc, #68]	; (80096ec <_dtoa_r+0x65c>)
 80096a6:	2000      	movs	r0, #0
 80096a8:	f7f6 fdf6 	bl	8000298 <__aeabi_dsub>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4630      	mov	r0, r6
 80096b2:	4639      	mov	r1, r7
 80096b4:	f7f7 fa1a 	bl	8000aec <__aeabi_dcmplt>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	f43f af27 	beq.w	800950c <_dtoa_r+0x47c>
 80096be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096c0:	1e6b      	subs	r3, r5, #1
 80096c2:	930c      	str	r3, [sp, #48]	; 0x30
 80096c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096c8:	2b30      	cmp	r3, #48	; 0x30
 80096ca:	d0f8      	beq.n	80096be <_dtoa_r+0x62e>
 80096cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80096d0:	e04a      	b.n	8009768 <_dtoa_r+0x6d8>
 80096d2:	bf00      	nop
 80096d4:	0800b588 	.word	0x0800b588
 80096d8:	0800b560 	.word	0x0800b560
 80096dc:	3ff00000 	.word	0x3ff00000
 80096e0:	40240000 	.word	0x40240000
 80096e4:	401c0000 	.word	0x401c0000
 80096e8:	40140000 	.word	0x40140000
 80096ec:	3fe00000 	.word	0x3fe00000
 80096f0:	4baf      	ldr	r3, [pc, #700]	; (80099b0 <_dtoa_r+0x920>)
 80096f2:	f7f6 ff89 	bl	8000608 <__aeabi_dmul>
 80096f6:	4606      	mov	r6, r0
 80096f8:	460f      	mov	r7, r1
 80096fa:	e7ac      	b.n	8009656 <_dtoa_r+0x5c6>
 80096fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009700:	9d00      	ldr	r5, [sp, #0]
 8009702:	4642      	mov	r2, r8
 8009704:	464b      	mov	r3, r9
 8009706:	4630      	mov	r0, r6
 8009708:	4639      	mov	r1, r7
 800970a:	f7f7 f8a7 	bl	800085c <__aeabi_ddiv>
 800970e:	f7f7 fa2b 	bl	8000b68 <__aeabi_d2iz>
 8009712:	9002      	str	r0, [sp, #8]
 8009714:	f7f6 ff0e 	bl	8000534 <__aeabi_i2d>
 8009718:	4642      	mov	r2, r8
 800971a:	464b      	mov	r3, r9
 800971c:	f7f6 ff74 	bl	8000608 <__aeabi_dmul>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4630      	mov	r0, r6
 8009726:	4639      	mov	r1, r7
 8009728:	f7f6 fdb6 	bl	8000298 <__aeabi_dsub>
 800972c:	9e02      	ldr	r6, [sp, #8]
 800972e:	9f01      	ldr	r7, [sp, #4]
 8009730:	3630      	adds	r6, #48	; 0x30
 8009732:	f805 6b01 	strb.w	r6, [r5], #1
 8009736:	9e00      	ldr	r6, [sp, #0]
 8009738:	1bae      	subs	r6, r5, r6
 800973a:	42b7      	cmp	r7, r6
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	d137      	bne.n	80097b2 <_dtoa_r+0x722>
 8009742:	f7f6 fdab 	bl	800029c <__adddf3>
 8009746:	4642      	mov	r2, r8
 8009748:	464b      	mov	r3, r9
 800974a:	4606      	mov	r6, r0
 800974c:	460f      	mov	r7, r1
 800974e:	f7f7 f9eb 	bl	8000b28 <__aeabi_dcmpgt>
 8009752:	b9c8      	cbnz	r0, 8009788 <_dtoa_r+0x6f8>
 8009754:	4642      	mov	r2, r8
 8009756:	464b      	mov	r3, r9
 8009758:	4630      	mov	r0, r6
 800975a:	4639      	mov	r1, r7
 800975c:	f7f7 f9bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009760:	b110      	cbz	r0, 8009768 <_dtoa_r+0x6d8>
 8009762:	9b02      	ldr	r3, [sp, #8]
 8009764:	07d9      	lsls	r1, r3, #31
 8009766:	d40f      	bmi.n	8009788 <_dtoa_r+0x6f8>
 8009768:	4620      	mov	r0, r4
 800976a:	4659      	mov	r1, fp
 800976c:	f000 fad6 	bl	8009d1c <_Bfree>
 8009770:	2300      	movs	r3, #0
 8009772:	702b      	strb	r3, [r5, #0]
 8009774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009776:	f10a 0001 	add.w	r0, sl, #1
 800977a:	6018      	str	r0, [r3, #0]
 800977c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800977e:	2b00      	cmp	r3, #0
 8009780:	f43f acd8 	beq.w	8009134 <_dtoa_r+0xa4>
 8009784:	601d      	str	r5, [r3, #0]
 8009786:	e4d5      	b.n	8009134 <_dtoa_r+0xa4>
 8009788:	f8cd a01c 	str.w	sl, [sp, #28]
 800978c:	462b      	mov	r3, r5
 800978e:	461d      	mov	r5, r3
 8009790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009794:	2a39      	cmp	r2, #57	; 0x39
 8009796:	d108      	bne.n	80097aa <_dtoa_r+0x71a>
 8009798:	9a00      	ldr	r2, [sp, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d1f7      	bne.n	800978e <_dtoa_r+0x6fe>
 800979e:	9a07      	ldr	r2, [sp, #28]
 80097a0:	9900      	ldr	r1, [sp, #0]
 80097a2:	3201      	adds	r2, #1
 80097a4:	9207      	str	r2, [sp, #28]
 80097a6:	2230      	movs	r2, #48	; 0x30
 80097a8:	700a      	strb	r2, [r1, #0]
 80097aa:	781a      	ldrb	r2, [r3, #0]
 80097ac:	3201      	adds	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]
 80097b0:	e78c      	b.n	80096cc <_dtoa_r+0x63c>
 80097b2:	4b7f      	ldr	r3, [pc, #508]	; (80099b0 <_dtoa_r+0x920>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	f7f6 ff27 	bl	8000608 <__aeabi_dmul>
 80097ba:	2200      	movs	r2, #0
 80097bc:	2300      	movs	r3, #0
 80097be:	4606      	mov	r6, r0
 80097c0:	460f      	mov	r7, r1
 80097c2:	f7f7 f989 	bl	8000ad8 <__aeabi_dcmpeq>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d09b      	beq.n	8009702 <_dtoa_r+0x672>
 80097ca:	e7cd      	b.n	8009768 <_dtoa_r+0x6d8>
 80097cc:	9a08      	ldr	r2, [sp, #32]
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	f000 80c4 	beq.w	800995c <_dtoa_r+0x8cc>
 80097d4:	9a05      	ldr	r2, [sp, #20]
 80097d6:	2a01      	cmp	r2, #1
 80097d8:	f300 80a8 	bgt.w	800992c <_dtoa_r+0x89c>
 80097dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097de:	2a00      	cmp	r2, #0
 80097e0:	f000 80a0 	beq.w	8009924 <_dtoa_r+0x894>
 80097e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097e8:	9e06      	ldr	r6, [sp, #24]
 80097ea:	4645      	mov	r5, r8
 80097ec:	9a04      	ldr	r2, [sp, #16]
 80097ee:	2101      	movs	r1, #1
 80097f0:	441a      	add	r2, r3
 80097f2:	4620      	mov	r0, r4
 80097f4:	4498      	add	r8, r3
 80097f6:	9204      	str	r2, [sp, #16]
 80097f8:	f000 fb4c 	bl	8009e94 <__i2b>
 80097fc:	4607      	mov	r7, r0
 80097fe:	2d00      	cmp	r5, #0
 8009800:	dd0b      	ble.n	800981a <_dtoa_r+0x78a>
 8009802:	9b04      	ldr	r3, [sp, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	dd08      	ble.n	800981a <_dtoa_r+0x78a>
 8009808:	42ab      	cmp	r3, r5
 800980a:	9a04      	ldr	r2, [sp, #16]
 800980c:	bfa8      	it	ge
 800980e:	462b      	movge	r3, r5
 8009810:	eba8 0803 	sub.w	r8, r8, r3
 8009814:	1aed      	subs	r5, r5, r3
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	9b06      	ldr	r3, [sp, #24]
 800981c:	b1fb      	cbz	r3, 800985e <_dtoa_r+0x7ce>
 800981e:	9b08      	ldr	r3, [sp, #32]
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 809f 	beq.w	8009964 <_dtoa_r+0x8d4>
 8009826:	2e00      	cmp	r6, #0
 8009828:	dd11      	ble.n	800984e <_dtoa_r+0x7be>
 800982a:	4639      	mov	r1, r7
 800982c:	4632      	mov	r2, r6
 800982e:	4620      	mov	r0, r4
 8009830:	f000 fbec 	bl	800a00c <__pow5mult>
 8009834:	465a      	mov	r2, fp
 8009836:	4601      	mov	r1, r0
 8009838:	4607      	mov	r7, r0
 800983a:	4620      	mov	r0, r4
 800983c:	f000 fb40 	bl	8009ec0 <__multiply>
 8009840:	4659      	mov	r1, fp
 8009842:	9007      	str	r0, [sp, #28]
 8009844:	4620      	mov	r0, r4
 8009846:	f000 fa69 	bl	8009d1c <_Bfree>
 800984a:	9b07      	ldr	r3, [sp, #28]
 800984c:	469b      	mov	fp, r3
 800984e:	9b06      	ldr	r3, [sp, #24]
 8009850:	1b9a      	subs	r2, r3, r6
 8009852:	d004      	beq.n	800985e <_dtoa_r+0x7ce>
 8009854:	4659      	mov	r1, fp
 8009856:	4620      	mov	r0, r4
 8009858:	f000 fbd8 	bl	800a00c <__pow5mult>
 800985c:	4683      	mov	fp, r0
 800985e:	2101      	movs	r1, #1
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fb17 	bl	8009e94 <__i2b>
 8009866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009868:	2b00      	cmp	r3, #0
 800986a:	4606      	mov	r6, r0
 800986c:	dd7c      	ble.n	8009968 <_dtoa_r+0x8d8>
 800986e:	461a      	mov	r2, r3
 8009870:	4601      	mov	r1, r0
 8009872:	4620      	mov	r0, r4
 8009874:	f000 fbca 	bl	800a00c <__pow5mult>
 8009878:	9b05      	ldr	r3, [sp, #20]
 800987a:	2b01      	cmp	r3, #1
 800987c:	4606      	mov	r6, r0
 800987e:	dd76      	ble.n	800996e <_dtoa_r+0x8de>
 8009880:	2300      	movs	r3, #0
 8009882:	9306      	str	r3, [sp, #24]
 8009884:	6933      	ldr	r3, [r6, #16]
 8009886:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800988a:	6918      	ldr	r0, [r3, #16]
 800988c:	f000 fab2 	bl	8009df4 <__hi0bits>
 8009890:	f1c0 0020 	rsb	r0, r0, #32
 8009894:	9b04      	ldr	r3, [sp, #16]
 8009896:	4418      	add	r0, r3
 8009898:	f010 001f 	ands.w	r0, r0, #31
 800989c:	f000 8086 	beq.w	80099ac <_dtoa_r+0x91c>
 80098a0:	f1c0 0320 	rsb	r3, r0, #32
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	dd7f      	ble.n	80099a8 <_dtoa_r+0x918>
 80098a8:	f1c0 001c 	rsb	r0, r0, #28
 80098ac:	9b04      	ldr	r3, [sp, #16]
 80098ae:	4403      	add	r3, r0
 80098b0:	4480      	add	r8, r0
 80098b2:	4405      	add	r5, r0
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	f1b8 0f00 	cmp.w	r8, #0
 80098ba:	dd05      	ble.n	80098c8 <_dtoa_r+0x838>
 80098bc:	4659      	mov	r1, fp
 80098be:	4642      	mov	r2, r8
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 fbfd 	bl	800a0c0 <__lshift>
 80098c6:	4683      	mov	fp, r0
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	dd05      	ble.n	80098da <_dtoa_r+0x84a>
 80098ce:	4631      	mov	r1, r6
 80098d0:	461a      	mov	r2, r3
 80098d2:	4620      	mov	r0, r4
 80098d4:	f000 fbf4 	bl	800a0c0 <__lshift>
 80098d8:	4606      	mov	r6, r0
 80098da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d069      	beq.n	80099b4 <_dtoa_r+0x924>
 80098e0:	4631      	mov	r1, r6
 80098e2:	4658      	mov	r0, fp
 80098e4:	f000 fc58 	bl	800a198 <__mcmp>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	da63      	bge.n	80099b4 <_dtoa_r+0x924>
 80098ec:	2300      	movs	r3, #0
 80098ee:	4659      	mov	r1, fp
 80098f0:	220a      	movs	r2, #10
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fa34 	bl	8009d60 <__multadd>
 80098f8:	9b08      	ldr	r3, [sp, #32]
 80098fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098fe:	4683      	mov	fp, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 818f 	beq.w	8009c24 <_dtoa_r+0xb94>
 8009906:	4639      	mov	r1, r7
 8009908:	2300      	movs	r3, #0
 800990a:	220a      	movs	r2, #10
 800990c:	4620      	mov	r0, r4
 800990e:	f000 fa27 	bl	8009d60 <__multadd>
 8009912:	f1b9 0f00 	cmp.w	r9, #0
 8009916:	4607      	mov	r7, r0
 8009918:	f300 808e 	bgt.w	8009a38 <_dtoa_r+0x9a8>
 800991c:	9b05      	ldr	r3, [sp, #20]
 800991e:	2b02      	cmp	r3, #2
 8009920:	dc50      	bgt.n	80099c4 <_dtoa_r+0x934>
 8009922:	e089      	b.n	8009a38 <_dtoa_r+0x9a8>
 8009924:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800992a:	e75d      	b.n	80097e8 <_dtoa_r+0x758>
 800992c:	9b01      	ldr	r3, [sp, #4]
 800992e:	1e5e      	subs	r6, r3, #1
 8009930:	9b06      	ldr	r3, [sp, #24]
 8009932:	42b3      	cmp	r3, r6
 8009934:	bfbf      	itttt	lt
 8009936:	9b06      	ldrlt	r3, [sp, #24]
 8009938:	9606      	strlt	r6, [sp, #24]
 800993a:	1af2      	sublt	r2, r6, r3
 800993c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800993e:	bfb6      	itet	lt
 8009940:	189b      	addlt	r3, r3, r2
 8009942:	1b9e      	subge	r6, r3, r6
 8009944:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	bfb8      	it	lt
 800994a:	2600      	movlt	r6, #0
 800994c:	2b00      	cmp	r3, #0
 800994e:	bfb5      	itete	lt
 8009950:	eba8 0503 	sublt.w	r5, r8, r3
 8009954:	9b01      	ldrge	r3, [sp, #4]
 8009956:	2300      	movlt	r3, #0
 8009958:	4645      	movge	r5, r8
 800995a:	e747      	b.n	80097ec <_dtoa_r+0x75c>
 800995c:	9e06      	ldr	r6, [sp, #24]
 800995e:	9f08      	ldr	r7, [sp, #32]
 8009960:	4645      	mov	r5, r8
 8009962:	e74c      	b.n	80097fe <_dtoa_r+0x76e>
 8009964:	9a06      	ldr	r2, [sp, #24]
 8009966:	e775      	b.n	8009854 <_dtoa_r+0x7c4>
 8009968:	9b05      	ldr	r3, [sp, #20]
 800996a:	2b01      	cmp	r3, #1
 800996c:	dc18      	bgt.n	80099a0 <_dtoa_r+0x910>
 800996e:	9b02      	ldr	r3, [sp, #8]
 8009970:	b9b3      	cbnz	r3, 80099a0 <_dtoa_r+0x910>
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009978:	b9a3      	cbnz	r3, 80099a4 <_dtoa_r+0x914>
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009980:	0d1b      	lsrs	r3, r3, #20
 8009982:	051b      	lsls	r3, r3, #20
 8009984:	b12b      	cbz	r3, 8009992 <_dtoa_r+0x902>
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	3301      	adds	r3, #1
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	f108 0801 	add.w	r8, r8, #1
 8009990:	2301      	movs	r3, #1
 8009992:	9306      	str	r3, [sp, #24]
 8009994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009996:	2b00      	cmp	r3, #0
 8009998:	f47f af74 	bne.w	8009884 <_dtoa_r+0x7f4>
 800999c:	2001      	movs	r0, #1
 800999e:	e779      	b.n	8009894 <_dtoa_r+0x804>
 80099a0:	2300      	movs	r3, #0
 80099a2:	e7f6      	b.n	8009992 <_dtoa_r+0x902>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	e7f4      	b.n	8009992 <_dtoa_r+0x902>
 80099a8:	d085      	beq.n	80098b6 <_dtoa_r+0x826>
 80099aa:	4618      	mov	r0, r3
 80099ac:	301c      	adds	r0, #28
 80099ae:	e77d      	b.n	80098ac <_dtoa_r+0x81c>
 80099b0:	40240000 	.word	0x40240000
 80099b4:	9b01      	ldr	r3, [sp, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dc38      	bgt.n	8009a2c <_dtoa_r+0x99c>
 80099ba:	9b05      	ldr	r3, [sp, #20]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	dd35      	ble.n	8009a2c <_dtoa_r+0x99c>
 80099c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80099c4:	f1b9 0f00 	cmp.w	r9, #0
 80099c8:	d10d      	bne.n	80099e6 <_dtoa_r+0x956>
 80099ca:	4631      	mov	r1, r6
 80099cc:	464b      	mov	r3, r9
 80099ce:	2205      	movs	r2, #5
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 f9c5 	bl	8009d60 <__multadd>
 80099d6:	4601      	mov	r1, r0
 80099d8:	4606      	mov	r6, r0
 80099da:	4658      	mov	r0, fp
 80099dc:	f000 fbdc 	bl	800a198 <__mcmp>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	f73f adbd 	bgt.w	8009560 <_dtoa_r+0x4d0>
 80099e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e8:	9d00      	ldr	r5, [sp, #0]
 80099ea:	ea6f 0a03 	mvn.w	sl, r3
 80099ee:	f04f 0800 	mov.w	r8, #0
 80099f2:	4631      	mov	r1, r6
 80099f4:	4620      	mov	r0, r4
 80099f6:	f000 f991 	bl	8009d1c <_Bfree>
 80099fa:	2f00      	cmp	r7, #0
 80099fc:	f43f aeb4 	beq.w	8009768 <_dtoa_r+0x6d8>
 8009a00:	f1b8 0f00 	cmp.w	r8, #0
 8009a04:	d005      	beq.n	8009a12 <_dtoa_r+0x982>
 8009a06:	45b8      	cmp	r8, r7
 8009a08:	d003      	beq.n	8009a12 <_dtoa_r+0x982>
 8009a0a:	4641      	mov	r1, r8
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 f985 	bl	8009d1c <_Bfree>
 8009a12:	4639      	mov	r1, r7
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 f981 	bl	8009d1c <_Bfree>
 8009a1a:	e6a5      	b.n	8009768 <_dtoa_r+0x6d8>
 8009a1c:	2600      	movs	r6, #0
 8009a1e:	4637      	mov	r7, r6
 8009a20:	e7e1      	b.n	80099e6 <_dtoa_r+0x956>
 8009a22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009a24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a28:	4637      	mov	r7, r6
 8009a2a:	e599      	b.n	8009560 <_dtoa_r+0x4d0>
 8009a2c:	9b08      	ldr	r3, [sp, #32]
 8009a2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 80fd 	beq.w	8009c32 <_dtoa_r+0xba2>
 8009a38:	2d00      	cmp	r5, #0
 8009a3a:	dd05      	ble.n	8009a48 <_dtoa_r+0x9b8>
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4620      	mov	r0, r4
 8009a42:	f000 fb3d 	bl	800a0c0 <__lshift>
 8009a46:	4607      	mov	r7, r0
 8009a48:	9b06      	ldr	r3, [sp, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d05c      	beq.n	8009b08 <_dtoa_r+0xa78>
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 f923 	bl	8009c9c <_Balloc>
 8009a56:	4605      	mov	r5, r0
 8009a58:	b928      	cbnz	r0, 8009a66 <_dtoa_r+0x9d6>
 8009a5a:	4b80      	ldr	r3, [pc, #512]	; (8009c5c <_dtoa_r+0xbcc>)
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a62:	f7ff bb2e 	b.w	80090c2 <_dtoa_r+0x32>
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	3202      	adds	r2, #2
 8009a6a:	0092      	lsls	r2, r2, #2
 8009a6c:	f107 010c 	add.w	r1, r7, #12
 8009a70:	300c      	adds	r0, #12
 8009a72:	f000 f905 	bl	8009c80 <memcpy>
 8009a76:	2201      	movs	r2, #1
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 fb20 	bl	800a0c0 <__lshift>
 8009a80:	9b00      	ldr	r3, [sp, #0]
 8009a82:	3301      	adds	r3, #1
 8009a84:	9301      	str	r3, [sp, #4]
 8009a86:	9b00      	ldr	r3, [sp, #0]
 8009a88:	444b      	add	r3, r9
 8009a8a:	9307      	str	r3, [sp, #28]
 8009a8c:	9b02      	ldr	r3, [sp, #8]
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	46b8      	mov	r8, r7
 8009a94:	9306      	str	r3, [sp, #24]
 8009a96:	4607      	mov	r7, r0
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	4658      	mov	r0, fp
 8009aa0:	9302      	str	r3, [sp, #8]
 8009aa2:	f7ff fa69 	bl	8008f78 <quorem>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	3330      	adds	r3, #48	; 0x30
 8009aaa:	9004      	str	r0, [sp, #16]
 8009aac:	4641      	mov	r1, r8
 8009aae:	4658      	mov	r0, fp
 8009ab0:	9308      	str	r3, [sp, #32]
 8009ab2:	f000 fb71 	bl	800a198 <__mcmp>
 8009ab6:	463a      	mov	r2, r7
 8009ab8:	4681      	mov	r9, r0
 8009aba:	4631      	mov	r1, r6
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 fb87 	bl	800a1d0 <__mdiff>
 8009ac2:	68c2      	ldr	r2, [r0, #12]
 8009ac4:	9b08      	ldr	r3, [sp, #32]
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	bb02      	cbnz	r2, 8009b0c <_dtoa_r+0xa7c>
 8009aca:	4601      	mov	r1, r0
 8009acc:	4658      	mov	r0, fp
 8009ace:	f000 fb63 	bl	800a198 <__mcmp>
 8009ad2:	9b08      	ldr	r3, [sp, #32]
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	4620      	mov	r0, r4
 8009ada:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009ade:	f000 f91d 	bl	8009d1c <_Bfree>
 8009ae2:	9b05      	ldr	r3, [sp, #20]
 8009ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae6:	9d01      	ldr	r5, [sp, #4]
 8009ae8:	ea43 0102 	orr.w	r1, r3, r2
 8009aec:	9b06      	ldr	r3, [sp, #24]
 8009aee:	430b      	orrs	r3, r1
 8009af0:	9b08      	ldr	r3, [sp, #32]
 8009af2:	d10d      	bne.n	8009b10 <_dtoa_r+0xa80>
 8009af4:	2b39      	cmp	r3, #57	; 0x39
 8009af6:	d029      	beq.n	8009b4c <_dtoa_r+0xabc>
 8009af8:	f1b9 0f00 	cmp.w	r9, #0
 8009afc:	dd01      	ble.n	8009b02 <_dtoa_r+0xa72>
 8009afe:	9b04      	ldr	r3, [sp, #16]
 8009b00:	3331      	adds	r3, #49	; 0x31
 8009b02:	9a02      	ldr	r2, [sp, #8]
 8009b04:	7013      	strb	r3, [r2, #0]
 8009b06:	e774      	b.n	80099f2 <_dtoa_r+0x962>
 8009b08:	4638      	mov	r0, r7
 8009b0a:	e7b9      	b.n	8009a80 <_dtoa_r+0x9f0>
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	e7e2      	b.n	8009ad6 <_dtoa_r+0xa46>
 8009b10:	f1b9 0f00 	cmp.w	r9, #0
 8009b14:	db06      	blt.n	8009b24 <_dtoa_r+0xa94>
 8009b16:	9905      	ldr	r1, [sp, #20]
 8009b18:	ea41 0909 	orr.w	r9, r1, r9
 8009b1c:	9906      	ldr	r1, [sp, #24]
 8009b1e:	ea59 0101 	orrs.w	r1, r9, r1
 8009b22:	d120      	bne.n	8009b66 <_dtoa_r+0xad6>
 8009b24:	2a00      	cmp	r2, #0
 8009b26:	ddec      	ble.n	8009b02 <_dtoa_r+0xa72>
 8009b28:	4659      	mov	r1, fp
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	f000 fac6 	bl	800a0c0 <__lshift>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4683      	mov	fp, r0
 8009b38:	f000 fb2e 	bl	800a198 <__mcmp>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	9b01      	ldr	r3, [sp, #4]
 8009b40:	dc02      	bgt.n	8009b48 <_dtoa_r+0xab8>
 8009b42:	d1de      	bne.n	8009b02 <_dtoa_r+0xa72>
 8009b44:	07da      	lsls	r2, r3, #31
 8009b46:	d5dc      	bpl.n	8009b02 <_dtoa_r+0xa72>
 8009b48:	2b39      	cmp	r3, #57	; 0x39
 8009b4a:	d1d8      	bne.n	8009afe <_dtoa_r+0xa6e>
 8009b4c:	9a02      	ldr	r2, [sp, #8]
 8009b4e:	2339      	movs	r3, #57	; 0x39
 8009b50:	7013      	strb	r3, [r2, #0]
 8009b52:	462b      	mov	r3, r5
 8009b54:	461d      	mov	r5, r3
 8009b56:	3b01      	subs	r3, #1
 8009b58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b5c:	2a39      	cmp	r2, #57	; 0x39
 8009b5e:	d050      	beq.n	8009c02 <_dtoa_r+0xb72>
 8009b60:	3201      	adds	r2, #1
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	e745      	b.n	80099f2 <_dtoa_r+0x962>
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	dd03      	ble.n	8009b72 <_dtoa_r+0xae2>
 8009b6a:	2b39      	cmp	r3, #57	; 0x39
 8009b6c:	d0ee      	beq.n	8009b4c <_dtoa_r+0xabc>
 8009b6e:	3301      	adds	r3, #1
 8009b70:	e7c7      	b.n	8009b02 <_dtoa_r+0xa72>
 8009b72:	9a01      	ldr	r2, [sp, #4]
 8009b74:	9907      	ldr	r1, [sp, #28]
 8009b76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b7a:	428a      	cmp	r2, r1
 8009b7c:	d02a      	beq.n	8009bd4 <_dtoa_r+0xb44>
 8009b7e:	4659      	mov	r1, fp
 8009b80:	2300      	movs	r3, #0
 8009b82:	220a      	movs	r2, #10
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 f8eb 	bl	8009d60 <__multadd>
 8009b8a:	45b8      	cmp	r8, r7
 8009b8c:	4683      	mov	fp, r0
 8009b8e:	f04f 0300 	mov.w	r3, #0
 8009b92:	f04f 020a 	mov.w	r2, #10
 8009b96:	4641      	mov	r1, r8
 8009b98:	4620      	mov	r0, r4
 8009b9a:	d107      	bne.n	8009bac <_dtoa_r+0xb1c>
 8009b9c:	f000 f8e0 	bl	8009d60 <__multadd>
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	4607      	mov	r7, r0
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	e775      	b.n	8009a98 <_dtoa_r+0xa08>
 8009bac:	f000 f8d8 	bl	8009d60 <__multadd>
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	220a      	movs	r2, #10
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f000 f8d1 	bl	8009d60 <__multadd>
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	e7f0      	b.n	8009ba4 <_dtoa_r+0xb14>
 8009bc2:	f1b9 0f00 	cmp.w	r9, #0
 8009bc6:	9a00      	ldr	r2, [sp, #0]
 8009bc8:	bfcc      	ite	gt
 8009bca:	464d      	movgt	r5, r9
 8009bcc:	2501      	movle	r5, #1
 8009bce:	4415      	add	r5, r2
 8009bd0:	f04f 0800 	mov.w	r8, #0
 8009bd4:	4659      	mov	r1, fp
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4620      	mov	r0, r4
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	f000 fa70 	bl	800a0c0 <__lshift>
 8009be0:	4631      	mov	r1, r6
 8009be2:	4683      	mov	fp, r0
 8009be4:	f000 fad8 	bl	800a198 <__mcmp>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	dcb2      	bgt.n	8009b52 <_dtoa_r+0xac2>
 8009bec:	d102      	bne.n	8009bf4 <_dtoa_r+0xb64>
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	07db      	lsls	r3, r3, #31
 8009bf2:	d4ae      	bmi.n	8009b52 <_dtoa_r+0xac2>
 8009bf4:	462b      	mov	r3, r5
 8009bf6:	461d      	mov	r5, r3
 8009bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bfc:	2a30      	cmp	r2, #48	; 0x30
 8009bfe:	d0fa      	beq.n	8009bf6 <_dtoa_r+0xb66>
 8009c00:	e6f7      	b.n	80099f2 <_dtoa_r+0x962>
 8009c02:	9a00      	ldr	r2, [sp, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d1a5      	bne.n	8009b54 <_dtoa_r+0xac4>
 8009c08:	f10a 0a01 	add.w	sl, sl, #1
 8009c0c:	2331      	movs	r3, #49	; 0x31
 8009c0e:	e779      	b.n	8009b04 <_dtoa_r+0xa74>
 8009c10:	4b13      	ldr	r3, [pc, #76]	; (8009c60 <_dtoa_r+0xbd0>)
 8009c12:	f7ff baaf 	b.w	8009174 <_dtoa_r+0xe4>
 8009c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f47f aa86 	bne.w	800912a <_dtoa_r+0x9a>
 8009c1e:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <_dtoa_r+0xbd4>)
 8009c20:	f7ff baa8 	b.w	8009174 <_dtoa_r+0xe4>
 8009c24:	f1b9 0f00 	cmp.w	r9, #0
 8009c28:	dc03      	bgt.n	8009c32 <_dtoa_r+0xba2>
 8009c2a:	9b05      	ldr	r3, [sp, #20]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	f73f aec9 	bgt.w	80099c4 <_dtoa_r+0x934>
 8009c32:	9d00      	ldr	r5, [sp, #0]
 8009c34:	4631      	mov	r1, r6
 8009c36:	4658      	mov	r0, fp
 8009c38:	f7ff f99e 	bl	8008f78 <quorem>
 8009c3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c40:	f805 3b01 	strb.w	r3, [r5], #1
 8009c44:	9a00      	ldr	r2, [sp, #0]
 8009c46:	1aaa      	subs	r2, r5, r2
 8009c48:	4591      	cmp	r9, r2
 8009c4a:	ddba      	ble.n	8009bc2 <_dtoa_r+0xb32>
 8009c4c:	4659      	mov	r1, fp
 8009c4e:	2300      	movs	r3, #0
 8009c50:	220a      	movs	r2, #10
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 f884 	bl	8009d60 <__multadd>
 8009c58:	4683      	mov	fp, r0
 8009c5a:	e7eb      	b.n	8009c34 <_dtoa_r+0xba4>
 8009c5c:	0800b4ef 	.word	0x0800b4ef
 8009c60:	0800b448 	.word	0x0800b448
 8009c64:	0800b46c 	.word	0x0800b46c

08009c68 <_localeconv_r>:
 8009c68:	4800      	ldr	r0, [pc, #0]	; (8009c6c <_localeconv_r+0x4>)
 8009c6a:	4770      	bx	lr
 8009c6c:	200003b8 	.word	0x200003b8

08009c70 <malloc>:
 8009c70:	4b02      	ldr	r3, [pc, #8]	; (8009c7c <malloc+0xc>)
 8009c72:	4601      	mov	r1, r0
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	f000 bbef 	b.w	800a458 <_malloc_r>
 8009c7a:	bf00      	nop
 8009c7c:	20000264 	.word	0x20000264

08009c80 <memcpy>:
 8009c80:	440a      	add	r2, r1
 8009c82:	4291      	cmp	r1, r2
 8009c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c88:	d100      	bne.n	8009c8c <memcpy+0xc>
 8009c8a:	4770      	bx	lr
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c96:	4291      	cmp	r1, r2
 8009c98:	d1f9      	bne.n	8009c8e <memcpy+0xe>
 8009c9a:	bd10      	pop	{r4, pc}

08009c9c <_Balloc>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	b976      	cbnz	r6, 8009cc4 <_Balloc+0x28>
 8009ca6:	2010      	movs	r0, #16
 8009ca8:	f7ff ffe2 	bl	8009c70 <malloc>
 8009cac:	4602      	mov	r2, r0
 8009cae:	6260      	str	r0, [r4, #36]	; 0x24
 8009cb0:	b920      	cbnz	r0, 8009cbc <_Balloc+0x20>
 8009cb2:	4b18      	ldr	r3, [pc, #96]	; (8009d14 <_Balloc+0x78>)
 8009cb4:	4818      	ldr	r0, [pc, #96]	; (8009d18 <_Balloc+0x7c>)
 8009cb6:	2166      	movs	r1, #102	; 0x66
 8009cb8:	f000 fd94 	bl	800a7e4 <__assert_func>
 8009cbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cc0:	6006      	str	r6, [r0, #0]
 8009cc2:	60c6      	str	r6, [r0, #12]
 8009cc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cc6:	68f3      	ldr	r3, [r6, #12]
 8009cc8:	b183      	cbz	r3, 8009cec <_Balloc+0x50>
 8009cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cd2:	b9b8      	cbnz	r0, 8009d04 <_Balloc+0x68>
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	fa01 f605 	lsl.w	r6, r1, r5
 8009cda:	1d72      	adds	r2, r6, #5
 8009cdc:	0092      	lsls	r2, r2, #2
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f000 fb5a 	bl	800a398 <_calloc_r>
 8009ce4:	b160      	cbz	r0, 8009d00 <_Balloc+0x64>
 8009ce6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cea:	e00e      	b.n	8009d0a <_Balloc+0x6e>
 8009cec:	2221      	movs	r2, #33	; 0x21
 8009cee:	2104      	movs	r1, #4
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 fb51 	bl	800a398 <_calloc_r>
 8009cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cf8:	60f0      	str	r0, [r6, #12]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e4      	bne.n	8009cca <_Balloc+0x2e>
 8009d00:	2000      	movs	r0, #0
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	6802      	ldr	r2, [r0, #0]
 8009d06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d10:	e7f7      	b.n	8009d02 <_Balloc+0x66>
 8009d12:	bf00      	nop
 8009d14:	0800b479 	.word	0x0800b479
 8009d18:	0800b500 	.word	0x0800b500

08009d1c <_Bfree>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d20:	4605      	mov	r5, r0
 8009d22:	460c      	mov	r4, r1
 8009d24:	b976      	cbnz	r6, 8009d44 <_Bfree+0x28>
 8009d26:	2010      	movs	r0, #16
 8009d28:	f7ff ffa2 	bl	8009c70 <malloc>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	6268      	str	r0, [r5, #36]	; 0x24
 8009d30:	b920      	cbnz	r0, 8009d3c <_Bfree+0x20>
 8009d32:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <_Bfree+0x3c>)
 8009d34:	4809      	ldr	r0, [pc, #36]	; (8009d5c <_Bfree+0x40>)
 8009d36:	218a      	movs	r1, #138	; 0x8a
 8009d38:	f000 fd54 	bl	800a7e4 <__assert_func>
 8009d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d40:	6006      	str	r6, [r0, #0]
 8009d42:	60c6      	str	r6, [r0, #12]
 8009d44:	b13c      	cbz	r4, 8009d56 <_Bfree+0x3a>
 8009d46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d48:	6862      	ldr	r2, [r4, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d50:	6021      	str	r1, [r4, #0]
 8009d52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	0800b479 	.word	0x0800b479
 8009d5c:	0800b500 	.word	0x0800b500

08009d60 <__multadd>:
 8009d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d64:	690e      	ldr	r6, [r1, #16]
 8009d66:	4607      	mov	r7, r0
 8009d68:	4698      	mov	r8, r3
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	f101 0014 	add.w	r0, r1, #20
 8009d70:	2300      	movs	r3, #0
 8009d72:	6805      	ldr	r5, [r0, #0]
 8009d74:	b2a9      	uxth	r1, r5
 8009d76:	fb02 8101 	mla	r1, r2, r1, r8
 8009d7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009d7e:	0c2d      	lsrs	r5, r5, #16
 8009d80:	fb02 c505 	mla	r5, r2, r5, ip
 8009d84:	b289      	uxth	r1, r1
 8009d86:	3301      	adds	r3, #1
 8009d88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009d8c:	429e      	cmp	r6, r3
 8009d8e:	f840 1b04 	str.w	r1, [r0], #4
 8009d92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009d96:	dcec      	bgt.n	8009d72 <__multadd+0x12>
 8009d98:	f1b8 0f00 	cmp.w	r8, #0
 8009d9c:	d022      	beq.n	8009de4 <__multadd+0x84>
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	42b3      	cmp	r3, r6
 8009da2:	dc19      	bgt.n	8009dd8 <__multadd+0x78>
 8009da4:	6861      	ldr	r1, [r4, #4]
 8009da6:	4638      	mov	r0, r7
 8009da8:	3101      	adds	r1, #1
 8009daa:	f7ff ff77 	bl	8009c9c <_Balloc>
 8009dae:	4605      	mov	r5, r0
 8009db0:	b928      	cbnz	r0, 8009dbe <__multadd+0x5e>
 8009db2:	4602      	mov	r2, r0
 8009db4:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <__multadd+0x8c>)
 8009db6:	480e      	ldr	r0, [pc, #56]	; (8009df0 <__multadd+0x90>)
 8009db8:	21b5      	movs	r1, #181	; 0xb5
 8009dba:	f000 fd13 	bl	800a7e4 <__assert_func>
 8009dbe:	6922      	ldr	r2, [r4, #16]
 8009dc0:	3202      	adds	r2, #2
 8009dc2:	f104 010c 	add.w	r1, r4, #12
 8009dc6:	0092      	lsls	r2, r2, #2
 8009dc8:	300c      	adds	r0, #12
 8009dca:	f7ff ff59 	bl	8009c80 <memcpy>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7ff ffa3 	bl	8009d1c <_Bfree>
 8009dd6:	462c      	mov	r4, r5
 8009dd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009ddc:	3601      	adds	r6, #1
 8009dde:	f8c3 8014 	str.w	r8, [r3, #20]
 8009de2:	6126      	str	r6, [r4, #16]
 8009de4:	4620      	mov	r0, r4
 8009de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dea:	bf00      	nop
 8009dec:	0800b4ef 	.word	0x0800b4ef
 8009df0:	0800b500 	.word	0x0800b500

08009df4 <__hi0bits>:
 8009df4:	0c03      	lsrs	r3, r0, #16
 8009df6:	041b      	lsls	r3, r3, #16
 8009df8:	b9d3      	cbnz	r3, 8009e30 <__hi0bits+0x3c>
 8009dfa:	0400      	lsls	r0, r0, #16
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e02:	bf04      	itt	eq
 8009e04:	0200      	lsleq	r0, r0, #8
 8009e06:	3308      	addeq	r3, #8
 8009e08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e0c:	bf04      	itt	eq
 8009e0e:	0100      	lsleq	r0, r0, #4
 8009e10:	3304      	addeq	r3, #4
 8009e12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e16:	bf04      	itt	eq
 8009e18:	0080      	lsleq	r0, r0, #2
 8009e1a:	3302      	addeq	r3, #2
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	db05      	blt.n	8009e2c <__hi0bits+0x38>
 8009e20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e24:	f103 0301 	add.w	r3, r3, #1
 8009e28:	bf08      	it	eq
 8009e2a:	2320      	moveq	r3, #32
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	4770      	bx	lr
 8009e30:	2300      	movs	r3, #0
 8009e32:	e7e4      	b.n	8009dfe <__hi0bits+0xa>

08009e34 <__lo0bits>:
 8009e34:	6803      	ldr	r3, [r0, #0]
 8009e36:	f013 0207 	ands.w	r2, r3, #7
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	d00b      	beq.n	8009e56 <__lo0bits+0x22>
 8009e3e:	07da      	lsls	r2, r3, #31
 8009e40:	d424      	bmi.n	8009e8c <__lo0bits+0x58>
 8009e42:	0798      	lsls	r0, r3, #30
 8009e44:	bf49      	itett	mi
 8009e46:	085b      	lsrmi	r3, r3, #1
 8009e48:	089b      	lsrpl	r3, r3, #2
 8009e4a:	2001      	movmi	r0, #1
 8009e4c:	600b      	strmi	r3, [r1, #0]
 8009e4e:	bf5c      	itt	pl
 8009e50:	600b      	strpl	r3, [r1, #0]
 8009e52:	2002      	movpl	r0, #2
 8009e54:	4770      	bx	lr
 8009e56:	b298      	uxth	r0, r3
 8009e58:	b9b0      	cbnz	r0, 8009e88 <__lo0bits+0x54>
 8009e5a:	0c1b      	lsrs	r3, r3, #16
 8009e5c:	2010      	movs	r0, #16
 8009e5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e62:	bf04      	itt	eq
 8009e64:	0a1b      	lsreq	r3, r3, #8
 8009e66:	3008      	addeq	r0, #8
 8009e68:	071a      	lsls	r2, r3, #28
 8009e6a:	bf04      	itt	eq
 8009e6c:	091b      	lsreq	r3, r3, #4
 8009e6e:	3004      	addeq	r0, #4
 8009e70:	079a      	lsls	r2, r3, #30
 8009e72:	bf04      	itt	eq
 8009e74:	089b      	lsreq	r3, r3, #2
 8009e76:	3002      	addeq	r0, #2
 8009e78:	07da      	lsls	r2, r3, #31
 8009e7a:	d403      	bmi.n	8009e84 <__lo0bits+0x50>
 8009e7c:	085b      	lsrs	r3, r3, #1
 8009e7e:	f100 0001 	add.w	r0, r0, #1
 8009e82:	d005      	beq.n	8009e90 <__lo0bits+0x5c>
 8009e84:	600b      	str	r3, [r1, #0]
 8009e86:	4770      	bx	lr
 8009e88:	4610      	mov	r0, r2
 8009e8a:	e7e8      	b.n	8009e5e <__lo0bits+0x2a>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	4770      	bx	lr
 8009e90:	2020      	movs	r0, #32
 8009e92:	4770      	bx	lr

08009e94 <__i2b>:
 8009e94:	b510      	push	{r4, lr}
 8009e96:	460c      	mov	r4, r1
 8009e98:	2101      	movs	r1, #1
 8009e9a:	f7ff feff 	bl	8009c9c <_Balloc>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	b928      	cbnz	r0, 8009eae <__i2b+0x1a>
 8009ea2:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <__i2b+0x24>)
 8009ea4:	4805      	ldr	r0, [pc, #20]	; (8009ebc <__i2b+0x28>)
 8009ea6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009eaa:	f000 fc9b 	bl	800a7e4 <__assert_func>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	6144      	str	r4, [r0, #20]
 8009eb2:	6103      	str	r3, [r0, #16]
 8009eb4:	bd10      	pop	{r4, pc}
 8009eb6:	bf00      	nop
 8009eb8:	0800b4ef 	.word	0x0800b4ef
 8009ebc:	0800b500 	.word	0x0800b500

08009ec0 <__multiply>:
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	690a      	ldr	r2, [r1, #16]
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	bfb8      	it	lt
 8009ece:	460b      	movlt	r3, r1
 8009ed0:	460d      	mov	r5, r1
 8009ed2:	bfbc      	itt	lt
 8009ed4:	4625      	movlt	r5, r4
 8009ed6:	461c      	movlt	r4, r3
 8009ed8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009edc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ee0:	68ab      	ldr	r3, [r5, #8]
 8009ee2:	6869      	ldr	r1, [r5, #4]
 8009ee4:	eb0a 0709 	add.w	r7, sl, r9
 8009ee8:	42bb      	cmp	r3, r7
 8009eea:	b085      	sub	sp, #20
 8009eec:	bfb8      	it	lt
 8009eee:	3101      	addlt	r1, #1
 8009ef0:	f7ff fed4 	bl	8009c9c <_Balloc>
 8009ef4:	b930      	cbnz	r0, 8009f04 <__multiply+0x44>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	4b42      	ldr	r3, [pc, #264]	; (800a004 <__multiply+0x144>)
 8009efa:	4843      	ldr	r0, [pc, #268]	; (800a008 <__multiply+0x148>)
 8009efc:	f240 115d 	movw	r1, #349	; 0x15d
 8009f00:	f000 fc70 	bl	800a7e4 <__assert_func>
 8009f04:	f100 0614 	add.w	r6, r0, #20
 8009f08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009f0c:	4633      	mov	r3, r6
 8009f0e:	2200      	movs	r2, #0
 8009f10:	4543      	cmp	r3, r8
 8009f12:	d31e      	bcc.n	8009f52 <__multiply+0x92>
 8009f14:	f105 0c14 	add.w	ip, r5, #20
 8009f18:	f104 0314 	add.w	r3, r4, #20
 8009f1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009f20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009f24:	9202      	str	r2, [sp, #8]
 8009f26:	ebac 0205 	sub.w	r2, ip, r5
 8009f2a:	3a15      	subs	r2, #21
 8009f2c:	f022 0203 	bic.w	r2, r2, #3
 8009f30:	3204      	adds	r2, #4
 8009f32:	f105 0115 	add.w	r1, r5, #21
 8009f36:	458c      	cmp	ip, r1
 8009f38:	bf38      	it	cc
 8009f3a:	2204      	movcc	r2, #4
 8009f3c:	9201      	str	r2, [sp, #4]
 8009f3e:	9a02      	ldr	r2, [sp, #8]
 8009f40:	9303      	str	r3, [sp, #12]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d808      	bhi.n	8009f58 <__multiply+0x98>
 8009f46:	2f00      	cmp	r7, #0
 8009f48:	dc55      	bgt.n	8009ff6 <__multiply+0x136>
 8009f4a:	6107      	str	r7, [r0, #16]
 8009f4c:	b005      	add	sp, #20
 8009f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f52:	f843 2b04 	str.w	r2, [r3], #4
 8009f56:	e7db      	b.n	8009f10 <__multiply+0x50>
 8009f58:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f5c:	f1ba 0f00 	cmp.w	sl, #0
 8009f60:	d020      	beq.n	8009fa4 <__multiply+0xe4>
 8009f62:	f105 0e14 	add.w	lr, r5, #20
 8009f66:	46b1      	mov	r9, r6
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009f6e:	f8d9 b000 	ldr.w	fp, [r9]
 8009f72:	b2a1      	uxth	r1, r4
 8009f74:	fa1f fb8b 	uxth.w	fp, fp
 8009f78:	fb0a b101 	mla	r1, sl, r1, fp
 8009f7c:	4411      	add	r1, r2
 8009f7e:	f8d9 2000 	ldr.w	r2, [r9]
 8009f82:	0c24      	lsrs	r4, r4, #16
 8009f84:	0c12      	lsrs	r2, r2, #16
 8009f86:	fb0a 2404 	mla	r4, sl, r4, r2
 8009f8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009f8e:	b289      	uxth	r1, r1
 8009f90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009f94:	45f4      	cmp	ip, lr
 8009f96:	f849 1b04 	str.w	r1, [r9], #4
 8009f9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009f9e:	d8e4      	bhi.n	8009f6a <__multiply+0xaa>
 8009fa0:	9901      	ldr	r1, [sp, #4]
 8009fa2:	5072      	str	r2, [r6, r1]
 8009fa4:	9a03      	ldr	r2, [sp, #12]
 8009fa6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009faa:	3304      	adds	r3, #4
 8009fac:	f1b9 0f00 	cmp.w	r9, #0
 8009fb0:	d01f      	beq.n	8009ff2 <__multiply+0x132>
 8009fb2:	6834      	ldr	r4, [r6, #0]
 8009fb4:	f105 0114 	add.w	r1, r5, #20
 8009fb8:	46b6      	mov	lr, r6
 8009fba:	f04f 0a00 	mov.w	sl, #0
 8009fbe:	880a      	ldrh	r2, [r1, #0]
 8009fc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009fc4:	fb09 b202 	mla	r2, r9, r2, fp
 8009fc8:	4492      	add	sl, r2
 8009fca:	b2a4      	uxth	r4, r4
 8009fcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009fd0:	f84e 4b04 	str.w	r4, [lr], #4
 8009fd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8009fd8:	f8be 2000 	ldrh.w	r2, [lr]
 8009fdc:	0c24      	lsrs	r4, r4, #16
 8009fde:	fb09 2404 	mla	r4, r9, r4, r2
 8009fe2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009fe6:	458c      	cmp	ip, r1
 8009fe8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009fec:	d8e7      	bhi.n	8009fbe <__multiply+0xfe>
 8009fee:	9a01      	ldr	r2, [sp, #4]
 8009ff0:	50b4      	str	r4, [r6, r2]
 8009ff2:	3604      	adds	r6, #4
 8009ff4:	e7a3      	b.n	8009f3e <__multiply+0x7e>
 8009ff6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1a5      	bne.n	8009f4a <__multiply+0x8a>
 8009ffe:	3f01      	subs	r7, #1
 800a000:	e7a1      	b.n	8009f46 <__multiply+0x86>
 800a002:	bf00      	nop
 800a004:	0800b4ef 	.word	0x0800b4ef
 800a008:	0800b500 	.word	0x0800b500

0800a00c <__pow5mult>:
 800a00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a010:	4615      	mov	r5, r2
 800a012:	f012 0203 	ands.w	r2, r2, #3
 800a016:	4606      	mov	r6, r0
 800a018:	460f      	mov	r7, r1
 800a01a:	d007      	beq.n	800a02c <__pow5mult+0x20>
 800a01c:	4c25      	ldr	r4, [pc, #148]	; (800a0b4 <__pow5mult+0xa8>)
 800a01e:	3a01      	subs	r2, #1
 800a020:	2300      	movs	r3, #0
 800a022:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a026:	f7ff fe9b 	bl	8009d60 <__multadd>
 800a02a:	4607      	mov	r7, r0
 800a02c:	10ad      	asrs	r5, r5, #2
 800a02e:	d03d      	beq.n	800a0ac <__pow5mult+0xa0>
 800a030:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a032:	b97c      	cbnz	r4, 800a054 <__pow5mult+0x48>
 800a034:	2010      	movs	r0, #16
 800a036:	f7ff fe1b 	bl	8009c70 <malloc>
 800a03a:	4602      	mov	r2, r0
 800a03c:	6270      	str	r0, [r6, #36]	; 0x24
 800a03e:	b928      	cbnz	r0, 800a04c <__pow5mult+0x40>
 800a040:	4b1d      	ldr	r3, [pc, #116]	; (800a0b8 <__pow5mult+0xac>)
 800a042:	481e      	ldr	r0, [pc, #120]	; (800a0bc <__pow5mult+0xb0>)
 800a044:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a048:	f000 fbcc 	bl	800a7e4 <__assert_func>
 800a04c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a050:	6004      	str	r4, [r0, #0]
 800a052:	60c4      	str	r4, [r0, #12]
 800a054:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a05c:	b94c      	cbnz	r4, 800a072 <__pow5mult+0x66>
 800a05e:	f240 2171 	movw	r1, #625	; 0x271
 800a062:	4630      	mov	r0, r6
 800a064:	f7ff ff16 	bl	8009e94 <__i2b>
 800a068:	2300      	movs	r3, #0
 800a06a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a06e:	4604      	mov	r4, r0
 800a070:	6003      	str	r3, [r0, #0]
 800a072:	f04f 0900 	mov.w	r9, #0
 800a076:	07eb      	lsls	r3, r5, #31
 800a078:	d50a      	bpl.n	800a090 <__pow5mult+0x84>
 800a07a:	4639      	mov	r1, r7
 800a07c:	4622      	mov	r2, r4
 800a07e:	4630      	mov	r0, r6
 800a080:	f7ff ff1e 	bl	8009ec0 <__multiply>
 800a084:	4639      	mov	r1, r7
 800a086:	4680      	mov	r8, r0
 800a088:	4630      	mov	r0, r6
 800a08a:	f7ff fe47 	bl	8009d1c <_Bfree>
 800a08e:	4647      	mov	r7, r8
 800a090:	106d      	asrs	r5, r5, #1
 800a092:	d00b      	beq.n	800a0ac <__pow5mult+0xa0>
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	b938      	cbnz	r0, 800a0a8 <__pow5mult+0x9c>
 800a098:	4622      	mov	r2, r4
 800a09a:	4621      	mov	r1, r4
 800a09c:	4630      	mov	r0, r6
 800a09e:	f7ff ff0f 	bl	8009ec0 <__multiply>
 800a0a2:	6020      	str	r0, [r4, #0]
 800a0a4:	f8c0 9000 	str.w	r9, [r0]
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	e7e4      	b.n	800a076 <__pow5mult+0x6a>
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b2:	bf00      	nop
 800a0b4:	0800b650 	.word	0x0800b650
 800a0b8:	0800b479 	.word	0x0800b479
 800a0bc:	0800b500 	.word	0x0800b500

0800a0c0 <__lshift>:
 800a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	6849      	ldr	r1, [r1, #4]
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	4607      	mov	r7, r0
 800a0d2:	4691      	mov	r9, r2
 800a0d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0d8:	f108 0601 	add.w	r6, r8, #1
 800a0dc:	42b3      	cmp	r3, r6
 800a0de:	db0b      	blt.n	800a0f8 <__lshift+0x38>
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff fddb 	bl	8009c9c <_Balloc>
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	b948      	cbnz	r0, 800a0fe <__lshift+0x3e>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	4b28      	ldr	r3, [pc, #160]	; (800a190 <__lshift+0xd0>)
 800a0ee:	4829      	ldr	r0, [pc, #164]	; (800a194 <__lshift+0xd4>)
 800a0f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0f4:	f000 fb76 	bl	800a7e4 <__assert_func>
 800a0f8:	3101      	adds	r1, #1
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	e7ee      	b.n	800a0dc <__lshift+0x1c>
 800a0fe:	2300      	movs	r3, #0
 800a100:	f100 0114 	add.w	r1, r0, #20
 800a104:	f100 0210 	add.w	r2, r0, #16
 800a108:	4618      	mov	r0, r3
 800a10a:	4553      	cmp	r3, sl
 800a10c:	db33      	blt.n	800a176 <__lshift+0xb6>
 800a10e:	6920      	ldr	r0, [r4, #16]
 800a110:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a114:	f104 0314 	add.w	r3, r4, #20
 800a118:	f019 091f 	ands.w	r9, r9, #31
 800a11c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a120:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a124:	d02b      	beq.n	800a17e <__lshift+0xbe>
 800a126:	f1c9 0e20 	rsb	lr, r9, #32
 800a12a:	468a      	mov	sl, r1
 800a12c:	2200      	movs	r2, #0
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	fa00 f009 	lsl.w	r0, r0, r9
 800a134:	4302      	orrs	r2, r0
 800a136:	f84a 2b04 	str.w	r2, [sl], #4
 800a13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13e:	459c      	cmp	ip, r3
 800a140:	fa22 f20e 	lsr.w	r2, r2, lr
 800a144:	d8f3      	bhi.n	800a12e <__lshift+0x6e>
 800a146:	ebac 0304 	sub.w	r3, ip, r4
 800a14a:	3b15      	subs	r3, #21
 800a14c:	f023 0303 	bic.w	r3, r3, #3
 800a150:	3304      	adds	r3, #4
 800a152:	f104 0015 	add.w	r0, r4, #21
 800a156:	4584      	cmp	ip, r0
 800a158:	bf38      	it	cc
 800a15a:	2304      	movcc	r3, #4
 800a15c:	50ca      	str	r2, [r1, r3]
 800a15e:	b10a      	cbz	r2, 800a164 <__lshift+0xa4>
 800a160:	f108 0602 	add.w	r6, r8, #2
 800a164:	3e01      	subs	r6, #1
 800a166:	4638      	mov	r0, r7
 800a168:	612e      	str	r6, [r5, #16]
 800a16a:	4621      	mov	r1, r4
 800a16c:	f7ff fdd6 	bl	8009d1c <_Bfree>
 800a170:	4628      	mov	r0, r5
 800a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a176:	f842 0f04 	str.w	r0, [r2, #4]!
 800a17a:	3301      	adds	r3, #1
 800a17c:	e7c5      	b.n	800a10a <__lshift+0x4a>
 800a17e:	3904      	subs	r1, #4
 800a180:	f853 2b04 	ldr.w	r2, [r3], #4
 800a184:	f841 2f04 	str.w	r2, [r1, #4]!
 800a188:	459c      	cmp	ip, r3
 800a18a:	d8f9      	bhi.n	800a180 <__lshift+0xc0>
 800a18c:	e7ea      	b.n	800a164 <__lshift+0xa4>
 800a18e:	bf00      	nop
 800a190:	0800b4ef 	.word	0x0800b4ef
 800a194:	0800b500 	.word	0x0800b500

0800a198 <__mcmp>:
 800a198:	b530      	push	{r4, r5, lr}
 800a19a:	6902      	ldr	r2, [r0, #16]
 800a19c:	690c      	ldr	r4, [r1, #16]
 800a19e:	1b12      	subs	r2, r2, r4
 800a1a0:	d10e      	bne.n	800a1c0 <__mcmp+0x28>
 800a1a2:	f100 0314 	add.w	r3, r0, #20
 800a1a6:	3114      	adds	r1, #20
 800a1a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1b8:	42a5      	cmp	r5, r4
 800a1ba:	d003      	beq.n	800a1c4 <__mcmp+0x2c>
 800a1bc:	d305      	bcc.n	800a1ca <__mcmp+0x32>
 800a1be:	2201      	movs	r2, #1
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	bd30      	pop	{r4, r5, pc}
 800a1c4:	4283      	cmp	r3, r0
 800a1c6:	d3f3      	bcc.n	800a1b0 <__mcmp+0x18>
 800a1c8:	e7fa      	b.n	800a1c0 <__mcmp+0x28>
 800a1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ce:	e7f7      	b.n	800a1c0 <__mcmp+0x28>

0800a1d0 <__mdiff>:
 800a1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	4611      	mov	r1, r2
 800a1da:	4620      	mov	r0, r4
 800a1dc:	4617      	mov	r7, r2
 800a1de:	f7ff ffdb 	bl	800a198 <__mcmp>
 800a1e2:	1e05      	subs	r5, r0, #0
 800a1e4:	d110      	bne.n	800a208 <__mdiff+0x38>
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f7ff fd57 	bl	8009c9c <_Balloc>
 800a1ee:	b930      	cbnz	r0, 800a1fe <__mdiff+0x2e>
 800a1f0:	4b39      	ldr	r3, [pc, #228]	; (800a2d8 <__mdiff+0x108>)
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	f240 2132 	movw	r1, #562	; 0x232
 800a1f8:	4838      	ldr	r0, [pc, #224]	; (800a2dc <__mdiff+0x10c>)
 800a1fa:	f000 faf3 	bl	800a7e4 <__assert_func>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	bfa4      	itt	ge
 800a20a:	463b      	movge	r3, r7
 800a20c:	4627      	movge	r7, r4
 800a20e:	4630      	mov	r0, r6
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	bfa6      	itte	ge
 800a214:	461c      	movge	r4, r3
 800a216:	2500      	movge	r5, #0
 800a218:	2501      	movlt	r5, #1
 800a21a:	f7ff fd3f 	bl	8009c9c <_Balloc>
 800a21e:	b920      	cbnz	r0, 800a22a <__mdiff+0x5a>
 800a220:	4b2d      	ldr	r3, [pc, #180]	; (800a2d8 <__mdiff+0x108>)
 800a222:	4602      	mov	r2, r0
 800a224:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a228:	e7e6      	b.n	800a1f8 <__mdiff+0x28>
 800a22a:	693e      	ldr	r6, [r7, #16]
 800a22c:	60c5      	str	r5, [r0, #12]
 800a22e:	6925      	ldr	r5, [r4, #16]
 800a230:	f107 0114 	add.w	r1, r7, #20
 800a234:	f104 0914 	add.w	r9, r4, #20
 800a238:	f100 0e14 	add.w	lr, r0, #20
 800a23c:	f107 0210 	add.w	r2, r7, #16
 800a240:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a244:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a248:	46f2      	mov	sl, lr
 800a24a:	2700      	movs	r7, #0
 800a24c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a250:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a254:	fa1f f883 	uxth.w	r8, r3
 800a258:	fa17 f78b 	uxtah	r7, r7, fp
 800a25c:	0c1b      	lsrs	r3, r3, #16
 800a25e:	eba7 0808 	sub.w	r8, r7, r8
 800a262:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a266:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a26a:	fa1f f888 	uxth.w	r8, r8
 800a26e:	141f      	asrs	r7, r3, #16
 800a270:	454d      	cmp	r5, r9
 800a272:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a276:	f84a 3b04 	str.w	r3, [sl], #4
 800a27a:	d8e7      	bhi.n	800a24c <__mdiff+0x7c>
 800a27c:	1b2b      	subs	r3, r5, r4
 800a27e:	3b15      	subs	r3, #21
 800a280:	f023 0303 	bic.w	r3, r3, #3
 800a284:	3304      	adds	r3, #4
 800a286:	3415      	adds	r4, #21
 800a288:	42a5      	cmp	r5, r4
 800a28a:	bf38      	it	cc
 800a28c:	2304      	movcc	r3, #4
 800a28e:	4419      	add	r1, r3
 800a290:	4473      	add	r3, lr
 800a292:	469e      	mov	lr, r3
 800a294:	460d      	mov	r5, r1
 800a296:	4565      	cmp	r5, ip
 800a298:	d30e      	bcc.n	800a2b8 <__mdiff+0xe8>
 800a29a:	f10c 0203 	add.w	r2, ip, #3
 800a29e:	1a52      	subs	r2, r2, r1
 800a2a0:	f022 0203 	bic.w	r2, r2, #3
 800a2a4:	3903      	subs	r1, #3
 800a2a6:	458c      	cmp	ip, r1
 800a2a8:	bf38      	it	cc
 800a2aa:	2200      	movcc	r2, #0
 800a2ac:	441a      	add	r2, r3
 800a2ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a2b2:	b17b      	cbz	r3, 800a2d4 <__mdiff+0x104>
 800a2b4:	6106      	str	r6, [r0, #16]
 800a2b6:	e7a5      	b.n	800a204 <__mdiff+0x34>
 800a2b8:	f855 8b04 	ldr.w	r8, [r5], #4
 800a2bc:	fa17 f488 	uxtah	r4, r7, r8
 800a2c0:	1422      	asrs	r2, r4, #16
 800a2c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a2c6:	b2a4      	uxth	r4, r4
 800a2c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a2cc:	f84e 4b04 	str.w	r4, [lr], #4
 800a2d0:	1417      	asrs	r7, r2, #16
 800a2d2:	e7e0      	b.n	800a296 <__mdiff+0xc6>
 800a2d4:	3e01      	subs	r6, #1
 800a2d6:	e7ea      	b.n	800a2ae <__mdiff+0xde>
 800a2d8:	0800b4ef 	.word	0x0800b4ef
 800a2dc:	0800b500 	.word	0x0800b500

0800a2e0 <__d2b>:
 800a2e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2e4:	4689      	mov	r9, r1
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	ec57 6b10 	vmov	r6, r7, d0
 800a2ec:	4690      	mov	r8, r2
 800a2ee:	f7ff fcd5 	bl	8009c9c <_Balloc>
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	b930      	cbnz	r0, 800a304 <__d2b+0x24>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	4b25      	ldr	r3, [pc, #148]	; (800a390 <__d2b+0xb0>)
 800a2fa:	4826      	ldr	r0, [pc, #152]	; (800a394 <__d2b+0xb4>)
 800a2fc:	f240 310a 	movw	r1, #778	; 0x30a
 800a300:	f000 fa70 	bl	800a7e4 <__assert_func>
 800a304:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a30c:	bb35      	cbnz	r5, 800a35c <__d2b+0x7c>
 800a30e:	2e00      	cmp	r6, #0
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	d028      	beq.n	800a366 <__d2b+0x86>
 800a314:	4668      	mov	r0, sp
 800a316:	9600      	str	r6, [sp, #0]
 800a318:	f7ff fd8c 	bl	8009e34 <__lo0bits>
 800a31c:	9900      	ldr	r1, [sp, #0]
 800a31e:	b300      	cbz	r0, 800a362 <__d2b+0x82>
 800a320:	9a01      	ldr	r2, [sp, #4]
 800a322:	f1c0 0320 	rsb	r3, r0, #32
 800a326:	fa02 f303 	lsl.w	r3, r2, r3
 800a32a:	430b      	orrs	r3, r1
 800a32c:	40c2      	lsrs	r2, r0
 800a32e:	6163      	str	r3, [r4, #20]
 800a330:	9201      	str	r2, [sp, #4]
 800a332:	9b01      	ldr	r3, [sp, #4]
 800a334:	61a3      	str	r3, [r4, #24]
 800a336:	2b00      	cmp	r3, #0
 800a338:	bf14      	ite	ne
 800a33a:	2202      	movne	r2, #2
 800a33c:	2201      	moveq	r2, #1
 800a33e:	6122      	str	r2, [r4, #16]
 800a340:	b1d5      	cbz	r5, 800a378 <__d2b+0x98>
 800a342:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a346:	4405      	add	r5, r0
 800a348:	f8c9 5000 	str.w	r5, [r9]
 800a34c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a350:	f8c8 0000 	str.w	r0, [r8]
 800a354:	4620      	mov	r0, r4
 800a356:	b003      	add	sp, #12
 800a358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a35c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a360:	e7d5      	b.n	800a30e <__d2b+0x2e>
 800a362:	6161      	str	r1, [r4, #20]
 800a364:	e7e5      	b.n	800a332 <__d2b+0x52>
 800a366:	a801      	add	r0, sp, #4
 800a368:	f7ff fd64 	bl	8009e34 <__lo0bits>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	6163      	str	r3, [r4, #20]
 800a370:	2201      	movs	r2, #1
 800a372:	6122      	str	r2, [r4, #16]
 800a374:	3020      	adds	r0, #32
 800a376:	e7e3      	b.n	800a340 <__d2b+0x60>
 800a378:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a37c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a380:	f8c9 0000 	str.w	r0, [r9]
 800a384:	6918      	ldr	r0, [r3, #16]
 800a386:	f7ff fd35 	bl	8009df4 <__hi0bits>
 800a38a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a38e:	e7df      	b.n	800a350 <__d2b+0x70>
 800a390:	0800b4ef 	.word	0x0800b4ef
 800a394:	0800b500 	.word	0x0800b500

0800a398 <_calloc_r>:
 800a398:	b513      	push	{r0, r1, r4, lr}
 800a39a:	434a      	muls	r2, r1
 800a39c:	4611      	mov	r1, r2
 800a39e:	9201      	str	r2, [sp, #4]
 800a3a0:	f000 f85a 	bl	800a458 <_malloc_r>
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	b118      	cbz	r0, 800a3b0 <_calloc_r+0x18>
 800a3a8:	9a01      	ldr	r2, [sp, #4]
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	f7fe f93e 	bl	800862c <memset>
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	b002      	add	sp, #8
 800a3b4:	bd10      	pop	{r4, pc}
	...

0800a3b8 <_free_r>:
 800a3b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ba:	2900      	cmp	r1, #0
 800a3bc:	d048      	beq.n	800a450 <_free_r+0x98>
 800a3be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3c2:	9001      	str	r0, [sp, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f1a1 0404 	sub.w	r4, r1, #4
 800a3ca:	bfb8      	it	lt
 800a3cc:	18e4      	addlt	r4, r4, r3
 800a3ce:	f000 fa65 	bl	800a89c <__malloc_lock>
 800a3d2:	4a20      	ldr	r2, [pc, #128]	; (800a454 <_free_r+0x9c>)
 800a3d4:	9801      	ldr	r0, [sp, #4]
 800a3d6:	6813      	ldr	r3, [r2, #0]
 800a3d8:	4615      	mov	r5, r2
 800a3da:	b933      	cbnz	r3, 800a3ea <_free_r+0x32>
 800a3dc:	6063      	str	r3, [r4, #4]
 800a3de:	6014      	str	r4, [r2, #0]
 800a3e0:	b003      	add	sp, #12
 800a3e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3e6:	f000 ba5f 	b.w	800a8a8 <__malloc_unlock>
 800a3ea:	42a3      	cmp	r3, r4
 800a3ec:	d90b      	bls.n	800a406 <_free_r+0x4e>
 800a3ee:	6821      	ldr	r1, [r4, #0]
 800a3f0:	1862      	adds	r2, r4, r1
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	bf04      	itt	eq
 800a3f6:	681a      	ldreq	r2, [r3, #0]
 800a3f8:	685b      	ldreq	r3, [r3, #4]
 800a3fa:	6063      	str	r3, [r4, #4]
 800a3fc:	bf04      	itt	eq
 800a3fe:	1852      	addeq	r2, r2, r1
 800a400:	6022      	streq	r2, [r4, #0]
 800a402:	602c      	str	r4, [r5, #0]
 800a404:	e7ec      	b.n	800a3e0 <_free_r+0x28>
 800a406:	461a      	mov	r2, r3
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	b10b      	cbz	r3, 800a410 <_free_r+0x58>
 800a40c:	42a3      	cmp	r3, r4
 800a40e:	d9fa      	bls.n	800a406 <_free_r+0x4e>
 800a410:	6811      	ldr	r1, [r2, #0]
 800a412:	1855      	adds	r5, r2, r1
 800a414:	42a5      	cmp	r5, r4
 800a416:	d10b      	bne.n	800a430 <_free_r+0x78>
 800a418:	6824      	ldr	r4, [r4, #0]
 800a41a:	4421      	add	r1, r4
 800a41c:	1854      	adds	r4, r2, r1
 800a41e:	42a3      	cmp	r3, r4
 800a420:	6011      	str	r1, [r2, #0]
 800a422:	d1dd      	bne.n	800a3e0 <_free_r+0x28>
 800a424:	681c      	ldr	r4, [r3, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	6053      	str	r3, [r2, #4]
 800a42a:	4421      	add	r1, r4
 800a42c:	6011      	str	r1, [r2, #0]
 800a42e:	e7d7      	b.n	800a3e0 <_free_r+0x28>
 800a430:	d902      	bls.n	800a438 <_free_r+0x80>
 800a432:	230c      	movs	r3, #12
 800a434:	6003      	str	r3, [r0, #0]
 800a436:	e7d3      	b.n	800a3e0 <_free_r+0x28>
 800a438:	6825      	ldr	r5, [r4, #0]
 800a43a:	1961      	adds	r1, r4, r5
 800a43c:	428b      	cmp	r3, r1
 800a43e:	bf04      	itt	eq
 800a440:	6819      	ldreq	r1, [r3, #0]
 800a442:	685b      	ldreq	r3, [r3, #4]
 800a444:	6063      	str	r3, [r4, #4]
 800a446:	bf04      	itt	eq
 800a448:	1949      	addeq	r1, r1, r5
 800a44a:	6021      	streq	r1, [r4, #0]
 800a44c:	6054      	str	r4, [r2, #4]
 800a44e:	e7c7      	b.n	800a3e0 <_free_r+0x28>
 800a450:	b003      	add	sp, #12
 800a452:	bd30      	pop	{r4, r5, pc}
 800a454:	20000528 	.word	0x20000528

0800a458 <_malloc_r>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	1ccd      	adds	r5, r1, #3
 800a45c:	f025 0503 	bic.w	r5, r5, #3
 800a460:	3508      	adds	r5, #8
 800a462:	2d0c      	cmp	r5, #12
 800a464:	bf38      	it	cc
 800a466:	250c      	movcc	r5, #12
 800a468:	2d00      	cmp	r5, #0
 800a46a:	4606      	mov	r6, r0
 800a46c:	db01      	blt.n	800a472 <_malloc_r+0x1a>
 800a46e:	42a9      	cmp	r1, r5
 800a470:	d903      	bls.n	800a47a <_malloc_r+0x22>
 800a472:	230c      	movs	r3, #12
 800a474:	6033      	str	r3, [r6, #0]
 800a476:	2000      	movs	r0, #0
 800a478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47a:	f000 fa0f 	bl	800a89c <__malloc_lock>
 800a47e:	4921      	ldr	r1, [pc, #132]	; (800a504 <_malloc_r+0xac>)
 800a480:	680a      	ldr	r2, [r1, #0]
 800a482:	4614      	mov	r4, r2
 800a484:	b99c      	cbnz	r4, 800a4ae <_malloc_r+0x56>
 800a486:	4f20      	ldr	r7, [pc, #128]	; (800a508 <_malloc_r+0xb0>)
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	b923      	cbnz	r3, 800a496 <_malloc_r+0x3e>
 800a48c:	4621      	mov	r1, r4
 800a48e:	4630      	mov	r0, r6
 800a490:	f000 f998 	bl	800a7c4 <_sbrk_r>
 800a494:	6038      	str	r0, [r7, #0]
 800a496:	4629      	mov	r1, r5
 800a498:	4630      	mov	r0, r6
 800a49a:	f000 f993 	bl	800a7c4 <_sbrk_r>
 800a49e:	1c43      	adds	r3, r0, #1
 800a4a0:	d123      	bne.n	800a4ea <_malloc_r+0x92>
 800a4a2:	230c      	movs	r3, #12
 800a4a4:	6033      	str	r3, [r6, #0]
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f000 f9fe 	bl	800a8a8 <__malloc_unlock>
 800a4ac:	e7e3      	b.n	800a476 <_malloc_r+0x1e>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	1b5b      	subs	r3, r3, r5
 800a4b2:	d417      	bmi.n	800a4e4 <_malloc_r+0x8c>
 800a4b4:	2b0b      	cmp	r3, #11
 800a4b6:	d903      	bls.n	800a4c0 <_malloc_r+0x68>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	441c      	add	r4, r3
 800a4bc:	6025      	str	r5, [r4, #0]
 800a4be:	e004      	b.n	800a4ca <_malloc_r+0x72>
 800a4c0:	6863      	ldr	r3, [r4, #4]
 800a4c2:	42a2      	cmp	r2, r4
 800a4c4:	bf0c      	ite	eq
 800a4c6:	600b      	streq	r3, [r1, #0]
 800a4c8:	6053      	strne	r3, [r2, #4]
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f000 f9ec 	bl	800a8a8 <__malloc_unlock>
 800a4d0:	f104 000b 	add.w	r0, r4, #11
 800a4d4:	1d23      	adds	r3, r4, #4
 800a4d6:	f020 0007 	bic.w	r0, r0, #7
 800a4da:	1ac2      	subs	r2, r0, r3
 800a4dc:	d0cc      	beq.n	800a478 <_malloc_r+0x20>
 800a4de:	1a1b      	subs	r3, r3, r0
 800a4e0:	50a3      	str	r3, [r4, r2]
 800a4e2:	e7c9      	b.n	800a478 <_malloc_r+0x20>
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	6864      	ldr	r4, [r4, #4]
 800a4e8:	e7cc      	b.n	800a484 <_malloc_r+0x2c>
 800a4ea:	1cc4      	adds	r4, r0, #3
 800a4ec:	f024 0403 	bic.w	r4, r4, #3
 800a4f0:	42a0      	cmp	r0, r4
 800a4f2:	d0e3      	beq.n	800a4bc <_malloc_r+0x64>
 800a4f4:	1a21      	subs	r1, r4, r0
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f000 f964 	bl	800a7c4 <_sbrk_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d1dd      	bne.n	800a4bc <_malloc_r+0x64>
 800a500:	e7cf      	b.n	800a4a2 <_malloc_r+0x4a>
 800a502:	bf00      	nop
 800a504:	20000528 	.word	0x20000528
 800a508:	2000052c 	.word	0x2000052c

0800a50c <__ssputs_r>:
 800a50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a510:	688e      	ldr	r6, [r1, #8]
 800a512:	429e      	cmp	r6, r3
 800a514:	4682      	mov	sl, r0
 800a516:	460c      	mov	r4, r1
 800a518:	4690      	mov	r8, r2
 800a51a:	461f      	mov	r7, r3
 800a51c:	d838      	bhi.n	800a590 <__ssputs_r+0x84>
 800a51e:	898a      	ldrh	r2, [r1, #12]
 800a520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a524:	d032      	beq.n	800a58c <__ssputs_r+0x80>
 800a526:	6825      	ldr	r5, [r4, #0]
 800a528:	6909      	ldr	r1, [r1, #16]
 800a52a:	eba5 0901 	sub.w	r9, r5, r1
 800a52e:	6965      	ldr	r5, [r4, #20]
 800a530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a538:	3301      	adds	r3, #1
 800a53a:	444b      	add	r3, r9
 800a53c:	106d      	asrs	r5, r5, #1
 800a53e:	429d      	cmp	r5, r3
 800a540:	bf38      	it	cc
 800a542:	461d      	movcc	r5, r3
 800a544:	0553      	lsls	r3, r2, #21
 800a546:	d531      	bpl.n	800a5ac <__ssputs_r+0xa0>
 800a548:	4629      	mov	r1, r5
 800a54a:	f7ff ff85 	bl	800a458 <_malloc_r>
 800a54e:	4606      	mov	r6, r0
 800a550:	b950      	cbnz	r0, 800a568 <__ssputs_r+0x5c>
 800a552:	230c      	movs	r3, #12
 800a554:	f8ca 3000 	str.w	r3, [sl]
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	f04f 30ff 	mov.w	r0, #4294967295
 800a564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a568:	6921      	ldr	r1, [r4, #16]
 800a56a:	464a      	mov	r2, r9
 800a56c:	f7ff fb88 	bl	8009c80 <memcpy>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	6126      	str	r6, [r4, #16]
 800a57e:	6165      	str	r5, [r4, #20]
 800a580:	444e      	add	r6, r9
 800a582:	eba5 0509 	sub.w	r5, r5, r9
 800a586:	6026      	str	r6, [r4, #0]
 800a588:	60a5      	str	r5, [r4, #8]
 800a58a:	463e      	mov	r6, r7
 800a58c:	42be      	cmp	r6, r7
 800a58e:	d900      	bls.n	800a592 <__ssputs_r+0x86>
 800a590:	463e      	mov	r6, r7
 800a592:	4632      	mov	r2, r6
 800a594:	6820      	ldr	r0, [r4, #0]
 800a596:	4641      	mov	r1, r8
 800a598:	f000 f966 	bl	800a868 <memmove>
 800a59c:	68a3      	ldr	r3, [r4, #8]
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	1b9b      	subs	r3, r3, r6
 800a5a2:	4432      	add	r2, r6
 800a5a4:	60a3      	str	r3, [r4, #8]
 800a5a6:	6022      	str	r2, [r4, #0]
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	e7db      	b.n	800a564 <__ssputs_r+0x58>
 800a5ac:	462a      	mov	r2, r5
 800a5ae:	f000 f981 	bl	800a8b4 <_realloc_r>
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d1e1      	bne.n	800a57c <__ssputs_r+0x70>
 800a5b8:	6921      	ldr	r1, [r4, #16]
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	f7ff fefc 	bl	800a3b8 <_free_r>
 800a5c0:	e7c7      	b.n	800a552 <__ssputs_r+0x46>
	...

0800a5c4 <_svfiprintf_r>:
 800a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	4698      	mov	r8, r3
 800a5ca:	898b      	ldrh	r3, [r1, #12]
 800a5cc:	061b      	lsls	r3, r3, #24
 800a5ce:	b09d      	sub	sp, #116	; 0x74
 800a5d0:	4607      	mov	r7, r0
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	d50e      	bpl.n	800a5f6 <_svfiprintf_r+0x32>
 800a5d8:	690b      	ldr	r3, [r1, #16]
 800a5da:	b963      	cbnz	r3, 800a5f6 <_svfiprintf_r+0x32>
 800a5dc:	2140      	movs	r1, #64	; 0x40
 800a5de:	f7ff ff3b 	bl	800a458 <_malloc_r>
 800a5e2:	6028      	str	r0, [r5, #0]
 800a5e4:	6128      	str	r0, [r5, #16]
 800a5e6:	b920      	cbnz	r0, 800a5f2 <_svfiprintf_r+0x2e>
 800a5e8:	230c      	movs	r3, #12
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f0:	e0d1      	b.n	800a796 <_svfiprintf_r+0x1d2>
 800a5f2:	2340      	movs	r3, #64	; 0x40
 800a5f4:	616b      	str	r3, [r5, #20]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5fa:	2320      	movs	r3, #32
 800a5fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a600:	f8cd 800c 	str.w	r8, [sp, #12]
 800a604:	2330      	movs	r3, #48	; 0x30
 800a606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7b0 <_svfiprintf_r+0x1ec>
 800a60a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a60e:	f04f 0901 	mov.w	r9, #1
 800a612:	4623      	mov	r3, r4
 800a614:	469a      	mov	sl, r3
 800a616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a61a:	b10a      	cbz	r2, 800a620 <_svfiprintf_r+0x5c>
 800a61c:	2a25      	cmp	r2, #37	; 0x25
 800a61e:	d1f9      	bne.n	800a614 <_svfiprintf_r+0x50>
 800a620:	ebba 0b04 	subs.w	fp, sl, r4
 800a624:	d00b      	beq.n	800a63e <_svfiprintf_r+0x7a>
 800a626:	465b      	mov	r3, fp
 800a628:	4622      	mov	r2, r4
 800a62a:	4629      	mov	r1, r5
 800a62c:	4638      	mov	r0, r7
 800a62e:	f7ff ff6d 	bl	800a50c <__ssputs_r>
 800a632:	3001      	adds	r0, #1
 800a634:	f000 80aa 	beq.w	800a78c <_svfiprintf_r+0x1c8>
 800a638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a63a:	445a      	add	r2, fp
 800a63c:	9209      	str	r2, [sp, #36]	; 0x24
 800a63e:	f89a 3000 	ldrb.w	r3, [sl]
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 80a2 	beq.w	800a78c <_svfiprintf_r+0x1c8>
 800a648:	2300      	movs	r3, #0
 800a64a:	f04f 32ff 	mov.w	r2, #4294967295
 800a64e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a652:	f10a 0a01 	add.w	sl, sl, #1
 800a656:	9304      	str	r3, [sp, #16]
 800a658:	9307      	str	r3, [sp, #28]
 800a65a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a65e:	931a      	str	r3, [sp, #104]	; 0x68
 800a660:	4654      	mov	r4, sl
 800a662:	2205      	movs	r2, #5
 800a664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a668:	4851      	ldr	r0, [pc, #324]	; (800a7b0 <_svfiprintf_r+0x1ec>)
 800a66a:	f7f5 fdc1 	bl	80001f0 <memchr>
 800a66e:	9a04      	ldr	r2, [sp, #16]
 800a670:	b9d8      	cbnz	r0, 800a6aa <_svfiprintf_r+0xe6>
 800a672:	06d0      	lsls	r0, r2, #27
 800a674:	bf44      	itt	mi
 800a676:	2320      	movmi	r3, #32
 800a678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a67c:	0711      	lsls	r1, r2, #28
 800a67e:	bf44      	itt	mi
 800a680:	232b      	movmi	r3, #43	; 0x2b
 800a682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a686:	f89a 3000 	ldrb.w	r3, [sl]
 800a68a:	2b2a      	cmp	r3, #42	; 0x2a
 800a68c:	d015      	beq.n	800a6ba <_svfiprintf_r+0xf6>
 800a68e:	9a07      	ldr	r2, [sp, #28]
 800a690:	4654      	mov	r4, sl
 800a692:	2000      	movs	r0, #0
 800a694:	f04f 0c0a 	mov.w	ip, #10
 800a698:	4621      	mov	r1, r4
 800a69a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a69e:	3b30      	subs	r3, #48	; 0x30
 800a6a0:	2b09      	cmp	r3, #9
 800a6a2:	d94e      	bls.n	800a742 <_svfiprintf_r+0x17e>
 800a6a4:	b1b0      	cbz	r0, 800a6d4 <_svfiprintf_r+0x110>
 800a6a6:	9207      	str	r2, [sp, #28]
 800a6a8:	e014      	b.n	800a6d4 <_svfiprintf_r+0x110>
 800a6aa:	eba0 0308 	sub.w	r3, r0, r8
 800a6ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	9304      	str	r3, [sp, #16]
 800a6b6:	46a2      	mov	sl, r4
 800a6b8:	e7d2      	b.n	800a660 <_svfiprintf_r+0x9c>
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	1d19      	adds	r1, r3, #4
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	9103      	str	r1, [sp, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	bfbb      	ittet	lt
 800a6c6:	425b      	neglt	r3, r3
 800a6c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a6cc:	9307      	strge	r3, [sp, #28]
 800a6ce:	9307      	strlt	r3, [sp, #28]
 800a6d0:	bfb8      	it	lt
 800a6d2:	9204      	strlt	r2, [sp, #16]
 800a6d4:	7823      	ldrb	r3, [r4, #0]
 800a6d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d8:	d10c      	bne.n	800a6f4 <_svfiprintf_r+0x130>
 800a6da:	7863      	ldrb	r3, [r4, #1]
 800a6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6de:	d135      	bne.n	800a74c <_svfiprintf_r+0x188>
 800a6e0:	9b03      	ldr	r3, [sp, #12]
 800a6e2:	1d1a      	adds	r2, r3, #4
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	9203      	str	r2, [sp, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	bfb8      	it	lt
 800a6ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6f0:	3402      	adds	r4, #2
 800a6f2:	9305      	str	r3, [sp, #20]
 800a6f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7c0 <_svfiprintf_r+0x1fc>
 800a6f8:	7821      	ldrb	r1, [r4, #0]
 800a6fa:	2203      	movs	r2, #3
 800a6fc:	4650      	mov	r0, sl
 800a6fe:	f7f5 fd77 	bl	80001f0 <memchr>
 800a702:	b140      	cbz	r0, 800a716 <_svfiprintf_r+0x152>
 800a704:	2340      	movs	r3, #64	; 0x40
 800a706:	eba0 000a 	sub.w	r0, r0, sl
 800a70a:	fa03 f000 	lsl.w	r0, r3, r0
 800a70e:	9b04      	ldr	r3, [sp, #16]
 800a710:	4303      	orrs	r3, r0
 800a712:	3401      	adds	r4, #1
 800a714:	9304      	str	r3, [sp, #16]
 800a716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71a:	4826      	ldr	r0, [pc, #152]	; (800a7b4 <_svfiprintf_r+0x1f0>)
 800a71c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a720:	2206      	movs	r2, #6
 800a722:	f7f5 fd65 	bl	80001f0 <memchr>
 800a726:	2800      	cmp	r0, #0
 800a728:	d038      	beq.n	800a79c <_svfiprintf_r+0x1d8>
 800a72a:	4b23      	ldr	r3, [pc, #140]	; (800a7b8 <_svfiprintf_r+0x1f4>)
 800a72c:	bb1b      	cbnz	r3, 800a776 <_svfiprintf_r+0x1b2>
 800a72e:	9b03      	ldr	r3, [sp, #12]
 800a730:	3307      	adds	r3, #7
 800a732:	f023 0307 	bic.w	r3, r3, #7
 800a736:	3308      	adds	r3, #8
 800a738:	9303      	str	r3, [sp, #12]
 800a73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a73c:	4433      	add	r3, r6
 800a73e:	9309      	str	r3, [sp, #36]	; 0x24
 800a740:	e767      	b.n	800a612 <_svfiprintf_r+0x4e>
 800a742:	fb0c 3202 	mla	r2, ip, r2, r3
 800a746:	460c      	mov	r4, r1
 800a748:	2001      	movs	r0, #1
 800a74a:	e7a5      	b.n	800a698 <_svfiprintf_r+0xd4>
 800a74c:	2300      	movs	r3, #0
 800a74e:	3401      	adds	r4, #1
 800a750:	9305      	str	r3, [sp, #20]
 800a752:	4619      	mov	r1, r3
 800a754:	f04f 0c0a 	mov.w	ip, #10
 800a758:	4620      	mov	r0, r4
 800a75a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a75e:	3a30      	subs	r2, #48	; 0x30
 800a760:	2a09      	cmp	r2, #9
 800a762:	d903      	bls.n	800a76c <_svfiprintf_r+0x1a8>
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0c5      	beq.n	800a6f4 <_svfiprintf_r+0x130>
 800a768:	9105      	str	r1, [sp, #20]
 800a76a:	e7c3      	b.n	800a6f4 <_svfiprintf_r+0x130>
 800a76c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a770:	4604      	mov	r4, r0
 800a772:	2301      	movs	r3, #1
 800a774:	e7f0      	b.n	800a758 <_svfiprintf_r+0x194>
 800a776:	ab03      	add	r3, sp, #12
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	462a      	mov	r2, r5
 800a77c:	4b0f      	ldr	r3, [pc, #60]	; (800a7bc <_svfiprintf_r+0x1f8>)
 800a77e:	a904      	add	r1, sp, #16
 800a780:	4638      	mov	r0, r7
 800a782:	f7fd fffb 	bl	800877c <_printf_float>
 800a786:	1c42      	adds	r2, r0, #1
 800a788:	4606      	mov	r6, r0
 800a78a:	d1d6      	bne.n	800a73a <_svfiprintf_r+0x176>
 800a78c:	89ab      	ldrh	r3, [r5, #12]
 800a78e:	065b      	lsls	r3, r3, #25
 800a790:	f53f af2c 	bmi.w	800a5ec <_svfiprintf_r+0x28>
 800a794:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a796:	b01d      	add	sp, #116	; 0x74
 800a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a79c:	ab03      	add	r3, sp, #12
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	462a      	mov	r2, r5
 800a7a2:	4b06      	ldr	r3, [pc, #24]	; (800a7bc <_svfiprintf_r+0x1f8>)
 800a7a4:	a904      	add	r1, sp, #16
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	f7fe fa8c 	bl	8008cc4 <_printf_i>
 800a7ac:	e7eb      	b.n	800a786 <_svfiprintf_r+0x1c2>
 800a7ae:	bf00      	nop
 800a7b0:	0800b65c 	.word	0x0800b65c
 800a7b4:	0800b666 	.word	0x0800b666
 800a7b8:	0800877d 	.word	0x0800877d
 800a7bc:	0800a50d 	.word	0x0800a50d
 800a7c0:	0800b662 	.word	0x0800b662

0800a7c4 <_sbrk_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d06      	ldr	r5, [pc, #24]	; (800a7e0 <_sbrk_r+0x1c>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	f7f7 f8c0 	bl	8001954 <_sbrk>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d102      	bne.n	800a7de <_sbrk_r+0x1a>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	b103      	cbz	r3, 800a7de <_sbrk_r+0x1a>
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	200007b0 	.word	0x200007b0

0800a7e4 <__assert_func>:
 800a7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7e6:	4614      	mov	r4, r2
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	4b09      	ldr	r3, [pc, #36]	; (800a810 <__assert_func+0x2c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	68d8      	ldr	r0, [r3, #12]
 800a7f2:	b14c      	cbz	r4, 800a808 <__assert_func+0x24>
 800a7f4:	4b07      	ldr	r3, [pc, #28]	; (800a814 <__assert_func+0x30>)
 800a7f6:	9100      	str	r1, [sp, #0]
 800a7f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7fc:	4906      	ldr	r1, [pc, #24]	; (800a818 <__assert_func+0x34>)
 800a7fe:	462b      	mov	r3, r5
 800a800:	f000 f80e 	bl	800a820 <fiprintf>
 800a804:	f000 faa4 	bl	800ad50 <abort>
 800a808:	4b04      	ldr	r3, [pc, #16]	; (800a81c <__assert_func+0x38>)
 800a80a:	461c      	mov	r4, r3
 800a80c:	e7f3      	b.n	800a7f6 <__assert_func+0x12>
 800a80e:	bf00      	nop
 800a810:	20000264 	.word	0x20000264
 800a814:	0800b66d 	.word	0x0800b66d
 800a818:	0800b67a 	.word	0x0800b67a
 800a81c:	0800b6a8 	.word	0x0800b6a8

0800a820 <fiprintf>:
 800a820:	b40e      	push	{r1, r2, r3}
 800a822:	b503      	push	{r0, r1, lr}
 800a824:	4601      	mov	r1, r0
 800a826:	ab03      	add	r3, sp, #12
 800a828:	4805      	ldr	r0, [pc, #20]	; (800a840 <fiprintf+0x20>)
 800a82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a82e:	6800      	ldr	r0, [r0, #0]
 800a830:	9301      	str	r3, [sp, #4]
 800a832:	f000 f88f 	bl	800a954 <_vfiprintf_r>
 800a836:	b002      	add	sp, #8
 800a838:	f85d eb04 	ldr.w	lr, [sp], #4
 800a83c:	b003      	add	sp, #12
 800a83e:	4770      	bx	lr
 800a840:	20000264 	.word	0x20000264

0800a844 <__ascii_mbtowc>:
 800a844:	b082      	sub	sp, #8
 800a846:	b901      	cbnz	r1, 800a84a <__ascii_mbtowc+0x6>
 800a848:	a901      	add	r1, sp, #4
 800a84a:	b142      	cbz	r2, 800a85e <__ascii_mbtowc+0x1a>
 800a84c:	b14b      	cbz	r3, 800a862 <__ascii_mbtowc+0x1e>
 800a84e:	7813      	ldrb	r3, [r2, #0]
 800a850:	600b      	str	r3, [r1, #0]
 800a852:	7812      	ldrb	r2, [r2, #0]
 800a854:	1e10      	subs	r0, r2, #0
 800a856:	bf18      	it	ne
 800a858:	2001      	movne	r0, #1
 800a85a:	b002      	add	sp, #8
 800a85c:	4770      	bx	lr
 800a85e:	4610      	mov	r0, r2
 800a860:	e7fb      	b.n	800a85a <__ascii_mbtowc+0x16>
 800a862:	f06f 0001 	mvn.w	r0, #1
 800a866:	e7f8      	b.n	800a85a <__ascii_mbtowc+0x16>

0800a868 <memmove>:
 800a868:	4288      	cmp	r0, r1
 800a86a:	b510      	push	{r4, lr}
 800a86c:	eb01 0402 	add.w	r4, r1, r2
 800a870:	d902      	bls.n	800a878 <memmove+0x10>
 800a872:	4284      	cmp	r4, r0
 800a874:	4623      	mov	r3, r4
 800a876:	d807      	bhi.n	800a888 <memmove+0x20>
 800a878:	1e43      	subs	r3, r0, #1
 800a87a:	42a1      	cmp	r1, r4
 800a87c:	d008      	beq.n	800a890 <memmove+0x28>
 800a87e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a882:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a886:	e7f8      	b.n	800a87a <memmove+0x12>
 800a888:	4402      	add	r2, r0
 800a88a:	4601      	mov	r1, r0
 800a88c:	428a      	cmp	r2, r1
 800a88e:	d100      	bne.n	800a892 <memmove+0x2a>
 800a890:	bd10      	pop	{r4, pc}
 800a892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a89a:	e7f7      	b.n	800a88c <memmove+0x24>

0800a89c <__malloc_lock>:
 800a89c:	4801      	ldr	r0, [pc, #4]	; (800a8a4 <__malloc_lock+0x8>)
 800a89e:	f000 bc17 	b.w	800b0d0 <__retarget_lock_acquire_recursive>
 800a8a2:	bf00      	nop
 800a8a4:	200007b8 	.word	0x200007b8

0800a8a8 <__malloc_unlock>:
 800a8a8:	4801      	ldr	r0, [pc, #4]	; (800a8b0 <__malloc_unlock+0x8>)
 800a8aa:	f000 bc12 	b.w	800b0d2 <__retarget_lock_release_recursive>
 800a8ae:	bf00      	nop
 800a8b0:	200007b8 	.word	0x200007b8

0800a8b4 <_realloc_r>:
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	4614      	mov	r4, r2
 800a8ba:	460e      	mov	r6, r1
 800a8bc:	b921      	cbnz	r1, 800a8c8 <_realloc_r+0x14>
 800a8be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	f7ff bdc8 	b.w	800a458 <_malloc_r>
 800a8c8:	b922      	cbnz	r2, 800a8d4 <_realloc_r+0x20>
 800a8ca:	f7ff fd75 	bl	800a3b8 <_free_r>
 800a8ce:	4625      	mov	r5, r4
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d4:	f000 fc62 	bl	800b19c <_malloc_usable_size_r>
 800a8d8:	42a0      	cmp	r0, r4
 800a8da:	d20f      	bcs.n	800a8fc <_realloc_r+0x48>
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4638      	mov	r0, r7
 800a8e0:	f7ff fdba 	bl	800a458 <_malloc_r>
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d0f2      	beq.n	800a8d0 <_realloc_r+0x1c>
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	f7ff f9c7 	bl	8009c80 <memcpy>
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f7ff fd5f 	bl	800a3b8 <_free_r>
 800a8fa:	e7e9      	b.n	800a8d0 <_realloc_r+0x1c>
 800a8fc:	4635      	mov	r5, r6
 800a8fe:	e7e7      	b.n	800a8d0 <_realloc_r+0x1c>

0800a900 <__sfputc_r>:
 800a900:	6893      	ldr	r3, [r2, #8]
 800a902:	3b01      	subs	r3, #1
 800a904:	2b00      	cmp	r3, #0
 800a906:	b410      	push	{r4}
 800a908:	6093      	str	r3, [r2, #8]
 800a90a:	da08      	bge.n	800a91e <__sfputc_r+0x1e>
 800a90c:	6994      	ldr	r4, [r2, #24]
 800a90e:	42a3      	cmp	r3, r4
 800a910:	db01      	blt.n	800a916 <__sfputc_r+0x16>
 800a912:	290a      	cmp	r1, #10
 800a914:	d103      	bne.n	800a91e <__sfputc_r+0x1e>
 800a916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a91a:	f000 b94b 	b.w	800abb4 <__swbuf_r>
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	1c58      	adds	r0, r3, #1
 800a922:	6010      	str	r0, [r2, #0]
 800a924:	7019      	strb	r1, [r3, #0]
 800a926:	4608      	mov	r0, r1
 800a928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <__sfputs_r>:
 800a92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a930:	4606      	mov	r6, r0
 800a932:	460f      	mov	r7, r1
 800a934:	4614      	mov	r4, r2
 800a936:	18d5      	adds	r5, r2, r3
 800a938:	42ac      	cmp	r4, r5
 800a93a:	d101      	bne.n	800a940 <__sfputs_r+0x12>
 800a93c:	2000      	movs	r0, #0
 800a93e:	e007      	b.n	800a950 <__sfputs_r+0x22>
 800a940:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a944:	463a      	mov	r2, r7
 800a946:	4630      	mov	r0, r6
 800a948:	f7ff ffda 	bl	800a900 <__sfputc_r>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d1f3      	bne.n	800a938 <__sfputs_r+0xa>
 800a950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a954 <_vfiprintf_r>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	460d      	mov	r5, r1
 800a95a:	b09d      	sub	sp, #116	; 0x74
 800a95c:	4614      	mov	r4, r2
 800a95e:	4698      	mov	r8, r3
 800a960:	4606      	mov	r6, r0
 800a962:	b118      	cbz	r0, 800a96c <_vfiprintf_r+0x18>
 800a964:	6983      	ldr	r3, [r0, #24]
 800a966:	b90b      	cbnz	r3, 800a96c <_vfiprintf_r+0x18>
 800a968:	f000 fb14 	bl	800af94 <__sinit>
 800a96c:	4b89      	ldr	r3, [pc, #548]	; (800ab94 <_vfiprintf_r+0x240>)
 800a96e:	429d      	cmp	r5, r3
 800a970:	d11b      	bne.n	800a9aa <_vfiprintf_r+0x56>
 800a972:	6875      	ldr	r5, [r6, #4]
 800a974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a976:	07d9      	lsls	r1, r3, #31
 800a978:	d405      	bmi.n	800a986 <_vfiprintf_r+0x32>
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	059a      	lsls	r2, r3, #22
 800a97e:	d402      	bmi.n	800a986 <_vfiprintf_r+0x32>
 800a980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a982:	f000 fba5 	bl	800b0d0 <__retarget_lock_acquire_recursive>
 800a986:	89ab      	ldrh	r3, [r5, #12]
 800a988:	071b      	lsls	r3, r3, #28
 800a98a:	d501      	bpl.n	800a990 <_vfiprintf_r+0x3c>
 800a98c:	692b      	ldr	r3, [r5, #16]
 800a98e:	b9eb      	cbnz	r3, 800a9cc <_vfiprintf_r+0x78>
 800a990:	4629      	mov	r1, r5
 800a992:	4630      	mov	r0, r6
 800a994:	f000 f96e 	bl	800ac74 <__swsetup_r>
 800a998:	b1c0      	cbz	r0, 800a9cc <_vfiprintf_r+0x78>
 800a99a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a99c:	07dc      	lsls	r4, r3, #31
 800a99e:	d50e      	bpl.n	800a9be <_vfiprintf_r+0x6a>
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	b01d      	add	sp, #116	; 0x74
 800a9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9aa:	4b7b      	ldr	r3, [pc, #492]	; (800ab98 <_vfiprintf_r+0x244>)
 800a9ac:	429d      	cmp	r5, r3
 800a9ae:	d101      	bne.n	800a9b4 <_vfiprintf_r+0x60>
 800a9b0:	68b5      	ldr	r5, [r6, #8]
 800a9b2:	e7df      	b.n	800a974 <_vfiprintf_r+0x20>
 800a9b4:	4b79      	ldr	r3, [pc, #484]	; (800ab9c <_vfiprintf_r+0x248>)
 800a9b6:	429d      	cmp	r5, r3
 800a9b8:	bf08      	it	eq
 800a9ba:	68f5      	ldreq	r5, [r6, #12]
 800a9bc:	e7da      	b.n	800a974 <_vfiprintf_r+0x20>
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	0598      	lsls	r0, r3, #22
 800a9c2:	d4ed      	bmi.n	800a9a0 <_vfiprintf_r+0x4c>
 800a9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9c6:	f000 fb84 	bl	800b0d2 <__retarget_lock_release_recursive>
 800a9ca:	e7e9      	b.n	800a9a0 <_vfiprintf_r+0x4c>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9da:	2330      	movs	r3, #48	; 0x30
 800a9dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aba0 <_vfiprintf_r+0x24c>
 800a9e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9e4:	f04f 0901 	mov.w	r9, #1
 800a9e8:	4623      	mov	r3, r4
 800a9ea:	469a      	mov	sl, r3
 800a9ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9f0:	b10a      	cbz	r2, 800a9f6 <_vfiprintf_r+0xa2>
 800a9f2:	2a25      	cmp	r2, #37	; 0x25
 800a9f4:	d1f9      	bne.n	800a9ea <_vfiprintf_r+0x96>
 800a9f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a9fa:	d00b      	beq.n	800aa14 <_vfiprintf_r+0xc0>
 800a9fc:	465b      	mov	r3, fp
 800a9fe:	4622      	mov	r2, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ff93 	bl	800a92e <__sfputs_r>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	f000 80aa 	beq.w	800ab62 <_vfiprintf_r+0x20e>
 800aa0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa10:	445a      	add	r2, fp
 800aa12:	9209      	str	r2, [sp, #36]	; 0x24
 800aa14:	f89a 3000 	ldrb.w	r3, [sl]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 80a2 	beq.w	800ab62 <_vfiprintf_r+0x20e>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295
 800aa24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa28:	f10a 0a01 	add.w	sl, sl, #1
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	9307      	str	r3, [sp, #28]
 800aa30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa34:	931a      	str	r3, [sp, #104]	; 0x68
 800aa36:	4654      	mov	r4, sl
 800aa38:	2205      	movs	r2, #5
 800aa3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3e:	4858      	ldr	r0, [pc, #352]	; (800aba0 <_vfiprintf_r+0x24c>)
 800aa40:	f7f5 fbd6 	bl	80001f0 <memchr>
 800aa44:	9a04      	ldr	r2, [sp, #16]
 800aa46:	b9d8      	cbnz	r0, 800aa80 <_vfiprintf_r+0x12c>
 800aa48:	06d1      	lsls	r1, r2, #27
 800aa4a:	bf44      	itt	mi
 800aa4c:	2320      	movmi	r3, #32
 800aa4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa52:	0713      	lsls	r3, r2, #28
 800aa54:	bf44      	itt	mi
 800aa56:	232b      	movmi	r3, #43	; 0x2b
 800aa58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa5c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa60:	2b2a      	cmp	r3, #42	; 0x2a
 800aa62:	d015      	beq.n	800aa90 <_vfiprintf_r+0x13c>
 800aa64:	9a07      	ldr	r2, [sp, #28]
 800aa66:	4654      	mov	r4, sl
 800aa68:	2000      	movs	r0, #0
 800aa6a:	f04f 0c0a 	mov.w	ip, #10
 800aa6e:	4621      	mov	r1, r4
 800aa70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa74:	3b30      	subs	r3, #48	; 0x30
 800aa76:	2b09      	cmp	r3, #9
 800aa78:	d94e      	bls.n	800ab18 <_vfiprintf_r+0x1c4>
 800aa7a:	b1b0      	cbz	r0, 800aaaa <_vfiprintf_r+0x156>
 800aa7c:	9207      	str	r2, [sp, #28]
 800aa7e:	e014      	b.n	800aaaa <_vfiprintf_r+0x156>
 800aa80:	eba0 0308 	sub.w	r3, r0, r8
 800aa84:	fa09 f303 	lsl.w	r3, r9, r3
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	46a2      	mov	sl, r4
 800aa8e:	e7d2      	b.n	800aa36 <_vfiprintf_r+0xe2>
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	1d19      	adds	r1, r3, #4
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	9103      	str	r1, [sp, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	bfbb      	ittet	lt
 800aa9c:	425b      	neglt	r3, r3
 800aa9e:	f042 0202 	orrlt.w	r2, r2, #2
 800aaa2:	9307      	strge	r3, [sp, #28]
 800aaa4:	9307      	strlt	r3, [sp, #28]
 800aaa6:	bfb8      	it	lt
 800aaa8:	9204      	strlt	r2, [sp, #16]
 800aaaa:	7823      	ldrb	r3, [r4, #0]
 800aaac:	2b2e      	cmp	r3, #46	; 0x2e
 800aaae:	d10c      	bne.n	800aaca <_vfiprintf_r+0x176>
 800aab0:	7863      	ldrb	r3, [r4, #1]
 800aab2:	2b2a      	cmp	r3, #42	; 0x2a
 800aab4:	d135      	bne.n	800ab22 <_vfiprintf_r+0x1ce>
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	1d1a      	adds	r2, r3, #4
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	9203      	str	r2, [sp, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bfb8      	it	lt
 800aac2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aac6:	3402      	adds	r4, #2
 800aac8:	9305      	str	r3, [sp, #20]
 800aaca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800abb0 <_vfiprintf_r+0x25c>
 800aace:	7821      	ldrb	r1, [r4, #0]
 800aad0:	2203      	movs	r2, #3
 800aad2:	4650      	mov	r0, sl
 800aad4:	f7f5 fb8c 	bl	80001f0 <memchr>
 800aad8:	b140      	cbz	r0, 800aaec <_vfiprintf_r+0x198>
 800aada:	2340      	movs	r3, #64	; 0x40
 800aadc:	eba0 000a 	sub.w	r0, r0, sl
 800aae0:	fa03 f000 	lsl.w	r0, r3, r0
 800aae4:	9b04      	ldr	r3, [sp, #16]
 800aae6:	4303      	orrs	r3, r0
 800aae8:	3401      	adds	r4, #1
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf0:	482c      	ldr	r0, [pc, #176]	; (800aba4 <_vfiprintf_r+0x250>)
 800aaf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaf6:	2206      	movs	r2, #6
 800aaf8:	f7f5 fb7a 	bl	80001f0 <memchr>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d03f      	beq.n	800ab80 <_vfiprintf_r+0x22c>
 800ab00:	4b29      	ldr	r3, [pc, #164]	; (800aba8 <_vfiprintf_r+0x254>)
 800ab02:	bb1b      	cbnz	r3, 800ab4c <_vfiprintf_r+0x1f8>
 800ab04:	9b03      	ldr	r3, [sp, #12]
 800ab06:	3307      	adds	r3, #7
 800ab08:	f023 0307 	bic.w	r3, r3, #7
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	9303      	str	r3, [sp, #12]
 800ab10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab12:	443b      	add	r3, r7
 800ab14:	9309      	str	r3, [sp, #36]	; 0x24
 800ab16:	e767      	b.n	800a9e8 <_vfiprintf_r+0x94>
 800ab18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	2001      	movs	r0, #1
 800ab20:	e7a5      	b.n	800aa6e <_vfiprintf_r+0x11a>
 800ab22:	2300      	movs	r3, #0
 800ab24:	3401      	adds	r4, #1
 800ab26:	9305      	str	r3, [sp, #20]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	f04f 0c0a 	mov.w	ip, #10
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab34:	3a30      	subs	r2, #48	; 0x30
 800ab36:	2a09      	cmp	r2, #9
 800ab38:	d903      	bls.n	800ab42 <_vfiprintf_r+0x1ee>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0c5      	beq.n	800aaca <_vfiprintf_r+0x176>
 800ab3e:	9105      	str	r1, [sp, #20]
 800ab40:	e7c3      	b.n	800aaca <_vfiprintf_r+0x176>
 800ab42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab46:	4604      	mov	r4, r0
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e7f0      	b.n	800ab2e <_vfiprintf_r+0x1da>
 800ab4c:	ab03      	add	r3, sp, #12
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	462a      	mov	r2, r5
 800ab52:	4b16      	ldr	r3, [pc, #88]	; (800abac <_vfiprintf_r+0x258>)
 800ab54:	a904      	add	r1, sp, #16
 800ab56:	4630      	mov	r0, r6
 800ab58:	f7fd fe10 	bl	800877c <_printf_float>
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	1c78      	adds	r0, r7, #1
 800ab60:	d1d6      	bne.n	800ab10 <_vfiprintf_r+0x1bc>
 800ab62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab64:	07d9      	lsls	r1, r3, #31
 800ab66:	d405      	bmi.n	800ab74 <_vfiprintf_r+0x220>
 800ab68:	89ab      	ldrh	r3, [r5, #12]
 800ab6a:	059a      	lsls	r2, r3, #22
 800ab6c:	d402      	bmi.n	800ab74 <_vfiprintf_r+0x220>
 800ab6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab70:	f000 faaf 	bl	800b0d2 <__retarget_lock_release_recursive>
 800ab74:	89ab      	ldrh	r3, [r5, #12]
 800ab76:	065b      	lsls	r3, r3, #25
 800ab78:	f53f af12 	bmi.w	800a9a0 <_vfiprintf_r+0x4c>
 800ab7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab7e:	e711      	b.n	800a9a4 <_vfiprintf_r+0x50>
 800ab80:	ab03      	add	r3, sp, #12
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	462a      	mov	r2, r5
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <_vfiprintf_r+0x258>)
 800ab88:	a904      	add	r1, sp, #16
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7fe f89a 	bl	8008cc4 <_printf_i>
 800ab90:	e7e4      	b.n	800ab5c <_vfiprintf_r+0x208>
 800ab92:	bf00      	nop
 800ab94:	0800b7d4 	.word	0x0800b7d4
 800ab98:	0800b7f4 	.word	0x0800b7f4
 800ab9c:	0800b7b4 	.word	0x0800b7b4
 800aba0:	0800b65c 	.word	0x0800b65c
 800aba4:	0800b666 	.word	0x0800b666
 800aba8:	0800877d 	.word	0x0800877d
 800abac:	0800a92f 	.word	0x0800a92f
 800abb0:	0800b662 	.word	0x0800b662

0800abb4 <__swbuf_r>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	460e      	mov	r6, r1
 800abb8:	4614      	mov	r4, r2
 800abba:	4605      	mov	r5, r0
 800abbc:	b118      	cbz	r0, 800abc6 <__swbuf_r+0x12>
 800abbe:	6983      	ldr	r3, [r0, #24]
 800abc0:	b90b      	cbnz	r3, 800abc6 <__swbuf_r+0x12>
 800abc2:	f000 f9e7 	bl	800af94 <__sinit>
 800abc6:	4b21      	ldr	r3, [pc, #132]	; (800ac4c <__swbuf_r+0x98>)
 800abc8:	429c      	cmp	r4, r3
 800abca:	d12b      	bne.n	800ac24 <__swbuf_r+0x70>
 800abcc:	686c      	ldr	r4, [r5, #4]
 800abce:	69a3      	ldr	r3, [r4, #24]
 800abd0:	60a3      	str	r3, [r4, #8]
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	071a      	lsls	r2, r3, #28
 800abd6:	d52f      	bpl.n	800ac38 <__swbuf_r+0x84>
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	b36b      	cbz	r3, 800ac38 <__swbuf_r+0x84>
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	6820      	ldr	r0, [r4, #0]
 800abe0:	1ac0      	subs	r0, r0, r3
 800abe2:	6963      	ldr	r3, [r4, #20]
 800abe4:	b2f6      	uxtb	r6, r6
 800abe6:	4283      	cmp	r3, r0
 800abe8:	4637      	mov	r7, r6
 800abea:	dc04      	bgt.n	800abf6 <__swbuf_r+0x42>
 800abec:	4621      	mov	r1, r4
 800abee:	4628      	mov	r0, r5
 800abf0:	f000 f93c 	bl	800ae6c <_fflush_r>
 800abf4:	bb30      	cbnz	r0, 800ac44 <__swbuf_r+0x90>
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	60a3      	str	r3, [r4, #8]
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	6022      	str	r2, [r4, #0]
 800ac02:	701e      	strb	r6, [r3, #0]
 800ac04:	6963      	ldr	r3, [r4, #20]
 800ac06:	3001      	adds	r0, #1
 800ac08:	4283      	cmp	r3, r0
 800ac0a:	d004      	beq.n	800ac16 <__swbuf_r+0x62>
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	07db      	lsls	r3, r3, #31
 800ac10:	d506      	bpl.n	800ac20 <__swbuf_r+0x6c>
 800ac12:	2e0a      	cmp	r6, #10
 800ac14:	d104      	bne.n	800ac20 <__swbuf_r+0x6c>
 800ac16:	4621      	mov	r1, r4
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f000 f927 	bl	800ae6c <_fflush_r>
 800ac1e:	b988      	cbnz	r0, 800ac44 <__swbuf_r+0x90>
 800ac20:	4638      	mov	r0, r7
 800ac22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac24:	4b0a      	ldr	r3, [pc, #40]	; (800ac50 <__swbuf_r+0x9c>)
 800ac26:	429c      	cmp	r4, r3
 800ac28:	d101      	bne.n	800ac2e <__swbuf_r+0x7a>
 800ac2a:	68ac      	ldr	r4, [r5, #8]
 800ac2c:	e7cf      	b.n	800abce <__swbuf_r+0x1a>
 800ac2e:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <__swbuf_r+0xa0>)
 800ac30:	429c      	cmp	r4, r3
 800ac32:	bf08      	it	eq
 800ac34:	68ec      	ldreq	r4, [r5, #12]
 800ac36:	e7ca      	b.n	800abce <__swbuf_r+0x1a>
 800ac38:	4621      	mov	r1, r4
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f000 f81a 	bl	800ac74 <__swsetup_r>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d0cb      	beq.n	800abdc <__swbuf_r+0x28>
 800ac44:	f04f 37ff 	mov.w	r7, #4294967295
 800ac48:	e7ea      	b.n	800ac20 <__swbuf_r+0x6c>
 800ac4a:	bf00      	nop
 800ac4c:	0800b7d4 	.word	0x0800b7d4
 800ac50:	0800b7f4 	.word	0x0800b7f4
 800ac54:	0800b7b4 	.word	0x0800b7b4

0800ac58 <__ascii_wctomb>:
 800ac58:	b149      	cbz	r1, 800ac6e <__ascii_wctomb+0x16>
 800ac5a:	2aff      	cmp	r2, #255	; 0xff
 800ac5c:	bf85      	ittet	hi
 800ac5e:	238a      	movhi	r3, #138	; 0x8a
 800ac60:	6003      	strhi	r3, [r0, #0]
 800ac62:	700a      	strbls	r2, [r1, #0]
 800ac64:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac68:	bf98      	it	ls
 800ac6a:	2001      	movls	r0, #1
 800ac6c:	4770      	bx	lr
 800ac6e:	4608      	mov	r0, r1
 800ac70:	4770      	bx	lr
	...

0800ac74 <__swsetup_r>:
 800ac74:	4b32      	ldr	r3, [pc, #200]	; (800ad40 <__swsetup_r+0xcc>)
 800ac76:	b570      	push	{r4, r5, r6, lr}
 800ac78:	681d      	ldr	r5, [r3, #0]
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	b125      	cbz	r5, 800ac8a <__swsetup_r+0x16>
 800ac80:	69ab      	ldr	r3, [r5, #24]
 800ac82:	b913      	cbnz	r3, 800ac8a <__swsetup_r+0x16>
 800ac84:	4628      	mov	r0, r5
 800ac86:	f000 f985 	bl	800af94 <__sinit>
 800ac8a:	4b2e      	ldr	r3, [pc, #184]	; (800ad44 <__swsetup_r+0xd0>)
 800ac8c:	429c      	cmp	r4, r3
 800ac8e:	d10f      	bne.n	800acb0 <__swsetup_r+0x3c>
 800ac90:	686c      	ldr	r4, [r5, #4]
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac98:	0719      	lsls	r1, r3, #28
 800ac9a:	d42c      	bmi.n	800acf6 <__swsetup_r+0x82>
 800ac9c:	06dd      	lsls	r5, r3, #27
 800ac9e:	d411      	bmi.n	800acc4 <__swsetup_r+0x50>
 800aca0:	2309      	movs	r3, #9
 800aca2:	6033      	str	r3, [r6, #0]
 800aca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aca8:	81a3      	strh	r3, [r4, #12]
 800acaa:	f04f 30ff 	mov.w	r0, #4294967295
 800acae:	e03e      	b.n	800ad2e <__swsetup_r+0xba>
 800acb0:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <__swsetup_r+0xd4>)
 800acb2:	429c      	cmp	r4, r3
 800acb4:	d101      	bne.n	800acba <__swsetup_r+0x46>
 800acb6:	68ac      	ldr	r4, [r5, #8]
 800acb8:	e7eb      	b.n	800ac92 <__swsetup_r+0x1e>
 800acba:	4b24      	ldr	r3, [pc, #144]	; (800ad4c <__swsetup_r+0xd8>)
 800acbc:	429c      	cmp	r4, r3
 800acbe:	bf08      	it	eq
 800acc0:	68ec      	ldreq	r4, [r5, #12]
 800acc2:	e7e6      	b.n	800ac92 <__swsetup_r+0x1e>
 800acc4:	0758      	lsls	r0, r3, #29
 800acc6:	d512      	bpl.n	800acee <__swsetup_r+0x7a>
 800acc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acca:	b141      	cbz	r1, 800acde <__swsetup_r+0x6a>
 800accc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acd0:	4299      	cmp	r1, r3
 800acd2:	d002      	beq.n	800acda <__swsetup_r+0x66>
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7ff fb6f 	bl	800a3b8 <_free_r>
 800acda:	2300      	movs	r3, #0
 800acdc:	6363      	str	r3, [r4, #52]	; 0x34
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ace4:	81a3      	strh	r3, [r4, #12]
 800ace6:	2300      	movs	r3, #0
 800ace8:	6063      	str	r3, [r4, #4]
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	f043 0308 	orr.w	r3, r3, #8
 800acf4:	81a3      	strh	r3, [r4, #12]
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	b94b      	cbnz	r3, 800ad0e <__swsetup_r+0x9a>
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad04:	d003      	beq.n	800ad0e <__swsetup_r+0x9a>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f000 fa07 	bl	800b11c <__smakebuf_r>
 800ad0e:	89a0      	ldrh	r0, [r4, #12]
 800ad10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad14:	f010 0301 	ands.w	r3, r0, #1
 800ad18:	d00a      	beq.n	800ad30 <__swsetup_r+0xbc>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60a3      	str	r3, [r4, #8]
 800ad1e:	6963      	ldr	r3, [r4, #20]
 800ad20:	425b      	negs	r3, r3
 800ad22:	61a3      	str	r3, [r4, #24]
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	b943      	cbnz	r3, 800ad3a <__swsetup_r+0xc6>
 800ad28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad2c:	d1ba      	bne.n	800aca4 <__swsetup_r+0x30>
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}
 800ad30:	0781      	lsls	r1, r0, #30
 800ad32:	bf58      	it	pl
 800ad34:	6963      	ldrpl	r3, [r4, #20]
 800ad36:	60a3      	str	r3, [r4, #8]
 800ad38:	e7f4      	b.n	800ad24 <__swsetup_r+0xb0>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	e7f7      	b.n	800ad2e <__swsetup_r+0xba>
 800ad3e:	bf00      	nop
 800ad40:	20000264 	.word	0x20000264
 800ad44:	0800b7d4 	.word	0x0800b7d4
 800ad48:	0800b7f4 	.word	0x0800b7f4
 800ad4c:	0800b7b4 	.word	0x0800b7b4

0800ad50 <abort>:
 800ad50:	b508      	push	{r3, lr}
 800ad52:	2006      	movs	r0, #6
 800ad54:	f000 fa52 	bl	800b1fc <raise>
 800ad58:	2001      	movs	r0, #1
 800ad5a:	f7f6 fd83 	bl	8001864 <_exit>
	...

0800ad60 <__sflush_r>:
 800ad60:	898a      	ldrh	r2, [r1, #12]
 800ad62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad66:	4605      	mov	r5, r0
 800ad68:	0710      	lsls	r0, r2, #28
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	d458      	bmi.n	800ae20 <__sflush_r+0xc0>
 800ad6e:	684b      	ldr	r3, [r1, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dc05      	bgt.n	800ad80 <__sflush_r+0x20>
 800ad74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	dc02      	bgt.n	800ad80 <__sflush_r+0x20>
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad82:	2e00      	cmp	r6, #0
 800ad84:	d0f9      	beq.n	800ad7a <__sflush_r+0x1a>
 800ad86:	2300      	movs	r3, #0
 800ad88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad8c:	682f      	ldr	r7, [r5, #0]
 800ad8e:	602b      	str	r3, [r5, #0]
 800ad90:	d032      	beq.n	800adf8 <__sflush_r+0x98>
 800ad92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad94:	89a3      	ldrh	r3, [r4, #12]
 800ad96:	075a      	lsls	r2, r3, #29
 800ad98:	d505      	bpl.n	800ada6 <__sflush_r+0x46>
 800ad9a:	6863      	ldr	r3, [r4, #4]
 800ad9c:	1ac0      	subs	r0, r0, r3
 800ad9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ada0:	b10b      	cbz	r3, 800ada6 <__sflush_r+0x46>
 800ada2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ada4:	1ac0      	subs	r0, r0, r3
 800ada6:	2300      	movs	r3, #0
 800ada8:	4602      	mov	r2, r0
 800adaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adac:	6a21      	ldr	r1, [r4, #32]
 800adae:	4628      	mov	r0, r5
 800adb0:	47b0      	blx	r6
 800adb2:	1c43      	adds	r3, r0, #1
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	d106      	bne.n	800adc6 <__sflush_r+0x66>
 800adb8:	6829      	ldr	r1, [r5, #0]
 800adba:	291d      	cmp	r1, #29
 800adbc:	d82c      	bhi.n	800ae18 <__sflush_r+0xb8>
 800adbe:	4a2a      	ldr	r2, [pc, #168]	; (800ae68 <__sflush_r+0x108>)
 800adc0:	40ca      	lsrs	r2, r1
 800adc2:	07d6      	lsls	r6, r2, #31
 800adc4:	d528      	bpl.n	800ae18 <__sflush_r+0xb8>
 800adc6:	2200      	movs	r2, #0
 800adc8:	6062      	str	r2, [r4, #4]
 800adca:	04d9      	lsls	r1, r3, #19
 800adcc:	6922      	ldr	r2, [r4, #16]
 800adce:	6022      	str	r2, [r4, #0]
 800add0:	d504      	bpl.n	800addc <__sflush_r+0x7c>
 800add2:	1c42      	adds	r2, r0, #1
 800add4:	d101      	bne.n	800adda <__sflush_r+0x7a>
 800add6:	682b      	ldr	r3, [r5, #0]
 800add8:	b903      	cbnz	r3, 800addc <__sflush_r+0x7c>
 800adda:	6560      	str	r0, [r4, #84]	; 0x54
 800addc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adde:	602f      	str	r7, [r5, #0]
 800ade0:	2900      	cmp	r1, #0
 800ade2:	d0ca      	beq.n	800ad7a <__sflush_r+0x1a>
 800ade4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ade8:	4299      	cmp	r1, r3
 800adea:	d002      	beq.n	800adf2 <__sflush_r+0x92>
 800adec:	4628      	mov	r0, r5
 800adee:	f7ff fae3 	bl	800a3b8 <_free_r>
 800adf2:	2000      	movs	r0, #0
 800adf4:	6360      	str	r0, [r4, #52]	; 0x34
 800adf6:	e7c1      	b.n	800ad7c <__sflush_r+0x1c>
 800adf8:	6a21      	ldr	r1, [r4, #32]
 800adfa:	2301      	movs	r3, #1
 800adfc:	4628      	mov	r0, r5
 800adfe:	47b0      	blx	r6
 800ae00:	1c41      	adds	r1, r0, #1
 800ae02:	d1c7      	bne.n	800ad94 <__sflush_r+0x34>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d0c4      	beq.n	800ad94 <__sflush_r+0x34>
 800ae0a:	2b1d      	cmp	r3, #29
 800ae0c:	d001      	beq.n	800ae12 <__sflush_r+0xb2>
 800ae0e:	2b16      	cmp	r3, #22
 800ae10:	d101      	bne.n	800ae16 <__sflush_r+0xb6>
 800ae12:	602f      	str	r7, [r5, #0]
 800ae14:	e7b1      	b.n	800ad7a <__sflush_r+0x1a>
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae1c:	81a3      	strh	r3, [r4, #12]
 800ae1e:	e7ad      	b.n	800ad7c <__sflush_r+0x1c>
 800ae20:	690f      	ldr	r7, [r1, #16]
 800ae22:	2f00      	cmp	r7, #0
 800ae24:	d0a9      	beq.n	800ad7a <__sflush_r+0x1a>
 800ae26:	0793      	lsls	r3, r2, #30
 800ae28:	680e      	ldr	r6, [r1, #0]
 800ae2a:	bf08      	it	eq
 800ae2c:	694b      	ldreq	r3, [r1, #20]
 800ae2e:	600f      	str	r7, [r1, #0]
 800ae30:	bf18      	it	ne
 800ae32:	2300      	movne	r3, #0
 800ae34:	eba6 0807 	sub.w	r8, r6, r7
 800ae38:	608b      	str	r3, [r1, #8]
 800ae3a:	f1b8 0f00 	cmp.w	r8, #0
 800ae3e:	dd9c      	ble.n	800ad7a <__sflush_r+0x1a>
 800ae40:	6a21      	ldr	r1, [r4, #32]
 800ae42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae44:	4643      	mov	r3, r8
 800ae46:	463a      	mov	r2, r7
 800ae48:	4628      	mov	r0, r5
 800ae4a:	47b0      	blx	r6
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	dc06      	bgt.n	800ae5e <__sflush_r+0xfe>
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5c:	e78e      	b.n	800ad7c <__sflush_r+0x1c>
 800ae5e:	4407      	add	r7, r0
 800ae60:	eba8 0800 	sub.w	r8, r8, r0
 800ae64:	e7e9      	b.n	800ae3a <__sflush_r+0xda>
 800ae66:	bf00      	nop
 800ae68:	20400001 	.word	0x20400001

0800ae6c <_fflush_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	690b      	ldr	r3, [r1, #16]
 800ae70:	4605      	mov	r5, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	b913      	cbnz	r3, 800ae7c <_fflush_r+0x10>
 800ae76:	2500      	movs	r5, #0
 800ae78:	4628      	mov	r0, r5
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	b118      	cbz	r0, 800ae86 <_fflush_r+0x1a>
 800ae7e:	6983      	ldr	r3, [r0, #24]
 800ae80:	b90b      	cbnz	r3, 800ae86 <_fflush_r+0x1a>
 800ae82:	f000 f887 	bl	800af94 <__sinit>
 800ae86:	4b14      	ldr	r3, [pc, #80]	; (800aed8 <_fflush_r+0x6c>)
 800ae88:	429c      	cmp	r4, r3
 800ae8a:	d11b      	bne.n	800aec4 <_fflush_r+0x58>
 800ae8c:	686c      	ldr	r4, [r5, #4]
 800ae8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0ef      	beq.n	800ae76 <_fflush_r+0xa>
 800ae96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae98:	07d0      	lsls	r0, r2, #31
 800ae9a:	d404      	bmi.n	800aea6 <_fflush_r+0x3a>
 800ae9c:	0599      	lsls	r1, r3, #22
 800ae9e:	d402      	bmi.n	800aea6 <_fflush_r+0x3a>
 800aea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aea2:	f000 f915 	bl	800b0d0 <__retarget_lock_acquire_recursive>
 800aea6:	4628      	mov	r0, r5
 800aea8:	4621      	mov	r1, r4
 800aeaa:	f7ff ff59 	bl	800ad60 <__sflush_r>
 800aeae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeb0:	07da      	lsls	r2, r3, #31
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	d4e0      	bmi.n	800ae78 <_fflush_r+0xc>
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	059b      	lsls	r3, r3, #22
 800aeba:	d4dd      	bmi.n	800ae78 <_fflush_r+0xc>
 800aebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aebe:	f000 f908 	bl	800b0d2 <__retarget_lock_release_recursive>
 800aec2:	e7d9      	b.n	800ae78 <_fflush_r+0xc>
 800aec4:	4b05      	ldr	r3, [pc, #20]	; (800aedc <_fflush_r+0x70>)
 800aec6:	429c      	cmp	r4, r3
 800aec8:	d101      	bne.n	800aece <_fflush_r+0x62>
 800aeca:	68ac      	ldr	r4, [r5, #8]
 800aecc:	e7df      	b.n	800ae8e <_fflush_r+0x22>
 800aece:	4b04      	ldr	r3, [pc, #16]	; (800aee0 <_fflush_r+0x74>)
 800aed0:	429c      	cmp	r4, r3
 800aed2:	bf08      	it	eq
 800aed4:	68ec      	ldreq	r4, [r5, #12]
 800aed6:	e7da      	b.n	800ae8e <_fflush_r+0x22>
 800aed8:	0800b7d4 	.word	0x0800b7d4
 800aedc:	0800b7f4 	.word	0x0800b7f4
 800aee0:	0800b7b4 	.word	0x0800b7b4

0800aee4 <std>:
 800aee4:	2300      	movs	r3, #0
 800aee6:	b510      	push	{r4, lr}
 800aee8:	4604      	mov	r4, r0
 800aeea:	e9c0 3300 	strd	r3, r3, [r0]
 800aeee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aef2:	6083      	str	r3, [r0, #8]
 800aef4:	8181      	strh	r1, [r0, #12]
 800aef6:	6643      	str	r3, [r0, #100]	; 0x64
 800aef8:	81c2      	strh	r2, [r0, #14]
 800aefa:	6183      	str	r3, [r0, #24]
 800aefc:	4619      	mov	r1, r3
 800aefe:	2208      	movs	r2, #8
 800af00:	305c      	adds	r0, #92	; 0x5c
 800af02:	f7fd fb93 	bl	800862c <memset>
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <std+0x38>)
 800af08:	6263      	str	r3, [r4, #36]	; 0x24
 800af0a:	4b05      	ldr	r3, [pc, #20]	; (800af20 <std+0x3c>)
 800af0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <std+0x40>)
 800af10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af12:	4b05      	ldr	r3, [pc, #20]	; (800af28 <std+0x44>)
 800af14:	6224      	str	r4, [r4, #32]
 800af16:	6323      	str	r3, [r4, #48]	; 0x30
 800af18:	bd10      	pop	{r4, pc}
 800af1a:	bf00      	nop
 800af1c:	0800b235 	.word	0x0800b235
 800af20:	0800b257 	.word	0x0800b257
 800af24:	0800b28f 	.word	0x0800b28f
 800af28:	0800b2b3 	.word	0x0800b2b3

0800af2c <_cleanup_r>:
 800af2c:	4901      	ldr	r1, [pc, #4]	; (800af34 <_cleanup_r+0x8>)
 800af2e:	f000 b8af 	b.w	800b090 <_fwalk_reent>
 800af32:	bf00      	nop
 800af34:	0800ae6d 	.word	0x0800ae6d

0800af38 <__sfmoreglue>:
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	1e4a      	subs	r2, r1, #1
 800af3c:	2568      	movs	r5, #104	; 0x68
 800af3e:	4355      	muls	r5, r2
 800af40:	460e      	mov	r6, r1
 800af42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af46:	f7ff fa87 	bl	800a458 <_malloc_r>
 800af4a:	4604      	mov	r4, r0
 800af4c:	b140      	cbz	r0, 800af60 <__sfmoreglue+0x28>
 800af4e:	2100      	movs	r1, #0
 800af50:	e9c0 1600 	strd	r1, r6, [r0]
 800af54:	300c      	adds	r0, #12
 800af56:	60a0      	str	r0, [r4, #8]
 800af58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af5c:	f7fd fb66 	bl	800862c <memset>
 800af60:	4620      	mov	r0, r4
 800af62:	bd70      	pop	{r4, r5, r6, pc}

0800af64 <__sfp_lock_acquire>:
 800af64:	4801      	ldr	r0, [pc, #4]	; (800af6c <__sfp_lock_acquire+0x8>)
 800af66:	f000 b8b3 	b.w	800b0d0 <__retarget_lock_acquire_recursive>
 800af6a:	bf00      	nop
 800af6c:	200007bc 	.word	0x200007bc

0800af70 <__sfp_lock_release>:
 800af70:	4801      	ldr	r0, [pc, #4]	; (800af78 <__sfp_lock_release+0x8>)
 800af72:	f000 b8ae 	b.w	800b0d2 <__retarget_lock_release_recursive>
 800af76:	bf00      	nop
 800af78:	200007bc 	.word	0x200007bc

0800af7c <__sinit_lock_acquire>:
 800af7c:	4801      	ldr	r0, [pc, #4]	; (800af84 <__sinit_lock_acquire+0x8>)
 800af7e:	f000 b8a7 	b.w	800b0d0 <__retarget_lock_acquire_recursive>
 800af82:	bf00      	nop
 800af84:	200007b7 	.word	0x200007b7

0800af88 <__sinit_lock_release>:
 800af88:	4801      	ldr	r0, [pc, #4]	; (800af90 <__sinit_lock_release+0x8>)
 800af8a:	f000 b8a2 	b.w	800b0d2 <__retarget_lock_release_recursive>
 800af8e:	bf00      	nop
 800af90:	200007b7 	.word	0x200007b7

0800af94 <__sinit>:
 800af94:	b510      	push	{r4, lr}
 800af96:	4604      	mov	r4, r0
 800af98:	f7ff fff0 	bl	800af7c <__sinit_lock_acquire>
 800af9c:	69a3      	ldr	r3, [r4, #24]
 800af9e:	b11b      	cbz	r3, 800afa8 <__sinit+0x14>
 800afa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa4:	f7ff bff0 	b.w	800af88 <__sinit_lock_release>
 800afa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afac:	6523      	str	r3, [r4, #80]	; 0x50
 800afae:	4b13      	ldr	r3, [pc, #76]	; (800affc <__sinit+0x68>)
 800afb0:	4a13      	ldr	r2, [pc, #76]	; (800b000 <__sinit+0x6c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800afb6:	42a3      	cmp	r3, r4
 800afb8:	bf04      	itt	eq
 800afba:	2301      	moveq	r3, #1
 800afbc:	61a3      	streq	r3, [r4, #24]
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 f820 	bl	800b004 <__sfp>
 800afc4:	6060      	str	r0, [r4, #4]
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 f81c 	bl	800b004 <__sfp>
 800afcc:	60a0      	str	r0, [r4, #8]
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 f818 	bl	800b004 <__sfp>
 800afd4:	2200      	movs	r2, #0
 800afd6:	60e0      	str	r0, [r4, #12]
 800afd8:	2104      	movs	r1, #4
 800afda:	6860      	ldr	r0, [r4, #4]
 800afdc:	f7ff ff82 	bl	800aee4 <std>
 800afe0:	68a0      	ldr	r0, [r4, #8]
 800afe2:	2201      	movs	r2, #1
 800afe4:	2109      	movs	r1, #9
 800afe6:	f7ff ff7d 	bl	800aee4 <std>
 800afea:	68e0      	ldr	r0, [r4, #12]
 800afec:	2202      	movs	r2, #2
 800afee:	2112      	movs	r1, #18
 800aff0:	f7ff ff78 	bl	800aee4 <std>
 800aff4:	2301      	movs	r3, #1
 800aff6:	61a3      	str	r3, [r4, #24]
 800aff8:	e7d2      	b.n	800afa0 <__sinit+0xc>
 800affa:	bf00      	nop
 800affc:	0800b434 	.word	0x0800b434
 800b000:	0800af2d 	.word	0x0800af2d

0800b004 <__sfp>:
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	4607      	mov	r7, r0
 800b008:	f7ff ffac 	bl	800af64 <__sfp_lock_acquire>
 800b00c:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <__sfp+0x84>)
 800b00e:	681e      	ldr	r6, [r3, #0]
 800b010:	69b3      	ldr	r3, [r6, #24]
 800b012:	b913      	cbnz	r3, 800b01a <__sfp+0x16>
 800b014:	4630      	mov	r0, r6
 800b016:	f7ff ffbd 	bl	800af94 <__sinit>
 800b01a:	3648      	adds	r6, #72	; 0x48
 800b01c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b020:	3b01      	subs	r3, #1
 800b022:	d503      	bpl.n	800b02c <__sfp+0x28>
 800b024:	6833      	ldr	r3, [r6, #0]
 800b026:	b30b      	cbz	r3, 800b06c <__sfp+0x68>
 800b028:	6836      	ldr	r6, [r6, #0]
 800b02a:	e7f7      	b.n	800b01c <__sfp+0x18>
 800b02c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b030:	b9d5      	cbnz	r5, 800b068 <__sfp+0x64>
 800b032:	4b16      	ldr	r3, [pc, #88]	; (800b08c <__sfp+0x88>)
 800b034:	60e3      	str	r3, [r4, #12]
 800b036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b03a:	6665      	str	r5, [r4, #100]	; 0x64
 800b03c:	f000 f847 	bl	800b0ce <__retarget_lock_init_recursive>
 800b040:	f7ff ff96 	bl	800af70 <__sfp_lock_release>
 800b044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b04c:	6025      	str	r5, [r4, #0]
 800b04e:	61a5      	str	r5, [r4, #24]
 800b050:	2208      	movs	r2, #8
 800b052:	4629      	mov	r1, r5
 800b054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b058:	f7fd fae8 	bl	800862c <memset>
 800b05c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b064:	4620      	mov	r0, r4
 800b066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b068:	3468      	adds	r4, #104	; 0x68
 800b06a:	e7d9      	b.n	800b020 <__sfp+0x1c>
 800b06c:	2104      	movs	r1, #4
 800b06e:	4638      	mov	r0, r7
 800b070:	f7ff ff62 	bl	800af38 <__sfmoreglue>
 800b074:	4604      	mov	r4, r0
 800b076:	6030      	str	r0, [r6, #0]
 800b078:	2800      	cmp	r0, #0
 800b07a:	d1d5      	bne.n	800b028 <__sfp+0x24>
 800b07c:	f7ff ff78 	bl	800af70 <__sfp_lock_release>
 800b080:	230c      	movs	r3, #12
 800b082:	603b      	str	r3, [r7, #0]
 800b084:	e7ee      	b.n	800b064 <__sfp+0x60>
 800b086:	bf00      	nop
 800b088:	0800b434 	.word	0x0800b434
 800b08c:	ffff0001 	.word	0xffff0001

0800b090 <_fwalk_reent>:
 800b090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b094:	4606      	mov	r6, r0
 800b096:	4688      	mov	r8, r1
 800b098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b09c:	2700      	movs	r7, #0
 800b09e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0a2:	f1b9 0901 	subs.w	r9, r9, #1
 800b0a6:	d505      	bpl.n	800b0b4 <_fwalk_reent+0x24>
 800b0a8:	6824      	ldr	r4, [r4, #0]
 800b0aa:	2c00      	cmp	r4, #0
 800b0ac:	d1f7      	bne.n	800b09e <_fwalk_reent+0xe>
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0b4:	89ab      	ldrh	r3, [r5, #12]
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d907      	bls.n	800b0ca <_fwalk_reent+0x3a>
 800b0ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	d003      	beq.n	800b0ca <_fwalk_reent+0x3a>
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	47c0      	blx	r8
 800b0c8:	4307      	orrs	r7, r0
 800b0ca:	3568      	adds	r5, #104	; 0x68
 800b0cc:	e7e9      	b.n	800b0a2 <_fwalk_reent+0x12>

0800b0ce <__retarget_lock_init_recursive>:
 800b0ce:	4770      	bx	lr

0800b0d0 <__retarget_lock_acquire_recursive>:
 800b0d0:	4770      	bx	lr

0800b0d2 <__retarget_lock_release_recursive>:
 800b0d2:	4770      	bx	lr

0800b0d4 <__swhatbuf_r>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	460e      	mov	r6, r1
 800b0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0dc:	2900      	cmp	r1, #0
 800b0de:	b096      	sub	sp, #88	; 0x58
 800b0e0:	4614      	mov	r4, r2
 800b0e2:	461d      	mov	r5, r3
 800b0e4:	da07      	bge.n	800b0f6 <__swhatbuf_r+0x22>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	89b3      	ldrh	r3, [r6, #12]
 800b0ec:	061a      	lsls	r2, r3, #24
 800b0ee:	d410      	bmi.n	800b112 <__swhatbuf_r+0x3e>
 800b0f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0f4:	e00e      	b.n	800b114 <__swhatbuf_r+0x40>
 800b0f6:	466a      	mov	r2, sp
 800b0f8:	f000 f902 	bl	800b300 <_fstat_r>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	dbf2      	blt.n	800b0e6 <__swhatbuf_r+0x12>
 800b100:	9a01      	ldr	r2, [sp, #4]
 800b102:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b106:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b10a:	425a      	negs	r2, r3
 800b10c:	415a      	adcs	r2, r3
 800b10e:	602a      	str	r2, [r5, #0]
 800b110:	e7ee      	b.n	800b0f0 <__swhatbuf_r+0x1c>
 800b112:	2340      	movs	r3, #64	; 0x40
 800b114:	2000      	movs	r0, #0
 800b116:	6023      	str	r3, [r4, #0]
 800b118:	b016      	add	sp, #88	; 0x58
 800b11a:	bd70      	pop	{r4, r5, r6, pc}

0800b11c <__smakebuf_r>:
 800b11c:	898b      	ldrh	r3, [r1, #12]
 800b11e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b120:	079d      	lsls	r5, r3, #30
 800b122:	4606      	mov	r6, r0
 800b124:	460c      	mov	r4, r1
 800b126:	d507      	bpl.n	800b138 <__smakebuf_r+0x1c>
 800b128:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	2301      	movs	r3, #1
 800b132:	6163      	str	r3, [r4, #20]
 800b134:	b002      	add	sp, #8
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	ab01      	add	r3, sp, #4
 800b13a:	466a      	mov	r2, sp
 800b13c:	f7ff ffca 	bl	800b0d4 <__swhatbuf_r>
 800b140:	9900      	ldr	r1, [sp, #0]
 800b142:	4605      	mov	r5, r0
 800b144:	4630      	mov	r0, r6
 800b146:	f7ff f987 	bl	800a458 <_malloc_r>
 800b14a:	b948      	cbnz	r0, 800b160 <__smakebuf_r+0x44>
 800b14c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b150:	059a      	lsls	r2, r3, #22
 800b152:	d4ef      	bmi.n	800b134 <__smakebuf_r+0x18>
 800b154:	f023 0303 	bic.w	r3, r3, #3
 800b158:	f043 0302 	orr.w	r3, r3, #2
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	e7e3      	b.n	800b128 <__smakebuf_r+0xc>
 800b160:	4b0d      	ldr	r3, [pc, #52]	; (800b198 <__smakebuf_r+0x7c>)
 800b162:	62b3      	str	r3, [r6, #40]	; 0x28
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b16c:	81a3      	strh	r3, [r4, #12]
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	6163      	str	r3, [r4, #20]
 800b172:	9b01      	ldr	r3, [sp, #4]
 800b174:	6120      	str	r0, [r4, #16]
 800b176:	b15b      	cbz	r3, 800b190 <__smakebuf_r+0x74>
 800b178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b17c:	4630      	mov	r0, r6
 800b17e:	f000 f8d1 	bl	800b324 <_isatty_r>
 800b182:	b128      	cbz	r0, 800b190 <__smakebuf_r+0x74>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f023 0303 	bic.w	r3, r3, #3
 800b18a:	f043 0301 	orr.w	r3, r3, #1
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	89a0      	ldrh	r0, [r4, #12]
 800b192:	4305      	orrs	r5, r0
 800b194:	81a5      	strh	r5, [r4, #12]
 800b196:	e7cd      	b.n	800b134 <__smakebuf_r+0x18>
 800b198:	0800af2d 	.word	0x0800af2d

0800b19c <_malloc_usable_size_r>:
 800b19c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a0:	1f18      	subs	r0, r3, #4
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bfbc      	itt	lt
 800b1a6:	580b      	ldrlt	r3, [r1, r0]
 800b1a8:	18c0      	addlt	r0, r0, r3
 800b1aa:	4770      	bx	lr

0800b1ac <_raise_r>:
 800b1ac:	291f      	cmp	r1, #31
 800b1ae:	b538      	push	{r3, r4, r5, lr}
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	d904      	bls.n	800b1c0 <_raise_r+0x14>
 800b1b6:	2316      	movs	r3, #22
 800b1b8:	6003      	str	r3, [r0, #0]
 800b1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1c2:	b112      	cbz	r2, 800b1ca <_raise_r+0x1e>
 800b1c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1c8:	b94b      	cbnz	r3, 800b1de <_raise_r+0x32>
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 f830 	bl	800b230 <_getpid_r>
 800b1d0:	462a      	mov	r2, r5
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1da:	f000 b817 	b.w	800b20c <_kill_r>
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d00a      	beq.n	800b1f8 <_raise_r+0x4c>
 800b1e2:	1c59      	adds	r1, r3, #1
 800b1e4:	d103      	bne.n	800b1ee <_raise_r+0x42>
 800b1e6:	2316      	movs	r3, #22
 800b1e8:	6003      	str	r3, [r0, #0]
 800b1ea:	2001      	movs	r0, #1
 800b1ec:	e7e7      	b.n	800b1be <_raise_r+0x12>
 800b1ee:	2400      	movs	r4, #0
 800b1f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	4798      	blx	r3
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	e7e0      	b.n	800b1be <_raise_r+0x12>

0800b1fc <raise>:
 800b1fc:	4b02      	ldr	r3, [pc, #8]	; (800b208 <raise+0xc>)
 800b1fe:	4601      	mov	r1, r0
 800b200:	6818      	ldr	r0, [r3, #0]
 800b202:	f7ff bfd3 	b.w	800b1ac <_raise_r>
 800b206:	bf00      	nop
 800b208:	20000264 	.word	0x20000264

0800b20c <_kill_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d07      	ldr	r5, [pc, #28]	; (800b22c <_kill_r+0x20>)
 800b210:	2300      	movs	r3, #0
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	4611      	mov	r1, r2
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	f7f6 fb13 	bl	8001844 <_kill>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d102      	bne.n	800b228 <_kill_r+0x1c>
 800b222:	682b      	ldr	r3, [r5, #0]
 800b224:	b103      	cbz	r3, 800b228 <_kill_r+0x1c>
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	200007b0 	.word	0x200007b0

0800b230 <_getpid_r>:
 800b230:	f7f6 bb00 	b.w	8001834 <_getpid>

0800b234 <__sread>:
 800b234:	b510      	push	{r4, lr}
 800b236:	460c      	mov	r4, r1
 800b238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23c:	f000 f894 	bl	800b368 <_read_r>
 800b240:	2800      	cmp	r0, #0
 800b242:	bfab      	itete	ge
 800b244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b246:	89a3      	ldrhlt	r3, [r4, #12]
 800b248:	181b      	addge	r3, r3, r0
 800b24a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b24e:	bfac      	ite	ge
 800b250:	6563      	strge	r3, [r4, #84]	; 0x54
 800b252:	81a3      	strhlt	r3, [r4, #12]
 800b254:	bd10      	pop	{r4, pc}

0800b256 <__swrite>:
 800b256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25a:	461f      	mov	r7, r3
 800b25c:	898b      	ldrh	r3, [r1, #12]
 800b25e:	05db      	lsls	r3, r3, #23
 800b260:	4605      	mov	r5, r0
 800b262:	460c      	mov	r4, r1
 800b264:	4616      	mov	r6, r2
 800b266:	d505      	bpl.n	800b274 <__swrite+0x1e>
 800b268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b26c:	2302      	movs	r3, #2
 800b26e:	2200      	movs	r2, #0
 800b270:	f000 f868 	bl	800b344 <_lseek_r>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b27a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b27e:	81a3      	strh	r3, [r4, #12]
 800b280:	4632      	mov	r2, r6
 800b282:	463b      	mov	r3, r7
 800b284:	4628      	mov	r0, r5
 800b286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b28a:	f000 b817 	b.w	800b2bc <_write_r>

0800b28e <__sseek>:
 800b28e:	b510      	push	{r4, lr}
 800b290:	460c      	mov	r4, r1
 800b292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b296:	f000 f855 	bl	800b344 <_lseek_r>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	bf15      	itete	ne
 800b2a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2aa:	81a3      	strheq	r3, [r4, #12]
 800b2ac:	bf18      	it	ne
 800b2ae:	81a3      	strhne	r3, [r4, #12]
 800b2b0:	bd10      	pop	{r4, pc}

0800b2b2 <__sclose>:
 800b2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b6:	f000 b813 	b.w	800b2e0 <_close_r>
	...

0800b2bc <_write_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	4d07      	ldr	r5, [pc, #28]	; (800b2dc <_write_r+0x20>)
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	4608      	mov	r0, r1
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	602a      	str	r2, [r5, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	f7f6 faf1 	bl	80018b2 <_write>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_write_r+0x1e>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_write_r+0x1e>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	200007b0 	.word	0x200007b0

0800b2e0 <_close_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d06      	ldr	r5, [pc, #24]	; (800b2fc <_close_r+0x1c>)
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	602b      	str	r3, [r5, #0]
 800b2ec:	f7f6 fafd 	bl	80018ea <_close>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d102      	bne.n	800b2fa <_close_r+0x1a>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	b103      	cbz	r3, 800b2fa <_close_r+0x1a>
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
 800b2fc:	200007b0 	.word	0x200007b0

0800b300 <_fstat_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4d07      	ldr	r5, [pc, #28]	; (800b320 <_fstat_r+0x20>)
 800b304:	2300      	movs	r3, #0
 800b306:	4604      	mov	r4, r0
 800b308:	4608      	mov	r0, r1
 800b30a:	4611      	mov	r1, r2
 800b30c:	602b      	str	r3, [r5, #0]
 800b30e:	f7f6 faf8 	bl	8001902 <_fstat>
 800b312:	1c43      	adds	r3, r0, #1
 800b314:	d102      	bne.n	800b31c <_fstat_r+0x1c>
 800b316:	682b      	ldr	r3, [r5, #0]
 800b318:	b103      	cbz	r3, 800b31c <_fstat_r+0x1c>
 800b31a:	6023      	str	r3, [r4, #0]
 800b31c:	bd38      	pop	{r3, r4, r5, pc}
 800b31e:	bf00      	nop
 800b320:	200007b0 	.word	0x200007b0

0800b324 <_isatty_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4d06      	ldr	r5, [pc, #24]	; (800b340 <_isatty_r+0x1c>)
 800b328:	2300      	movs	r3, #0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	602b      	str	r3, [r5, #0]
 800b330:	f7f6 faf7 	bl	8001922 <_isatty>
 800b334:	1c43      	adds	r3, r0, #1
 800b336:	d102      	bne.n	800b33e <_isatty_r+0x1a>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	b103      	cbz	r3, 800b33e <_isatty_r+0x1a>
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	bd38      	pop	{r3, r4, r5, pc}
 800b340:	200007b0 	.word	0x200007b0

0800b344 <_lseek_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4d07      	ldr	r5, [pc, #28]	; (800b364 <_lseek_r+0x20>)
 800b348:	4604      	mov	r4, r0
 800b34a:	4608      	mov	r0, r1
 800b34c:	4611      	mov	r1, r2
 800b34e:	2200      	movs	r2, #0
 800b350:	602a      	str	r2, [r5, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	f7f6 faf0 	bl	8001938 <_lseek>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d102      	bne.n	800b362 <_lseek_r+0x1e>
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	b103      	cbz	r3, 800b362 <_lseek_r+0x1e>
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	200007b0 	.word	0x200007b0

0800b368 <_read_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4d07      	ldr	r5, [pc, #28]	; (800b388 <_read_r+0x20>)
 800b36c:	4604      	mov	r4, r0
 800b36e:	4608      	mov	r0, r1
 800b370:	4611      	mov	r1, r2
 800b372:	2200      	movs	r2, #0
 800b374:	602a      	str	r2, [r5, #0]
 800b376:	461a      	mov	r2, r3
 800b378:	f7f6 fa7e 	bl	8001878 <_read>
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	d102      	bne.n	800b386 <_read_r+0x1e>
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	b103      	cbz	r3, 800b386 <_read_r+0x1e>
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	bd38      	pop	{r3, r4, r5, pc}
 800b388:	200007b0 	.word	0x200007b0

0800b38c <_init>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	bf00      	nop
 800b390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b392:	bc08      	pop	{r3}
 800b394:	469e      	mov	lr, r3
 800b396:	4770      	bx	lr

0800b398 <_fini>:
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	bf00      	nop
 800b39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b39e:	bc08      	pop	{r3}
 800b3a0:	469e      	mov	lr, r3
 800b3a2:	4770      	bx	lr
