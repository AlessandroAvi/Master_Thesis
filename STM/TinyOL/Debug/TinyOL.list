
TinyOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007308  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005b7c0  080074c0  080074c0  000174c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08062c80  08062c80  00080f38  2**0
                  CONTENTS
  4 .ARM          00000008  08062c80  08062c80  00072c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08062c88  08062c88  00080f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08062c88  08062c88  00072c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08062c8c  08062c8c  00072c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f38  20000000  08062c90  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001628  20000f38  08063bc8  00080f38  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  20002560  08063bc8  00082560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080f38  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0ee  00000000  00000000  00080f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000239a  00000000  00000000  0008e056  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a8  00000000  00000000  000903f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000770  00000000  00000000  00090c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186bd  00000000  00000000  00091408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a31e  00000000  00000000  000a9ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ffe9  00000000  00000000  000b3de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143dcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c2c  00000000  00000000  00143e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  00146a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00146b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000f38 	.word	0x20000f38
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007490 	.word	0x08007490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000f3c 	.word	0x20000f3c
 80001dc:	08007490 	.word	0x08007490

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <OL_resetInfo>:

//#define MSG_ACTIVE



void OL_resetInfo(OL_LAYER_STRUCT * layer){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	layer->prediction_correct = 0;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]
	layer->new_class = 0;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	layer->w_update = 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	layer->vowel_guess = 'Q';
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2251      	movs	r2, #81	; 0x51
 8000f6c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <OL_lettToSoft>:




void OL_lettToSoft(OL_LAYER_STRUCT * layer, char *lett, float * y_true){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	msgLen = sprintf(msgDebug, "\n\n\r    -- OL_lettToSoft");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	// Check if letter is inside label of the layer
	for(int i=0; i<layer->WIDTH; i++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e01a      	b.n	8000fc4 <OL_lettToSoft+0x48>
		if(lett[0] == layer->label[i]){
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6919      	ldr	r1, [r3, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	440b      	add	r3, r1
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d107      	bne.n	8000fb0 <OL_lettToSoft+0x34>
			y_true[i] = 1;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e006      	b.n	8000fbe <OL_lettToSoft+0x42>
		}else{
			y_true[i] = 0;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbdf      	blt.n	8000f8e <OL_lettToSoft+0x12>
		}
	}
};
 8000fce:	bf00      	nop
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <OL_feedForward>:




void OL_feedForward(OL_LAYER_STRUCT * layer, float * input){
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r      -- OL_feedForward");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	for(int i=0; i<layer->WIDTH; i++){			// Da 0 a 5
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e049      	b.n	800107e <OL_feedForward+0xa4>
		for(int j=0; j< layer->HEIGHT; j++){	// 0 a 128
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	e027      	b.n	8001040 <OL_feedForward+0x66>
			layer->y_pred[i] += layer->weights[layer->HEIGHT*i+j]* input[j];
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69da      	ldr	r2, [r3, #28]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	ed93 7a00 	vldr	s14, [r3]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	68f9      	ldr	r1, [r7, #12]
 8001008:	fb01 f103 	mul.w	r1, r1, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	440b      	add	r3, r1
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	edd3 6a00 	vldr	s13, [r3]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	4413      	add	r3, r2
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69da      	ldr	r2, [r3, #28]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001036:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j< layer->HEIGHT; j++){	// 0 a 128
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3301      	adds	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	429a      	cmp	r2, r3
 8001048:	dbd2      	blt.n	8000ff0 <OL_feedForward+0x16>
		}
		layer->y_pred[i] += layer->biases[i];
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69da      	ldr	r2, [r3, #28]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	ed93 7a00 	vldr	s14, [r3]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69da      	ldr	r2, [r3, #28]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001074:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<layer->WIDTH; i++){			// Da 0 a 5
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbb0      	blt.n	8000fea <OL_feedForward+0x10>
	}
};
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <OL_softmax>:




void OL_softmax(OL_LAYER_STRUCT * layer){
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	int i;
	float m;
	int size = layer->WIDTH;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60bb      	str	r3, [r7, #8]

	m = layer->y_pred[0];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	613b      	str	r3, [r7, #16]
	// Find the highest value in array input
	for (i = 0; i < size; ++i) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e017      	b.n	80010e0 <OL_softmax+0x4c>
		if (layer->y_pred[i] > m) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69da      	ldr	r2, [r3, #28]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ed97 7a04 	vldr	s14, [r7, #16]
 80010c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	d506      	bpl.n	80010da <OL_softmax+0x46>
			m = layer->y_pred[i];
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69da      	ldr	r2, [r3, #28]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < size; ++i) {
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbe3      	blt.n	80010b0 <OL_softmax+0x1c>
		}
	}

	// Compute the sum of the exponentials
	float sum = 0.0;
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < size; ++i) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e02c      	b.n	800114e <OL_softmax+0xba>
		sum += exp(layer->y_pred[i] - m);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69da      	ldr	r2, [r3, #28]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	ed93 7a00 	vldr	s14, [r3]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110a:	ee17 0a90 	vmov	r0, s15
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	4603      	mov	r3, r0
 8001114:	460c      	mov	r4, r1
 8001116:	ec44 3b10 	vmov	d0, r3, r4
 800111a:	f005 fd59 	bl	8006bd0 <exp>
 800111e:	ec56 5b10 	vmov	r5, r6, d0
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f7ff fa10 	bl	8000548 <__aeabi_f2d>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	461a      	mov	r2, r3
 800112e:	4623      	mov	r3, r4
 8001130:	4628      	mov	r0, r5
 8001132:	4631      	mov	r1, r6
 8001134:	f7ff f8aa 	bl	800028c <__adddf3>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	4618      	mov	r0, r3
 800113e:	4621      	mov	r1, r4
 8001140:	f7ff fd32 	bl	8000ba8 <__aeabi_d2f>
 8001144:	4603      	mov	r3, r0
 8001146:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < size; ++i) {
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbce      	blt.n	80010f4 <OL_softmax+0x60>
	}

	// Compute the softmax value for each input entry
	for (i = 0; i < size; ++i) {
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	e037      	b.n	80011cc <OL_softmax+0x138>
		layer->y_pred[i] = exp(layer->y_pred[i] - m - log(sum));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69da      	ldr	r2, [r3, #28]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	edd7 7a04 	vldr	s15, [r7, #16]
 800116e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001172:	ee17 0a90 	vmov	r0, s15
 8001176:	f7ff f9e7 	bl	8000548 <__aeabi_f2d>
 800117a:	4604      	mov	r4, r0
 800117c:	460d      	mov	r5, r1
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff f9e2 	bl	8000548 <__aeabi_f2d>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	ec43 2b10 	vmov	d0, r2, r3
 800118c:	f005 fd9c 	bl	8006cc8 <log>
 8001190:	ec53 2b10 	vmov	r2, r3, d0
 8001194:	4620      	mov	r0, r4
 8001196:	4629      	mov	r1, r5
 8001198:	f7ff f876 	bl	8000288 <__aeabi_dsub>
 800119c:	4603      	mov	r3, r0
 800119e:	460c      	mov	r4, r1
 80011a0:	ec44 3b17 	vmov	d7, r3, r4
 80011a4:	eeb0 0a47 	vmov.f32	s0, s14
 80011a8:	eef0 0a67 	vmov.f32	s1, s15
 80011ac:	f005 fd10 	bl	8006bd0 <exp>
 80011b0:	ec51 0b10 	vmov	r0, r1, d0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69da      	ldr	r2, [r3, #28]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	18d4      	adds	r4, r2, r3
 80011be:	f7ff fcf3 	bl	8000ba8 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	6023      	str	r3, [r4, #0]
	for (i = 0; i < size; ++i) {
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbc3      	blt.n	800115c <OL_softmax+0xc8>
	}
};
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011dc <OL_gradientDescend>:




void OL_gradientDescend(OL_LAYER_STRUCT * layer, float* input, float *y_true){
 80011dc:	b4b0      	push	{r4, r5, r7}
 80011de:	b08d      	sub	sp, #52	; 0x34
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	466b      	mov	r3, sp
 80011ea:	461d      	mov	r5, r3
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r      -- OL_gradientDescend");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	float cost[layer->WIDTH],dW, deltaW;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	1e43      	subs	r3, r0, #1
 80011f2:	623b      	str	r3, [r7, #32]
 80011f4:	4603      	mov	r3, r0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	f04f 0400 	mov.w	r4, #0
 8001204:	0154      	lsls	r4, r2, #5
 8001206:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800120a:	014b      	lsls	r3, r1, #5
 800120c:	4603      	mov	r3, r0
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	f04f 0400 	mov.w	r4, #0
 800121c:	0154      	lsls	r4, r2, #5
 800121e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001222:	014b      	lsls	r3, r1, #5
 8001224:	4603      	mov	r3, r0
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	3303      	adds	r3, #3
 800122a:	3307      	adds	r3, #7
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	ebad 0d03 	sub.w	sp, sp, r3
 8001234:	466b      	mov	r3, sp
 8001236:	3303      	adds	r3, #3
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	61fb      	str	r3, [r7, #28]

	layer->w_update = 1;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	// Compute the cost (prediction-true)
	for(int k=0; k<layer->WIDTH; k++){
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	e032      	b.n	80012b2 <OL_gradientDescend+0xd6>
		// Compute label error
		cost[k] = layer->y_pred[k]-y_true[k];
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	69da      	ldr	r2, [r3, #28]
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	ed93 7a00 	vldr	s14, [r3]
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	edc3 7a00 	vstr	s15, [r3]

		// Update the biases
		layer->biases[k] -= cost[k]*layer->l_rate;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	ed93 7a00 	vldr	s14, [r3]
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	edd3 6a00 	vldr	s13, [r3]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	edd3 7a02 	vldr	s15, [r3, #8]
 8001296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	edc3 7a00 	vstr	s15, [r3]
	for(int k=0; k<layer->WIDTH; k++){
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	3301      	adds	r3, #1
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbc7      	blt.n	800124c <OL_gradientDescend+0x70>
	}

	// Update the weights
	for(int i=0; i<layer->HEIGHT; i++){		// da 0 a 128
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c0:	e044      	b.n	800134c <OL_gradientDescend+0x170>

		for(int j=0; j<layer->WIDTH; j++){	// da 0 a 5
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c6:	e039      	b.n	800133c <OL_gradientDescend+0x160>

			deltaW = cost[j]* input[i];
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	ed93 7a00 	vldr	s14, [r3]
 80012d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	4413      	add	r3, r2
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	edc7 7a06 	vstr	s15, [r7, #24]
			dW = deltaW*layer->l_rate;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80012f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f6:	edc7 7a05 	vstr	s15, [r7, #20]
			layer->weights[j*layer->HEIGHT+i] -= dW;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001304:	fb01 f103 	mul.w	r1, r1, r3
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	440b      	add	r3, r1
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	ed93 7a00 	vldr	s14, [r3]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800131e:	fb01 f103 	mul.w	r1, r1, r3
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	440b      	add	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	edd7 7a05 	vldr	s15, [r7, #20]
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<layer->WIDTH; j++){	// da 0 a 5
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	3301      	adds	r3, #1
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001342:	429a      	cmp	r2, r3
 8001344:	dbc0      	blt.n	80012c8 <OL_gradientDescend+0xec>
	for(int i=0; i<layer->HEIGHT; i++){		// da 0 a 128
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	3301      	adds	r3, #1
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001352:	429a      	cmp	r2, r3
 8001354:	dbb5      	blt.n	80012c2 <OL_gradientDescend+0xe6>
 8001356:	46ad      	mov	sp, r5
		}
	}
};
 8001358:	bf00      	nop
 800135a:	3734      	adds	r7, #52	; 0x34
 800135c:	46bd      	mov	sp, r7
 800135e:	bcb0      	pop	{r4, r5, r7}
 8001360:	4770      	bx	lr

08001362 <OL_increaseWeightDim>:




void OL_increaseWeightDim(OL_LAYER_STRUCT * layer){
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r        -- OL_increaseWeightDim");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	uint8_t h = layer->HEIGHT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	74fb      	strb	r3, [r7, #19]
	uint8_t w = layer->WIDTH;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	74bb      	strb	r3, [r7, #18]

	float * tmp_ptr = calloc(h*w,sizeof(float));
 8001376:	7cfb      	ldrb	r3, [r7, #19]
 8001378:	7cba      	ldrb	r2, [r7, #18]
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	2104      	movs	r1, #4
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fc79 	bl	8005c78 <calloc>
 8001386:	4603      	mov	r3, r0
 8001388:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<(h-1)*(w-1); i++){
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e00d      	b.n	80013ac <OL_increaseWeightDim+0x4a>
			tmp_ptr[i] = layer->weights[i]; 	// If weight already exist fill with old ones
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	441a      	add	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	440b      	add	r3, r1
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	601a      	str	r2, [r3, #0]
	for(int i=0; i<(h-1)*(w-1); i++){
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	7cfb      	ldrb	r3, [r7, #19]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	7cba      	ldrb	r2, [r7, #18]
 80013b2:	3a01      	subs	r2, #1
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbe8      	blt.n	8001390 <OL_increaseWeightDim+0x2e>
	}

	free(layer->weights);		// Free the old allocated weights
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f004 fc92 	bl	8005cec <free>
	layer->weights = tmp_ptr;	// Move the pointer to the new allocated weights
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	615a      	str	r2, [r3, #20]
	tmp_ptr = NULL;				// Reset the temporary pointer
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
};
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <OL_increaseLabel>:




void OL_increaseLabel(OL_LAYER_STRUCT * layer, char new_letter){
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	70fb      	strb	r3, [r7, #3]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r        -- OL_increaseLabel");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	uint8_t w = layer->WIDTH;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	74fb      	strb	r3, [r7, #19]

	char * tmp_ptr = malloc(w*sizeof(char));
 80013ec:	7cfb      	ldrb	r3, [r7, #19]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 fc74 	bl	8005cdc <malloc>
 80013f4:	4603      	mov	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<w; i++){
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e016      	b.n	800142c <OL_increaseLabel+0x52>
		if(i<w-1){
 80013fe:	7cfb      	ldrb	r3, [r7, #19]
 8001400:	3b01      	subs	r3, #1
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	da09      	bge.n	800141c <OL_increaseLabel+0x42>
			tmp_ptr[i] = layer->label[i]; 	// If letter already exist fill with old ones
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	441a      	add	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	440b      	add	r3, r1
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e004      	b.n	8001426 <OL_increaseLabel+0x4c>
		}else{
			tmp_ptr[i] = new_letter;		// If letter is new put the new one
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	78fa      	ldrb	r2, [r7, #3]
 8001424:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<w; i++){
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	7cfb      	ldrb	r3, [r7, #19]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbe4      	blt.n	80013fe <OL_increaseLabel+0x24>
		}
	}

	free(layer->label);		// Free the old allocated weights
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4618      	mov	r0, r3
 800143a:	f004 fc57 	bl	8005cec <free>
	layer->label = tmp_ptr;	// Move the pointer to the new allocated weights
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	611a      	str	r2, [r3, #16]
	tmp_ptr = NULL;			// Reset the temporary pointer
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
};
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <OL_increaseBiasDim>:




void OL_increaseBiasDim(OL_LAYER_STRUCT * layer){
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r        -- OL_increaseBiasDim");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	uint8_t w = layer->WIDTH;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	74fb      	strb	r3, [r7, #19]

	float * tmp_ptr = calloc(w,sizeof(float));
 800145e:	7cfb      	ldrb	r3, [r7, #19]
 8001460:	2104      	movs	r1, #4
 8001462:	4618      	mov	r0, r3
 8001464:	f004 fc08 	bl	8005c78 <calloc>
 8001468:	4603      	mov	r3, r0
 800146a:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<w-1; i++){
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	e00d      	b.n	800148e <OL_increaseBiasDim+0x3e>
			tmp_ptr[i] = layer->biases[i]; 		// If bias already exist, fill with old ones
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	441a      	add	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	68f9      	ldr	r1, [r7, #12]
 8001482:	440b      	add	r3, r1
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	601a      	str	r2, [r3, #0]
	for(int i=0; i<w-1; i++){
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	7cfb      	ldrb	r3, [r7, #19]
 8001490:	3b01      	subs	r3, #1
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbec      	blt.n	8001472 <OL_increaseBiasDim+0x22>
	}

	free(layer->biases);		// Free the old allocated weights
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4618      	mov	r0, r3
 800149e:	f004 fc25 	bl	8005cec <free>
	layer->biases = tmp_ptr;	// Move the pointer to the new allocated weights
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	619a      	str	r2, [r3, #24]
	tmp_ptr = NULL;				// Reset the temporary pointer
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
};
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <OL_checkNewClass>:




void OL_checkNewClass(OL_LAYER_STRUCT * layer, char *letter){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r    -- OL_checkNewClass");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	int found = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<layer->WIDTH; i++){
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	e00d      	b.n	80014e4 <OL_checkNewClass+0x30>
		if(letter[0] == layer->label[i]){
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6919      	ldr	r1, [r3, #16]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	440b      	add	r3, r1
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d101      	bne.n	80014de <OL_checkNewClass+0x2a>
			found = 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<layer->WIDTH; i++){
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3301      	adds	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dbec      	blt.n	80014c8 <OL_checkNewClass+0x14>
		}
	}

	// If the letter is new perform the following
	if(found==0){
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d123      	bne.n	800153c <OL_checkNewClass+0x88>
#ifdef MSG_ACTIVE
		msgLen = sprintf(msgDebug, "\n\n\r    New letter found %c", letter[0]);
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

		layer->new_class = 1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		layer->WIDTH +=1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]

		OL_increaseLabel(layer, letter[0]);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff64 	bl	80013da <OL_increaseLabel>
		OL_increaseWeightDim(layer);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff25 	bl	8001362 <OL_increaseWeightDim>
		OL_increaseBiasDim(layer);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff99 	bl	8001450 <OL_increaseBiasDim>

		free(layer->y_pred);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4618      	mov	r0, r3
 8001524:	f004 fbe2 	bl	8005cec <free>
		layer->y_pred = (float*)calloc(layer->WIDTH, sizeof(float));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2104      	movs	r1, #4
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fba2 	bl	8005c78 <calloc>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	61da      	str	r2, [r3, #28]
	}
};
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <OL_train>:




void OL_train(OL_LAYER_STRUCT * layer, float *x, float *y_true, char *letter){
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6178      	str	r0, [r7, #20]
 800154c:	6139      	str	r1, [r7, #16]
 800154e:	60fa      	str	r2, [r7, #12]
 8001550:	60bb      	str	r3, [r7, #8]
	msgLen = sprintf(msgDebug, "\n\n\r  -- Begin on TRAIN routine --\n\n\r    OL_train");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif


	for(int i=0; i<layer->n_epochs; i++){
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
 8001556:	e07e      	b.n	8001656 <OL_train+0x112>

		// Perform inference of OL LAYER
		OL_feedForward(layer, x);
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff fd3d 	bl	8000fda <OL_feedForward>
		OL_softmax(layer);
 8001560:	6978      	ldr	r0, [r7, #20]
 8001562:	f7ff fd97 	bl	8001094 <OL_softmax>

		// Find the max value in the prediction and in the true label
		layer->vowel_guess = 0;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		uint8_t max_pred = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t max_true = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t max_i_pred;
		uint8_t max_i_true;
		for(int i=0; i<layer->WIDTH; i++){
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e04e      	b.n	800161e <OL_train+0xda>
			if(max_pred < layer->y_pred[i]){
 8001580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	69da      	ldr	r2, [r3, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	d518      	bpl.n	80015d6 <OL_train+0x92>
				max_i_pred = i;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				max_pred = layer->y_pred[i];
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	69da      	ldr	r2, [r3, #28]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80015c0:	793b      	ldrb	r3, [r7, #4]
 80015c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				layer->vowel_guess = layer->label[i];
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			}
			if(max_true < y_true[i]){
 80015d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d50f      	bpl.n	8001618 <OL_train+0xd4>
				max_i_true=i;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f887 3020 	strb.w	r3, [r7, #32]
				max_true = y_true[i];
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001612:	793b      	ldrb	r3, [r7, #4]
 8001614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		for(int i=0; i<layer->WIDTH; i++){
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	3301      	adds	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	429a      	cmp	r2, r3
 8001626:	dbab      	blt.n	8001580 <OL_train+0x3c>



		// Check if prediction is correct or not

		if(max_i_true != max_i_pred){
 8001628:	f897 2020 	ldrb.w	r2, [r7, #32]
 800162c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001630:	429a      	cmp	r2, r3
 8001632:	d009      	beq.n	8001648 <OL_train+0x104>
#ifdef MSG_ACTIVE
				msgLen = sprintf(msgDebug, "\r    Performing weights update\n");
				HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif
			layer->prediction_correct = 1;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2020 	strb.w	r2, [r3, #32]
			// Update weights
			OL_gradientDescend(layer, x, y_true);
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	6939      	ldr	r1, [r7, #16]
 8001640:	6978      	ldr	r0, [r7, #20]
 8001642:	f7ff fdcb 	bl	80011dc <OL_gradientDescend>
 8001646:	e003      	b.n	8001650 <OL_train+0x10c>
		}else{
			layer->prediction_correct = 2;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 2020 	strb.w	r2, [r3, #32]
	for(int i=0; i<layer->n_epochs; i++){
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	3301      	adds	r3, #1
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165c:	429a      	cmp	r2, r3
 800165e:	f6ff af7b 	blt.w	8001558 <OL_train+0x14>




	}
};
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_CRC_Init+0x20>)
 8001672:	4a07      	ldr	r2, [pc, #28]	; (8001690 <MX_CRC_Init+0x24>)
 8001674:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_CRC_Init+0x20>)
 8001678:	f000 fead 	bl	80023d6 <HAL_CRC_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001682:	f000 fbb5 	bl	8001df0 <Error_Handler>
  }

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200019a0 	.word	0x200019a0
 8001690:	40023000 	.word	0x40023000

08001694 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_CRC_MspInit+0x3c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10d      	bne.n	80016c2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_CRC_MspInit+0x40>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_CRC_MspInit+0x40>)
 80016b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_CRC_MspInit+0x40>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023000 	.word	0x40023000
 80016d4:	40023800 	.word	0x40023800

080016d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <MX_GPIO_Init+0x10c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a3b      	ldr	r2, [pc, #236]	; (80017e4 <MX_GPIO_Init+0x10c>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <MX_GPIO_Init+0x10c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <MX_GPIO_Init+0x10c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a26      	ldr	r2, [pc, #152]	; (80017e4 <MX_GPIO_Init+0x10c>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001764:	4820      	ldr	r0, [pc, #128]	; (80017e8 <MX_GPIO_Init+0x110>)
 8001766:	f000 fff7 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800176a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <MX_GPIO_Init+0x114>)
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	481c      	ldr	r0, [pc, #112]	; (80017f0 <MX_GPIO_Init+0x118>)
 8001780:	f000 fe68 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001784:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4812      	ldr	r0, [pc, #72]	; (80017e8 <MX_GPIO_Init+0x110>)
 800179e:	f000 fe59 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_GPIO_Init+0x11c>)
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_GPIO_Init+0x110>)
 80017b6:	f000 fe4d 	bl	8002454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2017      	movs	r0, #23
 80017c0:	f000 fdd3 	bl	800236a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c4:	2017      	movs	r0, #23
 80017c6:	f000 fdec 	bl	80023a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2028      	movs	r0, #40	; 0x28
 80017d0:	f000 fdcb 	bl	800236a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d4:	2028      	movs	r0, #40	; 0x28
 80017d6:	f000 fde4 	bl	80023a2 <HAL_NVIC_EnableIRQ>

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	10210000 	.word	0x10210000
 80017f0:	40020800 	.word	0x40020800
 80017f4:	10110000 	.word	0x10110000

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b08f      	sub	sp, #60	; 0x3c
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fe:	f000 fc67 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 fa05 	bl	8001c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f7ff ff67 	bl	80016d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800180a:	f000 fbbd 	bl	8001f88 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800180e:	f7ff ff2d 	bl	800166c <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8001812:	f002 fcc5 	bl	80041a0 <MX_X_CUBE_AI_Init>
  // ***** Initialize the OL layer ****************************
  OL_LAYER_STRUCT OL_layer;

  // Assign the weight and bias matrices

  OL_layer.WIDTH = 5;
 8001816:	2305      	movs	r3, #5
 8001818:	603b      	str	r3, [r7, #0]
  OL_layer.HEIGHT = AI_NETWORK_OUT_1_SIZE;
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	607b      	str	r3, [r7, #4]

  OL_layer.n_epochs = 1;
 800181e:	2301      	movs	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
  OL_layer.l_rate = 0.005;
 8001822:	4b99      	ldr	r3, [pc, #612]	; (8001a88 <main+0x290>)
 8001824:	60bb      	str	r3, [r7, #8]


  OL_layer.weights = (float*)calloc(OL_layer.WIDTH*OL_layer.HEIGHT, sizeof(float));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	2104      	movs	r1, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fa21 	bl	8005c78 <calloc>
 8001836:	4603      	mov	r3, r0
 8001838:	617b      	str	r3, [r7, #20]
  if(OL_layer.weights==NULL){
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d11c      	bne.n	800187a <main+0x82>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for weights");
 8001840:	4b92      	ldr	r3, [pc, #584]	; (8001a8c <main+0x294>)
 8001842:	4a93      	ldr	r2, [pc, #588]	; (8001a90 <main+0x298>)
 8001844:	4614      	mov	r4, r2
 8001846:	469c      	mov	ip, r3
 8001848:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800184c:	4665      	mov	r5, ip
 800184e:	4626      	mov	r6, r4
 8001850:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001852:	6028      	str	r0, [r5, #0]
 8001854:	6069      	str	r1, [r5, #4]
 8001856:	60aa      	str	r2, [r5, #8]
 8001858:	60eb      	str	r3, [r5, #12]
 800185a:	3410      	adds	r4, #16
 800185c:	f10c 0c10 	add.w	ip, ip, #16
 8001860:	4574      	cmp	r4, lr
 8001862:	d1f3      	bne.n	800184c <main+0x54>
 8001864:	222f      	movs	r2, #47	; 0x2f
 8001866:	4b8b      	ldr	r3, [pc, #556]	; (8001a94 <main+0x29c>)
 8001868:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 800186a:	4b8a      	ldr	r3, [pc, #552]	; (8001a94 <main+0x29c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	2364      	movs	r3, #100	; 0x64
 8001872:	4986      	ldr	r1, [pc, #536]	; (8001a8c <main+0x294>)
 8001874:	4888      	ldr	r0, [pc, #544]	; (8001a98 <main+0x2a0>)
 8001876:	f001 fc6a 	bl	800314e <HAL_UART_Transmit>
  }

  OL_layer.biases = (float*)calloc(OL_layer.WIDTH, sizeof(float));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2104      	movs	r1, #4
 800187e:	4618      	mov	r0, r3
 8001880:	f004 f9fa 	bl	8005c78 <calloc>
 8001884:	4603      	mov	r3, r0
 8001886:	61bb      	str	r3, [r7, #24]
  if(OL_layer.biases==NULL){
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d126      	bne.n	80018dc <main+0xe4>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for biases");
 800188e:	4b7f      	ldr	r3, [pc, #508]	; (8001a8c <main+0x294>)
 8001890:	4a82      	ldr	r2, [pc, #520]	; (8001a9c <main+0x2a4>)
 8001892:	4615      	mov	r5, r2
 8001894:	469c      	mov	ip, r3
 8001896:	f105 0e20 	add.w	lr, r5, #32
 800189a:	4664      	mov	r4, ip
 800189c:	462e      	mov	r6, r5
 800189e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80018a0:	6020      	str	r0, [r4, #0]
 80018a2:	6061      	str	r1, [r4, #4]
 80018a4:	60a2      	str	r2, [r4, #8]
 80018a6:	60e3      	str	r3, [r4, #12]
 80018a8:	3510      	adds	r5, #16
 80018aa:	f10c 0c10 	add.w	ip, ip, #16
 80018ae:	4575      	cmp	r5, lr
 80018b0:	d1f3      	bne.n	800189a <main+0xa2>
 80018b2:	4664      	mov	r4, ip
 80018b4:	462b      	mov	r3, r5
 80018b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80018b8:	6020      	str	r0, [r4, #0]
 80018ba:	6061      	str	r1, [r4, #4]
 80018bc:	60a2      	str	r2, [r4, #8]
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	789b      	ldrb	r3, [r3, #2]
 80018c2:	81a2      	strh	r2, [r4, #12]
 80018c4:	73a3      	strb	r3, [r4, #14]
 80018c6:	222e      	movs	r2, #46	; 0x2e
 80018c8:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <main+0x29c>)
 80018ca:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 80018cc:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <main+0x29c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	2364      	movs	r3, #100	; 0x64
 80018d4:	496d      	ldr	r1, [pc, #436]	; (8001a8c <main+0x294>)
 80018d6:	4870      	ldr	r0, [pc, #448]	; (8001a98 <main+0x2a0>)
 80018d8:	f001 fc39 	bl	800314e <HAL_UART_Transmit>
  }

  OL_layer.label = (char*)calloc(OL_layer.WIDTH, sizeof(char));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2101      	movs	r1, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 f9c9 	bl	8005c78 <calloc>
 80018e6:	4603      	mov	r3, r0
 80018e8:	613b      	str	r3, [r7, #16]
  if(OL_layer.label==NULL){
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d124      	bne.n	800193a <main+0x142>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for label");
 80018f0:	4b66      	ldr	r3, [pc, #408]	; (8001a8c <main+0x294>)
 80018f2:	4a6b      	ldr	r2, [pc, #428]	; (8001aa0 <main+0x2a8>)
 80018f4:	4614      	mov	r4, r2
 80018f6:	469c      	mov	ip, r3
 80018f8:	f104 0e20 	add.w	lr, r4, #32
 80018fc:	4665      	mov	r5, ip
 80018fe:	4626      	mov	r6, r4
 8001900:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001902:	6028      	str	r0, [r5, #0]
 8001904:	6069      	str	r1, [r5, #4]
 8001906:	60aa      	str	r2, [r5, #8]
 8001908:	60eb      	str	r3, [r5, #12]
 800190a:	3410      	adds	r4, #16
 800190c:	f10c 0c10 	add.w	ip, ip, #16
 8001910:	4574      	cmp	r4, lr
 8001912:	d1f3      	bne.n	80018fc <main+0x104>
 8001914:	4665      	mov	r5, ip
 8001916:	4623      	mov	r3, r4
 8001918:	cb07      	ldmia	r3!, {r0, r1, r2}
 800191a:	6028      	str	r0, [r5, #0]
 800191c:	6069      	str	r1, [r5, #4]
 800191e:	60aa      	str	r2, [r5, #8]
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	81ab      	strh	r3, [r5, #12]
 8001924:	222d      	movs	r2, #45	; 0x2d
 8001926:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <main+0x29c>)
 8001928:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 800192a:	4b5a      	ldr	r3, [pc, #360]	; (8001a94 <main+0x29c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29a      	uxth	r2, r3
 8001930:	2364      	movs	r3, #100	; 0x64
 8001932:	4956      	ldr	r1, [pc, #344]	; (8001a8c <main+0x294>)
 8001934:	4858      	ldr	r0, [pc, #352]	; (8001a98 <main+0x2a0>)
 8001936:	f001 fc0a 	bl	800314e <HAL_UART_Transmit>
  }

  OL_layer.y_pred = (float*)calloc(OL_layer.WIDTH, sizeof(float));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2104      	movs	r1, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f004 f99a 	bl	8005c78 <calloc>
 8001944:	4603      	mov	r3, r0
 8001946:	61fb      	str	r3, [r7, #28]
  if(OL_layer.y_pred==NULL){
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d126      	bne.n	800199c <main+0x1a4>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for y_pred");
 800194e:	4b4f      	ldr	r3, [pc, #316]	; (8001a8c <main+0x294>)
 8001950:	4a54      	ldr	r2, [pc, #336]	; (8001aa4 <main+0x2ac>)
 8001952:	4615      	mov	r5, r2
 8001954:	469c      	mov	ip, r3
 8001956:	f105 0e20 	add.w	lr, r5, #32
 800195a:	4664      	mov	r4, ip
 800195c:	462e      	mov	r6, r5
 800195e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001960:	6020      	str	r0, [r4, #0]
 8001962:	6061      	str	r1, [r4, #4]
 8001964:	60a2      	str	r2, [r4, #8]
 8001966:	60e3      	str	r3, [r4, #12]
 8001968:	3510      	adds	r5, #16
 800196a:	f10c 0c10 	add.w	ip, ip, #16
 800196e:	4575      	cmp	r5, lr
 8001970:	d1f3      	bne.n	800195a <main+0x162>
 8001972:	4664      	mov	r4, ip
 8001974:	462b      	mov	r3, r5
 8001976:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001978:	6020      	str	r0, [r4, #0]
 800197a:	6061      	str	r1, [r4, #4]
 800197c:	60a2      	str	r2, [r4, #8]
 800197e:	881a      	ldrh	r2, [r3, #0]
 8001980:	789b      	ldrb	r3, [r3, #2]
 8001982:	81a2      	strh	r2, [r4, #12]
 8001984:	73a3      	strb	r3, [r4, #14]
 8001986:	222e      	movs	r2, #46	; 0x2e
 8001988:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <main+0x29c>)
 800198a:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 800198c:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <main+0x29c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	b29a      	uxth	r2, r3
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	493d      	ldr	r1, [pc, #244]	; (8001a8c <main+0x294>)
 8001996:	4840      	ldr	r0, [pc, #256]	; (8001a98 <main+0x2a0>)
 8001998:	f001 fbd9 	bl	800314e <HAL_UART_Transmit>


  // ***********************************

  // Fill up the initial labels
  OL_layer.label[0] = 'A';
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2241      	movs	r2, #65	; 0x41
 80019a0:	701a      	strb	r2, [r3, #0]
  OL_layer.label[1] = 'E';
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	3301      	adds	r3, #1
 80019a6:	2245      	movs	r2, #69	; 0x45
 80019a8:	701a      	strb	r2, [r3, #0]
  OL_layer.label[2] = 'I';
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	3302      	adds	r3, #2
 80019ae:	2249      	movs	r2, #73	; 0x49
 80019b0:	701a      	strb	r2, [r3, #0]
  OL_layer.label[3] = 'O';
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	3303      	adds	r3, #3
 80019b6:	224f      	movs	r2, #79	; 0x4f
 80019b8:	701a      	strb	r2, [r3, #0]
  OL_layer.label[4] = 'U';
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	3304      	adds	r3, #4
 80019be:	2255      	movs	r2, #85	; 0x55
 80019c0:	701a      	strb	r2, [r3, #0]

  // Fill up weigths and biases
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
 80019c6:	e00c      	b.n	80019e2 <main+0x1ea>
  	  OL_layer.weights[i]=saved_weights[i];
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	4935      	ldr	r1, [pc, #212]	; (8001aa8 <main+0x2b0>)
 80019d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	440a      	add	r2, r1
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	3301      	adds	r3, #1
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ec:	429a      	cmp	r2, r3
 80019ee:	dbeb      	blt.n	80019c8 <main+0x1d0>
  }

  for(int i=0; i<OL_layer.WIDTH; i++){
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
 80019f4:	e00c      	b.n	8001a10 <main+0x218>
	  OL_layer.biases[i]=saved_biases[i];
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	492b      	ldr	r1, [pc, #172]	; (8001aac <main+0x2b4>)
 8001a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	440a      	add	r2, r1
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH; i++){
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbee      	blt.n	80019f6 <main+0x1fe>
  }

  //Create container for the output prediction of OL layer
  float * y_true = (float*)calloc(OL_layer.WIDTH, sizeof(float));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 f92b 	bl	8005c78 <calloc>
 8001a22:	4603      	mov	r3, r0
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // When blue button is pressed perform these actions
	  if(enable_inference == 1){
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <main+0x2b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	f040 80c9 	bne.w	8001bc2 <main+0x3ca>

		  // Reset the info carried from the OL layer
		  OL_resetInfo(&OL_layer);
 8001a30:	463b      	mov	r3, r7
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fa88 	bl	8000f48 <OL_resetInfo>

		  // Reconstruct the message sent from the lapton (IMPORTANT FOR NEGATIVE NUMBERS)
		  uint8_t tmp;
		  for(int k=0; k<600; k++){
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3c:	e056      	b.n	8001aec <main+0x2f4>
			  tmp = msgRxData[k*2];
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <main+0x2bc>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  if((tmp&128) == 128){
 8001a4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da34      	bge.n	8001abc <main+0x2c4>
				  tmp = tmp & 127;
 8001a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  in_data[k] = -((tmp << 8) | (msgRxData[(k*2)+1]));
 8001a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a66:	0052      	lsls	r2, r2, #1
 8001a68:	3201      	adds	r2, #1
 8001a6a:	4912      	ldr	r1, [pc, #72]	; (8001ab4 <main+0x2bc>)
 8001a6c:	5c8a      	ldrb	r2, [r1, r2]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	425b      	negs	r3, r3
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <main+0x2c0>)
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	edc3 7a00 	vstr	s15, [r3]
 8001a86:	e02e      	b.n	8001ae6 <main+0x2ee>
 8001a88:	3ba3d70a 	.word	0x3ba3d70a
 8001a8c:	2000191c 	.word	0x2000191c
 8001a90:	080074c0 	.word	0x080074c0
 8001a94:	2000199c 	.word	0x2000199c
 8001a98:	20002518 	.word	0x20002518
 8001a9c:	080074f0 	.word	0x080074f0
 8001aa0:	08007520 	.word	0x08007520
 8001aa4:	08007550 	.word	0x08007550
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000a00 	.word	0x20000a00
 8001ab0:	20000f58 	.word	0x20000f58
 8001ab4:	2000146c 	.word	0x2000146c
 8001ab8:	200019b4 	.word	0x200019b4
			  }else{
				  in_data[k] = (msgRxData[(k*2)] << 8) | (msgRxData[(k*2)+1]);
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <main+0x3e4>)
 8001ac2:	5cd3      	ldrb	r3, [r2, r3]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac8:	0052      	lsls	r2, r2, #1
 8001aca:	3201      	adds	r2, #1
 8001acc:	4943      	ldr	r1, [pc, #268]	; (8001bdc <main+0x3e4>)
 8001ace:	5c8a      	ldrb	r2, [r1, r2]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ada:	4a41      	ldr	r2, [pc, #260]	; (8001be0 <main+0x3e8>)
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
		  for(int k=0; k<600; k++){
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	3301      	adds	r3, #1
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001af2:	dba4      	blt.n	8001a3e <main+0x246>
			  }
		  }


		  startTime = HAL_GetTick();
 8001af4:	f000 fb52 	bl	800219c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <main+0x3ec>)
 8001afc:	601a      	str	r2, [r3, #0]

		  // Perform inference from FROZEN MODEL
		  ai_run_v2(&in_data, &out_data);
 8001afe:	493a      	ldr	r1, [pc, #232]	; (8001be8 <main+0x3f0>)
 8001b00:	4837      	ldr	r0, [pc, #220]	; (8001be0 <main+0x3e8>)
 8001b02:	f002 fb0f 	bl	8004124 <ai_run_v2>

		  endFrozenTime = HAL_GetTick();
 8001b06:	f000 fb49 	bl	800219c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <main+0x3f4>)
 8001b0e:	601a      	str	r2, [r3, #0]

		  // Check if the letter is known, otherwise increase dimensions
		  OL_checkNewClass(&OL_layer, letter);
 8001b10:	463b      	mov	r3, r7
 8001b12:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <main+0x3f8>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fccd 	bl	80014b4 <OL_checkNewClass>
		  OL_lettToSoft(&OL_layer, letter, y_true);
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b1e:	4934      	ldr	r1, [pc, #208]	; (8001bf0 <main+0x3f8>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fa2b 	bl	8000f7c <OL_lettToSoft>

		  // Perform training on last captured sample
		  OL_train(&OL_layer, out_data, y_true, letter);
 8001b26:	4638      	mov	r0, r7
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <main+0x3f8>)
 8001b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b2c:	492e      	ldr	r1, [pc, #184]	; (8001be8 <main+0x3f0>)
 8001b2e:	f7ff fd09 	bl	8001544 <OL_train>

		  endOLTime = HAL_GetTick();
 8001b32:	f000 fb33 	bl	800219c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <main+0x3fc>)
 8001b3a:	601a      	str	r2, [r3, #0]

		  // Send info data to laptop
			msgInfo[0] = counter;
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <main+0x400>)
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <main+0x404>)
 8001b42:	701a      	strb	r2, [r3, #0]
			msgInfo[1] = endFrozenTime-startTime;
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <main+0x3f4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <main+0x3ec>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <main+0x404>)
 8001b56:	705a      	strb	r2, [r3, #1]
			msgInfo[2] = endOLTime-endFrozenTime;
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <main+0x3fc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <main+0x3f4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <main+0x404>)
 8001b6a:	709a      	strb	r2, [r3, #2]
			msgInfo[3] = OL_layer.new_class;
 8001b6c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <main+0x404>)
 8001b72:	70da      	strb	r2, [r3, #3]
			msgInfo[4] = OL_layer.prediction_correct;
 8001b74:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <main+0x404>)
 8001b7a:	711a      	strb	r2, [r3, #4]
			msgInfo[5] = OL_layer.w_update;
 8001b7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <main+0x404>)
 8001b82:	715a      	strb	r2, [r3, #5]
			msgInfo[6] = OL_layer.WIDTH;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <main+0x404>)
 8001b8a:	719a      	strb	r2, [r3, #6]
			msgInfo[7] = OL_layer.HEIGHT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <main+0x404>)
 8001b92:	71da      	strb	r2, [r3, #7]
			msgInfo[8] = OL_layer.vowel_guess;
 8001b94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <main+0x404>)
 8001b9a:	721a      	strb	r2, [r3, #8]

			HAL_UART_Transmit(&huart2, (uint8_t*)msgInfo, 9, 100);
 8001b9c:	2364      	movs	r3, #100	; 0x64
 8001b9e:	2209      	movs	r2, #9
 8001ba0:	4916      	ldr	r1, [pc, #88]	; (8001bfc <main+0x404>)
 8001ba2:	4817      	ldr	r0, [pc, #92]	; (8001c00 <main+0x408>)
 8001ba4:	f001 fad3 	bl	800314e <HAL_UART_Transmit>


		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ba8:	2120      	movs	r1, #32
 8001baa:	4816      	ldr	r0, [pc, #88]	; (8001c04 <main+0x40c>)
 8001bac:	f000 fded 	bl	800278a <HAL_GPIO_TogglePin>
		  counter +=1;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <main+0x400>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <main+0x400>)
 8001bba:	701a      	strb	r2, [r3, #0]
		  enable_inference = 0;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <main+0x410>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
	  }

	  if(BlueButton == 1){
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <main+0x414>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	f47f af2d 	bne.w	8001a26 <main+0x22e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd2:	480c      	ldr	r0, [pc, #48]	; (8001c04 <main+0x40c>)
 8001bd4:	f000 fdc0 	bl	8002758 <HAL_GPIO_WritePin>
	  if(enable_inference == 1){
 8001bd8:	e725      	b.n	8001a26 <main+0x22e>
 8001bda:	bf00      	nop
 8001bdc:	2000146c 	.word	0x2000146c
 8001be0:	200019b4 	.word	0x200019b4
 8001be4:	20002514 	.word	0x20002514
 8001be8:	20002314 	.word	0x20002314
 8001bec:	200019a8 	.word	0x200019a8
 8001bf0:	200019ac 	.word	0x200019ac
 8001bf4:	200019b0 	.word	0x200019b0
 8001bf8:	20000f54 	.word	0x20000f54
 8001bfc:	20001460 	.word	0x20001460
 8001c00:	20002518 	.word	0x20002518
 8001c04:	40020000 	.word	0x40020000
 8001c08:	20000f58 	.word	0x20000f58
 8001c0c:	20000f5c 	.word	0x20000f5c

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b094      	sub	sp, #80	; 0x50
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0320 	add.w	r3, r7, #32
 8001c1a:	2230      	movs	r2, #48	; 0x30
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 f877 	bl	8005d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <SystemClock_Config+0xd0>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4a28      	ldr	r2, [pc, #160]	; (8001ce0 <SystemClock_Config+0xd0>)
 8001c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c42:	6413      	str	r3, [r2, #64]	; 0x40
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <SystemClock_Config+0xd0>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <SystemClock_Config+0xd4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c5c:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <SystemClock_Config+0xd4>)
 8001c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <SystemClock_Config+0xd4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c70:	2302      	movs	r3, #2
 8001c72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c74:	2301      	movs	r3, #1
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c78:	2310      	movs	r3, #16
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c84:	2310      	movs	r3, #16
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c88:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c92:	2307      	movs	r3, #7
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fda8 	bl	80027f0 <HAL_RCC_OscConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ca6:	f000 f8a3 	bl	8001df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001caa:	230f      	movs	r3, #15
 8001cac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 f802 	bl	8002cd0 <HAL_RCC_ClockConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001cd2:	f000 f88d 	bl	8001df0 <Error_Handler>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3750      	adds	r7, #80	; 0x50
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == B1_Pin){
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf8:	d130      	bne.n	8001d5c <HAL_GPIO_EXTI_Callback+0x74>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	4832      	ldr	r0, [pc, #200]	; (8001dc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001cfe:	f000 fd44 	bl	800278a <HAL_GPIO_TogglePin>

		if(BlueButton == 0){
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d15a      	bne.n	8001dc0 <HAL_GPIO_EXTI_Callback+0xd8>

			BlueButton = 1;
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]

			msgLen = sprintf(msgDebug, "OK");
 8001d10:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d12:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001d14:	8811      	ldrh	r1, [r2, #0]
 8001d16:	7892      	ldrb	r2, [r2, #2]
 8001d18:	8019      	strh	r1, [r3, #0]
 8001d1a:	709a      	strb	r2, [r3, #2]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001d20:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc message in order to sync
 8001d22:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	2364      	movs	r3, #100	; 0x64
 8001d2a:	4929      	ldr	r1, [pc, #164]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d2c:	482b      	ldr	r0, [pc, #172]	; (8001ddc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d2e:	f001 fa0e 	bl	800314e <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive all the data
 8001d32:	2364      	movs	r3, #100	; 0x64
 8001d34:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001d38:	4929      	ldr	r1, [pc, #164]	; (8001de0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d3a:	4828      	ldr	r0, [pc, #160]	; (8001ddc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d3c:	f001 faa0 	bl	8003280 <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);		// Receive the label
 8001d40:	2364      	movs	r3, #100	; 0x64
 8001d42:	2201      	movs	r2, #1
 8001d44:	4927      	ldr	r1, [pc, #156]	; (8001de4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d46:	4825      	ldr	r0, [pc, #148]	; (8001ddc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d48:	f001 fa9a 	bl	8003280 <HAL_UART_Receive>

			letter[0] = msgRxLett[0];
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001d52:	701a      	strb	r2, [r3, #0]

			enable_inference = 1;
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_GPIO_EXTI_Callback+0x104>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
			letter[0] = msgRxLett[0];

			enable_inference = 1;
		}
	}
}
 8001d5a:	e031      	b.n	8001dc0 <HAL_GPIO_EXTI_Callback+0xd8>
	}else if(GPIO_Pin == GPIO_PIN_7){
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	2b80      	cmp	r3, #128	; 0x80
 8001d60:	d12e      	bne.n	8001dc0 <HAL_GPIO_EXTI_Callback+0xd8>
		if(BlueButton == 1){
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d12a      	bne.n	8001dc0 <HAL_GPIO_EXTI_Callback+0xd8>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d70:	4815      	ldr	r0, [pc, #84]	; (8001dc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001d72:	f000 fcf1 	bl	8002758 <HAL_GPIO_WritePin>
			msgLen = sprintf(msgDebug, "OK");
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d78:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001d7a:	8811      	ldrh	r1, [r2, #0]
 8001d7c:	7892      	ldrb	r2, [r2, #2]
 8001d7e:	8019      	strh	r1, [r3, #0]
 8001d80:	709a      	strb	r2, [r3, #2]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001d86:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc message in order to sync
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	2364      	movs	r3, #100	; 0x64
 8001d90:	490f      	ldr	r1, [pc, #60]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d92:	4812      	ldr	r0, [pc, #72]	; (8001ddc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d94:	f001 f9db 	bl	800314e <HAL_UART_Transmit>
			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive all the data
 8001d98:	2364      	movs	r3, #100	; 0x64
 8001d9a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001d9e:	4910      	ldr	r1, [pc, #64]	; (8001de0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001da0:	480e      	ldr	r0, [pc, #56]	; (8001ddc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001da2:	f001 fa6d 	bl	8003280 <HAL_UART_Receive>
			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);		// Receive the label
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	2201      	movs	r2, #1
 8001daa:	490e      	ldr	r1, [pc, #56]	; (8001de4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001dae:	f001 fa67 	bl	8003280 <HAL_UART_Receive>
			letter[0] = msgRxLett[0];
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001db8:	701a      	strb	r2, [r3, #0]
			enable_inference = 1;
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_GPIO_EXTI_Callback+0x104>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	20000f5c 	.word	0x20000f5c
 8001dd0:	2000191c 	.word	0x2000191c
 8001dd4:	08007580 	.word	0x08007580
 8001dd8:	2000199c 	.word	0x2000199c
 8001ddc:	20002518 	.word	0x20002518
 8001de0:	2000146c 	.word	0x2000146c
 8001de4:	2000145c 	.word	0x2000145c
 8001de8:	200019ac 	.word	0x200019ac
 8001dec:	20000f58 	.word	0x20000f58

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <Error_Handler+0x6>

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e36:	2007      	movs	r0, #7
 8001e38:	f000 fa8c 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2051      	movs	r0, #81	; 0x51
 8001e42:	f000 fa92 	bl	800236a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001e46:	2051      	movs	r0, #81	; 0x51
 8001e48:	f000 faab 	bl	80023a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <NMI_Handler+0x4>

08001e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea4:	f000 f966 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001eb0:	2080      	movs	r0, #128	; 0x80
 8001eb2:	f000 fc85 	bl	80027c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <USART2_IRQHandler+0x10>)
 8001ec2:	f001 fa83 	bl	80033cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20002518 	.word	0x20002518

08001ed0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ed4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ed8:	f000 fc72 	bl	80027c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f003 feb2 	bl	8005c88 <__errno>
 8001f24:	4602      	mov	r2, r0
 8001f26:	230c      	movs	r3, #12
 8001f28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20018000 	.word	0x20018000
 8001f50:	00001000 	.word	0x00001000
 8001f54:	20000f60 	.word	0x20000f60
 8001f58:	20002560 	.word	0x20002560

08001f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <SystemInit+0x28>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <SystemInit+0x28>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SystemInit+0x28>)
 8001f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f76:	609a      	str	r2, [r3, #8]
#endif
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fc0:	f001 f878 	bl	80030b4 <HAL_UART_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fca:	f7ff ff11 	bl	8001df0 <Error_Handler>
  }

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20002518 	.word	0x20002518
 8001fd8:	40004400 	.word	0x40004400

08001fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_UART_MspInit+0x94>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d133      	bne.n	8002066 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a14      	ldr	r2, [pc, #80]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_UART_MspInit+0x98>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002036:	230c      	movs	r3, #12
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002046:	2307      	movs	r3, #7
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	4809      	ldr	r0, [pc, #36]	; (8002078 <HAL_UART_MspInit+0x9c>)
 8002052:	f000 f9ff 	bl	8002454 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2026      	movs	r0, #38	; 0x26
 800205c:	f000 f985 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002060:	2026      	movs	r0, #38	; 0x26
 8002062:	f000 f99e 	bl	80023a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40004400 	.word	0x40004400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002082:	e003      	b.n	800208c <LoopCopyDataInit>

08002084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800208a:	3104      	adds	r1, #4

0800208c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800208c:	480b      	ldr	r0, [pc, #44]	; (80020bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002094:	d3f6      	bcc.n	8002084 <CopyDataInit>
  ldr  r2, =_sbss
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002098:	e002      	b.n	80020a0 <LoopFillZerobss>

0800209a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800209a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800209c:	f842 3b04 	str.w	r3, [r2], #4

080020a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020a4:	d3f9      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020a6:	f7ff ff59 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f003 fdf3 	bl	8005c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7ff fba3 	bl	80017f8 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80020b8:	08062c90 	.word	0x08062c90
  ldr  r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020c0:	20000f38 	.word	0x20000f38
  ldr  r2, =_sbss
 80020c4:	20000f38 	.word	0x20000f38
  ldr  r3, = _ebss
 80020c8:	20002560 	.word	0x20002560

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <HAL_Init+0x40>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_Init+0x40>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_Init+0x40>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 f92b 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	2000      	movs	r0, #0
 8002100:	f000 f808 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff fe78 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f943 	bl	80023be <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f000 f90b 	bl	800236a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000a14 	.word	0x20000a14
 800216c:	20000a1c 	.word	0x20000a1c
 8002170:	20000a18 	.word	0x20000a18

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000a1c 	.word	0x20000a1c
 8002198:	20002558 	.word	0x20002558

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20002558 	.word	0x20002558

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d301      	bcc.n	8002326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002322:	2301      	movs	r3, #1
 8002324:	e00f      	b.n	8002346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <SysTick_Config+0x40>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232e:	210f      	movs	r1, #15
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	f7ff ff8e 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SysTick_Config+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <SysTick_Config+0x40>)
 8002340:	2207      	movs	r2, #7
 8002342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff29 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800237c:	f7ff ff3e 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff8e 	bl	80022a8 <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5d 	bl	8002254 <__NVIC_SetPriority>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff31 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffa2 	bl	8002310 <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e00e      	b.n	8002406 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	795b      	ldrb	r3, [r3, #5]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d105      	bne.n	80023fe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff f94b 	bl	8001694 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d004      	beq.n	800242c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e00c      	b.n	8002446 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2205      	movs	r2, #5
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e159      	b.n	8002724 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 8148 	bne.w	800271e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d00b      	beq.n	80024ae <HAL_GPIO_Init+0x5a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d007      	beq.n	80024ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a2:	2b11      	cmp	r3, #17
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b12      	cmp	r3, #18
 80024ac:	d130      	bne.n	8002510 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 0201 	and.w	r2, r3, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0xfc>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b12      	cmp	r3, #18
 800254e:	d123      	bne.n	8002598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	69b9      	ldr	r1, [r7, #24]
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80a2 	beq.w	800271e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b56      	ldr	r3, [pc, #344]	; (8002738 <HAL_GPIO_Init+0x2e4>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a55      	ldr	r2, [pc, #340]	; (8002738 <HAL_GPIO_Init+0x2e4>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_GPIO_Init+0x2e4>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025f6:	4a51      	ldr	r2, [pc, #324]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a48      	ldr	r2, [pc, #288]	; (8002740 <HAL_GPIO_Init+0x2ec>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d019      	beq.n	8002656 <HAL_GPIO_Init+0x202>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_GPIO_Init+0x1fe>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a46      	ldr	r2, [pc, #280]	; (8002748 <HAL_GPIO_Init+0x2f4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00d      	beq.n	800264e <HAL_GPIO_Init+0x1fa>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a45      	ldr	r2, [pc, #276]	; (800274c <HAL_GPIO_Init+0x2f8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_GPIO_Init+0x1f6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a44      	ldr	r2, [pc, #272]	; (8002750 <HAL_GPIO_Init+0x2fc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_GPIO_Init+0x1f2>
 8002642:	2304      	movs	r3, #4
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x204>
 8002646:	2307      	movs	r3, #7
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x204>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x204>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x204>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x204>
 8002656:	2300      	movs	r3, #0
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f002 0203 	and.w	r2, r2, #3
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002668:	4934      	ldr	r1, [pc, #208]	; (800273c <HAL_GPIO_Init+0x2e8>)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <HAL_GPIO_Init+0x300>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269a:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <HAL_GPIO_Init+0x300>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026a0:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <HAL_GPIO_Init+0x300>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c4:	4a23      	ldr	r2, [pc, #140]	; (8002754 <HAL_GPIO_Init+0x300>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_GPIO_Init+0x300>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ee:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_GPIO_Init+0x300>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <HAL_GPIO_Init+0x300>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_GPIO_Init+0x300>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3301      	adds	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	f67f aea2 	bls.w	8002470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800272c:	bf00      	nop
 800272e:	3724      	adds	r7, #36	; 0x24
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40023800 	.word	0x40023800
 800273c:	40013800 	.word	0x40013800
 8002740:	40020000 	.word	0x40020000
 8002744:	40020400 	.word	0x40020400
 8002748:	40020800 	.word	0x40020800
 800274c:	40020c00 	.word	0x40020c00
 8002750:	40021000 	.word	0x40021000
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
 8002764:	4613      	mov	r3, r2
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002774:	e003      	b.n	800277e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	401a      	ands	r2, r3
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d104      	bne.n	80027ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	041a      	lsls	r2, r3, #16
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fa82 	bl	8001ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e25b      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d075      	beq.n	80028fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280e:	4ba3      	ldr	r3, [pc, #652]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d00c      	beq.n	8002834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4ba0      	ldr	r3, [pc, #640]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002822:	2b08      	cmp	r3, #8
 8002824:	d112      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002826:	4b9d      	ldr	r3, [pc, #628]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4b99      	ldr	r3, [pc, #612]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x108>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d157      	bne.n	80028f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e236      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x74>
 8002856:	4b91      	ldr	r3, [pc, #580]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a90      	ldr	r2, [pc, #576]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b8b      	ldr	r3, [pc, #556]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a8a      	ldr	r2, [pc, #552]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a87      	ldr	r2, [pc, #540]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002888:	4b84      	ldr	r3, [pc, #528]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a83      	ldr	r2, [pc, #524]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b81      	ldr	r3, [pc, #516]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a80      	ldr	r2, [pc, #512]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff fc78 	bl	800219c <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff fc74 	bl	800219c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1fb      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xc0>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7ff fc64 	bl	800219c <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d8:	f7ff fc60 	bl	800219c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1e7      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	4b6c      	ldr	r3, [pc, #432]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0xe8>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d063      	beq.n	80029ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002906:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b62      	ldr	r3, [pc, #392]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291a:	2b08      	cmp	r3, #8
 800291c:	d11c      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d116      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e1bb      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002942:	4b56      	ldr	r3, [pc, #344]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4952      	ldr	r1, [pc, #328]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	e03a      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002960:	4b4f      	ldr	r3, [pc, #316]	; (8002aa0 <HAL_RCC_OscConfig+0x2b0>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7ff fc19 	bl	800219c <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296e:	f7ff fc15 	bl	800219c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e19c      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4940      	ldr	r1, [pc, #256]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_OscConfig+0x2b0>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7ff fbf8 	bl	800219c <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b0:	f7ff fbf4 	bl	800219c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e17b      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d030      	beq.n	8002a3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCC_OscConfig+0x2b4>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7ff fbd8 	bl	800219c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f0:	f7ff fbd4 	bl	800219c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e15b      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x200>
 8002a0e:	e015      	b.n	8002a3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_RCC_OscConfig+0x2b4>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7ff fbc1 	bl	800219c <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7ff fbbd 	bl	800219c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e144      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80a0 	beq.w	8002b8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x2b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d121      	bne.n	8002aca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_RCC_OscConfig+0x2b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <HAL_RCC_OscConfig+0x2b8>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fb83 	bl	800219c <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	e011      	b.n	8002abe <HAL_RCC_OscConfig+0x2ce>
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	42470000 	.word	0x42470000
 8002aa4:	42470e80 	.word	0x42470e80
 8002aa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7ff fb76 	bl	800219c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0fd      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b81      	ldr	r3, [pc, #516]	; (8002cc4 <HAL_RCC_OscConfig+0x4d4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2f0>
 8002ad2:	4b7d      	ldr	r3, [pc, #500]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	4a7c      	ldr	r2, [pc, #496]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ade:	e01c      	b.n	8002b1a <HAL_RCC_OscConfig+0x32a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d10c      	bne.n	8002b02 <HAL_RCC_OscConfig+0x312>
 8002ae8:	4b77      	ldr	r3, [pc, #476]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a76      	ldr	r2, [pc, #472]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	4b74      	ldr	r3, [pc, #464]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a73      	ldr	r2, [pc, #460]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	e00b      	b.n	8002b1a <HAL_RCC_OscConfig+0x32a>
 8002b02:	4b71      	ldr	r3, [pc, #452]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a70      	ldr	r2, [pc, #448]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	4b6e      	ldr	r3, [pc, #440]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	4a6d      	ldr	r2, [pc, #436]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d015      	beq.n	8002b4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7ff fb3b 	bl	800219c <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7ff fb37 	bl	800219c <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0bc      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ee      	beq.n	8002b2a <HAL_RCC_OscConfig+0x33a>
 8002b4c:	e014      	b.n	8002b78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fb25 	bl	800219c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7ff fb21 	bl	800219c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0a6      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6c:	4b56      	ldr	r3, [pc, #344]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7e:	4b52      	ldr	r3, [pc, #328]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a51      	ldr	r2, [pc, #324]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8092 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b94:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d05c      	beq.n	8002c5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d141      	bne.n	8002c2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b48      	ldr	r3, [pc, #288]	; (8002ccc <HAL_RCC_OscConfig+0x4dc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7ff faf5 	bl	800219c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7ff faf1 	bl	800219c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e078      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc8:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	019b      	lsls	r3, r3, #6
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	4933      	ldr	r1, [pc, #204]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfe:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <HAL_RCC_OscConfig+0x4dc>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7ff faca 	bl	800219c <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7ff fac6 	bl	800219c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e04d      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x41c>
 8002c2a:	e045      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x4dc>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7ff fab3 	bl	800219c <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7ff faaf 	bl	800219c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e036      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x44a>
 8002c58:	e02e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e029      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_RCC_OscConfig+0x4d8>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d11c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d115      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c8e:	4013      	ands	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d106      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	42470060 	.word	0x42470060

08002cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0cc      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d90c      	bls.n	8002d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0b8      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d24:	4b59      	ldr	r3, [pc, #356]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4a58      	ldr	r2, [pc, #352]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d3c:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a52      	ldr	r2, [pc, #328]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	494d      	ldr	r1, [pc, #308]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d044      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d119      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e07f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e06f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e067      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4934      	ldr	r1, [pc, #208]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc0:	f7ff f9ec 	bl	800219c <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7ff f9e8 	bl	800219c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e04f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 020c 	and.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1eb      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d20c      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e032      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4916      	ldr	r1, [pc, #88]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	490e      	ldr	r1, [pc, #56]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e56:	f000 f821 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	5cd3      	ldrb	r3, [r2, r3]
 8002e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e6e:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f94c 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40023c00 	.word	0x40023c00
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	08007758 	.word	0x08007758
 8002e94:	20000a14 	.word	0x20000a14
 8002e98:	20000a18 	.word	0x20000a18

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d007      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x32>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x38>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 80b4 	bne.w	8003030 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002eca:	60bb      	str	r3, [r7, #8]
       break;
 8002ecc:	e0b3      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ece:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ed0:	60bb      	str	r3, [r7, #8]
      break;
 8002ed2:	e0b0      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ede:	4b58      	ldr	r3, [pc, #352]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04a      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b55      	ldr	r3, [pc, #340]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	f04f 0400 	mov.w	r4, #0
 8002ef4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	ea03 0501 	and.w	r5, r3, r1
 8002f00:	ea04 0602 	and.w	r6, r4, r2
 8002f04:	4629      	mov	r1, r5
 8002f06:	4632      	mov	r2, r6
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	0154      	lsls	r4, r2, #5
 8002f12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f16:	014b      	lsls	r3, r1, #5
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	1b49      	subs	r1, r1, r5
 8002f1e:	eb62 0206 	sbc.w	r2, r2, r6
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	f04f 0400 	mov.w	r4, #0
 8002f2a:	0194      	lsls	r4, r2, #6
 8002f2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f30:	018b      	lsls	r3, r1, #6
 8002f32:	1a5b      	subs	r3, r3, r1
 8002f34:	eb64 0402 	sbc.w	r4, r4, r2
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	00e2      	lsls	r2, r4, #3
 8002f42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f46:	00d9      	lsls	r1, r3, #3
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	195b      	adds	r3, r3, r5
 8002f4e:	eb44 0406 	adc.w	r4, r4, r6
 8002f52:	f04f 0100 	mov.w	r1, #0
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	0262      	lsls	r2, r4, #9
 8002f5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f60:	0259      	lsls	r1, r3, #9
 8002f62:	460b      	mov	r3, r1
 8002f64:	4614      	mov	r4, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	4621      	mov	r1, r4
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f04f 0400 	mov.w	r4, #0
 8002f70:	461a      	mov	r2, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	f7fd fe68 	bl	8000c48 <__aeabi_uldivmod>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e049      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f80:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	f04f 0400 	mov.w	r4, #0
 8002f8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	ea03 0501 	and.w	r5, r3, r1
 8002f96:	ea04 0602 	and.w	r6, r4, r2
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	4632      	mov	r2, r6
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	0154      	lsls	r4, r2, #5
 8002fa8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fac:	014b      	lsls	r3, r1, #5
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	1b49      	subs	r1, r1, r5
 8002fb4:	eb62 0206 	sbc.w	r2, r2, r6
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	f04f 0400 	mov.w	r4, #0
 8002fc0:	0194      	lsls	r4, r2, #6
 8002fc2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fc6:	018b      	lsls	r3, r1, #6
 8002fc8:	1a5b      	subs	r3, r3, r1
 8002fca:	eb64 0402 	sbc.w	r4, r4, r2
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	00e2      	lsls	r2, r4, #3
 8002fd8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fdc:	00d9      	lsls	r1, r3, #3
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	195b      	adds	r3, r3, r5
 8002fe4:	eb44 0406 	adc.w	r4, r4, r6
 8002fe8:	f04f 0100 	mov.w	r1, #0
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	02a2      	lsls	r2, r4, #10
 8002ff2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ff6:	0299      	lsls	r1, r3, #10
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	4621      	mov	r1, r4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f04f 0400 	mov.w	r4, #0
 8003006:	461a      	mov	r2, r3
 8003008:	4623      	mov	r3, r4
 800300a:	f7fd fe1d 	bl	8000c48 <__aeabi_uldivmod>
 800300e:	4603      	mov	r3, r0
 8003010:	460c      	mov	r4, r1
 8003012:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	3301      	adds	r3, #1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	60bb      	str	r3, [r7, #8]
      break;
 800302e:	e002      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003032:	60bb      	str	r3, [r7, #8]
      break;
 8003034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003036:	68bb      	ldr	r3, [r7, #8]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	00f42400 	.word	0x00f42400
 8003048:	007a1200 	.word	0x007a1200

0800304c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000a14 	.word	0x20000a14

08003064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003068:	f7ff fff0 	bl	800304c <HAL_RCC_GetHCLKFreq>
 800306c:	4601      	mov	r1, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0a9b      	lsrs	r3, r3, #10
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	08007768 	.word	0x08007768

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003090:	f7ff ffdc 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8003094:	4601      	mov	r1, r0
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0b5b      	lsrs	r3, r3, #13
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	08007768 	.word	0x08007768

080030b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e03f      	b.n	8003146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe ff7e 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fbf1 	bl	80038e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800310c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800311c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800312c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b088      	sub	sp, #32
 8003152:	af02      	add	r7, sp, #8
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b20      	cmp	r3, #32
 800316c:	f040 8083 	bne.w	8003276 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_UART_Transmit+0x2e>
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e07b      	b.n	8003278 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_UART_Transmit+0x40>
 800318a:	2302      	movs	r3, #2
 800318c:	e074      	b.n	8003278 <HAL_UART_Transmit+0x12a>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2221      	movs	r2, #33	; 0x21
 80031a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80031a4:	f7fe fffa 	bl	800219c <HAL_GetTick>
 80031a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80031be:	e042      	b.n	8003246 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d6:	d122      	bne.n	800321e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fa10 	bl	8003608 <UART_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e042      	b.n	8003278 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003204:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3302      	adds	r3, #2
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	e017      	b.n	8003246 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	e013      	b.n	8003246 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f9ed 	bl	8003608 <UART_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e01f      	b.n	8003278 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	60ba      	str	r2, [r7, #8]
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1b7      	bne.n	80031c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2200      	movs	r2, #0
 8003258:	2140      	movs	r1, #64	; 0x40
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f9d4 	bl	8003608 <UART_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e006      	b.n	8003278 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b20      	cmp	r3, #32
 800329e:	f040 8090 	bne.w	80033c2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_UART_Receive+0x2e>
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e088      	b.n	80033c4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Receive+0x40>
 80032bc:	2302      	movs	r3, #2
 80032be:	e081      	b.n	80033c4 <HAL_UART_Receive+0x144>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2222      	movs	r2, #34	; 0x22
 80032d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80032d6:	f7fe ff61 	bl	800219c <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032f0:	e05c      	b.n	80033ac <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003308:	d12b      	bne.n	8003362 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	2120      	movs	r1, #32
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f977 	bl	8003608 <UART_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e04f      	b.n	80033c4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10c      	bne.n	800334a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333c:	b29a      	uxth	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3302      	adds	r3, #2
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	e030      	b.n	80033ac <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	b29b      	uxth	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	b29a      	uxth	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3301      	adds	r3, #1
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	e024      	b.n	80033ac <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	2120      	movs	r1, #32
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f94b 	bl	8003608 <UART_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e023      	b.n	80033c4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d108      	bne.n	8003396 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	60ba      	str	r2, [r7, #8]
 8003390:	b2ca      	uxtb	r2, r1
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e00a      	b.n	80033ac <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1c59      	adds	r1, r3, #1
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d19d      	bne.n	80032f2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_UART_IRQHandler+0x52>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f9e0 	bl	80037dc <UART_Receive_IT>
      return;
 800341c:	e0d1      	b.n	80035c2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80b0 	beq.w	8003586 <HAL_UART_IRQHandler+0x1ba>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d105      	bne.n	800343c <HAL_UART_IRQHandler+0x70>
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a5 	beq.w	8003586 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_UART_IRQHandler+0x90>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_UART_IRQHandler+0xb0>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	f043 0202 	orr.w	r2, r3, #2
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_UART_IRQHandler+0xd0>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	f043 0204 	orr.w	r2, r3, #4
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00f      	beq.n	80034c6 <HAL_UART_IRQHandler+0xfa>
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d104      	bne.n	80034ba <HAL_UART_IRQHandler+0xee>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	f043 0208 	orr.w	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d078      	beq.n	80035c0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_UART_IRQHandler+0x11c>
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f97a 	bl	80037dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <HAL_UART_IRQHandler+0x144>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d031      	beq.n	8003574 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8c3 	bl	800369c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	d123      	bne.n	800356c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003532:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	4a21      	ldr	r2, [pc, #132]	; (80035c8 <HAL_UART_IRQHandler+0x1fc>)
 8003542:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe ff60 	bl	800240e <HAL_DMA_Abort_IT>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d016      	beq.n	8003582 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800355e:	4610      	mov	r0, r2
 8003560:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003562:	e00e      	b.n	8003582 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f845 	bl	80035f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356a:	e00a      	b.n	8003582 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f841 	bl	80035f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003572:	e006      	b.n	8003582 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f83d 	bl	80035f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003580:	e01e      	b.n	80035c0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003582:	bf00      	nop
    return;
 8003584:	e01c      	b.n	80035c0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_UART_IRQHandler+0x1d6>
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8b0 	bl	8003700 <UART_Transmit_IT>
    return;
 80035a0:	e00f      	b.n	80035c2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_UART_IRQHandler+0x1f6>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8f8 	bl	80037ac <UART_EndTransmit_IT>
    return;
 80035bc:	bf00      	nop
 80035be:	e000      	b.n	80035c2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80035c0:	bf00      	nop
  }
}
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	080036d9 	.word	0x080036d9

080035cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003618:	e02c      	b.n	8003674 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d028      	beq.n	8003674 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <UART_WaitOnFlagUntilTimeout+0x30>
 8003628:	f7fe fdb8 	bl	800219c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	429a      	cmp	r2, r3
 8003636:	d21d      	bcs.n	8003674 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003646:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e00f      	b.n	8003694 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	429a      	cmp	r2, r3
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	429a      	cmp	r2, r3
 8003690:	d0c3      	beq.n	800361a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff ff7e 	bl	80035f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b21      	cmp	r3, #33	; 0x21
 8003712:	d144      	bne.n	800379e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371c:	d11a      	bne.n	8003754 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003732:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	1c9a      	adds	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	621a      	str	r2, [r3, #32]
 8003746:	e00e      	b.n	8003766 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]
 8003752:	e008      	b.n	8003766 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	1c59      	adds	r1, r3, #1
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6211      	str	r1, [r2, #32]
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29b      	uxth	r3, r3
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4619      	mov	r1, r3
 8003774:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003788:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003798:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff fefd 	bl	80035cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b22      	cmp	r3, #34	; 0x22
 80037ee:	d171      	bne.n	80038d4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f8:	d123      	bne.n	8003842 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10e      	bne.n	8003826 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
 8003824:	e029      	b.n	800387a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	b29b      	uxth	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
 8003840:	e01b      	b.n	800387a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6858      	ldr	r0, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	1c59      	adds	r1, r3, #1
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6291      	str	r1, [r2, #40]	; 0x28
 800385a:	b2c2      	uxtb	r2, r0
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e00c      	b.n	800387a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	1c58      	adds	r0, r3, #1
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	6288      	str	r0, [r1, #40]	; 0x28
 8003872:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29b      	uxth	r3, r3
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4619      	mov	r1, r3
 8003888:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800388a:	2b00      	cmp	r3, #0
 800388c:	d120      	bne.n	80038d0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0220 	bic.w	r2, r2, #32
 800389c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fe8a 	bl	80035e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e002      	b.n	80038d6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003922:	f023 030c 	bic.w	r3, r3, #12
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	68f9      	ldr	r1, [r7, #12]
 800392c:	430b      	orrs	r3, r1
 800392e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394e:	f040 818b 	bne.w	8003c68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4ac1      	ldr	r2, [pc, #772]	; (8003c5c <UART_SetConfig+0x37c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d005      	beq.n	8003968 <UART_SetConfig+0x88>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4abf      	ldr	r2, [pc, #764]	; (8003c60 <UART_SetConfig+0x380>)
 8003962:	4293      	cmp	r3, r2
 8003964:	f040 80bd 	bne.w	8003ae2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003968:	f7ff fb90 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 800396c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	461d      	mov	r5, r3
 8003972:	f04f 0600 	mov.w	r6, #0
 8003976:	46a8      	mov	r8, r5
 8003978:	46b1      	mov	r9, r6
 800397a:	eb18 0308 	adds.w	r3, r8, r8
 800397e:	eb49 0409 	adc.w	r4, r9, r9
 8003982:	4698      	mov	r8, r3
 8003984:	46a1      	mov	r9, r4
 8003986:	eb18 0805 	adds.w	r8, r8, r5
 800398a:	eb49 0906 	adc.w	r9, r9, r6
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800399a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800399e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039a2:	4688      	mov	r8, r1
 80039a4:	4691      	mov	r9, r2
 80039a6:	eb18 0005 	adds.w	r0, r8, r5
 80039aa:	eb49 0106 	adc.w	r1, r9, r6
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	461d      	mov	r5, r3
 80039b4:	f04f 0600 	mov.w	r6, #0
 80039b8:	196b      	adds	r3, r5, r5
 80039ba:	eb46 0406 	adc.w	r4, r6, r6
 80039be:	461a      	mov	r2, r3
 80039c0:	4623      	mov	r3, r4
 80039c2:	f7fd f941 	bl	8000c48 <__aeabi_uldivmod>
 80039c6:	4603      	mov	r3, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	461a      	mov	r2, r3
 80039cc:	4ba5      	ldr	r3, [pc, #660]	; (8003c64 <UART_SetConfig+0x384>)
 80039ce:	fba3 2302 	umull	r2, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	461d      	mov	r5, r3
 80039dc:	f04f 0600 	mov.w	r6, #0
 80039e0:	46a9      	mov	r9, r5
 80039e2:	46b2      	mov	sl, r6
 80039e4:	eb19 0309 	adds.w	r3, r9, r9
 80039e8:	eb4a 040a 	adc.w	r4, sl, sl
 80039ec:	4699      	mov	r9, r3
 80039ee:	46a2      	mov	sl, r4
 80039f0:	eb19 0905 	adds.w	r9, r9, r5
 80039f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80039f8:	f04f 0100 	mov.w	r1, #0
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a0c:	4689      	mov	r9, r1
 8003a0e:	4692      	mov	sl, r2
 8003a10:	eb19 0005 	adds.w	r0, r9, r5
 8003a14:	eb4a 0106 	adc.w	r1, sl, r6
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	461d      	mov	r5, r3
 8003a1e:	f04f 0600 	mov.w	r6, #0
 8003a22:	196b      	adds	r3, r5, r5
 8003a24:	eb46 0406 	adc.w	r4, r6, r6
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	f7fd f90c 	bl	8000c48 <__aeabi_uldivmod>
 8003a30:	4603      	mov	r3, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	461a      	mov	r2, r3
 8003a36:	4b8b      	ldr	r3, [pc, #556]	; (8003c64 <UART_SetConfig+0x384>)
 8003a38:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	2164      	movs	r1, #100	; 0x64
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	3332      	adds	r3, #50	; 0x32
 8003a4a:	4a86      	ldr	r2, [pc, #536]	; (8003c64 <UART_SetConfig+0x384>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a58:	4498      	add	r8, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	f04f 0600 	mov.w	r6, #0
 8003a62:	46a9      	mov	r9, r5
 8003a64:	46b2      	mov	sl, r6
 8003a66:	eb19 0309 	adds.w	r3, r9, r9
 8003a6a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a6e:	4699      	mov	r9, r3
 8003a70:	46a2      	mov	sl, r4
 8003a72:	eb19 0905 	adds.w	r9, r9, r5
 8003a76:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a8e:	4689      	mov	r9, r1
 8003a90:	4692      	mov	sl, r2
 8003a92:	eb19 0005 	adds.w	r0, r9, r5
 8003a96:	eb4a 0106 	adc.w	r1, sl, r6
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	461d      	mov	r5, r3
 8003aa0:	f04f 0600 	mov.w	r6, #0
 8003aa4:	196b      	adds	r3, r5, r5
 8003aa6:	eb46 0406 	adc.w	r4, r6, r6
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4623      	mov	r3, r4
 8003aae:	f7fd f8cb 	bl	8000c48 <__aeabi_uldivmod>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <UART_SetConfig+0x384>)
 8003aba:	fba3 1302 	umull	r1, r3, r3, r2
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2164      	movs	r1, #100	; 0x64
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	3332      	adds	r3, #50	; 0x32
 8003acc:	4a65      	ldr	r2, [pc, #404]	; (8003c64 <UART_SetConfig+0x384>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	f003 0207 	and.w	r2, r3, #7
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4442      	add	r2, r8
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	e26f      	b.n	8003fc2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ae2:	f7ff fabf 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8003ae6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	461d      	mov	r5, r3
 8003aec:	f04f 0600 	mov.w	r6, #0
 8003af0:	46a8      	mov	r8, r5
 8003af2:	46b1      	mov	r9, r6
 8003af4:	eb18 0308 	adds.w	r3, r8, r8
 8003af8:	eb49 0409 	adc.w	r4, r9, r9
 8003afc:	4698      	mov	r8, r3
 8003afe:	46a1      	mov	r9, r4
 8003b00:	eb18 0805 	adds.w	r8, r8, r5
 8003b04:	eb49 0906 	adc.w	r9, r9, r6
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b1c:	4688      	mov	r8, r1
 8003b1e:	4691      	mov	r9, r2
 8003b20:	eb18 0005 	adds.w	r0, r8, r5
 8003b24:	eb49 0106 	adc.w	r1, r9, r6
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	f04f 0600 	mov.w	r6, #0
 8003b32:	196b      	adds	r3, r5, r5
 8003b34:	eb46 0406 	adc.w	r4, r6, r6
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	f7fd f884 	bl	8000c48 <__aeabi_uldivmod>
 8003b40:	4603      	mov	r3, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <UART_SetConfig+0x384>)
 8003b48:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	461d      	mov	r5, r3
 8003b56:	f04f 0600 	mov.w	r6, #0
 8003b5a:	46a9      	mov	r9, r5
 8003b5c:	46b2      	mov	sl, r6
 8003b5e:	eb19 0309 	adds.w	r3, r9, r9
 8003b62:	eb4a 040a 	adc.w	r4, sl, sl
 8003b66:	4699      	mov	r9, r3
 8003b68:	46a2      	mov	sl, r4
 8003b6a:	eb19 0905 	adds.w	r9, r9, r5
 8003b6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b86:	4689      	mov	r9, r1
 8003b88:	4692      	mov	sl, r2
 8003b8a:	eb19 0005 	adds.w	r0, r9, r5
 8003b8e:	eb4a 0106 	adc.w	r1, sl, r6
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	461d      	mov	r5, r3
 8003b98:	f04f 0600 	mov.w	r6, #0
 8003b9c:	196b      	adds	r3, r5, r5
 8003b9e:	eb46 0406 	adc.w	r4, r6, r6
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4623      	mov	r3, r4
 8003ba6:	f7fd f84f 	bl	8000c48 <__aeabi_uldivmod>
 8003baa:	4603      	mov	r3, r0
 8003bac:	460c      	mov	r4, r1
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <UART_SetConfig+0x384>)
 8003bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2164      	movs	r1, #100	; 0x64
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	3332      	adds	r3, #50	; 0x32
 8003bc4:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <UART_SetConfig+0x384>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bd2:	4498      	add	r8, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	f04f 0600 	mov.w	r6, #0
 8003bdc:	46a9      	mov	r9, r5
 8003bde:	46b2      	mov	sl, r6
 8003be0:	eb19 0309 	adds.w	r3, r9, r9
 8003be4:	eb4a 040a 	adc.w	r4, sl, sl
 8003be8:	4699      	mov	r9, r3
 8003bea:	46a2      	mov	sl, r4
 8003bec:	eb19 0905 	adds.w	r9, r9, r5
 8003bf0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c08:	4689      	mov	r9, r1
 8003c0a:	4692      	mov	sl, r2
 8003c0c:	eb19 0005 	adds.w	r0, r9, r5
 8003c10:	eb4a 0106 	adc.w	r1, sl, r6
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	461d      	mov	r5, r3
 8003c1a:	f04f 0600 	mov.w	r6, #0
 8003c1e:	196b      	adds	r3, r5, r5
 8003c20:	eb46 0406 	adc.w	r4, r6, r6
 8003c24:	461a      	mov	r2, r3
 8003c26:	4623      	mov	r3, r4
 8003c28:	f7fd f80e 	bl	8000c48 <__aeabi_uldivmod>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <UART_SetConfig+0x384>)
 8003c34:	fba3 1302 	umull	r1, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	2164      	movs	r1, #100	; 0x64
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	3332      	adds	r3, #50	; 0x32
 8003c46:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <UART_SetConfig+0x384>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	f003 0207 	and.w	r2, r3, #7
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4442      	add	r2, r8
 8003c58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c5a:	e1b2      	b.n	8003fc2 <UART_SetConfig+0x6e2>
 8003c5c:	40011000 	.word	0x40011000
 8003c60:	40011400 	.word	0x40011400
 8003c64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4ad7      	ldr	r2, [pc, #860]	; (8003fcc <UART_SetConfig+0x6ec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d005      	beq.n	8003c7e <UART_SetConfig+0x39e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4ad6      	ldr	r2, [pc, #856]	; (8003fd0 <UART_SetConfig+0x6f0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	f040 80d1 	bne.w	8003e20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c7e:	f7ff fa05 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 8003c82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	469a      	mov	sl, r3
 8003c88:	f04f 0b00 	mov.w	fp, #0
 8003c8c:	46d0      	mov	r8, sl
 8003c8e:	46d9      	mov	r9, fp
 8003c90:	eb18 0308 	adds.w	r3, r8, r8
 8003c94:	eb49 0409 	adc.w	r4, r9, r9
 8003c98:	4698      	mov	r8, r3
 8003c9a:	46a1      	mov	r9, r4
 8003c9c:	eb18 080a 	adds.w	r8, r8, sl
 8003ca0:	eb49 090b 	adc.w	r9, r9, fp
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cb8:	4688      	mov	r8, r1
 8003cba:	4691      	mov	r9, r2
 8003cbc:	eb1a 0508 	adds.w	r5, sl, r8
 8003cc0:	eb4b 0609 	adc.w	r6, fp, r9
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	f04f 0400 	mov.w	r4, #0
 8003cd6:	0094      	lsls	r4, r2, #2
 8003cd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cdc:	008b      	lsls	r3, r1, #2
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	f7fc ffaf 	bl	8000c48 <__aeabi_uldivmod>
 8003cea:	4603      	mov	r3, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4bb8      	ldr	r3, [pc, #736]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	469b      	mov	fp, r3
 8003d00:	f04f 0c00 	mov.w	ip, #0
 8003d04:	46d9      	mov	r9, fp
 8003d06:	46e2      	mov	sl, ip
 8003d08:	eb19 0309 	adds.w	r3, r9, r9
 8003d0c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d10:	4699      	mov	r9, r3
 8003d12:	46a2      	mov	sl, r4
 8003d14:	eb19 090b 	adds.w	r9, r9, fp
 8003d18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d30:	4689      	mov	r9, r1
 8003d32:	4692      	mov	sl, r2
 8003d34:	eb1b 0509 	adds.w	r5, fp, r9
 8003d38:	eb4c 060a 	adc.w	r6, ip, sl
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4619      	mov	r1, r3
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	0094      	lsls	r4, r2, #2
 8003d50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d54:	008b      	lsls	r3, r1, #2
 8003d56:	461a      	mov	r2, r3
 8003d58:	4623      	mov	r3, r4
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	f7fc ff73 	bl	8000c48 <__aeabi_uldivmod>
 8003d62:	4603      	mov	r3, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b9a      	ldr	r3, [pc, #616]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	2164      	movs	r1, #100	; 0x64
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	3332      	adds	r3, #50	; 0x32
 8003d7c:	4a95      	ldr	r2, [pc, #596]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d88:	4498      	add	r8, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	469b      	mov	fp, r3
 8003d8e:	f04f 0c00 	mov.w	ip, #0
 8003d92:	46d9      	mov	r9, fp
 8003d94:	46e2      	mov	sl, ip
 8003d96:	eb19 0309 	adds.w	r3, r9, r9
 8003d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d9e:	4699      	mov	r9, r3
 8003da0:	46a2      	mov	sl, r4
 8003da2:	eb19 090b 	adds.w	r9, r9, fp
 8003da6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dbe:	4689      	mov	r9, r1
 8003dc0:	4692      	mov	sl, r2
 8003dc2:	eb1b 0509 	adds.w	r5, fp, r9
 8003dc6:	eb4c 060a 	adc.w	r6, ip, sl
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	f04f 0400 	mov.w	r4, #0
 8003ddc:	0094      	lsls	r4, r2, #2
 8003dde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003de2:	008b      	lsls	r3, r1, #2
 8003de4:	461a      	mov	r2, r3
 8003de6:	4623      	mov	r3, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	4631      	mov	r1, r6
 8003dec:	f7fc ff2c 	bl	8000c48 <__aeabi_uldivmod>
 8003df0:	4603      	mov	r3, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	461a      	mov	r2, r3
 8003df6:	4b77      	ldr	r3, [pc, #476]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003df8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	2164      	movs	r1, #100	; 0x64
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	3332      	adds	r3, #50	; 0x32
 8003e0a:	4a72      	ldr	r2, [pc, #456]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4442      	add	r2, r8
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	e0d0      	b.n	8003fc2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e20:	f7ff f920 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8003e24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	469a      	mov	sl, r3
 8003e2a:	f04f 0b00 	mov.w	fp, #0
 8003e2e:	46d0      	mov	r8, sl
 8003e30:	46d9      	mov	r9, fp
 8003e32:	eb18 0308 	adds.w	r3, r8, r8
 8003e36:	eb49 0409 	adc.w	r4, r9, r9
 8003e3a:	4698      	mov	r8, r3
 8003e3c:	46a1      	mov	r9, r4
 8003e3e:	eb18 080a 	adds.w	r8, r8, sl
 8003e42:	eb49 090b 	adc.w	r9, r9, fp
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e5a:	4688      	mov	r8, r1
 8003e5c:	4691      	mov	r9, r2
 8003e5e:	eb1a 0508 	adds.w	r5, sl, r8
 8003e62:	eb4b 0609 	adc.w	r6, fp, r9
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	f04f 0400 	mov.w	r4, #0
 8003e78:	0094      	lsls	r4, r2, #2
 8003e7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e7e:	008b      	lsls	r3, r1, #2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	4628      	mov	r0, r5
 8003e86:	4631      	mov	r1, r6
 8003e88:	f7fc fede 	bl	8000c48 <__aeabi_uldivmod>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	461a      	mov	r2, r3
 8003e92:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003e94:	fba3 2302 	umull	r2, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	469b      	mov	fp, r3
 8003ea2:	f04f 0c00 	mov.w	ip, #0
 8003ea6:	46d9      	mov	r9, fp
 8003ea8:	46e2      	mov	sl, ip
 8003eaa:	eb19 0309 	adds.w	r3, r9, r9
 8003eae:	eb4a 040a 	adc.w	r4, sl, sl
 8003eb2:	4699      	mov	r9, r3
 8003eb4:	46a2      	mov	sl, r4
 8003eb6:	eb19 090b 	adds.w	r9, r9, fp
 8003eba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ece:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ed2:	4689      	mov	r9, r1
 8003ed4:	4692      	mov	sl, r2
 8003ed6:	eb1b 0509 	adds.w	r5, fp, r9
 8003eda:	eb4c 060a 	adc.w	r6, ip, sl
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	f04f 0400 	mov.w	r4, #0
 8003ef0:	0094      	lsls	r4, r2, #2
 8003ef2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef6:	008b      	lsls	r3, r1, #2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	4628      	mov	r0, r5
 8003efe:	4631      	mov	r1, r6
 8003f00:	f7fc fea2 	bl	8000c48 <__aeabi_uldivmod>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	2164      	movs	r1, #100	; 0x64
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	3332      	adds	r3, #50	; 0x32
 8003f1e:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2a:	4498      	add	r8, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	469b      	mov	fp, r3
 8003f30:	f04f 0c00 	mov.w	ip, #0
 8003f34:	46d9      	mov	r9, fp
 8003f36:	46e2      	mov	sl, ip
 8003f38:	eb19 0309 	adds.w	r3, r9, r9
 8003f3c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f40:	4699      	mov	r9, r3
 8003f42:	46a2      	mov	sl, r4
 8003f44:	eb19 090b 	adds.w	r9, r9, fp
 8003f48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f4c:	f04f 0100 	mov.w	r1, #0
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f60:	4689      	mov	r9, r1
 8003f62:	4692      	mov	sl, r2
 8003f64:	eb1b 0509 	adds.w	r5, fp, r9
 8003f68:	eb4c 060a 	adc.w	r6, ip, sl
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4619      	mov	r1, r3
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	f04f 0400 	mov.w	r4, #0
 8003f7e:	0094      	lsls	r4, r2, #2
 8003f80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f84:	008b      	lsls	r3, r1, #2
 8003f86:	461a      	mov	r2, r3
 8003f88:	4623      	mov	r3, r4
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	4631      	mov	r1, r6
 8003f8e:	f7fc fe5b 	bl	8000c48 <__aeabi_uldivmod>
 8003f92:	4603      	mov	r3, r0
 8003f94:	460c      	mov	r4, r1
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003f9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	2164      	movs	r1, #100	; 0x64
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	3332      	adds	r3, #50	; 0x32
 8003fac:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <UART_SetConfig+0x6f4>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	f003 020f 	and.w	r2, r3, #15
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4442      	add	r2, r8
 8003fbe:	609a      	str	r2, [r3, #8]
}
 8003fc0:	e7ff      	b.n	8003fc2 <UART_SetConfig+0x6e2>
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	40011400 	.word	0x40011400
 8003fd4:	51eb851f 	.word	0x51eb851f

08003fd8 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8003fe8:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003fea:	461a      	mov	r2, r3
        err.type, err.code);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003ff2:	6839      	ldr	r1, [r7, #0]
 8003ff4:	4806      	ldr	r0, [pc, #24]	; (8004010 <ai_log_err+0x38>)
 8003ff6:	f001 ff4b 	bl	8005e90 <iprintf>
 8003ffa:	e008      	b.n	800400e <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003ffc:	793b      	ldrb	r3, [r7, #4]
 8003ffe:	4619      	mov	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004006:	461a      	mov	r2, r3
 8004008:	4802      	ldr	r0, [pc, #8]	; (8004014 <ai_log_err+0x3c>)
 800400a:	f001 ff41 	bl	8005e90 <iprintf>

  do {} while (1);
 800400e:	e7fe      	b.n	800400e <ai_log_err+0x36>
 8004010:	08007584 	.word	0x08007584
 8004014:	080075b8 	.word	0x080075b8

08004018 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b090      	sub	sp, #64	; 0x40
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8004022:	2100      	movs	r1, #0
 8004024:	4837      	ldr	r0, [pc, #220]	; (8004104 <ai_boostrap+0xec>)
 8004026:	f000 f9d1 	bl	80043cc <ai_network_create>
 800402a:	4603      	mov	r3, r0
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 800402e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 8004036:	4934      	ldr	r1, [pc, #208]	; (8004108 <ai_boostrap+0xf0>)
 8004038:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800403a:	f7ff ffcd 	bl	8003fd8 <ai_log_err>
    return -1;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
 8004042:	e05b      	b.n	80040fc <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8004044:	4b31      	ldr	r3, [pc, #196]	; (800410c <ai_boostrap+0xf4>)
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	2301      	movs	r3, #1
 800404a:	823b      	strh	r3, [r7, #16]
 800404c:	2301      	movs	r3, #1
 800404e:	827b      	strh	r3, [r7, #18]
 8004050:	2301      	movs	r3, #1
 8004052:	82bb      	strh	r3, [r7, #20]
 8004054:	4b2e      	ldr	r3, [pc, #184]	; (8004110 <ai_boostrap+0xf8>)
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	2300      	movs	r3, #0
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <ai_boostrap+0xfc>)
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
 8004064:	2301      	movs	r3, #1
 8004066:	853b      	strh	r3, [r7, #40]	; 0x28
 8004068:	2301      	movs	r3, #1
 800406a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800406c:	2301      	movs	r3, #1
 800406e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004074:	633b      	str	r3, [r7, #48]	; 0x30
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
 800407a:	2300      	movs	r3, #0
 800407c:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 800407e:	4b21      	ldr	r3, [pc, #132]	; (8004104 <ai_boostrap+0xec>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f107 020c 	add.w	r2, r7, #12
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f9c1 	bl	8004410 <ai_network_init>
 800408e:	4603      	mov	r3, r0
 8004090:	f083 0301 	eor.w	r3, r3, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <ai_boostrap+0xec>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f988 	bl	80043b4 <ai_network_get_error>
 80040a4:	4603      	mov	r3, r0
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 80040a8:	491b      	ldr	r1, [pc, #108]	; (8004118 <ai_boostrap+0x100>)
 80040aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040ac:	f7ff ff94 	bl	8003fd8 <ai_log_err>
      return -1;
 80040b0:	f04f 33ff 	mov.w	r3, #4294967295
 80040b4:	e022      	b.n	80040fc <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 80040b6:	4b13      	ldr	r3, [pc, #76]	; (8004104 <ai_boostrap+0xec>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4918      	ldr	r1, [pc, #96]	; (800411c <ai_boostrap+0x104>)
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f91b 	bl	80042f8 <ai_network_get_info>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f083 0301 	eor.w	r3, r3, #1
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d015      	beq.n	80040fa <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <ai_boostrap+0xec>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f96e 	bl	80043b4 <ai_network_get_error>
 80040d8:	4603      	mov	r3, r0
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 80040dc:	4910      	ldr	r1, [pc, #64]	; (8004120 <ai_boostrap+0x108>)
 80040de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040e0:	f7ff ff7a 	bl	8003fd8 <ai_log_err>
    ai_network_destroy(network);
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <ai_boostrap+0xec>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f985 	bl	80043f8 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 80040ee:	4b05      	ldr	r3, [pc, #20]	; (8004104 <ai_boostrap+0xec>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
    return -3;
 80040f4:	f06f 0302 	mvn.w	r3, #2
 80040f8:	e000      	b.n	80040fc <ai_boostrap+0xe4>
  }

  return 0;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3740      	adds	r7, #64	; 0x40
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000f64 	.word	0x20000f64
 8004108:	080075e8 	.word	0x080075e8
 800410c:	40040440 	.word	0x40040440
 8004110:	0005b400 	.word	0x0005b400
 8004114:	00040440 	.word	0x00040440
 8004118:	080075fc 	.word	0x080075fc
 800411c:	20000f68 	.word	0x20000f68
 8004120:	0800760c 	.word	0x0800760c

08004124 <ai_run_v2>:

  return 0;
}

/* USER CODE BEGIN 2 */
int ai_run_v2(void *in_data, void *out_data){
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
	ai_i32 nbatch;
	ai_error err;

	/* Parameters checking */
	if (!in_data || !out_data || !network)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d006      	beq.n	8004142 <ai_run_v2+0x1e>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <ai_run_v2+0x1e>
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <ai_run_v2+0x74>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <ai_run_v2+0x24>
		return -1;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
 8004146:	e022      	b.n	800418e <ai_run_v2+0x6a>

	ai_buffer *ai_input = network_info.inputs;
 8004148:	4b14      	ldr	r3, [pc, #80]	; (800419c <ai_run_v2+0x78>)
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	617b      	str	r3, [r7, #20]
	ai_buffer *ai_output = network_info.outputs;
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <ai_run_v2+0x78>)
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	613b      	str	r3, [r7, #16]

	/* Initialize input/output buffer handlers */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	611a      	str	r2, [r3, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	611a      	str	r2, [r3, #16]

	/* 2 - Perform the inference */
	nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8004160:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <ai_run_v2+0x74>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	6979      	ldr	r1, [r7, #20]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f990 	bl	800448e <ai_network_run>
 800416e:	60f8      	str	r0, [r7, #12]
	if (nbatch != 1) {
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d00a      	beq.n	800418c <ai_run_v2+0x68>
		err = ai_network_get_error(network);
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <ai_run_v2+0x74>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f91a 	bl	80043b4 <ai_network_get_error>
 8004180:	4603      	mov	r3, r0
 8004182:	60bb      	str	r3, [r7, #8]
		// ...
		return err.code;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800418a:	e000      	b.n	800418e <ai_run_v2+0x6a>
	}


  return 0;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000f64 	.word	0x20000f64
 800419c:	20000f68 	.word	0x20000f68

080041a0 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80041a4:	4805      	ldr	r0, [pc, #20]	; (80041bc <MX_X_CUBE_AI_Init+0x1c>)
 80041a6:	f001 fee7 	bl	8005f78 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 80041aa:	f000 f981 	bl	80044b0 <ai_network_data_weights_get>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <MX_X_CUBE_AI_Init+0x20>)
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ff30 	bl	8004018 <ai_boostrap>
    /* USER CODE END 5 */
}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	08007634 	.word	0x08007634
 80041c0:	20000fdc 	.word	0x20000fdc

080041c4 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	3303      	adds	r3, #3
 80041d4:	f023 0303 	bic.w	r3, r3, #3
 80041d8:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <network_configure_activations+0x68>)
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <network_configure_activations+0x68>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
    input_layer_output_array.data = AI_PTR(activations + 0);
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <network_configure_activations+0x6c>)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6093      	str	r3, [r2, #8]
    input_layer_output_array.data_start = AI_PTR(activations + 0);
 80041ec:	4a10      	ldr	r2, [pc, #64]	; (8004230 <network_configure_activations+0x6c>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	60d3      	str	r3, [r2, #12]
    input_layer_nl_output_array.data = AI_PTR(activations + 0);
 80041f2:	4a10      	ldr	r2, [pc, #64]	; (8004234 <network_configure_activations+0x70>)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6093      	str	r3, [r2, #8]
    input_layer_nl_output_array.data_start = AI_PTR(activations + 0);
 80041f8:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <network_configure_activations+0x70>)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	60d3      	str	r3, [r2, #12]
    hidden1_output_array.data = AI_PTR(activations + 512);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004204:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <network_configure_activations+0x74>)
 8004206:	6093      	str	r3, [r2, #8]
    hidden1_output_array.data_start = AI_PTR(activations + 512);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <network_configure_activations+0x74>)
 8004210:	60d3      	str	r3, [r2, #12]
    hidden1_nl_output_array.data = AI_PTR(NULL);
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <network_configure_activations+0x78>)
 8004214:	2200      	movs	r2, #0
 8004216:	609a      	str	r2, [r3, #8]
    hidden1_nl_output_array.data_start = AI_PTR(NULL);
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <network_configure_activations+0x78>)
 800421a:	2200      	movs	r2, #0
 800421c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800421e:	2301      	movs	r3, #1
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	20000a84 	.word	0x20000a84
 8004230:	20000a94 	.word	0x20000a94
 8004234:	20000aa4 	.word	0x20000aa4
 8004238:	20000ab4 	.word	0x20000ab4
 800423c:	20000ac4 	.word	0x20000ac4

08004240 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    input_layer_weights_array.format |= AI_FMT_FLAG_CONST;
 8004250:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <network_configure_weights+0xa8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004258:	4a23      	ldr	r2, [pc, #140]	; (80042e8 <network_configure_weights+0xa8>)
 800425a:	6013      	str	r3, [r2, #0]
    input_layer_weights_array.data = AI_PTR(weights + 0);
 800425c:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <network_configure_weights+0xa8>)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6093      	str	r3, [r2, #8]
    input_layer_weights_array.data_start = AI_PTR(weights + 0);
 8004262:	4a21      	ldr	r2, [pc, #132]	; (80042e8 <network_configure_weights+0xa8>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	60d3      	str	r3, [r2, #12]
    input_layer_bias_array.format |= AI_FMT_FLAG_CONST;
 8004268:	4b20      	ldr	r3, [pc, #128]	; (80042ec <network_configure_weights+0xac>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004270:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <network_configure_weights+0xac>)
 8004272:	6013      	str	r3, [r2, #0]
    input_layer_bias_array.data = AI_PTR(weights + 307200);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 800427a:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <network_configure_weights+0xac>)
 800427c:	6093      	str	r3, [r2, #8]
    input_layer_bias_array.data_start = AI_PTR(weights + 307200);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <network_configure_weights+0xac>)
 8004286:	60d3      	str	r3, [r2, #12]
    hidden1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <network_configure_weights+0xb0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004290:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <network_configure_weights+0xb0>)
 8004292:	6013      	str	r3, [r2, #0]
    hidden1_weights_array.data = AI_PTR(weights + 307712);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 800429a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800429e:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <network_configure_weights+0xb0>)
 80042a0:	6093      	str	r3, [r2, #8]
    hidden1_weights_array.data_start = AI_PTR(weights + 307712);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80042a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80042ac:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <network_configure_weights+0xb0>)
 80042ae:	60d3      	str	r3, [r2, #12]
    hidden1_bias_array.format |= AI_FMT_FLAG_CONST;
 80042b0:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <network_configure_weights+0xb4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042b8:	4a0e      	ldr	r2, [pc, #56]	; (80042f4 <network_configure_weights+0xb4>)
 80042ba:	6013      	str	r3, [r2, #0]
    hidden1_bias_array.data = AI_PTR(weights + 373248);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 80042c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80042c6:	4a0b      	ldr	r2, [pc, #44]	; (80042f4 <network_configure_weights+0xb4>)
 80042c8:	6093      	str	r3, [r2, #8]
    hidden1_bias_array.data_start = AI_PTR(weights + 373248);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 80042d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80042d4:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <network_configure_weights+0xb4>)
 80042d6:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80042d8:	2301      	movs	r3, #1
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000ad4 	.word	0x20000ad4
 80042ec:	20000ae4 	.word	0x20000ae4
 80042f0:	20000af4 	.word	0x20000af4
 80042f4:	20000b04 	.word	0x20000b04

080042f8 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b0a0      	sub	sp, #128	; 0x80
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9f8 	bl	80046f8 <ai_platform_context_acquire>
 8004308:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d041      	beq.n	8004394 <ai_network_get_info+0x9c>
 8004310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d03e      	beq.n	8004394 <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 8004316:	f107 0308 	add.w	r3, r7, #8
 800431a:	2274      	movs	r2, #116	; 0x74
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f001 fcf7 	bl	8005d12 <memset>
 8004324:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <ai_network_get_info+0xa8>)
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <ai_network_get_info+0xac>)
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <ai_network_get_info+0xb0>)
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <ai_network_get_info+0xb4>)
 8004332:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004334:	f000 f934 	bl	80045a0 <ai_platform_runtime_get_revision>
 8004338:	4603      	mov	r3, r0
    ai_network_report r = {
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	f000 f952 	bl	80045e4 <ai_platform_runtime_get_version>
 8004340:	4603      	mov	r3, r0
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <ai_network_get_info+0xb8>)
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	2306      	movs	r3, #6
 800434a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800434e:	f000 f96b 	bl	8004628 <ai_platform_api_get_version>
 8004352:	4603      	mov	r3, r0
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004356:	f000 f99b 	bl	8004690 <ai_platform_interface_api_get_version>
 800435a:	4603      	mov	r3, r0
 800435c:	633b      	str	r3, [r7, #48]	; 0x30
 800435e:	f44f 33b7 	mov.w	r3, #93696	; 0x16e00
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa20 	bl	80047b0 <ai_platform_api_get_network_report>
 8004370:	4603      	mov	r3, r0
 8004372:	f083 0301 	eor.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <ai_network_get_info+0x88>
 800437c:	2300      	movs	r3, #0
 800437e:	e00a      	b.n	8004396 <ai_network_get_info+0x9e>

    *report = r;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f107 0308 	add.w	r3, r7, #8
 8004388:	2274      	movs	r2, #116	; 0x74
 800438a:	4619      	mov	r1, r3
 800438c:	f001 fcb6 	bl	8005cfc <memcpy>
    return true;
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <ai_network_get_info+0x9e>
  }

  return false;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3780      	adds	r7, #128	; 0x80
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	080076f0 	.word	0x080076f0
 80043a4:	080076f8 	.word	0x080076f8
 80043a8:	0800771c 	.word	0x0800771c
 80043ac:	08007738 	.word	0x08007738
 80043b0:	08007750 	.word	0x08007750

080043b4 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f9c5 	bl	800474c <ai_platform_network_get_error>
 80043c2:	4603      	mov	r3, r0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80043d6:	2300      	movs	r3, #0
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	2304      	movs	r3, #4
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2301      	movs	r3, #1
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <ai_network_create+0x28>)
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fad9 	bl	800499c <ai_platform_network_create>
 80043ea:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000a20 	.word	0x20000a20

080043f8 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fb3d 	bl	8004a80 <ai_platform_network_destroy>
 8004406:	4603      	mov	r3, r0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fb61 	bl	8004ae4 <ai_platform_network_init>
 8004422:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <ai_network_init+0x1e>
 800442a:	2300      	movs	r3, #0
 800442c:	e02b      	b.n	8004486 <ai_network_init+0x76>

  ai_bool ok = true;
 800442e:	2301      	movs	r3, #1
 8004430:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	4619      	mov	r1, r3
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff ff02 	bl	8004240 <network_configure_weights>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	7afb      	ldrb	r3, [r7, #11]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	3318      	adds	r3, #24
 8004452:	4619      	mov	r1, r3
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff feb5 	bl	80041c4 <network_configure_activations>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	7afb      	ldrb	r3, [r7, #11]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fbab 	bl	8004bc8 <ai_platform_network_post_init>
 8004472:	4603      	mov	r3, r0
 8004474:	461a      	mov	r2, r3
 8004476:	7afb      	ldrb	r3, [r7, #11]
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004484:	7afb      	ldrb	r3, [r7, #11]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fbde 	bl	8004c60 <ai_platform_network_process>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
    0xf4, 0xba, 0x3a, 0x4f, 0xc7, 0xbb, 0x58, 0x8e, 0xf5, 0xbb,
    0xbf, 0x12, 0x1f, 0xbb, 0x97, 0x05, 0x93, 0x3a, 0x01, 0xa3,
    0x49, 0xbc, 0x5e, 0x1b, 0x96, 0xbb, 0xcf, 0x6e, 0xfe, 0xbb,
    0x71, 0x3e, 0xe9, 0x3b, 0x35, 0x2e, 0xab, 0x39, 0x85, 0xff,
    0xdc, 0xbb, 0xc8, 0xc8, 0x7c, 0xbc, 0x1a, 0xbe, 0xf6, 0xbb  };
  return AI_HANDLE_PTR(s_network_weights);
 80044b4:	4b02      	ldr	r3, [pc, #8]	; (80044c0 <ai_network_data_weights_get+0x10>)
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	080077a0 	.word	0x080077a0

080044c4 <_ai_platform_get_io_buffers_info>:
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	2400      	movs	r4, #0
 80044ca:	b083      	sub	sp, #12
 80044cc:	4606      	mov	r6, r0
 80044ce:	4688      	mov	r8, r1
 80044d0:	46a3      	mov	fp, r4
 80044d2:	f04f 0a18 	mov.w	sl, #24
 80044d6:	f04f 0901 	mov.w	r9, #1
 80044da:	b2a0      	uxth	r0, r4
 80044dc:	b936      	cbnz	r6, 80044ec <_ai_platform_get_io_buffers_info+0x28>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d03b      	beq.n	800455a <_ai_platform_get_io_buffers_info+0x96>
 80044e2:	68b3      	ldr	r3, [r6, #8]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f8c8 3000 	str.w	r3, [r8]
 80044ea:	e036      	b.n	800455a <_ai_platform_get_io_buffers_info+0x96>
 80044ec:	8833      	ldrh	r3, [r6, #0]
 80044ee:	429c      	cmp	r4, r3
 80044f0:	d2f5      	bcs.n	80044de <_ai_platform_get_io_buffers_info+0x1a>
 80044f2:	6873      	ldr	r3, [r6, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f2      	beq.n	80044de <_ai_platform_get_io_buffers_info+0x1a>
 80044f8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	d0ee      	beq.n	80044de <_ai_platform_get_io_buffers_info+0x1a>
 8004500:	68b3      	ldr	r3, [r6, #8]
 8004502:	69aa      	ldr	r2, [r5, #24]
 8004504:	6859      	ldr	r1, [r3, #4]
 8004506:	6810      	ldr	r0, [r2, #0]
 8004508:	689f      	ldr	r7, [r3, #8]
 800450a:	9101      	str	r1, [sp, #4]
 800450c:	f001 fb46 	bl	8005b9c <ai_array_to_buffer_fmt>
 8004510:	9901      	ldr	r1, [sp, #4]
 8004512:	fb0a f304 	mul.w	r3, sl, r4
 8004516:	18ca      	adds	r2, r1, r3
 8004518:	50c8      	str	r0, [r1, r3]
 800451a:	f8a2 9004 	strh.w	r9, [r2, #4]
 800451e:	68eb      	ldr	r3, [r5, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	80d3      	strh	r3, [r2, #6]
 8004524:	68eb      	ldr	r3, [r5, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	8113      	strh	r3, [r2, #8]
 800452a:	68eb      	ldr	r3, [r5, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60d3      	str	r3, [r2, #12]
 8004530:	69ab      	ldr	r3, [r5, #24]
 8004532:	00e1      	lsls	r1, r4, #3
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	6113      	str	r3, [r2, #16]
 8004538:	1878      	adds	r0, r7, r1
 800453a:	b150      	cbz	r0, 8004552 <_ai_platform_get_io_buffers_info+0x8e>
 800453c:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	6043      	str	r3, [r0, #4]
 8004544:	b11b      	cbz	r3, 800454e <_ai_platform_get_io_buffers_info+0x8a>
 8004546:	885b      	ldrh	r3, [r3, #2]
 8004548:	3300      	adds	r3, #0
 800454a:	bf18      	it	ne
 800454c:	2301      	movne	r3, #1
 800454e:	507b      	str	r3, [r7, r1]
 8004550:	b903      	cbnz	r3, 8004554 <_ai_platform_get_io_buffers_info+0x90>
 8004552:	2000      	movs	r0, #0
 8004554:	6150      	str	r0, [r2, #20]
 8004556:	3401      	adds	r4, #1
 8004558:	e7bf      	b.n	80044da <_ai_platform_get_io_buffers_info+0x16>
 800455a:	b003      	add	sp, #12
 800455c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004560 <_platform_network_state_setup.isra.1>:
 8004560:	b430      	push	{r4, r5}
 8004562:	68dd      	ldr	r5, [r3, #12]
 8004564:	695c      	ldr	r4, [r3, #20]
 8004566:	68ed      	ldr	r5, [r5, #12]
 8004568:	68e4      	ldr	r4, [r4, #12]
 800456a:	fb04 f405 	mul.w	r4, r4, r5
 800456e:	6084      	str	r4, [r0, #8]
 8004570:	8809      	ldrh	r1, [r1, #0]
 8004572:	fb04 f401 	mul.w	r4, r4, r1
 8004576:	60c4      	str	r4, [r0, #12]
 8004578:	6811      	ldr	r1, [r2, #0]
 800457a:	6041      	str	r1, [r0, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	4414      	add	r4, r2
 8004580:	6004      	str	r4, [r0, #0]
 8004582:	699a      	ldr	r2, [r3, #24]
 8004584:	6814      	ldr	r4, [r2, #0]
 8004586:	00a4      	lsls	r4, r4, #2
 8004588:	d407      	bmi.n	800459a <_platform_network_state_setup.isra.1+0x3a>
 800458a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800458e:	1b64      	subs	r4, r4, r5
 8004590:	4421      	add	r1, r4
 8004592:	6091      	str	r1, [r2, #8]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	6842      	ldr	r2, [r0, #4]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	bc30      	pop	{r4, r5}
 800459c:	4770      	bx	lr
	...

080045a0 <ai_platform_runtime_get_revision>:
 80045a0:	490a      	ldr	r1, [pc, #40]	; (80045cc <ai_platform_runtime_get_revision+0x2c>)
 80045a2:	4a0b      	ldr	r2, [pc, #44]	; (80045d0 <ai_platform_runtime_get_revision+0x30>)
 80045a4:	680b      	ldr	r3, [r1, #0]
 80045a6:	2001      	movs	r0, #1
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	600b      	str	r3, [r1, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	6010      	str	r0, [r2, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2a00      	cmp	r2, #0
 80045b6:	d1fc      	bne.n	80045b2 <ai_platform_runtime_get_revision+0x12>
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <ai_platform_runtime_get_revision+0x34>)
 80045ba:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <ai_platform_runtime_get_revision+0x38>)
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <ai_platform_runtime_get_revision+0x3c>)
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d000      	beq.n	80045c8 <ai_platform_runtime_get_revision+0x28>
 80045c6:	e7fe      	b.n	80045c6 <ai_platform_runtime_get_revision+0x26>
 80045c8:	4805      	ldr	r0, [pc, #20]	; (80045e0 <ai_platform_runtime_get_revision+0x40>)
 80045ca:	4770      	bx	lr
 80045cc:	e0002000 	.word	0xe0002000
 80045d0:	40023008 	.word	0x40023008
 80045d4:	40023000 	.word	0x40023000
 80045d8:	f407a5c2 	.word	0xf407a5c2
 80045dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80045e0:	08062ba0 	.word	0x08062ba0

080045e4 <ai_platform_runtime_get_version>:
 80045e4:	490b      	ldr	r1, [pc, #44]	; (8004614 <ai_platform_runtime_get_version+0x30>)
 80045e6:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <ai_platform_runtime_get_version+0x34>)
 80045e8:	680b      	ldr	r3, [r1, #0]
 80045ea:	2001      	movs	r0, #1
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	600b      	str	r3, [r1, #0]
 80045f2:	b082      	sub	sp, #8
 80045f4:	4613      	mov	r3, r2
 80045f6:	6010      	str	r0, [r2, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	d1fc      	bne.n	80045f8 <ai_platform_runtime_get_version+0x14>
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <ai_platform_runtime_get_version+0x38>)
 8004600:	4a07      	ldr	r2, [pc, #28]	; (8004620 <ai_platform_runtime_get_version+0x3c>)
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <ai_platform_runtime_get_version+0x40>)
 8004608:	429a      	cmp	r2, r3
 800460a:	d000      	beq.n	800460e <ai_platform_runtime_get_version+0x2a>
 800460c:	e7fe      	b.n	800460c <ai_platform_runtime_get_version+0x28>
 800460e:	2006      	movs	r0, #6
 8004610:	b002      	add	sp, #8
 8004612:	4770      	bx	lr
 8004614:	e0002000 	.word	0xe0002000
 8004618:	40023008 	.word	0x40023008
 800461c:	40023000 	.word	0x40023000
 8004620:	f407a5c2 	.word	0xf407a5c2
 8004624:	b5e8b5cd 	.word	0xb5e8b5cd

08004628 <ai_platform_api_get_version>:
 8004628:	4913      	ldr	r1, [pc, #76]	; (8004678 <ai_platform_api_get_version+0x50>)
 800462a:	4a14      	ldr	r2, [pc, #80]	; (800467c <ai_platform_api_get_version+0x54>)
 800462c:	680b      	ldr	r3, [r1, #0]
 800462e:	2001      	movs	r0, #1
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	600b      	str	r3, [r1, #0]
 8004636:	b082      	sub	sp, #8
 8004638:	4613      	mov	r3, r2
 800463a:	6010      	str	r0, [r2, #0]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	2800      	cmp	r0, #0
 8004640:	d1fc      	bne.n	800463c <ai_platform_api_get_version+0x14>
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <ai_platform_api_get_version+0x58>)
 8004644:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <ai_platform_api_get_version+0x5c>)
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <ai_platform_api_get_version+0x60>)
 800464c:	429a      	cmp	r2, r3
 800464e:	d000      	beq.n	8004652 <ai_platform_api_get_version+0x2a>
 8004650:	e7fe      	b.n	8004650 <ai_platform_api_get_version+0x28>
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <ai_platform_api_get_version+0x64>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	f362 0007 	bfi	r0, r2, #0, #8
 800465c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004660:	f362 200f 	bfi	r0, r2, #8, #8
 8004664:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004668:	f362 4017 	bfi	r0, r2, #16, #8
 800466c:	0e1b      	lsrs	r3, r3, #24
 800466e:	f363 601f 	bfi	r0, r3, #24, #8
 8004672:	b002      	add	sp, #8
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	e0002000 	.word	0xe0002000
 800467c:	40023008 	.word	0x40023008
 8004680:	40023000 	.word	0x40023000
 8004684:	f407a5c2 	.word	0xf407a5c2
 8004688:	b5e8b5cd 	.word	0xb5e8b5cd
 800468c:	08062ba4 	.word	0x08062ba4

08004690 <ai_platform_interface_api_get_version>:
 8004690:	4913      	ldr	r1, [pc, #76]	; (80046e0 <ai_platform_interface_api_get_version+0x50>)
 8004692:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <ai_platform_interface_api_get_version+0x54>)
 8004694:	680b      	ldr	r3, [r1, #0]
 8004696:	2001      	movs	r0, #1
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	600b      	str	r3, [r1, #0]
 800469e:	b082      	sub	sp, #8
 80046a0:	4613      	mov	r3, r2
 80046a2:	6010      	str	r0, [r2, #0]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d1fc      	bne.n	80046a4 <ai_platform_interface_api_get_version+0x14>
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <ai_platform_interface_api_get_version+0x58>)
 80046ac:	4a0f      	ldr	r2, [pc, #60]	; (80046ec <ai_platform_interface_api_get_version+0x5c>)
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <ai_platform_interface_api_get_version+0x60>)
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d000      	beq.n	80046ba <ai_platform_interface_api_get_version+0x2a>
 80046b8:	e7fe      	b.n	80046b8 <ai_platform_interface_api_get_version+0x28>
 80046ba:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <ai_platform_interface_api_get_version+0x64>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	f362 0007 	bfi	r0, r2, #0, #8
 80046c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80046c8:	f362 200f 	bfi	r0, r2, #8, #8
 80046cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80046d0:	f362 4017 	bfi	r0, r2, #16, #8
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	f363 601f 	bfi	r0, r3, #24, #8
 80046da:	b002      	add	sp, #8
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	e0002000 	.word	0xe0002000
 80046e4:	40023008 	.word	0x40023008
 80046e8:	40023000 	.word	0x40023000
 80046ec:	f407a5c2 	.word	0xf407a5c2
 80046f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80046f4:	08062ba8 	.word	0x08062ba8

080046f8 <ai_platform_context_acquire>:
 80046f8:	b410      	push	{r4}
 80046fa:	b120      	cbz	r0, 8004706 <ai_platform_context_acquire+0xe>
 80046fc:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <ai_platform_context_acquire+0x3c>)
 80046fe:	6802      	ldr	r2, [r0, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	bf18      	it	ne
 8004704:	2000      	movne	r0, #0
 8004706:	490c      	ldr	r1, [pc, #48]	; (8004738 <ai_platform_context_acquire+0x40>)
 8004708:	4a0c      	ldr	r2, [pc, #48]	; (800473c <ai_platform_context_acquire+0x44>)
 800470a:	680b      	ldr	r3, [r1, #0]
 800470c:	2401      	movs	r4, #1
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	600b      	str	r3, [r1, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	6014      	str	r4, [r2, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	2a00      	cmp	r2, #0
 800471c:	d1fc      	bne.n	8004718 <ai_platform_context_acquire+0x20>
 800471e:	4b08      	ldr	r3, [pc, #32]	; (8004740 <ai_platform_context_acquire+0x48>)
 8004720:	4a08      	ldr	r2, [pc, #32]	; (8004744 <ai_platform_context_acquire+0x4c>)
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <ai_platform_context_acquire+0x50>)
 8004728:	429a      	cmp	r2, r3
 800472a:	d000      	beq.n	800472e <ai_platform_context_acquire+0x36>
 800472c:	e7fe      	b.n	800472c <ai_platform_context_acquire+0x34>
 800472e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	a1c00100 	.word	0xa1c00100
 8004738:	e0002000 	.word	0xe0002000
 800473c:	40023008 	.word	0x40023008
 8004740:	40023000 	.word	0x40023000
 8004744:	f407a5c2 	.word	0xf407a5c2
 8004748:	b5e8b5cd 	.word	0xb5e8b5cd

0800474c <ai_platform_network_get_error>:
 800474c:	b410      	push	{r4}
 800474e:	b120      	cbz	r0, 800475a <ai_platform_network_get_error+0xe>
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <ai_platform_network_get_error+0x4c>)
 8004752:	6802      	ldr	r2, [r0, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	bf18      	it	ne
 8004758:	2000      	movne	r0, #0
 800475a:	4910      	ldr	r1, [pc, #64]	; (800479c <ai_platform_network_get_error+0x50>)
 800475c:	4a10      	ldr	r2, [pc, #64]	; (80047a0 <ai_platform_network_get_error+0x54>)
 800475e:	680b      	ldr	r3, [r1, #0]
 8004760:	2401      	movs	r4, #1
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	600b      	str	r3, [r1, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	6014      	str	r4, [r2, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	2a00      	cmp	r2, #0
 8004770:	d1fc      	bne.n	800476c <ai_platform_network_get_error+0x20>
 8004772:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <ai_platform_network_get_error+0x58>)
 8004774:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <ai_platform_network_get_error+0x5c>)
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <ai_platform_network_get_error+0x60>)
 800477c:	429a      	cmp	r2, r3
 800477e:	d000      	beq.n	8004782 <ai_platform_network_get_error+0x36>
 8004780:	e7fe      	b.n	8004780 <ai_platform_network_get_error+0x34>
 8004782:	b120      	cbz	r0, 800478e <ai_platform_network_get_error+0x42>
 8004784:	3010      	adds	r0, #16
 8004786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800478a:	f000 bc75 	b.w	8005078 <core_get_error>
 800478e:	f241 0010 	movw	r0, #4112	; 0x1010
 8004792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	a1c00100 	.word	0xa1c00100
 800479c:	e0002000 	.word	0xe0002000
 80047a0:	40023008 	.word	0x40023008
 80047a4:	40023000 	.word	0x40023000
 80047a8:	f407a5c2 	.word	0xf407a5c2
 80047ac:	b5e8b5cd 	.word	0xb5e8b5cd

080047b0 <ai_platform_api_get_network_report>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	460c      	mov	r4, r1
 80047b4:	4605      	mov	r5, r0
 80047b6:	b120      	cbz	r0, 80047c2 <ai_platform_api_get_network_report+0x12>
 80047b8:	4b71      	ldr	r3, [pc, #452]	; (8004980 <ai_platform_api_get_network_report+0x1d0>)
 80047ba:	6802      	ldr	r2, [r0, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	bf18      	it	ne
 80047c0:	2500      	movne	r5, #0
 80047c2:	4970      	ldr	r1, [pc, #448]	; (8004984 <ai_platform_api_get_network_report+0x1d4>)
 80047c4:	4a70      	ldr	r2, [pc, #448]	; (8004988 <ai_platform_api_get_network_report+0x1d8>)
 80047c6:	680b      	ldr	r3, [r1, #0]
 80047c8:	2001      	movs	r0, #1
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	600b      	str	r3, [r1, #0]
 80047d0:	4611      	mov	r1, r2
 80047d2:	6010      	str	r0, [r2, #0]
 80047d4:	680b      	ldr	r3, [r1, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1fc      	bne.n	80047d4 <ai_platform_api_get_network_report+0x24>
 80047da:	4a6c      	ldr	r2, [pc, #432]	; (800498c <ai_platform_api_get_network_report+0x1dc>)
 80047dc:	496c      	ldr	r1, [pc, #432]	; (8004990 <ai_platform_api_get_network_report+0x1e0>)
 80047de:	6011      	str	r1, [r2, #0]
 80047e0:	6811      	ldr	r1, [r2, #0]
 80047e2:	4a6c      	ldr	r2, [pc, #432]	; (8004994 <ai_platform_api_get_network_report+0x1e4>)
 80047e4:	4291      	cmp	r1, r2
 80047e6:	d000      	beq.n	80047ea <ai_platform_api_get_network_report+0x3a>
 80047e8:	e7fe      	b.n	80047e8 <ai_platform_api_get_network_report+0x38>
 80047ea:	2d00      	cmp	r5, #0
 80047ec:	d062      	beq.n	80048b4 <ai_platform_api_get_network_report+0x104>
 80047ee:	2c00      	cmp	r4, #0
 80047f0:	d062      	beq.n	80048b8 <ai_platform_api_get_network_report+0x108>
 80047f2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80047f4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80047f6:	2a00      	cmp	r2, #0
 80047f8:	d056      	beq.n	80048a8 <ai_platform_api_get_network_report+0xf8>
 80047fa:	2301      	movs	r3, #1
 80047fc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80047fe:	6913      	ldr	r3, [r2, #16]
 8004800:	429a      	cmp	r2, r3
 8004802:	d00c      	beq.n	800481e <ai_platform_api_get_network_report+0x6e>
 8004804:	b15b      	cbz	r3, 800481e <ai_platform_api_get_network_report+0x6e>
 8004806:	2202      	movs	r2, #2
 8004808:	e003      	b.n	8004812 <ai_platform_api_get_network_report+0x62>
 800480a:	1c50      	adds	r0, r2, #1
 800480c:	460b      	mov	r3, r1
 800480e:	b121      	cbz	r1, 800481a <ai_platform_api_get_network_report+0x6a>
 8004810:	4602      	mov	r2, r0
 8004812:	66e2      	str	r2, [r4, #108]	; 0x6c
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	4299      	cmp	r1, r3
 8004818:	d1f7      	bne.n	800480a <ai_platform_api_get_network_report+0x5a>
 800481a:	2a00      	cmp	r2, #0
 800481c:	d044      	beq.n	80048a8 <ai_platform_api_get_network_report+0xf8>
 800481e:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8004822:	b100      	cbz	r0, 8004826 <ai_platform_api_get_network_report+0x76>
 8004824:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8004826:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800482a:	f7ff fe4b 	bl	80044c4 <_ai_platform_get_io_buffers_info>
 800482e:	4606      	mov	r6, r0
 8004830:	8620      	strh	r0, [r4, #48]	; 0x30
 8004832:	2800      	cmp	r0, #0
 8004834:	d05f      	beq.n	80048f6 <ai_platform_api_get_network_report+0x146>
 8004836:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 800483a:	2b01      	cmp	r3, #1
 800483c:	bf8a      	itet	hi
 800483e:	6ce8      	ldrhi	r0, [r5, #76]	; 0x4c
 8004840:	2000      	movls	r0, #0
 8004842:	300c      	addhi	r0, #12
 8004844:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8004848:	f7ff fe3c 	bl	80044c4 <_ai_platform_get_io_buffers_info>
 800484c:	4606      	mov	r6, r0
 800484e:	8660      	strh	r0, [r4, #50]	; 0x32
 8004850:	2800      	cmp	r0, #0
 8004852:	d048      	beq.n	80048e6 <ai_platform_api_get_network_report+0x136>
 8004854:	686b      	ldr	r3, [r5, #4]
 8004856:	6723      	str	r3, [r4, #112]	; 0x70
 8004858:	f105 0730 	add.w	r7, r5, #48	; 0x30
 800485c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800485e:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8004862:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004864:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004868:	e886 0003 	stmia.w	r6, {r0, r1}
 800486c:	f105 0718 	add.w	r7, r5, #24
 8004870:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004872:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8004876:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004878:	e897 0003 	ldmia.w	r7, {r0, r1}
 800487c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004880:	4a40      	ldr	r2, [pc, #256]	; (8004984 <ai_platform_api_get_network_report+0x1d4>)
 8004882:	4941      	ldr	r1, [pc, #260]	; (8004988 <ai_platform_api_get_network_report+0x1d8>)
 8004884:	6813      	ldr	r3, [r2, #0]
 8004886:	2001      	movs	r0, #1
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	460a      	mov	r2, r1
 8004890:	6008      	str	r0, [r1, #0]
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1fc      	bne.n	8004892 <ai_platform_api_get_network_report+0xe2>
 8004898:	4b3c      	ldr	r3, [pc, #240]	; (800498c <ai_platform_api_get_network_report+0x1dc>)
 800489a:	493d      	ldr	r1, [pc, #244]	; (8004990 <ai_platform_api_get_network_report+0x1e0>)
 800489c:	6019      	str	r1, [r3, #0]
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	4b3c      	ldr	r3, [pc, #240]	; (8004994 <ai_platform_api_get_network_report+0x1e4>)
 80048a2:	4299      	cmp	r1, r3
 80048a4:	d00a      	beq.n	80048bc <ai_platform_api_get_network_report+0x10c>
 80048a6:	e7fe      	b.n	80048a6 <ai_platform_api_get_network_report+0xf6>
 80048a8:	f105 0010 	add.w	r0, r5, #16
 80048ac:	2218      	movs	r2, #24
 80048ae:	2111      	movs	r1, #17
 80048b0:	f000 fbe8 	bl	8005084 <core_set_error>
 80048b4:	2000      	movs	r0, #0
 80048b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b8:	4620      	mov	r0, r4
 80048ba:	e7fc      	b.n	80048b6 <ai_platform_api_get_network_report+0x106>
 80048bc:	4b36      	ldr	r3, [pc, #216]	; (8004998 <ai_platform_api_get_network_report+0x1e8>)
 80048be:	4831      	ldr	r0, [pc, #196]	; (8004984 <ai_platform_api_get_network_report+0x1d4>)
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	6803      	ldr	r3, [r0, #0]
 80048c4:	4930      	ldr	r1, [pc, #192]	; (8004988 <ai_platform_api_get_network_report+0x1d8>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6003      	str	r3, [r0, #0]
 80048cc:	2301      	movs	r3, #1
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	680b      	ldr	r3, [r1, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1fc      	bne.n	80048d0 <ai_platform_api_get_network_report+0x120>
 80048d6:	4b2d      	ldr	r3, [pc, #180]	; (800498c <ai_platform_api_get_network_report+0x1dc>)
 80048d8:	4a2d      	ldr	r2, [pc, #180]	; (8004990 <ai_platform_api_get_network_report+0x1e0>)
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b2d      	ldr	r3, [pc, #180]	; (8004994 <ai_platform_api_get_network_report+0x1e4>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d010      	beq.n	8004906 <ai_platform_api_get_network_report+0x156>
 80048e4:	e7fe      	b.n	80048e4 <ai_platform_api_get_network_report+0x134>
 80048e6:	f105 0010 	add.w	r0, r5, #16
 80048ea:	2218      	movs	r2, #24
 80048ec:	2113      	movs	r1, #19
 80048ee:	f000 fbc9 	bl	8005084 <core_set_error>
 80048f2:	4630      	mov	r0, r6
 80048f4:	e7df      	b.n	80048b6 <ai_platform_api_get_network_report+0x106>
 80048f6:	f105 0010 	add.w	r0, r5, #16
 80048fa:	2218      	movs	r2, #24
 80048fc:	2112      	movs	r1, #18
 80048fe:	f000 fbc1 	bl	8005084 <core_set_error>
 8004902:	4630      	mov	r0, r6
 8004904:	e7d7      	b.n	80048b6 <ai_platform_api_get_network_report+0x106>
 8004906:	2306      	movs	r3, #6
 8004908:	481e      	ldr	r0, [pc, #120]	; (8004984 <ai_platform_api_get_network_report+0x1d4>)
 800490a:	6163      	str	r3, [r4, #20]
 800490c:	6803      	ldr	r3, [r0, #0]
 800490e:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <ai_platform_api_get_network_report+0x1d8>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6003      	str	r3, [r0, #0]
 8004916:	2301      	movs	r3, #1
 8004918:	600b      	str	r3, [r1, #0]
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1fc      	bne.n	800491a <ai_platform_api_get_network_report+0x16a>
 8004920:	4b1a      	ldr	r3, [pc, #104]	; (800498c <ai_platform_api_get_network_report+0x1dc>)
 8004922:	491b      	ldr	r1, [pc, #108]	; (8004990 <ai_platform_api_get_network_report+0x1e0>)
 8004924:	6019      	str	r1, [r3, #0]
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <ai_platform_api_get_network_report+0x1e4>)
 800492a:	4299      	cmp	r1, r3
 800492c:	d000      	beq.n	8004930 <ai_platform_api_get_network_report+0x180>
 800492e:	e7fe      	b.n	800492e <ai_platform_api_get_network_report+0x17e>
 8004930:	f240 1301 	movw	r3, #257	; 0x101
 8004934:	4913      	ldr	r1, [pc, #76]	; (8004984 <ai_platform_api_get_network_report+0x1d4>)
 8004936:	6263      	str	r3, [r4, #36]	; 0x24
 8004938:	680b      	ldr	r3, [r1, #0]
 800493a:	4813      	ldr	r0, [pc, #76]	; (8004988 <ai_platform_api_get_network_report+0x1d8>)
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	600b      	str	r3, [r1, #0]
 8004942:	2301      	movs	r3, #1
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	6802      	ldr	r2, [r0, #0]
 8004948:	2a00      	cmp	r2, #0
 800494a:	d1fc      	bne.n	8004946 <ai_platform_api_get_network_report+0x196>
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <ai_platform_api_get_network_report+0x1dc>)
 800494e:	4910      	ldr	r1, [pc, #64]	; (8004990 <ai_platform_api_get_network_report+0x1e0>)
 8004950:	6019      	str	r1, [r3, #0]
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <ai_platform_api_get_network_report+0x1e4>)
 8004956:	4299      	cmp	r1, r3
 8004958:	d000      	beq.n	800495c <ai_platform_api_get_network_report+0x1ac>
 800495a:	e7fe      	b.n	800495a <ai_platform_api_get_network_report+0x1aa>
 800495c:	f240 4301 	movw	r3, #1025	; 0x401
 8004960:	62a3      	str	r3, [r4, #40]	; 0x28
 8004962:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004964:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8004968:	0e19      	lsrs	r1, r3, #24
 800496a:	0c1a      	lsrs	r2, r3, #16
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	f884 1020 	strb.w	r1, [r4, #32]
 8004972:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8004976:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800497a:	2001      	movs	r0, #1
 800497c:	e79b      	b.n	80048b6 <ai_platform_api_get_network_report+0x106>
 800497e:	bf00      	nop
 8004980:	a1c00100 	.word	0xa1c00100
 8004984:	e0002000 	.word	0xe0002000
 8004988:	40023008 	.word	0x40023008
 800498c:	40023000 	.word	0x40023000
 8004990:	f407a5c2 	.word	0xf407a5c2
 8004994:	b5e8b5cd 	.word	0xb5e8b5cd
 8004998:	08062ba0 	.word	0x08062ba0

0800499c <ai_platform_network_create>:
 800499c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049a0:	4f30      	ldr	r7, [pc, #192]	; (8004a64 <ai_platform_network_create+0xc8>)
 80049a2:	4e31      	ldr	r6, [pc, #196]	; (8004a68 <ai_platform_network_create+0xcc>)
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	b083      	sub	sp, #12
 80049a8:	f021 0101 	bic.w	r1, r1, #1
 80049ac:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80049b0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80049b4:	6039      	str	r1, [r7, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	6031      	str	r1, [r6, #0]
 80049ba:	6831      	ldr	r1, [r6, #0]
 80049bc:	2900      	cmp	r1, #0
 80049be:	d1fc      	bne.n	80049ba <ai_platform_network_create+0x1e>
 80049c0:	492a      	ldr	r1, [pc, #168]	; (8004a6c <ai_platform_network_create+0xd0>)
 80049c2:	4d2b      	ldr	r5, [pc, #172]	; (8004a70 <ai_platform_network_create+0xd4>)
 80049c4:	600d      	str	r5, [r1, #0]
 80049c6:	680d      	ldr	r5, [r1, #0]
 80049c8:	492a      	ldr	r1, [pc, #168]	; (8004a74 <ai_platform_network_create+0xd8>)
 80049ca:	428d      	cmp	r5, r1
 80049cc:	d000      	beq.n	80049d0 <ai_platform_network_create+0x34>
 80049ce:	e7fe      	b.n	80049ce <ai_platform_network_create+0x32>
 80049d0:	b1e0      	cbz	r0, 8004a0c <ai_platform_network_create+0x70>
 80049d2:	4680      	mov	r8, r0
 80049d4:	461d      	mov	r5, r3
 80049d6:	4b28      	ldr	r3, [pc, #160]	; (8004a78 <ai_platform_network_create+0xdc>)
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	f8c8 2000 	str.w	r2, [r8]
 80049de:	4617      	mov	r7, r2
 80049e0:	f000 fb48 	bl	8005074 <core_init>
 80049e4:	b1b8      	cbz	r0, 8004a16 <ai_platform_network_create+0x7a>
 80049e6:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <ai_platform_network_create+0xc8>)
 80049e8:	491f      	ldr	r1, [pc, #124]	; (8004a68 <ai_platform_network_create+0xcc>)
 80049ea:	6813      	ldr	r3, [r2, #0]
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	2301      	movs	r3, #1
 80049f4:	6033      	str	r3, [r6, #0]
 80049f6:	680e      	ldr	r6, [r1, #0]
 80049f8:	2e00      	cmp	r6, #0
 80049fa:	d1fc      	bne.n	80049f6 <ai_platform_network_create+0x5a>
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <ai_platform_network_create+0xd0>)
 80049fe:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <ai_platform_network_create+0xd4>)
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <ai_platform_network_create+0xd8>)
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d016      	beq.n	8004a38 <ai_platform_network_create+0x9c>
 8004a0a:	e7fe      	b.n	8004a0a <ai_platform_network_create+0x6e>
 8004a0c:	f241 0010 	movw	r0, #4112	; 0x1010
 8004a10:	b003      	add	sp, #12
 8004a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a16:	062d      	lsls	r5, r5, #24
 8004a18:	0424      	lsls	r4, r4, #16
 8004a1a:	2130      	movs	r1, #48	; 0x30
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c8 3000 	str.w	r3, [r8]
 8004a22:	2210      	movs	r2, #16
 8004a24:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 8004a28:	2000      	movs	r0, #0
 8004a2a:	432b      	orrs	r3, r5
 8004a2c:	f361 0007 	bfi	r0, r1, #0, #8
 8004a30:	663b      	str	r3, [r7, #96]	; 0x60
 8004a32:	f362 201f 	bfi	r0, r2, #8, #24
 8004a36:	e7eb      	b.n	8004a10 <ai_platform_network_create+0x74>
 8004a38:	062d      	lsls	r5, r5, #24
 8004a3a:	0424      	lsls	r4, r4, #16
 8004a3c:	ea45 0304 	orr.w	r3, r5, r4
 8004a40:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8004a44:	d001      	beq.n	8004a4a <ai_platform_network_create+0xae>
 8004a46:	2101      	movs	r1, #1
 8004a48:	e7e8      	b.n	8004a1c <ai_platform_network_create+0x80>
 8004a4a:	a802      	add	r0, sp, #8
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <ai_platform_network_create+0xe0>)
 8004a4e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8004a52:	f000 ffe7 	bl	8005a24 <ai_check_custom_types>
 8004a56:	b110      	cbz	r0, 8004a5e <ai_platform_network_create+0xc2>
 8004a58:	4632      	mov	r2, r6
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	e7e2      	b.n	8004a24 <ai_platform_network_create+0x88>
 8004a5e:	2102      	movs	r1, #2
 8004a60:	e7dc      	b.n	8004a1c <ai_platform_network_create+0x80>
 8004a62:	bf00      	nop
 8004a64:	e0002000 	.word	0xe0002000
 8004a68:	40023008 	.word	0x40023008
 8004a6c:	40023000 	.word	0x40023000
 8004a70:	f407a5c2 	.word	0xf407a5c2
 8004a74:	b5e8b5cd 	.word	0xb5e8b5cd
 8004a78:	a1c00100 	.word	0xa1c00100
 8004a7c:	84048403 	.word	0x84048403

08004a80 <ai_platform_network_destroy>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	b1d8      	cbz	r0, 8004abc <ai_platform_network_destroy+0x3c>
 8004a84:	4a11      	ldr	r2, [pc, #68]	; (8004acc <ai_platform_network_destroy+0x4c>)
 8004a86:	6803      	ldr	r3, [r0, #0]
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	bf0c      	ite	eq
 8004a8c:	4603      	moveq	r3, r0
 8004a8e:	2300      	movne	r3, #0
 8004a90:	4c0f      	ldr	r4, [pc, #60]	; (8004ad0 <ai_platform_network_destroy+0x50>)
 8004a92:	4910      	ldr	r1, [pc, #64]	; (8004ad4 <ai_platform_network_destroy+0x54>)
 8004a94:	6822      	ldr	r2, [r4, #0]
 8004a96:	2501      	movs	r5, #1
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	600d      	str	r5, [r1, #0]
 8004aa2:	6814      	ldr	r4, [r2, #0]
 8004aa4:	2c00      	cmp	r4, #0
 8004aa6:	d1fc      	bne.n	8004aa2 <ai_platform_network_destroy+0x22>
 8004aa8:	4a0b      	ldr	r2, [pc, #44]	; (8004ad8 <ai_platform_network_destroy+0x58>)
 8004aaa:	490c      	ldr	r1, [pc, #48]	; (8004adc <ai_platform_network_destroy+0x5c>)
 8004aac:	6011      	str	r1, [r2, #0]
 8004aae:	6811      	ldr	r1, [r2, #0]
 8004ab0:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <ai_platform_network_destroy+0x60>)
 8004ab2:	4291      	cmp	r1, r2
 8004ab4:	d000      	beq.n	8004ab8 <ai_platform_network_destroy+0x38>
 8004ab6:	e7fe      	b.n	8004ab6 <ai_platform_network_destroy+0x36>
 8004ab8:	b913      	cbnz	r3, 8004ac0 <ai_platform_network_destroy+0x40>
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	4603      	mov	r3, r0
 8004abe:	e7e7      	b.n	8004a90 <ai_platform_network_destroy+0x10>
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 f853 	bl	8005b6c <ai_layers_destroy_all>
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	bd38      	pop	{r3, r4, r5, pc}
 8004aca:	bf00      	nop
 8004acc:	a1c00100 	.word	0xa1c00100
 8004ad0:	e0002000 	.word	0xe0002000
 8004ad4:	40023008 	.word	0x40023008
 8004ad8:	40023000 	.word	0x40023000
 8004adc:	f407a5c2 	.word	0xf407a5c2
 8004ae0:	b5e8b5cd 	.word	0xb5e8b5cd

08004ae4 <ai_platform_network_init>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	4605      	mov	r5, r0
 8004aea:	b120      	cbz	r0, 8004af6 <ai_platform_network_init+0x12>
 8004aec:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <ai_platform_network_init+0xcc>)
 8004aee:	6802      	ldr	r2, [r0, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	bf18      	it	ne
 8004af4:	2500      	movne	r5, #0
 8004af6:	492f      	ldr	r1, [pc, #188]	; (8004bb4 <ai_platform_network_init+0xd0>)
 8004af8:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <ai_platform_network_init+0xd4>)
 8004afa:	680b      	ldr	r3, [r1, #0]
 8004afc:	2001      	movs	r0, #1
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	600b      	str	r3, [r1, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	6010      	str	r0, [r2, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	2a00      	cmp	r2, #0
 8004b0c:	d1fc      	bne.n	8004b08 <ai_platform_network_init+0x24>
 8004b0e:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <ai_platform_network_init+0xd8>)
 8004b10:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <ai_platform_network_init+0xdc>)
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b2b      	ldr	r3, [pc, #172]	; (8004bc4 <ai_platform_network_init+0xe0>)
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d000      	beq.n	8004b1e <ai_platform_network_init+0x3a>
 8004b1c:	e7fe      	b.n	8004b1c <ai_platform_network_init+0x38>
 8004b1e:	b1dd      	cbz	r5, 8004b58 <ai_platform_network_init+0x74>
 8004b20:	b1e4      	cbz	r4, 8004b5c <ai_platform_network_init+0x78>
 8004b22:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004b24:	6926      	ldr	r6, [r4, #16]
 8004b26:	b30f      	cbz	r7, 8004b6c <ai_platform_network_init+0x88>
 8004b28:	b38e      	cbz	r6, 8004b8e <ai_platform_network_init+0xaa>
 8004b2a:	4627      	mov	r7, r4
 8004b2c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004b2e:	f105 0618 	add.w	r6, r5, #24
 8004b32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004b34:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004b38:	e886 0003 	stmia.w	r6, {r0, r1}
 8004b3c:	3418      	adds	r4, #24
 8004b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b40:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8004b44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004b46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004b50:	60eb      	str	r3, [r5, #12]
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 ff90 	bl	8005a78 <ai_layers_init_all>
 8004b58:	4628      	mov	r0, r5
 8004b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b5c:	f105 0010 	add.w	r0, r5, #16
 8004b60:	2211      	movs	r2, #17
 8004b62:	2110      	movs	r1, #16
 8004b64:	4625      	mov	r5, r4
 8004b66:	f000 fa8d 	bl	8005084 <core_set_error>
 8004b6a:	e7f5      	b.n	8004b58 <ai_platform_network_init+0x74>
 8004b6c:	8c21      	ldrh	r1, [r4, #32]
 8004b6e:	8be2      	ldrh	r2, [r4, #30]
 8004b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b72:	fb02 f201 	mul.w	r2, r2, r1
 8004b76:	fb03 f302 	mul.w	r3, r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0d4      	beq.n	8004b28 <ai_platform_network_init+0x44>
 8004b7e:	f105 0010 	add.w	r0, r5, #16
 8004b82:	2213      	movs	r2, #19
 8004b84:	2110      	movs	r1, #16
 8004b86:	463d      	mov	r5, r7
 8004b88:	f000 fa7c 	bl	8005084 <core_set_error>
 8004b8c:	e7e4      	b.n	8004b58 <ai_platform_network_init+0x74>
 8004b8e:	8921      	ldrh	r1, [r4, #8]
 8004b90:	88e2      	ldrh	r2, [r4, #6]
 8004b92:	68e3      	ldr	r3, [r4, #12]
 8004b94:	fb02 f201 	mul.w	r2, r2, r1
 8004b98:	fb03 f302 	mul.w	r3, r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0c4      	beq.n	8004b2a <ai_platform_network_init+0x46>
 8004ba0:	f105 0010 	add.w	r0, r5, #16
 8004ba4:	2212      	movs	r2, #18
 8004ba6:	2110      	movs	r1, #16
 8004ba8:	4635      	mov	r5, r6
 8004baa:	f000 fa6b 	bl	8005084 <core_set_error>
 8004bae:	e7d3      	b.n	8004b58 <ai_platform_network_init+0x74>
 8004bb0:	a1c00100 	.word	0xa1c00100
 8004bb4:	e0002000 	.word	0xe0002000
 8004bb8:	40023008 	.word	0x40023008
 8004bbc:	40023000 	.word	0x40023000
 8004bc0:	f407a5c2 	.word	0xf407a5c2
 8004bc4:	b5e8b5cd 	.word	0xb5e8b5cd

08004bc8 <ai_platform_network_post_init>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4604      	mov	r4, r0
 8004bcc:	b120      	cbz	r0, 8004bd8 <ai_platform_network_post_init+0x10>
 8004bce:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <ai_platform_network_post_init+0x80>)
 8004bd0:	6802      	ldr	r2, [r0, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	bf18      	it	ne
 8004bd6:	2400      	movne	r4, #0
 8004bd8:	491c      	ldr	r1, [pc, #112]	; (8004c4c <ai_platform_network_post_init+0x84>)
 8004bda:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <ai_platform_network_post_init+0x88>)
 8004bdc:	680b      	ldr	r3, [r1, #0]
 8004bde:	2001      	movs	r0, #1
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	600b      	str	r3, [r1, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	6010      	str	r0, [r2, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	2a00      	cmp	r2, #0
 8004bee:	d1fc      	bne.n	8004bea <ai_platform_network_post_init+0x22>
 8004bf0:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <ai_platform_network_post_init+0x8c>)
 8004bf2:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <ai_platform_network_post_init+0x90>)
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <ai_platform_network_post_init+0x94>)
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d000      	beq.n	8004c00 <ai_platform_network_post_init+0x38>
 8004bfe:	e7fe      	b.n	8004bfe <ai_platform_network_post_init+0x36>
 8004c00:	b1bc      	cbz	r4, 8004c32 <ai_platform_network_post_init+0x6a>
 8004c02:	68e3      	ldr	r3, [r4, #12]
 8004c04:	f013 0502 	ands.w	r5, r3, #2
 8004c08:	d015      	beq.n	8004c36 <ai_platform_network_post_init+0x6e>
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 ff48 	bl	8005aa0 <ai_layers_post_init_all>
 8004c10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c12:	b163      	cbz	r3, 8004c2e <ai_platform_network_post_init+0x66>
 8004c14:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8004c16:	b91d      	cbnz	r5, 8004c20 <ai_platform_network_post_init+0x58>
 8004c18:	e009      	b.n	8004c2e <ai_platform_network_post_init+0x66>
 8004c1a:	461d      	mov	r5, r3
 8004c1c:	b13b      	cbz	r3, 8004c2e <ai_platform_network_post_init+0x66>
 8004c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004c22:	4629      	mov	r1, r5
 8004c24:	2000      	movs	r0, #0
 8004c26:	4798      	blx	r3
 8004c28:	692b      	ldr	r3, [r5, #16]
 8004c2a:	42ab      	cmp	r3, r5
 8004c2c:	d1f5      	bne.n	8004c1a <ai_platform_network_post_init+0x52>
 8004c2e:	2001      	movs	r0, #1
 8004c30:	bd38      	pop	{r3, r4, r5, pc}
 8004c32:	4620      	mov	r0, r4
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
 8004c36:	f104 0010 	add.w	r0, r4, #16
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	2111      	movs	r1, #17
 8004c3e:	f000 fa21 	bl	8005084 <core_set_error>
 8004c42:	4628      	mov	r0, r5
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
 8004c46:	bf00      	nop
 8004c48:	a1c00100 	.word	0xa1c00100
 8004c4c:	e0002000 	.word	0xe0002000
 8004c50:	40023008 	.word	0x40023008
 8004c54:	40023000 	.word	0x40023000
 8004c58:	f407a5c2 	.word	0xf407a5c2
 8004c5c:	b5e8b5cd 	.word	0xb5e8b5cd

08004c60 <ai_platform_network_process>:
 8004c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	b083      	sub	sp, #12
 8004c66:	4604      	mov	r4, r0
 8004c68:	9201      	str	r2, [sp, #4]
 8004c6a:	b120      	cbz	r0, 8004c76 <ai_platform_network_process+0x16>
 8004c6c:	4ba5      	ldr	r3, [pc, #660]	; (8004f04 <ai_platform_network_process+0x2a4>)
 8004c6e:	6802      	ldr	r2, [r0, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	bf18      	it	ne
 8004c74:	2400      	movne	r4, #0
 8004c76:	48a4      	ldr	r0, [pc, #656]	; (8004f08 <ai_platform_network_process+0x2a8>)
 8004c78:	4ba4      	ldr	r3, [pc, #656]	; (8004f0c <ai_platform_network_process+0x2ac>)
 8004c7a:	6802      	ldr	r2, [r0, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	6002      	str	r2, [r0, #0]
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	2a00      	cmp	r2, #0
 8004c8a:	d1fc      	bne.n	8004c86 <ai_platform_network_process+0x26>
 8004c8c:	4ba0      	ldr	r3, [pc, #640]	; (8004f10 <ai_platform_network_process+0x2b0>)
 8004c8e:	4aa1      	ldr	r2, [pc, #644]	; (8004f14 <ai_platform_network_process+0x2b4>)
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4ba0      	ldr	r3, [pc, #640]	; (8004f18 <ai_platform_network_process+0x2b8>)
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d000      	beq.n	8004c9c <ai_platform_network_process+0x3c>
 8004c9a:	e7fe      	b.n	8004c9a <ai_platform_network_process+0x3a>
 8004c9c:	2c00      	cmp	r4, #0
 8004c9e:	d066      	beq.n	8004d6e <ai_platform_network_process+0x10e>
 8004ca0:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8004ca4:	b107      	cbz	r7, 8004ca8 <ai_platform_network_process+0x48>
 8004ca6:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8004ca8:	68e3      	ldr	r3, [r4, #12]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2600      	movs	r6, #0
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	6166      	str	r6, [r4, #20]
 8004cb4:	f040 80fe 	bne.w	8004eb4 <ai_platform_network_process+0x254>
 8004cb8:	2900      	cmp	r1, #0
 8004cba:	d07f      	beq.n	8004dbc <ai_platform_network_process+0x15c>
 8004cbc:	2f00      	cmp	r7, #0
 8004cbe:	d07d      	beq.n	8004dbc <ai_platform_network_process+0x15c>
 8004cc0:	883b      	ldrh	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d07a      	beq.n	8004dbc <ai_platform_network_process+0x15c>
 8004cc6:	460d      	mov	r5, r1
 8004cc8:	46a0      	mov	r8, r4
 8004cca:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8004cce:	429e      	cmp	r6, r3
 8004cd0:	d27d      	bcs.n	8004dce <ai_platform_network_process+0x16e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d07a      	beq.n	8004dce <ai_platform_network_process+0x16e>
 8004cd8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8004cdc:	2c00      	cmp	r4, #0
 8004cde:	d076      	beq.n	8004dce <ai_platform_network_process+0x16e>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8004ce8:	d067      	beq.n	8004dba <ai_platform_network_process+0x15a>
 8004cea:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8004cee:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8004cf2:	69a0      	ldr	r0, [r4, #24]
 8004cf4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004cf8:	6841      	ldr	r1, [r0, #4]
 8004cfa:	fb0b f30e 	mul.w	r3, fp, lr
 8004cfe:	fb0c f303 	mul.w	r3, ip, r3
 8004d02:	4299      	cmp	r1, r3
 8004d04:	d350      	bcc.n	8004da8 <ai_platform_network_process+0x148>
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	455a      	cmp	r2, fp
 8004d0c:	d14c      	bne.n	8004da8 <ai_platform_network_process+0x148>
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	4572      	cmp	r2, lr
 8004d12:	d149      	bne.n	8004da8 <ai_platform_network_process+0x148>
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	459c      	cmp	ip, r3
 8004d18:	d146      	bne.n	8004da8 <ai_platform_network_process+0x148>
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	f000 ff8a 	bl	8005c34 <ai_array_get_byte_size>
 8004d20:	68e2      	ldr	r2, [r4, #12]
 8004d22:	6963      	ldr	r3, [r4, #20]
 8004d24:	68d2      	ldr	r2, [r2, #12]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	fb03 f302 	mul.w	r3, r3, r2
 8004d2c:	4298      	cmp	r0, r3
 8004d2e:	d33b      	bcc.n	8004da8 <ai_platform_network_process+0x148>
 8004d30:	69a3      	ldr	r3, [r4, #24]
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	f000 ff32 	bl	8005b9c <ai_array_to_buffer_fmt>
 8004d38:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004d3c:	4043      	eors	r3, r0
 8004d3e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004d42:	d128      	bne.n	8004d96 <ai_platform_network_process+0x136>
 8004d44:	68eb      	ldr	r3, [r5, #12]
 8004d46:	b1f3      	cbz	r3, 8004d86 <ai_platform_network_process+0x126>
 8004d48:	f8b5 b000 	ldrh.w	fp, [r5]
 8004d4c:	f1bb 0f00 	cmp.w	fp, #0
 8004d50:	d012      	beq.n	8004d78 <ai_platform_network_process+0x118>
 8004d52:	4623      	mov	r3, r4
 8004d54:	f105 020c 	add.w	r2, r5, #12
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4650      	mov	r0, sl
 8004d5c:	f7ff fc00 	bl	8004560 <_platform_network_state_setup.isra.1>
 8004d60:	45d9      	cmp	r9, fp
 8004d62:	883b      	ldrh	r3, [r7, #0]
 8004d64:	bf38      	it	cc
 8004d66:	46d9      	movcc	r9, fp
 8004d68:	3601      	adds	r6, #1
 8004d6a:	3518      	adds	r5, #24
 8004d6c:	e7af      	b.n	8004cce <ai_platform_network_process+0x6e>
 8004d6e:	46a3      	mov	fp, r4
 8004d70:	4658      	mov	r0, fp
 8004d72:	b003      	add	sp, #12
 8004d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d78:	f108 0010 	add.w	r0, r8, #16
 8004d7c:	2221      	movs	r2, #33	; 0x21
 8004d7e:	2112      	movs	r1, #18
 8004d80:	f000 f980 	bl	8005084 <core_set_error>
 8004d84:	e7f4      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004d86:	f108 0010 	add.w	r0, r8, #16
 8004d8a:	2217      	movs	r2, #23
 8004d8c:	2112      	movs	r1, #18
 8004d8e:	469b      	mov	fp, r3
 8004d90:	f000 f978 	bl	8005084 <core_set_error>
 8004d94:	e7ec      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004d96:	f108 0010 	add.w	r0, r8, #16
 8004d9a:	2219      	movs	r2, #25
 8004d9c:	2112      	movs	r1, #18
 8004d9e:	f000 f971 	bl	8005084 <core_set_error>
 8004da2:	f04f 0b00 	mov.w	fp, #0
 8004da6:	e7e3      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004da8:	f108 0010 	add.w	r0, r8, #16
 8004dac:	2218      	movs	r2, #24
 8004dae:	2112      	movs	r1, #18
 8004db0:	f000 f968 	bl	8005084 <core_set_error>
 8004db4:	f04f 0b00 	mov.w	fp, #0
 8004db8:	e7da      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004dba:	4644      	mov	r4, r8
 8004dbc:	f104 0010 	add.w	r0, r4, #16
 8004dc0:	2217      	movs	r2, #23
 8004dc2:	2112      	movs	r1, #18
 8004dc4:	f000 f95e 	bl	8005084 <core_set_error>
 8004dc8:	f04f 0b00 	mov.w	fp, #0
 8004dcc:	e7d0      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004dce:	9a01      	ldr	r2, [sp, #4]
 8004dd0:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8004dd4:	4644      	mov	r4, r8
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	f000 80a2 	beq.w	8004f20 <ai_platform_network_process+0x2c0>
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	f240 8140 	bls.w	8005062 <ai_platform_network_process+0x402>
 8004de2:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8004de6:	f118 0f0c 	cmn.w	r8, #12
 8004dea:	f000 813a 	beq.w	8005062 <ai_platform_network_process+0x402>
 8004dee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8135 	beq.w	8005062 <ai_platform_network_process+0x402>
 8004df8:	9d01      	ldr	r5, [sp, #4]
 8004dfa:	2700      	movs	r7, #0
 8004dfc:	3504      	adds	r5, #4
 8004dfe:	429f      	cmp	r7, r3
 8004e00:	f080 808c 	bcs.w	8004f1c <ai_platform_network_process+0x2bc>
 8004e04:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8087 	beq.w	8004f1c <ai_platform_network_process+0x2bc>
 8004e0e:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8004e12:	2e00      	cmp	r6, #0
 8004e14:	f000 8082 	beq.w	8004f1c <ai_platform_network_process+0x2bc>
 8004e18:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8004e22:	d067      	beq.n	8004ef4 <ai_platform_network_process+0x294>
 8004e24:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8004e28:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8004e2c:	69b0      	ldr	r0, [r6, #24]
 8004e2e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004e32:	6841      	ldr	r1, [r0, #4]
 8004e34:	fb0b f30e 	mul.w	r3, fp, lr
 8004e38:	fb0c f303 	mul.w	r3, ip, r3
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	f0c0 8110 	bcc.w	8005062 <ai_platform_network_process+0x402>
 8004e42:	68f3      	ldr	r3, [r6, #12]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	455a      	cmp	r2, fp
 8004e48:	f040 810b 	bne.w	8005062 <ai_platform_network_process+0x402>
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	4572      	cmp	r2, lr
 8004e50:	f040 8107 	bne.w	8005062 <ai_platform_network_process+0x402>
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	459c      	cmp	ip, r3
 8004e58:	f040 8103 	bne.w	8005062 <ai_platform_network_process+0x402>
 8004e5c:	6800      	ldr	r0, [r0, #0]
 8004e5e:	f000 fee9 	bl	8005c34 <ai_array_get_byte_size>
 8004e62:	68f2      	ldr	r2, [r6, #12]
 8004e64:	6973      	ldr	r3, [r6, #20]
 8004e66:	68d2      	ldr	r2, [r2, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	fb03 f302 	mul.w	r3, r3, r2
 8004e6e:	4298      	cmp	r0, r3
 8004e70:	f0c0 80f7 	bcc.w	8005062 <ai_platform_network_process+0x402>
 8004e74:	69b3      	ldr	r3, [r6, #24]
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	f000 fe90 	bl	8005b9c <ai_array_to_buffer_fmt>
 8004e7c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004e80:	4043      	eors	r3, r0
 8004e82:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004e86:	d12c      	bne.n	8004ee2 <ai_platform_network_process+0x282>
 8004e88:	68eb      	ldr	r3, [r5, #12]
 8004e8a:	b313      	cbz	r3, 8004ed2 <ai_platform_network_process+0x272>
 8004e8c:	f8b5 b000 	ldrh.w	fp, [r5]
 8004e90:	f1bb 0f00 	cmp.w	fp, #0
 8004e94:	d016      	beq.n	8004ec4 <ai_platform_network_process+0x264>
 8004e96:	4633      	mov	r3, r6
 8004e98:	f105 020c 	add.w	r2, r5, #12
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f7ff fb5e 	bl	8004560 <_platform_network_state_setup.isra.1>
 8004ea4:	45d9      	cmp	r9, fp
 8004ea6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004eaa:	bf38      	it	cc
 8004eac:	46d9      	movcc	r9, fp
 8004eae:	3701      	adds	r7, #1
 8004eb0:	3518      	adds	r5, #24
 8004eb2:	e7a4      	b.n	8004dfe <ai_platform_network_process+0x19e>
 8004eb4:	f104 0010 	add.w	r0, r4, #16
 8004eb8:	2230      	movs	r2, #48	; 0x30
 8004eba:	2111      	movs	r1, #17
 8004ebc:	f000 f8e2 	bl	8005084 <core_set_error>
 8004ec0:	46b3      	mov	fp, r6
 8004ec2:	e755      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004ec4:	f104 0010 	add.w	r0, r4, #16
 8004ec8:	2221      	movs	r2, #33	; 0x21
 8004eca:	2113      	movs	r1, #19
 8004ecc:	f000 f8da 	bl	8005084 <core_set_error>
 8004ed0:	e74e      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004ed2:	f104 0010 	add.w	r0, r4, #16
 8004ed6:	2217      	movs	r2, #23
 8004ed8:	2113      	movs	r1, #19
 8004eda:	469b      	mov	fp, r3
 8004edc:	f000 f8d2 	bl	8005084 <core_set_error>
 8004ee0:	e746      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004ee2:	f104 0010 	add.w	r0, r4, #16
 8004ee6:	2219      	movs	r2, #25
 8004ee8:	2113      	movs	r1, #19
 8004eea:	f000 f8cb 	bl	8005084 <core_set_error>
 8004eee:	f04f 0b00 	mov.w	fp, #0
 8004ef2:	e73d      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004ef4:	f104 0010 	add.w	r0, r4, #16
 8004ef8:	2217      	movs	r2, #23
 8004efa:	2113      	movs	r1, #19
 8004efc:	f000 f8c2 	bl	8005084 <core_set_error>
 8004f00:	46d3      	mov	fp, sl
 8004f02:	e735      	b.n	8004d70 <ai_platform_network_process+0x110>
 8004f04:	a1c00100 	.word	0xa1c00100
 8004f08:	e0002000 	.word	0xe0002000
 8004f0c:	40023008 	.word	0x40023008
 8004f10:	40023000 	.word	0x40023000
 8004f14:	f407a5c2 	.word	0xf407a5c2
 8004f18:	b5e8b5cd 	.word	0xb5e8b5cd
 8004f1c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8004f20:	f8a4 9014 	strh.w	r9, [r4, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8099 	beq.w	800505c <ai_platform_network_process+0x3fc>
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004f2e:	f240 8093 	bls.w	8005058 <ai_platform_network_process+0x3f8>
 8004f32:	f105 070c 	add.w	r7, r5, #12
 8004f36:	8ae0      	ldrh	r0, [r4, #22]
 8004f38:	8aa3      	ldrh	r3, [r4, #20]
 8004f3a:	4283      	cmp	r3, r0
 8004f3c:	d977      	bls.n	800502e <ai_platform_network_process+0x3ce>
 8004f3e:	46a3      	mov	fp, r4
 8004f40:	2d00      	cmp	r5, #0
 8004f42:	d032      	beq.n	8004faa <ai_platform_network_process+0x34a>
 8004f44:	882b      	ldrh	r3, [r5, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d02f      	beq.n	8004faa <ai_platform_network_process+0x34a>
 8004f4a:	686b      	ldr	r3, [r5, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02c      	beq.n	8004faa <ai_platform_network_process+0x34a>
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f04f 0800 	mov.w	r8, #0
 8004f56:	b343      	cbz	r3, 8004faa <ai_platform_network_process+0x34a>
 8004f58:	68a9      	ldr	r1, [r5, #8]
 8004f5a:	699a      	ldr	r2, [r3, #24]
 8004f5c:	f8d1 a000 	ldr.w	sl, [r1]
 8004f60:	6814      	ldr	r4, [r2, #0]
 8004f62:	6890      	ldr	r0, [r2, #8]
 8004f64:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004f68:	eb0a 0609 	add.w	r6, sl, r9
 8004f6c:	00a4      	lsls	r4, r4, #2
 8004f6e:	6871      	ldr	r1, [r6, #4]
 8004f70:	d45f      	bmi.n	8005032 <ai_platform_network_process+0x3d2>
 8004f72:	68d4      	ldr	r4, [r2, #12]
 8004f74:	1b00      	subs	r0, r0, r4
 8004f76:	4401      	add	r1, r0
 8004f78:	6091      	str	r1, [r2, #8]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	6872      	ldr	r2, [r6, #4]
 8004f7e:	60da      	str	r2, [r3, #12]
 8004f80:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004f84:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004f88:	440b      	add	r3, r1
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	bf24      	itt	cs
 8004f8e:	68f3      	ldrcs	r3, [r6, #12]
 8004f90:	1ad3      	subcs	r3, r2, r3
 8004f92:	6073      	str	r3, [r6, #4]
 8004f94:	882b      	ldrh	r3, [r5, #0]
 8004f96:	f108 0801 	add.w	r8, r8, #1
 8004f9a:	4598      	cmp	r8, r3
 8004f9c:	d205      	bcs.n	8004faa <ai_platform_network_process+0x34a>
 8004f9e:	686b      	ldr	r3, [r5, #4]
 8004fa0:	b11b      	cbz	r3, 8004faa <ai_platform_network_process+0x34a>
 8004fa2:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1d6      	bne.n	8004f58 <ai_platform_network_process+0x2f8>
 8004faa:	4658      	mov	r0, fp
 8004fac:	f000 fd90 	bl	8005ad0 <ai_layers_forward_all>
 8004fb0:	2f00      	cmp	r7, #0
 8004fb2:	d032      	beq.n	800501a <ai_platform_network_process+0x3ba>
 8004fb4:	883b      	ldrh	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d02f      	beq.n	800501a <ai_platform_network_process+0x3ba>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	b36b      	cbz	r3, 800501a <ai_platform_network_process+0x3ba>
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	b358      	cbz	r0, 800501a <ai_platform_network_process+0x3ba>
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6981      	ldr	r1, [r0, #24]
 8004fca:	f8d3 a000 	ldr.w	sl, [r3]
 8004fce:	680c      	ldr	r4, [r1, #0]
 8004fd0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004fd4:	eb0a 0609 	add.w	r6, sl, r9
 8004fd8:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8004fdc:	00a4      	lsls	r4, r4, #2
 8004fde:	eb0c 0302 	add.w	r3, ip, r2
 8004fe2:	d42a      	bmi.n	800503a <ai_platform_network_process+0x3da>
 8004fe4:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	bf24      	itt	cs
 8004fec:	68f3      	ldrcs	r3, [r6, #12]
 8004fee:	1ad3      	subcs	r3, r2, r3
 8004ff0:	6073      	str	r3, [r6, #4]
 8004ff2:	6981      	ldr	r1, [r0, #24]
 8004ff4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8004ff8:	1b12      	subs	r2, r2, r4
 8004ffa:	4413      	add	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
 8004ffe:	6983      	ldr	r3, [r0, #24]
 8005000:	6872      	ldr	r2, [r6, #4]
 8005002:	60da      	str	r2, [r3, #12]
 8005004:	883b      	ldrh	r3, [r7, #0]
 8005006:	f108 0801 	add.w	r8, r8, #1
 800500a:	4598      	cmp	r8, r3
 800500c:	d205      	bcs.n	800501a <ai_platform_network_process+0x3ba>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	b11b      	cbz	r3, 800501a <ai_platform_network_process+0x3ba>
 8005012:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005016:	2800      	cmp	r0, #0
 8005018:	d1d5      	bne.n	8004fc6 <ai_platform_network_process+0x366>
 800501a:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800501e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005022:	3001      	adds	r0, #1
 8005024:	b280      	uxth	r0, r0
 8005026:	4283      	cmp	r3, r0
 8005028:	f8ab 0016 	strh.w	r0, [fp, #22]
 800502c:	d888      	bhi.n	8004f40 <ai_platform_network_process+0x2e0>
 800502e:	4683      	mov	fp, r0
 8005030:	e69e      	b.n	8004d70 <ai_platform_network_process+0x110>
 8005032:	68b2      	ldr	r2, [r6, #8]
 8005034:	f000 fe62 	bl	8005cfc <memcpy>
 8005038:	e7a2      	b.n	8004f80 <ai_platform_network_process+0x320>
 800503a:	6889      	ldr	r1, [r1, #8]
 800503c:	4660      	mov	r0, ip
 800503e:	f000 fe5d 	bl	8005cfc <memcpy>
 8005042:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005046:	f85a 2009 	ldr.w	r2, [sl, r9]
 800504a:	440b      	add	r3, r1
 800504c:	4293      	cmp	r3, r2
 800504e:	bf24      	itt	cs
 8005050:	68f3      	ldrcs	r3, [r6, #12]
 8005052:	1ad3      	subcs	r3, r2, r3
 8005054:	6073      	str	r3, [r6, #4]
 8005056:	e7d5      	b.n	8005004 <ai_platform_network_process+0x3a4>
 8005058:	2700      	movs	r7, #0
 800505a:	e76c      	b.n	8004f36 <ai_platform_network_process+0x2d6>
 800505c:	461d      	mov	r5, r3
 800505e:	461f      	mov	r7, r3
 8005060:	e769      	b.n	8004f36 <ai_platform_network_process+0x2d6>
 8005062:	f104 0010 	add.w	r0, r4, #16
 8005066:	2218      	movs	r2, #24
 8005068:	2113      	movs	r1, #19
 800506a:	f000 f80b 	bl	8005084 <core_set_error>
 800506e:	f04f 0b00 	mov.w	fp, #0
 8005072:	e67d      	b.n	8004d70 <ai_platform_network_process+0x110>

08005074 <core_init>:
 8005074:	2001      	movs	r0, #1
 8005076:	4770      	bx	lr

08005078 <core_get_error>:
 8005078:	4603      	mov	r3, r0
 800507a:	2200      	movs	r2, #0
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop

08005084 <core_set_error>:
 8005084:	7803      	ldrb	r3, [r0, #0]
 8005086:	b933      	cbnz	r3, 8005096 <core_set_error+0x12>
 8005088:	7001      	strb	r1, [r0, #0]
 800508a:	6803      	ldr	r3, [r0, #0]
 800508c:	f362 231f 	bfi	r3, r2, #8, #24
 8005090:	6003      	str	r3, [r0, #0]
 8005092:	2001      	movs	r0, #1
 8005094:	4770      	bx	lr
 8005096:	2000      	movs	r0, #0
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop

0800509c <ai_dict8_dot_array_f32>:
 800509c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	f8dd c020 	ldr.w	ip, [sp, #32]
 80050a4:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80050a8:	f000 80c0 	beq.w	800522c <ai_dict8_dot_array_f32+0x190>
 80050ac:	f101 0408 	add.w	r4, r1, #8
 80050b0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80050b4:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005234 <ai_dict8_dot_array_f32+0x198>
 80050b8:	eb04 0e09 	add.w	lr, r4, r9
 80050bc:	f103 0520 	add.w	r5, r3, #32
 80050c0:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80050c4:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80050c8:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80050cc:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80050d0:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80050d4:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80050d8:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80050dc:	ed55 3a04 	vldr	s7, [r5, #-16]
 80050e0:	ed55 4a03 	vldr	s9, [r5, #-12]
 80050e4:	ed55 5a02 	vldr	s11, [r5, #-8]
 80050e8:	ed55 6a01 	vldr	s13, [r5, #-4]
 80050ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80050f0:	edd6 7a00 	vldr	s15, [r6]
 80050f4:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80050f8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80050fc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005100:	ed9a 3a00 	vldr	s6, [sl]
 8005104:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8005108:	eee3 7a05 	vfma.f32	s15, s6, s10
 800510c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005110:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005114:	ed97 3a00 	vldr	s6, [r7]
 8005118:	ed96 5a00 	vldr	s10, [r6]
 800511c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8005120:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8005124:	eee3 7a04 	vfma.f32	s15, s6, s8
 8005128:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800512c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005130:	ed9a 3a00 	vldr	s6, [sl]
 8005134:	ed96 4a00 	vldr	s8, [r6]
 8005138:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800513c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8005140:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005144:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005148:	ed97 5a00 	vldr	s10, [r7]
 800514c:	ed96 6a00 	vldr	s12, [r6]
 8005150:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005154:	3408      	adds	r4, #8
 8005156:	45a6      	cmp	lr, r4
 8005158:	f105 0520 	add.w	r5, r5, #32
 800515c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005160:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005164:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800516c:	d1a8      	bne.n	80050c0 <ai_dict8_dot_array_f32+0x24>
 800516e:	4449      	add	r1, r9
 8005170:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005174:	f01c 0c07 	ands.w	ip, ip, #7
 8005178:	d050      	beq.n	800521c <ai_dict8_dot_array_f32+0x180>
 800517a:	780c      	ldrb	r4, [r1, #0]
 800517c:	edd3 6a00 	vldr	s13, [r3]
 8005180:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005184:	edd4 7a00 	vldr	s15, [r4]
 8005188:	f1bc 0f01 	cmp.w	ip, #1
 800518c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005190:	d044      	beq.n	800521c <ai_dict8_dot_array_f32+0x180>
 8005192:	784c      	ldrb	r4, [r1, #1]
 8005194:	edd3 6a01 	vldr	s13, [r3, #4]
 8005198:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800519c:	edd4 7a00 	vldr	s15, [r4]
 80051a0:	f1bc 0f02 	cmp.w	ip, #2
 80051a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80051a8:	d038      	beq.n	800521c <ai_dict8_dot_array_f32+0x180>
 80051aa:	788c      	ldrb	r4, [r1, #2]
 80051ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80051b0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80051b4:	edd4 7a00 	vldr	s15, [r4]
 80051b8:	f1bc 0f03 	cmp.w	ip, #3
 80051bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80051c0:	d02c      	beq.n	800521c <ai_dict8_dot_array_f32+0x180>
 80051c2:	78cc      	ldrb	r4, [r1, #3]
 80051c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80051c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80051cc:	edd4 7a00 	vldr	s15, [r4]
 80051d0:	f1bc 0f04 	cmp.w	ip, #4
 80051d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80051d8:	d020      	beq.n	800521c <ai_dict8_dot_array_f32+0x180>
 80051da:	790c      	ldrb	r4, [r1, #4]
 80051dc:	edd3 6a04 	vldr	s13, [r3, #16]
 80051e0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80051e4:	edd4 7a00 	vldr	s15, [r4]
 80051e8:	f1bc 0f05 	cmp.w	ip, #5
 80051ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80051f0:	d014      	beq.n	800521c <ai_dict8_dot_array_f32+0x180>
 80051f2:	794c      	ldrb	r4, [r1, #5]
 80051f4:	edd3 6a05 	vldr	s13, [r3, #20]
 80051f8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80051fc:	edd4 7a00 	vldr	s15, [r4]
 8005200:	f1bc 0f06 	cmp.w	ip, #6
 8005204:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005208:	d008      	beq.n	800521c <ai_dict8_dot_array_f32+0x180>
 800520a:	7989      	ldrb	r1, [r1, #6]
 800520c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005210:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005214:	edd2 6a00 	vldr	s13, [r2]
 8005218:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800521c:	edd0 7a00 	vldr	s15, [r0]
 8005220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005224:	ed80 7a00 	vstr	s14, [r0]
 8005228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005234 <ai_dict8_dot_array_f32+0x198>
 8005230:	e7a0      	b.n	8005174 <ai_dict8_dot_array_f32+0xd8>
 8005232:	bf00      	nop
 8005234:	00000000 	.word	0x00000000

08005238 <ai_dict4_dot_array_f32>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800523e:	f027 0c01 	bic.w	ip, r7, #1
 8005242:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8005246:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800524a:	f000 80ae 	beq.w	80053aa <ai_dict4_dot_array_f32+0x172>
 800524e:	1d0d      	adds	r5, r1, #4
 8005250:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005254:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80053b0 <ai_dict4_dot_array_f32+0x178>
 8005258:	eb05 0e09 	add.w	lr, r5, r9
 800525c:	f103 0420 	add.w	r4, r3, #32
 8005260:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005264:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8005268:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800526c:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8005270:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005274:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8005278:	ed14 5a04 	vldr	s10, [r4, #-16]
 800527c:	ed54 5a03 	vldr	s11, [r4, #-12]
 8005280:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005284:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005288:	f006 0a0f 	and.w	sl, r6, #15
 800528c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005290:	edda 7a00 	vldr	s15, [sl]
 8005294:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8005298:	0936      	lsrs	r6, r6, #4
 800529a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800529e:	ee67 7a83 	vmul.f32	s15, s15, s6
 80052a2:	ed96 3a00 	vldr	s6, [r6]
 80052a6:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80052aa:	eee3 7a23 	vfma.f32	s15, s6, s7
 80052ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80052b2:	f00b 0b0f 	and.w	fp, fp, #15
 80052b6:	edd6 3a00 	vldr	s7, [r6]
 80052ba:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80052be:	eee3 7a84 	vfma.f32	s15, s7, s8
 80052c2:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80052c6:	3504      	adds	r5, #4
 80052c8:	ed9b 4a00 	vldr	s8, [fp]
 80052cc:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80052d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80052d4:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80052d8:	f00a 0a0f 	and.w	sl, sl, #15
 80052dc:	eddb 4a00 	vldr	s9, [fp]
 80052e0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80052e4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80052e8:	45ae      	cmp	lr, r5
 80052ea:	ed9a 5a00 	vldr	s10, [sl]
 80052ee:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80052f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80052f6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80052fa:	f006 060f 	and.w	r6, r6, #15
 80052fe:	edda 5a00 	vldr	s11, [sl]
 8005302:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005306:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800530a:	f104 0420 	add.w	r4, r4, #32
 800530e:	ed96 6a00 	vldr	s12, [r6]
 8005312:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800531a:	d1a1      	bne.n	8005260 <ai_dict4_dot_array_f32+0x28>
 800531c:	4449      	add	r1, r9
 800531e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005322:	459c      	cmp	ip, r3
 8005324:	d92d      	bls.n	8005382 <ai_dict4_dot_array_f32+0x14a>
 8005326:	f10c 0c07 	add.w	ip, ip, #7
 800532a:	f103 0508 	add.w	r5, r3, #8
 800532e:	ebac 0c05 	sub.w	ip, ip, r5
 8005332:	f02c 0407 	bic.w	r4, ip, #7
 8005336:	f103 0810 	add.w	r8, r3, #16
 800533a:	44a0      	add	r8, r4
 800533c:	f101 3eff 	add.w	lr, r1, #4294967295
 8005340:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005344:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005348:	ed55 6a02 	vldr	s13, [r5, #-8]
 800534c:	f004 060f 	and.w	r6, r4, #15
 8005350:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005354:	0924      	lsrs	r4, r4, #4
 8005356:	edd6 7a00 	vldr	s15, [r6]
 800535a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800535e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005362:	ed94 6a00 	vldr	s12, [r4]
 8005366:	eee6 7a26 	vfma.f32	s15, s12, s13
 800536a:	3508      	adds	r5, #8
 800536c:	45a8      	cmp	r8, r5
 800536e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005372:	d1e5      	bne.n	8005340 <ai_dict4_dot_array_f32+0x108>
 8005374:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005378:	f10c 0c01 	add.w	ip, ip, #1
 800537c:	4461      	add	r1, ip
 800537e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005382:	07fc      	lsls	r4, r7, #31
 8005384:	d509      	bpl.n	800539a <ai_dict4_dot_array_f32+0x162>
 8005386:	7809      	ldrb	r1, [r1, #0]
 8005388:	edd3 7a00 	vldr	s15, [r3]
 800538c:	090b      	lsrs	r3, r1, #4
 800538e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005392:	edd2 6a00 	vldr	s13, [r2]
 8005396:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800539a:	edd0 7a00 	vldr	s15, [r0]
 800539e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053a2:	ed80 7a00 	vstr	s14, [r0]
 80053a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053aa:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80053b0 <ai_dict4_dot_array_f32+0x178>
 80053ae:	e7b8      	b.n	8005322 <ai_dict4_dot_array_f32+0xea>
 80053b0:	00000000 	.word	0x00000000

080053b4 <forward_dense>:
 80053b4:	6982      	ldr	r2, [r0, #24]
 80053b6:	8813      	ldrh	r3, [r2, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 81ca 	beq.w	8005752 <forward_dense+0x39e>
 80053be:	6852      	ldr	r2, [r2, #4]
 80053c0:	6850      	ldr	r0, [r2, #4]
 80053c2:	b100      	cbz	r0, 80053c6 <forward_dense+0x12>
 80053c4:	6800      	ldr	r0, [r0, #0]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	f240 81c0 	bls.w	800574c <forward_dense+0x398>
 80053cc:	6911      	ldr	r1, [r2, #16]
 80053ce:	b101      	cbz	r1, 80053d2 <forward_dense+0x1e>
 80053d0:	6809      	ldr	r1, [r1, #0]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	f000 81bf 	beq.w	8005756 <forward_dense+0x3a2>
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	ed2d 8b10 	vpush	{d8-d15}
 80053e0:	69d3      	ldr	r3, [r2, #28]
 80053e2:	b091      	sub	sp, #68	; 0x44
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 820b 	beq.w	8005800 <forward_dense+0x44c>
 80053ea:	681c      	ldr	r4, [r3, #0]
 80053ec:	9408      	str	r4, [sp, #32]
 80053ee:	f112 0418 	adds.w	r4, r2, #24
 80053f2:	f000 81df 	beq.w	80057b4 <forward_dense+0x400>
 80053f6:	8b12      	ldrh	r2, [r2, #24]
 80053f8:	2a01      	cmp	r2, #1
 80053fa:	f240 81fe 	bls.w	80057fa <forward_dense+0x446>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 81da 	beq.w	80057b8 <forward_dense+0x404>
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	9306      	str	r3, [sp, #24]
 8005408:	9b08      	ldr	r3, [sp, #32]
 800540a:	68cc      	ldr	r4, [r1, #12]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	68c5      	ldr	r5, [r0, #12]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005416:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800541a:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 800541e:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8005422:	fa4c f505 	asr.w	r5, ip, r5
 8005426:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800542a:	950b      	str	r5, [sp, #44]	; 0x2c
 800542c:	2a04      	cmp	r2, #4
 800542e:	fb07 f506 	mul.w	r5, r7, r6
 8005432:	6864      	ldr	r4, [r4, #4]
 8005434:	9507      	str	r5, [sp, #28]
 8005436:	f000 81dd 	beq.w	80057f4 <forward_dense+0x440>
 800543a:	2a08      	cmp	r2, #8
 800543c:	f000 81da 	beq.w	80057f4 <forward_dense+0x440>
 8005440:	f04f 0a00 	mov.w	sl, #0
 8005444:	698a      	ldr	r2, [r1, #24]
 8005446:	6981      	ldr	r1, [r0, #24]
 8005448:	6890      	ldr	r0, [r2, #8]
 800544a:	9a08      	ldr	r2, [sp, #32]
 800544c:	9004      	str	r0, [sp, #16]
 800544e:	6952      	ldr	r2, [r2, #20]
 8005450:	688f      	ldr	r7, [r1, #8]
 8005452:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005456:	00a2      	lsls	r2, r4, #2
 8005458:	9209      	str	r2, [sp, #36]	; 0x24
 800545a:	1886      	adds	r6, r0, r2
 800545c:	9a07      	ldr	r2, [sp, #28]
 800545e:	2a00      	cmp	r2, #0
 8005460:	f000 81c3 	beq.w	80057ea <forward_dense+0x436>
 8005464:	f1a8 0210 	sub.w	r2, r8, #16
 8005468:	0912      	lsrs	r2, r2, #4
 800546a:	3201      	adds	r2, #1
 800546c:	0192      	lsls	r2, r2, #6
 800546e:	920c      	str	r2, [sp, #48]	; 0x30
 8005470:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8005474:	920a      	str	r2, [sp, #40]	; 0x28
 8005476:	689d      	ldr	r5, [r3, #8]
 8005478:	9b06      	ldr	r3, [sp, #24]
 800547a:	eddf aad0 	vldr	s21, [pc, #832]	; 80057bc <forward_dense+0x408>
 800547e:	2200      	movs	r2, #0
 8005480:	9205      	str	r2, [sp, #20]
 8005482:	f008 020f 	and.w	r2, r8, #15
 8005486:	920d      	str	r2, [sp, #52]	; 0x34
 8005488:	2b00      	cmp	r3, #0
 800548a:	d043      	beq.n	8005514 <forward_dense+0x160>
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	689c      	ldr	r4, [r3, #8]
 8005490:	9b04      	ldr	r3, [sp, #16]
 8005492:	f1ba 0f00 	cmp.w	sl, #0
 8005496:	d042      	beq.n	800551e <forward_dense+0x16a>
 8005498:	42b3      	cmp	r3, r6
 800549a:	d22a      	bcs.n	80054f2 <forward_dense+0x13e>
 800549c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800549e:	469b      	mov	fp, r3
 80054a0:	ab0f      	add	r3, sp, #60	; 0x3c
 80054a2:	9303      	str	r3, [sp, #12]
 80054a4:	2a04      	cmp	r2, #4
 80054a6:	4633      	mov	r3, r6
 80054a8:	4646      	mov	r6, r8
 80054aa:	4698      	mov	r8, r3
 80054ac:	f000 8156 	beq.w	800575c <forward_dense+0x3a8>
 80054b0:	2c00      	cmp	r4, #0
 80054b2:	f000 8185 	beq.w	80057c0 <forward_dense+0x40c>
 80054b6:	f8d4 c000 	ldr.w	ip, [r4]
 80054ba:	9803      	ldr	r0, [sp, #12]
 80054bc:	9600      	str	r6, [sp, #0]
 80054be:	463b      	mov	r3, r7
 80054c0:	4629      	mov	r1, r5
 80054c2:	4652      	mov	r2, sl
 80054c4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80054c8:	f7ff fde8 	bl	800509c <ai_dict8_dot_array_f32>
 80054cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054ce:	f84b 3b04 	str.w	r3, [fp], #4
 80054d2:	45c3      	cmp	fp, r8
 80054d4:	f104 0404 	add.w	r4, r4, #4
 80054d8:	444d      	add	r5, r9
 80054da:	d3e9      	bcc.n	80054b0 <forward_dense+0xfc>
 80054dc:	4643      	mov	r3, r8
 80054de:	46b0      	mov	r8, r6
 80054e0:	461e      	mov	r6, r3
 80054e2:	9a04      	ldr	r2, [sp, #16]
 80054e4:	43d3      	mvns	r3, r2
 80054e6:	4433      	add	r3, r6
 80054e8:	f023 0303 	bic.w	r3, r3, #3
 80054ec:	3304      	adds	r3, #4
 80054ee:	18d3      	adds	r3, r2, r3
 80054f0:	9304      	str	r3, [sp, #16]
 80054f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054f4:	9b05      	ldr	r3, [sp, #20]
 80054f6:	4417      	add	r7, r2
 80054f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054fa:	4416      	add	r6, r2
 80054fc:	9a07      	ldr	r2, [sp, #28]
 80054fe:	3301      	adds	r3, #1
 8005500:	4293      	cmp	r3, r2
 8005502:	9305      	str	r3, [sp, #20]
 8005504:	f000 8171 	beq.w	80057ea <forward_dense+0x436>
 8005508:	9b08      	ldr	r3, [sp, #32]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	689d      	ldr	r5, [r3, #8]
 800550e:	9b06      	ldr	r3, [sp, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1bb      	bne.n	800548c <forward_dense+0xd8>
 8005514:	461c      	mov	r4, r3
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	f1ba 0f00 	cmp.w	sl, #0
 800551c:	d1bc      	bne.n	8005498 <forward_dense+0xe4>
 800551e:	42b3      	cmp	r3, r6
 8005520:	d2e7      	bcs.n	80054f2 <forward_dense+0x13e>
 8005522:	4618      	mov	r0, r3
 8005524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005526:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800552a:	eb07 0c03 	add.w	ip, r7, r3
 800552e:	469e      	mov	lr, r3
 8005530:	2c00      	cmp	r4, #0
 8005532:	f000 80ff 	beq.w	8005734 <forward_dense+0x380>
 8005536:	f1b8 0f0f 	cmp.w	r8, #15
 800553a:	edd4 fa00 	vldr	s31, [r4]
 800553e:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80057bc <forward_dense+0x408>
 8005542:	f104 0404 	add.w	r4, r4, #4
 8005546:	f240 80fd 	bls.w	8005744 <forward_dense+0x390>
 800554a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800554e:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005552:	4641      	mov	r1, r8
 8005554:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8005558:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800555c:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8005560:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8005564:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8005568:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800556c:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8005570:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8005574:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8005578:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800557c:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8005580:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8005584:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8005588:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800558c:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8005590:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8005594:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8005598:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800559c:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80055a0:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 80055a4:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 80055a8:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 80055ac:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 80055b0:	ed13 4a04 	vldr	s8, [r3, #-16]
 80055b4:	ed52 4a04 	vldr	s9, [r2, #-16]
 80055b8:	ed12 5a03 	vldr	s10, [r2, #-12]
 80055bc:	ed53 5a03 	vldr	s11, [r3, #-12]
 80055c0:	ed12 6a02 	vldr	s12, [r2, #-8]
 80055c4:	ed13 7a02 	vldr	s14, [r3, #-8]
 80055c8:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80055cc:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80055d0:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80055d4:	3910      	subs	r1, #16
 80055d6:	290f      	cmp	r1, #15
 80055d8:	ed53 ea01 	vldr	s29, [r3, #-4]
 80055dc:	ed12 ea01 	vldr	s28, [r2, #-4]
 80055e0:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80055e4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80055e8:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80055ec:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80055f0:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80055f4:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80055f8:	eee9 7a89 	vfma.f32	s15, s19, s18
 80055fc:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005600:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005604:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005608:	eee2 7a22 	vfma.f32	s15, s4, s5
 800560c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005610:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005614:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005618:	eee6 7a07 	vfma.f32	s15, s12, s14
 800561c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005620:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005624:	d896      	bhi.n	8005554 <forward_dense+0x1a0>
 8005626:	eb05 010e 	add.w	r1, r5, lr
 800562a:	465b      	mov	r3, fp
 800562c:	4662      	mov	r2, ip
 800562e:	2b00      	cmp	r3, #0
 8005630:	d075      	beq.n	800571e <forward_dense+0x36a>
 8005632:	ed91 7a00 	vldr	s14, [r1]
 8005636:	edd2 7a00 	vldr	s15, [r2]
 800563a:	2b01      	cmp	r3, #1
 800563c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005640:	d06d      	beq.n	800571e <forward_dense+0x36a>
 8005642:	ed91 7a01 	vldr	s14, [r1, #4]
 8005646:	edd2 7a01 	vldr	s15, [r2, #4]
 800564a:	2b02      	cmp	r3, #2
 800564c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005650:	d065      	beq.n	800571e <forward_dense+0x36a>
 8005652:	ed91 7a02 	vldr	s14, [r1, #8]
 8005656:	edd2 7a02 	vldr	s15, [r2, #8]
 800565a:	2b03      	cmp	r3, #3
 800565c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005660:	d05d      	beq.n	800571e <forward_dense+0x36a>
 8005662:	ed91 7a03 	vldr	s14, [r1, #12]
 8005666:	edd2 7a03 	vldr	s15, [r2, #12]
 800566a:	2b04      	cmp	r3, #4
 800566c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005670:	d055      	beq.n	800571e <forward_dense+0x36a>
 8005672:	ed91 7a04 	vldr	s14, [r1, #16]
 8005676:	edd2 7a04 	vldr	s15, [r2, #16]
 800567a:	2b05      	cmp	r3, #5
 800567c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005680:	d04d      	beq.n	800571e <forward_dense+0x36a>
 8005682:	ed91 7a05 	vldr	s14, [r1, #20]
 8005686:	edd2 7a05 	vldr	s15, [r2, #20]
 800568a:	2b06      	cmp	r3, #6
 800568c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005690:	d045      	beq.n	800571e <forward_dense+0x36a>
 8005692:	ed91 7a06 	vldr	s14, [r1, #24]
 8005696:	edd2 7a06 	vldr	s15, [r2, #24]
 800569a:	2b07      	cmp	r3, #7
 800569c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80056a0:	d03d      	beq.n	800571e <forward_dense+0x36a>
 80056a2:	ed91 7a07 	vldr	s14, [r1, #28]
 80056a6:	edd2 7a07 	vldr	s15, [r2, #28]
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80056b0:	d035      	beq.n	800571e <forward_dense+0x36a>
 80056b2:	ed91 7a08 	vldr	s14, [r1, #32]
 80056b6:	edd2 7a08 	vldr	s15, [r2, #32]
 80056ba:	2b09      	cmp	r3, #9
 80056bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80056c0:	d02d      	beq.n	800571e <forward_dense+0x36a>
 80056c2:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80056c6:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80056ca:	2b0a      	cmp	r3, #10
 80056cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80056d0:	d025      	beq.n	800571e <forward_dense+0x36a>
 80056d2:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80056d6:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80056da:	2b0b      	cmp	r3, #11
 80056dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80056e0:	d01d      	beq.n	800571e <forward_dense+0x36a>
 80056e2:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80056e6:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80056f0:	d015      	beq.n	800571e <forward_dense+0x36a>
 80056f2:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80056f6:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80056fa:	2b0d      	cmp	r3, #13
 80056fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005700:	d00d      	beq.n	800571e <forward_dense+0x36a>
 8005702:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8005706:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800570a:	2b0e      	cmp	r3, #14
 800570c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005710:	d005      	beq.n	800571e <forward_dense+0x36a>
 8005712:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8005716:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800571a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800571e:	444d      	add	r5, r9
 8005720:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8005724:	ece0 6a01 	vstmia	r0!, {s13}
 8005728:	42b0      	cmp	r0, r6
 800572a:	f4bf aeda 	bcs.w	80054e2 <forward_dense+0x12e>
 800572e:	2c00      	cmp	r4, #0
 8005730:	f47f af01 	bne.w	8005536 <forward_dense+0x182>
 8005734:	f1b8 0f0f 	cmp.w	r8, #15
 8005738:	eef0 fa6a 	vmov.f32	s31, s21
 800573c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80057bc <forward_dense+0x408>
 8005740:	f63f af03 	bhi.w	800554a <forward_dense+0x196>
 8005744:	4643      	mov	r3, r8
 8005746:	4629      	mov	r1, r5
 8005748:	463a      	mov	r2, r7
 800574a:	e770      	b.n	800562e <forward_dense+0x27a>
 800574c:	2300      	movs	r3, #0
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	deff      	udf	#255	; 0xff
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	deff      	udf	#255	; 0xff
 8005756:	2300      	movs	r3, #0
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	deff      	udf	#255	; 0xff
 800575c:	b1ac      	cbz	r4, 800578a <forward_dense+0x3d6>
 800575e:	f8d4 c000 	ldr.w	ip, [r4]
 8005762:	9803      	ldr	r0, [sp, #12]
 8005764:	9600      	str	r6, [sp, #0]
 8005766:	463b      	mov	r3, r7
 8005768:	4629      	mov	r1, r5
 800576a:	4652      	mov	r2, sl
 800576c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005770:	f7ff fd62 	bl	8005238 <ai_dict4_dot_array_f32>
 8005774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005776:	f84b 3b04 	str.w	r3, [fp], #4
 800577a:	45c3      	cmp	fp, r8
 800577c:	f104 0404 	add.w	r4, r4, #4
 8005780:	444d      	add	r5, r9
 8005782:	f4bf aeab 	bcs.w	80054dc <forward_dense+0x128>
 8005786:	2c00      	cmp	r4, #0
 8005788:	d1e9      	bne.n	800575e <forward_dense+0x3aa>
 800578a:	4634      	mov	r4, r6
 800578c:	4646      	mov	r6, r8
 800578e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005792:	9400      	str	r4, [sp, #0]
 8005794:	463b      	mov	r3, r7
 8005796:	4629      	mov	r1, r5
 8005798:	4652      	mov	r2, sl
 800579a:	4640      	mov	r0, r8
 800579c:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80057a0:	f7ff fd4a 	bl	8005238 <ai_dict4_dot_array_f32>
 80057a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057a6:	f84b 3b04 	str.w	r3, [fp], #4
 80057aa:	45b3      	cmp	fp, r6
 80057ac:	444d      	add	r5, r9
 80057ae:	d3f0      	bcc.n	8005792 <forward_dense+0x3de>
 80057b0:	46a0      	mov	r8, r4
 80057b2:	e696      	b.n	80054e2 <forward_dense+0x12e>
 80057b4:	9406      	str	r4, [sp, #24]
 80057b6:	e627      	b.n	8005408 <forward_dense+0x54>
 80057b8:	9306      	str	r3, [sp, #24]
 80057ba:	e625      	b.n	8005408 <forward_dense+0x54>
 80057bc:	00000000 	.word	0x00000000
 80057c0:	4634      	mov	r4, r6
 80057c2:	4646      	mov	r6, r8
 80057c4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80057c8:	9400      	str	r4, [sp, #0]
 80057ca:	463b      	mov	r3, r7
 80057cc:	4629      	mov	r1, r5
 80057ce:	4652      	mov	r2, sl
 80057d0:	4640      	mov	r0, r8
 80057d2:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80057d6:	f7ff fc61 	bl	800509c <ai_dict8_dot_array_f32>
 80057da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057dc:	f84b 3b04 	str.w	r3, [fp], #4
 80057e0:	45b3      	cmp	fp, r6
 80057e2:	444d      	add	r5, r9
 80057e4:	d3f0      	bcc.n	80057c8 <forward_dense+0x414>
 80057e6:	46a0      	mov	r8, r4
 80057e8:	e67b      	b.n	80054e2 <forward_dense+0x12e>
 80057ea:	b011      	add	sp, #68	; 0x44
 80057ec:	ecbd 8b10 	vpop	{d8-d15}
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80057f8:	e624      	b.n	8005444 <forward_dense+0x90>
 80057fa:	2300      	movs	r3, #0
 80057fc:	9306      	str	r3, [sp, #24]
 80057fe:	e603      	b.n	8005408 <forward_dense+0x54>
 8005800:	9308      	str	r3, [sp, #32]
 8005802:	e5f4      	b.n	80053ee <forward_dense+0x3a>

08005804 <nl_func_relu_generic_array_f32>:
 8005804:	b430      	push	{r4, r5}
 8005806:	6989      	ldr	r1, [r1, #24]
 8005808:	6980      	ldr	r0, [r0, #24]
 800580a:	edd3 6a02 	vldr	s13, [r3, #8]
 800580e:	688c      	ldr	r4, [r1, #8]
 8005810:	6880      	ldr	r0, [r0, #8]
 8005812:	ed93 7a00 	vldr	s14, [r3]
 8005816:	ed93 6a01 	vldr	s12, [r3, #4]
 800581a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800581e:	3a01      	subs	r2, #1
 8005820:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005824:	0092      	lsls	r2, r2, #2
 8005826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800582a:	4410      	add	r0, r2
 800582c:	4422      	add	r2, r4
 800582e:	d421      	bmi.n	8005874 <nl_func_relu_generic_array_f32+0x70>
 8005830:	4294      	cmp	r4, r2
 8005832:	d83d      	bhi.n	80058b0 <nl_func_relu_generic_array_f32+0xac>
 8005834:	1d13      	adds	r3, r2, #4
 8005836:	1d02      	adds	r2, r0, #4
 8005838:	e010      	b.n	800585c <nl_func_relu_generic_array_f32+0x58>
 800583a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800583e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005842:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005846:	d501      	bpl.n	800584c <nl_func_relu_generic_array_f32+0x48>
 8005848:	ee65 7a86 	vmul.f32	s15, s11, s12
 800584c:	ed62 7a01 	vstmdb	r2!, {s15}
 8005850:	6888      	ldr	r0, [r1, #8]
 8005852:	f1a3 0408 	sub.w	r4, r3, #8
 8005856:	4284      	cmp	r4, r0
 8005858:	462b      	mov	r3, r5
 800585a:	d329      	bcc.n	80058b0 <nl_func_relu_generic_array_f32+0xac>
 800585c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005860:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005868:	f1a3 0504 	sub.w	r5, r3, #4
 800586c:	d4e5      	bmi.n	800583a <nl_func_relu_generic_array_f32+0x36>
 800586e:	eef0 7a66 	vmov.f32	s15, s13
 8005872:	e7eb      	b.n	800584c <nl_func_relu_generic_array_f32+0x48>
 8005874:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587c:	d01a      	beq.n	80058b4 <nl_func_relu_generic_array_f32+0xb0>
 800587e:	4294      	cmp	r4, r2
 8005880:	d816      	bhi.n	80058b0 <nl_func_relu_generic_array_f32+0xac>
 8005882:	1d13      	adds	r3, r2, #4
 8005884:	1d02      	adds	r2, r0, #4
 8005886:	ed53 7a01 	vldr	s15, [r3, #-4]
 800588a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800588e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005892:	f1a3 0408 	sub.w	r4, r3, #8
 8005896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589a:	f1a3 0004 	sub.w	r0, r3, #4
 800589e:	ee66 6a86 	vmul.f32	s13, s13, s12
 80058a2:	4623      	mov	r3, r4
 80058a4:	d51e      	bpl.n	80058e4 <nl_func_relu_generic_array_f32+0xe0>
 80058a6:	ed62 6a01 	vstmdb	r2!, {s13}
 80058aa:	688b      	ldr	r3, [r1, #8]
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d91e      	bls.n	80058ee <nl_func_relu_generic_array_f32+0xea>
 80058b0:	bc30      	pop	{r4, r5}
 80058b2:	4770      	bx	lr
 80058b4:	4294      	cmp	r4, r2
 80058b6:	d8fb      	bhi.n	80058b0 <nl_func_relu_generic_array_f32+0xac>
 80058b8:	1d13      	adds	r3, r2, #4
 80058ba:	2500      	movs	r5, #0
 80058bc:	1d02      	adds	r2, r0, #4
 80058be:	ed53 7a01 	vldr	s15, [r3, #-4]
 80058c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c6:	f1a3 0408 	sub.w	r4, r3, #8
 80058ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ce:	f1a3 0004 	sub.w	r0, r3, #4
 80058d2:	4623      	mov	r3, r4
 80058d4:	db0d      	blt.n	80058f2 <nl_func_relu_generic_array_f32+0xee>
 80058d6:	ed62 7a01 	vstmdb	r2!, {s15}
 80058da:	688b      	ldr	r3, [r1, #8]
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d8e7      	bhi.n	80058b0 <nl_func_relu_generic_array_f32+0xac>
 80058e0:	4603      	mov	r3, r0
 80058e2:	e7ec      	b.n	80058be <nl_func_relu_generic_array_f32+0xba>
 80058e4:	ed62 7a01 	vstmdb	r2!, {s15}
 80058e8:	688c      	ldr	r4, [r1, #8]
 80058ea:	429c      	cmp	r4, r3
 80058ec:	d8e0      	bhi.n	80058b0 <nl_func_relu_generic_array_f32+0xac>
 80058ee:	4603      	mov	r3, r0
 80058f0:	e7c9      	b.n	8005886 <nl_func_relu_generic_array_f32+0x82>
 80058f2:	f842 5d04 	str.w	r5, [r2, #-4]!
 80058f6:	688c      	ldr	r4, [r1, #8]
 80058f8:	429c      	cmp	r4, r3
 80058fa:	d8d9      	bhi.n	80058b0 <nl_func_relu_generic_array_f32+0xac>
 80058fc:	4603      	mov	r3, r0
 80058fe:	e7de      	b.n	80058be <nl_func_relu_generic_array_f32+0xba>

08005900 <forward_relu>:
 8005900:	6982      	ldr	r2, [r0, #24]
 8005902:	8813      	ldrh	r3, [r2, #0]
 8005904:	b333      	cbz	r3, 8005954 <forward_relu+0x54>
 8005906:	6852      	ldr	r2, [r2, #4]
 8005908:	6851      	ldr	r1, [r2, #4]
 800590a:	b101      	cbz	r1, 800590e <forward_relu+0xe>
 800590c:	6809      	ldr	r1, [r1, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d91d      	bls.n	800594e <forward_relu+0x4e>
 8005912:	b4f0      	push	{r4, r5, r6, r7}
 8005914:	6917      	ldr	r7, [r2, #16]
 8005916:	b107      	cbz	r7, 800591a <forward_relu+0x1a>
 8005918:	683f      	ldr	r7, [r7, #0]
 800591a:	688c      	ldr	r4, [r1, #8]
 800591c:	69c3      	ldr	r3, [r0, #28]
 800591e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005922:	2b00      	cmp	r3, #0
 8005924:	d044      	beq.n	80059b0 <forward_relu+0xb0>
 8005926:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800592a:	2d01      	cmp	r5, #1
 800592c:	d014      	beq.n	8005958 <forward_relu+0x58>
 800592e:	2c00      	cmp	r4, #0
 8005930:	d074      	beq.n	8005a1c <forward_relu+0x11c>
 8005932:	68ce      	ldr	r6, [r1, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800593a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800593e:	42a6      	cmp	r6, r4
 8005940:	fb05 f202 	mul.w	r2, r5, r2
 8005944:	d1f9      	bne.n	800593a <forward_relu+0x3a>
 8005946:	4638      	mov	r0, r7
 8005948:	bcf0      	pop	{r4, r5, r6, r7}
 800594a:	f7ff bf5b 	b.w	8005804 <nl_func_relu_generic_array_f32>
 800594e:	2300      	movs	r3, #0
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	deff      	udf	#255	; 0xff
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	deff      	udf	#255	; 0xff
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	6988      	ldr	r0, [r1, #24]
 800595c:	6896      	ldr	r6, [r2, #8]
 800595e:	ed93 7a00 	vldr	s14, [r3]
 8005962:	6882      	ldr	r2, [r0, #8]
 8005964:	b184      	cbz	r4, 8005988 <forward_relu+0x88>
 8005966:	68cf      	ldr	r7, [r1, #12]
 8005968:	462b      	mov	r3, r5
 800596a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800596e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8005972:	42a7      	cmp	r7, r4
 8005974:	fb01 f303 	mul.w	r3, r1, r3
 8005978:	d1f9      	bne.n	800596e <forward_relu+0x6e>
 800597a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800597e:	3b01      	subs	r3, #1
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	18d2      	adds	r2, r2, r3
 8005984:	441e      	add	r6, r3
 8005986:	d23f      	bcs.n	8005a08 <forward_relu+0x108>
 8005988:	1d13      	adds	r3, r2, #4
 800598a:	2500      	movs	r5, #0
 800598c:	1d32      	adds	r2, r6, #4
 800598e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599a:	f1a3 0104 	sub.w	r1, r3, #4
 800599e:	d835      	bhi.n	8005a0c <forward_relu+0x10c>
 80059a0:	ed62 7a01 	vstmdb	r2!, {s15}
 80059a4:	6884      	ldr	r4, [r0, #8]
 80059a6:	3b08      	subs	r3, #8
 80059a8:	429c      	cmp	r4, r3
 80059aa:	d82d      	bhi.n	8005a08 <forward_relu+0x108>
 80059ac:	460b      	mov	r3, r1
 80059ae:	e7ee      	b.n	800598e <forward_relu+0x8e>
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	698d      	ldr	r5, [r1, #24]
 80059b4:	6898      	ldr	r0, [r3, #8]
 80059b6:	68ab      	ldr	r3, [r5, #8]
 80059b8:	b184      	cbz	r4, 80059dc <forward_relu+0xdc>
 80059ba:	68ce      	ldr	r6, [r1, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80059c2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80059c6:	42a6      	cmp	r6, r4
 80059c8:	fb01 f202 	mul.w	r2, r1, r2
 80059cc:	d1f9      	bne.n	80059c2 <forward_relu+0xc2>
 80059ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80059d2:	3a01      	subs	r2, #1
 80059d4:	0092      	lsls	r2, r2, #2
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	4410      	add	r0, r2
 80059da:	d215      	bcs.n	8005a08 <forward_relu+0x108>
 80059dc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005a20 <forward_relu+0x120>
 80059e0:	3304      	adds	r3, #4
 80059e2:	1d01      	adds	r1, r0, #4
 80059e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80059e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f0:	bfb8      	it	lt
 80059f2:	eef0 7a47 	vmovlt.f32	s15, s14
 80059f6:	ed61 7a01 	vstmdb	r1!, {s15}
 80059fa:	68a8      	ldr	r0, [r5, #8]
 80059fc:	f1a3 0208 	sub.w	r2, r3, #8
 8005a00:	4290      	cmp	r0, r2
 8005a02:	f1a3 0304 	sub.w	r3, r3, #4
 8005a06:	d9ed      	bls.n	80059e4 <forward_relu+0xe4>
 8005a08:	bcf0      	pop	{r4, r5, r6, r7}
 8005a0a:	4770      	bx	lr
 8005a0c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005a10:	6884      	ldr	r4, [r0, #8]
 8005a12:	3b08      	subs	r3, #8
 8005a14:	429c      	cmp	r4, r3
 8005a16:	d8f7      	bhi.n	8005a08 <forward_relu+0x108>
 8005a18:	460b      	mov	r3, r1
 8005a1a:	e7b8      	b.n	800598e <forward_relu+0x8e>
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	e792      	b.n	8005946 <forward_relu+0x46>
 8005a20:	00000000 	.word	0x00000000

08005a24 <ai_check_custom_types>:
 8005a24:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <ai_check_custom_types+0x50>)
 8005a26:	b082      	sub	sp, #8
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	b118      	cbz	r0, 8005a36 <ai_check_custom_types+0x12>
 8005a2e:	7803      	ldrb	r3, [r0, #0]
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d002      	beq.n	8005a3a <ai_check_custom_types+0x16>
 8005a34:	2000      	movs	r0, #0
 8005a36:	b002      	add	sp, #8
 8005a38:	4770      	bx	lr
 8005a3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <ai_check_custom_types+0x28>
 8005a42:	2001      	movs	r0, #1
 8005a44:	f080 0001 	eor.w	r0, r0, #1
 8005a48:	b002      	add	sp, #8
 8005a4a:	4770      	bx	lr
 8005a4c:	7842      	ldrb	r2, [r0, #1]
 8005a4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	f100 0001 	add.w	r0, r0, #1
 8005a58:	d1f3      	bne.n	8005a42 <ai_check_custom_types+0x1e>
 8005a5a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005a5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d1ed      	bne.n	8005a42 <ai_check_custom_types+0x1e>
 8005a66:	7842      	ldrb	r2, [r0, #1]
 8005a68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d1e8      	bne.n	8005a42 <ai_check_custom_types+0x1e>
 8005a70:	2000      	movs	r0, #0
 8005a72:	e7e7      	b.n	8005a44 <ai_check_custom_types+0x20>
 8005a74:	08007754 	.word	0x08007754

08005a78 <ai_layers_init_all>:
 8005a78:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005a7a:	b17a      	cbz	r2, 8005a9c <ai_layers_init_all+0x24>
 8005a7c:	6913      	ldr	r3, [r2, #16]
 8005a7e:	60d0      	str	r0, [r2, #12]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	f04f 0201 	mov.w	r2, #1
 8005a86:	d009      	beq.n	8005a9c <ai_layers_init_all+0x24>
 8005a88:	b143      	cbz	r3, 8005a9c <ai_layers_init_all+0x24>
 8005a8a:	6919      	ldr	r1, [r3, #16]
 8005a8c:	60d8      	str	r0, [r3, #12]
 8005a8e:	4299      	cmp	r1, r3
 8005a90:	f102 0201 	add.w	r2, r2, #1
 8005a94:	d002      	beq.n	8005a9c <ai_layers_init_all+0x24>
 8005a96:	460b      	mov	r3, r1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f6      	bne.n	8005a8a <ai_layers_init_all+0x12>
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4770      	bx	lr

08005aa0 <ai_layers_post_init_all>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005aa4:	b18c      	cbz	r4, 8005aca <ai_layers_post_init_all+0x2a>
 8005aa6:	2500      	movs	r5, #0
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	f013 0f01 	tst.w	r3, #1
 8005aae:	4620      	mov	r0, r4
 8005ab0:	d003      	beq.n	8005aba <ai_layers_post_init_all+0x1a>
 8005ab2:	6a23      	ldr	r3, [r4, #32]
 8005ab4:	b10b      	cbz	r3, 8005aba <ai_layers_post_init_all+0x1a>
 8005ab6:	4798      	blx	r3
 8005ab8:	3501      	adds	r5, #1
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	d002      	beq.n	8005ac6 <ai_layers_post_init_all+0x26>
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <ai_layers_post_init_all+0x8>
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	bd38      	pop	{r3, r4, r5, pc}
 8005aca:	4625      	mov	r5, r4
 8005acc:	e7fb      	b.n	8005ac6 <ai_layers_post_init_all+0x26>
 8005ace:	bf00      	nop

08005ad0 <ai_layers_forward_all>:
 8005ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad4:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8005ad6:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005ad8:	4604      	mov	r4, r0
 8005ada:	2f00      	cmp	r7, #0
 8005adc:	d02c      	beq.n	8005b38 <ai_layers_forward_all+0x68>
 8005ade:	2d00      	cmp	r5, #0
 8005ae0:	d03f      	beq.n	8005b62 <ai_layers_forward_all+0x92>
 8005ae2:	6545      	str	r5, [r0, #84]	; 0x54
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005ae8:	2001      	movs	r0, #1
 8005aea:	47b8      	blx	r7
 8005aec:	2600      	movs	r6, #0
 8005aee:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005af0:	46b0      	mov	r8, r6
 8005af2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005af4:	2002      	movs	r0, #2
 8005af6:	47b8      	blx	r7
 8005af8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005afa:	696b      	ldr	r3, [r5, #20]
 8005afc:	4628      	mov	r0, r5
 8005afe:	4798      	blx	r3
 8005b00:	692b      	ldr	r3, [r5, #16]
 8005b02:	429d      	cmp	r5, r3
 8005b04:	f04f 0003 	mov.w	r0, #3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	d009      	beq.n	8005b20 <ai_layers_forward_all+0x50>
 8005b0c:	6563      	str	r3, [r4, #84]	; 0x54
 8005b0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b10:	47b8      	blx	r7
 8005b12:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005b14:	3601      	adds	r6, #1
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d1eb      	bne.n	8005af2 <ai_layers_forward_all+0x22>
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b20:	2100      	movs	r1, #0
 8005b22:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 8005b26:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b28:	47b8      	blx	r7
 8005b2a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005b2c:	3601      	adds	r6, #1
 8005b2e:	2900      	cmp	r1, #0
 8005b30:	d1df      	bne.n	8005af2 <ai_layers_forward_all+0x22>
 8005b32:	4630      	mov	r0, r6
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b38:	b19d      	cbz	r5, 8005b62 <ai_layers_forward_all+0x92>
 8005b3a:	6545      	str	r5, [r0, #84]	; 0x54
 8005b3c:	463e      	mov	r6, r7
 8005b3e:	696b      	ldr	r3, [r5, #20]
 8005b40:	4628      	mov	r0, r5
 8005b42:	4798      	blx	r3
 8005b44:	692b      	ldr	r3, [r5, #16]
 8005b46:	42ab      	cmp	r3, r5
 8005b48:	f106 0601 	add.w	r6, r6, #1
 8005b4c:	d004      	beq.n	8005b58 <ai_layers_forward_all+0x88>
 8005b4e:	6563      	str	r3, [r4, #84]	; 0x54
 8005b50:	461d      	mov	r5, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f3      	bne.n	8005b3e <ai_layers_forward_all+0x6e>
 8005b56:	e7e0      	b.n	8005b1a <ai_layers_forward_all+0x4a>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	6563      	str	r3, [r4, #84]	; 0x54
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b62:	462e      	mov	r6, r5
 8005b64:	4630      	mov	r0, r6
 8005b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b6a:	bf00      	nop

08005b6c <ai_layers_destroy_all>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005b70:	b18c      	cbz	r4, 8005b96 <ai_layers_destroy_all+0x2a>
 8005b72:	2500      	movs	r5, #0
 8005b74:	6863      	ldr	r3, [r4, #4]
 8005b76:	f013 0f04 	tst.w	r3, #4
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	d003      	beq.n	8005b86 <ai_layers_destroy_all+0x1a>
 8005b7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b80:	b10b      	cbz	r3, 8005b86 <ai_layers_destroy_all+0x1a>
 8005b82:	4798      	blx	r3
 8005b84:	3501      	adds	r5, #1
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d002      	beq.n	8005b92 <ai_layers_destroy_all+0x26>
 8005b8c:	461c      	mov	r4, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <ai_layers_destroy_all+0x8>
 8005b92:	4628      	mov	r0, r5
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	4625      	mov	r5, r4
 8005b98:	e7fb      	b.n	8005b92 <ai_layers_destroy_all+0x26>
 8005b9a:	bf00      	nop

08005b9c <ai_array_to_buffer_fmt>:
 8005b9c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d02e      	beq.n	8005c02 <ai_array_to_buffer_fmt+0x66>
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <ai_array_to_buffer_fmt+0x78>)
 8005ba6:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <ai_array_to_buffer_fmt+0x30>
 8005bae:	dd11      	ble.n	8005bd4 <ai_array_to_buffer_fmt+0x38>
 8005bb0:	4a19      	ldr	r2, [pc, #100]	; (8005c18 <ai_array_to_buffer_fmt+0x7c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00a      	beq.n	8005bcc <ai_array_to_buffer_fmt+0x30>
 8005bb6:	dd18      	ble.n	8005bea <ai_array_to_buffer_fmt+0x4e>
 8005bb8:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <ai_array_to_buffer_fmt+0x80>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d006      	beq.n	8005bcc <ai_array_to_buffer_fmt+0x30>
 8005bbe:	4a18      	ldr	r2, [pc, #96]	; (8005c20 <ai_array_to_buffer_fmt+0x84>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <ai_array_to_buffer_fmt+0x30>
 8005bc4:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <ai_array_to_buffer_fmt+0x88>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d000      	beq.n	8005bcc <ai_array_to_buffer_fmt+0x30>
 8005bca:	2340      	movs	r3, #64	; 0x40
 8005bcc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005bd0:	4318      	orrs	r0, r3
 8005bd2:	4770      	bx	lr
 8005bd4:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <ai_array_to_buffer_fmt+0x8c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d0f8      	beq.n	8005bcc <ai_array_to_buffer_fmt+0x30>
 8005bda:	dd06      	ble.n	8005bea <ai_array_to_buffer_fmt+0x4e>
 8005bdc:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <ai_array_to_buffer_fmt+0x90>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d0f4      	beq.n	8005bcc <ai_array_to_buffer_fmt+0x30>
 8005be2:	320f      	adds	r2, #15
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d0f1      	beq.n	8005bcc <ai_array_to_buffer_fmt+0x30>
 8005be8:	e7ef      	b.n	8005bca <ai_array_to_buffer_fmt+0x2e>
 8005bea:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d0ec      	beq.n	8005bcc <ai_array_to_buffer_fmt+0x30>
 8005bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d1e7      	bne.n	8005bca <ai_array_to_buffer_fmt+0x2e>
 8005bfa:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005bfe:	4318      	orrs	r0, r3
 8005c00:	4770      	bx	lr
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <ai_array_to_buffer_fmt+0x94>)
 8005c04:	4003      	ands	r3, r0
 8005c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c0a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005c0e:	4318      	orrs	r0, r3
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	00060440 	.word	0x00060440
 8005c18:	00840447 	.word	0x00840447
 8005c1c:	0084084f 	.word	0x0084084f
 8005c20:	01821040 	.word	0x01821040
 8005c24:	00840840 	.word	0x00840840
 8005c28:	00040447 	.word	0x00040447
 8005c2c:	00040840 	.word	0x00040840
 8005c30:	00803fff 	.word	0x00803fff

08005c34 <ai_array_get_byte_size>:
 8005c34:	b1c1      	cbz	r1, 8005c68 <ai_array_get_byte_size+0x34>
 8005c36:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005c3a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005c3e:	4413      	add	r3, r2
 8005c40:	fb01 f103 	mul.w	r1, r1, r3
 8005c44:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8005c48:	3107      	adds	r1, #7
 8005c4a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8005c4e:	f021 0107 	bic.w	r1, r1, #7
 8005c52:	2804      	cmp	r0, #4
 8005c54:	fa21 f102 	lsr.w	r1, r1, r2
 8005c58:	d008      	beq.n	8005c6c <ai_array_get_byte_size+0x38>
 8005c5a:	2808      	cmp	r0, #8
 8005c5c:	d101      	bne.n	8005c62 <ai_array_get_byte_size+0x2e>
 8005c5e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8005c62:	3107      	adds	r1, #7
 8005c64:	08c8      	lsrs	r0, r1, #3
 8005c66:	4770      	bx	lr
 8005c68:	4608      	mov	r0, r1
 8005c6a:	4770      	bx	lr
 8005c6c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005c70:	3107      	adds	r1, #7
 8005c72:	08c8      	lsrs	r0, r1, #3
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop

08005c78 <calloc>:
 8005c78:	4b02      	ldr	r3, [pc, #8]	; (8005c84 <calloc+0xc>)
 8005c7a:	460a      	mov	r2, r1
 8005c7c:	4601      	mov	r1, r0
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f000 b84f 	b.w	8005d22 <_calloc_r>
 8005c84:	20000ed0 	.word	0x20000ed0

08005c88 <__errno>:
 8005c88:	4b01      	ldr	r3, [pc, #4]	; (8005c90 <__errno+0x8>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000ed0 	.word	0x20000ed0

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4e0d      	ldr	r6, [pc, #52]	; (8005ccc <__libc_init_array+0x38>)
 8005c98:	4c0d      	ldr	r4, [pc, #52]	; (8005cd0 <__libc_init_array+0x3c>)
 8005c9a:	1ba4      	subs	r4, r4, r6
 8005c9c:	10a4      	asrs	r4, r4, #2
 8005c9e:	2500      	movs	r5, #0
 8005ca0:	42a5      	cmp	r5, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	4e0b      	ldr	r6, [pc, #44]	; (8005cd4 <__libc_init_array+0x40>)
 8005ca6:	4c0c      	ldr	r4, [pc, #48]	; (8005cd8 <__libc_init_array+0x44>)
 8005ca8:	f001 fbf2 	bl	8007490 <_init>
 8005cac:	1ba4      	subs	r4, r4, r6
 8005cae:	10a4      	asrs	r4, r4, #2
 8005cb0:	2500      	movs	r5, #0
 8005cb2:	42a5      	cmp	r5, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cbc:	4798      	blx	r3
 8005cbe:	3501      	adds	r5, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cc6:	4798      	blx	r3
 8005cc8:	3501      	adds	r5, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08062c88 	.word	0x08062c88
 8005cd0:	08062c88 	.word	0x08062c88
 8005cd4:	08062c88 	.word	0x08062c88
 8005cd8:	08062c8c 	.word	0x08062c8c

08005cdc <malloc>:
 8005cdc:	4b02      	ldr	r3, [pc, #8]	; (8005ce8 <malloc+0xc>)
 8005cde:	4601      	mov	r1, r0
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	f000 b87b 	b.w	8005ddc <_malloc_r>
 8005ce6:	bf00      	nop
 8005ce8:	20000ed0 	.word	0x20000ed0

08005cec <free>:
 8005cec:	4b02      	ldr	r3, [pc, #8]	; (8005cf8 <free+0xc>)
 8005cee:	4601      	mov	r1, r0
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f000 b825 	b.w	8005d40 <_free_r>
 8005cf6:	bf00      	nop
 8005cf8:	20000ed0 	.word	0x20000ed0

08005cfc <memcpy>:
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	1e43      	subs	r3, r0, #1
 8005d00:	440a      	add	r2, r1
 8005d02:	4291      	cmp	r1, r2
 8005d04:	d100      	bne.n	8005d08 <memcpy+0xc>
 8005d06:	bd10      	pop	{r4, pc}
 8005d08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d10:	e7f7      	b.n	8005d02 <memcpy+0x6>

08005d12 <memset>:
 8005d12:	4402      	add	r2, r0
 8005d14:	4603      	mov	r3, r0
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d100      	bne.n	8005d1c <memset+0xa>
 8005d1a:	4770      	bx	lr
 8005d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8005d20:	e7f9      	b.n	8005d16 <memset+0x4>

08005d22 <_calloc_r>:
 8005d22:	b538      	push	{r3, r4, r5, lr}
 8005d24:	fb02 f401 	mul.w	r4, r2, r1
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f000 f857 	bl	8005ddc <_malloc_r>
 8005d2e:	4605      	mov	r5, r0
 8005d30:	b118      	cbz	r0, 8005d3a <_calloc_r+0x18>
 8005d32:	4622      	mov	r2, r4
 8005d34:	2100      	movs	r1, #0
 8005d36:	f7ff ffec 	bl	8005d12 <memset>
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005d40 <_free_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4605      	mov	r5, r0
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d045      	beq.n	8005dd4 <_free_r+0x94>
 8005d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d4c:	1f0c      	subs	r4, r1, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bfb8      	it	lt
 8005d52:	18e4      	addlt	r4, r4, r3
 8005d54:	f000 fbc6 	bl	80064e4 <__malloc_lock>
 8005d58:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <_free_r+0x98>)
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	b933      	cbnz	r3, 8005d6e <_free_r+0x2e>
 8005d60:	6063      	str	r3, [r4, #4]
 8005d62:	6014      	str	r4, [r2, #0]
 8005d64:	4628      	mov	r0, r5
 8005d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d6a:	f000 bbbc 	b.w	80064e6 <__malloc_unlock>
 8005d6e:	42a3      	cmp	r3, r4
 8005d70:	d90c      	bls.n	8005d8c <_free_r+0x4c>
 8005d72:	6821      	ldr	r1, [r4, #0]
 8005d74:	1862      	adds	r2, r4, r1
 8005d76:	4293      	cmp	r3, r2
 8005d78:	bf04      	itt	eq
 8005d7a:	681a      	ldreq	r2, [r3, #0]
 8005d7c:	685b      	ldreq	r3, [r3, #4]
 8005d7e:	6063      	str	r3, [r4, #4]
 8005d80:	bf04      	itt	eq
 8005d82:	1852      	addeq	r2, r2, r1
 8005d84:	6022      	streq	r2, [r4, #0]
 8005d86:	6004      	str	r4, [r0, #0]
 8005d88:	e7ec      	b.n	8005d64 <_free_r+0x24>
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	b10a      	cbz	r2, 8005d94 <_free_r+0x54>
 8005d90:	42a2      	cmp	r2, r4
 8005d92:	d9fa      	bls.n	8005d8a <_free_r+0x4a>
 8005d94:	6819      	ldr	r1, [r3, #0]
 8005d96:	1858      	adds	r0, r3, r1
 8005d98:	42a0      	cmp	r0, r4
 8005d9a:	d10b      	bne.n	8005db4 <_free_r+0x74>
 8005d9c:	6820      	ldr	r0, [r4, #0]
 8005d9e:	4401      	add	r1, r0
 8005da0:	1858      	adds	r0, r3, r1
 8005da2:	4282      	cmp	r2, r0
 8005da4:	6019      	str	r1, [r3, #0]
 8005da6:	d1dd      	bne.n	8005d64 <_free_r+0x24>
 8005da8:	6810      	ldr	r0, [r2, #0]
 8005daa:	6852      	ldr	r2, [r2, #4]
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	4401      	add	r1, r0
 8005db0:	6019      	str	r1, [r3, #0]
 8005db2:	e7d7      	b.n	8005d64 <_free_r+0x24>
 8005db4:	d902      	bls.n	8005dbc <_free_r+0x7c>
 8005db6:	230c      	movs	r3, #12
 8005db8:	602b      	str	r3, [r5, #0]
 8005dba:	e7d3      	b.n	8005d64 <_free_r+0x24>
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	1821      	adds	r1, r4, r0
 8005dc0:	428a      	cmp	r2, r1
 8005dc2:	bf04      	itt	eq
 8005dc4:	6811      	ldreq	r1, [r2, #0]
 8005dc6:	6852      	ldreq	r2, [r2, #4]
 8005dc8:	6062      	str	r2, [r4, #4]
 8005dca:	bf04      	itt	eq
 8005dcc:	1809      	addeq	r1, r1, r0
 8005dce:	6021      	streq	r1, [r4, #0]
 8005dd0:	605c      	str	r4, [r3, #4]
 8005dd2:	e7c7      	b.n	8005d64 <_free_r+0x24>
 8005dd4:	bd38      	pop	{r3, r4, r5, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20001454 	.word	0x20001454

08005ddc <_malloc_r>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	1ccd      	adds	r5, r1, #3
 8005de0:	f025 0503 	bic.w	r5, r5, #3
 8005de4:	3508      	adds	r5, #8
 8005de6:	2d0c      	cmp	r5, #12
 8005de8:	bf38      	it	cc
 8005dea:	250c      	movcc	r5, #12
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	4606      	mov	r6, r0
 8005df0:	db01      	blt.n	8005df6 <_malloc_r+0x1a>
 8005df2:	42a9      	cmp	r1, r5
 8005df4:	d903      	bls.n	8005dfe <_malloc_r+0x22>
 8005df6:	230c      	movs	r3, #12
 8005df8:	6033      	str	r3, [r6, #0]
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	bd70      	pop	{r4, r5, r6, pc}
 8005dfe:	f000 fb71 	bl	80064e4 <__malloc_lock>
 8005e02:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <_malloc_r+0xac>)
 8005e04:	6814      	ldr	r4, [r2, #0]
 8005e06:	4621      	mov	r1, r4
 8005e08:	b991      	cbnz	r1, 8005e30 <_malloc_r+0x54>
 8005e0a:	4c20      	ldr	r4, [pc, #128]	; (8005e8c <_malloc_r+0xb0>)
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	b91b      	cbnz	r3, 8005e18 <_malloc_r+0x3c>
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 f8b9 	bl	8005f88 <_sbrk_r>
 8005e16:	6020      	str	r0, [r4, #0]
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f000 f8b4 	bl	8005f88 <_sbrk_r>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d124      	bne.n	8005e6e <_malloc_r+0x92>
 8005e24:	230c      	movs	r3, #12
 8005e26:	6033      	str	r3, [r6, #0]
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f000 fb5c 	bl	80064e6 <__malloc_unlock>
 8005e2e:	e7e4      	b.n	8005dfa <_malloc_r+0x1e>
 8005e30:	680b      	ldr	r3, [r1, #0]
 8005e32:	1b5b      	subs	r3, r3, r5
 8005e34:	d418      	bmi.n	8005e68 <_malloc_r+0x8c>
 8005e36:	2b0b      	cmp	r3, #11
 8005e38:	d90f      	bls.n	8005e5a <_malloc_r+0x7e>
 8005e3a:	600b      	str	r3, [r1, #0]
 8005e3c:	50cd      	str	r5, [r1, r3]
 8005e3e:	18cc      	adds	r4, r1, r3
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 fb50 	bl	80064e6 <__malloc_unlock>
 8005e46:	f104 000b 	add.w	r0, r4, #11
 8005e4a:	1d23      	adds	r3, r4, #4
 8005e4c:	f020 0007 	bic.w	r0, r0, #7
 8005e50:	1ac3      	subs	r3, r0, r3
 8005e52:	d0d3      	beq.n	8005dfc <_malloc_r+0x20>
 8005e54:	425a      	negs	r2, r3
 8005e56:	50e2      	str	r2, [r4, r3]
 8005e58:	e7d0      	b.n	8005dfc <_malloc_r+0x20>
 8005e5a:	428c      	cmp	r4, r1
 8005e5c:	684b      	ldr	r3, [r1, #4]
 8005e5e:	bf16      	itet	ne
 8005e60:	6063      	strne	r3, [r4, #4]
 8005e62:	6013      	streq	r3, [r2, #0]
 8005e64:	460c      	movne	r4, r1
 8005e66:	e7eb      	b.n	8005e40 <_malloc_r+0x64>
 8005e68:	460c      	mov	r4, r1
 8005e6a:	6849      	ldr	r1, [r1, #4]
 8005e6c:	e7cc      	b.n	8005e08 <_malloc_r+0x2c>
 8005e6e:	1cc4      	adds	r4, r0, #3
 8005e70:	f024 0403 	bic.w	r4, r4, #3
 8005e74:	42a0      	cmp	r0, r4
 8005e76:	d005      	beq.n	8005e84 <_malloc_r+0xa8>
 8005e78:	1a21      	subs	r1, r4, r0
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f000 f884 	bl	8005f88 <_sbrk_r>
 8005e80:	3001      	adds	r0, #1
 8005e82:	d0cf      	beq.n	8005e24 <_malloc_r+0x48>
 8005e84:	6025      	str	r5, [r4, #0]
 8005e86:	e7db      	b.n	8005e40 <_malloc_r+0x64>
 8005e88:	20001454 	.word	0x20001454
 8005e8c:	20001458 	.word	0x20001458

08005e90 <iprintf>:
 8005e90:	b40f      	push	{r0, r1, r2, r3}
 8005e92:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <iprintf+0x2c>)
 8005e94:	b513      	push	{r0, r1, r4, lr}
 8005e96:	681c      	ldr	r4, [r3, #0]
 8005e98:	b124      	cbz	r4, 8005ea4 <iprintf+0x14>
 8005e9a:	69a3      	ldr	r3, [r4, #24]
 8005e9c:	b913      	cbnz	r3, 8005ea4 <iprintf+0x14>
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 fa32 	bl	8006308 <__sinit>
 8005ea4:	ab05      	add	r3, sp, #20
 8005ea6:	9a04      	ldr	r2, [sp, #16]
 8005ea8:	68a1      	ldr	r1, [r4, #8]
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 fb45 	bl	800653c <_vfiprintf_r>
 8005eb2:	b002      	add	sp, #8
 8005eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb8:	b004      	add	sp, #16
 8005eba:	4770      	bx	lr
 8005ebc:	20000ed0 	.word	0x20000ed0

08005ec0 <_puts_r>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	460e      	mov	r6, r1
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	b118      	cbz	r0, 8005ed0 <_puts_r+0x10>
 8005ec8:	6983      	ldr	r3, [r0, #24]
 8005eca:	b90b      	cbnz	r3, 8005ed0 <_puts_r+0x10>
 8005ecc:	f000 fa1c 	bl	8006308 <__sinit>
 8005ed0:	69ab      	ldr	r3, [r5, #24]
 8005ed2:	68ac      	ldr	r4, [r5, #8]
 8005ed4:	b913      	cbnz	r3, 8005edc <_puts_r+0x1c>
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 fa16 	bl	8006308 <__sinit>
 8005edc:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <_puts_r+0xac>)
 8005ede:	429c      	cmp	r4, r3
 8005ee0:	d117      	bne.n	8005f12 <_puts_r+0x52>
 8005ee2:	686c      	ldr	r4, [r5, #4]
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	071b      	lsls	r3, r3, #28
 8005ee8:	d51d      	bpl.n	8005f26 <_puts_r+0x66>
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	b1db      	cbz	r3, 8005f26 <_puts_r+0x66>
 8005eee:	3e01      	subs	r6, #1
 8005ef0:	68a3      	ldr	r3, [r4, #8]
 8005ef2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	60a3      	str	r3, [r4, #8]
 8005efa:	b9e9      	cbnz	r1, 8005f38 <_puts_r+0x78>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	da2e      	bge.n	8005f5e <_puts_r+0x9e>
 8005f00:	4622      	mov	r2, r4
 8005f02:	210a      	movs	r1, #10
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 f84f 	bl	8005fa8 <__swbuf_r>
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d011      	beq.n	8005f32 <_puts_r+0x72>
 8005f0e:	200a      	movs	r0, #10
 8005f10:	e011      	b.n	8005f36 <_puts_r+0x76>
 8005f12:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <_puts_r+0xb0>)
 8005f14:	429c      	cmp	r4, r3
 8005f16:	d101      	bne.n	8005f1c <_puts_r+0x5c>
 8005f18:	68ac      	ldr	r4, [r5, #8]
 8005f1a:	e7e3      	b.n	8005ee4 <_puts_r+0x24>
 8005f1c:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <_puts_r+0xb4>)
 8005f1e:	429c      	cmp	r4, r3
 8005f20:	bf08      	it	eq
 8005f22:	68ec      	ldreq	r4, [r5, #12]
 8005f24:	e7de      	b.n	8005ee4 <_puts_r+0x24>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f000 f88f 	bl	800604c <__swsetup_r>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d0dd      	beq.n	8005eee <_puts_r+0x2e>
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da04      	bge.n	8005f46 <_puts_r+0x86>
 8005f3c:	69a2      	ldr	r2, [r4, #24]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	dc06      	bgt.n	8005f50 <_puts_r+0x90>
 8005f42:	290a      	cmp	r1, #10
 8005f44:	d004      	beq.n	8005f50 <_puts_r+0x90>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	6022      	str	r2, [r4, #0]
 8005f4c:	7019      	strb	r1, [r3, #0]
 8005f4e:	e7cf      	b.n	8005ef0 <_puts_r+0x30>
 8005f50:	4622      	mov	r2, r4
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f828 	bl	8005fa8 <__swbuf_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d1c9      	bne.n	8005ef0 <_puts_r+0x30>
 8005f5c:	e7e9      	b.n	8005f32 <_puts_r+0x72>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	200a      	movs	r0, #10
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	6022      	str	r2, [r4, #0]
 8005f66:	7018      	strb	r0, [r3, #0]
 8005f68:	e7e5      	b.n	8005f36 <_puts_r+0x76>
 8005f6a:	bf00      	nop
 8005f6c:	08062bd0 	.word	0x08062bd0
 8005f70:	08062bf0 	.word	0x08062bf0
 8005f74:	08062bb0 	.word	0x08062bb0

08005f78 <puts>:
 8005f78:	4b02      	ldr	r3, [pc, #8]	; (8005f84 <puts+0xc>)
 8005f7a:	4601      	mov	r1, r0
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	f7ff bf9f 	b.w	8005ec0 <_puts_r>
 8005f82:	bf00      	nop
 8005f84:	20000ed0 	.word	0x20000ed0

08005f88 <_sbrk_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4c06      	ldr	r4, [pc, #24]	; (8005fa4 <_sbrk_r+0x1c>)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4605      	mov	r5, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	f7fb ffac 	bl	8001ef0 <_sbrk>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_sbrk_r+0x1a>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_sbrk_r+0x1a>
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	2000255c 	.word	0x2000255c

08005fa8 <__swbuf_r>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	460e      	mov	r6, r1
 8005fac:	4614      	mov	r4, r2
 8005fae:	4605      	mov	r5, r0
 8005fb0:	b118      	cbz	r0, 8005fba <__swbuf_r+0x12>
 8005fb2:	6983      	ldr	r3, [r0, #24]
 8005fb4:	b90b      	cbnz	r3, 8005fba <__swbuf_r+0x12>
 8005fb6:	f000 f9a7 	bl	8006308 <__sinit>
 8005fba:	4b21      	ldr	r3, [pc, #132]	; (8006040 <__swbuf_r+0x98>)
 8005fbc:	429c      	cmp	r4, r3
 8005fbe:	d12a      	bne.n	8006016 <__swbuf_r+0x6e>
 8005fc0:	686c      	ldr	r4, [r5, #4]
 8005fc2:	69a3      	ldr	r3, [r4, #24]
 8005fc4:	60a3      	str	r3, [r4, #8]
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	071a      	lsls	r2, r3, #28
 8005fca:	d52e      	bpl.n	800602a <__swbuf_r+0x82>
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	b363      	cbz	r3, 800602a <__swbuf_r+0x82>
 8005fd0:	6923      	ldr	r3, [r4, #16]
 8005fd2:	6820      	ldr	r0, [r4, #0]
 8005fd4:	1ac0      	subs	r0, r0, r3
 8005fd6:	6963      	ldr	r3, [r4, #20]
 8005fd8:	b2f6      	uxtb	r6, r6
 8005fda:	4283      	cmp	r3, r0
 8005fdc:	4637      	mov	r7, r6
 8005fde:	dc04      	bgt.n	8005fea <__swbuf_r+0x42>
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f000 f926 	bl	8006234 <_fflush_r>
 8005fe8:	bb28      	cbnz	r0, 8006036 <__swbuf_r+0x8e>
 8005fea:	68a3      	ldr	r3, [r4, #8]
 8005fec:	3b01      	subs	r3, #1
 8005fee:	60a3      	str	r3, [r4, #8]
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	6022      	str	r2, [r4, #0]
 8005ff6:	701e      	strb	r6, [r3, #0]
 8005ff8:	6963      	ldr	r3, [r4, #20]
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	4283      	cmp	r3, r0
 8005ffe:	d004      	beq.n	800600a <__swbuf_r+0x62>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	07db      	lsls	r3, r3, #31
 8006004:	d519      	bpl.n	800603a <__swbuf_r+0x92>
 8006006:	2e0a      	cmp	r6, #10
 8006008:	d117      	bne.n	800603a <__swbuf_r+0x92>
 800600a:	4621      	mov	r1, r4
 800600c:	4628      	mov	r0, r5
 800600e:	f000 f911 	bl	8006234 <_fflush_r>
 8006012:	b190      	cbz	r0, 800603a <__swbuf_r+0x92>
 8006014:	e00f      	b.n	8006036 <__swbuf_r+0x8e>
 8006016:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <__swbuf_r+0x9c>)
 8006018:	429c      	cmp	r4, r3
 800601a:	d101      	bne.n	8006020 <__swbuf_r+0x78>
 800601c:	68ac      	ldr	r4, [r5, #8]
 800601e:	e7d0      	b.n	8005fc2 <__swbuf_r+0x1a>
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <__swbuf_r+0xa0>)
 8006022:	429c      	cmp	r4, r3
 8006024:	bf08      	it	eq
 8006026:	68ec      	ldreq	r4, [r5, #12]
 8006028:	e7cb      	b.n	8005fc2 <__swbuf_r+0x1a>
 800602a:	4621      	mov	r1, r4
 800602c:	4628      	mov	r0, r5
 800602e:	f000 f80d 	bl	800604c <__swsetup_r>
 8006032:	2800      	cmp	r0, #0
 8006034:	d0cc      	beq.n	8005fd0 <__swbuf_r+0x28>
 8006036:	f04f 37ff 	mov.w	r7, #4294967295
 800603a:	4638      	mov	r0, r7
 800603c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800603e:	bf00      	nop
 8006040:	08062bd0 	.word	0x08062bd0
 8006044:	08062bf0 	.word	0x08062bf0
 8006048:	08062bb0 	.word	0x08062bb0

0800604c <__swsetup_r>:
 800604c:	4b32      	ldr	r3, [pc, #200]	; (8006118 <__swsetup_r+0xcc>)
 800604e:	b570      	push	{r4, r5, r6, lr}
 8006050:	681d      	ldr	r5, [r3, #0]
 8006052:	4606      	mov	r6, r0
 8006054:	460c      	mov	r4, r1
 8006056:	b125      	cbz	r5, 8006062 <__swsetup_r+0x16>
 8006058:	69ab      	ldr	r3, [r5, #24]
 800605a:	b913      	cbnz	r3, 8006062 <__swsetup_r+0x16>
 800605c:	4628      	mov	r0, r5
 800605e:	f000 f953 	bl	8006308 <__sinit>
 8006062:	4b2e      	ldr	r3, [pc, #184]	; (800611c <__swsetup_r+0xd0>)
 8006064:	429c      	cmp	r4, r3
 8006066:	d10f      	bne.n	8006088 <__swsetup_r+0x3c>
 8006068:	686c      	ldr	r4, [r5, #4]
 800606a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800606e:	b29a      	uxth	r2, r3
 8006070:	0715      	lsls	r5, r2, #28
 8006072:	d42c      	bmi.n	80060ce <__swsetup_r+0x82>
 8006074:	06d0      	lsls	r0, r2, #27
 8006076:	d411      	bmi.n	800609c <__swsetup_r+0x50>
 8006078:	2209      	movs	r2, #9
 800607a:	6032      	str	r2, [r6, #0]
 800607c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006080:	81a3      	strh	r3, [r4, #12]
 8006082:	f04f 30ff 	mov.w	r0, #4294967295
 8006086:	e03e      	b.n	8006106 <__swsetup_r+0xba>
 8006088:	4b25      	ldr	r3, [pc, #148]	; (8006120 <__swsetup_r+0xd4>)
 800608a:	429c      	cmp	r4, r3
 800608c:	d101      	bne.n	8006092 <__swsetup_r+0x46>
 800608e:	68ac      	ldr	r4, [r5, #8]
 8006090:	e7eb      	b.n	800606a <__swsetup_r+0x1e>
 8006092:	4b24      	ldr	r3, [pc, #144]	; (8006124 <__swsetup_r+0xd8>)
 8006094:	429c      	cmp	r4, r3
 8006096:	bf08      	it	eq
 8006098:	68ec      	ldreq	r4, [r5, #12]
 800609a:	e7e6      	b.n	800606a <__swsetup_r+0x1e>
 800609c:	0751      	lsls	r1, r2, #29
 800609e:	d512      	bpl.n	80060c6 <__swsetup_r+0x7a>
 80060a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060a2:	b141      	cbz	r1, 80060b6 <__swsetup_r+0x6a>
 80060a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060a8:	4299      	cmp	r1, r3
 80060aa:	d002      	beq.n	80060b2 <__swsetup_r+0x66>
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7ff fe47 	bl	8005d40 <_free_r>
 80060b2:	2300      	movs	r3, #0
 80060b4:	6363      	str	r3, [r4, #52]	; 0x34
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060bc:	81a3      	strh	r3, [r4, #12]
 80060be:	2300      	movs	r3, #0
 80060c0:	6063      	str	r3, [r4, #4]
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	f043 0308 	orr.w	r3, r3, #8
 80060cc:	81a3      	strh	r3, [r4, #12]
 80060ce:	6923      	ldr	r3, [r4, #16]
 80060d0:	b94b      	cbnz	r3, 80060e6 <__swsetup_r+0x9a>
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060dc:	d003      	beq.n	80060e6 <__swsetup_r+0x9a>
 80060de:	4621      	mov	r1, r4
 80060e0:	4630      	mov	r0, r6
 80060e2:	f000 f9bf 	bl	8006464 <__smakebuf_r>
 80060e6:	89a2      	ldrh	r2, [r4, #12]
 80060e8:	f012 0301 	ands.w	r3, r2, #1
 80060ec:	d00c      	beq.n	8006108 <__swsetup_r+0xbc>
 80060ee:	2300      	movs	r3, #0
 80060f0:	60a3      	str	r3, [r4, #8]
 80060f2:	6963      	ldr	r3, [r4, #20]
 80060f4:	425b      	negs	r3, r3
 80060f6:	61a3      	str	r3, [r4, #24]
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	b953      	cbnz	r3, 8006112 <__swsetup_r+0xc6>
 80060fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006100:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006104:	d1ba      	bne.n	800607c <__swsetup_r+0x30>
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	0792      	lsls	r2, r2, #30
 800610a:	bf58      	it	pl
 800610c:	6963      	ldrpl	r3, [r4, #20]
 800610e:	60a3      	str	r3, [r4, #8]
 8006110:	e7f2      	b.n	80060f8 <__swsetup_r+0xac>
 8006112:	2000      	movs	r0, #0
 8006114:	e7f7      	b.n	8006106 <__swsetup_r+0xba>
 8006116:	bf00      	nop
 8006118:	20000ed0 	.word	0x20000ed0
 800611c:	08062bd0 	.word	0x08062bd0
 8006120:	08062bf0 	.word	0x08062bf0
 8006124:	08062bb0 	.word	0x08062bb0

08006128 <__sflush_r>:
 8006128:	898a      	ldrh	r2, [r1, #12]
 800612a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612e:	4605      	mov	r5, r0
 8006130:	0710      	lsls	r0, r2, #28
 8006132:	460c      	mov	r4, r1
 8006134:	d458      	bmi.n	80061e8 <__sflush_r+0xc0>
 8006136:	684b      	ldr	r3, [r1, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	dc05      	bgt.n	8006148 <__sflush_r+0x20>
 800613c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	dc02      	bgt.n	8006148 <__sflush_r+0x20>
 8006142:	2000      	movs	r0, #0
 8006144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800614a:	2e00      	cmp	r6, #0
 800614c:	d0f9      	beq.n	8006142 <__sflush_r+0x1a>
 800614e:	2300      	movs	r3, #0
 8006150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006154:	682f      	ldr	r7, [r5, #0]
 8006156:	6a21      	ldr	r1, [r4, #32]
 8006158:	602b      	str	r3, [r5, #0]
 800615a:	d032      	beq.n	80061c2 <__sflush_r+0x9a>
 800615c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	075a      	lsls	r2, r3, #29
 8006162:	d505      	bpl.n	8006170 <__sflush_r+0x48>
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	1ac0      	subs	r0, r0, r3
 8006168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800616a:	b10b      	cbz	r3, 8006170 <__sflush_r+0x48>
 800616c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800616e:	1ac0      	subs	r0, r0, r3
 8006170:	2300      	movs	r3, #0
 8006172:	4602      	mov	r2, r0
 8006174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006176:	6a21      	ldr	r1, [r4, #32]
 8006178:	4628      	mov	r0, r5
 800617a:	47b0      	blx	r6
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	d106      	bne.n	8006190 <__sflush_r+0x68>
 8006182:	6829      	ldr	r1, [r5, #0]
 8006184:	291d      	cmp	r1, #29
 8006186:	d848      	bhi.n	800621a <__sflush_r+0xf2>
 8006188:	4a29      	ldr	r2, [pc, #164]	; (8006230 <__sflush_r+0x108>)
 800618a:	40ca      	lsrs	r2, r1
 800618c:	07d6      	lsls	r6, r2, #31
 800618e:	d544      	bpl.n	800621a <__sflush_r+0xf2>
 8006190:	2200      	movs	r2, #0
 8006192:	6062      	str	r2, [r4, #4]
 8006194:	04d9      	lsls	r1, r3, #19
 8006196:	6922      	ldr	r2, [r4, #16]
 8006198:	6022      	str	r2, [r4, #0]
 800619a:	d504      	bpl.n	80061a6 <__sflush_r+0x7e>
 800619c:	1c42      	adds	r2, r0, #1
 800619e:	d101      	bne.n	80061a4 <__sflush_r+0x7c>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	b903      	cbnz	r3, 80061a6 <__sflush_r+0x7e>
 80061a4:	6560      	str	r0, [r4, #84]	; 0x54
 80061a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061a8:	602f      	str	r7, [r5, #0]
 80061aa:	2900      	cmp	r1, #0
 80061ac:	d0c9      	beq.n	8006142 <__sflush_r+0x1a>
 80061ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061b2:	4299      	cmp	r1, r3
 80061b4:	d002      	beq.n	80061bc <__sflush_r+0x94>
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7ff fdc2 	bl	8005d40 <_free_r>
 80061bc:	2000      	movs	r0, #0
 80061be:	6360      	str	r0, [r4, #52]	; 0x34
 80061c0:	e7c0      	b.n	8006144 <__sflush_r+0x1c>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b0      	blx	r6
 80061c8:	1c41      	adds	r1, r0, #1
 80061ca:	d1c8      	bne.n	800615e <__sflush_r+0x36>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0c5      	beq.n	800615e <__sflush_r+0x36>
 80061d2:	2b1d      	cmp	r3, #29
 80061d4:	d001      	beq.n	80061da <__sflush_r+0xb2>
 80061d6:	2b16      	cmp	r3, #22
 80061d8:	d101      	bne.n	80061de <__sflush_r+0xb6>
 80061da:	602f      	str	r7, [r5, #0]
 80061dc:	e7b1      	b.n	8006142 <__sflush_r+0x1a>
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	e7ad      	b.n	8006144 <__sflush_r+0x1c>
 80061e8:	690f      	ldr	r7, [r1, #16]
 80061ea:	2f00      	cmp	r7, #0
 80061ec:	d0a9      	beq.n	8006142 <__sflush_r+0x1a>
 80061ee:	0793      	lsls	r3, r2, #30
 80061f0:	680e      	ldr	r6, [r1, #0]
 80061f2:	bf08      	it	eq
 80061f4:	694b      	ldreq	r3, [r1, #20]
 80061f6:	600f      	str	r7, [r1, #0]
 80061f8:	bf18      	it	ne
 80061fa:	2300      	movne	r3, #0
 80061fc:	eba6 0807 	sub.w	r8, r6, r7
 8006200:	608b      	str	r3, [r1, #8]
 8006202:	f1b8 0f00 	cmp.w	r8, #0
 8006206:	dd9c      	ble.n	8006142 <__sflush_r+0x1a>
 8006208:	4643      	mov	r3, r8
 800620a:	463a      	mov	r2, r7
 800620c:	6a21      	ldr	r1, [r4, #32]
 800620e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006210:	4628      	mov	r0, r5
 8006212:	47b0      	blx	r6
 8006214:	2800      	cmp	r0, #0
 8006216:	dc06      	bgt.n	8006226 <__sflush_r+0xfe>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	e78e      	b.n	8006144 <__sflush_r+0x1c>
 8006226:	4407      	add	r7, r0
 8006228:	eba8 0800 	sub.w	r8, r8, r0
 800622c:	e7e9      	b.n	8006202 <__sflush_r+0xda>
 800622e:	bf00      	nop
 8006230:	20400001 	.word	0x20400001

08006234 <_fflush_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	690b      	ldr	r3, [r1, #16]
 8006238:	4605      	mov	r5, r0
 800623a:	460c      	mov	r4, r1
 800623c:	b1db      	cbz	r3, 8006276 <_fflush_r+0x42>
 800623e:	b118      	cbz	r0, 8006248 <_fflush_r+0x14>
 8006240:	6983      	ldr	r3, [r0, #24]
 8006242:	b90b      	cbnz	r3, 8006248 <_fflush_r+0x14>
 8006244:	f000 f860 	bl	8006308 <__sinit>
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <_fflush_r+0x48>)
 800624a:	429c      	cmp	r4, r3
 800624c:	d109      	bne.n	8006262 <_fflush_r+0x2e>
 800624e:	686c      	ldr	r4, [r5, #4]
 8006250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006254:	b17b      	cbz	r3, 8006276 <_fflush_r+0x42>
 8006256:	4621      	mov	r1, r4
 8006258:	4628      	mov	r0, r5
 800625a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800625e:	f7ff bf63 	b.w	8006128 <__sflush_r>
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <_fflush_r+0x4c>)
 8006264:	429c      	cmp	r4, r3
 8006266:	d101      	bne.n	800626c <_fflush_r+0x38>
 8006268:	68ac      	ldr	r4, [r5, #8]
 800626a:	e7f1      	b.n	8006250 <_fflush_r+0x1c>
 800626c:	4b05      	ldr	r3, [pc, #20]	; (8006284 <_fflush_r+0x50>)
 800626e:	429c      	cmp	r4, r3
 8006270:	bf08      	it	eq
 8006272:	68ec      	ldreq	r4, [r5, #12]
 8006274:	e7ec      	b.n	8006250 <_fflush_r+0x1c>
 8006276:	2000      	movs	r0, #0
 8006278:	bd38      	pop	{r3, r4, r5, pc}
 800627a:	bf00      	nop
 800627c:	08062bd0 	.word	0x08062bd0
 8006280:	08062bf0 	.word	0x08062bf0
 8006284:	08062bb0 	.word	0x08062bb0

08006288 <std>:
 8006288:	2300      	movs	r3, #0
 800628a:	b510      	push	{r4, lr}
 800628c:	4604      	mov	r4, r0
 800628e:	e9c0 3300 	strd	r3, r3, [r0]
 8006292:	6083      	str	r3, [r0, #8]
 8006294:	8181      	strh	r1, [r0, #12]
 8006296:	6643      	str	r3, [r0, #100]	; 0x64
 8006298:	81c2      	strh	r2, [r0, #14]
 800629a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800629e:	6183      	str	r3, [r0, #24]
 80062a0:	4619      	mov	r1, r3
 80062a2:	2208      	movs	r2, #8
 80062a4:	305c      	adds	r0, #92	; 0x5c
 80062a6:	f7ff fd34 	bl	8005d12 <memset>
 80062aa:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <std+0x38>)
 80062ac:	6263      	str	r3, [r4, #36]	; 0x24
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <std+0x3c>)
 80062b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80062b2:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <std+0x40>)
 80062b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062b6:	4b05      	ldr	r3, [pc, #20]	; (80062cc <std+0x44>)
 80062b8:	6224      	str	r4, [r4, #32]
 80062ba:	6323      	str	r3, [r4, #48]	; 0x30
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	bf00      	nop
 80062c0:	08006a79 	.word	0x08006a79
 80062c4:	08006a9b 	.word	0x08006a9b
 80062c8:	08006ad3 	.word	0x08006ad3
 80062cc:	08006af7 	.word	0x08006af7

080062d0 <_cleanup_r>:
 80062d0:	4901      	ldr	r1, [pc, #4]	; (80062d8 <_cleanup_r+0x8>)
 80062d2:	f000 b885 	b.w	80063e0 <_fwalk_reent>
 80062d6:	bf00      	nop
 80062d8:	08006235 	.word	0x08006235

080062dc <__sfmoreglue>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	1e4a      	subs	r2, r1, #1
 80062e0:	2568      	movs	r5, #104	; 0x68
 80062e2:	4355      	muls	r5, r2
 80062e4:	460e      	mov	r6, r1
 80062e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062ea:	f7ff fd77 	bl	8005ddc <_malloc_r>
 80062ee:	4604      	mov	r4, r0
 80062f0:	b140      	cbz	r0, 8006304 <__sfmoreglue+0x28>
 80062f2:	2100      	movs	r1, #0
 80062f4:	e9c0 1600 	strd	r1, r6, [r0]
 80062f8:	300c      	adds	r0, #12
 80062fa:	60a0      	str	r0, [r4, #8]
 80062fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006300:	f7ff fd07 	bl	8005d12 <memset>
 8006304:	4620      	mov	r0, r4
 8006306:	bd70      	pop	{r4, r5, r6, pc}

08006308 <__sinit>:
 8006308:	6983      	ldr	r3, [r0, #24]
 800630a:	b510      	push	{r4, lr}
 800630c:	4604      	mov	r4, r0
 800630e:	bb33      	cbnz	r3, 800635e <__sinit+0x56>
 8006310:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006314:	6503      	str	r3, [r0, #80]	; 0x50
 8006316:	4b12      	ldr	r3, [pc, #72]	; (8006360 <__sinit+0x58>)
 8006318:	4a12      	ldr	r2, [pc, #72]	; (8006364 <__sinit+0x5c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6282      	str	r2, [r0, #40]	; 0x28
 800631e:	4298      	cmp	r0, r3
 8006320:	bf04      	itt	eq
 8006322:	2301      	moveq	r3, #1
 8006324:	6183      	streq	r3, [r0, #24]
 8006326:	f000 f81f 	bl	8006368 <__sfp>
 800632a:	6060      	str	r0, [r4, #4]
 800632c:	4620      	mov	r0, r4
 800632e:	f000 f81b 	bl	8006368 <__sfp>
 8006332:	60a0      	str	r0, [r4, #8]
 8006334:	4620      	mov	r0, r4
 8006336:	f000 f817 	bl	8006368 <__sfp>
 800633a:	2200      	movs	r2, #0
 800633c:	60e0      	str	r0, [r4, #12]
 800633e:	2104      	movs	r1, #4
 8006340:	6860      	ldr	r0, [r4, #4]
 8006342:	f7ff ffa1 	bl	8006288 <std>
 8006346:	2201      	movs	r2, #1
 8006348:	2109      	movs	r1, #9
 800634a:	68a0      	ldr	r0, [r4, #8]
 800634c:	f7ff ff9c 	bl	8006288 <std>
 8006350:	2202      	movs	r2, #2
 8006352:	2112      	movs	r1, #18
 8006354:	68e0      	ldr	r0, [r4, #12]
 8006356:	f7ff ff97 	bl	8006288 <std>
 800635a:	2301      	movs	r3, #1
 800635c:	61a3      	str	r3, [r4, #24]
 800635e:	bd10      	pop	{r4, pc}
 8006360:	08062bac 	.word	0x08062bac
 8006364:	080062d1 	.word	0x080062d1

08006368 <__sfp>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <__sfp+0x70>)
 800636c:	681e      	ldr	r6, [r3, #0]
 800636e:	69b3      	ldr	r3, [r6, #24]
 8006370:	4607      	mov	r7, r0
 8006372:	b913      	cbnz	r3, 800637a <__sfp+0x12>
 8006374:	4630      	mov	r0, r6
 8006376:	f7ff ffc7 	bl	8006308 <__sinit>
 800637a:	3648      	adds	r6, #72	; 0x48
 800637c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006380:	3b01      	subs	r3, #1
 8006382:	d503      	bpl.n	800638c <__sfp+0x24>
 8006384:	6833      	ldr	r3, [r6, #0]
 8006386:	b133      	cbz	r3, 8006396 <__sfp+0x2e>
 8006388:	6836      	ldr	r6, [r6, #0]
 800638a:	e7f7      	b.n	800637c <__sfp+0x14>
 800638c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006390:	b16d      	cbz	r5, 80063ae <__sfp+0x46>
 8006392:	3468      	adds	r4, #104	; 0x68
 8006394:	e7f4      	b.n	8006380 <__sfp+0x18>
 8006396:	2104      	movs	r1, #4
 8006398:	4638      	mov	r0, r7
 800639a:	f7ff ff9f 	bl	80062dc <__sfmoreglue>
 800639e:	6030      	str	r0, [r6, #0]
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d1f1      	bne.n	8006388 <__sfp+0x20>
 80063a4:	230c      	movs	r3, #12
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4604      	mov	r4, r0
 80063aa:	4620      	mov	r0, r4
 80063ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <__sfp+0x74>)
 80063b0:	6665      	str	r5, [r4, #100]	; 0x64
 80063b2:	e9c4 5500 	strd	r5, r5, [r4]
 80063b6:	60a5      	str	r5, [r4, #8]
 80063b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80063bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80063c0:	2208      	movs	r2, #8
 80063c2:	4629      	mov	r1, r5
 80063c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063c8:	f7ff fca3 	bl	8005d12 <memset>
 80063cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063d4:	e7e9      	b.n	80063aa <__sfp+0x42>
 80063d6:	bf00      	nop
 80063d8:	08062bac 	.word	0x08062bac
 80063dc:	ffff0001 	.word	0xffff0001

080063e0 <_fwalk_reent>:
 80063e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	4680      	mov	r8, r0
 80063e6:	4689      	mov	r9, r1
 80063e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063ec:	2600      	movs	r6, #0
 80063ee:	b914      	cbnz	r4, 80063f6 <_fwalk_reent+0x16>
 80063f0:	4630      	mov	r0, r6
 80063f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80063fa:	3f01      	subs	r7, #1
 80063fc:	d501      	bpl.n	8006402 <_fwalk_reent+0x22>
 80063fe:	6824      	ldr	r4, [r4, #0]
 8006400:	e7f5      	b.n	80063ee <_fwalk_reent+0xe>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d907      	bls.n	8006418 <_fwalk_reent+0x38>
 8006408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800640c:	3301      	adds	r3, #1
 800640e:	d003      	beq.n	8006418 <_fwalk_reent+0x38>
 8006410:	4629      	mov	r1, r5
 8006412:	4640      	mov	r0, r8
 8006414:	47c8      	blx	r9
 8006416:	4306      	orrs	r6, r0
 8006418:	3568      	adds	r5, #104	; 0x68
 800641a:	e7ee      	b.n	80063fa <_fwalk_reent+0x1a>

0800641c <__swhatbuf_r>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	460e      	mov	r6, r1
 8006420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006424:	2900      	cmp	r1, #0
 8006426:	b096      	sub	sp, #88	; 0x58
 8006428:	4614      	mov	r4, r2
 800642a:	461d      	mov	r5, r3
 800642c:	da07      	bge.n	800643e <__swhatbuf_r+0x22>
 800642e:	2300      	movs	r3, #0
 8006430:	602b      	str	r3, [r5, #0]
 8006432:	89b3      	ldrh	r3, [r6, #12]
 8006434:	061a      	lsls	r2, r3, #24
 8006436:	d410      	bmi.n	800645a <__swhatbuf_r+0x3e>
 8006438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800643c:	e00e      	b.n	800645c <__swhatbuf_r+0x40>
 800643e:	466a      	mov	r2, sp
 8006440:	f000 fb80 	bl	8006b44 <_fstat_r>
 8006444:	2800      	cmp	r0, #0
 8006446:	dbf2      	blt.n	800642e <__swhatbuf_r+0x12>
 8006448:	9a01      	ldr	r2, [sp, #4]
 800644a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800644e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006452:	425a      	negs	r2, r3
 8006454:	415a      	adcs	r2, r3
 8006456:	602a      	str	r2, [r5, #0]
 8006458:	e7ee      	b.n	8006438 <__swhatbuf_r+0x1c>
 800645a:	2340      	movs	r3, #64	; 0x40
 800645c:	2000      	movs	r0, #0
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	b016      	add	sp, #88	; 0x58
 8006462:	bd70      	pop	{r4, r5, r6, pc}

08006464 <__smakebuf_r>:
 8006464:	898b      	ldrh	r3, [r1, #12]
 8006466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006468:	079d      	lsls	r5, r3, #30
 800646a:	4606      	mov	r6, r0
 800646c:	460c      	mov	r4, r1
 800646e:	d507      	bpl.n	8006480 <__smakebuf_r+0x1c>
 8006470:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	2301      	movs	r3, #1
 800647a:	6163      	str	r3, [r4, #20]
 800647c:	b002      	add	sp, #8
 800647e:	bd70      	pop	{r4, r5, r6, pc}
 8006480:	ab01      	add	r3, sp, #4
 8006482:	466a      	mov	r2, sp
 8006484:	f7ff ffca 	bl	800641c <__swhatbuf_r>
 8006488:	9900      	ldr	r1, [sp, #0]
 800648a:	4605      	mov	r5, r0
 800648c:	4630      	mov	r0, r6
 800648e:	f7ff fca5 	bl	8005ddc <_malloc_r>
 8006492:	b948      	cbnz	r0, 80064a8 <__smakebuf_r+0x44>
 8006494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006498:	059a      	lsls	r2, r3, #22
 800649a:	d4ef      	bmi.n	800647c <__smakebuf_r+0x18>
 800649c:	f023 0303 	bic.w	r3, r3, #3
 80064a0:	f043 0302 	orr.w	r3, r3, #2
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	e7e3      	b.n	8006470 <__smakebuf_r+0xc>
 80064a8:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <__smakebuf_r+0x7c>)
 80064aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	6020      	str	r0, [r4, #0]
 80064b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	9b00      	ldr	r3, [sp, #0]
 80064b8:	6163      	str	r3, [r4, #20]
 80064ba:	9b01      	ldr	r3, [sp, #4]
 80064bc:	6120      	str	r0, [r4, #16]
 80064be:	b15b      	cbz	r3, 80064d8 <__smakebuf_r+0x74>
 80064c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064c4:	4630      	mov	r0, r6
 80064c6:	f000 fb4f 	bl	8006b68 <_isatty_r>
 80064ca:	b128      	cbz	r0, 80064d8 <__smakebuf_r+0x74>
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	431d      	orrs	r5, r3
 80064dc:	81a5      	strh	r5, [r4, #12]
 80064de:	e7cd      	b.n	800647c <__smakebuf_r+0x18>
 80064e0:	080062d1 	.word	0x080062d1

080064e4 <__malloc_lock>:
 80064e4:	4770      	bx	lr

080064e6 <__malloc_unlock>:
 80064e6:	4770      	bx	lr

080064e8 <__sfputc_r>:
 80064e8:	6893      	ldr	r3, [r2, #8]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	b410      	push	{r4}
 80064f0:	6093      	str	r3, [r2, #8]
 80064f2:	da08      	bge.n	8006506 <__sfputc_r+0x1e>
 80064f4:	6994      	ldr	r4, [r2, #24]
 80064f6:	42a3      	cmp	r3, r4
 80064f8:	db01      	blt.n	80064fe <__sfputc_r+0x16>
 80064fa:	290a      	cmp	r1, #10
 80064fc:	d103      	bne.n	8006506 <__sfputc_r+0x1e>
 80064fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006502:	f7ff bd51 	b.w	8005fa8 <__swbuf_r>
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	1c58      	adds	r0, r3, #1
 800650a:	6010      	str	r0, [r2, #0]
 800650c:	7019      	strb	r1, [r3, #0]
 800650e:	4608      	mov	r0, r1
 8006510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006514:	4770      	bx	lr

08006516 <__sfputs_r>:
 8006516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006518:	4606      	mov	r6, r0
 800651a:	460f      	mov	r7, r1
 800651c:	4614      	mov	r4, r2
 800651e:	18d5      	adds	r5, r2, r3
 8006520:	42ac      	cmp	r4, r5
 8006522:	d101      	bne.n	8006528 <__sfputs_r+0x12>
 8006524:	2000      	movs	r0, #0
 8006526:	e007      	b.n	8006538 <__sfputs_r+0x22>
 8006528:	463a      	mov	r2, r7
 800652a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652e:	4630      	mov	r0, r6
 8006530:	f7ff ffda 	bl	80064e8 <__sfputc_r>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d1f3      	bne.n	8006520 <__sfputs_r+0xa>
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800653c <_vfiprintf_r>:
 800653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	460c      	mov	r4, r1
 8006542:	b09d      	sub	sp, #116	; 0x74
 8006544:	4617      	mov	r7, r2
 8006546:	461d      	mov	r5, r3
 8006548:	4606      	mov	r6, r0
 800654a:	b118      	cbz	r0, 8006554 <_vfiprintf_r+0x18>
 800654c:	6983      	ldr	r3, [r0, #24]
 800654e:	b90b      	cbnz	r3, 8006554 <_vfiprintf_r+0x18>
 8006550:	f7ff feda 	bl	8006308 <__sinit>
 8006554:	4b7c      	ldr	r3, [pc, #496]	; (8006748 <_vfiprintf_r+0x20c>)
 8006556:	429c      	cmp	r4, r3
 8006558:	d158      	bne.n	800660c <_vfiprintf_r+0xd0>
 800655a:	6874      	ldr	r4, [r6, #4]
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	0718      	lsls	r0, r3, #28
 8006560:	d55e      	bpl.n	8006620 <_vfiprintf_r+0xe4>
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05b      	beq.n	8006620 <_vfiprintf_r+0xe4>
 8006568:	2300      	movs	r3, #0
 800656a:	9309      	str	r3, [sp, #36]	; 0x24
 800656c:	2320      	movs	r3, #32
 800656e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006572:	2330      	movs	r3, #48	; 0x30
 8006574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006578:	9503      	str	r5, [sp, #12]
 800657a:	f04f 0b01 	mov.w	fp, #1
 800657e:	46b8      	mov	r8, r7
 8006580:	4645      	mov	r5, r8
 8006582:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006586:	b10b      	cbz	r3, 800658c <_vfiprintf_r+0x50>
 8006588:	2b25      	cmp	r3, #37	; 0x25
 800658a:	d154      	bne.n	8006636 <_vfiprintf_r+0xfa>
 800658c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006590:	d00b      	beq.n	80065aa <_vfiprintf_r+0x6e>
 8006592:	4653      	mov	r3, sl
 8006594:	463a      	mov	r2, r7
 8006596:	4621      	mov	r1, r4
 8006598:	4630      	mov	r0, r6
 800659a:	f7ff ffbc 	bl	8006516 <__sfputs_r>
 800659e:	3001      	adds	r0, #1
 80065a0:	f000 80c2 	beq.w	8006728 <_vfiprintf_r+0x1ec>
 80065a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a6:	4453      	add	r3, sl
 80065a8:	9309      	str	r3, [sp, #36]	; 0x24
 80065aa:	f898 3000 	ldrb.w	r3, [r8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 80ba 	beq.w	8006728 <_vfiprintf_r+0x1ec>
 80065b4:	2300      	movs	r3, #0
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	9307      	str	r3, [sp, #28]
 80065c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065c6:	931a      	str	r3, [sp, #104]	; 0x68
 80065c8:	46a8      	mov	r8, r5
 80065ca:	2205      	movs	r2, #5
 80065cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80065d0:	485e      	ldr	r0, [pc, #376]	; (800674c <_vfiprintf_r+0x210>)
 80065d2:	f7f9 fe05 	bl	80001e0 <memchr>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	bb78      	cbnz	r0, 800663a <_vfiprintf_r+0xfe>
 80065da:	06d9      	lsls	r1, r3, #27
 80065dc:	bf44      	itt	mi
 80065de:	2220      	movmi	r2, #32
 80065e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065e4:	071a      	lsls	r2, r3, #28
 80065e6:	bf44      	itt	mi
 80065e8:	222b      	movmi	r2, #43	; 0x2b
 80065ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065ee:	782a      	ldrb	r2, [r5, #0]
 80065f0:	2a2a      	cmp	r2, #42	; 0x2a
 80065f2:	d02a      	beq.n	800664a <_vfiprintf_r+0x10e>
 80065f4:	9a07      	ldr	r2, [sp, #28]
 80065f6:	46a8      	mov	r8, r5
 80065f8:	2000      	movs	r0, #0
 80065fa:	250a      	movs	r5, #10
 80065fc:	4641      	mov	r1, r8
 80065fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006602:	3b30      	subs	r3, #48	; 0x30
 8006604:	2b09      	cmp	r3, #9
 8006606:	d969      	bls.n	80066dc <_vfiprintf_r+0x1a0>
 8006608:	b360      	cbz	r0, 8006664 <_vfiprintf_r+0x128>
 800660a:	e024      	b.n	8006656 <_vfiprintf_r+0x11a>
 800660c:	4b50      	ldr	r3, [pc, #320]	; (8006750 <_vfiprintf_r+0x214>)
 800660e:	429c      	cmp	r4, r3
 8006610:	d101      	bne.n	8006616 <_vfiprintf_r+0xda>
 8006612:	68b4      	ldr	r4, [r6, #8]
 8006614:	e7a2      	b.n	800655c <_vfiprintf_r+0x20>
 8006616:	4b4f      	ldr	r3, [pc, #316]	; (8006754 <_vfiprintf_r+0x218>)
 8006618:	429c      	cmp	r4, r3
 800661a:	bf08      	it	eq
 800661c:	68f4      	ldreq	r4, [r6, #12]
 800661e:	e79d      	b.n	800655c <_vfiprintf_r+0x20>
 8006620:	4621      	mov	r1, r4
 8006622:	4630      	mov	r0, r6
 8006624:	f7ff fd12 	bl	800604c <__swsetup_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	d09d      	beq.n	8006568 <_vfiprintf_r+0x2c>
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	b01d      	add	sp, #116	; 0x74
 8006632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006636:	46a8      	mov	r8, r5
 8006638:	e7a2      	b.n	8006580 <_vfiprintf_r+0x44>
 800663a:	4a44      	ldr	r2, [pc, #272]	; (800674c <_vfiprintf_r+0x210>)
 800663c:	1a80      	subs	r0, r0, r2
 800663e:	fa0b f000 	lsl.w	r0, fp, r0
 8006642:	4318      	orrs	r0, r3
 8006644:	9004      	str	r0, [sp, #16]
 8006646:	4645      	mov	r5, r8
 8006648:	e7be      	b.n	80065c8 <_vfiprintf_r+0x8c>
 800664a:	9a03      	ldr	r2, [sp, #12]
 800664c:	1d11      	adds	r1, r2, #4
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	9103      	str	r1, [sp, #12]
 8006652:	2a00      	cmp	r2, #0
 8006654:	db01      	blt.n	800665a <_vfiprintf_r+0x11e>
 8006656:	9207      	str	r2, [sp, #28]
 8006658:	e004      	b.n	8006664 <_vfiprintf_r+0x128>
 800665a:	4252      	negs	r2, r2
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	9207      	str	r2, [sp, #28]
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	f898 3000 	ldrb.w	r3, [r8]
 8006668:	2b2e      	cmp	r3, #46	; 0x2e
 800666a:	d10e      	bne.n	800668a <_vfiprintf_r+0x14e>
 800666c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006670:	2b2a      	cmp	r3, #42	; 0x2a
 8006672:	d138      	bne.n	80066e6 <_vfiprintf_r+0x1aa>
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	9203      	str	r2, [sp, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	bfb8      	it	lt
 8006680:	f04f 33ff 	movlt.w	r3, #4294967295
 8006684:	f108 0802 	add.w	r8, r8, #2
 8006688:	9305      	str	r3, [sp, #20]
 800668a:	4d33      	ldr	r5, [pc, #204]	; (8006758 <_vfiprintf_r+0x21c>)
 800668c:	f898 1000 	ldrb.w	r1, [r8]
 8006690:	2203      	movs	r2, #3
 8006692:	4628      	mov	r0, r5
 8006694:	f7f9 fda4 	bl	80001e0 <memchr>
 8006698:	b140      	cbz	r0, 80066ac <_vfiprintf_r+0x170>
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	1b40      	subs	r0, r0, r5
 800669e:	fa03 f000 	lsl.w	r0, r3, r0
 80066a2:	9b04      	ldr	r3, [sp, #16]
 80066a4:	4303      	orrs	r3, r0
 80066a6:	f108 0801 	add.w	r8, r8, #1
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	f898 1000 	ldrb.w	r1, [r8]
 80066b0:	482a      	ldr	r0, [pc, #168]	; (800675c <_vfiprintf_r+0x220>)
 80066b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066b6:	2206      	movs	r2, #6
 80066b8:	f108 0701 	add.w	r7, r8, #1
 80066bc:	f7f9 fd90 	bl	80001e0 <memchr>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d037      	beq.n	8006734 <_vfiprintf_r+0x1f8>
 80066c4:	4b26      	ldr	r3, [pc, #152]	; (8006760 <_vfiprintf_r+0x224>)
 80066c6:	bb1b      	cbnz	r3, 8006710 <_vfiprintf_r+0x1d4>
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	3307      	adds	r3, #7
 80066cc:	f023 0307 	bic.w	r3, r3, #7
 80066d0:	3308      	adds	r3, #8
 80066d2:	9303      	str	r3, [sp, #12]
 80066d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d6:	444b      	add	r3, r9
 80066d8:	9309      	str	r3, [sp, #36]	; 0x24
 80066da:	e750      	b.n	800657e <_vfiprintf_r+0x42>
 80066dc:	fb05 3202 	mla	r2, r5, r2, r3
 80066e0:	2001      	movs	r0, #1
 80066e2:	4688      	mov	r8, r1
 80066e4:	e78a      	b.n	80065fc <_vfiprintf_r+0xc0>
 80066e6:	2300      	movs	r3, #0
 80066e8:	f108 0801 	add.w	r8, r8, #1
 80066ec:	9305      	str	r3, [sp, #20]
 80066ee:	4619      	mov	r1, r3
 80066f0:	250a      	movs	r5, #10
 80066f2:	4640      	mov	r0, r8
 80066f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066f8:	3a30      	subs	r2, #48	; 0x30
 80066fa:	2a09      	cmp	r2, #9
 80066fc:	d903      	bls.n	8006706 <_vfiprintf_r+0x1ca>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0c3      	beq.n	800668a <_vfiprintf_r+0x14e>
 8006702:	9105      	str	r1, [sp, #20]
 8006704:	e7c1      	b.n	800668a <_vfiprintf_r+0x14e>
 8006706:	fb05 2101 	mla	r1, r5, r1, r2
 800670a:	2301      	movs	r3, #1
 800670c:	4680      	mov	r8, r0
 800670e:	e7f0      	b.n	80066f2 <_vfiprintf_r+0x1b6>
 8006710:	ab03      	add	r3, sp, #12
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	4622      	mov	r2, r4
 8006716:	4b13      	ldr	r3, [pc, #76]	; (8006764 <_vfiprintf_r+0x228>)
 8006718:	a904      	add	r1, sp, #16
 800671a:	4630      	mov	r0, r6
 800671c:	f3af 8000 	nop.w
 8006720:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006724:	4681      	mov	r9, r0
 8006726:	d1d5      	bne.n	80066d4 <_vfiprintf_r+0x198>
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	065b      	lsls	r3, r3, #25
 800672c:	f53f af7e 	bmi.w	800662c <_vfiprintf_r+0xf0>
 8006730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006732:	e77d      	b.n	8006630 <_vfiprintf_r+0xf4>
 8006734:	ab03      	add	r3, sp, #12
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	4622      	mov	r2, r4
 800673a:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <_vfiprintf_r+0x228>)
 800673c:	a904      	add	r1, sp, #16
 800673e:	4630      	mov	r0, r6
 8006740:	f000 f888 	bl	8006854 <_printf_i>
 8006744:	e7ec      	b.n	8006720 <_vfiprintf_r+0x1e4>
 8006746:	bf00      	nop
 8006748:	08062bd0 	.word	0x08062bd0
 800674c:	08062c10 	.word	0x08062c10
 8006750:	08062bf0 	.word	0x08062bf0
 8006754:	08062bb0 	.word	0x08062bb0
 8006758:	08062c16 	.word	0x08062c16
 800675c:	08062c1a 	.word	0x08062c1a
 8006760:	00000000 	.word	0x00000000
 8006764:	08006517 	.word	0x08006517

08006768 <_printf_common>:
 8006768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	4691      	mov	r9, r2
 800676e:	461f      	mov	r7, r3
 8006770:	688a      	ldr	r2, [r1, #8]
 8006772:	690b      	ldr	r3, [r1, #16]
 8006774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006778:	4293      	cmp	r3, r2
 800677a:	bfb8      	it	lt
 800677c:	4613      	movlt	r3, r2
 800677e:	f8c9 3000 	str.w	r3, [r9]
 8006782:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006786:	4606      	mov	r6, r0
 8006788:	460c      	mov	r4, r1
 800678a:	b112      	cbz	r2, 8006792 <_printf_common+0x2a>
 800678c:	3301      	adds	r3, #1
 800678e:	f8c9 3000 	str.w	r3, [r9]
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	0699      	lsls	r1, r3, #26
 8006796:	bf42      	ittt	mi
 8006798:	f8d9 3000 	ldrmi.w	r3, [r9]
 800679c:	3302      	addmi	r3, #2
 800679e:	f8c9 3000 	strmi.w	r3, [r9]
 80067a2:	6825      	ldr	r5, [r4, #0]
 80067a4:	f015 0506 	ands.w	r5, r5, #6
 80067a8:	d107      	bne.n	80067ba <_printf_common+0x52>
 80067aa:	f104 0a19 	add.w	sl, r4, #25
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	f8d9 2000 	ldr.w	r2, [r9]
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	42ab      	cmp	r3, r5
 80067b8:	dc28      	bgt.n	800680c <_printf_common+0xa4>
 80067ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	3300      	adds	r3, #0
 80067c2:	bf18      	it	ne
 80067c4:	2301      	movne	r3, #1
 80067c6:	0692      	lsls	r2, r2, #26
 80067c8:	d42d      	bmi.n	8006826 <_printf_common+0xbe>
 80067ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067ce:	4639      	mov	r1, r7
 80067d0:	4630      	mov	r0, r6
 80067d2:	47c0      	blx	r8
 80067d4:	3001      	adds	r0, #1
 80067d6:	d020      	beq.n	800681a <_printf_common+0xb2>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	68e5      	ldr	r5, [r4, #12]
 80067dc:	f8d9 2000 	ldr.w	r2, [r9]
 80067e0:	f003 0306 	and.w	r3, r3, #6
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	bf08      	it	eq
 80067e8:	1aad      	subeq	r5, r5, r2
 80067ea:	68a3      	ldr	r3, [r4, #8]
 80067ec:	6922      	ldr	r2, [r4, #16]
 80067ee:	bf0c      	ite	eq
 80067f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067f4:	2500      	movne	r5, #0
 80067f6:	4293      	cmp	r3, r2
 80067f8:	bfc4      	itt	gt
 80067fa:	1a9b      	subgt	r3, r3, r2
 80067fc:	18ed      	addgt	r5, r5, r3
 80067fe:	f04f 0900 	mov.w	r9, #0
 8006802:	341a      	adds	r4, #26
 8006804:	454d      	cmp	r5, r9
 8006806:	d11a      	bne.n	800683e <_printf_common+0xd6>
 8006808:	2000      	movs	r0, #0
 800680a:	e008      	b.n	800681e <_printf_common+0xb6>
 800680c:	2301      	movs	r3, #1
 800680e:	4652      	mov	r2, sl
 8006810:	4639      	mov	r1, r7
 8006812:	4630      	mov	r0, r6
 8006814:	47c0      	blx	r8
 8006816:	3001      	adds	r0, #1
 8006818:	d103      	bne.n	8006822 <_printf_common+0xba>
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006822:	3501      	adds	r5, #1
 8006824:	e7c3      	b.n	80067ae <_printf_common+0x46>
 8006826:	18e1      	adds	r1, r4, r3
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	2030      	movs	r0, #48	; 0x30
 800682c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006830:	4422      	add	r2, r4
 8006832:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006836:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800683a:	3302      	adds	r3, #2
 800683c:	e7c5      	b.n	80067ca <_printf_common+0x62>
 800683e:	2301      	movs	r3, #1
 8006840:	4622      	mov	r2, r4
 8006842:	4639      	mov	r1, r7
 8006844:	4630      	mov	r0, r6
 8006846:	47c0      	blx	r8
 8006848:	3001      	adds	r0, #1
 800684a:	d0e6      	beq.n	800681a <_printf_common+0xb2>
 800684c:	f109 0901 	add.w	r9, r9, #1
 8006850:	e7d8      	b.n	8006804 <_printf_common+0x9c>
	...

08006854 <_printf_i>:
 8006854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006858:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800685c:	460c      	mov	r4, r1
 800685e:	7e09      	ldrb	r1, [r1, #24]
 8006860:	b085      	sub	sp, #20
 8006862:	296e      	cmp	r1, #110	; 0x6e
 8006864:	4617      	mov	r7, r2
 8006866:	4606      	mov	r6, r0
 8006868:	4698      	mov	r8, r3
 800686a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800686c:	f000 80b3 	beq.w	80069d6 <_printf_i+0x182>
 8006870:	d822      	bhi.n	80068b8 <_printf_i+0x64>
 8006872:	2963      	cmp	r1, #99	; 0x63
 8006874:	d036      	beq.n	80068e4 <_printf_i+0x90>
 8006876:	d80a      	bhi.n	800688e <_printf_i+0x3a>
 8006878:	2900      	cmp	r1, #0
 800687a:	f000 80b9 	beq.w	80069f0 <_printf_i+0x19c>
 800687e:	2958      	cmp	r1, #88	; 0x58
 8006880:	f000 8083 	beq.w	800698a <_printf_i+0x136>
 8006884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006888:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800688c:	e032      	b.n	80068f4 <_printf_i+0xa0>
 800688e:	2964      	cmp	r1, #100	; 0x64
 8006890:	d001      	beq.n	8006896 <_printf_i+0x42>
 8006892:	2969      	cmp	r1, #105	; 0x69
 8006894:	d1f6      	bne.n	8006884 <_printf_i+0x30>
 8006896:	6820      	ldr	r0, [r4, #0]
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	0605      	lsls	r5, r0, #24
 800689c:	f103 0104 	add.w	r1, r3, #4
 80068a0:	d52a      	bpl.n	80068f8 <_printf_i+0xa4>
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6011      	str	r1, [r2, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da03      	bge.n	80068b2 <_printf_i+0x5e>
 80068aa:	222d      	movs	r2, #45	; 0x2d
 80068ac:	425b      	negs	r3, r3
 80068ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80068b2:	486f      	ldr	r0, [pc, #444]	; (8006a70 <_printf_i+0x21c>)
 80068b4:	220a      	movs	r2, #10
 80068b6:	e039      	b.n	800692c <_printf_i+0xd8>
 80068b8:	2973      	cmp	r1, #115	; 0x73
 80068ba:	f000 809d 	beq.w	80069f8 <_printf_i+0x1a4>
 80068be:	d808      	bhi.n	80068d2 <_printf_i+0x7e>
 80068c0:	296f      	cmp	r1, #111	; 0x6f
 80068c2:	d020      	beq.n	8006906 <_printf_i+0xb2>
 80068c4:	2970      	cmp	r1, #112	; 0x70
 80068c6:	d1dd      	bne.n	8006884 <_printf_i+0x30>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	f043 0320 	orr.w	r3, r3, #32
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	e003      	b.n	80068da <_printf_i+0x86>
 80068d2:	2975      	cmp	r1, #117	; 0x75
 80068d4:	d017      	beq.n	8006906 <_printf_i+0xb2>
 80068d6:	2978      	cmp	r1, #120	; 0x78
 80068d8:	d1d4      	bne.n	8006884 <_printf_i+0x30>
 80068da:	2378      	movs	r3, #120	; 0x78
 80068dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068e0:	4864      	ldr	r0, [pc, #400]	; (8006a74 <_printf_i+0x220>)
 80068e2:	e055      	b.n	8006990 <_printf_i+0x13c>
 80068e4:	6813      	ldr	r3, [r2, #0]
 80068e6:	1d19      	adds	r1, r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6011      	str	r1, [r2, #0]
 80068ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f4:	2301      	movs	r3, #1
 80068f6:	e08c      	b.n	8006a12 <_printf_i+0x1be>
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6011      	str	r1, [r2, #0]
 80068fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006900:	bf18      	it	ne
 8006902:	b21b      	sxthne	r3, r3
 8006904:	e7cf      	b.n	80068a6 <_printf_i+0x52>
 8006906:	6813      	ldr	r3, [r2, #0]
 8006908:	6825      	ldr	r5, [r4, #0]
 800690a:	1d18      	adds	r0, r3, #4
 800690c:	6010      	str	r0, [r2, #0]
 800690e:	0628      	lsls	r0, r5, #24
 8006910:	d501      	bpl.n	8006916 <_printf_i+0xc2>
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	e002      	b.n	800691c <_printf_i+0xc8>
 8006916:	0668      	lsls	r0, r5, #25
 8006918:	d5fb      	bpl.n	8006912 <_printf_i+0xbe>
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	4854      	ldr	r0, [pc, #336]	; (8006a70 <_printf_i+0x21c>)
 800691e:	296f      	cmp	r1, #111	; 0x6f
 8006920:	bf14      	ite	ne
 8006922:	220a      	movne	r2, #10
 8006924:	2208      	moveq	r2, #8
 8006926:	2100      	movs	r1, #0
 8006928:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800692c:	6865      	ldr	r5, [r4, #4]
 800692e:	60a5      	str	r5, [r4, #8]
 8006930:	2d00      	cmp	r5, #0
 8006932:	f2c0 8095 	blt.w	8006a60 <_printf_i+0x20c>
 8006936:	6821      	ldr	r1, [r4, #0]
 8006938:	f021 0104 	bic.w	r1, r1, #4
 800693c:	6021      	str	r1, [r4, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d13d      	bne.n	80069be <_printf_i+0x16a>
 8006942:	2d00      	cmp	r5, #0
 8006944:	f040 808e 	bne.w	8006a64 <_printf_i+0x210>
 8006948:	4665      	mov	r5, ip
 800694a:	2a08      	cmp	r2, #8
 800694c:	d10b      	bne.n	8006966 <_printf_i+0x112>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	07db      	lsls	r3, r3, #31
 8006952:	d508      	bpl.n	8006966 <_printf_i+0x112>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	6862      	ldr	r2, [r4, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	bfde      	ittt	le
 800695c:	2330      	movle	r3, #48	; 0x30
 800695e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006962:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006966:	ebac 0305 	sub.w	r3, ip, r5
 800696a:	6123      	str	r3, [r4, #16]
 800696c:	f8cd 8000 	str.w	r8, [sp]
 8006970:	463b      	mov	r3, r7
 8006972:	aa03      	add	r2, sp, #12
 8006974:	4621      	mov	r1, r4
 8006976:	4630      	mov	r0, r6
 8006978:	f7ff fef6 	bl	8006768 <_printf_common>
 800697c:	3001      	adds	r0, #1
 800697e:	d14d      	bne.n	8006a1c <_printf_i+0x1c8>
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	b005      	add	sp, #20
 8006986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800698a:	4839      	ldr	r0, [pc, #228]	; (8006a70 <_printf_i+0x21c>)
 800698c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006990:	6813      	ldr	r3, [r2, #0]
 8006992:	6821      	ldr	r1, [r4, #0]
 8006994:	1d1d      	adds	r5, r3, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6015      	str	r5, [r2, #0]
 800699a:	060a      	lsls	r2, r1, #24
 800699c:	d50b      	bpl.n	80069b6 <_printf_i+0x162>
 800699e:	07ca      	lsls	r2, r1, #31
 80069a0:	bf44      	itt	mi
 80069a2:	f041 0120 	orrmi.w	r1, r1, #32
 80069a6:	6021      	strmi	r1, [r4, #0]
 80069a8:	b91b      	cbnz	r3, 80069b2 <_printf_i+0x15e>
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	f022 0220 	bic.w	r2, r2, #32
 80069b0:	6022      	str	r2, [r4, #0]
 80069b2:	2210      	movs	r2, #16
 80069b4:	e7b7      	b.n	8006926 <_printf_i+0xd2>
 80069b6:	064d      	lsls	r5, r1, #25
 80069b8:	bf48      	it	mi
 80069ba:	b29b      	uxthmi	r3, r3
 80069bc:	e7ef      	b.n	800699e <_printf_i+0x14a>
 80069be:	4665      	mov	r5, ip
 80069c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80069c4:	fb02 3311 	mls	r3, r2, r1, r3
 80069c8:	5cc3      	ldrb	r3, [r0, r3]
 80069ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80069ce:	460b      	mov	r3, r1
 80069d0:	2900      	cmp	r1, #0
 80069d2:	d1f5      	bne.n	80069c0 <_printf_i+0x16c>
 80069d4:	e7b9      	b.n	800694a <_printf_i+0xf6>
 80069d6:	6813      	ldr	r3, [r2, #0]
 80069d8:	6825      	ldr	r5, [r4, #0]
 80069da:	6961      	ldr	r1, [r4, #20]
 80069dc:	1d18      	adds	r0, r3, #4
 80069de:	6010      	str	r0, [r2, #0]
 80069e0:	0628      	lsls	r0, r5, #24
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	d501      	bpl.n	80069ea <_printf_i+0x196>
 80069e6:	6019      	str	r1, [r3, #0]
 80069e8:	e002      	b.n	80069f0 <_printf_i+0x19c>
 80069ea:	066a      	lsls	r2, r5, #25
 80069ec:	d5fb      	bpl.n	80069e6 <_printf_i+0x192>
 80069ee:	8019      	strh	r1, [r3, #0]
 80069f0:	2300      	movs	r3, #0
 80069f2:	6123      	str	r3, [r4, #16]
 80069f4:	4665      	mov	r5, ip
 80069f6:	e7b9      	b.n	800696c <_printf_i+0x118>
 80069f8:	6813      	ldr	r3, [r2, #0]
 80069fa:	1d19      	adds	r1, r3, #4
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	681d      	ldr	r5, [r3, #0]
 8006a00:	6862      	ldr	r2, [r4, #4]
 8006a02:	2100      	movs	r1, #0
 8006a04:	4628      	mov	r0, r5
 8006a06:	f7f9 fbeb 	bl	80001e0 <memchr>
 8006a0a:	b108      	cbz	r0, 8006a10 <_printf_i+0x1bc>
 8006a0c:	1b40      	subs	r0, r0, r5
 8006a0e:	6060      	str	r0, [r4, #4]
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	6123      	str	r3, [r4, #16]
 8006a14:	2300      	movs	r3, #0
 8006a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1a:	e7a7      	b.n	800696c <_printf_i+0x118>
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	462a      	mov	r2, r5
 8006a20:	4639      	mov	r1, r7
 8006a22:	4630      	mov	r0, r6
 8006a24:	47c0      	blx	r8
 8006a26:	3001      	adds	r0, #1
 8006a28:	d0aa      	beq.n	8006980 <_printf_i+0x12c>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	079b      	lsls	r3, r3, #30
 8006a2e:	d413      	bmi.n	8006a58 <_printf_i+0x204>
 8006a30:	68e0      	ldr	r0, [r4, #12]
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	4298      	cmp	r0, r3
 8006a36:	bfb8      	it	lt
 8006a38:	4618      	movlt	r0, r3
 8006a3a:	e7a3      	b.n	8006984 <_printf_i+0x130>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	464a      	mov	r2, r9
 8006a40:	4639      	mov	r1, r7
 8006a42:	4630      	mov	r0, r6
 8006a44:	47c0      	blx	r8
 8006a46:	3001      	adds	r0, #1
 8006a48:	d09a      	beq.n	8006980 <_printf_i+0x12c>
 8006a4a:	3501      	adds	r5, #1
 8006a4c:	68e3      	ldr	r3, [r4, #12]
 8006a4e:	9a03      	ldr	r2, [sp, #12]
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	42ab      	cmp	r3, r5
 8006a54:	dcf2      	bgt.n	8006a3c <_printf_i+0x1e8>
 8006a56:	e7eb      	b.n	8006a30 <_printf_i+0x1dc>
 8006a58:	2500      	movs	r5, #0
 8006a5a:	f104 0919 	add.w	r9, r4, #25
 8006a5e:	e7f5      	b.n	8006a4c <_printf_i+0x1f8>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1ac      	bne.n	80069be <_printf_i+0x16a>
 8006a64:	7803      	ldrb	r3, [r0, #0]
 8006a66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a6e:	e76c      	b.n	800694a <_printf_i+0xf6>
 8006a70:	08062c21 	.word	0x08062c21
 8006a74:	08062c32 	.word	0x08062c32

08006a78 <__sread>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a80:	f000 f894 	bl	8006bac <_read_r>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	bfab      	itete	ge
 8006a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a8c:	181b      	addge	r3, r3, r0
 8006a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a92:	bfac      	ite	ge
 8006a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a96:	81a3      	strhlt	r3, [r4, #12]
 8006a98:	bd10      	pop	{r4, pc}

08006a9a <__swrite>:
 8006a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9e:	461f      	mov	r7, r3
 8006aa0:	898b      	ldrh	r3, [r1, #12]
 8006aa2:	05db      	lsls	r3, r3, #23
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	d505      	bpl.n	8006ab8 <__swrite+0x1e>
 8006aac:	2302      	movs	r3, #2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab4:	f000 f868 	bl	8006b88 <_lseek_r>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	4628      	mov	r0, r5
 8006aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ace:	f000 b817 	b.w	8006b00 <_write_r>

08006ad2 <__sseek>:
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ada:	f000 f855 	bl	8006b88 <_lseek_r>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	bf15      	itete	ne
 8006ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aee:	81a3      	strheq	r3, [r4, #12]
 8006af0:	bf18      	it	ne
 8006af2:	81a3      	strhne	r3, [r4, #12]
 8006af4:	bd10      	pop	{r4, pc}

08006af6 <__sclose>:
 8006af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afa:	f000 b813 	b.w	8006b24 <_close_r>
	...

08006b00 <_write_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4c07      	ldr	r4, [pc, #28]	; (8006b20 <_write_r+0x20>)
 8006b04:	4605      	mov	r5, r0
 8006b06:	4608      	mov	r0, r1
 8006b08:	4611      	mov	r1, r2
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	6022      	str	r2, [r4, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f000 fcb6 	bl	8007480 <_write>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_write_r+0x1e>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_write_r+0x1e>
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	2000255c 	.word	0x2000255c

08006b24 <_close_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4c06      	ldr	r4, [pc, #24]	; (8006b40 <_close_r+0x1c>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	f000 fc7e 	bl	8007430 <_close>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_close_r+0x1a>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_close_r+0x1a>
 8006b3c:	602b      	str	r3, [r5, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	2000255c 	.word	0x2000255c

08006b44 <_fstat_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4c07      	ldr	r4, [pc, #28]	; (8006b64 <_fstat_r+0x20>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	f000 fc75 	bl	8007440 <_fstat>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d102      	bne.n	8006b60 <_fstat_r+0x1c>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	b103      	cbz	r3, 8006b60 <_fstat_r+0x1c>
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	2000255c 	.word	0x2000255c

08006b68 <_isatty_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4c06      	ldr	r4, [pc, #24]	; (8006b84 <_isatty_r+0x1c>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4605      	mov	r5, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	f000 fc6c 	bl	8007450 <_isatty>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_isatty_r+0x1a>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_isatty_r+0x1a>
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	2000255c 	.word	0x2000255c

08006b88 <_lseek_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4c07      	ldr	r4, [pc, #28]	; (8006ba8 <_lseek_r+0x20>)
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	4608      	mov	r0, r1
 8006b90:	4611      	mov	r1, r2
 8006b92:	2200      	movs	r2, #0
 8006b94:	6022      	str	r2, [r4, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f000 fc62 	bl	8007460 <_lseek>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_lseek_r+0x1e>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_lseek_r+0x1e>
 8006ba4:	602b      	str	r3, [r5, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	2000255c 	.word	0x2000255c

08006bac <_read_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4c07      	ldr	r4, [pc, #28]	; (8006bcc <_read_r+0x20>)
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	6022      	str	r2, [r4, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f000 fc58 	bl	8007470 <_read>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_read_r+0x1e>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_read_r+0x1e>
 8006bc8:	602b      	str	r3, [r5, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	2000255c 	.word	0x2000255c

08006bd0 <exp>:
 8006bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd2:	ed2d 8b02 	vpush	{d8}
 8006bd6:	4e38      	ldr	r6, [pc, #224]	; (8006cb8 <exp+0xe8>)
 8006bd8:	b08b      	sub	sp, #44	; 0x2c
 8006bda:	ec55 4b10 	vmov	r4, r5, d0
 8006bde:	f000 f8f3 	bl	8006dc8 <__ieee754_exp>
 8006be2:	f996 3000 	ldrsb.w	r3, [r6]
 8006be6:	eeb0 8a40 	vmov.f32	s16, s0
 8006bea:	eef0 8a60 	vmov.f32	s17, s1
 8006bee:	3301      	adds	r3, #1
 8006bf0:	d02c      	beq.n	8006c4c <exp+0x7c>
 8006bf2:	ec45 4b10 	vmov	d0, r4, r5
 8006bf6:	f000 fc09 	bl	800740c <finite>
 8006bfa:	b338      	cbz	r0, 8006c4c <exp+0x7c>
 8006bfc:	a32a      	add	r3, pc, #168	; (adr r3, 8006ca8 <exp+0xd8>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	4620      	mov	r0, r4
 8006c04:	4629      	mov	r1, r5
 8006c06:	f7f9 ff87 	bl	8000b18 <__aeabi_dcmpgt>
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d030      	beq.n	8006c72 <exp+0xa2>
 8006c10:	2303      	movs	r3, #3
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	4b29      	ldr	r3, [pc, #164]	; (8006cbc <exp+0xec>)
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9308      	str	r3, [sp, #32]
 8006c1c:	f996 3000 	ldrsb.w	r3, [r6]
 8006c20:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006c24:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006c28:	b9c3      	cbnz	r3, 8006c5c <exp+0x8c>
 8006c2a:	4b25      	ldr	r3, [pc, #148]	; (8006cc0 <exp+0xf0>)
 8006c2c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006c30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c34:	4668      	mov	r0, sp
 8006c36:	f000 fbf1 	bl	800741c <matherr>
 8006c3a:	b1a8      	cbz	r0, 8006c68 <exp+0x98>
 8006c3c:	9b08      	ldr	r3, [sp, #32]
 8006c3e:	b11b      	cbz	r3, 8006c48 <exp+0x78>
 8006c40:	f7ff f822 	bl	8005c88 <__errno>
 8006c44:	9b08      	ldr	r3, [sp, #32]
 8006c46:	6003      	str	r3, [r0, #0]
 8006c48:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006c4c:	eeb0 0a48 	vmov.f32	s0, s16
 8006c50:	eef0 0a68 	vmov.f32	s1, s17
 8006c54:	b00b      	add	sp, #44	; 0x2c
 8006c56:	ecbd 8b02 	vpop	{d8}
 8006c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c5c:	4919      	ldr	r1, [pc, #100]	; (8006cc4 <exp+0xf4>)
 8006c5e:	2000      	movs	r0, #0
 8006c60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d1e5      	bne.n	8006c34 <exp+0x64>
 8006c68:	f7ff f80e 	bl	8005c88 <__errno>
 8006c6c:	2322      	movs	r3, #34	; 0x22
 8006c6e:	6003      	str	r3, [r0, #0]
 8006c70:	e7e4      	b.n	8006c3c <exp+0x6c>
 8006c72:	a30f      	add	r3, pc, #60	; (adr r3, 8006cb0 <exp+0xe0>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	4620      	mov	r0, r4
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	f7f9 ff2e 	bl	8000adc <__aeabi_dcmplt>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d0e3      	beq.n	8006c4c <exp+0x7c>
 8006c84:	2304      	movs	r3, #4
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <exp+0xec>)
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c94:	9708      	str	r7, [sp, #32]
 8006c96:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006c9a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006c9e:	f996 3000 	ldrsb.w	r3, [r6]
 8006ca2:	e7df      	b.n	8006c64 <exp+0x94>
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	fefa39ef 	.word	0xfefa39ef
 8006cac:	40862e42 	.word	0x40862e42
 8006cb0:	d52d3051 	.word	0xd52d3051
 8006cb4:	c0874910 	.word	0xc0874910
 8006cb8:	20000f34 	.word	0x20000f34
 8006cbc:	08062c43 	.word	0x08062c43
 8006cc0:	47efffff 	.word	0x47efffff
 8006cc4:	7ff00000 	.word	0x7ff00000

08006cc8 <log>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	ed2d 8b02 	vpush	{d8}
 8006cce:	b08a      	sub	sp, #40	; 0x28
 8006cd0:	ec55 4b10 	vmov	r4, r5, d0
 8006cd4:	f000 f9e8 	bl	80070a8 <__ieee754_log>
 8006cd8:	4b36      	ldr	r3, [pc, #216]	; (8006db4 <log+0xec>)
 8006cda:	eeb0 8a40 	vmov.f32	s16, s0
 8006cde:	eef0 8a60 	vmov.f32	s17, s1
 8006ce2:	f993 6000 	ldrsb.w	r6, [r3]
 8006ce6:	1c73      	adds	r3, r6, #1
 8006ce8:	d05b      	beq.n	8006da2 <log+0xda>
 8006cea:	4622      	mov	r2, r4
 8006cec:	462b      	mov	r3, r5
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 ff1b 	bl	8000b2c <__aeabi_dcmpun>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d153      	bne.n	8006da2 <log+0xda>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 ff09 	bl	8000b18 <__aeabi_dcmpgt>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d14b      	bne.n	8006da2 <log+0xda>
 8006d0a:	4b2b      	ldr	r3, [pc, #172]	; (8006db8 <log+0xf0>)
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	9008      	str	r0, [sp, #32]
 8006d10:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006d14:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006d18:	b9a6      	cbnz	r6, 8006d44 <log+0x7c>
 8006d1a:	4b28      	ldr	r3, [pc, #160]	; (8006dbc <log+0xf4>)
 8006d1c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006d20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d24:	4620      	mov	r0, r4
 8006d26:	2200      	movs	r2, #0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	f7f9 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d30:	bb40      	cbnz	r0, 8006d84 <log+0xbc>
 8006d32:	2301      	movs	r3, #1
 8006d34:	2e02      	cmp	r6, #2
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	d119      	bne.n	8006d6e <log+0xa6>
 8006d3a:	f7fe ffa5 	bl	8005c88 <__errno>
 8006d3e:	2321      	movs	r3, #33	; 0x21
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	e019      	b.n	8006d78 <log+0xb0>
 8006d44:	4b1e      	ldr	r3, [pc, #120]	; (8006dc0 <log+0xf8>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2300      	movs	r3, #0
 8006d52:	4629      	mov	r1, r5
 8006d54:	f7f9 feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d0ea      	beq.n	8006d32 <log+0x6a>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	429e      	cmp	r6, r3
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	d111      	bne.n	8006d88 <log+0xc0>
 8006d64:	f7fe ff90 	bl	8005c88 <__errno>
 8006d68:	2322      	movs	r3, #34	; 0x22
 8006d6a:	6003      	str	r3, [r0, #0]
 8006d6c:	e011      	b.n	8006d92 <log+0xca>
 8006d6e:	4668      	mov	r0, sp
 8006d70:	f000 fb54 	bl	800741c <matherr>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d0e0      	beq.n	8006d3a <log+0x72>
 8006d78:	4812      	ldr	r0, [pc, #72]	; (8006dc4 <log+0xfc>)
 8006d7a:	f000 fb51 	bl	8007420 <nan>
 8006d7e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006d82:	e006      	b.n	8006d92 <log+0xca>
 8006d84:	2302      	movs	r3, #2
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4668      	mov	r0, sp
 8006d8a:	f000 fb47 	bl	800741c <matherr>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d0e8      	beq.n	8006d64 <log+0x9c>
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	b11b      	cbz	r3, 8006d9e <log+0xd6>
 8006d96:	f7fe ff77 	bl	8005c88 <__errno>
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	6003      	str	r3, [r0, #0]
 8006d9e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006da2:	eeb0 0a48 	vmov.f32	s0, s16
 8006da6:	eef0 0a68 	vmov.f32	s1, s17
 8006daa:	b00a      	add	sp, #40	; 0x28
 8006dac:	ecbd 8b02 	vpop	{d8}
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
 8006db2:	bf00      	nop
 8006db4:	20000f34 	.word	0x20000f34
 8006db8:	08062c47 	.word	0x08062c47
 8006dbc:	c7efffff 	.word	0xc7efffff
 8006dc0:	fff00000 	.word	0xfff00000
 8006dc4:	08062c15 	.word	0x08062c15

08006dc8 <__ieee754_exp>:
 8006dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dcc:	ec55 4b10 	vmov	r4, r5, d0
 8006dd0:	4aab      	ldr	r2, [pc, #684]	; (8007080 <__ieee754_exp+0x2b8>)
 8006dd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006dd6:	4296      	cmp	r6, r2
 8006dd8:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 8006ddc:	d932      	bls.n	8006e44 <__ieee754_exp+0x7c>
 8006dde:	4aa9      	ldr	r2, [pc, #676]	; (8007084 <__ieee754_exp+0x2bc>)
 8006de0:	4296      	cmp	r6, r2
 8006de2:	d913      	bls.n	8006e0c <__ieee754_exp+0x44>
 8006de4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006de8:	4323      	orrs	r3, r4
 8006dea:	ee10 2a10 	vmov	r2, s0
 8006dee:	d007      	beq.n	8006e00 <__ieee754_exp+0x38>
 8006df0:	462b      	mov	r3, r5
 8006df2:	4620      	mov	r0, r4
 8006df4:	4629      	mov	r1, r5
 8006df6:	f7f9 fa49 	bl	800028c <__adddf3>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	460d      	mov	r5, r1
 8006dfe:	e000      	b.n	8006e02 <__ieee754_exp+0x3a>
 8006e00:	b9ef      	cbnz	r7, 8006e3e <__ieee754_exp+0x76>
 8006e02:	ec45 4b10 	vmov	d0, r4, r5
 8006e06:	b004      	add	sp, #16
 8006e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0c:	a386      	add	r3, pc, #536	; (adr r3, 8007028 <__ieee754_exp+0x260>)
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	ee10 0a10 	vmov	r0, s0
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 fe7e 	bl	8000b18 <__aeabi_dcmpgt>
 8006e1c:	b138      	cbz	r0, 8006e2e <__ieee754_exp+0x66>
 8006e1e:	a384      	add	r3, pc, #528	; (adr r3, 8007030 <__ieee754_exp+0x268>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	f7f9 fbe6 	bl	80005f8 <__aeabi_dmul>
 8006e2c:	e7e5      	b.n	8006dfa <__ieee754_exp+0x32>
 8006e2e:	a382      	add	r3, pc, #520	; (adr r3, 8007038 <__ieee754_exp+0x270>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	4620      	mov	r0, r4
 8006e36:	4629      	mov	r1, r5
 8006e38:	f7f9 fe50 	bl	8000adc <__aeabi_dcmplt>
 8006e3c:	b130      	cbz	r0, 8006e4c <__ieee754_exp+0x84>
 8006e3e:	2400      	movs	r4, #0
 8006e40:	2500      	movs	r5, #0
 8006e42:	e7de      	b.n	8006e02 <__ieee754_exp+0x3a>
 8006e44:	4b90      	ldr	r3, [pc, #576]	; (8007088 <__ieee754_exp+0x2c0>)
 8006e46:	429e      	cmp	r6, r3
 8006e48:	f240 80a6 	bls.w	8006f98 <__ieee754_exp+0x1d0>
 8006e4c:	4b8f      	ldr	r3, [pc, #572]	; (800708c <__ieee754_exp+0x2c4>)
 8006e4e:	429e      	cmp	r6, r3
 8006e50:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8006e54:	d875      	bhi.n	8006f42 <__ieee754_exp+0x17a>
 8006e56:	4b8e      	ldr	r3, [pc, #568]	; (8007090 <__ieee754_exp+0x2c8>)
 8006e58:	4e8e      	ldr	r6, [pc, #568]	; (8007094 <__ieee754_exp+0x2cc>)
 8006e5a:	4443      	add	r3, r8
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	4620      	mov	r0, r4
 8006e62:	4629      	mov	r1, r5
 8006e64:	f7f9 fa10 	bl	8000288 <__aeabi_dsub>
 8006e68:	4446      	add	r6, r8
 8006e6a:	e9cd 0100 	strd	r0, r1, [sp]
 8006e6e:	e9d6 8900 	ldrd	r8, r9, [r6]
 8006e72:	f1c7 0a01 	rsb	sl, r7, #1
 8006e76:	ebaa 0a07 	sub.w	sl, sl, r7
 8006e7a:	4642      	mov	r2, r8
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e82:	f7f9 fa01 	bl	8000288 <__aeabi_dsub>
 8006e86:	4604      	mov	r4, r0
 8006e88:	460d      	mov	r5, r1
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	4620      	mov	r0, r4
 8006e90:	4629      	mov	r1, r5
 8006e92:	f7f9 fbb1 	bl	80005f8 <__aeabi_dmul>
 8006e96:	a36a      	add	r3, pc, #424	; (adr r3, 8007040 <__ieee754_exp+0x278>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	460f      	mov	r7, r1
 8006ea0:	f7f9 fbaa 	bl	80005f8 <__aeabi_dmul>
 8006ea4:	a368      	add	r3, pc, #416	; (adr r3, 8007048 <__ieee754_exp+0x280>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f7f9 f9ed 	bl	8000288 <__aeabi_dsub>
 8006eae:	4632      	mov	r2, r6
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	f7f9 fba1 	bl	80005f8 <__aeabi_dmul>
 8006eb6:	a366      	add	r3, pc, #408	; (adr r3, 8007050 <__ieee754_exp+0x288>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f7f9 f9e6 	bl	800028c <__adddf3>
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	f7f9 fb98 	bl	80005f8 <__aeabi_dmul>
 8006ec8:	a363      	add	r3, pc, #396	; (adr r3, 8007058 <__ieee754_exp+0x290>)
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f7f9 f9db 	bl	8000288 <__aeabi_dsub>
 8006ed2:	4632      	mov	r2, r6
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	f7f9 fb8f 	bl	80005f8 <__aeabi_dmul>
 8006eda:	a361      	add	r3, pc, #388	; (adr r3, 8007060 <__ieee754_exp+0x298>)
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f7f9 f9d4 	bl	800028c <__adddf3>
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	f7f9 fb86 	bl	80005f8 <__aeabi_dmul>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f7f9 f9c8 	bl	8000288 <__aeabi_dsub>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4606      	mov	r6, r0
 8006efe:	460f      	mov	r7, r1
 8006f00:	4620      	mov	r0, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 fb78 	bl	80005f8 <__aeabi_dmul>
 8006f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f0c:	f1ba 0f00 	cmp.w	sl, #0
 8006f10:	d15c      	bne.n	8006fcc <__ieee754_exp+0x204>
 8006f12:	2200      	movs	r2, #0
 8006f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 f9b4 	bl	8000288 <__aeabi_dsub>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f28:	f7f9 fc90 	bl	800084c <__aeabi_ddiv>
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	462b      	mov	r3, r5
 8006f30:	f7f9 f9aa 	bl	8000288 <__aeabi_dsub>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4957      	ldr	r1, [pc, #348]	; (8007098 <__ieee754_exp+0x2d0>)
 8006f3c:	f7f9 f9a4 	bl	8000288 <__aeabi_dsub>
 8006f40:	e75b      	b.n	8006dfa <__ieee754_exp+0x32>
 8006f42:	4e56      	ldr	r6, [pc, #344]	; (800709c <__ieee754_exp+0x2d4>)
 8006f44:	a348      	add	r3, pc, #288	; (adr r3, 8007068 <__ieee754_exp+0x2a0>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	4446      	add	r6, r8
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 fb52 	bl	80005f8 <__aeabi_dmul>
 8006f54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f58:	f7f9 f998 	bl	800028c <__adddf3>
 8006f5c:	f7f9 fdfc 	bl	8000b58 <__aeabi_d2iz>
 8006f60:	4682      	mov	sl, r0
 8006f62:	f7f9 fadf 	bl	8000524 <__aeabi_i2d>
 8006f66:	a342      	add	r3, pc, #264	; (adr r3, 8007070 <__ieee754_exp+0x2a8>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	460f      	mov	r7, r1
 8006f70:	f7f9 fb42 	bl	80005f8 <__aeabi_dmul>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4620      	mov	r0, r4
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	f7f9 f984 	bl	8000288 <__aeabi_dsub>
 8006f80:	a33d      	add	r3, pc, #244	; (adr r3, 8007078 <__ieee754_exp+0x2b0>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	e9cd 0100 	strd	r0, r1, [sp]
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	f7f9 fb33 	bl	80005f8 <__aeabi_dmul>
 8006f92:	4680      	mov	r8, r0
 8006f94:	4689      	mov	r9, r1
 8006f96:	e770      	b.n	8006e7a <__ieee754_exp+0xb2>
 8006f98:	4b41      	ldr	r3, [pc, #260]	; (80070a0 <__ieee754_exp+0x2d8>)
 8006f9a:	429e      	cmp	r6, r3
 8006f9c:	d811      	bhi.n	8006fc2 <__ieee754_exp+0x1fa>
 8006f9e:	a324      	add	r3, pc, #144	; (adr r3, 8007030 <__ieee754_exp+0x268>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	ee10 0a10 	vmov	r0, s0
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 f96f 	bl	800028c <__adddf3>
 8006fae:	2200      	movs	r2, #0
 8006fb0:	4b39      	ldr	r3, [pc, #228]	; (8007098 <__ieee754_exp+0x2d0>)
 8006fb2:	f7f9 fdb1 	bl	8000b18 <__aeabi_dcmpgt>
 8006fb6:	b138      	cbz	r0, 8006fc8 <__ieee754_exp+0x200>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4b37      	ldr	r3, [pc, #220]	; (8007098 <__ieee754_exp+0x2d0>)
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	e719      	b.n	8006df6 <__ieee754_exp+0x2e>
 8006fc2:	f04f 0a00 	mov.w	sl, #0
 8006fc6:	e760      	b.n	8006e8a <__ieee754_exp+0xc2>
 8006fc8:	4682      	mov	sl, r0
 8006fca:	e75e      	b.n	8006e8a <__ieee754_exp+0xc2>
 8006fcc:	4632      	mov	r2, r6
 8006fce:	463b      	mov	r3, r7
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006fd6:	f7f9 f957 	bl	8000288 <__aeabi_dsub>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe2:	f7f9 fc33 	bl	800084c <__aeabi_ddiv>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4640      	mov	r0, r8
 8006fec:	4649      	mov	r1, r9
 8006fee:	f7f9 f94b 	bl	8000288 <__aeabi_dsub>
 8006ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ff6:	f7f9 f947 	bl	8000288 <__aeabi_dsub>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	2000      	movs	r0, #0
 8007000:	4925      	ldr	r1, [pc, #148]	; (8007098 <__ieee754_exp+0x2d0>)
 8007002:	f7f9 f941 	bl	8000288 <__aeabi_dsub>
 8007006:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800700a:	4592      	cmp	sl, r2
 800700c:	db02      	blt.n	8007014 <__ieee754_exp+0x24c>
 800700e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007012:	e6f2      	b.n	8006dfa <__ieee754_exp+0x32>
 8007014:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007018:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800701c:	2200      	movs	r2, #0
 800701e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8007022:	e701      	b.n	8006e28 <__ieee754_exp+0x60>
 8007024:	f3af 8000 	nop.w
 8007028:	fefa39ef 	.word	0xfefa39ef
 800702c:	40862e42 	.word	0x40862e42
 8007030:	8800759c 	.word	0x8800759c
 8007034:	7e37e43c 	.word	0x7e37e43c
 8007038:	d52d3051 	.word	0xd52d3051
 800703c:	c0874910 	.word	0xc0874910
 8007040:	72bea4d0 	.word	0x72bea4d0
 8007044:	3e663769 	.word	0x3e663769
 8007048:	c5d26bf1 	.word	0xc5d26bf1
 800704c:	3ebbbd41 	.word	0x3ebbbd41
 8007050:	af25de2c 	.word	0xaf25de2c
 8007054:	3f11566a 	.word	0x3f11566a
 8007058:	16bebd93 	.word	0x16bebd93
 800705c:	3f66c16c 	.word	0x3f66c16c
 8007060:	5555553e 	.word	0x5555553e
 8007064:	3fc55555 	.word	0x3fc55555
 8007068:	652b82fe 	.word	0x652b82fe
 800706c:	3ff71547 	.word	0x3ff71547
 8007070:	fee00000 	.word	0xfee00000
 8007074:	3fe62e42 	.word	0x3fe62e42
 8007078:	35793c76 	.word	0x35793c76
 800707c:	3dea39ef 	.word	0x3dea39ef
 8007080:	40862e41 	.word	0x40862e41
 8007084:	7fefffff 	.word	0x7fefffff
 8007088:	3fd62e42 	.word	0x3fd62e42
 800708c:	3ff0a2b1 	.word	0x3ff0a2b1
 8007090:	08062c60 	.word	0x08062c60
 8007094:	08062c70 	.word	0x08062c70
 8007098:	3ff00000 	.word	0x3ff00000
 800709c:	08062c50 	.word	0x08062c50
 80070a0:	3e2fffff 	.word	0x3e2fffff
 80070a4:	00000000 	.word	0x00000000

080070a8 <__ieee754_log>:
 80070a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	ec51 0b10 	vmov	r0, r1, d0
 80070b0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80070b4:	b087      	sub	sp, #28
 80070b6:	460d      	mov	r5, r1
 80070b8:	da27      	bge.n	800710a <__ieee754_log+0x62>
 80070ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070be:	4303      	orrs	r3, r0
 80070c0:	ee10 2a10 	vmov	r2, s0
 80070c4:	d10a      	bne.n	80070dc <__ieee754_log+0x34>
 80070c6:	49cc      	ldr	r1, [pc, #816]	; (80073f8 <__ieee754_log+0x350>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	2300      	movs	r3, #0
 80070cc:	2000      	movs	r0, #0
 80070ce:	f7f9 fbbd 	bl	800084c <__aeabi_ddiv>
 80070d2:	ec41 0b10 	vmov	d0, r0, r1
 80070d6:	b007      	add	sp, #28
 80070d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070dc:	2900      	cmp	r1, #0
 80070de:	da05      	bge.n	80070ec <__ieee754_log+0x44>
 80070e0:	460b      	mov	r3, r1
 80070e2:	f7f9 f8d1 	bl	8000288 <__aeabi_dsub>
 80070e6:	2200      	movs	r2, #0
 80070e8:	2300      	movs	r3, #0
 80070ea:	e7f0      	b.n	80070ce <__ieee754_log+0x26>
 80070ec:	4bc3      	ldr	r3, [pc, #780]	; (80073fc <__ieee754_log+0x354>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	f7f9 fa82 	bl	80005f8 <__aeabi_dmul>
 80070f4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80070f8:	460d      	mov	r5, r1
 80070fa:	4ac1      	ldr	r2, [pc, #772]	; (8007400 <__ieee754_log+0x358>)
 80070fc:	4295      	cmp	r5, r2
 80070fe:	dd06      	ble.n	800710e <__ieee754_log+0x66>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	f7f9 f8c2 	bl	800028c <__adddf3>
 8007108:	e7e3      	b.n	80070d2 <__ieee754_log+0x2a>
 800710a:	2300      	movs	r3, #0
 800710c:	e7f5      	b.n	80070fa <__ieee754_log+0x52>
 800710e:	152c      	asrs	r4, r5, #20
 8007110:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007114:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007118:	441c      	add	r4, r3
 800711a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800711e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007126:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800712a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800712e:	ea42 0105 	orr.w	r1, r2, r5
 8007132:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007136:	2200      	movs	r2, #0
 8007138:	4bb2      	ldr	r3, [pc, #712]	; (8007404 <__ieee754_log+0x35c>)
 800713a:	f7f9 f8a5 	bl	8000288 <__aeabi_dsub>
 800713e:	1cab      	adds	r3, r5, #2
 8007140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007144:	2b02      	cmp	r3, #2
 8007146:	4682      	mov	sl, r0
 8007148:	468b      	mov	fp, r1
 800714a:	f04f 0200 	mov.w	r2, #0
 800714e:	dc53      	bgt.n	80071f8 <__ieee754_log+0x150>
 8007150:	2300      	movs	r3, #0
 8007152:	f7f9 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007156:	b1d0      	cbz	r0, 800718e <__ieee754_log+0xe6>
 8007158:	2c00      	cmp	r4, #0
 800715a:	f000 8120 	beq.w	800739e <__ieee754_log+0x2f6>
 800715e:	4620      	mov	r0, r4
 8007160:	f7f9 f9e0 	bl	8000524 <__aeabi_i2d>
 8007164:	a390      	add	r3, pc, #576	; (adr r3, 80073a8 <__ieee754_log+0x300>)
 8007166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716a:	4606      	mov	r6, r0
 800716c:	460f      	mov	r7, r1
 800716e:	f7f9 fa43 	bl	80005f8 <__aeabi_dmul>
 8007172:	a38f      	add	r3, pc, #572	; (adr r3, 80073b0 <__ieee754_log+0x308>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	4604      	mov	r4, r0
 800717a:	460d      	mov	r5, r1
 800717c:	4630      	mov	r0, r6
 800717e:	4639      	mov	r1, r7
 8007180:	f7f9 fa3a 	bl	80005f8 <__aeabi_dmul>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4620      	mov	r0, r4
 800718a:	4629      	mov	r1, r5
 800718c:	e7ba      	b.n	8007104 <__ieee754_log+0x5c>
 800718e:	a38a      	add	r3, pc, #552	; (adr r3, 80073b8 <__ieee754_log+0x310>)
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	4650      	mov	r0, sl
 8007196:	4659      	mov	r1, fp
 8007198:	f7f9 fa2e 	bl	80005f8 <__aeabi_dmul>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	2000      	movs	r0, #0
 80071a2:	4999      	ldr	r1, [pc, #612]	; (8007408 <__ieee754_log+0x360>)
 80071a4:	f7f9 f870 	bl	8000288 <__aeabi_dsub>
 80071a8:	4652      	mov	r2, sl
 80071aa:	4606      	mov	r6, r0
 80071ac:	460f      	mov	r7, r1
 80071ae:	465b      	mov	r3, fp
 80071b0:	4650      	mov	r0, sl
 80071b2:	4659      	mov	r1, fp
 80071b4:	f7f9 fa20 	bl	80005f8 <__aeabi_dmul>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fa1a 	bl	80005f8 <__aeabi_dmul>
 80071c4:	4606      	mov	r6, r0
 80071c6:	460f      	mov	r7, r1
 80071c8:	b914      	cbnz	r4, 80071d0 <__ieee754_log+0x128>
 80071ca:	4632      	mov	r2, r6
 80071cc:	463b      	mov	r3, r7
 80071ce:	e0a0      	b.n	8007312 <__ieee754_log+0x26a>
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7f9 f9a7 	bl	8000524 <__aeabi_i2d>
 80071d6:	a374      	add	r3, pc, #464	; (adr r3, 80073a8 <__ieee754_log+0x300>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	4680      	mov	r8, r0
 80071de:	4689      	mov	r9, r1
 80071e0:	f7f9 fa0a 	bl	80005f8 <__aeabi_dmul>
 80071e4:	a372      	add	r3, pc, #456	; (adr r3, 80073b0 <__ieee754_log+0x308>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	4604      	mov	r4, r0
 80071ec:	460d      	mov	r5, r1
 80071ee:	4640      	mov	r0, r8
 80071f0:	4649      	mov	r1, r9
 80071f2:	f7f9 fa01 	bl	80005f8 <__aeabi_dmul>
 80071f6:	e0a5      	b.n	8007344 <__ieee754_log+0x29c>
 80071f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071fc:	f7f9 f846 	bl	800028c <__adddf3>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4650      	mov	r0, sl
 8007206:	4659      	mov	r1, fp
 8007208:	f7f9 fb20 	bl	800084c <__aeabi_ddiv>
 800720c:	e9cd 0100 	strd	r0, r1, [sp]
 8007210:	4620      	mov	r0, r4
 8007212:	f7f9 f987 	bl	8000524 <__aeabi_i2d>
 8007216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800721a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800721e:	4610      	mov	r0, r2
 8007220:	4619      	mov	r1, r3
 8007222:	f7f9 f9e9 	bl	80005f8 <__aeabi_dmul>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800722e:	f7f9 f9e3 	bl	80005f8 <__aeabi_dmul>
 8007232:	a363      	add	r3, pc, #396	; (adr r3, 80073c0 <__ieee754_log+0x318>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	4680      	mov	r8, r0
 800723a:	4689      	mov	r9, r1
 800723c:	f7f9 f9dc 	bl	80005f8 <__aeabi_dmul>
 8007240:	a361      	add	r3, pc, #388	; (adr r3, 80073c8 <__ieee754_log+0x320>)
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	f7f9 f821 	bl	800028c <__adddf3>
 800724a:	4642      	mov	r2, r8
 800724c:	464b      	mov	r3, r9
 800724e:	f7f9 f9d3 	bl	80005f8 <__aeabi_dmul>
 8007252:	a35f      	add	r3, pc, #380	; (adr r3, 80073d0 <__ieee754_log+0x328>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f7f9 f818 	bl	800028c <__adddf3>
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	f7f9 f9ca 	bl	80005f8 <__aeabi_dmul>
 8007264:	a35c      	add	r3, pc, #368	; (adr r3, 80073d8 <__ieee754_log+0x330>)
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f9 f80f 	bl	800028c <__adddf3>
 800726e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007272:	f7f9 f9c1 	bl	80005f8 <__aeabi_dmul>
 8007276:	a35a      	add	r3, pc, #360	; (adr r3, 80073e0 <__ieee754_log+0x338>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007280:	4640      	mov	r0, r8
 8007282:	4649      	mov	r1, r9
 8007284:	f7f9 f9b8 	bl	80005f8 <__aeabi_dmul>
 8007288:	a357      	add	r3, pc, #348	; (adr r3, 80073e8 <__ieee754_log+0x340>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f8 fffd 	bl	800028c <__adddf3>
 8007292:	4642      	mov	r2, r8
 8007294:	464b      	mov	r3, r9
 8007296:	f7f9 f9af 	bl	80005f8 <__aeabi_dmul>
 800729a:	a355      	add	r3, pc, #340	; (adr r3, 80073f0 <__ieee754_log+0x348>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f7f8 fff4 	bl	800028c <__adddf3>
 80072a4:	4642      	mov	r2, r8
 80072a6:	464b      	mov	r3, r9
 80072a8:	f7f9 f9a6 	bl	80005f8 <__aeabi_dmul>
 80072ac:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80072b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072bc:	f7f8 ffe6 	bl	800028c <__adddf3>
 80072c0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80072c4:	3551      	adds	r5, #81	; 0x51
 80072c6:	4335      	orrs	r5, r6
 80072c8:	2d00      	cmp	r5, #0
 80072ca:	4680      	mov	r8, r0
 80072cc:	4689      	mov	r9, r1
 80072ce:	dd48      	ble.n	8007362 <__ieee754_log+0x2ba>
 80072d0:	2200      	movs	r2, #0
 80072d2:	4b4d      	ldr	r3, [pc, #308]	; (8007408 <__ieee754_log+0x360>)
 80072d4:	4650      	mov	r0, sl
 80072d6:	4659      	mov	r1, fp
 80072d8:	f7f9 f98e 	bl	80005f8 <__aeabi_dmul>
 80072dc:	4652      	mov	r2, sl
 80072de:	465b      	mov	r3, fp
 80072e0:	f7f9 f98a 	bl	80005f8 <__aeabi_dmul>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4606      	mov	r6, r0
 80072ea:	460f      	mov	r7, r1
 80072ec:	4640      	mov	r0, r8
 80072ee:	4649      	mov	r1, r9
 80072f0:	f7f8 ffcc 	bl	800028c <__adddf3>
 80072f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072f8:	f7f9 f97e 	bl	80005f8 <__aeabi_dmul>
 80072fc:	4680      	mov	r8, r0
 80072fe:	4689      	mov	r9, r1
 8007300:	b964      	cbnz	r4, 800731c <__ieee754_log+0x274>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4630      	mov	r0, r6
 8007308:	4639      	mov	r1, r7
 800730a:	f7f8 ffbd 	bl	8000288 <__aeabi_dsub>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4650      	mov	r0, sl
 8007314:	4659      	mov	r1, fp
 8007316:	f7f8 ffb7 	bl	8000288 <__aeabi_dsub>
 800731a:	e6da      	b.n	80070d2 <__ieee754_log+0x2a>
 800731c:	a322      	add	r3, pc, #136	; (adr r3, 80073a8 <__ieee754_log+0x300>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007326:	f7f9 f967 	bl	80005f8 <__aeabi_dmul>
 800732a:	a321      	add	r3, pc, #132	; (adr r3, 80073b0 <__ieee754_log+0x308>)
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	4604      	mov	r4, r0
 8007332:	460d      	mov	r5, r1
 8007334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007338:	f7f9 f95e 	bl	80005f8 <__aeabi_dmul>
 800733c:	4642      	mov	r2, r8
 800733e:	464b      	mov	r3, r9
 8007340:	f7f8 ffa4 	bl	800028c <__adddf3>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f8 ff9c 	bl	8000288 <__aeabi_dsub>
 8007350:	4652      	mov	r2, sl
 8007352:	465b      	mov	r3, fp
 8007354:	f7f8 ff98 	bl	8000288 <__aeabi_dsub>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4620      	mov	r0, r4
 800735e:	4629      	mov	r1, r5
 8007360:	e7d9      	b.n	8007316 <__ieee754_log+0x26e>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4650      	mov	r0, sl
 8007368:	4659      	mov	r1, fp
 800736a:	f7f8 ff8d 	bl	8000288 <__aeabi_dsub>
 800736e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007372:	f7f9 f941 	bl	80005f8 <__aeabi_dmul>
 8007376:	4606      	mov	r6, r0
 8007378:	460f      	mov	r7, r1
 800737a:	2c00      	cmp	r4, #0
 800737c:	f43f af25 	beq.w	80071ca <__ieee754_log+0x122>
 8007380:	a309      	add	r3, pc, #36	; (adr r3, 80073a8 <__ieee754_log+0x300>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800738a:	f7f9 f935 	bl	80005f8 <__aeabi_dmul>
 800738e:	a308      	add	r3, pc, #32	; (adr r3, 80073b0 <__ieee754_log+0x308>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	4604      	mov	r4, r0
 8007396:	460d      	mov	r5, r1
 8007398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800739c:	e729      	b.n	80071f2 <__ieee754_log+0x14a>
 800739e:	2000      	movs	r0, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	e696      	b.n	80070d2 <__ieee754_log+0x2a>
 80073a4:	f3af 8000 	nop.w
 80073a8:	fee00000 	.word	0xfee00000
 80073ac:	3fe62e42 	.word	0x3fe62e42
 80073b0:	35793c76 	.word	0x35793c76
 80073b4:	3dea39ef 	.word	0x3dea39ef
 80073b8:	55555555 	.word	0x55555555
 80073bc:	3fd55555 	.word	0x3fd55555
 80073c0:	df3e5244 	.word	0xdf3e5244
 80073c4:	3fc2f112 	.word	0x3fc2f112
 80073c8:	96cb03de 	.word	0x96cb03de
 80073cc:	3fc74664 	.word	0x3fc74664
 80073d0:	94229359 	.word	0x94229359
 80073d4:	3fd24924 	.word	0x3fd24924
 80073d8:	55555593 	.word	0x55555593
 80073dc:	3fe55555 	.word	0x3fe55555
 80073e0:	d078c69f 	.word	0xd078c69f
 80073e4:	3fc39a09 	.word	0x3fc39a09
 80073e8:	1d8e78af 	.word	0x1d8e78af
 80073ec:	3fcc71c5 	.word	0x3fcc71c5
 80073f0:	9997fa04 	.word	0x9997fa04
 80073f4:	3fd99999 	.word	0x3fd99999
 80073f8:	c3500000 	.word	0xc3500000
 80073fc:	43500000 	.word	0x43500000
 8007400:	7fefffff 	.word	0x7fefffff
 8007404:	3ff00000 	.word	0x3ff00000
 8007408:	3fe00000 	.word	0x3fe00000

0800740c <finite>:
 800740c:	ee10 3a90 	vmov	r3, s1
 8007410:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007414:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007418:	0fc0      	lsrs	r0, r0, #31
 800741a:	4770      	bx	lr

0800741c <matherr>:
 800741c:	2000      	movs	r0, #0
 800741e:	4770      	bx	lr

08007420 <nan>:
 8007420:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007428 <nan+0x8>
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	00000000 	.word	0x00000000
 800742c:	7ff80000 	.word	0x7ff80000

08007430 <_close>:
 8007430:	4b02      	ldr	r3, [pc, #8]	; (800743c <_close+0xc>)
 8007432:	2258      	movs	r2, #88	; 0x58
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	f04f 30ff 	mov.w	r0, #4294967295
 800743a:	4770      	bx	lr
 800743c:	2000255c 	.word	0x2000255c

08007440 <_fstat>:
 8007440:	4b02      	ldr	r3, [pc, #8]	; (800744c <_fstat+0xc>)
 8007442:	2258      	movs	r2, #88	; 0x58
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	f04f 30ff 	mov.w	r0, #4294967295
 800744a:	4770      	bx	lr
 800744c:	2000255c 	.word	0x2000255c

08007450 <_isatty>:
 8007450:	4b02      	ldr	r3, [pc, #8]	; (800745c <_isatty+0xc>)
 8007452:	2258      	movs	r2, #88	; 0x58
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	2000      	movs	r0, #0
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	2000255c 	.word	0x2000255c

08007460 <_lseek>:
 8007460:	4b02      	ldr	r3, [pc, #8]	; (800746c <_lseek+0xc>)
 8007462:	2258      	movs	r2, #88	; 0x58
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	f04f 30ff 	mov.w	r0, #4294967295
 800746a:	4770      	bx	lr
 800746c:	2000255c 	.word	0x2000255c

08007470 <_read>:
 8007470:	4b02      	ldr	r3, [pc, #8]	; (800747c <_read+0xc>)
 8007472:	2258      	movs	r2, #88	; 0x58
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	f04f 30ff 	mov.w	r0, #4294967295
 800747a:	4770      	bx	lr
 800747c:	2000255c 	.word	0x2000255c

08007480 <_write>:
 8007480:	4b02      	ldr	r3, [pc, #8]	; (800748c <_write+0xc>)
 8007482:	2258      	movs	r2, #88	; 0x58
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	f04f 30ff 	mov.w	r0, #4294967295
 800748a:	4770      	bx	lr
 800748c:	2000255c 	.word	0x2000255c

08007490 <_init>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	bf00      	nop
 8007494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007496:	bc08      	pop	{r3}
 8007498:	469e      	mov	lr, r3
 800749a:	4770      	bx	lr

0800749c <_fini>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr
