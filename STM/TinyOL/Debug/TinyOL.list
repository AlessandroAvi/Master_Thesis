
TinyOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000715d8  08008f40  08008f40  00018f40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807a518  0807a518  00091e14  2**0
                  CONTENTS
  4 .ARM          00000008  0807a518  0807a518  0008a518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807a520  0807a520  00091e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807a520  0807a520  0008a520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807a524  0807a524  0008a524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e14  20000000  0807a528  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b88  20001e14  0807c33c  00091e14  2**2
                  ALLOC
 10 ._user_heap_stack 00001204  2000399c  0807c33c  0009399c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00091e14  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1af  00000000  00000000  00091e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000239a  00000000  00000000  0009eff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a8  00000000  00000000  000a1390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000770  00000000  00000000  000a1c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186c1  00000000  00000000  000a23a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a37c  00000000  00000000  000baa69  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090003  00000000  00000000  000c4de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154de8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b4  00000000  00000000  00154e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  00157f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00157fb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001e14 	.word	0x20001e14
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f10 	.word	0x08008f10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001e18 	.word	0x20001e18
 80001dc:	08008f10 	.word	0x08008f10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <OL_resetInfo>:

//#define MSG_ACTIVE



void OL_resetInfo(OL_LAYER_STRUCT * layer){
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

	layer->prediction_correct = 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2020 	strb.w	r2, [r3, #32]
	layer->new_class = 0;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	layer->w_update = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	layer->vowel_guess = 'Q';
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2251      	movs	r2, #81	; 0x51
 8000f7c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	for(int i =0; i<layer->WIDTH; i++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e00a      	b.n	8000f9c <OL_resetInfo+0x44>
		layer->y_pred[i] = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69da      	ldr	r2, [r3, #28]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
	for(int i =0; i<layer->WIDTH; i++){
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dbef      	blt.n	8000f86 <OL_resetInfo+0x2e>
	}

}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <OL_lettToSoft>:




void OL_lettToSoft(OL_LAYER_STRUCT * layer, char *lett, float * y_true){
 8000fb2:	b480      	push	{r7}
 8000fb4:	b087      	sub	sp, #28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
	msgLen = sprintf(msgDebug, "\n\n\r    -- OL_lettToSoft");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	// Check if letter is inside label of the layer
	for(int i=0; i<layer->WIDTH; i++){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e01a      	b.n	8000ffa <OL_lettToSoft+0x48>
		if(lett[0] == layer->label[i]){
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6919      	ldr	r1, [r3, #16]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	440b      	add	r3, r1
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d107      	bne.n	8000fe6 <OL_lettToSoft+0x34>
			y_true[i] = 1;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	e006      	b.n	8000ff4 <OL_lettToSoft+0x42>
		}else{
			y_true[i] = 0;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbdf      	blt.n	8000fc4 <OL_lettToSoft+0x12>
		}
	}
};
 8001004:	bf00      	nop
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <OL_feedForward>:




void OL_feedForward(OL_LAYER_STRUCT * layer, float * input){
 8001010:	b4b0      	push	{r4, r5, r7}
 8001012:	b08b      	sub	sp, #44	; 0x2c
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	466b      	mov	r3, sp
 800101c:	461d      	mov	r5, r3
	msgLen = sprintf(msgDebug, "\n\n\r      -- OL_feedForward");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif


	int h = layer->HEIGHT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	617b      	str	r3, [r7, #20]
	int w = layer->WIDTH;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	613b      	str	r3, [r7, #16]

	int tmp_y_vec[layer->WIDTH];
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	1e43      	subs	r3, r0, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4603      	mov	r3, r0
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	f04f 0400 	mov.w	r4, #0
 8001042:	0154      	lsls	r4, r2, #5
 8001044:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001048:	014b      	lsls	r3, r1, #5
 800104a:	4603      	mov	r3, r0
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	f04f 0400 	mov.w	r4, #0
 800105a:	0154      	lsls	r4, r2, #5
 800105c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001060:	014b      	lsls	r3, r1, #5
 8001062:	4603      	mov	r3, r0
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	3303      	adds	r3, #3
 8001068:	3307      	adds	r3, #7
 800106a:	08db      	lsrs	r3, r3, #3
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	ebad 0d03 	sub.w	sp, sp, r3
 8001072:	466b      	mov	r3, sp
 8001074:	3303      	adds	r3, #3
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<layer->WIDTH; i++){
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	e007      	b.n	8001092 <OL_feedForward+0x82>
		tmp_y_vec[i]=0;
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	2100      	movs	r1, #0
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0; i<layer->WIDTH; i++){
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	3301      	adds	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf2      	blt.n	8001082 <OL_feedForward+0x72>
	}

	for(int i=0; i<w; i++){
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	e04b      	b.n	800113a <OL_feedForward+0x12a>
		for(int j=0; j< h; j++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	e028      	b.n	80010fa <OL_feedForward+0xea>
			tmp_y_vec[i] += layer->weights[h*i+j]*input[j];
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	69f9      	ldr	r1, [r7, #28]
 80010c0:	fb01 f103 	mul.w	r1, r1, r3
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	440b      	add	r3, r1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	edd3 6a00 	vldr	s13, [r3]
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e8:	ee17 1a90 	vmov	r1, s15
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int j=0; j< h; j++){
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	3301      	adds	r3, #1
 80010f8:	623b      	str	r3, [r7, #32]
 80010fa:	6a3a      	ldr	r2, [r7, #32]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	429a      	cmp	r2, r3
 8001100:	dbd2      	blt.n	80010a8 <OL_feedForward+0x98>
		}
		tmp_y_vec[i] += layer->biases[i];
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699a      	ldr	r2, [r3, #24]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001128:	ee17 1a90 	vmov	r1, s15
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0; i<w; i++){
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3301      	adds	r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	429a      	cmp	r2, r3
 8001140:	dbaf      	blt.n	80010a2 <OL_feedForward+0x92>
	}

	for(int i=0; i<layer->WIDTH; i++){
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	e011      	b.n	800116c <OL_feedForward+0x15c>
		layer->y_pred[i]=tmp_y_vec[i];
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69da      	ldr	r2, [r3, #28]
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	ee07 1a90 	vmov	s15, r1
 800115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001162:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<layer->WIDTH; i++){
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	3301      	adds	r3, #1
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001172:	429a      	cmp	r2, r3
 8001174:	dbe8      	blt.n	8001148 <OL_feedForward+0x138>
 8001176:	46ad      	mov	sp, r5
	}

};
 8001178:	bf00      	nop
 800117a:	372c      	adds	r7, #44	; 0x2c
 800117c:	46bd      	mov	sp, r7
 800117e:	bcb0      	pop	{r4, r5, r7}
 8001180:	4770      	bx	lr

08001182 <OL_softmax>:




void OL_softmax(OL_LAYER_STRUCT * layer){
 8001182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001184:	b087      	sub	sp, #28
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	int i;
	float m;
	int size = layer->WIDTH;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	60bb      	str	r3, [r7, #8]

	m = layer->y_pred[0];
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	613b      	str	r3, [r7, #16]
	// Find the highest value in array input
	for (i = 0; i < size; ++i) {
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e017      	b.n	80011ce <OL_softmax+0x4c>
		if (layer->y_pred[i] > m) {
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69da      	ldr	r2, [r3, #28]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80011b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	d506      	bpl.n	80011c8 <OL_softmax+0x46>
			m = layer->y_pred[i];
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < size; ++i) {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dbe3      	blt.n	800119e <OL_softmax+0x1c>
		}
	}

	// Compute the sum of the exponentials
	float sum = 0.0;
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < size; ++i) {
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e02c      	b.n	800123c <OL_softmax+0xba>
		sum += exp(layer->y_pred[i] - m);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69da      	ldr	r2, [r3, #28]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	ee17 0a90 	vmov	r0, s15
 80011fc:	f7ff f9ac 	bl	8000558 <__aeabi_f2d>
 8001200:	4603      	mov	r3, r0
 8001202:	460c      	mov	r4, r1
 8001204:	ec44 3b10 	vmov	d0, r3, r4
 8001208:	f007 fa22 	bl	8008650 <exp>
 800120c:	ec56 5b10 	vmov	r5, r6, d0
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff f9a1 	bl	8000558 <__aeabi_f2d>
 8001216:	4603      	mov	r3, r0
 8001218:	460c      	mov	r4, r1
 800121a:	461a      	mov	r2, r3
 800121c:	4623      	mov	r3, r4
 800121e:	4628      	mov	r0, r5
 8001220:	4631      	mov	r1, r6
 8001222:	f7ff f83b 	bl	800029c <__adddf3>
 8001226:	4603      	mov	r3, r0
 8001228:	460c      	mov	r4, r1
 800122a:	4618      	mov	r0, r3
 800122c:	4621      	mov	r1, r4
 800122e:	f7ff fcc3 	bl	8000bb8 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < size; ++i) {
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbce      	blt.n	80011e2 <OL_softmax+0x60>
	}

	// Compute the softmax value for each input entry
	for (i = 0; i < size; ++i) {
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e037      	b.n	80012ba <OL_softmax+0x138>
		layer->y_pred[i] = exp(layer->y_pred[i] - m - log(sum));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69da      	ldr	r2, [r3, #28]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	ed93 7a00 	vldr	s14, [r3]
 8001258:	edd7 7a04 	vldr	s15, [r7, #16]
 800125c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001260:	ee17 0a90 	vmov	r0, s15
 8001264:	f7ff f978 	bl	8000558 <__aeabi_f2d>
 8001268:	4604      	mov	r4, r0
 800126a:	460d      	mov	r5, r1
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff f973 	bl	8000558 <__aeabi_f2d>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	ec43 2b10 	vmov	d0, r2, r3
 800127a:	f007 fa65 	bl	8008748 <log>
 800127e:	ec53 2b10 	vmov	r2, r3, d0
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7ff f807 	bl	8000298 <__aeabi_dsub>
 800128a:	4603      	mov	r3, r0
 800128c:	460c      	mov	r4, r1
 800128e:	ec44 3b17 	vmov	d7, r3, r4
 8001292:	eeb0 0a47 	vmov.f32	s0, s14
 8001296:	eef0 0a67 	vmov.f32	s1, s15
 800129a:	f007 f9d9 	bl	8008650 <exp>
 800129e:	ec51 0b10 	vmov	r0, r1, d0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69da      	ldr	r2, [r3, #28]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	18d4      	adds	r4, r2, r3
 80012ac:	f7ff fc84 	bl	8000bb8 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	6023      	str	r3, [r4, #0]
	for (i = 0; i < size; ++i) {
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbc3      	blt.n	800124a <OL_softmax+0xc8>
	}
};
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012ca <OL_gradientDescend>:




void OL_gradientDescend(OL_LAYER_STRUCT * layer, float* input, float *y_true){
 80012ca:	b4b0      	push	{r4, r5, r7}
 80012cc:	b08d      	sub	sp, #52	; 0x34
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	466b      	mov	r3, sp
 80012d8:	461d      	mov	r5, r3
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r      -- OL_gradientDescend");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	float cost[layer->WIDTH],dW, deltaW;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	1e43      	subs	r3, r0, #1
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	f04f 0400 	mov.w	r4, #0
 80012f2:	0154      	lsls	r4, r2, #5
 80012f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012f8:	014b      	lsls	r3, r1, #5
 80012fa:	4603      	mov	r3, r0
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f04f 0400 	mov.w	r4, #0
 800130a:	0154      	lsls	r4, r2, #5
 800130c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001310:	014b      	lsls	r3, r1, #5
 8001312:	4603      	mov	r3, r0
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	3303      	adds	r3, #3
 8001318:	3307      	adds	r3, #7
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	ebad 0d03 	sub.w	sp, sp, r3
 8001322:	466b      	mov	r3, sp
 8001324:	3303      	adds	r3, #3
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	61fb      	str	r3, [r7, #28]

	layer->w_update = 1;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	// Compute the cost (prediction-true)
	for(int k=0; k<layer->WIDTH; k++){
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
 8001338:	e032      	b.n	80013a0 <OL_gradientDescend+0xd6>
		// Compute label error
		cost[k] = layer->y_pred[k]-y_true[k];
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	69da      	ldr	r2, [r3, #28]
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	ed93 7a00 	vldr	s14, [r3]
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	edc3 7a00 	vstr	s15, [r3]

		// Update the biases
		layer->biases[k] -= cost[k]*layer->l_rate;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	edd3 6a00 	vldr	s13, [r3]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	edd3 7a02 	vldr	s15, [r3, #8]
 8001384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001396:	edc3 7a00 	vstr	s15, [r3]
	for(int k=0; k<layer->WIDTH; k++){
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	3301      	adds	r3, #1
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbc7      	blt.n	800133a <OL_gradientDescend+0x70>
	}

	// Update the weights
	for(int i=0; i<layer->HEIGHT; i++){		// da 0 a 128
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ae:	e044      	b.n	800143a <OL_gradientDescend+0x170>

		for(int j=0; j<layer->WIDTH; j++){	// da 0 a 5
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	e039      	b.n	800142a <OL_gradientDescend+0x160>

			deltaW = cost[j]* input[i];
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	4413      	add	r3, r2
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d2:	edc7 7a06 	vstr	s15, [r7, #24]
			dW = deltaW*layer->l_rate;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80013dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80013e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e4:	edc7 7a05 	vstr	s15, [r7, #20]
			layer->weights[j*layer->HEIGHT+i] -= dW;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f2:	fb01 f103 	mul.w	r1, r1, r3
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	440b      	add	r3, r1
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800140c:	fb01 f103 	mul.w	r1, r1, r3
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	440b      	add	r3, r1
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	edd7 7a05 	vldr	s15, [r7, #20]
 800141c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001420:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<layer->WIDTH; j++){	// da 0 a 5
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	3301      	adds	r3, #1
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001430:	429a      	cmp	r2, r3
 8001432:	dbc0      	blt.n	80013b6 <OL_gradientDescend+0xec>
	for(int i=0; i<layer->HEIGHT; i++){		// da 0 a 128
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001440:	429a      	cmp	r2, r3
 8001442:	dbb5      	blt.n	80013b0 <OL_gradientDescend+0xe6>
 8001444:	46ad      	mov	sp, r5
		}
	}
};
 8001446:	bf00      	nop
 8001448:	3734      	adds	r7, #52	; 0x34
 800144a:	46bd      	mov	sp, r7
 800144c:	bcb0      	pop	{r4, r5, r7}
 800144e:	4770      	bx	lr

08001450 <OL_increaseWeightDim>:




void OL_increaseWeightDim(OL_LAYER_STRUCT * layer){
 8001450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r        -- OL_increaseWeightDim");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	uint8_t h = layer->HEIGHT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	74fb      	strb	r3, [r7, #19]
	uint8_t w = layer->WIDTH;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	74bb      	strb	r3, [r7, #18]

	float * tmp_ptr = calloc(h*w,sizeof(float));
 8001464:	7cfb      	ldrb	r3, [r7, #19]
 8001466:	7cba      	ldrb	r2, [r7, #18]
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	2104      	movs	r1, #4
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fd1c 	bl	8005eac <calloc>
 8001474:	4603      	mov	r3, r0
 8001476:	60fb      	str	r3, [r7, #12]
	if(tmp_ptr==NULL){
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d125      	bne.n	80014ca <OL_increaseWeightDim+0x7a>
		msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for increased weights ");
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <OL_increaseWeightDim+0xcc>)
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <OL_increaseWeightDim+0xd0>)
 8001482:	4614      	mov	r4, r2
 8001484:	469c      	mov	ip, r3
 8001486:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800148a:	4665      	mov	r5, ip
 800148c:	4626      	mov	r6, r4
 800148e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001490:	6028      	str	r0, [r5, #0]
 8001492:	6069      	str	r1, [r5, #4]
 8001494:	60aa      	str	r2, [r5, #8]
 8001496:	60eb      	str	r3, [r5, #12]
 8001498:	3410      	adds	r4, #16
 800149a:	f10c 0c10 	add.w	ip, ip, #16
 800149e:	4574      	cmp	r4, lr
 80014a0:	d1f3      	bne.n	800148a <OL_increaseWeightDim+0x3a>
 80014a2:	4662      	mov	r2, ip
 80014a4:	4623      	mov	r3, r4
 80014a6:	cb03      	ldmia	r3!, {r0, r1}
 80014a8:	6010      	str	r0, [r2, #0]
 80014aa:	6051      	str	r1, [r2, #4]
 80014ac:	8819      	ldrh	r1, [r3, #0]
 80014ae:	789b      	ldrb	r3, [r3, #2]
 80014b0:	8111      	strh	r1, [r2, #8]
 80014b2:	7293      	strb	r3, [r2, #10]
 80014b4:	223a      	movs	r2, #58	; 0x3a
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <OL_increaseWeightDim+0xd4>)
 80014b8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <OL_increaseWeightDim+0xd4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	2364      	movs	r3, #100	; 0x64
 80014c2:	4916      	ldr	r1, [pc, #88]	; (800151c <OL_increaseWeightDim+0xcc>)
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <OL_increaseWeightDim+0xd8>)
 80014c6:	f001 ff5c 	bl	8003382 <HAL_UART_Transmit>
	}


	for(int i=0; i<(h-1)*(w-1); i++){
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e00d      	b.n	80014ec <OL_increaseWeightDim+0x9c>
			tmp_ptr[i] = layer->weights[i]; 	// If weight already exist fill with old ones
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	441a      	add	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	440b      	add	r3, r1
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	601a      	str	r2, [r3, #0]
	for(int i=0; i<(h-1)*(w-1); i++){
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	7cba      	ldrb	r2, [r7, #18]
 80014f2:	3a01      	subs	r2, #1
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbe8      	blt.n	80014d0 <OL_increaseWeightDim+0x80>
	}

	free(layer->weights);		// Free the old allocated weights
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fd0c 	bl	8005f20 <free>
	layer->weights = tmp_ptr;	// Move the pointer to the new allocated weights
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	615a      	str	r2, [r3, #20]
	tmp_ptr = NULL;				// Reset the temporary pointer
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
};
 8001512:	bf00      	nop
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151a:	bf00      	nop
 800151c:	20002aa8 	.word	0x20002aa8
 8001520:	08008f40 	.word	0x08008f40
 8001524:	20002b28 	.word	0x20002b28
 8001528:	20003954 	.word	0x20003954

0800152c <OL_increaseLabel>:




void OL_increaseLabel(OL_LAYER_STRUCT * layer, char new_letter){
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r        -- OL_increaseLabel");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	uint8_t w = layer->WIDTH;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	74fb      	strb	r3, [r7, #19]

	char * tmp_ptr = malloc(w*sizeof(char));
 800153e:	7cfb      	ldrb	r3, [r7, #19]
 8001540:	4618      	mov	r0, r3
 8001542:	f004 fce5 	bl	8005f10 <malloc>
 8001546:	4603      	mov	r3, r0
 8001548:	60fb      	str	r3, [r7, #12]
	if(tmp_ptr==NULL){
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d123      	bne.n	8001598 <OL_increaseLabel+0x6c>
		msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for increased label ");
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <OL_increaseLabel+0xc4>)
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <OL_increaseLabel+0xc8>)
 8001554:	4614      	mov	r4, r2
 8001556:	469c      	mov	ip, r3
 8001558:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800155c:	4665      	mov	r5, ip
 800155e:	4626      	mov	r6, r4
 8001560:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001562:	6028      	str	r0, [r5, #0]
 8001564:	6069      	str	r1, [r5, #4]
 8001566:	60aa      	str	r2, [r5, #8]
 8001568:	60eb      	str	r3, [r5, #12]
 800156a:	3410      	adds	r4, #16
 800156c:	f10c 0c10 	add.w	ip, ip, #16
 8001570:	4574      	cmp	r4, lr
 8001572:	d1f3      	bne.n	800155c <OL_increaseLabel+0x30>
 8001574:	4662      	mov	r2, ip
 8001576:	4623      	mov	r3, r4
 8001578:	cb03      	ldmia	r3!, {r0, r1}
 800157a:	6010      	str	r0, [r2, #0]
 800157c:	6051      	str	r1, [r2, #4]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	7213      	strb	r3, [r2, #8]
 8001582:	2238      	movs	r2, #56	; 0x38
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <OL_increaseLabel+0xcc>)
 8001586:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <OL_increaseLabel+0xcc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29a      	uxth	r2, r3
 800158e:	2364      	movs	r3, #100	; 0x64
 8001590:	4917      	ldr	r1, [pc, #92]	; (80015f0 <OL_increaseLabel+0xc4>)
 8001592:	481a      	ldr	r0, [pc, #104]	; (80015fc <OL_increaseLabel+0xd0>)
 8001594:	f001 fef5 	bl	8003382 <HAL_UART_Transmit>
	}

	for(int i=0; i<w; i++){
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e016      	b.n	80015cc <OL_increaseLabel+0xa0>
		if(i<w-1){
 800159e:	7cfb      	ldrb	r3, [r7, #19]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	da09      	bge.n	80015bc <OL_increaseLabel+0x90>
			tmp_ptr[i] = layer->label[i]; 	// If letter already exist fill with old ones
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	441a      	add	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	68f9      	ldr	r1, [r7, #12]
 80015b4:	440b      	add	r3, r1
 80015b6:	7812      	ldrb	r2, [r2, #0]
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e004      	b.n	80015c6 <OL_increaseLabel+0x9a>
		}else{
			tmp_ptr[i] = new_letter;		// If letter is new put the new one
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<w; i++){
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	7cfb      	ldrb	r3, [r7, #19]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbe4      	blt.n	800159e <OL_increaseLabel+0x72>
		}
	}

	free(layer->label);		// Free the old allocated weights
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4618      	mov	r0, r3
 80015da:	f004 fca1 	bl	8005f20 <free>
	layer->label = tmp_ptr;	// Move the pointer to the new allocated weights
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	611a      	str	r2, [r3, #16]
	tmp_ptr = NULL;			// Reset the temporary pointer
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
};
 80015e8:	bf00      	nop
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f0:	20002aa8 	.word	0x20002aa8
 80015f4:	08008f7c 	.word	0x08008f7c
 80015f8:	20002b28 	.word	0x20002b28
 80015fc:	20003954 	.word	0x20003954

08001600 <OL_increaseBiasDim>:




void OL_increaseBiasDim(OL_LAYER_STRUCT * layer){
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r        -- OL_increaseBiasDim");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	uint8_t w = layer->WIDTH;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	74fb      	strb	r3, [r7, #19]

	float * tmp_ptr = calloc(w,sizeof(float));
 800160e:	7cfb      	ldrb	r3, [r7, #19]
 8001610:	2104      	movs	r1, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fc4a 	bl	8005eac <calloc>
 8001618:	4603      	mov	r3, r0
 800161a:	60fb      	str	r3, [r7, #12]
	if(tmp_ptr==NULL){
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d121      	bne.n	8001666 <OL_increaseBiasDim+0x66>
		msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for increased bias ");
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <OL_increaseBiasDim+0xb0>)
 8001624:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <OL_increaseBiasDim+0xb4>)
 8001626:	4614      	mov	r4, r2
 8001628:	469c      	mov	ip, r3
 800162a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800162e:	4665      	mov	r5, ip
 8001630:	4626      	mov	r6, r4
 8001632:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001634:	6028      	str	r0, [r5, #0]
 8001636:	6069      	str	r1, [r5, #4]
 8001638:	60aa      	str	r2, [r5, #8]
 800163a:	60eb      	str	r3, [r5, #12]
 800163c:	3410      	adds	r4, #16
 800163e:	f10c 0c10 	add.w	ip, ip, #16
 8001642:	4574      	cmp	r4, lr
 8001644:	d1f3      	bne.n	800162e <OL_increaseBiasDim+0x2e>
 8001646:	4662      	mov	r2, ip
 8001648:	4623      	mov	r3, r4
 800164a:	cb03      	ldmia	r3!, {r0, r1}
 800164c:	6010      	str	r0, [r2, #0]
 800164e:	6051      	str	r1, [r2, #4]
 8001650:	2237      	movs	r2, #55	; 0x37
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <OL_increaseBiasDim+0xb8>)
 8001654:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <OL_increaseBiasDim+0xb8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29a      	uxth	r2, r3
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	4914      	ldr	r1, [pc, #80]	; (80016b0 <OL_increaseBiasDim+0xb0>)
 8001660:	4816      	ldr	r0, [pc, #88]	; (80016bc <OL_increaseBiasDim+0xbc>)
 8001662:	f001 fe8e 	bl	8003382 <HAL_UART_Transmit>
	}



	for(int i=0; i<w-1; i++){
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e00d      	b.n	8001688 <OL_increaseBiasDim+0x88>
			tmp_ptr[i] = layer->biases[i]; 		// If bias already exist, fill with old ones
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	441a      	add	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	68f9      	ldr	r1, [r7, #12]
 800167c:	440b      	add	r3, r1
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	601a      	str	r2, [r3, #0]
	for(int i=0; i<w-1; i++){
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	7cfb      	ldrb	r3, [r7, #19]
 800168a:	3b01      	subs	r3, #1
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbec      	blt.n	800166c <OL_increaseBiasDim+0x6c>
	}

	free(layer->biases);		// Free the old allocated weights
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fc42 	bl	8005f20 <free>
	layer->biases = tmp_ptr;	// Move the pointer to the new allocated weights
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	619a      	str	r2, [r3, #24]
	tmp_ptr = NULL;				// Reset the temporary pointer
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
};
 80016a6:	bf00      	nop
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20002aa8 	.word	0x20002aa8
 80016b4:	08008fb8 	.word	0x08008fb8
 80016b8:	20002b28 	.word	0x20002b28
 80016bc:	20003954 	.word	0x20003954

080016c0 <OL_checkNewClass>:




void OL_checkNewClass(OL_LAYER_STRUCT * layer, char *letter){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r    -- OL_checkNewClass");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	int found = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<layer->WIDTH; i++){
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	e00d      	b.n	80016f0 <OL_checkNewClass+0x30>
		if(letter[0] == layer->label[i]){
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6919      	ldr	r1, [r3, #16]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	440b      	add	r3, r1
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d101      	bne.n	80016ea <OL_checkNewClass+0x2a>
			found = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<layer->WIDTH; i++){
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3301      	adds	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbec      	blt.n	80016d4 <OL_checkNewClass+0x14>
		}
	}

	// If the letter is new perform the following
	if(found==0){
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d123      	bne.n	8001748 <OL_checkNewClass+0x88>
#ifdef MSG_ACTIVE
		msgLen = sprintf(msgDebug, "\n\n\r    New letter found %c", letter[0]);
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

		layer->new_class = 1;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		layer->WIDTH +=1;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	601a      	str	r2, [r3, #0]

		OL_increaseLabel(layer, letter[0]);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	4619      	mov	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff07 	bl	800152c <OL_increaseLabel>
		OL_increaseWeightDim(layer);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fe96 	bl	8001450 <OL_increaseWeightDim>
		OL_increaseBiasDim(layer);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff6b 	bl	8001600 <OL_increaseBiasDim>

		free(layer->y_pred);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fbf6 	bl	8005f20 <free>
		layer->y_pred = (float*)calloc(layer->WIDTH, sizeof(float));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2104      	movs	r1, #4
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fbb6 	bl	8005eac <calloc>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	61da      	str	r2, [r3, #28]
	}
};
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <OL_train>:




void OL_train(OL_LAYER_STRUCT * layer, float *x, float *y_true, char *letter){
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6178      	str	r0, [r7, #20]
 8001758:	6139      	str	r1, [r7, #16]
 800175a:	60fa      	str	r2, [r7, #12]
 800175c:	60bb      	str	r3, [r7, #8]
	msgLen = sprintf(msgDebug, "\n\n\r  -- Begin on TRAIN routine --\n\n\r    OL_train");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif


	for(int i=0; i<layer->n_epochs; i++){
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	e07e      	b.n	8001862 <OL_train+0x112>

		// INFERENCE
		OL_feedForward(layer, x);
 8001764:	6939      	ldr	r1, [r7, #16]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff fc52 	bl	8001010 <OL_feedForward>
		// IL BACO E QUA SOPRA
		OL_softmax(layer);
 800176c:	6978      	ldr	r0, [r7, #20]
 800176e:	f7ff fd08 	bl	8001182 <OL_softmax>


		// FIND MAX HOT ONE ENCODED
		layer->vowel_guess = 0;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		uint8_t max_pred = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t max_true = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t max_i_pred;
		uint8_t max_i_true;
		for(int i=0; i<layer->WIDTH; i++){
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	e04e      	b.n	800182a <OL_train+0xda>
			if(max_pred < layer->y_pred[i]){
 800178c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	69da      	ldr	r2, [r3, #28]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	d518      	bpl.n	80017e2 <OL_train+0x92>
				max_i_pred = i;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				max_pred = layer->y_pred[i];
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	69da      	ldr	r2, [r3, #28]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80017cc:	793b      	ldrb	r3, [r7, #4]
 80017ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				layer->vowel_guess = layer->label[i];
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			}
			if(max_true < y_true[i]){
 80017e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	d50f      	bpl.n	8001824 <OL_train+0xd4>
				max_i_true=i;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f887 3020 	strb.w	r3, [r7, #32]
				max_true = y_true[i];
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181a:	edc7 7a01 	vstr	s15, [r7, #4]
 800181e:	793b      	ldrb	r3, [r7, #4]
 8001820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		for(int i=0; i<layer->WIDTH; i++){
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	3301      	adds	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbab      	blt.n	800178c <OL_train+0x3c>
			}
		}

		// COMPARE TRUE AND PREDICTION
		if(max_i_true != max_i_pred){
 8001834:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001838:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800183c:	429a      	cmp	r2, r3
 800183e:	d009      	beq.n	8001854 <OL_train+0x104>
#ifdef MSG_ACTIVE
				msgLen = sprintf(msgDebug, "\r    Performing weights update\n");
				HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif
			layer->prediction_correct = 1;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2020 	strb.w	r2, [r3, #32]
			// Update weights
			OL_gradientDescend(layer, x, y_true);
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	6939      	ldr	r1, [r7, #16]
 800184c:	6978      	ldr	r0, [r7, #20]
 800184e:	f7ff fd3c 	bl	80012ca <OL_gradientDescend>
 8001852:	e003      	b.n	800185c <OL_train+0x10c>
		}else{
			layer->prediction_correct = 2;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 2020 	strb.w	r2, [r3, #32]
	for(int i=0; i<layer->n_epochs; i++){
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	3301      	adds	r3, #1
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	429a      	cmp	r2, r3
 800186a:	f6ff af7b 	blt.w	8001764 <OL_train+0x14>
		}

	}
};
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_CRC_Init+0x20>)
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <MX_CRC_Init+0x24>)
 8001880:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_CRC_Init+0x20>)
 8001884:	f000 fec1 	bl	800260a <HAL_CRC_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800188e:	f000 fba7 	bl	8001fe0 <Error_Handler>
  }

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20002b2c 	.word	0x20002b2c
 800189c:	40023000 	.word	0x40023000

080018a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_CRC_MspInit+0x3c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10d      	bne.n	80018ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_CRC_MspInit+0x40>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_CRC_MspInit+0x40>)
 80018bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <HAL_CRC_MspInit+0x40>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023000 	.word	0x40023000
 80018e0:	40023800 	.word	0x40023800

080018e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <MX_GPIO_Init+0x130>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a44      	ldr	r2, [pc, #272]	; (8001a14 <MX_GPIO_Init+0x130>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <MX_GPIO_Init+0x130>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <MX_GPIO_Init+0x130>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a3d      	ldr	r2, [pc, #244]	; (8001a14 <MX_GPIO_Init+0x130>)
 8001920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <MX_GPIO_Init+0x130>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <MX_GPIO_Init+0x130>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a36      	ldr	r2, [pc, #216]	; (8001a14 <MX_GPIO_Init+0x130>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <MX_GPIO_Init+0x130>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <MX_GPIO_Init+0x130>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <MX_GPIO_Init+0x130>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <MX_GPIO_Init+0x130>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2120      	movs	r1, #32
 800196e:	482a      	ldr	r0, [pc, #168]	; (8001a18 <MX_GPIO_Init+0x134>)
 8001970:	f001 f80c 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800197a:	4828      	ldr	r0, [pc, #160]	; (8001a1c <MX_GPIO_Init+0x138>)
 800197c:	f001 f806 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MX_GPIO_Init+0x13c>)
 8001988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4823      	ldr	r0, [pc, #140]	; (8001a24 <MX_GPIO_Init+0x140>)
 8001996:	f000 fe77 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800199a:	2320      	movs	r3, #32
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4819      	ldr	r0, [pc, #100]	; (8001a18 <MX_GPIO_Init+0x134>)
 80019b2:	f000 fe69 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4813      	ldr	r0, [pc, #76]	; (8001a1c <MX_GPIO_Init+0x138>)
 80019d0:	f000 fe5a 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019d4:	2320      	movs	r3, #32
 80019d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_GPIO_Init+0x144>)
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_GPIO_Init+0x138>)
 80019e8:	f000 fe4e 	bl	8002688 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2017      	movs	r0, #23
 80019f2:	f000 fdd4 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019f6:	2017      	movs	r0, #23
 80019f8:	f000 fded 	bl	80025d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	2028      	movs	r0, #40	; 0x28
 8001a02:	f000 fdcc 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a06:	2028      	movs	r0, #40	; 0x28
 8001a08:	f000 fde5 	bl	80025d6 <HAL_NVIC_EnableIRQ>

}
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	10210000 	.word	0x10210000
 8001a24:	40020800 	.word	0x40020800
 8001a28:	10110000 	.word	0x10110000

08001a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	b091      	sub	sp, #68	; 0x44
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a32:	f000 fc45 	bl	80022c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a36:	f000 fa15 	bl	8001e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3a:	f7ff ff53 	bl	80018e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a3e:	f000 fb9b 	bl	8002178 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001a42:	f7ff ff19 	bl	8001878 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8001a46:	f002 fcc5 	bl	80043d4 <MX_X_CUBE_AI_Init>
  // ***** Initialize the OL layer ****************************
  OL_LAYER_STRUCT OL_layer;

  // Assign the weight and bias matrices

  OL_layer.WIDTH = 5;
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	607b      	str	r3, [r7, #4]
  OL_layer.HEIGHT = AI_NETWORK_OUT_1_SIZE;
 8001a4e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001a52:	60bb      	str	r3, [r7, #8]

  OL_layer.n_epochs = 1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
  OL_layer.l_rate = 0.001;
 8001a58:	4b9a      	ldr	r3, [pc, #616]	; (8001cc4 <main+0x298>)
 8001a5a:	60fb      	str	r3, [r7, #12]


  OL_layer.weights = (float*)calloc(OL_layer.WIDTH*OL_layer.HEIGHT, sizeof(float));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	2104      	movs	r1, #4
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 fa20 	bl	8005eac <calloc>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	61bb      	str	r3, [r7, #24]
  if(OL_layer.weights==NULL){
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d11c      	bne.n	8001ab0 <main+0x84>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for weights");
 8001a76:	4b94      	ldr	r3, [pc, #592]	; (8001cc8 <main+0x29c>)
 8001a78:	4a94      	ldr	r2, [pc, #592]	; (8001ccc <main+0x2a0>)
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001a82:	4665      	mov	r5, ip
 8001a84:	4626      	mov	r6, r4
 8001a86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a88:	6028      	str	r0, [r5, #0]
 8001a8a:	6069      	str	r1, [r5, #4]
 8001a8c:	60aa      	str	r2, [r5, #8]
 8001a8e:	60eb      	str	r3, [r5, #12]
 8001a90:	3410      	adds	r4, #16
 8001a92:	f10c 0c10 	add.w	ip, ip, #16
 8001a96:	4574      	cmp	r4, lr
 8001a98:	d1f3      	bne.n	8001a82 <main+0x56>
 8001a9a:	222f      	movs	r2, #47	; 0x2f
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <main+0x2a4>)
 8001a9e:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001aa0:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <main+0x2a4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	2364      	movs	r3, #100	; 0x64
 8001aa8:	4987      	ldr	r1, [pc, #540]	; (8001cc8 <main+0x29c>)
 8001aaa:	488a      	ldr	r0, [pc, #552]	; (8001cd4 <main+0x2a8>)
 8001aac:	f001 fc69 	bl	8003382 <HAL_UART_Transmit>
  }

  OL_layer.biases = (float*)calloc(OL_layer.WIDTH, sizeof(float));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2104      	movs	r1, #4
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 f9f9 	bl	8005eac <calloc>
 8001aba:	4603      	mov	r3, r0
 8001abc:	61fb      	str	r3, [r7, #28]
  if(OL_layer.biases==NULL){
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d126      	bne.n	8001b12 <main+0xe6>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for biases");
 8001ac4:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <main+0x29c>)
 8001ac6:	4a84      	ldr	r2, [pc, #528]	; (8001cd8 <main+0x2ac>)
 8001ac8:	4615      	mov	r5, r2
 8001aca:	469c      	mov	ip, r3
 8001acc:	f105 0e20 	add.w	lr, r5, #32
 8001ad0:	4664      	mov	r4, ip
 8001ad2:	462e      	mov	r6, r5
 8001ad4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ad6:	6020      	str	r0, [r4, #0]
 8001ad8:	6061      	str	r1, [r4, #4]
 8001ada:	60a2      	str	r2, [r4, #8]
 8001adc:	60e3      	str	r3, [r4, #12]
 8001ade:	3510      	adds	r5, #16
 8001ae0:	f10c 0c10 	add.w	ip, ip, #16
 8001ae4:	4575      	cmp	r5, lr
 8001ae6:	d1f3      	bne.n	8001ad0 <main+0xa4>
 8001ae8:	4664      	mov	r4, ip
 8001aea:	462b      	mov	r3, r5
 8001aec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001aee:	6020      	str	r0, [r4, #0]
 8001af0:	6061      	str	r1, [r4, #4]
 8001af2:	60a2      	str	r2, [r4, #8]
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	81a2      	strh	r2, [r4, #12]
 8001afa:	73a3      	strb	r3, [r4, #14]
 8001afc:	222e      	movs	r2, #46	; 0x2e
 8001afe:	4b74      	ldr	r3, [pc, #464]	; (8001cd0 <main+0x2a4>)
 8001b00:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <main+0x2a4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	2364      	movs	r3, #100	; 0x64
 8001b0a:	496f      	ldr	r1, [pc, #444]	; (8001cc8 <main+0x29c>)
 8001b0c:	4871      	ldr	r0, [pc, #452]	; (8001cd4 <main+0x2a8>)
 8001b0e:	f001 fc38 	bl	8003382 <HAL_UART_Transmit>
  }

  OL_layer.label = (char*)calloc(OL_layer.WIDTH, sizeof(char));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2101      	movs	r1, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 f9c8 	bl	8005eac <calloc>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	617b      	str	r3, [r7, #20]
  if(OL_layer.label==NULL){
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d124      	bne.n	8001b70 <main+0x144>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for label");
 8001b26:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <main+0x29c>)
 8001b28:	4a6c      	ldr	r2, [pc, #432]	; (8001cdc <main+0x2b0>)
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	469c      	mov	ip, r3
 8001b2e:	f104 0e20 	add.w	lr, r4, #32
 8001b32:	4665      	mov	r5, ip
 8001b34:	4626      	mov	r6, r4
 8001b36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b38:	6028      	str	r0, [r5, #0]
 8001b3a:	6069      	str	r1, [r5, #4]
 8001b3c:	60aa      	str	r2, [r5, #8]
 8001b3e:	60eb      	str	r3, [r5, #12]
 8001b40:	3410      	adds	r4, #16
 8001b42:	f10c 0c10 	add.w	ip, ip, #16
 8001b46:	4574      	cmp	r4, lr
 8001b48:	d1f3      	bne.n	8001b32 <main+0x106>
 8001b4a:	4665      	mov	r5, ip
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b50:	6028      	str	r0, [r5, #0]
 8001b52:	6069      	str	r1, [r5, #4]
 8001b54:	60aa      	str	r2, [r5, #8]
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	81ab      	strh	r3, [r5, #12]
 8001b5a:	222d      	movs	r2, #45	; 0x2d
 8001b5c:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <main+0x2a4>)
 8001b5e:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001b60:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <main+0x2a4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	2364      	movs	r3, #100	; 0x64
 8001b68:	4957      	ldr	r1, [pc, #348]	; (8001cc8 <main+0x29c>)
 8001b6a:	485a      	ldr	r0, [pc, #360]	; (8001cd4 <main+0x2a8>)
 8001b6c:	f001 fc09 	bl	8003382 <HAL_UART_Transmit>
  }

  OL_layer.y_pred = (float*)calloc(OL_layer.WIDTH, sizeof(float));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2104      	movs	r1, #4
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 f999 	bl	8005eac <calloc>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	623b      	str	r3, [r7, #32]
  if(OL_layer.y_pred==NULL){
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d126      	bne.n	8001bd2 <main+0x1a6>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for y_pred");
 8001b84:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <main+0x29c>)
 8001b86:	4a56      	ldr	r2, [pc, #344]	; (8001ce0 <main+0x2b4>)
 8001b88:	4615      	mov	r5, r2
 8001b8a:	469c      	mov	ip, r3
 8001b8c:	f105 0e20 	add.w	lr, r5, #32
 8001b90:	4664      	mov	r4, ip
 8001b92:	462e      	mov	r6, r5
 8001b94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b96:	6020      	str	r0, [r4, #0]
 8001b98:	6061      	str	r1, [r4, #4]
 8001b9a:	60a2      	str	r2, [r4, #8]
 8001b9c:	60e3      	str	r3, [r4, #12]
 8001b9e:	3510      	adds	r5, #16
 8001ba0:	f10c 0c10 	add.w	ip, ip, #16
 8001ba4:	4575      	cmp	r5, lr
 8001ba6:	d1f3      	bne.n	8001b90 <main+0x164>
 8001ba8:	4664      	mov	r4, ip
 8001baa:	462b      	mov	r3, r5
 8001bac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001bae:	6020      	str	r0, [r4, #0]
 8001bb0:	6061      	str	r1, [r4, #4]
 8001bb2:	60a2      	str	r2, [r4, #8]
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	789b      	ldrb	r3, [r3, #2]
 8001bb8:	81a2      	strh	r2, [r4, #12]
 8001bba:	73a3      	strb	r3, [r4, #14]
 8001bbc:	222e      	movs	r2, #46	; 0x2e
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <main+0x2a4>)
 8001bc0:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <main+0x2a4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	2364      	movs	r3, #100	; 0x64
 8001bca:	493f      	ldr	r1, [pc, #252]	; (8001cc8 <main+0x29c>)
 8001bcc:	4841      	ldr	r0, [pc, #260]	; (8001cd4 <main+0x2a8>)
 8001bce:	f001 fbd8 	bl	8003382 <HAL_UART_Transmit>


  // ***********************************

  // Fill up the initial labels
  OL_layer.label[0] = 'A';
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2241      	movs	r2, #65	; 0x41
 8001bd6:	701a      	strb	r2, [r3, #0]
  OL_layer.label[1] = 'E';
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	2245      	movs	r2, #69	; 0x45
 8001bde:	701a      	strb	r2, [r3, #0]
  OL_layer.label[2] = 'I';
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3302      	adds	r3, #2
 8001be4:	2249      	movs	r2, #73	; 0x49
 8001be6:	701a      	strb	r2, [r3, #0]
  OL_layer.label[3] = 'O';
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3303      	adds	r3, #3
 8001bec:	224f      	movs	r2, #79	; 0x4f
 8001bee:	701a      	strb	r2, [r3, #0]
  OL_layer.label[4] = 'U';
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	2255      	movs	r2, #85	; 0x55
 8001bf6:	701a      	strb	r2, [r3, #0]

  // Fill up weigths and biases
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfc:	e00c      	b.n	8001c18 <main+0x1ec>
  	  OL_layer.weights[i]=saved_weights[i];
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	4937      	ldr	r1, [pc, #220]	; (8001ce4 <main+0x2b8>)
 8001c08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	440a      	add	r2, r1
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8001c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c14:	3301      	adds	r3, #1
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbeb      	blt.n	8001bfe <main+0x1d2>
  }

  for(int i=0; i<OL_layer.WIDTH; i++){
 8001c26:	2300      	movs	r3, #0
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c2a:	e00c      	b.n	8001c46 <main+0x21a>
	  OL_layer.biases[i]=saved_biases[i];
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	492c      	ldr	r1, [pc, #176]	; (8001ce8 <main+0x2bc>)
 8001c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	440a      	add	r2, r1
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH; i++){
 8001c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c42:	3301      	adds	r3, #1
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dbee      	blt.n	8001c2c <main+0x200>
  }

  //Create container for the output prediction of OL layer
  float * y_true = (float*)calloc(OL_layer.WIDTH, sizeof(float));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2104      	movs	r1, #4
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 f92a 	bl	8005eac <calloc>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30

  // ***********************************

  int CICCIO = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // When blue button is pressed perform these actions
	  if(enable_inference == 1){
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <main+0x2c0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 80cd 	bne.w	8001e04 <main+0x3d8>

		  // Reset the info carried from the OL layer
		  OL_resetInfo(&OL_layer);
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f973 	bl	8000f58 <OL_resetInfo>
			  in_data[k] = sample_B[CICCIO][k];
		  }
#else
		  // Reconstruct the message sent from the laptop (IMPORTANT FOR NEGATIVE NUMBERS)
		  uint8_t tmp;
		  for(int k=0; k<600; k++){
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
 8001c76:	e057      	b.n	8001d28 <main+0x2fc>
			  tmp = msgRxData[k*2];
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <main+0x2c4>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			  if((tmp&128) == 128){
 8001c84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da35      	bge.n	8001cf8 <main+0x2cc>
				  tmp = tmp & 127;
 8001c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				  in_data[k] = -((tmp << 8) | (msgRxData[(k*2)+1]));
 8001c98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca0:	0052      	lsls	r2, r2, #1
 8001ca2:	3201      	adds	r2, #1
 8001ca4:	4912      	ldr	r1, [pc, #72]	; (8001cf0 <main+0x2c4>)
 8001ca6:	5c8a      	ldrb	r2, [r1, r2]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	425b      	negs	r3, r3
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <main+0x2c8>)
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	edc3 7a00 	vstr	s15, [r3]
 8001cc0:	e02f      	b.n	8001d22 <main+0x2f6>
 8001cc2:	bf00      	nop
 8001cc4:	3a83126f 	.word	0x3a83126f
 8001cc8:	20002aa8 	.word	0x20002aa8
 8001ccc:	08009078 	.word	0x08009078
 8001cd0:	20002b28 	.word	0x20002b28
 8001cd4:	20003954 	.word	0x20003954
 8001cd8:	080090a8 	.word	0x080090a8
 8001cdc:	080090d8 	.word	0x080090d8
 8001ce0:	08009108 	.word	0x08009108
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20001770 	.word	0x20001770
 8001cec:	20001e34 	.word	0x20001e34
 8001cf0:	200025f8 	.word	0x200025f8
 8001cf4:	20002b40 	.word	0x20002b40
			  }else{
				  in_data[k] = (msgRxData[(k*2)] << 8) | (msgRxData[(k*2)+1]);
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4a4b      	ldr	r2, [pc, #300]	; (8001e2c <main+0x400>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d04:	0052      	lsls	r2, r2, #1
 8001d06:	3201      	adds	r2, #1
 8001d08:	4948      	ldr	r1, [pc, #288]	; (8001e2c <main+0x400>)
 8001d0a:	5c8a      	ldrb	r2, [r1, r2]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d16:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <main+0x404>)
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
		  for(int k=0; k<600; k++){
 8001d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d24:	3301      	adds	r3, #1
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
 8001d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d2e:	dba3      	blt.n	8001c78 <main+0x24c>
			  }
		  }
#endif

		  startTime = HAL_GetTick();
 8001d30:	f000 fb2c 	bl	800238c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <main+0x408>)
 8001d38:	601a      	str	r2, [r3, #0]

		  // Perform inference from FROZEN MODEL
		  ai_run_v2(&in_data, &out_data);
 8001d3a:	493f      	ldr	r1, [pc, #252]	; (8001e38 <main+0x40c>)
 8001d3c:	483c      	ldr	r0, [pc, #240]	; (8001e30 <main+0x404>)
 8001d3e:	f002 fb0b 	bl	8004358 <ai_run_v2>

		  endFrozenTime = HAL_GetTick();
 8001d42:	f000 fb23 	bl	800238c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <main+0x410>)
 8001d4a:	601a      	str	r2, [r3, #0]

		  // Check if the letter is known, otherwise increase dimensions
		  OL_checkNewClass(&OL_layer, letter);
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	493c      	ldr	r1, [pc, #240]	; (8001e40 <main+0x414>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fcb5 	bl	80016c0 <OL_checkNewClass>
		  OL_lettToSoft(&OL_layer, letter, y_true);
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d5a:	4939      	ldr	r1, [pc, #228]	; (8001e40 <main+0x414>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f928 	bl	8000fb2 <OL_lettToSoft>

		  // Perform training on last captured sample
		  OL_train(&OL_layer, out_data, y_true, letter);
 8001d62:	1d38      	adds	r0, r7, #4
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <main+0x414>)
 8001d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d68:	4933      	ldr	r1, [pc, #204]	; (8001e38 <main+0x40c>)
 8001d6a:	f7ff fcf1 	bl	8001750 <OL_train>

		  endOLTime = HAL_GetTick();
 8001d6e:	f000 fb0d 	bl	800238c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <main+0x418>)
 8001d76:	601a      	str	r2, [r3, #0]

		  // Send info data to laptop
		  msgInfo[0] = counter;
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <main+0x41c>)
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <main+0x420>)
 8001d7e:	701a      	strb	r2, [r3, #0]
		  msgInfo[1] = (uint8_t)(endFrozenTime-startTime);
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <main+0x410>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <main+0x408>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <main+0x420>)
 8001d92:	705a      	strb	r2, [r3, #1]
		  msgInfo[2] = (uint8_t)(endOLTime-endFrozenTime);
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <main+0x418>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <main+0x410>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <main+0x420>)
 8001da6:	709a      	strb	r2, [r3, #2]
		  msgInfo[3] = OL_layer.new_class;
 8001da8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <main+0x420>)
 8001dae:	70da      	strb	r2, [r3, #3]
		  msgInfo[4] = OL_layer.prediction_correct;
 8001db0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <main+0x420>)
 8001db6:	711a      	strb	r2, [r3, #4]
		  msgInfo[5] = OL_layer.w_update;
 8001db8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <main+0x420>)
 8001dbe:	715a      	strb	r2, [r3, #5]
		  msgInfo[6] = OL_layer.WIDTH;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <main+0x420>)
 8001dc6:	719a      	strb	r2, [r3, #6]
		  msgInfo[7] = OL_layer.HEIGHT;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <main+0x420>)
 8001dce:	71da      	strb	r2, [r3, #7]
		  msgInfo[8] = OL_layer.vowel_guess;
 8001dd0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <main+0x420>)
 8001dd6:	721a      	strb	r2, [r3, #8]

#ifdef  MOBA_X_DEBUG
		  msgLen = sprintf(msgDebug, "\n\r%d, %d, %d, %d, %d, %d, %d, %d, %c\n\n", msgInfo[0],msgInfo[1],msgInfo[2],msgInfo[3],msgInfo[4],msgInfo[5],msgInfo[6],msgInfo[7],msgInfo[8]);
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#else
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgInfo, 9, 100);
 8001dd8:	2364      	movs	r3, #100	; 0x64
 8001dda:	2209      	movs	r2, #9
 8001ddc:	491b      	ldr	r1, [pc, #108]	; (8001e4c <main+0x420>)
 8001dde:	481c      	ldr	r0, [pc, #112]	; (8001e50 <main+0x424>)
 8001de0:	f001 facf 	bl	8003382 <HAL_UART_Transmit>
#endif


		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001de4:	2120      	movs	r1, #32
 8001de6:	481b      	ldr	r0, [pc, #108]	; (8001e54 <main+0x428>)
 8001de8:	f000 fde9 	bl	80029be <HAL_GPIO_TogglePin>
		  counter +=1;
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <main+0x41c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <main+0x41c>)
 8001df6:	701a      	strb	r2, [r3, #0]
		  enable_inference = 0;
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <main+0x42c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
		  BlueButton = 0;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <main+0x430>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]

	  }

	  if(BlueButton == 1 && enable_inference == 0){
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <main+0x430>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	f47f af29 	bne.w	8001c60 <main+0x234>
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <main+0x42c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f47f af24 	bne.w	8001c60 <main+0x234>
		  HAL_Delay(10);
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f000 fac3 	bl	80023a4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e24:	480e      	ldr	r0, [pc, #56]	; (8001e60 <main+0x434>)
 8001e26:	f000 fdb1 	bl	800298c <HAL_GPIO_WritePin>
	  if(enable_inference == 1){
 8001e2a:	e719      	b.n	8001c60 <main+0x234>
 8001e2c:	200025f8 	.word	0x200025f8
 8001e30:	20002b40 	.word	0x20002b40
 8001e34:	20003950 	.word	0x20003950
 8001e38:	200034a0 	.word	0x200034a0
 8001e3c:	20002b34 	.word	0x20002b34
 8001e40:	20002b38 	.word	0x20002b38
 8001e44:	20002b3c 	.word	0x20002b3c
 8001e48:	20001e30 	.word	0x20001e30
 8001e4c:	200025ec 	.word	0x200025ec
 8001e50:	20003954 	.word	0x20003954
 8001e54:	40020000 	.word	0x40020000
 8001e58:	20001e34 	.word	0x20001e34
 8001e5c:	20001e38 	.word	0x20001e38
 8001e60:	40020400 	.word	0x40020400

08001e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b094      	sub	sp, #80	; 0x50
 8001e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6a:	f107 0320 	add.w	r3, r7, #32
 8001e6e:	2230      	movs	r2, #48	; 0x30
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 f867 	bl	8005f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <SystemClock_Config+0xd0>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <SystemClock_Config+0xd0>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e96:	6413      	str	r3, [r2, #64]	; 0x40
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <SystemClock_Config+0xd0>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <SystemClock_Config+0xd4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001eb0:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <SystemClock_Config+0xd4>)
 8001eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <SystemClock_Config+0xd4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ecc:	2310      	movs	r3, #16
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ed8:	2310      	movs	r3, #16
 8001eda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001edc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ee0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fd98 	bl	8002a24 <HAL_RCC_OscConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001efa:	f000 f871 	bl	8001fe0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efe:	230f      	movs	r3, #15
 8001f00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f02:	2302      	movs	r3, #2
 8001f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2102      	movs	r1, #2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fff2 	bl	8002f04 <HAL_RCC_ClockConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f26:	f000 f85b 	bl	8001fe0 <Error_Handler>
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3750      	adds	r7, #80	; 0x50
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40007000 	.word	0x40007000

08001f3c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]

	// IF BLUE BUTTON IS PRESSED
	if(BlueButton == 0){
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d12f      	bne.n	8001fae <HAL_GPIO_EXTI_Callback+0x72>

		if(GPIO_Pin == B1_Pin){
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f54:	d12b      	bne.n	8001fae <HAL_GPIO_EXTI_Callback+0x72>

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// LED
 8001f56:	2120      	movs	r1, #32
 8001f58:	4818      	ldr	r0, [pc, #96]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x80>)
 8001f5a:	f000 fd30 	bl	80029be <HAL_GPIO_TogglePin>

			BlueButton = 1;
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]

#ifndef MOBA_X_DEBUG
			msgLen = sprintf(msgDebug, "OK");
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x84>)
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001f68:	8811      	ldrh	r1, [r2, #0]
 8001f6a:	7892      	ldrb	r2, [r2, #2]
 8001f6c:	8019      	strh	r1, [r3, #0]
 8001f6e:	709a      	strb	r2, [r3, #2]
 8001f70:	2202      	movs	r2, #2
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001f74:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);		// Send to pc message in order to sync
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	2364      	movs	r3, #100	; 0x64
 8001f7e:	4910      	ldr	r1, [pc, #64]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x84>)
 8001f80:	4812      	ldr	r0, [pc, #72]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x90>)
 8001f82:	f001 f9fe 	bl	8003382 <HAL_UART_Transmit>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, DATA_LEN, 100);	    // Receive all the data
 8001f86:	2364      	movs	r3, #100	; 0x64
 8001f88:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001f8c:	4910      	ldr	r1, [pc, #64]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001f8e:	480f      	ldr	r0, [pc, #60]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x90>)
 8001f90:	f001 fa90 	bl	80034b4 <HAL_UART_Receive>

			HAL_UART_Receive(&huart2, (uint8_t*)msgRxLett, LETTER_LEN, 100);	// Receive the label
 8001f94:	2364      	movs	r3, #100	; 0x64
 8001f96:	2201      	movs	r2, #1
 8001f98:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f9a:	480c      	ldr	r0, [pc, #48]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x90>)
 8001f9c:	f001 fa8a 	bl	80034b4 <HAL_UART_Receive>

			letter[0] = msgRxLett[0];
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001fa6:	701a      	strb	r2, [r3, #0]
#endif

			enable_inference = 1;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_GPIO_EXTI_Callback+0xa0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
		}
	}
*/


}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20001e38 	.word	0x20001e38
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	20002aa8 	.word	0x20002aa8
 8001fc4:	08009138 	.word	0x08009138
 8001fc8:	20002b28 	.word	0x20002b28
 8001fcc:	20003954 	.word	0x20003954
 8001fd0:	200025f8 	.word	0x200025f8
 8001fd4:	200025e8 	.word	0x200025e8
 8001fd8:	20002b38 	.word	0x20002b38
 8001fdc:	20001e34 	.word	0x20001e34

08001fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <Error_Handler+0x6>

08001fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_MspInit+0x5c>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <HAL_MspInit+0x5c>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_MspInit+0x5c>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_MspInit+0x5c>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_MspInit+0x5c>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_MspInit+0x5c>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002026:	2007      	movs	r0, #7
 8002028:	f000 faae 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	2051      	movs	r0, #81	; 0x51
 8002032:	f000 fab4 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002036:	2051      	movs	r0, #81	; 0x51
 8002038:	f000 facd 	bl	80025d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800

08002048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800204c:	e7fe      	b.n	800204c <NMI_Handler+0x4>

0800204e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <MemManage_Handler+0x4>

0800205a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <UsageFault_Handler+0x4>

08002066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002094:	f000 f966 	bl	8002364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80020a0:	2020      	movs	r0, #32
 80020a2:	f000 fca7 	bl	80029f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <USART2_IRQHandler+0x10>)
 80020b2:	f001 faa5 	bl	8003600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20003954 	.word	0x20003954

080020c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020c8:	f000 fc94 	bl	80029f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <_sbrk+0x5c>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <_sbrk+0x60>)
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <_sbrk+0x64>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <_sbrk+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d207      	bcs.n	8002120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002110:	f003 fed4 	bl	8005ebc <__errno>
 8002114:	4602      	mov	r2, r0
 8002116:	230c      	movs	r3, #12
 8002118:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	e009      	b.n	8002134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <_sbrk+0x64>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20018000 	.word	0x20018000
 8002140:	00001000 	.word	0x00001000
 8002144:	20001e3c 	.word	0x20001e3c
 8002148:	200039a0 	.word	0x200039a0

0800214c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <SystemInit+0x28>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	4a07      	ldr	r2, [pc, #28]	; (8002174 <SystemInit+0x28>)
 8002158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800215c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <SystemInit+0x28>)
 8002162:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002166:	609a      	str	r2, [r3, #8]
#endif
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_USART2_UART_Init+0x4c>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <MX_USART2_UART_Init+0x50>)
 8002180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <MX_USART2_UART_Init+0x4c>)
 8002184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_USART2_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <MX_USART2_UART_Init+0x4c>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_USART2_UART_Init+0x4c>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_USART2_UART_Init+0x4c>)
 800219e:	220c      	movs	r2, #12
 80021a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <MX_USART2_UART_Init+0x4c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_USART2_UART_Init+0x4c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_USART2_UART_Init+0x4c>)
 80021b0:	f001 f89a 	bl	80032e8 <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ba:	f7ff ff11 	bl	8001fe0 <Error_Handler>
  }

}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20003954 	.word	0x20003954
 80021c8:	40004400 	.word	0x40004400

080021cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <HAL_UART_MspInit+0x94>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d133      	bne.n	8002256 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_UART_MspInit+0x98>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_UART_MspInit+0x98>)
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_UART_MspInit+0x98>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_UART_MspInit+0x98>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_UART_MspInit+0x98>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_UART_MspInit+0x98>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002226:	230c      	movs	r3, #12
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002236:	2307      	movs	r3, #7
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	4809      	ldr	r0, [pc, #36]	; (8002268 <HAL_UART_MspInit+0x9c>)
 8002242:	f000 fa21 	bl	8002688 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2026      	movs	r0, #38	; 0x26
 800224c:	f000 f9a7 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002250:	2026      	movs	r0, #38	; 0x26
 8002252:	f000 f9c0 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40004400 	.word	0x40004400
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000

0800226c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800226c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002270:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002272:	e003      	b.n	800227c <LoopCopyDataInit>

08002274 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002276:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002278:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800227a:	3104      	adds	r1, #4

0800227c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800227c:	480b      	ldr	r0, [pc, #44]	; (80022ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002280:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002282:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002284:	d3f6      	bcc.n	8002274 <CopyDataInit>
  ldr  r2, =_sbss
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002288:	e002      	b.n	8002290 <LoopFillZerobss>

0800228a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800228a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800228c:	f842 3b04 	str.w	r3, [r2], #4

08002290 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002292:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002294:	d3f9      	bcc.n	800228a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002296:	f7ff ff59 	bl	800214c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229a:	f003 fe15 	bl	8005ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229e:	f7ff fbc5 	bl	8001a2c <main>
  bx  lr    
 80022a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80022a8:	0807a528 	.word	0x0807a528
  ldr  r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022b0:	20001e14 	.word	0x20001e14
  ldr  r2, =_sbss
 80022b4:	20001e14 	.word	0x20001e14
  ldr  r3, = _ebss
 80022b8:	2000399c 	.word	0x2000399c

080022bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC_IRQHandler>
	...

080022c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <HAL_Init+0x40>)
 80022ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_Init+0x40>)
 80022d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_Init+0x40>)
 80022e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f000 f94d 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f000 f808 	bl	8002304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f4:	f7ff fe78 	bl	8001fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00

08002304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_InitTick+0x54>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x58>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	fbb3 f3f1 	udiv	r3, r3, r1
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f965 	bl	80025f2 <HAL_SYSTICK_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00e      	b.n	8002350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b0f      	cmp	r3, #15
 8002336:	d80a      	bhi.n	800234e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002338:	2200      	movs	r2, #0
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f000 f92d 	bl	800259e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002344:	4a06      	ldr	r2, [pc, #24]	; (8002360 <HAL_InitTick+0x5c>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20001784 	.word	0x20001784
 800235c:	2000178c 	.word	0x2000178c
 8002360:	20001788 	.word	0x20001788

08002364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_IncTick+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x24>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4413      	add	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_IncTick+0x24>)
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	2000178c 	.word	0x2000178c
 8002388:	20003994 	.word	0x20003994

0800238c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_GetTick+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20003994 	.word	0x20003994

080023a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff ffee 	bl	800238c <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d005      	beq.n	80023ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_Delay+0x40>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ca:	bf00      	nop
 80023cc:	f7ff ffde 	bl	800238c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8f7      	bhi.n	80023cc <HAL_Delay+0x28>
  {
  }
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000178c 	.word	0x2000178c

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <__NVIC_EnableIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	; (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f7ff ff8e 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff29 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff3e 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff8e 	bl	80024dc <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5d 	bl	8002488 <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff31 	bl	800244c <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa2 	bl	8002544 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e00e      	b.n	800263a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	795b      	ldrb	r3, [r3, #5]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff f937 	bl	80018a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d004      	beq.n	8002660 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e00c      	b.n	800267a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2205      	movs	r2, #5
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	e159      	b.n	8002958 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8148 	bne.w	8002952 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d00b      	beq.n	80026e2 <HAL_GPIO_Init+0x5a>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b12      	cmp	r3, #18
 80026e0:	d130      	bne.n	8002744 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0xfc>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b12      	cmp	r3, #18
 8002782:	d123      	bne.n	80027cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	08da      	lsrs	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3208      	adds	r2, #8
 800278c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	220f      	movs	r2, #15
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	08da      	lsrs	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3208      	adds	r2, #8
 80027c6:	69b9      	ldr	r1, [r7, #24]
 80027c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0203 	and.w	r2, r3, #3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a2 	beq.w	8002952 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b56      	ldr	r3, [pc, #344]	; (800296c <HAL_GPIO_Init+0x2e4>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a55      	ldr	r2, [pc, #340]	; (800296c <HAL_GPIO_Init+0x2e4>)
 8002818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_GPIO_Init+0x2e4>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282a:	4a51      	ldr	r2, [pc, #324]	; (8002970 <HAL_GPIO_Init+0x2e8>)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a48      	ldr	r2, [pc, #288]	; (8002974 <HAL_GPIO_Init+0x2ec>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x202>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a47      	ldr	r2, [pc, #284]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x1fe>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a46      	ldr	r2, [pc, #280]	; (800297c <HAL_GPIO_Init+0x2f4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x1fa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a45      	ldr	r2, [pc, #276]	; (8002980 <HAL_GPIO_Init+0x2f8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x1f6>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a44      	ldr	r2, [pc, #272]	; (8002984 <HAL_GPIO_Init+0x2fc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x1f2>
 8002876:	2304      	movs	r3, #4
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x204>
 800287a:	2307      	movs	r3, #7
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x204>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x204>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x204>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x204>
 800288a:	2300      	movs	r3, #0
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289c:	4934      	ldr	r1, [pc, #208]	; (8002970 <HAL_GPIO_Init+0x2e8>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028aa:	4b37      	ldr	r3, [pc, #220]	; (8002988 <HAL_GPIO_Init+0x300>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ce:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <HAL_GPIO_Init+0x300>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028d4:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <HAL_GPIO_Init+0x300>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <HAL_GPIO_Init+0x300>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_GPIO_Init+0x300>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002922:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_GPIO_Init+0x300>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_GPIO_Init+0x300>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800294c:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <HAL_GPIO_Init+0x300>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	f67f aea2 	bls.w	80026a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3724      	adds	r7, #36	; 0x24
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40023800 	.word	0x40023800
 8002970:	40013800 	.word	0x40013800
 8002974:	40020000 	.word	0x40020000
 8002978:	40020400 	.word	0x40020400
 800297c:	40020800 	.word	0x40020800
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40021000 	.word	0x40021000
 8002988:	40013c00 	.word	0x40013c00

0800298c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800299c:	787b      	ldrb	r3, [r7, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a8:	e003      	b.n	80029b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	619a      	str	r2, [r3, #24]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	887b      	ldrh	r3, [r7, #2]
 80029d0:	401a      	ands	r2, r3
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d104      	bne.n	80029e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	041a      	lsls	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fa92 	bl	8001f3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40013c00 	.word	0x40013c00

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e25b      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d075      	beq.n	8002b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a42:	4ba3      	ldr	r3, [pc, #652]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d00c      	beq.n	8002a68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4e:	4ba0      	ldr	r3, [pc, #640]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d112      	bne.n	8002a80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5a:	4b9d      	ldr	r3, [pc, #628]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a66:	d10b      	bne.n	8002a80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	4b99      	ldr	r3, [pc, #612]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d05b      	beq.n	8002b2c <HAL_RCC_OscConfig+0x108>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d157      	bne.n	8002b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e236      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d106      	bne.n	8002a98 <HAL_RCC_OscConfig+0x74>
 8002a8a:	4b91      	ldr	r3, [pc, #580]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a90      	ldr	r2, [pc, #576]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e01d      	b.n	8002ad4 <HAL_RCC_OscConfig+0xb0>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x98>
 8002aa2:	4b8b      	ldr	r3, [pc, #556]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a8a      	ldr	r2, [pc, #552]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b88      	ldr	r3, [pc, #544]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a87      	ldr	r2, [pc, #540]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0xb0>
 8002abc:	4b84      	ldr	r3, [pc, #528]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a83      	ldr	r2, [pc, #524]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b81      	ldr	r3, [pc, #516]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a80      	ldr	r2, [pc, #512]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff fc56 	bl	800238c <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7ff fc52 	bl	800238c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1fb      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xc0>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7ff fc42 	bl	800238c <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7ff fc3e 	bl	800238c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e1e7      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	4b6c      	ldr	r3, [pc, #432]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0xe8>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d063      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b46:	4b62      	ldr	r3, [pc, #392]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d11c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b52:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d116      	bne.n	8002b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	4b5c      	ldr	r3, [pc, #368]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_RCC_OscConfig+0x152>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e1bb      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b76:	4b56      	ldr	r3, [pc, #344]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4952      	ldr	r1, [pc, #328]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	e03a      	b.n	8002c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b94:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <HAL_RCC_OscConfig+0x2b0>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7ff fbf7 	bl	800238c <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7ff fbf3 	bl	800238c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e19c      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4940      	ldr	r1, [pc, #256]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
 8002bd4:	e015      	b.n	8002c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_RCC_OscConfig+0x2b0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7ff fbd6 	bl	800238c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be4:	f7ff fbd2 	bl	800238c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e17b      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d030      	beq.n	8002c70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c16:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <HAL_RCC_OscConfig+0x2b4>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7ff fbb6 	bl	800238c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c24:	f7ff fbb2 	bl	800238c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e15b      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x200>
 8002c42:	e015      	b.n	8002c70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_OscConfig+0x2b4>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7ff fb9f 	bl	800238c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c52:	f7ff fb9b 	bl	800238c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e144      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a0 	beq.w	8002dbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCC_OscConfig+0x2b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d121      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_RCC_OscConfig+0x2b8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_RCC_OscConfig+0x2b8>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc6:	f7ff fb61 	bl	800238c <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	e011      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2ce>
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	42470000 	.word	0x42470000
 8002cd8:	42470e80 	.word	0x42470e80
 8002cdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7ff fb54 	bl	800238c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0fd      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	4b81      	ldr	r3, [pc, #516]	; (8002ef8 <HAL_RCC_OscConfig+0x4d4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
 8002d06:	4b7d      	ldr	r3, [pc, #500]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a7c      	ldr	r2, [pc, #496]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
 8002d12:	e01c      	b.n	8002d4e <HAL_RCC_OscConfig+0x32a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d10c      	bne.n	8002d36 <HAL_RCC_OscConfig+0x312>
 8002d1c:	4b77      	ldr	r3, [pc, #476]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	4a76      	ldr	r2, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6713      	str	r3, [r2, #112]	; 0x70
 8002d28:	4b74      	ldr	r3, [pc, #464]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2c:	4a73      	ldr	r2, [pc, #460]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6713      	str	r3, [r2, #112]	; 0x70
 8002d34:	e00b      	b.n	8002d4e <HAL_RCC_OscConfig+0x32a>
 8002d36:	4b71      	ldr	r3, [pc, #452]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a70      	ldr	r2, [pc, #448]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	4b6e      	ldr	r3, [pc, #440]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a6d      	ldr	r2, [pc, #436]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d015      	beq.n	8002d82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d56:	f7ff fb19 	bl	800238c <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7ff fb15 	bl	800238c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0bc      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	4b61      	ldr	r3, [pc, #388]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ee      	beq.n	8002d5e <HAL_RCC_OscConfig+0x33a>
 8002d80:	e014      	b.n	8002dac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7ff fb03 	bl	800238c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7ff faff 	bl	800238c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0a6      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	4b56      	ldr	r3, [pc, #344]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ee      	bne.n	8002d8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db2:	4b52      	ldr	r3, [pc, #328]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a51      	ldr	r2, [pc, #324]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8092 	beq.w	8002eec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dc8:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d05c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d141      	bne.n	8002e60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <HAL_RCC_OscConfig+0x4dc>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7ff fad3 	bl	800238c <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dea:	f7ff facf 	bl	800238c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e078      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfc:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	019b      	lsls	r3, r3, #6
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	4933      	ldr	r1, [pc, #204]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <HAL_RCC_OscConfig+0x4dc>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7ff faa8 	bl	800238c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7ff faa4 	bl	800238c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e04d      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x41c>
 8002e5e:	e045      	b.n	8002eec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x4dc>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7ff fa91 	bl	800238c <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7ff fa8d 	bl	800238c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e036      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x44a>
 8002e8c:	e02e      	b.n	8002eec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e029      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <HAL_RCC_OscConfig+0x4d8>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d115      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d10d      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470060 	.word	0x42470060

08002f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0cc      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b68      	ldr	r3, [pc, #416]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d90c      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0b8      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f58:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f70:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	494d      	ldr	r1, [pc, #308]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d044      	beq.n	8003024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e067      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 0203 	bic.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4934      	ldr	r1, [pc, #208]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7ff f9ca 	bl	800238c <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7ff f9c6 	bl	800238c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e04f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 020c 	and.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d1eb      	bne.n	8002ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d20c      	bcs.n	800304c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e032      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4916      	ldr	r1, [pc, #88]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308a:	f000 f821 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 800308e:	4601      	mov	r1, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
 800309e:	fa21 f303 	lsr.w	r3, r1, r3
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f92a 	bl	8002304 <HAL_InitTick>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00
 80030c0:	40023800 	.word	0x40023800
 80030c4:	08009310 	.word	0x08009310
 80030c8:	20001784 	.word	0x20001784
 80030cc:	20001788 	.word	0x20001788

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	2300      	movs	r3, #0
 80030e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e6:	4b63      	ldr	r3, [pc, #396]	; (8003274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d007      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x32>
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d008      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x38>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 80b4 	bne.w	8003264 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b5e      	ldr	r3, [pc, #376]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030fe:	60bb      	str	r3, [r7, #8]
       break;
 8003100:	e0b3      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003102:	4b5e      	ldr	r3, [pc, #376]	; (800327c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003104:	60bb      	str	r3, [r7, #8]
      break;
 8003106:	e0b0      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003108:	4b5a      	ldr	r3, [pc, #360]	; (8003274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003110:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003112:	4b58      	ldr	r3, [pc, #352]	; (8003274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d04a      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311e:	4b55      	ldr	r3, [pc, #340]	; (8003274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	f04f 0400 	mov.w	r4, #0
 8003128:	f240 11ff 	movw	r1, #511	; 0x1ff
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	ea03 0501 	and.w	r5, r3, r1
 8003134:	ea04 0602 	and.w	r6, r4, r2
 8003138:	4629      	mov	r1, r5
 800313a:	4632      	mov	r2, r6
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	f04f 0400 	mov.w	r4, #0
 8003144:	0154      	lsls	r4, r2, #5
 8003146:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800314a:	014b      	lsls	r3, r1, #5
 800314c:	4619      	mov	r1, r3
 800314e:	4622      	mov	r2, r4
 8003150:	1b49      	subs	r1, r1, r5
 8003152:	eb62 0206 	sbc.w	r2, r2, r6
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	f04f 0400 	mov.w	r4, #0
 800315e:	0194      	lsls	r4, r2, #6
 8003160:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003164:	018b      	lsls	r3, r1, #6
 8003166:	1a5b      	subs	r3, r3, r1
 8003168:	eb64 0402 	sbc.w	r4, r4, r2
 800316c:	f04f 0100 	mov.w	r1, #0
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	00e2      	lsls	r2, r4, #3
 8003176:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800317a:	00d9      	lsls	r1, r3, #3
 800317c:	460b      	mov	r3, r1
 800317e:	4614      	mov	r4, r2
 8003180:	195b      	adds	r3, r3, r5
 8003182:	eb44 0406 	adc.w	r4, r4, r6
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	0262      	lsls	r2, r4, #9
 8003190:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003194:	0259      	lsls	r1, r3, #9
 8003196:	460b      	mov	r3, r1
 8003198:	4614      	mov	r4, r2
 800319a:	4618      	mov	r0, r3
 800319c:	4621      	mov	r1, r4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f04f 0400 	mov.w	r4, #0
 80031a4:	461a      	mov	r2, r3
 80031a6:	4623      	mov	r3, r4
 80031a8:	f7fd fd56 	bl	8000c58 <__aeabi_uldivmod>
 80031ac:	4603      	mov	r3, r0
 80031ae:	460c      	mov	r4, r1
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e049      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b4:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	f04f 0400 	mov.w	r4, #0
 80031be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	ea03 0501 	and.w	r5, r3, r1
 80031ca:	ea04 0602 	and.w	r6, r4, r2
 80031ce:	4629      	mov	r1, r5
 80031d0:	4632      	mov	r2, r6
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f04f 0400 	mov.w	r4, #0
 80031da:	0154      	lsls	r4, r2, #5
 80031dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031e0:	014b      	lsls	r3, r1, #5
 80031e2:	4619      	mov	r1, r3
 80031e4:	4622      	mov	r2, r4
 80031e6:	1b49      	subs	r1, r1, r5
 80031e8:	eb62 0206 	sbc.w	r2, r2, r6
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	f04f 0400 	mov.w	r4, #0
 80031f4:	0194      	lsls	r4, r2, #6
 80031f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031fa:	018b      	lsls	r3, r1, #6
 80031fc:	1a5b      	subs	r3, r3, r1
 80031fe:	eb64 0402 	sbc.w	r4, r4, r2
 8003202:	f04f 0100 	mov.w	r1, #0
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	00e2      	lsls	r2, r4, #3
 800320c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003210:	00d9      	lsls	r1, r3, #3
 8003212:	460b      	mov	r3, r1
 8003214:	4614      	mov	r4, r2
 8003216:	195b      	adds	r3, r3, r5
 8003218:	eb44 0406 	adc.w	r4, r4, r6
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	02a2      	lsls	r2, r4, #10
 8003226:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800322a:	0299      	lsls	r1, r3, #10
 800322c:	460b      	mov	r3, r1
 800322e:	4614      	mov	r4, r2
 8003230:	4618      	mov	r0, r3
 8003232:	4621      	mov	r1, r4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	461a      	mov	r2, r3
 800323c:	4623      	mov	r3, r4
 800323e:	f7fd fd0b 	bl	8000c58 <__aeabi_uldivmod>
 8003242:	4603      	mov	r3, r0
 8003244:	460c      	mov	r4, r1
 8003246:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	3301      	adds	r3, #1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	60bb      	str	r3, [r7, #8]
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003266:	60bb      	str	r3, [r7, #8]
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	68bb      	ldr	r3, [r7, #8]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	00f42400 	.word	0x00f42400
 800327c:	007a1200 	.word	0x007a1200

08003280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <HAL_RCC_GetHCLKFreq+0x14>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20001784 	.word	0x20001784

08003298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800329c:	f7ff fff0 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80032a0:	4601      	mov	r1, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0a9b      	lsrs	r3, r3, #10
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4a03      	ldr	r2, [pc, #12]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	08009320 	.word	0x08009320

080032c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032c4:	f7ff ffdc 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80032c8:	4601      	mov	r1, r0
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0b5b      	lsrs	r3, r3, #13
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40023800 	.word	0x40023800
 80032e4:	08009320 	.word	0x08009320

080032e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e03f      	b.n	800337a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe ff5c 	bl	80021cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	; 0x24
 8003318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fbf1 	bl	8003b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b088      	sub	sp, #32
 8003386:	af02      	add	r7, sp, #8
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b20      	cmp	r3, #32
 80033a0:	f040 8083 	bne.w	80034aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_UART_Transmit+0x2e>
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e07b      	b.n	80034ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_UART_Transmit+0x40>
 80033be:	2302      	movs	r3, #2
 80033c0:	e074      	b.n	80034ac <HAL_UART_Transmit+0x12a>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2221      	movs	r2, #33	; 0x21
 80033d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033d8:	f7fe ffd8 	bl	800238c <HAL_GetTick>
 80033dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	88fa      	ldrh	r2, [r7, #6]
 80033e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80033f2:	e042      	b.n	800347a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	d122      	bne.n	8003452 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fa10 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e042      	b.n	80034ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003438:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3302      	adds	r3, #2
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	e017      	b.n	800347a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3301      	adds	r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	e013      	b.n	800347a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f9ed 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e01f      	b.n	80034ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	60ba      	str	r2, [r7, #8]
 8003472:	781a      	ldrb	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1b7      	bne.n	80033f4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2200      	movs	r2, #0
 800348c:	2140      	movs	r1, #64	; 0x40
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f9d4 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e006      	b.n	80034ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	f040 8090 	bne.w	80035f6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_UART_Receive+0x2e>
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e088      	b.n	80035f8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Receive+0x40>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e081      	b.n	80035f8 <HAL_UART_Receive+0x144>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2222      	movs	r2, #34	; 0x22
 8003506:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800350a:	f7fe ff3f 	bl	800238c <HAL_GetTick>
 800350e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	88fa      	ldrh	r2, [r7, #6]
 8003514:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003524:	e05c      	b.n	80035e0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d12b      	bne.n	8003596 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	2120      	movs	r1, #32
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f977 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e04f      	b.n	80035f8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10c      	bne.n	800357e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	b29b      	uxth	r3, r3
 800356c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003570:	b29a      	uxth	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3302      	adds	r3, #2
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	e030      	b.n	80035e0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	b29b      	uxth	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b29a      	uxth	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	3301      	adds	r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	e024      	b.n	80035e0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2120      	movs	r1, #32
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f94b 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e023      	b.n	80035f8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d108      	bne.n	80035ca <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	60ba      	str	r2, [r7, #8]
 80035c4:	b2ca      	uxtb	r2, r1
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	e00a      	b.n	80035e0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1c59      	adds	r1, r3, #1
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d19d      	bne.n	8003526 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e000      	b.n	80035f8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
  }
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10d      	bne.n	8003652 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_UART_IRQHandler+0x52>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f9e0 	bl	8003a10 <UART_Receive_IT>
      return;
 8003650:	e0d1      	b.n	80037f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80b0 	beq.w	80037ba <HAL_UART_IRQHandler+0x1ba>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <HAL_UART_IRQHandler+0x70>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80a5 	beq.w	80037ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_UART_IRQHandler+0x90>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_UART_IRQHandler+0xb0>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	f043 0202 	orr.w	r2, r3, #2
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_UART_IRQHandler+0xd0>
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00f      	beq.n	80036fa <HAL_UART_IRQHandler+0xfa>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_UART_IRQHandler+0xee>
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	f043 0208 	orr.w	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d078      	beq.n	80037f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_UART_IRQHandler+0x11c>
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f97a 	bl	8003a10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_UART_IRQHandler+0x144>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d031      	beq.n	80037a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f8c3 	bl	80038d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d123      	bne.n	80037a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003766:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_UART_IRQHandler+0x1fc>)
 8003776:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe ff60 	bl	8002642 <HAL_DMA_Abort_IT>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d016      	beq.n	80037b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003792:	4610      	mov	r0, r2
 8003794:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003796:	e00e      	b.n	80037b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f845 	bl	8003828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379e:	e00a      	b.n	80037b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f841 	bl	8003828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a6:	e006      	b.n	80037b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f83d 	bl	8003828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80037b4:	e01e      	b.n	80037f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b6:	bf00      	nop
    return;
 80037b8:	e01c      	b.n	80037f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1d6>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8b0 	bl	8003934 <UART_Transmit_IT>
    return;
 80037d4:	e00f      	b.n	80037f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_UART_IRQHandler+0x1f6>
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8f8 	bl	80039e0 <UART_EndTransmit_IT>
    return;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80037f4:	bf00      	nop
  }
}
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	0800390d 	.word	0x0800390d

08003800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384c:	e02c      	b.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d028      	beq.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0x30>
 800385c:	f7fe fd96 	bl	800238c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	429a      	cmp	r2, r3
 800386a:	d21d      	bcs.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800387a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e00f      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d0c3      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff ff7e 	bl	8003828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b21      	cmp	r3, #33	; 0x21
 8003946:	d144      	bne.n	80039d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	d11a      	bne.n	8003988 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003966:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d105      	bne.n	800397c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	1c9a      	adds	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	621a      	str	r2, [r3, #32]
 800397a:	e00e      	b.n	800399a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]
 8003986:	e008      	b.n	800399a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	1c59      	adds	r1, r3, #1
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6211      	str	r1, [r2, #32]
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4619      	mov	r1, r3
 80039a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10f      	bne.n	80039ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e000      	b.n	80039d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
  }
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff fefd 	bl	8003800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b22      	cmp	r3, #34	; 0x22
 8003a22:	d171      	bne.n	8003b08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2c:	d123      	bne.n	8003a76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10e      	bne.n	8003a5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	1c9a      	adds	r2, r3, #2
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
 8003a58:	e029      	b.n	8003aae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
 8003a74:	e01b      	b.n	8003aae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6858      	ldr	r0, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	1c59      	adds	r1, r3, #1
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6291      	str	r1, [r2, #40]	; 0x28
 8003a8e:	b2c2      	uxtb	r2, r0
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e00c      	b.n	8003aae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	1c58      	adds	r0, r3, #1
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	6288      	str	r0, [r1, #40]	; 0x28
 8003aa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4619      	mov	r1, r3
 8003abc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d120      	bne.n	8003b04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0220 	bic.w	r2, r2, #32
 8003ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fe8a 	bl	8003814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e002      	b.n	8003b0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b56:	f023 030c 	bic.w	r3, r3, #12
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	f040 818b 	bne.w	8003e9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4ac1      	ldr	r2, [pc, #772]	; (8003e90 <UART_SetConfig+0x37c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d005      	beq.n	8003b9c <UART_SetConfig+0x88>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4abf      	ldr	r2, [pc, #764]	; (8003e94 <UART_SetConfig+0x380>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f040 80bd 	bne.w	8003d16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b9c:	f7ff fb90 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 8003ba0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	461d      	mov	r5, r3
 8003ba6:	f04f 0600 	mov.w	r6, #0
 8003baa:	46a8      	mov	r8, r5
 8003bac:	46b1      	mov	r9, r6
 8003bae:	eb18 0308 	adds.w	r3, r8, r8
 8003bb2:	eb49 0409 	adc.w	r4, r9, r9
 8003bb6:	4698      	mov	r8, r3
 8003bb8:	46a1      	mov	r9, r4
 8003bba:	eb18 0805 	adds.w	r8, r8, r5
 8003bbe:	eb49 0906 	adc.w	r9, r9, r6
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bd6:	4688      	mov	r8, r1
 8003bd8:	4691      	mov	r9, r2
 8003bda:	eb18 0005 	adds.w	r0, r8, r5
 8003bde:	eb49 0106 	adc.w	r1, r9, r6
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	461d      	mov	r5, r3
 8003be8:	f04f 0600 	mov.w	r6, #0
 8003bec:	196b      	adds	r3, r5, r5
 8003bee:	eb46 0406 	adc.w	r4, r6, r6
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	f7fd f82f 	bl	8000c58 <__aeabi_uldivmod>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4ba5      	ldr	r3, [pc, #660]	; (8003e98 <UART_SetConfig+0x384>)
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	461d      	mov	r5, r3
 8003c10:	f04f 0600 	mov.w	r6, #0
 8003c14:	46a9      	mov	r9, r5
 8003c16:	46b2      	mov	sl, r6
 8003c18:	eb19 0309 	adds.w	r3, r9, r9
 8003c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c20:	4699      	mov	r9, r3
 8003c22:	46a2      	mov	sl, r4
 8003c24:	eb19 0905 	adds.w	r9, r9, r5
 8003c28:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c40:	4689      	mov	r9, r1
 8003c42:	4692      	mov	sl, r2
 8003c44:	eb19 0005 	adds.w	r0, r9, r5
 8003c48:	eb4a 0106 	adc.w	r1, sl, r6
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	461d      	mov	r5, r3
 8003c52:	f04f 0600 	mov.w	r6, #0
 8003c56:	196b      	adds	r3, r5, r5
 8003c58:	eb46 0406 	adc.w	r4, r6, r6
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4623      	mov	r3, r4
 8003c60:	f7fc fffa 	bl	8000c58 <__aeabi_uldivmod>
 8003c64:	4603      	mov	r3, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	; (8003e98 <UART_SetConfig+0x384>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	; 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	3332      	adds	r3, #50	; 0x32
 8003c7e:	4a86      	ldr	r2, [pc, #536]	; (8003e98 <UART_SetConfig+0x384>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c8c:	4498      	add	r8, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	461d      	mov	r5, r3
 8003c92:	f04f 0600 	mov.w	r6, #0
 8003c96:	46a9      	mov	r9, r5
 8003c98:	46b2      	mov	sl, r6
 8003c9a:	eb19 0309 	adds.w	r3, r9, r9
 8003c9e:	eb4a 040a 	adc.w	r4, sl, sl
 8003ca2:	4699      	mov	r9, r3
 8003ca4:	46a2      	mov	sl, r4
 8003ca6:	eb19 0905 	adds.w	r9, r9, r5
 8003caa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cc2:	4689      	mov	r9, r1
 8003cc4:	4692      	mov	sl, r2
 8003cc6:	eb19 0005 	adds.w	r0, r9, r5
 8003cca:	eb4a 0106 	adc.w	r1, sl, r6
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	461d      	mov	r5, r3
 8003cd4:	f04f 0600 	mov.w	r6, #0
 8003cd8:	196b      	adds	r3, r5, r5
 8003cda:	eb46 0406 	adc.w	r4, r6, r6
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	f7fc ffb9 	bl	8000c58 <__aeabi_uldivmod>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	460c      	mov	r4, r1
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <UART_SetConfig+0x384>)
 8003cee:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2164      	movs	r1, #100	; 0x64
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	3332      	adds	r3, #50	; 0x32
 8003d00:	4a65      	ldr	r2, [pc, #404]	; (8003e98 <UART_SetConfig+0x384>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	f003 0207 	and.w	r2, r3, #7
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4442      	add	r2, r8
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e26f      	b.n	80041f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d16:	f7ff fabf 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8003d1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	461d      	mov	r5, r3
 8003d20:	f04f 0600 	mov.w	r6, #0
 8003d24:	46a8      	mov	r8, r5
 8003d26:	46b1      	mov	r9, r6
 8003d28:	eb18 0308 	adds.w	r3, r8, r8
 8003d2c:	eb49 0409 	adc.w	r4, r9, r9
 8003d30:	4698      	mov	r8, r3
 8003d32:	46a1      	mov	r9, r4
 8003d34:	eb18 0805 	adds.w	r8, r8, r5
 8003d38:	eb49 0906 	adc.w	r9, r9, r6
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d50:	4688      	mov	r8, r1
 8003d52:	4691      	mov	r9, r2
 8003d54:	eb18 0005 	adds.w	r0, r8, r5
 8003d58:	eb49 0106 	adc.w	r1, r9, r6
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	461d      	mov	r5, r3
 8003d62:	f04f 0600 	mov.w	r6, #0
 8003d66:	196b      	adds	r3, r5, r5
 8003d68:	eb46 0406 	adc.w	r4, r6, r6
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4623      	mov	r3, r4
 8003d70:	f7fc ff72 	bl	8000c58 <__aeabi_uldivmod>
 8003d74:	4603      	mov	r3, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <UART_SetConfig+0x384>)
 8003d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	461d      	mov	r5, r3
 8003d8a:	f04f 0600 	mov.w	r6, #0
 8003d8e:	46a9      	mov	r9, r5
 8003d90:	46b2      	mov	sl, r6
 8003d92:	eb19 0309 	adds.w	r3, r9, r9
 8003d96:	eb4a 040a 	adc.w	r4, sl, sl
 8003d9a:	4699      	mov	r9, r3
 8003d9c:	46a2      	mov	sl, r4
 8003d9e:	eb19 0905 	adds.w	r9, r9, r5
 8003da2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003db6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dba:	4689      	mov	r9, r1
 8003dbc:	4692      	mov	sl, r2
 8003dbe:	eb19 0005 	adds.w	r0, r9, r5
 8003dc2:	eb4a 0106 	adc.w	r1, sl, r6
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	461d      	mov	r5, r3
 8003dcc:	f04f 0600 	mov.w	r6, #0
 8003dd0:	196b      	adds	r3, r5, r5
 8003dd2:	eb46 0406 	adc.w	r4, r6, r6
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4623      	mov	r3, r4
 8003dda:	f7fc ff3d 	bl	8000c58 <__aeabi_uldivmod>
 8003dde:	4603      	mov	r3, r0
 8003de0:	460c      	mov	r4, r1
 8003de2:	461a      	mov	r2, r3
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <UART_SetConfig+0x384>)
 8003de6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2164      	movs	r1, #100	; 0x64
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	3332      	adds	r3, #50	; 0x32
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <UART_SetConfig+0x384>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e06:	4498      	add	r8, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	f04f 0600 	mov.w	r6, #0
 8003e10:	46a9      	mov	r9, r5
 8003e12:	46b2      	mov	sl, r6
 8003e14:	eb19 0309 	adds.w	r3, r9, r9
 8003e18:	eb4a 040a 	adc.w	r4, sl, sl
 8003e1c:	4699      	mov	r9, r3
 8003e1e:	46a2      	mov	sl, r4
 8003e20:	eb19 0905 	adds.w	r9, r9, r5
 8003e24:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e28:	f04f 0100 	mov.w	r1, #0
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e3c:	4689      	mov	r9, r1
 8003e3e:	4692      	mov	sl, r2
 8003e40:	eb19 0005 	adds.w	r0, r9, r5
 8003e44:	eb4a 0106 	adc.w	r1, sl, r6
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	461d      	mov	r5, r3
 8003e4e:	f04f 0600 	mov.w	r6, #0
 8003e52:	196b      	adds	r3, r5, r5
 8003e54:	eb46 0406 	adc.w	r4, r6, r6
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	f7fc fefc 	bl	8000c58 <__aeabi_uldivmod>
 8003e60:	4603      	mov	r3, r0
 8003e62:	460c      	mov	r4, r1
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <UART_SetConfig+0x384>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	2164      	movs	r1, #100	; 0x64
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	3332      	adds	r3, #50	; 0x32
 8003e7a:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <UART_SetConfig+0x384>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f003 0207 	and.w	r2, r3, #7
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4442      	add	r2, r8
 8003e8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e8e:	e1b2      	b.n	80041f6 <UART_SetConfig+0x6e2>
 8003e90:	40011000 	.word	0x40011000
 8003e94:	40011400 	.word	0x40011400
 8003e98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4ad7      	ldr	r2, [pc, #860]	; (8004200 <UART_SetConfig+0x6ec>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d005      	beq.n	8003eb2 <UART_SetConfig+0x39e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4ad6      	ldr	r2, [pc, #856]	; (8004204 <UART_SetConfig+0x6f0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	f040 80d1 	bne.w	8004054 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb2:	f7ff fa05 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 8003eb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	469a      	mov	sl, r3
 8003ebc:	f04f 0b00 	mov.w	fp, #0
 8003ec0:	46d0      	mov	r8, sl
 8003ec2:	46d9      	mov	r9, fp
 8003ec4:	eb18 0308 	adds.w	r3, r8, r8
 8003ec8:	eb49 0409 	adc.w	r4, r9, r9
 8003ecc:	4698      	mov	r8, r3
 8003ece:	46a1      	mov	r9, r4
 8003ed0:	eb18 080a 	adds.w	r8, r8, sl
 8003ed4:	eb49 090b 	adc.w	r9, r9, fp
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ee4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ee8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003eec:	4688      	mov	r8, r1
 8003eee:	4691      	mov	r9, r2
 8003ef0:	eb1a 0508 	adds.w	r5, sl, r8
 8003ef4:	eb4b 0609 	adc.w	r6, fp, r9
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f04f 0400 	mov.w	r4, #0
 8003f0a:	0094      	lsls	r4, r2, #2
 8003f0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f10:	008b      	lsls	r3, r1, #2
 8003f12:	461a      	mov	r2, r3
 8003f14:	4623      	mov	r3, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	4631      	mov	r1, r6
 8003f1a:	f7fc fe9d 	bl	8000c58 <__aeabi_uldivmod>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	461a      	mov	r2, r3
 8003f24:	4bb8      	ldr	r3, [pc, #736]	; (8004208 <UART_SetConfig+0x6f4>)
 8003f26:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	469b      	mov	fp, r3
 8003f34:	f04f 0c00 	mov.w	ip, #0
 8003f38:	46d9      	mov	r9, fp
 8003f3a:	46e2      	mov	sl, ip
 8003f3c:	eb19 0309 	adds.w	r3, r9, r9
 8003f40:	eb4a 040a 	adc.w	r4, sl, sl
 8003f44:	4699      	mov	r9, r3
 8003f46:	46a2      	mov	sl, r4
 8003f48:	eb19 090b 	adds.w	r9, r9, fp
 8003f4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f50:	f04f 0100 	mov.w	r1, #0
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f64:	4689      	mov	r9, r1
 8003f66:	4692      	mov	sl, r2
 8003f68:	eb1b 0509 	adds.w	r5, fp, r9
 8003f6c:	eb4c 060a 	adc.w	r6, ip, sl
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	4619      	mov	r1, r3
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	f04f 0400 	mov.w	r4, #0
 8003f82:	0094      	lsls	r4, r2, #2
 8003f84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f88:	008b      	lsls	r3, r1, #2
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4623      	mov	r3, r4
 8003f8e:	4628      	mov	r0, r5
 8003f90:	4631      	mov	r1, r6
 8003f92:	f7fc fe61 	bl	8000c58 <__aeabi_uldivmod>
 8003f96:	4603      	mov	r3, r0
 8003f98:	460c      	mov	r4, r1
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b9a      	ldr	r3, [pc, #616]	; (8004208 <UART_SetConfig+0x6f4>)
 8003f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2164      	movs	r1, #100	; 0x64
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	3332      	adds	r3, #50	; 0x32
 8003fb0:	4a95      	ldr	r2, [pc, #596]	; (8004208 <UART_SetConfig+0x6f4>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fbc:	4498      	add	r8, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	469b      	mov	fp, r3
 8003fc2:	f04f 0c00 	mov.w	ip, #0
 8003fc6:	46d9      	mov	r9, fp
 8003fc8:	46e2      	mov	sl, ip
 8003fca:	eb19 0309 	adds.w	r3, r9, r9
 8003fce:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd2:	4699      	mov	r9, r3
 8003fd4:	46a2      	mov	sl, r4
 8003fd6:	eb19 090b 	adds.w	r9, r9, fp
 8003fda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff2:	4689      	mov	r9, r1
 8003ff4:	4692      	mov	sl, r2
 8003ff6:	eb1b 0509 	adds.w	r5, fp, r9
 8003ffa:	eb4c 060a 	adc.w	r6, ip, sl
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4619      	mov	r1, r3
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	f04f 0400 	mov.w	r4, #0
 8004010:	0094      	lsls	r4, r2, #2
 8004012:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004016:	008b      	lsls	r3, r1, #2
 8004018:	461a      	mov	r2, r3
 800401a:	4623      	mov	r3, r4
 800401c:	4628      	mov	r0, r5
 800401e:	4631      	mov	r1, r6
 8004020:	f7fc fe1a 	bl	8000c58 <__aeabi_uldivmod>
 8004024:	4603      	mov	r3, r0
 8004026:	460c      	mov	r4, r1
 8004028:	461a      	mov	r2, r3
 800402a:	4b77      	ldr	r3, [pc, #476]	; (8004208 <UART_SetConfig+0x6f4>)
 800402c:	fba3 1302 	umull	r1, r3, r3, r2
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	2164      	movs	r1, #100	; 0x64
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	3332      	adds	r3, #50	; 0x32
 800403e:	4a72      	ldr	r2, [pc, #456]	; (8004208 <UART_SetConfig+0x6f4>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	f003 020f 	and.w	r2, r3, #15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4442      	add	r2, r8
 8004050:	609a      	str	r2, [r3, #8]
 8004052:	e0d0      	b.n	80041f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004054:	f7ff f920 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8004058:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	469a      	mov	sl, r3
 800405e:	f04f 0b00 	mov.w	fp, #0
 8004062:	46d0      	mov	r8, sl
 8004064:	46d9      	mov	r9, fp
 8004066:	eb18 0308 	adds.w	r3, r8, r8
 800406a:	eb49 0409 	adc.w	r4, r9, r9
 800406e:	4698      	mov	r8, r3
 8004070:	46a1      	mov	r9, r4
 8004072:	eb18 080a 	adds.w	r8, r8, sl
 8004076:	eb49 090b 	adc.w	r9, r9, fp
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004086:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800408a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800408e:	4688      	mov	r8, r1
 8004090:	4691      	mov	r9, r2
 8004092:	eb1a 0508 	adds.w	r5, sl, r8
 8004096:	eb4b 0609 	adc.w	r6, fp, r9
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4619      	mov	r1, r3
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	f04f 0400 	mov.w	r4, #0
 80040ac:	0094      	lsls	r4, r2, #2
 80040ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b2:	008b      	lsls	r3, r1, #2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	4631      	mov	r1, r6
 80040bc:	f7fc fdcc 	bl	8000c58 <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b50      	ldr	r3, [pc, #320]	; (8004208 <UART_SetConfig+0x6f4>)
 80040c8:	fba3 2302 	umull	r2, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	469b      	mov	fp, r3
 80040d6:	f04f 0c00 	mov.w	ip, #0
 80040da:	46d9      	mov	r9, fp
 80040dc:	46e2      	mov	sl, ip
 80040de:	eb19 0309 	adds.w	r3, r9, r9
 80040e2:	eb4a 040a 	adc.w	r4, sl, sl
 80040e6:	4699      	mov	r9, r3
 80040e8:	46a2      	mov	sl, r4
 80040ea:	eb19 090b 	adds.w	r9, r9, fp
 80040ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004106:	4689      	mov	r9, r1
 8004108:	4692      	mov	sl, r2
 800410a:	eb1b 0509 	adds.w	r5, fp, r9
 800410e:	eb4c 060a 	adc.w	r6, ip, sl
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4619      	mov	r1, r3
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	f04f 0400 	mov.w	r4, #0
 8004124:	0094      	lsls	r4, r2, #2
 8004126:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	461a      	mov	r2, r3
 800412e:	4623      	mov	r3, r4
 8004130:	4628      	mov	r0, r5
 8004132:	4631      	mov	r1, r6
 8004134:	f7fc fd90 	bl	8000c58 <__aeabi_uldivmod>
 8004138:	4603      	mov	r3, r0
 800413a:	460c      	mov	r4, r1
 800413c:	461a      	mov	r2, r3
 800413e:	4b32      	ldr	r3, [pc, #200]	; (8004208 <UART_SetConfig+0x6f4>)
 8004140:	fba3 1302 	umull	r1, r3, r3, r2
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	2164      	movs	r1, #100	; 0x64
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	3332      	adds	r3, #50	; 0x32
 8004152:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <UART_SetConfig+0x6f4>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800415e:	4498      	add	r8, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	469b      	mov	fp, r3
 8004164:	f04f 0c00 	mov.w	ip, #0
 8004168:	46d9      	mov	r9, fp
 800416a:	46e2      	mov	sl, ip
 800416c:	eb19 0309 	adds.w	r3, r9, r9
 8004170:	eb4a 040a 	adc.w	r4, sl, sl
 8004174:	4699      	mov	r9, r3
 8004176:	46a2      	mov	sl, r4
 8004178:	eb19 090b 	adds.w	r9, r9, fp
 800417c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004194:	4689      	mov	r9, r1
 8004196:	4692      	mov	sl, r2
 8004198:	eb1b 0509 	adds.w	r5, fp, r9
 800419c:	eb4c 060a 	adc.w	r6, ip, sl
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4619      	mov	r1, r3
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	f04f 0400 	mov.w	r4, #0
 80041b2:	0094      	lsls	r4, r2, #2
 80041b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041b8:	008b      	lsls	r3, r1, #2
 80041ba:	461a      	mov	r2, r3
 80041bc:	4623      	mov	r3, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	4631      	mov	r1, r6
 80041c2:	f7fc fd49 	bl	8000c58 <__aeabi_uldivmod>
 80041c6:	4603      	mov	r3, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <UART_SetConfig+0x6f4>)
 80041ce:	fba3 1302 	umull	r1, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2164      	movs	r1, #100	; 0x64
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	; 0x32
 80041e0:	4a09      	ldr	r2, [pc, #36]	; (8004208 <UART_SetConfig+0x6f4>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4442      	add	r2, r8
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	e7ff      	b.n	80041f6 <UART_SetConfig+0x6e2>
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004200:	40011000 	.word	0x40011000
 8004204:	40011400 	.word	0x40011400
 8004208:	51eb851f 	.word	0x51eb851f

0800420c <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d009      	beq.n	8004230 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800421c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800421e:	461a      	mov	r2, r3
        err.type, err.code);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	4806      	ldr	r0, [pc, #24]	; (8004244 <ai_log_err+0x38>)
 800422a:	f002 fba7 	bl	800697c <iprintf>
 800422e:	e008      	b.n	8004242 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004230:	793b      	ldrb	r3, [r7, #4]
 8004232:	4619      	mov	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800423a:	461a      	mov	r2, r3
 800423c:	4802      	ldr	r0, [pc, #8]	; (8004248 <ai_log_err+0x3c>)
 800423e:	f002 fb9d 	bl	800697c <iprintf>

  do {} while (1);
 8004242:	e7fe      	b.n	8004242 <ai_log_err+0x36>
 8004244:	0800913c 	.word	0x0800913c
 8004248:	08009170 	.word	0x08009170

0800424c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b090      	sub	sp, #64	; 0x40
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8004256:	2100      	movs	r1, #0
 8004258:	4837      	ldr	r0, [pc, #220]	; (8004338 <ai_boostrap+0xec>)
 800425a:	f000 f9d1 	bl	8004600 <ai_network_create>
 800425e:	4603      	mov	r3, r0
 8004260:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 8004262:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 800426a:	4934      	ldr	r1, [pc, #208]	; (800433c <ai_boostrap+0xf0>)
 800426c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800426e:	f7ff ffcd 	bl	800420c <ai_log_err>
    return -1;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	e05b      	b.n	8004330 <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <ai_boostrap+0xf4>)
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	2301      	movs	r3, #1
 800427e:	823b      	strh	r3, [r7, #16]
 8004280:	2301      	movs	r3, #1
 8004282:	827b      	strh	r3, [r7, #18]
 8004284:	2301      	movs	r3, #1
 8004286:	82bb      	strh	r3, [r7, #20]
 8004288:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <ai_boostrap+0xf8>)
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	2300      	movs	r3, #0
 8004292:	623b      	str	r3, [r7, #32]
 8004294:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <ai_boostrap+0xfc>)
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
 8004298:	2301      	movs	r3, #1
 800429a:	853b      	strh	r3, [r7, #40]	; 0x28
 800429c:	2301      	movs	r3, #1
 800429e:	857b      	strh	r3, [r7, #42]	; 0x2a
 80042a0:	2301      	movs	r3, #1
 80042a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80042a4:	f44f 63d6 	mov.w	r3, #1712	; 0x6b0
 80042a8:	633b      	str	r3, [r7, #48]	; 0x30
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
 80042ae:	2300      	movs	r3, #0
 80042b0:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 80042b2:	4b21      	ldr	r3, [pc, #132]	; (8004338 <ai_boostrap+0xec>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f107 020c 	add.w	r2, r7, #12
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 f9c1 	bl	8004644 <ai_network_init>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f083 0301 	eor.w	r3, r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 80042ce:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <ai_boostrap+0xec>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f988 	bl	80045e8 <ai_network_get_error>
 80042d8:	4603      	mov	r3, r0
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 80042dc:	491b      	ldr	r1, [pc, #108]	; (800434c <ai_boostrap+0x100>)
 80042de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80042e0:	f7ff ff94 	bl	800420c <ai_log_err>
      return -1;
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
 80042e8:	e022      	b.n	8004330 <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <ai_boostrap+0xec>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4918      	ldr	r1, [pc, #96]	; (8004350 <ai_boostrap+0x104>)
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 f91b 	bl	800452c <ai_network_get_info>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f083 0301 	eor.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d015      	beq.n	800432e <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 8004302:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <ai_boostrap+0xec>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f96e 	bl	80045e8 <ai_network_get_error>
 800430c:	4603      	mov	r3, r0
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 8004310:	4910      	ldr	r1, [pc, #64]	; (8004354 <ai_boostrap+0x108>)
 8004312:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004314:	f7ff ff7a 	bl	800420c <ai_log_err>
    ai_network_destroy(network);
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <ai_boostrap+0xec>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f000 f985 	bl	800462c <ai_network_destroy>
    network = AI_HANDLE_NULL;
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <ai_boostrap+0xec>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
    return -3;
 8004328:	f06f 0302 	mvn.w	r3, #2
 800432c:	e000      	b.n	8004330 <ai_boostrap+0xe4>
  }

  return 0;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3740      	adds	r7, #64	; 0x40
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20001e40 	.word	0x20001e40
 800433c:	080091a0 	.word	0x080091a0
 8004340:	40040440 	.word	0x40040440
 8004344:	00070eb0 	.word	0x00070eb0
 8004348:	00040440 	.word	0x00040440
 800434c:	080091b4 	.word	0x080091b4
 8004350:	20001e44 	.word	0x20001e44
 8004354:	080091c4 	.word	0x080091c4

08004358 <ai_run_v2>:

  return 0;
}

/* USER CODE BEGIN 2 */
int ai_run_v2(void *in_data, void *out_data){
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
	ai_i32 nbatch;
	ai_error err;

	/* Parameters checking */
	if (!in_data || !out_data || !network)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d006      	beq.n	8004376 <ai_run_v2+0x1e>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <ai_run_v2+0x1e>
 800436e:	4b17      	ldr	r3, [pc, #92]	; (80043cc <ai_run_v2+0x74>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <ai_run_v2+0x24>
		return -1;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	e022      	b.n	80043c2 <ai_run_v2+0x6a>

	ai_buffer *ai_input = network_info.inputs;
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <ai_run_v2+0x78>)
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	617b      	str	r3, [r7, #20]
	ai_buffer *ai_output = network_info.outputs;
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <ai_run_v2+0x78>)
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	613b      	str	r3, [r7, #16]

	/* Initialize input/output buffer handlers */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	611a      	str	r2, [r3, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	611a      	str	r2, [r3, #16]

	/* 2 - Perform the inference */
	nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <ai_run_v2+0x74>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f990 	bl	80046c2 <ai_network_run>
 80043a2:	60f8      	str	r0, [r7, #12]
	if (nbatch != 1) {
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d00a      	beq.n	80043c0 <ai_run_v2+0x68>
		err = ai_network_get_error(network);
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <ai_run_v2+0x74>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f91a 	bl	80045e8 <ai_network_get_error>
 80043b4:	4603      	mov	r3, r0
 80043b6:	60bb      	str	r3, [r7, #8]
		// ...
		return err.code;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80043be:	e000      	b.n	80043c2 <ai_run_v2+0x6a>
	}


  return 0;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20001e40 	.word	0x20001e40
 80043d0:	20001e44 	.word	0x20001e44

080043d4 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80043d8:	4805      	ldr	r0, [pc, #20]	; (80043f0 <MX_X_CUBE_AI_Init+0x1c>)
 80043da:	f002 fb43 	bl	8006a64 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 80043de:	f000 f981 	bl	80046e4 <ai_network_data_weights_get>
 80043e2:	4603      	mov	r3, r0
 80043e4:	4903      	ldr	r1, [pc, #12]	; (80043f4 <MX_X_CUBE_AI_Init+0x20>)
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff30 	bl	800424c <ai_boostrap>
    /* USER CODE END 5 */
}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	080091ec 	.word	0x080091ec
 80043f4:	20001eb8 	.word	0x20001eb8

080043f8 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	3303      	adds	r3, #3
 8004408:	f023 0303 	bic.w	r3, r3, #3
 800440c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800440e:	4b14      	ldr	r3, [pc, #80]	; (8004460 <network_configure_activations+0x68>)
 8004410:	2200      	movs	r2, #0
 8004412:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <network_configure_activations+0x68>)
 8004416:	2200      	movs	r2, #0
 8004418:	60da      	str	r2, [r3, #12]
    input_layer_output_array.data = AI_PTR(activations + 0);
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <network_configure_activations+0x6c>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6093      	str	r3, [r2, #8]
    input_layer_output_array.data_start = AI_PTR(activations + 0);
 8004420:	4a10      	ldr	r2, [pc, #64]	; (8004464 <network_configure_activations+0x6c>)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	60d3      	str	r3, [r2, #12]
    input_layer_nl_output_array.data = AI_PTR(activations + 0);
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <network_configure_activations+0x70>)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6093      	str	r3, [r2, #8]
    input_layer_nl_output_array.data_start = AI_PTR(activations + 0);
 800442c:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <network_configure_activations+0x70>)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	60d3      	str	r3, [r2, #12]
    hidden2_output_array.data = AI_PTR(activations + 512);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004438:	4a0c      	ldr	r2, [pc, #48]	; (800446c <network_configure_activations+0x74>)
 800443a:	6093      	str	r3, [r2, #8]
    hidden2_output_array.data_start = AI_PTR(activations + 512);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004442:	4a0a      	ldr	r2, [pc, #40]	; (800446c <network_configure_activations+0x74>)
 8004444:	60d3      	str	r3, [r2, #12]
    hidden2_nl_output_array.data = AI_PTR(NULL);
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <network_configure_activations+0x78>)
 8004448:	2200      	movs	r2, #0
 800444a:	609a      	str	r2, [r3, #8]
    hidden2_nl_output_array.data_start = AI_PTR(NULL);
 800444c:	4b08      	ldr	r3, [pc, #32]	; (8004470 <network_configure_activations+0x78>)
 800444e:	2200      	movs	r2, #0
 8004450:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8004452:	2301      	movs	r3, #1
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	200017f4 	.word	0x200017f4
 8004464:	20001804 	.word	0x20001804
 8004468:	20001814 	.word	0x20001814
 800446c:	20001824 	.word	0x20001824
 8004470:	20001834 	.word	0x20001834

08004474 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    input_layer_weights_array.format |= AI_FMT_FLAG_CONST;
 8004484:	4b25      	ldr	r3, [pc, #148]	; (800451c <network_configure_weights+0xa8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <network_configure_weights+0xa8>)
 800448e:	6013      	str	r3, [r2, #0]
    input_layer_weights_array.data = AI_PTR(weights + 0);
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <network_configure_weights+0xa8>)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6093      	str	r3, [r2, #8]
    input_layer_weights_array.data_start = AI_PTR(weights + 0);
 8004496:	4a21      	ldr	r2, [pc, #132]	; (800451c <network_configure_weights+0xa8>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	60d3      	str	r3, [r2, #12]
    input_layer_bias_array.format |= AI_FMT_FLAG_CONST;
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <network_configure_weights+0xac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044a4:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <network_configure_weights+0xac>)
 80044a6:	6013      	str	r3, [r2, #0]
    input_layer_bias_array.data = AI_PTR(weights + 307200);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <network_configure_weights+0xac>)
 80044b0:	6093      	str	r3, [r2, #8]
    input_layer_bias_array.data_start = AI_PTR(weights + 307200);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80044b8:	4a19      	ldr	r2, [pc, #100]	; (8004520 <network_configure_weights+0xac>)
 80044ba:	60d3      	str	r3, [r2, #12]
    hidden2_weights_array.format |= AI_FMT_FLAG_CONST;
 80044bc:	4b19      	ldr	r3, [pc, #100]	; (8004524 <network_configure_weights+0xb0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044c4:	4a17      	ldr	r2, [pc, #92]	; (8004524 <network_configure_weights+0xb0>)
 80044c6:	6013      	str	r3, [r2, #0]
    hidden2_weights_array.data = AI_PTR(weights + 307712);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80044ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80044d2:	4a14      	ldr	r2, [pc, #80]	; (8004524 <network_configure_weights+0xb0>)
 80044d4:	6093      	str	r3, [r2, #8]
    hidden2_weights_array.data_start = AI_PTR(weights + 307712);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80044dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80044e0:	4a10      	ldr	r2, [pc, #64]	; (8004524 <network_configure_weights+0xb0>)
 80044e2:	60d3      	str	r3, [r2, #12]
    hidden2_bias_array.format |= AI_FMT_FLAG_CONST;
 80044e4:	4b10      	ldr	r3, [pc, #64]	; (8004528 <network_configure_weights+0xb4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ec:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <network_configure_weights+0xb4>)
 80044ee:	6013      	str	r3, [r2, #0]
    hidden2_bias_array.data = AI_PTR(weights + 461312);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 23e1 	add.w	r3, r3, #460800	; 0x70800
 80044f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80044fa:	4a0b      	ldr	r2, [pc, #44]	; (8004528 <network_configure_weights+0xb4>)
 80044fc:	6093      	str	r3, [r2, #8]
    hidden2_bias_array.data_start = AI_PTR(weights + 461312);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 23e1 	add.w	r3, r3, #460800	; 0x70800
 8004504:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004508:	4a07      	ldr	r2, [pc, #28]	; (8004528 <network_configure_weights+0xb4>)
 800450a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800450c:	2301      	movs	r3, #1
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20001844 	.word	0x20001844
 8004520:	20001854 	.word	0x20001854
 8004524:	20001864 	.word	0x20001864
 8004528:	20001874 	.word	0x20001874

0800452c <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b0a0      	sub	sp, #128	; 0x80
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f9f8 	bl	800492c <ai_platform_context_acquire>
 800453c:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d040      	beq.n	80045c6 <ai_network_get_info+0x9a>
 8004544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03d      	beq.n	80045c6 <ai_network_get_info+0x9a>
  {
    ai_network_report r = {
 800454a:	f107 0308 	add.w	r3, r7, #8
 800454e:	2274      	movs	r2, #116	; 0x74
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fcf7 	bl	8005f46 <memset>
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <ai_network_get_info+0xa4>)
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <ai_network_get_info+0xa8>)
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <ai_network_get_info+0xac>)
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <ai_network_get_info+0xb0>)
 8004566:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004568:	f000 f934 	bl	80047d4 <ai_platform_runtime_get_revision>
 800456c:	4603      	mov	r3, r0
    ai_network_report r = {
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	f000 f952 	bl	8004818 <ai_platform_runtime_get_version>
 8004574:	4603      	mov	r3, r0
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <ai_network_get_info+0xb4>)
 800457a:	623b      	str	r3, [r7, #32]
 800457c:	2306      	movs	r3, #6
 800457e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8004582:	f000 f96b 	bl	800485c <ai_platform_api_get_version>
 8004586:	4603      	mov	r3, r0
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458a:	f000 f99b 	bl	80048c4 <ai_platform_interface_api_get_version>
 800458e:	4603      	mov	r3, r0
 8004590:	633b      	str	r3, [r7, #48]	; 0x30
 8004592:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <ai_network_get_info+0xb8>)
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004596:	f107 0308 	add.w	r3, r7, #8
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fa21 	bl	80049e4 <ai_platform_api_get_network_report>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f083 0301 	eor.w	r3, r3, #1
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <ai_network_get_info+0x86>
 80045ae:	2300      	movs	r3, #0
 80045b0:	e00a      	b.n	80045c8 <ai_network_get_info+0x9c>

    *report = r;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f107 0308 	add.w	r3, r7, #8
 80045ba:	2274      	movs	r2, #116	; 0x74
 80045bc:	4619      	mov	r1, r3
 80045be:	f001 fcb7 	bl	8005f30 <memcpy>
    return true;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <ai_network_get_info+0x9c>
  }

  return false;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3780      	adds	r7, #128	; 0x80
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	080092a8 	.word	0x080092a8
 80045d4:	080092b0 	.word	0x080092b0
 80045d8:	080092d4 	.word	0x080092d4
 80045dc:	080092f0 	.word	0x080092f0
 80045e0:	08009308 	.word	0x08009308
 80045e4:	0001c558 	.word	0x0001c558

080045e8 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f9c5 	bl	8004980 <ai_platform_network_get_error>
 80045f6:	4603      	mov	r3, r0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af02      	add	r7, sp, #8
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800460a:	2300      	movs	r3, #0
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	2304      	movs	r3, #4
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2301      	movs	r3, #1
 8004614:	4a04      	ldr	r2, [pc, #16]	; (8004628 <ai_network_create+0x28>)
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fad9 	bl	8004bd0 <ai_platform_network_create>
 800461e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20001790 	.word	0x20001790

0800462c <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fb3d 	bl	8004cb4 <ai_platform_network_destroy>
 800463a:	4603      	mov	r3, r0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb61 	bl	8004d18 <ai_platform_network_init>
 8004656:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <ai_network_init+0x1e>
 800465e:	2300      	movs	r3, #0
 8004660:	e02b      	b.n	80046ba <ai_network_init+0x76>

  ai_bool ok = true;
 8004662:	2301      	movs	r3, #1
 8004664:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff ff02 	bl	8004474 <network_configure_weights>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	7afb      	ldrb	r3, [r7, #11]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	3318      	adds	r3, #24
 8004686:	4619      	mov	r1, r3
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff feb5 	bl	80043f8 <network_configure_activations>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	7afb      	ldrb	r3, [r7, #11]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fbab 	bl	8004dfc <ai_platform_network_post_init>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	7afb      	ldrb	r3, [r7, #11]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	72fb      	strb	r3, [r7, #11]

  return ok;
 80046b8:	7afb      	ldrb	r3, [r7, #11]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fbde 	bl	8004e94 <ai_platform_network_process>
 80046d8:	4603      	mov	r3, r0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
    0xbb, 0x66, 0x13, 0xf5, 0x39, 0x5d, 0xf8, 0x23, 0xbc,
    0xd9, 0x17, 0x2b, 0x3b, 0xc0, 0xab, 0x80, 0xbb, 0x68,
    0x51, 0x84, 0xbb, 0x98, 0x6b, 0x45, 0xbb, 0xb1, 0xc8,
    0x10, 0xba, 0x6a, 0x9f, 0xc9, 0xba, 0x8e, 0x9f, 0xc5,
    0xbb, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xb2, 0x72, 0x3a  };
  return AI_HANDLE_PTR(s_network_weights);
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <ai_network_data_weights_get+0x10>)
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	08009360 	.word	0x08009360

080046f8 <_ai_platform_get_io_buffers_info>:
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	2400      	movs	r4, #0
 80046fe:	b083      	sub	sp, #12
 8004700:	4606      	mov	r6, r0
 8004702:	4688      	mov	r8, r1
 8004704:	46a3      	mov	fp, r4
 8004706:	f04f 0a18 	mov.w	sl, #24
 800470a:	f04f 0901 	mov.w	r9, #1
 800470e:	b2a0      	uxth	r0, r4
 8004710:	b936      	cbnz	r6, 8004720 <_ai_platform_get_io_buffers_info+0x28>
 8004712:	2800      	cmp	r0, #0
 8004714:	d03b      	beq.n	800478e <_ai_platform_get_io_buffers_info+0x96>
 8004716:	68b3      	ldr	r3, [r6, #8]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f8c8 3000 	str.w	r3, [r8]
 800471e:	e036      	b.n	800478e <_ai_platform_get_io_buffers_info+0x96>
 8004720:	8833      	ldrh	r3, [r6, #0]
 8004722:	429c      	cmp	r4, r3
 8004724:	d2f5      	bcs.n	8004712 <_ai_platform_get_io_buffers_info+0x1a>
 8004726:	6873      	ldr	r3, [r6, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f2      	beq.n	8004712 <_ai_platform_get_io_buffers_info+0x1a>
 800472c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8004730:	2d00      	cmp	r5, #0
 8004732:	d0ee      	beq.n	8004712 <_ai_platform_get_io_buffers_info+0x1a>
 8004734:	68b3      	ldr	r3, [r6, #8]
 8004736:	69aa      	ldr	r2, [r5, #24]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	6810      	ldr	r0, [r2, #0]
 800473c:	689f      	ldr	r7, [r3, #8]
 800473e:	9101      	str	r1, [sp, #4]
 8004740:	f001 fb46 	bl	8005dd0 <ai_array_to_buffer_fmt>
 8004744:	9901      	ldr	r1, [sp, #4]
 8004746:	fb0a f304 	mul.w	r3, sl, r4
 800474a:	18ca      	adds	r2, r1, r3
 800474c:	50c8      	str	r0, [r1, r3]
 800474e:	f8a2 9004 	strh.w	r9, [r2, #4]
 8004752:	68eb      	ldr	r3, [r5, #12]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	80d3      	strh	r3, [r2, #6]
 8004758:	68eb      	ldr	r3, [r5, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	8113      	strh	r3, [r2, #8]
 800475e:	68eb      	ldr	r3, [r5, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60d3      	str	r3, [r2, #12]
 8004764:	69ab      	ldr	r3, [r5, #24]
 8004766:	00e1      	lsls	r1, r4, #3
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	6113      	str	r3, [r2, #16]
 800476c:	1878      	adds	r0, r7, r1
 800476e:	b150      	cbz	r0, 8004786 <_ai_platform_get_io_buffers_info+0x8e>
 8004770:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	6043      	str	r3, [r0, #4]
 8004778:	b11b      	cbz	r3, 8004782 <_ai_platform_get_io_buffers_info+0x8a>
 800477a:	885b      	ldrh	r3, [r3, #2]
 800477c:	3300      	adds	r3, #0
 800477e:	bf18      	it	ne
 8004780:	2301      	movne	r3, #1
 8004782:	507b      	str	r3, [r7, r1]
 8004784:	b903      	cbnz	r3, 8004788 <_ai_platform_get_io_buffers_info+0x90>
 8004786:	2000      	movs	r0, #0
 8004788:	6150      	str	r0, [r2, #20]
 800478a:	3401      	adds	r4, #1
 800478c:	e7bf      	b.n	800470e <_ai_platform_get_io_buffers_info+0x16>
 800478e:	b003      	add	sp, #12
 8004790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004794 <_platform_network_state_setup.isra.1>:
 8004794:	b430      	push	{r4, r5}
 8004796:	68dd      	ldr	r5, [r3, #12]
 8004798:	695c      	ldr	r4, [r3, #20]
 800479a:	68ed      	ldr	r5, [r5, #12]
 800479c:	68e4      	ldr	r4, [r4, #12]
 800479e:	fb04 f405 	mul.w	r4, r4, r5
 80047a2:	6084      	str	r4, [r0, #8]
 80047a4:	8809      	ldrh	r1, [r1, #0]
 80047a6:	fb04 f401 	mul.w	r4, r4, r1
 80047aa:	60c4      	str	r4, [r0, #12]
 80047ac:	6811      	ldr	r1, [r2, #0]
 80047ae:	6041      	str	r1, [r0, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	4414      	add	r4, r2
 80047b4:	6004      	str	r4, [r0, #0]
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	6814      	ldr	r4, [r2, #0]
 80047ba:	00a4      	lsls	r4, r4, #2
 80047bc:	d407      	bmi.n	80047ce <_platform_network_state_setup.isra.1+0x3a>
 80047be:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80047c2:	1b64      	subs	r4, r4, r5
 80047c4:	4421      	add	r1, r4
 80047c6:	6091      	str	r1, [r2, #8]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	6842      	ldr	r2, [r0, #4]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	bc30      	pop	{r4, r5}
 80047d0:	4770      	bx	lr
	...

080047d4 <ai_platform_runtime_get_revision>:
 80047d4:	490a      	ldr	r1, [pc, #40]	; (8004800 <ai_platform_runtime_get_revision+0x2c>)
 80047d6:	4a0b      	ldr	r2, [pc, #44]	; (8004804 <ai_platform_runtime_get_revision+0x30>)
 80047d8:	680b      	ldr	r3, [r1, #0]
 80047da:	2001      	movs	r0, #1
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	600b      	str	r3, [r1, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	6010      	str	r0, [r2, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	2a00      	cmp	r2, #0
 80047ea:	d1fc      	bne.n	80047e6 <ai_platform_runtime_get_revision+0x12>
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <ai_platform_runtime_get_revision+0x34>)
 80047ee:	4a07      	ldr	r2, [pc, #28]	; (800480c <ai_platform_runtime_get_revision+0x38>)
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <ai_platform_runtime_get_revision+0x3c>)
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d000      	beq.n	80047fc <ai_platform_runtime_get_revision+0x28>
 80047fa:	e7fe      	b.n	80047fa <ai_platform_runtime_get_revision+0x26>
 80047fc:	4805      	ldr	r0, [pc, #20]	; (8004814 <ai_platform_runtime_get_revision+0x40>)
 80047fe:	4770      	bx	lr
 8004800:	e0002000 	.word	0xe0002000
 8004804:	40023008 	.word	0x40023008
 8004808:	40023000 	.word	0x40023000
 800480c:	f407a5c2 	.word	0xf407a5c2
 8004810:	b5e8b5cd 	.word	0xb5e8b5cd
 8004814:	0807a210 	.word	0x0807a210

08004818 <ai_platform_runtime_get_version>:
 8004818:	490b      	ldr	r1, [pc, #44]	; (8004848 <ai_platform_runtime_get_version+0x30>)
 800481a:	4a0c      	ldr	r2, [pc, #48]	; (800484c <ai_platform_runtime_get_version+0x34>)
 800481c:	680b      	ldr	r3, [r1, #0]
 800481e:	2001      	movs	r0, #1
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	600b      	str	r3, [r1, #0]
 8004826:	b082      	sub	sp, #8
 8004828:	4613      	mov	r3, r2
 800482a:	6010      	str	r0, [r2, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	2a00      	cmp	r2, #0
 8004830:	d1fc      	bne.n	800482c <ai_platform_runtime_get_version+0x14>
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <ai_platform_runtime_get_version+0x38>)
 8004834:	4a07      	ldr	r2, [pc, #28]	; (8004854 <ai_platform_runtime_get_version+0x3c>)
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <ai_platform_runtime_get_version+0x40>)
 800483c:	429a      	cmp	r2, r3
 800483e:	d000      	beq.n	8004842 <ai_platform_runtime_get_version+0x2a>
 8004840:	e7fe      	b.n	8004840 <ai_platform_runtime_get_version+0x28>
 8004842:	2006      	movs	r0, #6
 8004844:	b002      	add	sp, #8
 8004846:	4770      	bx	lr
 8004848:	e0002000 	.word	0xe0002000
 800484c:	40023008 	.word	0x40023008
 8004850:	40023000 	.word	0x40023000
 8004854:	f407a5c2 	.word	0xf407a5c2
 8004858:	b5e8b5cd 	.word	0xb5e8b5cd

0800485c <ai_platform_api_get_version>:
 800485c:	4913      	ldr	r1, [pc, #76]	; (80048ac <ai_platform_api_get_version+0x50>)
 800485e:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <ai_platform_api_get_version+0x54>)
 8004860:	680b      	ldr	r3, [r1, #0]
 8004862:	2001      	movs	r0, #1
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	600b      	str	r3, [r1, #0]
 800486a:	b082      	sub	sp, #8
 800486c:	4613      	mov	r3, r2
 800486e:	6010      	str	r0, [r2, #0]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	2800      	cmp	r0, #0
 8004874:	d1fc      	bne.n	8004870 <ai_platform_api_get_version+0x14>
 8004876:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <ai_platform_api_get_version+0x58>)
 8004878:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <ai_platform_api_get_version+0x5c>)
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <ai_platform_api_get_version+0x60>)
 8004880:	429a      	cmp	r2, r3
 8004882:	d000      	beq.n	8004886 <ai_platform_api_get_version+0x2a>
 8004884:	e7fe      	b.n	8004884 <ai_platform_api_get_version+0x28>
 8004886:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <ai_platform_api_get_version+0x64>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	f362 0007 	bfi	r0, r2, #0, #8
 8004890:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004894:	f362 200f 	bfi	r0, r2, #8, #8
 8004898:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800489c:	f362 4017 	bfi	r0, r2, #16, #8
 80048a0:	0e1b      	lsrs	r3, r3, #24
 80048a2:	f363 601f 	bfi	r0, r3, #24, #8
 80048a6:	b002      	add	sp, #8
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	e0002000 	.word	0xe0002000
 80048b0:	40023008 	.word	0x40023008
 80048b4:	40023000 	.word	0x40023000
 80048b8:	f407a5c2 	.word	0xf407a5c2
 80048bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80048c0:	0807a214 	.word	0x0807a214

080048c4 <ai_platform_interface_api_get_version>:
 80048c4:	4913      	ldr	r1, [pc, #76]	; (8004914 <ai_platform_interface_api_get_version+0x50>)
 80048c6:	4a14      	ldr	r2, [pc, #80]	; (8004918 <ai_platform_interface_api_get_version+0x54>)
 80048c8:	680b      	ldr	r3, [r1, #0]
 80048ca:	2001      	movs	r0, #1
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	600b      	str	r3, [r1, #0]
 80048d2:	b082      	sub	sp, #8
 80048d4:	4613      	mov	r3, r2
 80048d6:	6010      	str	r0, [r2, #0]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	2800      	cmp	r0, #0
 80048dc:	d1fc      	bne.n	80048d8 <ai_platform_interface_api_get_version+0x14>
 80048de:	4b0f      	ldr	r3, [pc, #60]	; (800491c <ai_platform_interface_api_get_version+0x58>)
 80048e0:	4a0f      	ldr	r2, [pc, #60]	; (8004920 <ai_platform_interface_api_get_version+0x5c>)
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <ai_platform_interface_api_get_version+0x60>)
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d000      	beq.n	80048ee <ai_platform_interface_api_get_version+0x2a>
 80048ec:	e7fe      	b.n	80048ec <ai_platform_interface_api_get_version+0x28>
 80048ee:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <ai_platform_interface_api_get_version+0x64>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	f362 0007 	bfi	r0, r2, #0, #8
 80048f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80048fc:	f362 200f 	bfi	r0, r2, #8, #8
 8004900:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004904:	f362 4017 	bfi	r0, r2, #16, #8
 8004908:	0e1b      	lsrs	r3, r3, #24
 800490a:	f363 601f 	bfi	r0, r3, #24, #8
 800490e:	b002      	add	sp, #8
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	e0002000 	.word	0xe0002000
 8004918:	40023008 	.word	0x40023008
 800491c:	40023000 	.word	0x40023000
 8004920:	f407a5c2 	.word	0xf407a5c2
 8004924:	b5e8b5cd 	.word	0xb5e8b5cd
 8004928:	0807a218 	.word	0x0807a218

0800492c <ai_platform_context_acquire>:
 800492c:	b410      	push	{r4}
 800492e:	b120      	cbz	r0, 800493a <ai_platform_context_acquire+0xe>
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <ai_platform_context_acquire+0x3c>)
 8004932:	6802      	ldr	r2, [r0, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	bf18      	it	ne
 8004938:	2000      	movne	r0, #0
 800493a:	490c      	ldr	r1, [pc, #48]	; (800496c <ai_platform_context_acquire+0x40>)
 800493c:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <ai_platform_context_acquire+0x44>)
 800493e:	680b      	ldr	r3, [r1, #0]
 8004940:	2401      	movs	r4, #1
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	600b      	str	r3, [r1, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	6014      	str	r4, [r2, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	2a00      	cmp	r2, #0
 8004950:	d1fc      	bne.n	800494c <ai_platform_context_acquire+0x20>
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <ai_platform_context_acquire+0x48>)
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <ai_platform_context_acquire+0x4c>)
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <ai_platform_context_acquire+0x50>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d000      	beq.n	8004962 <ai_platform_context_acquire+0x36>
 8004960:	e7fe      	b.n	8004960 <ai_platform_context_acquire+0x34>
 8004962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	a1c00100 	.word	0xa1c00100
 800496c:	e0002000 	.word	0xe0002000
 8004970:	40023008 	.word	0x40023008
 8004974:	40023000 	.word	0x40023000
 8004978:	f407a5c2 	.word	0xf407a5c2
 800497c:	b5e8b5cd 	.word	0xb5e8b5cd

08004980 <ai_platform_network_get_error>:
 8004980:	b410      	push	{r4}
 8004982:	b120      	cbz	r0, 800498e <ai_platform_network_get_error+0xe>
 8004984:	4b11      	ldr	r3, [pc, #68]	; (80049cc <ai_platform_network_get_error+0x4c>)
 8004986:	6802      	ldr	r2, [r0, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	bf18      	it	ne
 800498c:	2000      	movne	r0, #0
 800498e:	4910      	ldr	r1, [pc, #64]	; (80049d0 <ai_platform_network_get_error+0x50>)
 8004990:	4a10      	ldr	r2, [pc, #64]	; (80049d4 <ai_platform_network_get_error+0x54>)
 8004992:	680b      	ldr	r3, [r1, #0]
 8004994:	2401      	movs	r4, #1
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	600b      	str	r3, [r1, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	6014      	str	r4, [r2, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d1fc      	bne.n	80049a0 <ai_platform_network_get_error+0x20>
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <ai_platform_network_get_error+0x58>)
 80049a8:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <ai_platform_network_get_error+0x5c>)
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <ai_platform_network_get_error+0x60>)
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d000      	beq.n	80049b6 <ai_platform_network_get_error+0x36>
 80049b4:	e7fe      	b.n	80049b4 <ai_platform_network_get_error+0x34>
 80049b6:	b120      	cbz	r0, 80049c2 <ai_platform_network_get_error+0x42>
 80049b8:	3010      	adds	r0, #16
 80049ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049be:	f000 bc75 	b.w	80052ac <core_get_error>
 80049c2:	f241 0010 	movw	r0, #4112	; 0x1010
 80049c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	a1c00100 	.word	0xa1c00100
 80049d0:	e0002000 	.word	0xe0002000
 80049d4:	40023008 	.word	0x40023008
 80049d8:	40023000 	.word	0x40023000
 80049dc:	f407a5c2 	.word	0xf407a5c2
 80049e0:	b5e8b5cd 	.word	0xb5e8b5cd

080049e4 <ai_platform_api_get_network_report>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	460c      	mov	r4, r1
 80049e8:	4605      	mov	r5, r0
 80049ea:	b120      	cbz	r0, 80049f6 <ai_platform_api_get_network_report+0x12>
 80049ec:	4b71      	ldr	r3, [pc, #452]	; (8004bb4 <ai_platform_api_get_network_report+0x1d0>)
 80049ee:	6802      	ldr	r2, [r0, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	bf18      	it	ne
 80049f4:	2500      	movne	r5, #0
 80049f6:	4970      	ldr	r1, [pc, #448]	; (8004bb8 <ai_platform_api_get_network_report+0x1d4>)
 80049f8:	4a70      	ldr	r2, [pc, #448]	; (8004bbc <ai_platform_api_get_network_report+0x1d8>)
 80049fa:	680b      	ldr	r3, [r1, #0]
 80049fc:	2001      	movs	r0, #1
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	600b      	str	r3, [r1, #0]
 8004a04:	4611      	mov	r1, r2
 8004a06:	6010      	str	r0, [r2, #0]
 8004a08:	680b      	ldr	r3, [r1, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1fc      	bne.n	8004a08 <ai_platform_api_get_network_report+0x24>
 8004a0e:	4a6c      	ldr	r2, [pc, #432]	; (8004bc0 <ai_platform_api_get_network_report+0x1dc>)
 8004a10:	496c      	ldr	r1, [pc, #432]	; (8004bc4 <ai_platform_api_get_network_report+0x1e0>)
 8004a12:	6011      	str	r1, [r2, #0]
 8004a14:	6811      	ldr	r1, [r2, #0]
 8004a16:	4a6c      	ldr	r2, [pc, #432]	; (8004bc8 <ai_platform_api_get_network_report+0x1e4>)
 8004a18:	4291      	cmp	r1, r2
 8004a1a:	d000      	beq.n	8004a1e <ai_platform_api_get_network_report+0x3a>
 8004a1c:	e7fe      	b.n	8004a1c <ai_platform_api_get_network_report+0x38>
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	d062      	beq.n	8004ae8 <ai_platform_api_get_network_report+0x104>
 8004a22:	2c00      	cmp	r4, #0
 8004a24:	d062      	beq.n	8004aec <ai_platform_api_get_network_report+0x108>
 8004a26:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004a28:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004a2a:	2a00      	cmp	r2, #0
 8004a2c:	d056      	beq.n	8004adc <ai_platform_api_get_network_report+0xf8>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004a32:	6913      	ldr	r3, [r2, #16]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d00c      	beq.n	8004a52 <ai_platform_api_get_network_report+0x6e>
 8004a38:	b15b      	cbz	r3, 8004a52 <ai_platform_api_get_network_report+0x6e>
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	e003      	b.n	8004a46 <ai_platform_api_get_network_report+0x62>
 8004a3e:	1c50      	adds	r0, r2, #1
 8004a40:	460b      	mov	r3, r1
 8004a42:	b121      	cbz	r1, 8004a4e <ai_platform_api_get_network_report+0x6a>
 8004a44:	4602      	mov	r2, r0
 8004a46:	66e2      	str	r2, [r4, #108]	; 0x6c
 8004a48:	6919      	ldr	r1, [r3, #16]
 8004a4a:	4299      	cmp	r1, r3
 8004a4c:	d1f7      	bne.n	8004a3e <ai_platform_api_get_network_report+0x5a>
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	d044      	beq.n	8004adc <ai_platform_api_get_network_report+0xf8>
 8004a52:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8004a56:	b100      	cbz	r0, 8004a5a <ai_platform_api_get_network_report+0x76>
 8004a58:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8004a5a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8004a5e:	f7ff fe4b 	bl	80046f8 <_ai_platform_get_io_buffers_info>
 8004a62:	4606      	mov	r6, r0
 8004a64:	8620      	strh	r0, [r4, #48]	; 0x30
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d05f      	beq.n	8004b2a <ai_platform_api_get_network_report+0x146>
 8004a6a:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	bf8a      	itet	hi
 8004a72:	6ce8      	ldrhi	r0, [r5, #76]	; 0x4c
 8004a74:	2000      	movls	r0, #0
 8004a76:	300c      	addhi	r0, #12
 8004a78:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8004a7c:	f7ff fe3c 	bl	80046f8 <_ai_platform_get_io_buffers_info>
 8004a80:	4606      	mov	r6, r0
 8004a82:	8660      	strh	r0, [r4, #50]	; 0x32
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d048      	beq.n	8004b1a <ai_platform_api_get_network_report+0x136>
 8004a88:	686b      	ldr	r3, [r5, #4]
 8004a8a:	6723      	str	r3, [r4, #112]	; 0x70
 8004a8c:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8004a90:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004a92:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8004a96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004a98:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004a9c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004aa0:	f105 0718 	add.w	r7, r5, #24
 8004aa4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004aa6:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8004aaa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004aac:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004ab0:	e886 0003 	stmia.w	r6, {r0, r1}
 8004ab4:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <ai_platform_api_get_network_report+0x1d4>)
 8004ab6:	4941      	ldr	r1, [pc, #260]	; (8004bbc <ai_platform_api_get_network_report+0x1d8>)
 8004ab8:	6813      	ldr	r3, [r2, #0]
 8004aba:	2001      	movs	r0, #1
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	460a      	mov	r2, r1
 8004ac4:	6008      	str	r0, [r1, #0]
 8004ac6:	6813      	ldr	r3, [r2, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1fc      	bne.n	8004ac6 <ai_platform_api_get_network_report+0xe2>
 8004acc:	4b3c      	ldr	r3, [pc, #240]	; (8004bc0 <ai_platform_api_get_network_report+0x1dc>)
 8004ace:	493d      	ldr	r1, [pc, #244]	; (8004bc4 <ai_platform_api_get_network_report+0x1e0>)
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	4b3c      	ldr	r3, [pc, #240]	; (8004bc8 <ai_platform_api_get_network_report+0x1e4>)
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	d00a      	beq.n	8004af0 <ai_platform_api_get_network_report+0x10c>
 8004ada:	e7fe      	b.n	8004ada <ai_platform_api_get_network_report+0xf6>
 8004adc:	f105 0010 	add.w	r0, r5, #16
 8004ae0:	2218      	movs	r2, #24
 8004ae2:	2111      	movs	r1, #17
 8004ae4:	f000 fbe8 	bl	80052b8 <core_set_error>
 8004ae8:	2000      	movs	r0, #0
 8004aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aec:	4620      	mov	r0, r4
 8004aee:	e7fc      	b.n	8004aea <ai_platform_api_get_network_report+0x106>
 8004af0:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <ai_platform_api_get_network_report+0x1e8>)
 8004af2:	4831      	ldr	r0, [pc, #196]	; (8004bb8 <ai_platform_api_get_network_report+0x1d4>)
 8004af4:	6123      	str	r3, [r4, #16]
 8004af6:	6803      	ldr	r3, [r0, #0]
 8004af8:	4930      	ldr	r1, [pc, #192]	; (8004bbc <ai_platform_api_get_network_report+0x1d8>)
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	6003      	str	r3, [r0, #0]
 8004b00:	2301      	movs	r3, #1
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	680b      	ldr	r3, [r1, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1fc      	bne.n	8004b04 <ai_platform_api_get_network_report+0x120>
 8004b0a:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <ai_platform_api_get_network_report+0x1dc>)
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	; (8004bc4 <ai_platform_api_get_network_report+0x1e0>)
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <ai_platform_api_get_network_report+0x1e4>)
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d010      	beq.n	8004b3a <ai_platform_api_get_network_report+0x156>
 8004b18:	e7fe      	b.n	8004b18 <ai_platform_api_get_network_report+0x134>
 8004b1a:	f105 0010 	add.w	r0, r5, #16
 8004b1e:	2218      	movs	r2, #24
 8004b20:	2113      	movs	r1, #19
 8004b22:	f000 fbc9 	bl	80052b8 <core_set_error>
 8004b26:	4630      	mov	r0, r6
 8004b28:	e7df      	b.n	8004aea <ai_platform_api_get_network_report+0x106>
 8004b2a:	f105 0010 	add.w	r0, r5, #16
 8004b2e:	2218      	movs	r2, #24
 8004b30:	2112      	movs	r1, #18
 8004b32:	f000 fbc1 	bl	80052b8 <core_set_error>
 8004b36:	4630      	mov	r0, r6
 8004b38:	e7d7      	b.n	8004aea <ai_platform_api_get_network_report+0x106>
 8004b3a:	2306      	movs	r3, #6
 8004b3c:	481e      	ldr	r0, [pc, #120]	; (8004bb8 <ai_platform_api_get_network_report+0x1d4>)
 8004b3e:	6163      	str	r3, [r4, #20]
 8004b40:	6803      	ldr	r3, [r0, #0]
 8004b42:	4a1e      	ldr	r2, [pc, #120]	; (8004bbc <ai_platform_api_get_network_report+0x1d8>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6003      	str	r3, [r0, #0]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	600b      	str	r3, [r1, #0]
 8004b4e:	6813      	ldr	r3, [r2, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1fc      	bne.n	8004b4e <ai_platform_api_get_network_report+0x16a>
 8004b54:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <ai_platform_api_get_network_report+0x1dc>)
 8004b56:	491b      	ldr	r1, [pc, #108]	; (8004bc4 <ai_platform_api_get_network_report+0x1e0>)
 8004b58:	6019      	str	r1, [r3, #0]
 8004b5a:	6819      	ldr	r1, [r3, #0]
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <ai_platform_api_get_network_report+0x1e4>)
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	d000      	beq.n	8004b64 <ai_platform_api_get_network_report+0x180>
 8004b62:	e7fe      	b.n	8004b62 <ai_platform_api_get_network_report+0x17e>
 8004b64:	f240 1301 	movw	r3, #257	; 0x101
 8004b68:	4913      	ldr	r1, [pc, #76]	; (8004bb8 <ai_platform_api_get_network_report+0x1d4>)
 8004b6a:	6263      	str	r3, [r4, #36]	; 0x24
 8004b6c:	680b      	ldr	r3, [r1, #0]
 8004b6e:	4813      	ldr	r0, [pc, #76]	; (8004bbc <ai_platform_api_get_network_report+0x1d8>)
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	600b      	str	r3, [r1, #0]
 8004b76:	2301      	movs	r3, #1
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	6802      	ldr	r2, [r0, #0]
 8004b7c:	2a00      	cmp	r2, #0
 8004b7e:	d1fc      	bne.n	8004b7a <ai_platform_api_get_network_report+0x196>
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <ai_platform_api_get_network_report+0x1dc>)
 8004b82:	4910      	ldr	r1, [pc, #64]	; (8004bc4 <ai_platform_api_get_network_report+0x1e0>)
 8004b84:	6019      	str	r1, [r3, #0]
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <ai_platform_api_get_network_report+0x1e4>)
 8004b8a:	4299      	cmp	r1, r3
 8004b8c:	d000      	beq.n	8004b90 <ai_platform_api_get_network_report+0x1ac>
 8004b8e:	e7fe      	b.n	8004b8e <ai_platform_api_get_network_report+0x1aa>
 8004b90:	f240 4301 	movw	r3, #1025	; 0x401
 8004b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b96:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004b98:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8004b9c:	0e19      	lsrs	r1, r3, #24
 8004b9e:	0c1a      	lsrs	r2, r3, #16
 8004ba0:	0a1b      	lsrs	r3, r3, #8
 8004ba2:	f884 1020 	strb.w	r1, [r4, #32]
 8004ba6:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8004baa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004bae:	2001      	movs	r0, #1
 8004bb0:	e79b      	b.n	8004aea <ai_platform_api_get_network_report+0x106>
 8004bb2:	bf00      	nop
 8004bb4:	a1c00100 	.word	0xa1c00100
 8004bb8:	e0002000 	.word	0xe0002000
 8004bbc:	40023008 	.word	0x40023008
 8004bc0:	40023000 	.word	0x40023000
 8004bc4:	f407a5c2 	.word	0xf407a5c2
 8004bc8:	b5e8b5cd 	.word	0xb5e8b5cd
 8004bcc:	0807a210 	.word	0x0807a210

08004bd0 <ai_platform_network_create>:
 8004bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bd4:	4f30      	ldr	r7, [pc, #192]	; (8004c98 <ai_platform_network_create+0xc8>)
 8004bd6:	4e31      	ldr	r6, [pc, #196]	; (8004c9c <ai_platform_network_create+0xcc>)
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	b083      	sub	sp, #12
 8004bdc:	f021 0101 	bic.w	r1, r1, #1
 8004be0:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8004be4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8004be8:	6039      	str	r1, [r7, #0]
 8004bea:	2101      	movs	r1, #1
 8004bec:	6031      	str	r1, [r6, #0]
 8004bee:	6831      	ldr	r1, [r6, #0]
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	d1fc      	bne.n	8004bee <ai_platform_network_create+0x1e>
 8004bf4:	492a      	ldr	r1, [pc, #168]	; (8004ca0 <ai_platform_network_create+0xd0>)
 8004bf6:	4d2b      	ldr	r5, [pc, #172]	; (8004ca4 <ai_platform_network_create+0xd4>)
 8004bf8:	600d      	str	r5, [r1, #0]
 8004bfa:	680d      	ldr	r5, [r1, #0]
 8004bfc:	492a      	ldr	r1, [pc, #168]	; (8004ca8 <ai_platform_network_create+0xd8>)
 8004bfe:	428d      	cmp	r5, r1
 8004c00:	d000      	beq.n	8004c04 <ai_platform_network_create+0x34>
 8004c02:	e7fe      	b.n	8004c02 <ai_platform_network_create+0x32>
 8004c04:	b1e0      	cbz	r0, 8004c40 <ai_platform_network_create+0x70>
 8004c06:	4680      	mov	r8, r0
 8004c08:	461d      	mov	r5, r3
 8004c0a:	4b28      	ldr	r3, [pc, #160]	; (8004cac <ai_platform_network_create+0xdc>)
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	f8c8 2000 	str.w	r2, [r8]
 8004c12:	4617      	mov	r7, r2
 8004c14:	f000 fb48 	bl	80052a8 <core_init>
 8004c18:	b1b8      	cbz	r0, 8004c4a <ai_platform_network_create+0x7a>
 8004c1a:	4a1f      	ldr	r2, [pc, #124]	; (8004c98 <ai_platform_network_create+0xc8>)
 8004c1c:	491f      	ldr	r1, [pc, #124]	; (8004c9c <ai_platform_network_create+0xcc>)
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	f023 0301 	bic.w	r3, r3, #1
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	2301      	movs	r3, #1
 8004c28:	6033      	str	r3, [r6, #0]
 8004c2a:	680e      	ldr	r6, [r1, #0]
 8004c2c:	2e00      	cmp	r6, #0
 8004c2e:	d1fc      	bne.n	8004c2a <ai_platform_network_create+0x5a>
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <ai_platform_network_create+0xd0>)
 8004c32:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <ai_platform_network_create+0xd4>)
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <ai_platform_network_create+0xd8>)
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d016      	beq.n	8004c6c <ai_platform_network_create+0x9c>
 8004c3e:	e7fe      	b.n	8004c3e <ai_platform_network_create+0x6e>
 8004c40:	f241 0010 	movw	r0, #4112	; 0x1010
 8004c44:	b003      	add	sp, #12
 8004c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c4a:	062d      	lsls	r5, r5, #24
 8004c4c:	0424      	lsls	r4, r4, #16
 8004c4e:	2130      	movs	r1, #48	; 0x30
 8004c50:	2300      	movs	r3, #0
 8004c52:	f8c8 3000 	str.w	r3, [r8]
 8004c56:	2210      	movs	r2, #16
 8004c58:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	432b      	orrs	r3, r5
 8004c60:	f361 0007 	bfi	r0, r1, #0, #8
 8004c64:	663b      	str	r3, [r7, #96]	; 0x60
 8004c66:	f362 201f 	bfi	r0, r2, #8, #24
 8004c6a:	e7eb      	b.n	8004c44 <ai_platform_network_create+0x74>
 8004c6c:	062d      	lsls	r5, r5, #24
 8004c6e:	0424      	lsls	r4, r4, #16
 8004c70:	ea45 0304 	orr.w	r3, r5, r4
 8004c74:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8004c78:	d001      	beq.n	8004c7e <ai_platform_network_create+0xae>
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	e7e8      	b.n	8004c50 <ai_platform_network_create+0x80>
 8004c7e:	a802      	add	r0, sp, #8
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <ai_platform_network_create+0xe0>)
 8004c82:	f840 3d04 	str.w	r3, [r0, #-4]!
 8004c86:	f000 ffe7 	bl	8005c58 <ai_check_custom_types>
 8004c8a:	b110      	cbz	r0, 8004c92 <ai_platform_network_create+0xc2>
 8004c8c:	4632      	mov	r2, r6
 8004c8e:	4631      	mov	r1, r6
 8004c90:	e7e2      	b.n	8004c58 <ai_platform_network_create+0x88>
 8004c92:	2102      	movs	r1, #2
 8004c94:	e7dc      	b.n	8004c50 <ai_platform_network_create+0x80>
 8004c96:	bf00      	nop
 8004c98:	e0002000 	.word	0xe0002000
 8004c9c:	40023008 	.word	0x40023008
 8004ca0:	40023000 	.word	0x40023000
 8004ca4:	f407a5c2 	.word	0xf407a5c2
 8004ca8:	b5e8b5cd 	.word	0xb5e8b5cd
 8004cac:	a1c00100 	.word	0xa1c00100
 8004cb0:	84048403 	.word	0x84048403

08004cb4 <ai_platform_network_destroy>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	b1d8      	cbz	r0, 8004cf0 <ai_platform_network_destroy+0x3c>
 8004cb8:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <ai_platform_network_destroy+0x4c>)
 8004cba:	6803      	ldr	r3, [r0, #0]
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	bf0c      	ite	eq
 8004cc0:	4603      	moveq	r3, r0
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	4c0f      	ldr	r4, [pc, #60]	; (8004d04 <ai_platform_network_destroy+0x50>)
 8004cc6:	4910      	ldr	r1, [pc, #64]	; (8004d08 <ai_platform_network_destroy+0x54>)
 8004cc8:	6822      	ldr	r2, [r4, #0]
 8004cca:	2501      	movs	r5, #1
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	6022      	str	r2, [r4, #0]
 8004cd2:	460a      	mov	r2, r1
 8004cd4:	600d      	str	r5, [r1, #0]
 8004cd6:	6814      	ldr	r4, [r2, #0]
 8004cd8:	2c00      	cmp	r4, #0
 8004cda:	d1fc      	bne.n	8004cd6 <ai_platform_network_destroy+0x22>
 8004cdc:	4a0b      	ldr	r2, [pc, #44]	; (8004d0c <ai_platform_network_destroy+0x58>)
 8004cde:	490c      	ldr	r1, [pc, #48]	; (8004d10 <ai_platform_network_destroy+0x5c>)
 8004ce0:	6011      	str	r1, [r2, #0]
 8004ce2:	6811      	ldr	r1, [r2, #0]
 8004ce4:	4a0b      	ldr	r2, [pc, #44]	; (8004d14 <ai_platform_network_destroy+0x60>)
 8004ce6:	4291      	cmp	r1, r2
 8004ce8:	d000      	beq.n	8004cec <ai_platform_network_destroy+0x38>
 8004cea:	e7fe      	b.n	8004cea <ai_platform_network_destroy+0x36>
 8004cec:	b913      	cbnz	r3, 8004cf4 <ai_platform_network_destroy+0x40>
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	e7e7      	b.n	8004cc4 <ai_platform_network_destroy+0x10>
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 f853 	bl	8005da0 <ai_layers_destroy_all>
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	bd38      	pop	{r3, r4, r5, pc}
 8004cfe:	bf00      	nop
 8004d00:	a1c00100 	.word	0xa1c00100
 8004d04:	e0002000 	.word	0xe0002000
 8004d08:	40023008 	.word	0x40023008
 8004d0c:	40023000 	.word	0x40023000
 8004d10:	f407a5c2 	.word	0xf407a5c2
 8004d14:	b5e8b5cd 	.word	0xb5e8b5cd

08004d18 <ai_platform_network_init>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	b120      	cbz	r0, 8004d2a <ai_platform_network_init+0x12>
 8004d20:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <ai_platform_network_init+0xcc>)
 8004d22:	6802      	ldr	r2, [r0, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	bf18      	it	ne
 8004d28:	2500      	movne	r5, #0
 8004d2a:	492f      	ldr	r1, [pc, #188]	; (8004de8 <ai_platform_network_init+0xd0>)
 8004d2c:	4a2f      	ldr	r2, [pc, #188]	; (8004dec <ai_platform_network_init+0xd4>)
 8004d2e:	680b      	ldr	r3, [r1, #0]
 8004d30:	2001      	movs	r0, #1
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	600b      	str	r3, [r1, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	6010      	str	r0, [r2, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	d1fc      	bne.n	8004d3c <ai_platform_network_init+0x24>
 8004d42:	4b2b      	ldr	r3, [pc, #172]	; (8004df0 <ai_platform_network_init+0xd8>)
 8004d44:	4a2b      	ldr	r2, [pc, #172]	; (8004df4 <ai_platform_network_init+0xdc>)
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <ai_platform_network_init+0xe0>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d000      	beq.n	8004d52 <ai_platform_network_init+0x3a>
 8004d50:	e7fe      	b.n	8004d50 <ai_platform_network_init+0x38>
 8004d52:	b1dd      	cbz	r5, 8004d8c <ai_platform_network_init+0x74>
 8004d54:	b1e4      	cbz	r4, 8004d90 <ai_platform_network_init+0x78>
 8004d56:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004d58:	6926      	ldr	r6, [r4, #16]
 8004d5a:	b30f      	cbz	r7, 8004da0 <ai_platform_network_init+0x88>
 8004d5c:	b38e      	cbz	r6, 8004dc2 <ai_platform_network_init+0xaa>
 8004d5e:	4627      	mov	r7, r4
 8004d60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004d62:	f105 0618 	add.w	r6, r5, #24
 8004d66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004d68:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004d6c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004d70:	3418      	adds	r4, #24
 8004d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d74:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8004d78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e886 0003 	stmia.w	r6, {r0, r1}
 8004d84:	60eb      	str	r3, [r5, #12]
 8004d86:	4628      	mov	r0, r5
 8004d88:	f000 ff90 	bl	8005cac <ai_layers_init_all>
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d90:	f105 0010 	add.w	r0, r5, #16
 8004d94:	2211      	movs	r2, #17
 8004d96:	2110      	movs	r1, #16
 8004d98:	4625      	mov	r5, r4
 8004d9a:	f000 fa8d 	bl	80052b8 <core_set_error>
 8004d9e:	e7f5      	b.n	8004d8c <ai_platform_network_init+0x74>
 8004da0:	8c21      	ldrh	r1, [r4, #32]
 8004da2:	8be2      	ldrh	r2, [r4, #30]
 8004da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004da6:	fb02 f201 	mul.w	r2, r2, r1
 8004daa:	fb03 f302 	mul.w	r3, r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0d4      	beq.n	8004d5c <ai_platform_network_init+0x44>
 8004db2:	f105 0010 	add.w	r0, r5, #16
 8004db6:	2213      	movs	r2, #19
 8004db8:	2110      	movs	r1, #16
 8004dba:	463d      	mov	r5, r7
 8004dbc:	f000 fa7c 	bl	80052b8 <core_set_error>
 8004dc0:	e7e4      	b.n	8004d8c <ai_platform_network_init+0x74>
 8004dc2:	8921      	ldrh	r1, [r4, #8]
 8004dc4:	88e2      	ldrh	r2, [r4, #6]
 8004dc6:	68e3      	ldr	r3, [r4, #12]
 8004dc8:	fb02 f201 	mul.w	r2, r2, r1
 8004dcc:	fb03 f302 	mul.w	r3, r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0c4      	beq.n	8004d5e <ai_platform_network_init+0x46>
 8004dd4:	f105 0010 	add.w	r0, r5, #16
 8004dd8:	2212      	movs	r2, #18
 8004dda:	2110      	movs	r1, #16
 8004ddc:	4635      	mov	r5, r6
 8004dde:	f000 fa6b 	bl	80052b8 <core_set_error>
 8004de2:	e7d3      	b.n	8004d8c <ai_platform_network_init+0x74>
 8004de4:	a1c00100 	.word	0xa1c00100
 8004de8:	e0002000 	.word	0xe0002000
 8004dec:	40023008 	.word	0x40023008
 8004df0:	40023000 	.word	0x40023000
 8004df4:	f407a5c2 	.word	0xf407a5c2
 8004df8:	b5e8b5cd 	.word	0xb5e8b5cd

08004dfc <ai_platform_network_post_init>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4604      	mov	r4, r0
 8004e00:	b120      	cbz	r0, 8004e0c <ai_platform_network_post_init+0x10>
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <ai_platform_network_post_init+0x80>)
 8004e04:	6802      	ldr	r2, [r0, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	bf18      	it	ne
 8004e0a:	2400      	movne	r4, #0
 8004e0c:	491c      	ldr	r1, [pc, #112]	; (8004e80 <ai_platform_network_post_init+0x84>)
 8004e0e:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <ai_platform_network_post_init+0x88>)
 8004e10:	680b      	ldr	r3, [r1, #0]
 8004e12:	2001      	movs	r0, #1
 8004e14:	f023 0301 	bic.w	r3, r3, #1
 8004e18:	600b      	str	r3, [r1, #0]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	6010      	str	r0, [r2, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	d1fc      	bne.n	8004e1e <ai_platform_network_post_init+0x22>
 8004e24:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <ai_platform_network_post_init+0x8c>)
 8004e26:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <ai_platform_network_post_init+0x90>)
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <ai_platform_network_post_init+0x94>)
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d000      	beq.n	8004e34 <ai_platform_network_post_init+0x38>
 8004e32:	e7fe      	b.n	8004e32 <ai_platform_network_post_init+0x36>
 8004e34:	b1bc      	cbz	r4, 8004e66 <ai_platform_network_post_init+0x6a>
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	f013 0502 	ands.w	r5, r3, #2
 8004e3c:	d015      	beq.n	8004e6a <ai_platform_network_post_init+0x6e>
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f000 ff48 	bl	8005cd4 <ai_layers_post_init_all>
 8004e44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e46:	b163      	cbz	r3, 8004e62 <ai_platform_network_post_init+0x66>
 8004e48:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8004e4a:	b91d      	cbnz	r5, 8004e54 <ai_platform_network_post_init+0x58>
 8004e4c:	e009      	b.n	8004e62 <ai_platform_network_post_init+0x66>
 8004e4e:	461d      	mov	r5, r3
 8004e50:	b13b      	cbz	r3, 8004e62 <ai_platform_network_post_init+0x66>
 8004e52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e54:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e56:	4629      	mov	r1, r5
 8004e58:	2000      	movs	r0, #0
 8004e5a:	4798      	blx	r3
 8004e5c:	692b      	ldr	r3, [r5, #16]
 8004e5e:	42ab      	cmp	r3, r5
 8004e60:	d1f5      	bne.n	8004e4e <ai_platform_network_post_init+0x52>
 8004e62:	2001      	movs	r0, #1
 8004e64:	bd38      	pop	{r3, r4, r5, pc}
 8004e66:	4620      	mov	r0, r4
 8004e68:	bd38      	pop	{r3, r4, r5, pc}
 8004e6a:	f104 0010 	add.w	r0, r4, #16
 8004e6e:	2210      	movs	r2, #16
 8004e70:	2111      	movs	r1, #17
 8004e72:	f000 fa21 	bl	80052b8 <core_set_error>
 8004e76:	4628      	mov	r0, r5
 8004e78:	bd38      	pop	{r3, r4, r5, pc}
 8004e7a:	bf00      	nop
 8004e7c:	a1c00100 	.word	0xa1c00100
 8004e80:	e0002000 	.word	0xe0002000
 8004e84:	40023008 	.word	0x40023008
 8004e88:	40023000 	.word	0x40023000
 8004e8c:	f407a5c2 	.word	0xf407a5c2
 8004e90:	b5e8b5cd 	.word	0xb5e8b5cd

08004e94 <ai_platform_network_process>:
 8004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	9201      	str	r2, [sp, #4]
 8004e9e:	b120      	cbz	r0, 8004eaa <ai_platform_network_process+0x16>
 8004ea0:	4ba5      	ldr	r3, [pc, #660]	; (8005138 <ai_platform_network_process+0x2a4>)
 8004ea2:	6802      	ldr	r2, [r0, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	bf18      	it	ne
 8004ea8:	2400      	movne	r4, #0
 8004eaa:	48a4      	ldr	r0, [pc, #656]	; (800513c <ai_platform_network_process+0x2a8>)
 8004eac:	4ba4      	ldr	r3, [pc, #656]	; (8005140 <ai_platform_network_process+0x2ac>)
 8004eae:	6802      	ldr	r2, [r0, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	6002      	str	r2, [r0, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	d1fc      	bne.n	8004eba <ai_platform_network_process+0x26>
 8004ec0:	4ba0      	ldr	r3, [pc, #640]	; (8005144 <ai_platform_network_process+0x2b0>)
 8004ec2:	4aa1      	ldr	r2, [pc, #644]	; (8005148 <ai_platform_network_process+0x2b4>)
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4ba0      	ldr	r3, [pc, #640]	; (800514c <ai_platform_network_process+0x2b8>)
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d000      	beq.n	8004ed0 <ai_platform_network_process+0x3c>
 8004ece:	e7fe      	b.n	8004ece <ai_platform_network_process+0x3a>
 8004ed0:	2c00      	cmp	r4, #0
 8004ed2:	d066      	beq.n	8004fa2 <ai_platform_network_process+0x10e>
 8004ed4:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8004ed8:	b107      	cbz	r7, 8004edc <ai_platform_network_process+0x48>
 8004eda:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8004edc:	68e3      	ldr	r3, [r4, #12]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2600      	movs	r6, #0
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	6166      	str	r6, [r4, #20]
 8004ee8:	f040 80fe 	bne.w	80050e8 <ai_platform_network_process+0x254>
 8004eec:	2900      	cmp	r1, #0
 8004eee:	d07f      	beq.n	8004ff0 <ai_platform_network_process+0x15c>
 8004ef0:	2f00      	cmp	r7, #0
 8004ef2:	d07d      	beq.n	8004ff0 <ai_platform_network_process+0x15c>
 8004ef4:	883b      	ldrh	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d07a      	beq.n	8004ff0 <ai_platform_network_process+0x15c>
 8004efa:	460d      	mov	r5, r1
 8004efc:	46a0      	mov	r8, r4
 8004efe:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8004f02:	429e      	cmp	r6, r3
 8004f04:	d27d      	bcs.n	8005002 <ai_platform_network_process+0x16e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d07a      	beq.n	8005002 <ai_platform_network_process+0x16e>
 8004f0c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8004f10:	2c00      	cmp	r4, #0
 8004f12:	d076      	beq.n	8005002 <ai_platform_network_process+0x16e>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8004f1c:	d067      	beq.n	8004fee <ai_platform_network_process+0x15a>
 8004f1e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8004f22:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8004f26:	69a0      	ldr	r0, [r4, #24]
 8004f28:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004f2c:	6841      	ldr	r1, [r0, #4]
 8004f2e:	fb0b f30e 	mul.w	r3, fp, lr
 8004f32:	fb0c f303 	mul.w	r3, ip, r3
 8004f36:	4299      	cmp	r1, r3
 8004f38:	d350      	bcc.n	8004fdc <ai_platform_network_process+0x148>
 8004f3a:	68e3      	ldr	r3, [r4, #12]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	455a      	cmp	r2, fp
 8004f40:	d14c      	bne.n	8004fdc <ai_platform_network_process+0x148>
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	4572      	cmp	r2, lr
 8004f46:	d149      	bne.n	8004fdc <ai_platform_network_process+0x148>
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	459c      	cmp	ip, r3
 8004f4c:	d146      	bne.n	8004fdc <ai_platform_network_process+0x148>
 8004f4e:	6800      	ldr	r0, [r0, #0]
 8004f50:	f000 ff8a 	bl	8005e68 <ai_array_get_byte_size>
 8004f54:	68e2      	ldr	r2, [r4, #12]
 8004f56:	6963      	ldr	r3, [r4, #20]
 8004f58:	68d2      	ldr	r2, [r2, #12]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	fb03 f302 	mul.w	r3, r3, r2
 8004f60:	4298      	cmp	r0, r3
 8004f62:	d33b      	bcc.n	8004fdc <ai_platform_network_process+0x148>
 8004f64:	69a3      	ldr	r3, [r4, #24]
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	f000 ff32 	bl	8005dd0 <ai_array_to_buffer_fmt>
 8004f6c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004f70:	4043      	eors	r3, r0
 8004f72:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004f76:	d128      	bne.n	8004fca <ai_platform_network_process+0x136>
 8004f78:	68eb      	ldr	r3, [r5, #12]
 8004f7a:	b1f3      	cbz	r3, 8004fba <ai_platform_network_process+0x126>
 8004f7c:	f8b5 b000 	ldrh.w	fp, [r5]
 8004f80:	f1bb 0f00 	cmp.w	fp, #0
 8004f84:	d012      	beq.n	8004fac <ai_platform_network_process+0x118>
 8004f86:	4623      	mov	r3, r4
 8004f88:	f105 020c 	add.w	r2, r5, #12
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4650      	mov	r0, sl
 8004f90:	f7ff fc00 	bl	8004794 <_platform_network_state_setup.isra.1>
 8004f94:	45d9      	cmp	r9, fp
 8004f96:	883b      	ldrh	r3, [r7, #0]
 8004f98:	bf38      	it	cc
 8004f9a:	46d9      	movcc	r9, fp
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	3518      	adds	r5, #24
 8004fa0:	e7af      	b.n	8004f02 <ai_platform_network_process+0x6e>
 8004fa2:	46a3      	mov	fp, r4
 8004fa4:	4658      	mov	r0, fp
 8004fa6:	b003      	add	sp, #12
 8004fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fac:	f108 0010 	add.w	r0, r8, #16
 8004fb0:	2221      	movs	r2, #33	; 0x21
 8004fb2:	2112      	movs	r1, #18
 8004fb4:	f000 f980 	bl	80052b8 <core_set_error>
 8004fb8:	e7f4      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8004fba:	f108 0010 	add.w	r0, r8, #16
 8004fbe:	2217      	movs	r2, #23
 8004fc0:	2112      	movs	r1, #18
 8004fc2:	469b      	mov	fp, r3
 8004fc4:	f000 f978 	bl	80052b8 <core_set_error>
 8004fc8:	e7ec      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8004fca:	f108 0010 	add.w	r0, r8, #16
 8004fce:	2219      	movs	r2, #25
 8004fd0:	2112      	movs	r1, #18
 8004fd2:	f000 f971 	bl	80052b8 <core_set_error>
 8004fd6:	f04f 0b00 	mov.w	fp, #0
 8004fda:	e7e3      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8004fdc:	f108 0010 	add.w	r0, r8, #16
 8004fe0:	2218      	movs	r2, #24
 8004fe2:	2112      	movs	r1, #18
 8004fe4:	f000 f968 	bl	80052b8 <core_set_error>
 8004fe8:	f04f 0b00 	mov.w	fp, #0
 8004fec:	e7da      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8004fee:	4644      	mov	r4, r8
 8004ff0:	f104 0010 	add.w	r0, r4, #16
 8004ff4:	2217      	movs	r2, #23
 8004ff6:	2112      	movs	r1, #18
 8004ff8:	f000 f95e 	bl	80052b8 <core_set_error>
 8004ffc:	f04f 0b00 	mov.w	fp, #0
 8005000:	e7d0      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8005002:	9a01      	ldr	r2, [sp, #4]
 8005004:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8005008:	4644      	mov	r4, r8
 800500a:	2a00      	cmp	r2, #0
 800500c:	f000 80a2 	beq.w	8005154 <ai_platform_network_process+0x2c0>
 8005010:	2b01      	cmp	r3, #1
 8005012:	f240 8140 	bls.w	8005296 <ai_platform_network_process+0x402>
 8005016:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 800501a:	f118 0f0c 	cmn.w	r8, #12
 800501e:	f000 813a 	beq.w	8005296 <ai_platform_network_process+0x402>
 8005022:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 8135 	beq.w	8005296 <ai_platform_network_process+0x402>
 800502c:	9d01      	ldr	r5, [sp, #4]
 800502e:	2700      	movs	r7, #0
 8005030:	3504      	adds	r5, #4
 8005032:	429f      	cmp	r7, r3
 8005034:	f080 808c 	bcs.w	8005150 <ai_platform_network_process+0x2bc>
 8005038:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8087 	beq.w	8005150 <ai_platform_network_process+0x2bc>
 8005042:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8005046:	2e00      	cmp	r6, #0
 8005048:	f000 8082 	beq.w	8005150 <ai_platform_network_process+0x2bc>
 800504c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8005056:	d067      	beq.n	8005128 <ai_platform_network_process+0x294>
 8005058:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800505c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8005060:	69b0      	ldr	r0, [r6, #24]
 8005062:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005066:	6841      	ldr	r1, [r0, #4]
 8005068:	fb0b f30e 	mul.w	r3, fp, lr
 800506c:	fb0c f303 	mul.w	r3, ip, r3
 8005070:	4299      	cmp	r1, r3
 8005072:	f0c0 8110 	bcc.w	8005296 <ai_platform_network_process+0x402>
 8005076:	68f3      	ldr	r3, [r6, #12]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	455a      	cmp	r2, fp
 800507c:	f040 810b 	bne.w	8005296 <ai_platform_network_process+0x402>
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	4572      	cmp	r2, lr
 8005084:	f040 8107 	bne.w	8005296 <ai_platform_network_process+0x402>
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	459c      	cmp	ip, r3
 800508c:	f040 8103 	bne.w	8005296 <ai_platform_network_process+0x402>
 8005090:	6800      	ldr	r0, [r0, #0]
 8005092:	f000 fee9 	bl	8005e68 <ai_array_get_byte_size>
 8005096:	68f2      	ldr	r2, [r6, #12]
 8005098:	6973      	ldr	r3, [r6, #20]
 800509a:	68d2      	ldr	r2, [r2, #12]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	fb03 f302 	mul.w	r3, r3, r2
 80050a2:	4298      	cmp	r0, r3
 80050a4:	f0c0 80f7 	bcc.w	8005296 <ai_platform_network_process+0x402>
 80050a8:	69b3      	ldr	r3, [r6, #24]
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	f000 fe90 	bl	8005dd0 <ai_array_to_buffer_fmt>
 80050b0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80050b4:	4043      	eors	r3, r0
 80050b6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80050ba:	d12c      	bne.n	8005116 <ai_platform_network_process+0x282>
 80050bc:	68eb      	ldr	r3, [r5, #12]
 80050be:	b313      	cbz	r3, 8005106 <ai_platform_network_process+0x272>
 80050c0:	f8b5 b000 	ldrh.w	fp, [r5]
 80050c4:	f1bb 0f00 	cmp.w	fp, #0
 80050c8:	d016      	beq.n	80050f8 <ai_platform_network_process+0x264>
 80050ca:	4633      	mov	r3, r6
 80050cc:	f105 020c 	add.w	r2, r5, #12
 80050d0:	4629      	mov	r1, r5
 80050d2:	4650      	mov	r0, sl
 80050d4:	f7ff fb5e 	bl	8004794 <_platform_network_state_setup.isra.1>
 80050d8:	45d9      	cmp	r9, fp
 80050da:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80050de:	bf38      	it	cc
 80050e0:	46d9      	movcc	r9, fp
 80050e2:	3701      	adds	r7, #1
 80050e4:	3518      	adds	r5, #24
 80050e6:	e7a4      	b.n	8005032 <ai_platform_network_process+0x19e>
 80050e8:	f104 0010 	add.w	r0, r4, #16
 80050ec:	2230      	movs	r2, #48	; 0x30
 80050ee:	2111      	movs	r1, #17
 80050f0:	f000 f8e2 	bl	80052b8 <core_set_error>
 80050f4:	46b3      	mov	fp, r6
 80050f6:	e755      	b.n	8004fa4 <ai_platform_network_process+0x110>
 80050f8:	f104 0010 	add.w	r0, r4, #16
 80050fc:	2221      	movs	r2, #33	; 0x21
 80050fe:	2113      	movs	r1, #19
 8005100:	f000 f8da 	bl	80052b8 <core_set_error>
 8005104:	e74e      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8005106:	f104 0010 	add.w	r0, r4, #16
 800510a:	2217      	movs	r2, #23
 800510c:	2113      	movs	r1, #19
 800510e:	469b      	mov	fp, r3
 8005110:	f000 f8d2 	bl	80052b8 <core_set_error>
 8005114:	e746      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8005116:	f104 0010 	add.w	r0, r4, #16
 800511a:	2219      	movs	r2, #25
 800511c:	2113      	movs	r1, #19
 800511e:	f000 f8cb 	bl	80052b8 <core_set_error>
 8005122:	f04f 0b00 	mov.w	fp, #0
 8005126:	e73d      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8005128:	f104 0010 	add.w	r0, r4, #16
 800512c:	2217      	movs	r2, #23
 800512e:	2113      	movs	r1, #19
 8005130:	f000 f8c2 	bl	80052b8 <core_set_error>
 8005134:	46d3      	mov	fp, sl
 8005136:	e735      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8005138:	a1c00100 	.word	0xa1c00100
 800513c:	e0002000 	.word	0xe0002000
 8005140:	40023008 	.word	0x40023008
 8005144:	40023000 	.word	0x40023000
 8005148:	f407a5c2 	.word	0xf407a5c2
 800514c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005150:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8005154:	f8a4 9014 	strh.w	r9, [r4, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8099 	beq.w	8005290 <ai_platform_network_process+0x3fc>
 800515e:	2b01      	cmp	r3, #1
 8005160:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005162:	f240 8093 	bls.w	800528c <ai_platform_network_process+0x3f8>
 8005166:	f105 070c 	add.w	r7, r5, #12
 800516a:	8ae0      	ldrh	r0, [r4, #22]
 800516c:	8aa3      	ldrh	r3, [r4, #20]
 800516e:	4283      	cmp	r3, r0
 8005170:	d977      	bls.n	8005262 <ai_platform_network_process+0x3ce>
 8005172:	46a3      	mov	fp, r4
 8005174:	2d00      	cmp	r5, #0
 8005176:	d032      	beq.n	80051de <ai_platform_network_process+0x34a>
 8005178:	882b      	ldrh	r3, [r5, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d02f      	beq.n	80051de <ai_platform_network_process+0x34a>
 800517e:	686b      	ldr	r3, [r5, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d02c      	beq.n	80051de <ai_platform_network_process+0x34a>
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f04f 0800 	mov.w	r8, #0
 800518a:	b343      	cbz	r3, 80051de <ai_platform_network_process+0x34a>
 800518c:	68a9      	ldr	r1, [r5, #8]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	f8d1 a000 	ldr.w	sl, [r1]
 8005194:	6814      	ldr	r4, [r2, #0]
 8005196:	6890      	ldr	r0, [r2, #8]
 8005198:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800519c:	eb0a 0609 	add.w	r6, sl, r9
 80051a0:	00a4      	lsls	r4, r4, #2
 80051a2:	6871      	ldr	r1, [r6, #4]
 80051a4:	d45f      	bmi.n	8005266 <ai_platform_network_process+0x3d2>
 80051a6:	68d4      	ldr	r4, [r2, #12]
 80051a8:	1b00      	subs	r0, r0, r4
 80051aa:	4401      	add	r1, r0
 80051ac:	6091      	str	r1, [r2, #8]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	6872      	ldr	r2, [r6, #4]
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80051b8:	f85a 2009 	ldr.w	r2, [sl, r9]
 80051bc:	440b      	add	r3, r1
 80051be:	4293      	cmp	r3, r2
 80051c0:	bf24      	itt	cs
 80051c2:	68f3      	ldrcs	r3, [r6, #12]
 80051c4:	1ad3      	subcs	r3, r2, r3
 80051c6:	6073      	str	r3, [r6, #4]
 80051c8:	882b      	ldrh	r3, [r5, #0]
 80051ca:	f108 0801 	add.w	r8, r8, #1
 80051ce:	4598      	cmp	r8, r3
 80051d0:	d205      	bcs.n	80051de <ai_platform_network_process+0x34a>
 80051d2:	686b      	ldr	r3, [r5, #4]
 80051d4:	b11b      	cbz	r3, 80051de <ai_platform_network_process+0x34a>
 80051d6:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1d6      	bne.n	800518c <ai_platform_network_process+0x2f8>
 80051de:	4658      	mov	r0, fp
 80051e0:	f000 fd90 	bl	8005d04 <ai_layers_forward_all>
 80051e4:	2f00      	cmp	r7, #0
 80051e6:	d032      	beq.n	800524e <ai_platform_network_process+0x3ba>
 80051e8:	883b      	ldrh	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02f      	beq.n	800524e <ai_platform_network_process+0x3ba>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	b36b      	cbz	r3, 800524e <ai_platform_network_process+0x3ba>
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	b358      	cbz	r0, 800524e <ai_platform_network_process+0x3ba>
 80051f6:	f04f 0800 	mov.w	r8, #0
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6981      	ldr	r1, [r0, #24]
 80051fe:	f8d3 a000 	ldr.w	sl, [r3]
 8005202:	680c      	ldr	r4, [r1, #0]
 8005204:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005208:	eb0a 0609 	add.w	r6, sl, r9
 800520c:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8005210:	00a4      	lsls	r4, r4, #2
 8005212:	eb0c 0302 	add.w	r3, ip, r2
 8005216:	d42a      	bmi.n	800526e <ai_platform_network_process+0x3da>
 8005218:	f85a 2009 	ldr.w	r2, [sl, r9]
 800521c:	4293      	cmp	r3, r2
 800521e:	bf24      	itt	cs
 8005220:	68f3      	ldrcs	r3, [r6, #12]
 8005222:	1ad3      	subcs	r3, r2, r3
 8005224:	6073      	str	r3, [r6, #4]
 8005226:	6981      	ldr	r1, [r0, #24]
 8005228:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800522c:	1b12      	subs	r2, r2, r4
 800522e:	4413      	add	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
 8005232:	6983      	ldr	r3, [r0, #24]
 8005234:	6872      	ldr	r2, [r6, #4]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	883b      	ldrh	r3, [r7, #0]
 800523a:	f108 0801 	add.w	r8, r8, #1
 800523e:	4598      	cmp	r8, r3
 8005240:	d205      	bcs.n	800524e <ai_platform_network_process+0x3ba>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	b11b      	cbz	r3, 800524e <ai_platform_network_process+0x3ba>
 8005246:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800524a:	2800      	cmp	r0, #0
 800524c:	d1d5      	bne.n	80051fa <ai_platform_network_process+0x366>
 800524e:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8005252:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005256:	3001      	adds	r0, #1
 8005258:	b280      	uxth	r0, r0
 800525a:	4283      	cmp	r3, r0
 800525c:	f8ab 0016 	strh.w	r0, [fp, #22]
 8005260:	d888      	bhi.n	8005174 <ai_platform_network_process+0x2e0>
 8005262:	4683      	mov	fp, r0
 8005264:	e69e      	b.n	8004fa4 <ai_platform_network_process+0x110>
 8005266:	68b2      	ldr	r2, [r6, #8]
 8005268:	f000 fe62 	bl	8005f30 <memcpy>
 800526c:	e7a2      	b.n	80051b4 <ai_platform_network_process+0x320>
 800526e:	6889      	ldr	r1, [r1, #8]
 8005270:	4660      	mov	r0, ip
 8005272:	f000 fe5d 	bl	8005f30 <memcpy>
 8005276:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800527a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800527e:	440b      	add	r3, r1
 8005280:	4293      	cmp	r3, r2
 8005282:	bf24      	itt	cs
 8005284:	68f3      	ldrcs	r3, [r6, #12]
 8005286:	1ad3      	subcs	r3, r2, r3
 8005288:	6073      	str	r3, [r6, #4]
 800528a:	e7d5      	b.n	8005238 <ai_platform_network_process+0x3a4>
 800528c:	2700      	movs	r7, #0
 800528e:	e76c      	b.n	800516a <ai_platform_network_process+0x2d6>
 8005290:	461d      	mov	r5, r3
 8005292:	461f      	mov	r7, r3
 8005294:	e769      	b.n	800516a <ai_platform_network_process+0x2d6>
 8005296:	f104 0010 	add.w	r0, r4, #16
 800529a:	2218      	movs	r2, #24
 800529c:	2113      	movs	r1, #19
 800529e:	f000 f80b 	bl	80052b8 <core_set_error>
 80052a2:	f04f 0b00 	mov.w	fp, #0
 80052a6:	e67d      	b.n	8004fa4 <ai_platform_network_process+0x110>

080052a8 <core_init>:
 80052a8:	2001      	movs	r0, #1
 80052aa:	4770      	bx	lr

080052ac <core_get_error>:
 80052ac:	4603      	mov	r3, r0
 80052ae:	2200      	movs	r2, #0
 80052b0:	6800      	ldr	r0, [r0, #0]
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop

080052b8 <core_set_error>:
 80052b8:	7803      	ldrb	r3, [r0, #0]
 80052ba:	b933      	cbnz	r3, 80052ca <core_set_error+0x12>
 80052bc:	7001      	strb	r1, [r0, #0]
 80052be:	6803      	ldr	r3, [r0, #0]
 80052c0:	f362 231f 	bfi	r3, r2, #8, #24
 80052c4:	6003      	str	r3, [r0, #0]
 80052c6:	2001      	movs	r0, #1
 80052c8:	4770      	bx	lr
 80052ca:	2000      	movs	r0, #0
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop

080052d0 <ai_dict8_dot_array_f32>:
 80052d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d4:	f8dd c020 	ldr.w	ip, [sp, #32]
 80052d8:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80052dc:	f000 80c0 	beq.w	8005460 <ai_dict8_dot_array_f32+0x190>
 80052e0:	f101 0408 	add.w	r4, r1, #8
 80052e4:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80052e8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005468 <ai_dict8_dot_array_f32+0x198>
 80052ec:	eb04 0e09 	add.w	lr, r4, r9
 80052f0:	f103 0520 	add.w	r5, r3, #32
 80052f4:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80052f8:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80052fc:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8005300:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8005304:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8005308:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800530c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8005310:	ed55 3a04 	vldr	s7, [r5, #-16]
 8005314:	ed55 4a03 	vldr	s9, [r5, #-12]
 8005318:	ed55 5a02 	vldr	s11, [r5, #-8]
 800531c:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005320:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005324:	edd6 7a00 	vldr	s15, [r6]
 8005328:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800532c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005330:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005334:	ed9a 3a00 	vldr	s6, [sl]
 8005338:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800533c:	eee3 7a05 	vfma.f32	s15, s6, s10
 8005340:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005344:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005348:	ed97 3a00 	vldr	s6, [r7]
 800534c:	ed96 5a00 	vldr	s10, [r6]
 8005350:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8005354:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8005358:	eee3 7a04 	vfma.f32	s15, s6, s8
 800535c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005360:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005364:	ed9a 3a00 	vldr	s6, [sl]
 8005368:	ed96 4a00 	vldr	s8, [r6]
 800536c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8005370:	eee5 7a06 	vfma.f32	s15, s10, s12
 8005374:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005378:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800537c:	ed97 5a00 	vldr	s10, [r7]
 8005380:	ed96 6a00 	vldr	s12, [r6]
 8005384:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005388:	3408      	adds	r4, #8
 800538a:	45a6      	cmp	lr, r4
 800538c:	f105 0520 	add.w	r5, r5, #32
 8005390:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005394:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005398:	eee6 7a26 	vfma.f32	s15, s12, s13
 800539c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053a0:	d1a8      	bne.n	80052f4 <ai_dict8_dot_array_f32+0x24>
 80053a2:	4449      	add	r1, r9
 80053a4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80053a8:	f01c 0c07 	ands.w	ip, ip, #7
 80053ac:	d050      	beq.n	8005450 <ai_dict8_dot_array_f32+0x180>
 80053ae:	780c      	ldrb	r4, [r1, #0]
 80053b0:	edd3 6a00 	vldr	s13, [r3]
 80053b4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80053b8:	edd4 7a00 	vldr	s15, [r4]
 80053bc:	f1bc 0f01 	cmp.w	ip, #1
 80053c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053c4:	d044      	beq.n	8005450 <ai_dict8_dot_array_f32+0x180>
 80053c6:	784c      	ldrb	r4, [r1, #1]
 80053c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80053cc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80053d0:	edd4 7a00 	vldr	s15, [r4]
 80053d4:	f1bc 0f02 	cmp.w	ip, #2
 80053d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053dc:	d038      	beq.n	8005450 <ai_dict8_dot_array_f32+0x180>
 80053de:	788c      	ldrb	r4, [r1, #2]
 80053e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80053e4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80053e8:	edd4 7a00 	vldr	s15, [r4]
 80053ec:	f1bc 0f03 	cmp.w	ip, #3
 80053f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053f4:	d02c      	beq.n	8005450 <ai_dict8_dot_array_f32+0x180>
 80053f6:	78cc      	ldrb	r4, [r1, #3]
 80053f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80053fc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005400:	edd4 7a00 	vldr	s15, [r4]
 8005404:	f1bc 0f04 	cmp.w	ip, #4
 8005408:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800540c:	d020      	beq.n	8005450 <ai_dict8_dot_array_f32+0x180>
 800540e:	790c      	ldrb	r4, [r1, #4]
 8005410:	edd3 6a04 	vldr	s13, [r3, #16]
 8005414:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005418:	edd4 7a00 	vldr	s15, [r4]
 800541c:	f1bc 0f05 	cmp.w	ip, #5
 8005420:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005424:	d014      	beq.n	8005450 <ai_dict8_dot_array_f32+0x180>
 8005426:	794c      	ldrb	r4, [r1, #5]
 8005428:	edd3 6a05 	vldr	s13, [r3, #20]
 800542c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005430:	edd4 7a00 	vldr	s15, [r4]
 8005434:	f1bc 0f06 	cmp.w	ip, #6
 8005438:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800543c:	d008      	beq.n	8005450 <ai_dict8_dot_array_f32+0x180>
 800543e:	7989      	ldrb	r1, [r1, #6]
 8005440:	edd3 7a06 	vldr	s15, [r3, #24]
 8005444:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005448:	edd2 6a00 	vldr	s13, [r2]
 800544c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005450:	edd0 7a00 	vldr	s15, [r0]
 8005454:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005458:	ed80 7a00 	vstr	s14, [r0]
 800545c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005460:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005468 <ai_dict8_dot_array_f32+0x198>
 8005464:	e7a0      	b.n	80053a8 <ai_dict8_dot_array_f32+0xd8>
 8005466:	bf00      	nop
 8005468:	00000000 	.word	0x00000000

0800546c <ai_dict4_dot_array_f32>:
 800546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005470:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005472:	f027 0c01 	bic.w	ip, r7, #1
 8005476:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800547a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800547e:	f000 80ae 	beq.w	80055de <ai_dict4_dot_array_f32+0x172>
 8005482:	1d0d      	adds	r5, r1, #4
 8005484:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005488:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80055e4 <ai_dict4_dot_array_f32+0x178>
 800548c:	eb05 0e09 	add.w	lr, r5, r9
 8005490:	f103 0420 	add.w	r4, r3, #32
 8005494:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005498:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800549c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 80054a0:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 80054a4:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80054a8:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 80054ac:	ed14 5a04 	vldr	s10, [r4, #-16]
 80054b0:	ed54 5a03 	vldr	s11, [r4, #-12]
 80054b4:	ed14 6a02 	vldr	s12, [r4, #-8]
 80054b8:	ed54 6a01 	vldr	s13, [r4, #-4]
 80054bc:	f006 0a0f 	and.w	sl, r6, #15
 80054c0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80054c4:	edda 7a00 	vldr	s15, [sl]
 80054c8:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80054cc:	0936      	lsrs	r6, r6, #4
 80054ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80054d2:	ee67 7a83 	vmul.f32	s15, s15, s6
 80054d6:	ed96 3a00 	vldr	s6, [r6]
 80054da:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80054de:	eee3 7a23 	vfma.f32	s15, s6, s7
 80054e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80054e6:	f00b 0b0f 	and.w	fp, fp, #15
 80054ea:	edd6 3a00 	vldr	s7, [r6]
 80054ee:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80054f2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80054f6:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80054fa:	3504      	adds	r5, #4
 80054fc:	ed9b 4a00 	vldr	s8, [fp]
 8005500:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8005504:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005508:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800550c:	f00a 0a0f 	and.w	sl, sl, #15
 8005510:	eddb 4a00 	vldr	s9, [fp]
 8005514:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005518:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800551c:	45ae      	cmp	lr, r5
 800551e:	ed9a 5a00 	vldr	s10, [sl]
 8005522:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8005526:	eee5 7a25 	vfma.f32	s15, s10, s11
 800552a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800552e:	f006 060f 	and.w	r6, r6, #15
 8005532:	edda 5a00 	vldr	s11, [sl]
 8005536:	eee5 7a86 	vfma.f32	s15, s11, s12
 800553a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800553e:	f104 0420 	add.w	r4, r4, #32
 8005542:	ed96 6a00 	vldr	s12, [r6]
 8005546:	eee6 7a26 	vfma.f32	s15, s12, s13
 800554a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800554e:	d1a1      	bne.n	8005494 <ai_dict4_dot_array_f32+0x28>
 8005550:	4449      	add	r1, r9
 8005552:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005556:	459c      	cmp	ip, r3
 8005558:	d92d      	bls.n	80055b6 <ai_dict4_dot_array_f32+0x14a>
 800555a:	f10c 0c07 	add.w	ip, ip, #7
 800555e:	f103 0508 	add.w	r5, r3, #8
 8005562:	ebac 0c05 	sub.w	ip, ip, r5
 8005566:	f02c 0407 	bic.w	r4, ip, #7
 800556a:	f103 0810 	add.w	r8, r3, #16
 800556e:	44a0      	add	r8, r4
 8005570:	f101 3eff 	add.w	lr, r1, #4294967295
 8005574:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005578:	ed15 6a01 	vldr	s12, [r5, #-4]
 800557c:	ed55 6a02 	vldr	s13, [r5, #-8]
 8005580:	f004 060f 	and.w	r6, r4, #15
 8005584:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005588:	0924      	lsrs	r4, r4, #4
 800558a:	edd6 7a00 	vldr	s15, [r6]
 800558e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005592:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005596:	ed94 6a00 	vldr	s12, [r4]
 800559a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800559e:	3508      	adds	r5, #8
 80055a0:	45a8      	cmp	r8, r5
 80055a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055a6:	d1e5      	bne.n	8005574 <ai_dict4_dot_array_f32+0x108>
 80055a8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80055ac:	f10c 0c01 	add.w	ip, ip, #1
 80055b0:	4461      	add	r1, ip
 80055b2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80055b6:	07fc      	lsls	r4, r7, #31
 80055b8:	d509      	bpl.n	80055ce <ai_dict4_dot_array_f32+0x162>
 80055ba:	7809      	ldrb	r1, [r1, #0]
 80055bc:	edd3 7a00 	vldr	s15, [r3]
 80055c0:	090b      	lsrs	r3, r1, #4
 80055c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80055c6:	edd2 6a00 	vldr	s13, [r2]
 80055ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055ce:	edd0 7a00 	vldr	s15, [r0]
 80055d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055d6:	ed80 7a00 	vstr	s14, [r0]
 80055da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055de:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80055e4 <ai_dict4_dot_array_f32+0x178>
 80055e2:	e7b8      	b.n	8005556 <ai_dict4_dot_array_f32+0xea>
 80055e4:	00000000 	.word	0x00000000

080055e8 <forward_dense>:
 80055e8:	6982      	ldr	r2, [r0, #24]
 80055ea:	8813      	ldrh	r3, [r2, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 81ca 	beq.w	8005986 <forward_dense+0x39e>
 80055f2:	6852      	ldr	r2, [r2, #4]
 80055f4:	6850      	ldr	r0, [r2, #4]
 80055f6:	b100      	cbz	r0, 80055fa <forward_dense+0x12>
 80055f8:	6800      	ldr	r0, [r0, #0]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	f240 81c0 	bls.w	8005980 <forward_dense+0x398>
 8005600:	6911      	ldr	r1, [r2, #16]
 8005602:	b101      	cbz	r1, 8005606 <forward_dense+0x1e>
 8005604:	6809      	ldr	r1, [r1, #0]
 8005606:	2b02      	cmp	r3, #2
 8005608:	f000 81bf 	beq.w	800598a <forward_dense+0x3a2>
 800560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005610:	ed2d 8b10 	vpush	{d8-d15}
 8005614:	69d3      	ldr	r3, [r2, #28]
 8005616:	b091      	sub	sp, #68	; 0x44
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 820b 	beq.w	8005a34 <forward_dense+0x44c>
 800561e:	681c      	ldr	r4, [r3, #0]
 8005620:	9408      	str	r4, [sp, #32]
 8005622:	f112 0418 	adds.w	r4, r2, #24
 8005626:	f000 81df 	beq.w	80059e8 <forward_dense+0x400>
 800562a:	8b12      	ldrh	r2, [r2, #24]
 800562c:	2a01      	cmp	r2, #1
 800562e:	f240 81fe 	bls.w	8005a2e <forward_dense+0x446>
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 81da 	beq.w	80059ec <forward_dense+0x404>
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	9306      	str	r3, [sp, #24]
 800563c:	9b08      	ldr	r3, [sp, #32]
 800563e:	68cc      	ldr	r4, [r1, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	68c5      	ldr	r5, [r0, #12]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800564a:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800564e:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8005652:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8005656:	fa4c f505 	asr.w	r5, ip, r5
 800565a:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800565e:	950b      	str	r5, [sp, #44]	; 0x2c
 8005660:	2a04      	cmp	r2, #4
 8005662:	fb07 f506 	mul.w	r5, r7, r6
 8005666:	6864      	ldr	r4, [r4, #4]
 8005668:	9507      	str	r5, [sp, #28]
 800566a:	f000 81dd 	beq.w	8005a28 <forward_dense+0x440>
 800566e:	2a08      	cmp	r2, #8
 8005670:	f000 81da 	beq.w	8005a28 <forward_dense+0x440>
 8005674:	f04f 0a00 	mov.w	sl, #0
 8005678:	698a      	ldr	r2, [r1, #24]
 800567a:	6981      	ldr	r1, [r0, #24]
 800567c:	6890      	ldr	r0, [r2, #8]
 800567e:	9a08      	ldr	r2, [sp, #32]
 8005680:	9004      	str	r0, [sp, #16]
 8005682:	6952      	ldr	r2, [r2, #20]
 8005684:	688f      	ldr	r7, [r1, #8]
 8005686:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800568a:	00a2      	lsls	r2, r4, #2
 800568c:	9209      	str	r2, [sp, #36]	; 0x24
 800568e:	1886      	adds	r6, r0, r2
 8005690:	9a07      	ldr	r2, [sp, #28]
 8005692:	2a00      	cmp	r2, #0
 8005694:	f000 81c3 	beq.w	8005a1e <forward_dense+0x436>
 8005698:	f1a8 0210 	sub.w	r2, r8, #16
 800569c:	0912      	lsrs	r2, r2, #4
 800569e:	3201      	adds	r2, #1
 80056a0:	0192      	lsls	r2, r2, #6
 80056a2:	920c      	str	r2, [sp, #48]	; 0x30
 80056a4:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80056a8:	920a      	str	r2, [sp, #40]	; 0x28
 80056aa:	689d      	ldr	r5, [r3, #8]
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	eddf aad0 	vldr	s21, [pc, #832]	; 80059f0 <forward_dense+0x408>
 80056b2:	2200      	movs	r2, #0
 80056b4:	9205      	str	r2, [sp, #20]
 80056b6:	f008 020f 	and.w	r2, r8, #15
 80056ba:	920d      	str	r2, [sp, #52]	; 0x34
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d043      	beq.n	8005748 <forward_dense+0x160>
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	689c      	ldr	r4, [r3, #8]
 80056c4:	9b04      	ldr	r3, [sp, #16]
 80056c6:	f1ba 0f00 	cmp.w	sl, #0
 80056ca:	d042      	beq.n	8005752 <forward_dense+0x16a>
 80056cc:	42b3      	cmp	r3, r6
 80056ce:	d22a      	bcs.n	8005726 <forward_dense+0x13e>
 80056d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056d2:	469b      	mov	fp, r3
 80056d4:	ab0f      	add	r3, sp, #60	; 0x3c
 80056d6:	9303      	str	r3, [sp, #12]
 80056d8:	2a04      	cmp	r2, #4
 80056da:	4633      	mov	r3, r6
 80056dc:	4646      	mov	r6, r8
 80056de:	4698      	mov	r8, r3
 80056e0:	f000 8156 	beq.w	8005990 <forward_dense+0x3a8>
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	f000 8185 	beq.w	80059f4 <forward_dense+0x40c>
 80056ea:	f8d4 c000 	ldr.w	ip, [r4]
 80056ee:	9803      	ldr	r0, [sp, #12]
 80056f0:	9600      	str	r6, [sp, #0]
 80056f2:	463b      	mov	r3, r7
 80056f4:	4629      	mov	r1, r5
 80056f6:	4652      	mov	r2, sl
 80056f8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80056fc:	f7ff fde8 	bl	80052d0 <ai_dict8_dot_array_f32>
 8005700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005702:	f84b 3b04 	str.w	r3, [fp], #4
 8005706:	45c3      	cmp	fp, r8
 8005708:	f104 0404 	add.w	r4, r4, #4
 800570c:	444d      	add	r5, r9
 800570e:	d3e9      	bcc.n	80056e4 <forward_dense+0xfc>
 8005710:	4643      	mov	r3, r8
 8005712:	46b0      	mov	r8, r6
 8005714:	461e      	mov	r6, r3
 8005716:	9a04      	ldr	r2, [sp, #16]
 8005718:	43d3      	mvns	r3, r2
 800571a:	4433      	add	r3, r6
 800571c:	f023 0303 	bic.w	r3, r3, #3
 8005720:	3304      	adds	r3, #4
 8005722:	18d3      	adds	r3, r2, r3
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005728:	9b05      	ldr	r3, [sp, #20]
 800572a:	4417      	add	r7, r2
 800572c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572e:	4416      	add	r6, r2
 8005730:	9a07      	ldr	r2, [sp, #28]
 8005732:	3301      	adds	r3, #1
 8005734:	4293      	cmp	r3, r2
 8005736:	9305      	str	r3, [sp, #20]
 8005738:	f000 8171 	beq.w	8005a1e <forward_dense+0x436>
 800573c:	9b08      	ldr	r3, [sp, #32]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	689d      	ldr	r5, [r3, #8]
 8005742:	9b06      	ldr	r3, [sp, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1bb      	bne.n	80056c0 <forward_dense+0xd8>
 8005748:	461c      	mov	r4, r3
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	f1ba 0f00 	cmp.w	sl, #0
 8005750:	d1bc      	bne.n	80056cc <forward_dense+0xe4>
 8005752:	42b3      	cmp	r3, r6
 8005754:	d2e7      	bcs.n	8005726 <forward_dense+0x13e>
 8005756:	4618      	mov	r0, r3
 8005758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800575a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800575e:	eb07 0c03 	add.w	ip, r7, r3
 8005762:	469e      	mov	lr, r3
 8005764:	2c00      	cmp	r4, #0
 8005766:	f000 80ff 	beq.w	8005968 <forward_dense+0x380>
 800576a:	f1b8 0f0f 	cmp.w	r8, #15
 800576e:	edd4 fa00 	vldr	s31, [r4]
 8005772:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80059f0 <forward_dense+0x408>
 8005776:	f104 0404 	add.w	r4, r4, #4
 800577a:	f240 80fd 	bls.w	8005978 <forward_dense+0x390>
 800577e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005782:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005786:	4641      	mov	r1, r8
 8005788:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800578c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005790:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8005794:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8005798:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800579c:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 80057a0:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 80057a4:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 80057a8:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 80057ac:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 80057b0:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 80057b4:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 80057b8:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 80057bc:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 80057c0:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 80057c4:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 80057c8:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 80057cc:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 80057d0:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80057d4:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 80057d8:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 80057dc:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 80057e0:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 80057e4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80057e8:	ed52 4a04 	vldr	s9, [r2, #-16]
 80057ec:	ed12 5a03 	vldr	s10, [r2, #-12]
 80057f0:	ed53 5a03 	vldr	s11, [r3, #-12]
 80057f4:	ed12 6a02 	vldr	s12, [r2, #-8]
 80057f8:	ed13 7a02 	vldr	s14, [r3, #-8]
 80057fc:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8005800:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8005804:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005808:	3910      	subs	r1, #16
 800580a:	290f      	cmp	r1, #15
 800580c:	ed53 ea01 	vldr	s29, [r3, #-4]
 8005810:	ed12 ea01 	vldr	s28, [r2, #-4]
 8005814:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8005818:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800581c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005820:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8005824:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8005828:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800582c:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005830:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005834:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005838:	eee1 7a21 	vfma.f32	s15, s2, s3
 800583c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005840:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005844:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005848:	eee5 7a25 	vfma.f32	s15, s10, s11
 800584c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005850:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005854:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005858:	d896      	bhi.n	8005788 <forward_dense+0x1a0>
 800585a:	eb05 010e 	add.w	r1, r5, lr
 800585e:	465b      	mov	r3, fp
 8005860:	4662      	mov	r2, ip
 8005862:	2b00      	cmp	r3, #0
 8005864:	d075      	beq.n	8005952 <forward_dense+0x36a>
 8005866:	ed91 7a00 	vldr	s14, [r1]
 800586a:	edd2 7a00 	vldr	s15, [r2]
 800586e:	2b01      	cmp	r3, #1
 8005870:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005874:	d06d      	beq.n	8005952 <forward_dense+0x36a>
 8005876:	ed91 7a01 	vldr	s14, [r1, #4]
 800587a:	edd2 7a01 	vldr	s15, [r2, #4]
 800587e:	2b02      	cmp	r3, #2
 8005880:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005884:	d065      	beq.n	8005952 <forward_dense+0x36a>
 8005886:	ed91 7a02 	vldr	s14, [r1, #8]
 800588a:	edd2 7a02 	vldr	s15, [r2, #8]
 800588e:	2b03      	cmp	r3, #3
 8005890:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005894:	d05d      	beq.n	8005952 <forward_dense+0x36a>
 8005896:	ed91 7a03 	vldr	s14, [r1, #12]
 800589a:	edd2 7a03 	vldr	s15, [r2, #12]
 800589e:	2b04      	cmp	r3, #4
 80058a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058a4:	d055      	beq.n	8005952 <forward_dense+0x36a>
 80058a6:	ed91 7a04 	vldr	s14, [r1, #16]
 80058aa:	edd2 7a04 	vldr	s15, [r2, #16]
 80058ae:	2b05      	cmp	r3, #5
 80058b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058b4:	d04d      	beq.n	8005952 <forward_dense+0x36a>
 80058b6:	ed91 7a05 	vldr	s14, [r1, #20]
 80058ba:	edd2 7a05 	vldr	s15, [r2, #20]
 80058be:	2b06      	cmp	r3, #6
 80058c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058c4:	d045      	beq.n	8005952 <forward_dense+0x36a>
 80058c6:	ed91 7a06 	vldr	s14, [r1, #24]
 80058ca:	edd2 7a06 	vldr	s15, [r2, #24]
 80058ce:	2b07      	cmp	r3, #7
 80058d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058d4:	d03d      	beq.n	8005952 <forward_dense+0x36a>
 80058d6:	ed91 7a07 	vldr	s14, [r1, #28]
 80058da:	edd2 7a07 	vldr	s15, [r2, #28]
 80058de:	2b08      	cmp	r3, #8
 80058e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058e4:	d035      	beq.n	8005952 <forward_dense+0x36a>
 80058e6:	ed91 7a08 	vldr	s14, [r1, #32]
 80058ea:	edd2 7a08 	vldr	s15, [r2, #32]
 80058ee:	2b09      	cmp	r3, #9
 80058f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058f4:	d02d      	beq.n	8005952 <forward_dense+0x36a>
 80058f6:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80058fa:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80058fe:	2b0a      	cmp	r3, #10
 8005900:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005904:	d025      	beq.n	8005952 <forward_dense+0x36a>
 8005906:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800590a:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800590e:	2b0b      	cmp	r3, #11
 8005910:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005914:	d01d      	beq.n	8005952 <forward_dense+0x36a>
 8005916:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800591a:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800591e:	2b0c      	cmp	r3, #12
 8005920:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005924:	d015      	beq.n	8005952 <forward_dense+0x36a>
 8005926:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800592a:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800592e:	2b0d      	cmp	r3, #13
 8005930:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005934:	d00d      	beq.n	8005952 <forward_dense+0x36a>
 8005936:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800593a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800593e:	2b0e      	cmp	r3, #14
 8005940:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005944:	d005      	beq.n	8005952 <forward_dense+0x36a>
 8005946:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800594a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800594e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005952:	444d      	add	r5, r9
 8005954:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8005958:	ece0 6a01 	vstmia	r0!, {s13}
 800595c:	42b0      	cmp	r0, r6
 800595e:	f4bf aeda 	bcs.w	8005716 <forward_dense+0x12e>
 8005962:	2c00      	cmp	r4, #0
 8005964:	f47f af01 	bne.w	800576a <forward_dense+0x182>
 8005968:	f1b8 0f0f 	cmp.w	r8, #15
 800596c:	eef0 fa6a 	vmov.f32	s31, s21
 8005970:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80059f0 <forward_dense+0x408>
 8005974:	f63f af03 	bhi.w	800577e <forward_dense+0x196>
 8005978:	4643      	mov	r3, r8
 800597a:	4629      	mov	r1, r5
 800597c:	463a      	mov	r2, r7
 800597e:	e770      	b.n	8005862 <forward_dense+0x27a>
 8005980:	2300      	movs	r3, #0
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	deff      	udf	#255	; 0xff
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	deff      	udf	#255	; 0xff
 800598a:	2300      	movs	r3, #0
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	deff      	udf	#255	; 0xff
 8005990:	b1ac      	cbz	r4, 80059be <forward_dense+0x3d6>
 8005992:	f8d4 c000 	ldr.w	ip, [r4]
 8005996:	9803      	ldr	r0, [sp, #12]
 8005998:	9600      	str	r6, [sp, #0]
 800599a:	463b      	mov	r3, r7
 800599c:	4629      	mov	r1, r5
 800599e:	4652      	mov	r2, sl
 80059a0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80059a4:	f7ff fd62 	bl	800546c <ai_dict4_dot_array_f32>
 80059a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059aa:	f84b 3b04 	str.w	r3, [fp], #4
 80059ae:	45c3      	cmp	fp, r8
 80059b0:	f104 0404 	add.w	r4, r4, #4
 80059b4:	444d      	add	r5, r9
 80059b6:	f4bf aeab 	bcs.w	8005710 <forward_dense+0x128>
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	d1e9      	bne.n	8005992 <forward_dense+0x3aa>
 80059be:	4634      	mov	r4, r6
 80059c0:	4646      	mov	r6, r8
 80059c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059c6:	9400      	str	r4, [sp, #0]
 80059c8:	463b      	mov	r3, r7
 80059ca:	4629      	mov	r1, r5
 80059cc:	4652      	mov	r2, sl
 80059ce:	4640      	mov	r0, r8
 80059d0:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80059d4:	f7ff fd4a 	bl	800546c <ai_dict4_dot_array_f32>
 80059d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059da:	f84b 3b04 	str.w	r3, [fp], #4
 80059de:	45b3      	cmp	fp, r6
 80059e0:	444d      	add	r5, r9
 80059e2:	d3f0      	bcc.n	80059c6 <forward_dense+0x3de>
 80059e4:	46a0      	mov	r8, r4
 80059e6:	e696      	b.n	8005716 <forward_dense+0x12e>
 80059e8:	9406      	str	r4, [sp, #24]
 80059ea:	e627      	b.n	800563c <forward_dense+0x54>
 80059ec:	9306      	str	r3, [sp, #24]
 80059ee:	e625      	b.n	800563c <forward_dense+0x54>
 80059f0:	00000000 	.word	0x00000000
 80059f4:	4634      	mov	r4, r6
 80059f6:	4646      	mov	r6, r8
 80059f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059fc:	9400      	str	r4, [sp, #0]
 80059fe:	463b      	mov	r3, r7
 8005a00:	4629      	mov	r1, r5
 8005a02:	4652      	mov	r2, sl
 8005a04:	4640      	mov	r0, r8
 8005a06:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005a0a:	f7ff fc61 	bl	80052d0 <ai_dict8_dot_array_f32>
 8005a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a10:	f84b 3b04 	str.w	r3, [fp], #4
 8005a14:	45b3      	cmp	fp, r6
 8005a16:	444d      	add	r5, r9
 8005a18:	d3f0      	bcc.n	80059fc <forward_dense+0x414>
 8005a1a:	46a0      	mov	r8, r4
 8005a1c:	e67b      	b.n	8005716 <forward_dense+0x12e>
 8005a1e:	b011      	add	sp, #68	; 0x44
 8005a20:	ecbd 8b10 	vpop	{d8-d15}
 8005a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a28:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8005a2c:	e624      	b.n	8005678 <forward_dense+0x90>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9306      	str	r3, [sp, #24]
 8005a32:	e603      	b.n	800563c <forward_dense+0x54>
 8005a34:	9308      	str	r3, [sp, #32]
 8005a36:	e5f4      	b.n	8005622 <forward_dense+0x3a>

08005a38 <nl_func_relu_generic_array_f32>:
 8005a38:	b430      	push	{r4, r5}
 8005a3a:	6989      	ldr	r1, [r1, #24]
 8005a3c:	6980      	ldr	r0, [r0, #24]
 8005a3e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a42:	688c      	ldr	r4, [r1, #8]
 8005a44:	6880      	ldr	r0, [r0, #8]
 8005a46:	ed93 7a00 	vldr	s14, [r3]
 8005a4a:	ed93 6a01 	vldr	s12, [r3, #4]
 8005a4e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005a52:	3a01      	subs	r2, #1
 8005a54:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005a58:	0092      	lsls	r2, r2, #2
 8005a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5e:	4410      	add	r0, r2
 8005a60:	4422      	add	r2, r4
 8005a62:	d421      	bmi.n	8005aa8 <nl_func_relu_generic_array_f32+0x70>
 8005a64:	4294      	cmp	r4, r2
 8005a66:	d83d      	bhi.n	8005ae4 <nl_func_relu_generic_array_f32+0xac>
 8005a68:	1d13      	adds	r3, r2, #4
 8005a6a:	1d02      	adds	r2, r0, #4
 8005a6c:	e010      	b.n	8005a90 <nl_func_relu_generic_array_f32+0x58>
 8005a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a76:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005a7a:	d501      	bpl.n	8005a80 <nl_func_relu_generic_array_f32+0x48>
 8005a7c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005a80:	ed62 7a01 	vstmdb	r2!, {s15}
 8005a84:	6888      	ldr	r0, [r1, #8]
 8005a86:	f1a3 0408 	sub.w	r4, r3, #8
 8005a8a:	4284      	cmp	r4, r0
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	d329      	bcc.n	8005ae4 <nl_func_relu_generic_array_f32+0xac>
 8005a90:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005a94:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9c:	f1a3 0504 	sub.w	r5, r3, #4
 8005aa0:	d4e5      	bmi.n	8005a6e <nl_func_relu_generic_array_f32+0x36>
 8005aa2:	eef0 7a66 	vmov.f32	s15, s13
 8005aa6:	e7eb      	b.n	8005a80 <nl_func_relu_generic_array_f32+0x48>
 8005aa8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab0:	d01a      	beq.n	8005ae8 <nl_func_relu_generic_array_f32+0xb0>
 8005ab2:	4294      	cmp	r4, r2
 8005ab4:	d816      	bhi.n	8005ae4 <nl_func_relu_generic_array_f32+0xac>
 8005ab6:	1d13      	adds	r3, r2, #4
 8005ab8:	1d02      	adds	r2, r0, #4
 8005aba:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005abe:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ac6:	f1a3 0408 	sub.w	r4, r3, #8
 8005aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ace:	f1a3 0004 	sub.w	r0, r3, #4
 8005ad2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005ad6:	4623      	mov	r3, r4
 8005ad8:	d51e      	bpl.n	8005b18 <nl_func_relu_generic_array_f32+0xe0>
 8005ada:	ed62 6a01 	vstmdb	r2!, {s13}
 8005ade:	688b      	ldr	r3, [r1, #8]
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d91e      	bls.n	8005b22 <nl_func_relu_generic_array_f32+0xea>
 8005ae4:	bc30      	pop	{r4, r5}
 8005ae6:	4770      	bx	lr
 8005ae8:	4294      	cmp	r4, r2
 8005aea:	d8fb      	bhi.n	8005ae4 <nl_func_relu_generic_array_f32+0xac>
 8005aec:	1d13      	adds	r3, r2, #4
 8005aee:	2500      	movs	r5, #0
 8005af0:	1d02      	adds	r2, r0, #4
 8005af2:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005afa:	f1a3 0408 	sub.w	r4, r3, #8
 8005afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b02:	f1a3 0004 	sub.w	r0, r3, #4
 8005b06:	4623      	mov	r3, r4
 8005b08:	db0d      	blt.n	8005b26 <nl_func_relu_generic_array_f32+0xee>
 8005b0a:	ed62 7a01 	vstmdb	r2!, {s15}
 8005b0e:	688b      	ldr	r3, [r1, #8]
 8005b10:	42a3      	cmp	r3, r4
 8005b12:	d8e7      	bhi.n	8005ae4 <nl_func_relu_generic_array_f32+0xac>
 8005b14:	4603      	mov	r3, r0
 8005b16:	e7ec      	b.n	8005af2 <nl_func_relu_generic_array_f32+0xba>
 8005b18:	ed62 7a01 	vstmdb	r2!, {s15}
 8005b1c:	688c      	ldr	r4, [r1, #8]
 8005b1e:	429c      	cmp	r4, r3
 8005b20:	d8e0      	bhi.n	8005ae4 <nl_func_relu_generic_array_f32+0xac>
 8005b22:	4603      	mov	r3, r0
 8005b24:	e7c9      	b.n	8005aba <nl_func_relu_generic_array_f32+0x82>
 8005b26:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005b2a:	688c      	ldr	r4, [r1, #8]
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	d8d9      	bhi.n	8005ae4 <nl_func_relu_generic_array_f32+0xac>
 8005b30:	4603      	mov	r3, r0
 8005b32:	e7de      	b.n	8005af2 <nl_func_relu_generic_array_f32+0xba>

08005b34 <forward_relu>:
 8005b34:	6982      	ldr	r2, [r0, #24]
 8005b36:	8813      	ldrh	r3, [r2, #0]
 8005b38:	b333      	cbz	r3, 8005b88 <forward_relu+0x54>
 8005b3a:	6852      	ldr	r2, [r2, #4]
 8005b3c:	6851      	ldr	r1, [r2, #4]
 8005b3e:	b101      	cbz	r1, 8005b42 <forward_relu+0xe>
 8005b40:	6809      	ldr	r1, [r1, #0]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d91d      	bls.n	8005b82 <forward_relu+0x4e>
 8005b46:	b4f0      	push	{r4, r5, r6, r7}
 8005b48:	6917      	ldr	r7, [r2, #16]
 8005b4a:	b107      	cbz	r7, 8005b4e <forward_relu+0x1a>
 8005b4c:	683f      	ldr	r7, [r7, #0]
 8005b4e:	688c      	ldr	r4, [r1, #8]
 8005b50:	69c3      	ldr	r3, [r0, #28]
 8005b52:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d044      	beq.n	8005be4 <forward_relu+0xb0>
 8005b5a:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8005b5e:	2d01      	cmp	r5, #1
 8005b60:	d014      	beq.n	8005b8c <forward_relu+0x58>
 8005b62:	2c00      	cmp	r4, #0
 8005b64:	d074      	beq.n	8005c50 <forward_relu+0x11c>
 8005b66:	68ce      	ldr	r6, [r1, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005b6e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	fb05 f202 	mul.w	r2, r5, r2
 8005b78:	d1f9      	bne.n	8005b6e <forward_relu+0x3a>
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	bcf0      	pop	{r4, r5, r6, r7}
 8005b7e:	f7ff bf5b 	b.w	8005a38 <nl_func_relu_generic_array_f32>
 8005b82:	2300      	movs	r3, #0
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	deff      	udf	#255	; 0xff
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	deff      	udf	#255	; 0xff
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	6988      	ldr	r0, [r1, #24]
 8005b90:	6896      	ldr	r6, [r2, #8]
 8005b92:	ed93 7a00 	vldr	s14, [r3]
 8005b96:	6882      	ldr	r2, [r0, #8]
 8005b98:	b184      	cbz	r4, 8005bbc <forward_relu+0x88>
 8005b9a:	68cf      	ldr	r7, [r1, #12]
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8005ba2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8005ba6:	42a7      	cmp	r7, r4
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	d1f9      	bne.n	8005ba2 <forward_relu+0x6e>
 8005bae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	18d2      	adds	r2, r2, r3
 8005bb8:	441e      	add	r6, r3
 8005bba:	d23f      	bcs.n	8005c3c <forward_relu+0x108>
 8005bbc:	1d13      	adds	r3, r2, #4
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	1d32      	adds	r2, r6, #4
 8005bc2:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bce:	f1a3 0104 	sub.w	r1, r3, #4
 8005bd2:	d835      	bhi.n	8005c40 <forward_relu+0x10c>
 8005bd4:	ed62 7a01 	vstmdb	r2!, {s15}
 8005bd8:	6884      	ldr	r4, [r0, #8]
 8005bda:	3b08      	subs	r3, #8
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	d82d      	bhi.n	8005c3c <forward_relu+0x108>
 8005be0:	460b      	mov	r3, r1
 8005be2:	e7ee      	b.n	8005bc2 <forward_relu+0x8e>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	698d      	ldr	r5, [r1, #24]
 8005be8:	6898      	ldr	r0, [r3, #8]
 8005bea:	68ab      	ldr	r3, [r5, #8]
 8005bec:	b184      	cbz	r4, 8005c10 <forward_relu+0xdc>
 8005bee:	68ce      	ldr	r6, [r1, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005bf6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8005bfa:	42a6      	cmp	r6, r4
 8005bfc:	fb01 f202 	mul.w	r2, r1, r2
 8005c00:	d1f9      	bne.n	8005bf6 <forward_relu+0xc2>
 8005c02:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005c06:	3a01      	subs	r2, #1
 8005c08:	0092      	lsls	r2, r2, #2
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	4410      	add	r0, r2
 8005c0e:	d215      	bcs.n	8005c3c <forward_relu+0x108>
 8005c10:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005c54 <forward_relu+0x120>
 8005c14:	3304      	adds	r3, #4
 8005c16:	1d01      	adds	r1, r0, #4
 8005c18:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c24:	bfb8      	it	lt
 8005c26:	eef0 7a47 	vmovlt.f32	s15, s14
 8005c2a:	ed61 7a01 	vstmdb	r1!, {s15}
 8005c2e:	68a8      	ldr	r0, [r5, #8]
 8005c30:	f1a3 0208 	sub.w	r2, r3, #8
 8005c34:	4290      	cmp	r0, r2
 8005c36:	f1a3 0304 	sub.w	r3, r3, #4
 8005c3a:	d9ed      	bls.n	8005c18 <forward_relu+0xe4>
 8005c3c:	bcf0      	pop	{r4, r5, r6, r7}
 8005c3e:	4770      	bx	lr
 8005c40:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005c44:	6884      	ldr	r4, [r0, #8]
 8005c46:	3b08      	subs	r3, #8
 8005c48:	429c      	cmp	r4, r3
 8005c4a:	d8f7      	bhi.n	8005c3c <forward_relu+0x108>
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	e7b8      	b.n	8005bc2 <forward_relu+0x8e>
 8005c50:	2201      	movs	r2, #1
 8005c52:	e792      	b.n	8005b7a <forward_relu+0x46>
 8005c54:	00000000 	.word	0x00000000

08005c58 <ai_check_custom_types>:
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <ai_check_custom_types+0x50>)
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	b118      	cbz	r0, 8005c6a <ai_check_custom_types+0x12>
 8005c62:	7803      	ldrb	r3, [r0, #0]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d002      	beq.n	8005c6e <ai_check_custom_types+0x16>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	b002      	add	sp, #8
 8005c6c:	4770      	bx	lr
 8005c6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <ai_check_custom_types+0x28>
 8005c76:	2001      	movs	r0, #1
 8005c78:	f080 0001 	eor.w	r0, r0, #1
 8005c7c:	b002      	add	sp, #8
 8005c7e:	4770      	bx	lr
 8005c80:	7842      	ldrb	r2, [r0, #1]
 8005c82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	f100 0001 	add.w	r0, r0, #1
 8005c8c:	d1f3      	bne.n	8005c76 <ai_check_custom_types+0x1e>
 8005c8e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005c92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d1ed      	bne.n	8005c76 <ai_check_custom_types+0x1e>
 8005c9a:	7842      	ldrb	r2, [r0, #1]
 8005c9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d1e8      	bne.n	8005c76 <ai_check_custom_types+0x1e>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e7e7      	b.n	8005c78 <ai_check_custom_types+0x20>
 8005ca8:	0800930c 	.word	0x0800930c

08005cac <ai_layers_init_all>:
 8005cac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005cae:	b17a      	cbz	r2, 8005cd0 <ai_layers_init_all+0x24>
 8005cb0:	6913      	ldr	r3, [r2, #16]
 8005cb2:	60d0      	str	r0, [r2, #12]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	f04f 0201 	mov.w	r2, #1
 8005cba:	d009      	beq.n	8005cd0 <ai_layers_init_all+0x24>
 8005cbc:	b143      	cbz	r3, 8005cd0 <ai_layers_init_all+0x24>
 8005cbe:	6919      	ldr	r1, [r3, #16]
 8005cc0:	60d8      	str	r0, [r3, #12]
 8005cc2:	4299      	cmp	r1, r3
 8005cc4:	f102 0201 	add.w	r2, r2, #1
 8005cc8:	d002      	beq.n	8005cd0 <ai_layers_init_all+0x24>
 8005cca:	460b      	mov	r3, r1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f6      	bne.n	8005cbe <ai_layers_init_all+0x12>
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4770      	bx	lr

08005cd4 <ai_layers_post_init_all>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005cd8:	b18c      	cbz	r4, 8005cfe <ai_layers_post_init_all+0x2a>
 8005cda:	2500      	movs	r5, #0
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	f013 0f01 	tst.w	r3, #1
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	d003      	beq.n	8005cee <ai_layers_post_init_all+0x1a>
 8005ce6:	6a23      	ldr	r3, [r4, #32]
 8005ce8:	b10b      	cbz	r3, 8005cee <ai_layers_post_init_all+0x1a>
 8005cea:	4798      	blx	r3
 8005cec:	3501      	adds	r5, #1
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d002      	beq.n	8005cfa <ai_layers_post_init_all+0x26>
 8005cf4:	461c      	mov	r4, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f0      	bne.n	8005cdc <ai_layers_post_init_all+0x8>
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
 8005cfe:	4625      	mov	r5, r4
 8005d00:	e7fb      	b.n	8005cfa <ai_layers_post_init_all+0x26>
 8005d02:	bf00      	nop

08005d04 <ai_layers_forward_all>:
 8005d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d08:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8005d0a:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	2f00      	cmp	r7, #0
 8005d10:	d02c      	beq.n	8005d6c <ai_layers_forward_all+0x68>
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	d03f      	beq.n	8005d96 <ai_layers_forward_all+0x92>
 8005d16:	6545      	str	r5, [r0, #84]	; 0x54
 8005d18:	4629      	mov	r1, r5
 8005d1a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	47b8      	blx	r7
 8005d20:	2600      	movs	r6, #0
 8005d22:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005d24:	46b0      	mov	r8, r6
 8005d26:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005d28:	2002      	movs	r0, #2
 8005d2a:	47b8      	blx	r7
 8005d2c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005d2e:	696b      	ldr	r3, [r5, #20]
 8005d30:	4628      	mov	r0, r5
 8005d32:	4798      	blx	r3
 8005d34:	692b      	ldr	r3, [r5, #16]
 8005d36:	429d      	cmp	r5, r3
 8005d38:	f04f 0003 	mov.w	r0, #3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	d009      	beq.n	8005d54 <ai_layers_forward_all+0x50>
 8005d40:	6563      	str	r3, [r4, #84]	; 0x54
 8005d42:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005d44:	47b8      	blx	r7
 8005d46:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005d48:	3601      	adds	r6, #1
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d1eb      	bne.n	8005d26 <ai_layers_forward_all+0x22>
 8005d4e:	4630      	mov	r0, r6
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	2100      	movs	r1, #0
 8005d56:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 8005d5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005d5c:	47b8      	blx	r7
 8005d5e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005d60:	3601      	adds	r6, #1
 8005d62:	2900      	cmp	r1, #0
 8005d64:	d1df      	bne.n	8005d26 <ai_layers_forward_all+0x22>
 8005d66:	4630      	mov	r0, r6
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6c:	b19d      	cbz	r5, 8005d96 <ai_layers_forward_all+0x92>
 8005d6e:	6545      	str	r5, [r0, #84]	; 0x54
 8005d70:	463e      	mov	r6, r7
 8005d72:	696b      	ldr	r3, [r5, #20]
 8005d74:	4628      	mov	r0, r5
 8005d76:	4798      	blx	r3
 8005d78:	692b      	ldr	r3, [r5, #16]
 8005d7a:	42ab      	cmp	r3, r5
 8005d7c:	f106 0601 	add.w	r6, r6, #1
 8005d80:	d004      	beq.n	8005d8c <ai_layers_forward_all+0x88>
 8005d82:	6563      	str	r3, [r4, #84]	; 0x54
 8005d84:	461d      	mov	r5, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f3      	bne.n	8005d72 <ai_layers_forward_all+0x6e>
 8005d8a:	e7e0      	b.n	8005d4e <ai_layers_forward_all+0x4a>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	6563      	str	r3, [r4, #84]	; 0x54
 8005d90:	4630      	mov	r0, r6
 8005d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d96:	462e      	mov	r6, r5
 8005d98:	4630      	mov	r0, r6
 8005d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9e:	bf00      	nop

08005da0 <ai_layers_destroy_all>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005da4:	b18c      	cbz	r4, 8005dca <ai_layers_destroy_all+0x2a>
 8005da6:	2500      	movs	r5, #0
 8005da8:	6863      	ldr	r3, [r4, #4]
 8005daa:	f013 0f04 	tst.w	r3, #4
 8005dae:	4620      	mov	r0, r4
 8005db0:	d003      	beq.n	8005dba <ai_layers_destroy_all+0x1a>
 8005db2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005db4:	b10b      	cbz	r3, 8005dba <ai_layers_destroy_all+0x1a>
 8005db6:	4798      	blx	r3
 8005db8:	3501      	adds	r5, #1
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	d002      	beq.n	8005dc6 <ai_layers_destroy_all+0x26>
 8005dc0:	461c      	mov	r4, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f0      	bne.n	8005da8 <ai_layers_destroy_all+0x8>
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	bd38      	pop	{r3, r4, r5, pc}
 8005dca:	4625      	mov	r5, r4
 8005dcc:	e7fb      	b.n	8005dc6 <ai_layers_destroy_all+0x26>
 8005dce:	bf00      	nop

08005dd0 <ai_array_to_buffer_fmt>:
 8005dd0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d02e      	beq.n	8005e36 <ai_array_to_buffer_fmt+0x66>
 8005dd8:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <ai_array_to_buffer_fmt+0x78>)
 8005dda:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00e      	beq.n	8005e00 <ai_array_to_buffer_fmt+0x30>
 8005de2:	dd11      	ble.n	8005e08 <ai_array_to_buffer_fmt+0x38>
 8005de4:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <ai_array_to_buffer_fmt+0x7c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00a      	beq.n	8005e00 <ai_array_to_buffer_fmt+0x30>
 8005dea:	dd18      	ble.n	8005e1e <ai_array_to_buffer_fmt+0x4e>
 8005dec:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <ai_array_to_buffer_fmt+0x80>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d006      	beq.n	8005e00 <ai_array_to_buffer_fmt+0x30>
 8005df2:	4a18      	ldr	r2, [pc, #96]	; (8005e54 <ai_array_to_buffer_fmt+0x84>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <ai_array_to_buffer_fmt+0x30>
 8005df8:	4a17      	ldr	r2, [pc, #92]	; (8005e58 <ai_array_to_buffer_fmt+0x88>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d000      	beq.n	8005e00 <ai_array_to_buffer_fmt+0x30>
 8005dfe:	2340      	movs	r3, #64	; 0x40
 8005e00:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005e04:	4318      	orrs	r0, r3
 8005e06:	4770      	bx	lr
 8005e08:	4a14      	ldr	r2, [pc, #80]	; (8005e5c <ai_array_to_buffer_fmt+0x8c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d0f8      	beq.n	8005e00 <ai_array_to_buffer_fmt+0x30>
 8005e0e:	dd06      	ble.n	8005e1e <ai_array_to_buffer_fmt+0x4e>
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <ai_array_to_buffer_fmt+0x90>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d0f4      	beq.n	8005e00 <ai_array_to_buffer_fmt+0x30>
 8005e16:	320f      	adds	r2, #15
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d0f1      	beq.n	8005e00 <ai_array_to_buffer_fmt+0x30>
 8005e1c:	e7ef      	b.n	8005dfe <ai_array_to_buffer_fmt+0x2e>
 8005e1e:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d0ec      	beq.n	8005e00 <ai_array_to_buffer_fmt+0x30>
 8005e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d1e7      	bne.n	8005dfe <ai_array_to_buffer_fmt+0x2e>
 8005e2e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005e32:	4318      	orrs	r0, r3
 8005e34:	4770      	bx	lr
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <ai_array_to_buffer_fmt+0x94>)
 8005e38:	4003      	ands	r3, r0
 8005e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e3e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005e42:	4318      	orrs	r0, r3
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	00060440 	.word	0x00060440
 8005e4c:	00840447 	.word	0x00840447
 8005e50:	0084084f 	.word	0x0084084f
 8005e54:	01821040 	.word	0x01821040
 8005e58:	00840840 	.word	0x00840840
 8005e5c:	00040447 	.word	0x00040447
 8005e60:	00040840 	.word	0x00040840
 8005e64:	00803fff 	.word	0x00803fff

08005e68 <ai_array_get_byte_size>:
 8005e68:	b1c1      	cbz	r1, 8005e9c <ai_array_get_byte_size+0x34>
 8005e6a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005e6e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005e72:	4413      	add	r3, r2
 8005e74:	fb01 f103 	mul.w	r1, r1, r3
 8005e78:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8005e7c:	3107      	adds	r1, #7
 8005e7e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8005e82:	f021 0107 	bic.w	r1, r1, #7
 8005e86:	2804      	cmp	r0, #4
 8005e88:	fa21 f102 	lsr.w	r1, r1, r2
 8005e8c:	d008      	beq.n	8005ea0 <ai_array_get_byte_size+0x38>
 8005e8e:	2808      	cmp	r0, #8
 8005e90:	d101      	bne.n	8005e96 <ai_array_get_byte_size+0x2e>
 8005e92:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8005e96:	3107      	adds	r1, #7
 8005e98:	08c8      	lsrs	r0, r1, #3
 8005e9a:	4770      	bx	lr
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	4770      	bx	lr
 8005ea0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005ea4:	3107      	adds	r1, #7
 8005ea6:	08c8      	lsrs	r0, r1, #3
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop

08005eac <calloc>:
 8005eac:	4b02      	ldr	r3, [pc, #8]	; (8005eb8 <calloc+0xc>)
 8005eae:	460a      	mov	r2, r1
 8005eb0:	4601      	mov	r1, r0
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	f000 b84f 	b.w	8005f56 <_calloc_r>
 8005eb8:	20001c40 	.word	0x20001c40

08005ebc <__errno>:
 8005ebc:	4b01      	ldr	r3, [pc, #4]	; (8005ec4 <__errno+0x8>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20001c40 	.word	0x20001c40

08005ec8 <__libc_init_array>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4e0d      	ldr	r6, [pc, #52]	; (8005f00 <__libc_init_array+0x38>)
 8005ecc:	4c0d      	ldr	r4, [pc, #52]	; (8005f04 <__libc_init_array+0x3c>)
 8005ece:	1ba4      	subs	r4, r4, r6
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	42a5      	cmp	r5, r4
 8005ed6:	d109      	bne.n	8005eec <__libc_init_array+0x24>
 8005ed8:	4e0b      	ldr	r6, [pc, #44]	; (8005f08 <__libc_init_array+0x40>)
 8005eda:	4c0c      	ldr	r4, [pc, #48]	; (8005f0c <__libc_init_array+0x44>)
 8005edc:	f003 f818 	bl	8008f10 <_init>
 8005ee0:	1ba4      	subs	r4, r4, r6
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	2500      	movs	r5, #0
 8005ee6:	42a5      	cmp	r5, r4
 8005ee8:	d105      	bne.n	8005ef6 <__libc_init_array+0x2e>
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ef0:	4798      	blx	r3
 8005ef2:	3501      	adds	r5, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__libc_init_array+0xc>
 8005ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005efa:	4798      	blx	r3
 8005efc:	3501      	adds	r5, #1
 8005efe:	e7f2      	b.n	8005ee6 <__libc_init_array+0x1e>
 8005f00:	0807a520 	.word	0x0807a520
 8005f04:	0807a520 	.word	0x0807a520
 8005f08:	0807a520 	.word	0x0807a520
 8005f0c:	0807a524 	.word	0x0807a524

08005f10 <malloc>:
 8005f10:	4b02      	ldr	r3, [pc, #8]	; (8005f1c <malloc+0xc>)
 8005f12:	4601      	mov	r1, r0
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	f000 b87b 	b.w	8006010 <_malloc_r>
 8005f1a:	bf00      	nop
 8005f1c:	20001c40 	.word	0x20001c40

08005f20 <free>:
 8005f20:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <free+0xc>)
 8005f22:	4601      	mov	r1, r0
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	f000 b825 	b.w	8005f74 <_free_r>
 8005f2a:	bf00      	nop
 8005f2c:	20001c40 	.word	0x20001c40

08005f30 <memcpy>:
 8005f30:	b510      	push	{r4, lr}
 8005f32:	1e43      	subs	r3, r0, #1
 8005f34:	440a      	add	r2, r1
 8005f36:	4291      	cmp	r1, r2
 8005f38:	d100      	bne.n	8005f3c <memcpy+0xc>
 8005f3a:	bd10      	pop	{r4, pc}
 8005f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f44:	e7f7      	b.n	8005f36 <memcpy+0x6>

08005f46 <memset>:
 8005f46:	4402      	add	r2, r0
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d100      	bne.n	8005f50 <memset+0xa>
 8005f4e:	4770      	bx	lr
 8005f50:	f803 1b01 	strb.w	r1, [r3], #1
 8005f54:	e7f9      	b.n	8005f4a <memset+0x4>

08005f56 <_calloc_r>:
 8005f56:	b538      	push	{r3, r4, r5, lr}
 8005f58:	fb02 f401 	mul.w	r4, r2, r1
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	f000 f857 	bl	8006010 <_malloc_r>
 8005f62:	4605      	mov	r5, r0
 8005f64:	b118      	cbz	r0, 8005f6e <_calloc_r+0x18>
 8005f66:	4622      	mov	r2, r4
 8005f68:	2100      	movs	r1, #0
 8005f6a:	f7ff ffec 	bl	8005f46 <memset>
 8005f6e:	4628      	mov	r0, r5
 8005f70:	bd38      	pop	{r3, r4, r5, pc}
	...

08005f74 <_free_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4605      	mov	r5, r0
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	d045      	beq.n	8006008 <_free_r+0x94>
 8005f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f80:	1f0c      	subs	r4, r1, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bfb8      	it	lt
 8005f86:	18e4      	addlt	r4, r4, r3
 8005f88:	f001 fe76 	bl	8007c78 <__malloc_lock>
 8005f8c:	4a1f      	ldr	r2, [pc, #124]	; (800600c <_free_r+0x98>)
 8005f8e:	6813      	ldr	r3, [r2, #0]
 8005f90:	4610      	mov	r0, r2
 8005f92:	b933      	cbnz	r3, 8005fa2 <_free_r+0x2e>
 8005f94:	6063      	str	r3, [r4, #4]
 8005f96:	6014      	str	r4, [r2, #0]
 8005f98:	4628      	mov	r0, r5
 8005f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f9e:	f001 be6c 	b.w	8007c7a <__malloc_unlock>
 8005fa2:	42a3      	cmp	r3, r4
 8005fa4:	d90c      	bls.n	8005fc0 <_free_r+0x4c>
 8005fa6:	6821      	ldr	r1, [r4, #0]
 8005fa8:	1862      	adds	r2, r4, r1
 8005faa:	4293      	cmp	r3, r2
 8005fac:	bf04      	itt	eq
 8005fae:	681a      	ldreq	r2, [r3, #0]
 8005fb0:	685b      	ldreq	r3, [r3, #4]
 8005fb2:	6063      	str	r3, [r4, #4]
 8005fb4:	bf04      	itt	eq
 8005fb6:	1852      	addeq	r2, r2, r1
 8005fb8:	6022      	streq	r2, [r4, #0]
 8005fba:	6004      	str	r4, [r0, #0]
 8005fbc:	e7ec      	b.n	8005f98 <_free_r+0x24>
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	b10a      	cbz	r2, 8005fc8 <_free_r+0x54>
 8005fc4:	42a2      	cmp	r2, r4
 8005fc6:	d9fa      	bls.n	8005fbe <_free_r+0x4a>
 8005fc8:	6819      	ldr	r1, [r3, #0]
 8005fca:	1858      	adds	r0, r3, r1
 8005fcc:	42a0      	cmp	r0, r4
 8005fce:	d10b      	bne.n	8005fe8 <_free_r+0x74>
 8005fd0:	6820      	ldr	r0, [r4, #0]
 8005fd2:	4401      	add	r1, r0
 8005fd4:	1858      	adds	r0, r3, r1
 8005fd6:	4282      	cmp	r2, r0
 8005fd8:	6019      	str	r1, [r3, #0]
 8005fda:	d1dd      	bne.n	8005f98 <_free_r+0x24>
 8005fdc:	6810      	ldr	r0, [r2, #0]
 8005fde:	6852      	ldr	r2, [r2, #4]
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	4401      	add	r1, r0
 8005fe4:	6019      	str	r1, [r3, #0]
 8005fe6:	e7d7      	b.n	8005f98 <_free_r+0x24>
 8005fe8:	d902      	bls.n	8005ff0 <_free_r+0x7c>
 8005fea:	230c      	movs	r3, #12
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	e7d3      	b.n	8005f98 <_free_r+0x24>
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	1821      	adds	r1, r4, r0
 8005ff4:	428a      	cmp	r2, r1
 8005ff6:	bf04      	itt	eq
 8005ff8:	6811      	ldreq	r1, [r2, #0]
 8005ffa:	6852      	ldreq	r2, [r2, #4]
 8005ffc:	6062      	str	r2, [r4, #4]
 8005ffe:	bf04      	itt	eq
 8006000:	1809      	addeq	r1, r1, r0
 8006002:	6021      	streq	r1, [r4, #0]
 8006004:	605c      	str	r4, [r3, #4]
 8006006:	e7c7      	b.n	8005f98 <_free_r+0x24>
 8006008:	bd38      	pop	{r3, r4, r5, pc}
 800600a:	bf00      	nop
 800600c:	200025e0 	.word	0x200025e0

08006010 <_malloc_r>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	1ccd      	adds	r5, r1, #3
 8006014:	f025 0503 	bic.w	r5, r5, #3
 8006018:	3508      	adds	r5, #8
 800601a:	2d0c      	cmp	r5, #12
 800601c:	bf38      	it	cc
 800601e:	250c      	movcc	r5, #12
 8006020:	2d00      	cmp	r5, #0
 8006022:	4606      	mov	r6, r0
 8006024:	db01      	blt.n	800602a <_malloc_r+0x1a>
 8006026:	42a9      	cmp	r1, r5
 8006028:	d903      	bls.n	8006032 <_malloc_r+0x22>
 800602a:	230c      	movs	r3, #12
 800602c:	6033      	str	r3, [r6, #0]
 800602e:	2000      	movs	r0, #0
 8006030:	bd70      	pop	{r4, r5, r6, pc}
 8006032:	f001 fe21 	bl	8007c78 <__malloc_lock>
 8006036:	4a21      	ldr	r2, [pc, #132]	; (80060bc <_malloc_r+0xac>)
 8006038:	6814      	ldr	r4, [r2, #0]
 800603a:	4621      	mov	r1, r4
 800603c:	b991      	cbnz	r1, 8006064 <_malloc_r+0x54>
 800603e:	4c20      	ldr	r4, [pc, #128]	; (80060c0 <_malloc_r+0xb0>)
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	b91b      	cbnz	r3, 800604c <_malloc_r+0x3c>
 8006044:	4630      	mov	r0, r6
 8006046:	f000 fd15 	bl	8006a74 <_sbrk_r>
 800604a:	6020      	str	r0, [r4, #0]
 800604c:	4629      	mov	r1, r5
 800604e:	4630      	mov	r0, r6
 8006050:	f000 fd10 	bl	8006a74 <_sbrk_r>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d124      	bne.n	80060a2 <_malloc_r+0x92>
 8006058:	230c      	movs	r3, #12
 800605a:	6033      	str	r3, [r6, #0]
 800605c:	4630      	mov	r0, r6
 800605e:	f001 fe0c 	bl	8007c7a <__malloc_unlock>
 8006062:	e7e4      	b.n	800602e <_malloc_r+0x1e>
 8006064:	680b      	ldr	r3, [r1, #0]
 8006066:	1b5b      	subs	r3, r3, r5
 8006068:	d418      	bmi.n	800609c <_malloc_r+0x8c>
 800606a:	2b0b      	cmp	r3, #11
 800606c:	d90f      	bls.n	800608e <_malloc_r+0x7e>
 800606e:	600b      	str	r3, [r1, #0]
 8006070:	50cd      	str	r5, [r1, r3]
 8006072:	18cc      	adds	r4, r1, r3
 8006074:	4630      	mov	r0, r6
 8006076:	f001 fe00 	bl	8007c7a <__malloc_unlock>
 800607a:	f104 000b 	add.w	r0, r4, #11
 800607e:	1d23      	adds	r3, r4, #4
 8006080:	f020 0007 	bic.w	r0, r0, #7
 8006084:	1ac3      	subs	r3, r0, r3
 8006086:	d0d3      	beq.n	8006030 <_malloc_r+0x20>
 8006088:	425a      	negs	r2, r3
 800608a:	50e2      	str	r2, [r4, r3]
 800608c:	e7d0      	b.n	8006030 <_malloc_r+0x20>
 800608e:	428c      	cmp	r4, r1
 8006090:	684b      	ldr	r3, [r1, #4]
 8006092:	bf16      	itet	ne
 8006094:	6063      	strne	r3, [r4, #4]
 8006096:	6013      	streq	r3, [r2, #0]
 8006098:	460c      	movne	r4, r1
 800609a:	e7eb      	b.n	8006074 <_malloc_r+0x64>
 800609c:	460c      	mov	r4, r1
 800609e:	6849      	ldr	r1, [r1, #4]
 80060a0:	e7cc      	b.n	800603c <_malloc_r+0x2c>
 80060a2:	1cc4      	adds	r4, r0, #3
 80060a4:	f024 0403 	bic.w	r4, r4, #3
 80060a8:	42a0      	cmp	r0, r4
 80060aa:	d005      	beq.n	80060b8 <_malloc_r+0xa8>
 80060ac:	1a21      	subs	r1, r4, r0
 80060ae:	4630      	mov	r0, r6
 80060b0:	f000 fce0 	bl	8006a74 <_sbrk_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d0cf      	beq.n	8006058 <_malloc_r+0x48>
 80060b8:	6025      	str	r5, [r4, #0]
 80060ba:	e7db      	b.n	8006074 <_malloc_r+0x64>
 80060bc:	200025e0 	.word	0x200025e0
 80060c0:	200025e4 	.word	0x200025e4

080060c4 <__cvt>:
 80060c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	ec55 4b10 	vmov	r4, r5, d0
 80060cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80060ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80060d2:	2d00      	cmp	r5, #0
 80060d4:	460e      	mov	r6, r1
 80060d6:	4691      	mov	r9, r2
 80060d8:	4619      	mov	r1, r3
 80060da:	bfb8      	it	lt
 80060dc:	4622      	movlt	r2, r4
 80060de:	462b      	mov	r3, r5
 80060e0:	f027 0720 	bic.w	r7, r7, #32
 80060e4:	bfbb      	ittet	lt
 80060e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80060ea:	461d      	movlt	r5, r3
 80060ec:	2300      	movge	r3, #0
 80060ee:	232d      	movlt	r3, #45	; 0x2d
 80060f0:	bfb8      	it	lt
 80060f2:	4614      	movlt	r4, r2
 80060f4:	2f46      	cmp	r7, #70	; 0x46
 80060f6:	700b      	strb	r3, [r1, #0]
 80060f8:	d004      	beq.n	8006104 <__cvt+0x40>
 80060fa:	2f45      	cmp	r7, #69	; 0x45
 80060fc:	d100      	bne.n	8006100 <__cvt+0x3c>
 80060fe:	3601      	adds	r6, #1
 8006100:	2102      	movs	r1, #2
 8006102:	e000      	b.n	8006106 <__cvt+0x42>
 8006104:	2103      	movs	r1, #3
 8006106:	ab03      	add	r3, sp, #12
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	ab02      	add	r3, sp, #8
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	4632      	mov	r2, r6
 8006110:	4653      	mov	r3, sl
 8006112:	ec45 4b10 	vmov	d0, r4, r5
 8006116:	f000 fe0b 	bl	8006d30 <_dtoa_r>
 800611a:	2f47      	cmp	r7, #71	; 0x47
 800611c:	4680      	mov	r8, r0
 800611e:	d102      	bne.n	8006126 <__cvt+0x62>
 8006120:	f019 0f01 	tst.w	r9, #1
 8006124:	d026      	beq.n	8006174 <__cvt+0xb0>
 8006126:	2f46      	cmp	r7, #70	; 0x46
 8006128:	eb08 0906 	add.w	r9, r8, r6
 800612c:	d111      	bne.n	8006152 <__cvt+0x8e>
 800612e:	f898 3000 	ldrb.w	r3, [r8]
 8006132:	2b30      	cmp	r3, #48	; 0x30
 8006134:	d10a      	bne.n	800614c <__cvt+0x88>
 8006136:	2200      	movs	r2, #0
 8006138:	2300      	movs	r3, #0
 800613a:	4620      	mov	r0, r4
 800613c:	4629      	mov	r1, r5
 800613e:	f7fa fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006142:	b918      	cbnz	r0, 800614c <__cvt+0x88>
 8006144:	f1c6 0601 	rsb	r6, r6, #1
 8006148:	f8ca 6000 	str.w	r6, [sl]
 800614c:	f8da 3000 	ldr.w	r3, [sl]
 8006150:	4499      	add	r9, r3
 8006152:	2200      	movs	r2, #0
 8006154:	2300      	movs	r3, #0
 8006156:	4620      	mov	r0, r4
 8006158:	4629      	mov	r1, r5
 800615a:	f7fa fcbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800615e:	b938      	cbnz	r0, 8006170 <__cvt+0xac>
 8006160:	2230      	movs	r2, #48	; 0x30
 8006162:	9b03      	ldr	r3, [sp, #12]
 8006164:	454b      	cmp	r3, r9
 8006166:	d205      	bcs.n	8006174 <__cvt+0xb0>
 8006168:	1c59      	adds	r1, r3, #1
 800616a:	9103      	str	r1, [sp, #12]
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e7f8      	b.n	8006162 <__cvt+0x9e>
 8006170:	f8cd 900c 	str.w	r9, [sp, #12]
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006178:	eba3 0308 	sub.w	r3, r3, r8
 800617c:	4640      	mov	r0, r8
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	b004      	add	sp, #16
 8006182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006186 <__exponent>:
 8006186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006188:	2900      	cmp	r1, #0
 800618a:	4604      	mov	r4, r0
 800618c:	bfba      	itte	lt
 800618e:	4249      	neglt	r1, r1
 8006190:	232d      	movlt	r3, #45	; 0x2d
 8006192:	232b      	movge	r3, #43	; 0x2b
 8006194:	2909      	cmp	r1, #9
 8006196:	f804 2b02 	strb.w	r2, [r4], #2
 800619a:	7043      	strb	r3, [r0, #1]
 800619c:	dd20      	ble.n	80061e0 <__exponent+0x5a>
 800619e:	f10d 0307 	add.w	r3, sp, #7
 80061a2:	461f      	mov	r7, r3
 80061a4:	260a      	movs	r6, #10
 80061a6:	fb91 f5f6 	sdiv	r5, r1, r6
 80061aa:	fb06 1115 	mls	r1, r6, r5, r1
 80061ae:	3130      	adds	r1, #48	; 0x30
 80061b0:	2d09      	cmp	r5, #9
 80061b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80061b6:	f103 32ff 	add.w	r2, r3, #4294967295
 80061ba:	4629      	mov	r1, r5
 80061bc:	dc09      	bgt.n	80061d2 <__exponent+0x4c>
 80061be:	3130      	adds	r1, #48	; 0x30
 80061c0:	3b02      	subs	r3, #2
 80061c2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80061c6:	42bb      	cmp	r3, r7
 80061c8:	4622      	mov	r2, r4
 80061ca:	d304      	bcc.n	80061d6 <__exponent+0x50>
 80061cc:	1a10      	subs	r0, r2, r0
 80061ce:	b003      	add	sp, #12
 80061d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d2:	4613      	mov	r3, r2
 80061d4:	e7e7      	b.n	80061a6 <__exponent+0x20>
 80061d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061da:	f804 2b01 	strb.w	r2, [r4], #1
 80061de:	e7f2      	b.n	80061c6 <__exponent+0x40>
 80061e0:	2330      	movs	r3, #48	; 0x30
 80061e2:	4419      	add	r1, r3
 80061e4:	7083      	strb	r3, [r0, #2]
 80061e6:	1d02      	adds	r2, r0, #4
 80061e8:	70c1      	strb	r1, [r0, #3]
 80061ea:	e7ef      	b.n	80061cc <__exponent+0x46>

080061ec <_printf_float>:
 80061ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f0:	b08d      	sub	sp, #52	; 0x34
 80061f2:	460c      	mov	r4, r1
 80061f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80061f8:	4616      	mov	r6, r2
 80061fa:	461f      	mov	r7, r3
 80061fc:	4605      	mov	r5, r0
 80061fe:	f001 fcc9 	bl	8007b94 <_localeconv_r>
 8006202:	6803      	ldr	r3, [r0, #0]
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	4618      	mov	r0, r3
 8006208:	f7f9 ffea 	bl	80001e0 <strlen>
 800620c:	2300      	movs	r3, #0
 800620e:	930a      	str	r3, [sp, #40]	; 0x28
 8006210:	f8d8 3000 	ldr.w	r3, [r8]
 8006214:	9005      	str	r0, [sp, #20]
 8006216:	3307      	adds	r3, #7
 8006218:	f023 0307 	bic.w	r3, r3, #7
 800621c:	f103 0208 	add.w	r2, r3, #8
 8006220:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006224:	f8d4 b000 	ldr.w	fp, [r4]
 8006228:	f8c8 2000 	str.w	r2, [r8]
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006234:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006238:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800623c:	9307      	str	r3, [sp, #28]
 800623e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	4ba7      	ldr	r3, [pc, #668]	; (80064e4 <_printf_float+0x2f8>)
 8006248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800624c:	f7fa fc76 	bl	8000b3c <__aeabi_dcmpun>
 8006250:	bb70      	cbnz	r0, 80062b0 <_printf_float+0xc4>
 8006252:	f04f 32ff 	mov.w	r2, #4294967295
 8006256:	4ba3      	ldr	r3, [pc, #652]	; (80064e4 <_printf_float+0x2f8>)
 8006258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800625c:	f7fa fc50 	bl	8000b00 <__aeabi_dcmple>
 8006260:	bb30      	cbnz	r0, 80062b0 <_printf_float+0xc4>
 8006262:	2200      	movs	r2, #0
 8006264:	2300      	movs	r3, #0
 8006266:	4640      	mov	r0, r8
 8006268:	4649      	mov	r1, r9
 800626a:	f7fa fc3f 	bl	8000aec <__aeabi_dcmplt>
 800626e:	b110      	cbz	r0, 8006276 <_printf_float+0x8a>
 8006270:	232d      	movs	r3, #45	; 0x2d
 8006272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006276:	4a9c      	ldr	r2, [pc, #624]	; (80064e8 <_printf_float+0x2fc>)
 8006278:	4b9c      	ldr	r3, [pc, #624]	; (80064ec <_printf_float+0x300>)
 800627a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800627e:	bf8c      	ite	hi
 8006280:	4690      	movhi	r8, r2
 8006282:	4698      	movls	r8, r3
 8006284:	2303      	movs	r3, #3
 8006286:	f02b 0204 	bic.w	r2, fp, #4
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	6022      	str	r2, [r4, #0]
 800628e:	f04f 0900 	mov.w	r9, #0
 8006292:	9700      	str	r7, [sp, #0]
 8006294:	4633      	mov	r3, r6
 8006296:	aa0b      	add	r2, sp, #44	; 0x2c
 8006298:	4621      	mov	r1, r4
 800629a:	4628      	mov	r0, r5
 800629c:	f000 f9e6 	bl	800666c <_printf_common>
 80062a0:	3001      	adds	r0, #1
 80062a2:	f040 808d 	bne.w	80063c0 <_printf_float+0x1d4>
 80062a6:	f04f 30ff 	mov.w	r0, #4294967295
 80062aa:	b00d      	add	sp, #52	; 0x34
 80062ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	4640      	mov	r0, r8
 80062b6:	4649      	mov	r1, r9
 80062b8:	f7fa fc40 	bl	8000b3c <__aeabi_dcmpun>
 80062bc:	b110      	cbz	r0, 80062c4 <_printf_float+0xd8>
 80062be:	4a8c      	ldr	r2, [pc, #560]	; (80064f0 <_printf_float+0x304>)
 80062c0:	4b8c      	ldr	r3, [pc, #560]	; (80064f4 <_printf_float+0x308>)
 80062c2:	e7da      	b.n	800627a <_printf_float+0x8e>
 80062c4:	6861      	ldr	r1, [r4, #4]
 80062c6:	1c4b      	adds	r3, r1, #1
 80062c8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80062cc:	a80a      	add	r0, sp, #40	; 0x28
 80062ce:	d13e      	bne.n	800634e <_printf_float+0x162>
 80062d0:	2306      	movs	r3, #6
 80062d2:	6063      	str	r3, [r4, #4]
 80062d4:	2300      	movs	r3, #0
 80062d6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80062da:	ab09      	add	r3, sp, #36	; 0x24
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	ec49 8b10 	vmov	d0, r8, r9
 80062e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062e6:	6022      	str	r2, [r4, #0]
 80062e8:	f8cd a004 	str.w	sl, [sp, #4]
 80062ec:	6861      	ldr	r1, [r4, #4]
 80062ee:	4628      	mov	r0, r5
 80062f0:	f7ff fee8 	bl	80060c4 <__cvt>
 80062f4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80062f8:	2b47      	cmp	r3, #71	; 0x47
 80062fa:	4680      	mov	r8, r0
 80062fc:	d109      	bne.n	8006312 <_printf_float+0x126>
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	1cd8      	adds	r0, r3, #3
 8006302:	db02      	blt.n	800630a <_printf_float+0x11e>
 8006304:	6862      	ldr	r2, [r4, #4]
 8006306:	4293      	cmp	r3, r2
 8006308:	dd47      	ble.n	800639a <_printf_float+0x1ae>
 800630a:	f1aa 0a02 	sub.w	sl, sl, #2
 800630e:	fa5f fa8a 	uxtb.w	sl, sl
 8006312:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006316:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006318:	d824      	bhi.n	8006364 <_printf_float+0x178>
 800631a:	3901      	subs	r1, #1
 800631c:	4652      	mov	r2, sl
 800631e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006322:	9109      	str	r1, [sp, #36]	; 0x24
 8006324:	f7ff ff2f 	bl	8006186 <__exponent>
 8006328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800632a:	1813      	adds	r3, r2, r0
 800632c:	2a01      	cmp	r2, #1
 800632e:	4681      	mov	r9, r0
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	dc02      	bgt.n	800633a <_printf_float+0x14e>
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	07d1      	lsls	r1, r2, #31
 8006338:	d501      	bpl.n	800633e <_printf_float+0x152>
 800633a:	3301      	adds	r3, #1
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0a5      	beq.n	8006292 <_printf_float+0xa6>
 8006346:	232d      	movs	r3, #45	; 0x2d
 8006348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800634c:	e7a1      	b.n	8006292 <_printf_float+0xa6>
 800634e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006352:	f000 8177 	beq.w	8006644 <_printf_float+0x458>
 8006356:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800635a:	d1bb      	bne.n	80062d4 <_printf_float+0xe8>
 800635c:	2900      	cmp	r1, #0
 800635e:	d1b9      	bne.n	80062d4 <_printf_float+0xe8>
 8006360:	2301      	movs	r3, #1
 8006362:	e7b6      	b.n	80062d2 <_printf_float+0xe6>
 8006364:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006368:	d119      	bne.n	800639e <_printf_float+0x1b2>
 800636a:	2900      	cmp	r1, #0
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	dd0c      	ble.n	800638a <_printf_float+0x19e>
 8006370:	6121      	str	r1, [r4, #16]
 8006372:	b913      	cbnz	r3, 800637a <_printf_float+0x18e>
 8006374:	6822      	ldr	r2, [r4, #0]
 8006376:	07d2      	lsls	r2, r2, #31
 8006378:	d502      	bpl.n	8006380 <_printf_float+0x194>
 800637a:	3301      	adds	r3, #1
 800637c:	440b      	add	r3, r1
 800637e:	6123      	str	r3, [r4, #16]
 8006380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006382:	65a3      	str	r3, [r4, #88]	; 0x58
 8006384:	f04f 0900 	mov.w	r9, #0
 8006388:	e7d9      	b.n	800633e <_printf_float+0x152>
 800638a:	b913      	cbnz	r3, 8006392 <_printf_float+0x1a6>
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	07d0      	lsls	r0, r2, #31
 8006390:	d501      	bpl.n	8006396 <_printf_float+0x1aa>
 8006392:	3302      	adds	r3, #2
 8006394:	e7f3      	b.n	800637e <_printf_float+0x192>
 8006396:	2301      	movs	r3, #1
 8006398:	e7f1      	b.n	800637e <_printf_float+0x192>
 800639a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800639e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063a2:	4293      	cmp	r3, r2
 80063a4:	db05      	blt.n	80063b2 <_printf_float+0x1c6>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	07d1      	lsls	r1, r2, #31
 80063ac:	d5e8      	bpl.n	8006380 <_printf_float+0x194>
 80063ae:	3301      	adds	r3, #1
 80063b0:	e7e5      	b.n	800637e <_printf_float+0x192>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bfd4      	ite	le
 80063b6:	f1c3 0302 	rsble	r3, r3, #2
 80063ba:	2301      	movgt	r3, #1
 80063bc:	4413      	add	r3, r2
 80063be:	e7de      	b.n	800637e <_printf_float+0x192>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	055a      	lsls	r2, r3, #21
 80063c4:	d407      	bmi.n	80063d6 <_printf_float+0x1ea>
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	4642      	mov	r2, r8
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	d12b      	bne.n	800642c <_printf_float+0x240>
 80063d4:	e767      	b.n	80062a6 <_printf_float+0xba>
 80063d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80063da:	f240 80dc 	bls.w	8006596 <_printf_float+0x3aa>
 80063de:	2200      	movs	r2, #0
 80063e0:	2300      	movs	r3, #0
 80063e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063e6:	f7fa fb77 	bl	8000ad8 <__aeabi_dcmpeq>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d033      	beq.n	8006456 <_printf_float+0x26a>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4a41      	ldr	r2, [pc, #260]	; (80064f8 <_printf_float+0x30c>)
 80063f2:	4631      	mov	r1, r6
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	f43f af54 	beq.w	80062a6 <_printf_float+0xba>
 80063fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006402:	429a      	cmp	r2, r3
 8006404:	db02      	blt.n	800640c <_printf_float+0x220>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	07d8      	lsls	r0, r3, #31
 800640a:	d50f      	bpl.n	800642c <_printf_float+0x240>
 800640c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006410:	4631      	mov	r1, r6
 8006412:	4628      	mov	r0, r5
 8006414:	47b8      	blx	r7
 8006416:	3001      	adds	r0, #1
 8006418:	f43f af45 	beq.w	80062a6 <_printf_float+0xba>
 800641c:	f04f 0800 	mov.w	r8, #0
 8006420:	f104 091a 	add.w	r9, r4, #26
 8006424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006426:	3b01      	subs	r3, #1
 8006428:	4543      	cmp	r3, r8
 800642a:	dc09      	bgt.n	8006440 <_printf_float+0x254>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	079b      	lsls	r3, r3, #30
 8006430:	f100 8103 	bmi.w	800663a <_printf_float+0x44e>
 8006434:	68e0      	ldr	r0, [r4, #12]
 8006436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006438:	4298      	cmp	r0, r3
 800643a:	bfb8      	it	lt
 800643c:	4618      	movlt	r0, r3
 800643e:	e734      	b.n	80062aa <_printf_float+0xbe>
 8006440:	2301      	movs	r3, #1
 8006442:	464a      	mov	r2, r9
 8006444:	4631      	mov	r1, r6
 8006446:	4628      	mov	r0, r5
 8006448:	47b8      	blx	r7
 800644a:	3001      	adds	r0, #1
 800644c:	f43f af2b 	beq.w	80062a6 <_printf_float+0xba>
 8006450:	f108 0801 	add.w	r8, r8, #1
 8006454:	e7e6      	b.n	8006424 <_printf_float+0x238>
 8006456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	dc2b      	bgt.n	80064b4 <_printf_float+0x2c8>
 800645c:	2301      	movs	r3, #1
 800645e:	4a26      	ldr	r2, [pc, #152]	; (80064f8 <_printf_float+0x30c>)
 8006460:	4631      	mov	r1, r6
 8006462:	4628      	mov	r0, r5
 8006464:	47b8      	blx	r7
 8006466:	3001      	adds	r0, #1
 8006468:	f43f af1d 	beq.w	80062a6 <_printf_float+0xba>
 800646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646e:	b923      	cbnz	r3, 800647a <_printf_float+0x28e>
 8006470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006472:	b913      	cbnz	r3, 800647a <_printf_float+0x28e>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	07d9      	lsls	r1, r3, #31
 8006478:	d5d8      	bpl.n	800642c <_printf_float+0x240>
 800647a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f af0e 	beq.w	80062a6 <_printf_float+0xba>
 800648a:	f04f 0900 	mov.w	r9, #0
 800648e:	f104 0a1a 	add.w	sl, r4, #26
 8006492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006494:	425b      	negs	r3, r3
 8006496:	454b      	cmp	r3, r9
 8006498:	dc01      	bgt.n	800649e <_printf_float+0x2b2>
 800649a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649c:	e794      	b.n	80063c8 <_printf_float+0x1dc>
 800649e:	2301      	movs	r3, #1
 80064a0:	4652      	mov	r2, sl
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b8      	blx	r7
 80064a8:	3001      	adds	r0, #1
 80064aa:	f43f aefc 	beq.w	80062a6 <_printf_float+0xba>
 80064ae:	f109 0901 	add.w	r9, r9, #1
 80064b2:	e7ee      	b.n	8006492 <_printf_float+0x2a6>
 80064b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064b8:	429a      	cmp	r2, r3
 80064ba:	bfa8      	it	ge
 80064bc:	461a      	movge	r2, r3
 80064be:	2a00      	cmp	r2, #0
 80064c0:	4691      	mov	r9, r2
 80064c2:	dd07      	ble.n	80064d4 <_printf_float+0x2e8>
 80064c4:	4613      	mov	r3, r2
 80064c6:	4631      	mov	r1, r6
 80064c8:	4642      	mov	r2, r8
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	f43f aee9 	beq.w	80062a6 <_printf_float+0xba>
 80064d4:	f104 031a 	add.w	r3, r4, #26
 80064d8:	f04f 0b00 	mov.w	fp, #0
 80064dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064e0:	9306      	str	r3, [sp, #24]
 80064e2:	e015      	b.n	8006510 <_printf_float+0x324>
 80064e4:	7fefffff 	.word	0x7fefffff
 80064e8:	0807a224 	.word	0x0807a224
 80064ec:	0807a220 	.word	0x0807a220
 80064f0:	0807a22c 	.word	0x0807a22c
 80064f4:	0807a228 	.word	0x0807a228
 80064f8:	0807a230 	.word	0x0807a230
 80064fc:	2301      	movs	r3, #1
 80064fe:	9a06      	ldr	r2, [sp, #24]
 8006500:	4631      	mov	r1, r6
 8006502:	4628      	mov	r0, r5
 8006504:	47b8      	blx	r7
 8006506:	3001      	adds	r0, #1
 8006508:	f43f aecd 	beq.w	80062a6 <_printf_float+0xba>
 800650c:	f10b 0b01 	add.w	fp, fp, #1
 8006510:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006514:	ebaa 0309 	sub.w	r3, sl, r9
 8006518:	455b      	cmp	r3, fp
 800651a:	dcef      	bgt.n	80064fc <_printf_float+0x310>
 800651c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006520:	429a      	cmp	r2, r3
 8006522:	44d0      	add	r8, sl
 8006524:	db15      	blt.n	8006552 <_printf_float+0x366>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	07da      	lsls	r2, r3, #31
 800652a:	d412      	bmi.n	8006552 <_printf_float+0x366>
 800652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006530:	eba3 020a 	sub.w	r2, r3, sl
 8006534:	eba3 0a01 	sub.w	sl, r3, r1
 8006538:	4592      	cmp	sl, r2
 800653a:	bfa8      	it	ge
 800653c:	4692      	movge	sl, r2
 800653e:	f1ba 0f00 	cmp.w	sl, #0
 8006542:	dc0e      	bgt.n	8006562 <_printf_float+0x376>
 8006544:	f04f 0800 	mov.w	r8, #0
 8006548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800654c:	f104 091a 	add.w	r9, r4, #26
 8006550:	e019      	b.n	8006586 <_printf_float+0x39a>
 8006552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	d1e5      	bne.n	800652c <_printf_float+0x340>
 8006560:	e6a1      	b.n	80062a6 <_printf_float+0xba>
 8006562:	4653      	mov	r3, sl
 8006564:	4642      	mov	r2, r8
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	d1e9      	bne.n	8006544 <_printf_float+0x358>
 8006570:	e699      	b.n	80062a6 <_printf_float+0xba>
 8006572:	2301      	movs	r3, #1
 8006574:	464a      	mov	r2, r9
 8006576:	4631      	mov	r1, r6
 8006578:	4628      	mov	r0, r5
 800657a:	47b8      	blx	r7
 800657c:	3001      	adds	r0, #1
 800657e:	f43f ae92 	beq.w	80062a6 <_printf_float+0xba>
 8006582:	f108 0801 	add.w	r8, r8, #1
 8006586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	eba3 030a 	sub.w	r3, r3, sl
 8006590:	4543      	cmp	r3, r8
 8006592:	dcee      	bgt.n	8006572 <_printf_float+0x386>
 8006594:	e74a      	b.n	800642c <_printf_float+0x240>
 8006596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006598:	2a01      	cmp	r2, #1
 800659a:	dc01      	bgt.n	80065a0 <_printf_float+0x3b4>
 800659c:	07db      	lsls	r3, r3, #31
 800659e:	d53a      	bpl.n	8006616 <_printf_float+0x42a>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4642      	mov	r2, r8
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	f43f ae7b 	beq.w	80062a6 <_printf_float+0xba>
 80065b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065b4:	4631      	mov	r1, r6
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b8      	blx	r7
 80065ba:	3001      	adds	r0, #1
 80065bc:	f108 0801 	add.w	r8, r8, #1
 80065c0:	f43f ae71 	beq.w	80062a6 <_printf_float+0xba>
 80065c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c6:	2200      	movs	r2, #0
 80065c8:	f103 3aff 	add.w	sl, r3, #4294967295
 80065cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065d0:	2300      	movs	r3, #0
 80065d2:	f7fa fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d6:	b9c8      	cbnz	r0, 800660c <_printf_float+0x420>
 80065d8:	4653      	mov	r3, sl
 80065da:	4642      	mov	r2, r8
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	d10e      	bne.n	8006604 <_printf_float+0x418>
 80065e6:	e65e      	b.n	80062a6 <_printf_float+0xba>
 80065e8:	2301      	movs	r3, #1
 80065ea:	4652      	mov	r2, sl
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	f43f ae57 	beq.w	80062a6 <_printf_float+0xba>
 80065f8:	f108 0801 	add.w	r8, r8, #1
 80065fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fe:	3b01      	subs	r3, #1
 8006600:	4543      	cmp	r3, r8
 8006602:	dcf1      	bgt.n	80065e8 <_printf_float+0x3fc>
 8006604:	464b      	mov	r3, r9
 8006606:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800660a:	e6de      	b.n	80063ca <_printf_float+0x1de>
 800660c:	f04f 0800 	mov.w	r8, #0
 8006610:	f104 0a1a 	add.w	sl, r4, #26
 8006614:	e7f2      	b.n	80065fc <_printf_float+0x410>
 8006616:	2301      	movs	r3, #1
 8006618:	e7df      	b.n	80065da <_printf_float+0x3ee>
 800661a:	2301      	movs	r3, #1
 800661c:	464a      	mov	r2, r9
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	f43f ae3e 	beq.w	80062a6 <_printf_float+0xba>
 800662a:	f108 0801 	add.w	r8, r8, #1
 800662e:	68e3      	ldr	r3, [r4, #12]
 8006630:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006632:	1a9b      	subs	r3, r3, r2
 8006634:	4543      	cmp	r3, r8
 8006636:	dcf0      	bgt.n	800661a <_printf_float+0x42e>
 8006638:	e6fc      	b.n	8006434 <_printf_float+0x248>
 800663a:	f04f 0800 	mov.w	r8, #0
 800663e:	f104 0919 	add.w	r9, r4, #25
 8006642:	e7f4      	b.n	800662e <_printf_float+0x442>
 8006644:	2900      	cmp	r1, #0
 8006646:	f43f ae8b 	beq.w	8006360 <_printf_float+0x174>
 800664a:	2300      	movs	r3, #0
 800664c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006650:	ab09      	add	r3, sp, #36	; 0x24
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	ec49 8b10 	vmov	d0, r8, r9
 8006658:	6022      	str	r2, [r4, #0]
 800665a:	f8cd a004 	str.w	sl, [sp, #4]
 800665e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006662:	4628      	mov	r0, r5
 8006664:	f7ff fd2e 	bl	80060c4 <__cvt>
 8006668:	4680      	mov	r8, r0
 800666a:	e648      	b.n	80062fe <_printf_float+0x112>

0800666c <_printf_common>:
 800666c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006670:	4691      	mov	r9, r2
 8006672:	461f      	mov	r7, r3
 8006674:	688a      	ldr	r2, [r1, #8]
 8006676:	690b      	ldr	r3, [r1, #16]
 8006678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800667c:	4293      	cmp	r3, r2
 800667e:	bfb8      	it	lt
 8006680:	4613      	movlt	r3, r2
 8006682:	f8c9 3000 	str.w	r3, [r9]
 8006686:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800668a:	4606      	mov	r6, r0
 800668c:	460c      	mov	r4, r1
 800668e:	b112      	cbz	r2, 8006696 <_printf_common+0x2a>
 8006690:	3301      	adds	r3, #1
 8006692:	f8c9 3000 	str.w	r3, [r9]
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	0699      	lsls	r1, r3, #26
 800669a:	bf42      	ittt	mi
 800669c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066a0:	3302      	addmi	r3, #2
 80066a2:	f8c9 3000 	strmi.w	r3, [r9]
 80066a6:	6825      	ldr	r5, [r4, #0]
 80066a8:	f015 0506 	ands.w	r5, r5, #6
 80066ac:	d107      	bne.n	80066be <_printf_common+0x52>
 80066ae:	f104 0a19 	add.w	sl, r4, #25
 80066b2:	68e3      	ldr	r3, [r4, #12]
 80066b4:	f8d9 2000 	ldr.w	r2, [r9]
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	42ab      	cmp	r3, r5
 80066bc:	dc28      	bgt.n	8006710 <_printf_common+0xa4>
 80066be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	3300      	adds	r3, #0
 80066c6:	bf18      	it	ne
 80066c8:	2301      	movne	r3, #1
 80066ca:	0692      	lsls	r2, r2, #26
 80066cc:	d42d      	bmi.n	800672a <_printf_common+0xbe>
 80066ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066d2:	4639      	mov	r1, r7
 80066d4:	4630      	mov	r0, r6
 80066d6:	47c0      	blx	r8
 80066d8:	3001      	adds	r0, #1
 80066da:	d020      	beq.n	800671e <_printf_common+0xb2>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	68e5      	ldr	r5, [r4, #12]
 80066e0:	f8d9 2000 	ldr.w	r2, [r9]
 80066e4:	f003 0306 	and.w	r3, r3, #6
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	bf08      	it	eq
 80066ec:	1aad      	subeq	r5, r5, r2
 80066ee:	68a3      	ldr	r3, [r4, #8]
 80066f0:	6922      	ldr	r2, [r4, #16]
 80066f2:	bf0c      	ite	eq
 80066f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066f8:	2500      	movne	r5, #0
 80066fa:	4293      	cmp	r3, r2
 80066fc:	bfc4      	itt	gt
 80066fe:	1a9b      	subgt	r3, r3, r2
 8006700:	18ed      	addgt	r5, r5, r3
 8006702:	f04f 0900 	mov.w	r9, #0
 8006706:	341a      	adds	r4, #26
 8006708:	454d      	cmp	r5, r9
 800670a:	d11a      	bne.n	8006742 <_printf_common+0xd6>
 800670c:	2000      	movs	r0, #0
 800670e:	e008      	b.n	8006722 <_printf_common+0xb6>
 8006710:	2301      	movs	r3, #1
 8006712:	4652      	mov	r2, sl
 8006714:	4639      	mov	r1, r7
 8006716:	4630      	mov	r0, r6
 8006718:	47c0      	blx	r8
 800671a:	3001      	adds	r0, #1
 800671c:	d103      	bne.n	8006726 <_printf_common+0xba>
 800671e:	f04f 30ff 	mov.w	r0, #4294967295
 8006722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006726:	3501      	adds	r5, #1
 8006728:	e7c3      	b.n	80066b2 <_printf_common+0x46>
 800672a:	18e1      	adds	r1, r4, r3
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	2030      	movs	r0, #48	; 0x30
 8006730:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006734:	4422      	add	r2, r4
 8006736:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800673a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800673e:	3302      	adds	r3, #2
 8006740:	e7c5      	b.n	80066ce <_printf_common+0x62>
 8006742:	2301      	movs	r3, #1
 8006744:	4622      	mov	r2, r4
 8006746:	4639      	mov	r1, r7
 8006748:	4630      	mov	r0, r6
 800674a:	47c0      	blx	r8
 800674c:	3001      	adds	r0, #1
 800674e:	d0e6      	beq.n	800671e <_printf_common+0xb2>
 8006750:	f109 0901 	add.w	r9, r9, #1
 8006754:	e7d8      	b.n	8006708 <_printf_common+0x9c>
	...

08006758 <_printf_i>:
 8006758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800675c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006760:	460c      	mov	r4, r1
 8006762:	7e09      	ldrb	r1, [r1, #24]
 8006764:	b085      	sub	sp, #20
 8006766:	296e      	cmp	r1, #110	; 0x6e
 8006768:	4617      	mov	r7, r2
 800676a:	4606      	mov	r6, r0
 800676c:	4698      	mov	r8, r3
 800676e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006770:	f000 80b3 	beq.w	80068da <_printf_i+0x182>
 8006774:	d822      	bhi.n	80067bc <_printf_i+0x64>
 8006776:	2963      	cmp	r1, #99	; 0x63
 8006778:	d036      	beq.n	80067e8 <_printf_i+0x90>
 800677a:	d80a      	bhi.n	8006792 <_printf_i+0x3a>
 800677c:	2900      	cmp	r1, #0
 800677e:	f000 80b9 	beq.w	80068f4 <_printf_i+0x19c>
 8006782:	2958      	cmp	r1, #88	; 0x58
 8006784:	f000 8083 	beq.w	800688e <_printf_i+0x136>
 8006788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800678c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006790:	e032      	b.n	80067f8 <_printf_i+0xa0>
 8006792:	2964      	cmp	r1, #100	; 0x64
 8006794:	d001      	beq.n	800679a <_printf_i+0x42>
 8006796:	2969      	cmp	r1, #105	; 0x69
 8006798:	d1f6      	bne.n	8006788 <_printf_i+0x30>
 800679a:	6820      	ldr	r0, [r4, #0]
 800679c:	6813      	ldr	r3, [r2, #0]
 800679e:	0605      	lsls	r5, r0, #24
 80067a0:	f103 0104 	add.w	r1, r3, #4
 80067a4:	d52a      	bpl.n	80067fc <_printf_i+0xa4>
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6011      	str	r1, [r2, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da03      	bge.n	80067b6 <_printf_i+0x5e>
 80067ae:	222d      	movs	r2, #45	; 0x2d
 80067b0:	425b      	negs	r3, r3
 80067b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067b6:	486f      	ldr	r0, [pc, #444]	; (8006974 <_printf_i+0x21c>)
 80067b8:	220a      	movs	r2, #10
 80067ba:	e039      	b.n	8006830 <_printf_i+0xd8>
 80067bc:	2973      	cmp	r1, #115	; 0x73
 80067be:	f000 809d 	beq.w	80068fc <_printf_i+0x1a4>
 80067c2:	d808      	bhi.n	80067d6 <_printf_i+0x7e>
 80067c4:	296f      	cmp	r1, #111	; 0x6f
 80067c6:	d020      	beq.n	800680a <_printf_i+0xb2>
 80067c8:	2970      	cmp	r1, #112	; 0x70
 80067ca:	d1dd      	bne.n	8006788 <_printf_i+0x30>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	f043 0320 	orr.w	r3, r3, #32
 80067d2:	6023      	str	r3, [r4, #0]
 80067d4:	e003      	b.n	80067de <_printf_i+0x86>
 80067d6:	2975      	cmp	r1, #117	; 0x75
 80067d8:	d017      	beq.n	800680a <_printf_i+0xb2>
 80067da:	2978      	cmp	r1, #120	; 0x78
 80067dc:	d1d4      	bne.n	8006788 <_printf_i+0x30>
 80067de:	2378      	movs	r3, #120	; 0x78
 80067e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067e4:	4864      	ldr	r0, [pc, #400]	; (8006978 <_printf_i+0x220>)
 80067e6:	e055      	b.n	8006894 <_printf_i+0x13c>
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	1d19      	adds	r1, r3, #4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6011      	str	r1, [r2, #0]
 80067f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067f8:	2301      	movs	r3, #1
 80067fa:	e08c      	b.n	8006916 <_printf_i+0x1be>
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6011      	str	r1, [r2, #0]
 8006800:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006804:	bf18      	it	ne
 8006806:	b21b      	sxthne	r3, r3
 8006808:	e7cf      	b.n	80067aa <_printf_i+0x52>
 800680a:	6813      	ldr	r3, [r2, #0]
 800680c:	6825      	ldr	r5, [r4, #0]
 800680e:	1d18      	adds	r0, r3, #4
 8006810:	6010      	str	r0, [r2, #0]
 8006812:	0628      	lsls	r0, r5, #24
 8006814:	d501      	bpl.n	800681a <_printf_i+0xc2>
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	e002      	b.n	8006820 <_printf_i+0xc8>
 800681a:	0668      	lsls	r0, r5, #25
 800681c:	d5fb      	bpl.n	8006816 <_printf_i+0xbe>
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	4854      	ldr	r0, [pc, #336]	; (8006974 <_printf_i+0x21c>)
 8006822:	296f      	cmp	r1, #111	; 0x6f
 8006824:	bf14      	ite	ne
 8006826:	220a      	movne	r2, #10
 8006828:	2208      	moveq	r2, #8
 800682a:	2100      	movs	r1, #0
 800682c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006830:	6865      	ldr	r5, [r4, #4]
 8006832:	60a5      	str	r5, [r4, #8]
 8006834:	2d00      	cmp	r5, #0
 8006836:	f2c0 8095 	blt.w	8006964 <_printf_i+0x20c>
 800683a:	6821      	ldr	r1, [r4, #0]
 800683c:	f021 0104 	bic.w	r1, r1, #4
 8006840:	6021      	str	r1, [r4, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d13d      	bne.n	80068c2 <_printf_i+0x16a>
 8006846:	2d00      	cmp	r5, #0
 8006848:	f040 808e 	bne.w	8006968 <_printf_i+0x210>
 800684c:	4665      	mov	r5, ip
 800684e:	2a08      	cmp	r2, #8
 8006850:	d10b      	bne.n	800686a <_printf_i+0x112>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	07db      	lsls	r3, r3, #31
 8006856:	d508      	bpl.n	800686a <_printf_i+0x112>
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	6862      	ldr	r2, [r4, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	bfde      	ittt	le
 8006860:	2330      	movle	r3, #48	; 0x30
 8006862:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800686a:	ebac 0305 	sub.w	r3, ip, r5
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	f8cd 8000 	str.w	r8, [sp]
 8006874:	463b      	mov	r3, r7
 8006876:	aa03      	add	r2, sp, #12
 8006878:	4621      	mov	r1, r4
 800687a:	4630      	mov	r0, r6
 800687c:	f7ff fef6 	bl	800666c <_printf_common>
 8006880:	3001      	adds	r0, #1
 8006882:	d14d      	bne.n	8006920 <_printf_i+0x1c8>
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	b005      	add	sp, #20
 800688a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800688e:	4839      	ldr	r0, [pc, #228]	; (8006974 <_printf_i+0x21c>)
 8006890:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006894:	6813      	ldr	r3, [r2, #0]
 8006896:	6821      	ldr	r1, [r4, #0]
 8006898:	1d1d      	adds	r5, r3, #4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6015      	str	r5, [r2, #0]
 800689e:	060a      	lsls	r2, r1, #24
 80068a0:	d50b      	bpl.n	80068ba <_printf_i+0x162>
 80068a2:	07ca      	lsls	r2, r1, #31
 80068a4:	bf44      	itt	mi
 80068a6:	f041 0120 	orrmi.w	r1, r1, #32
 80068aa:	6021      	strmi	r1, [r4, #0]
 80068ac:	b91b      	cbnz	r3, 80068b6 <_printf_i+0x15e>
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	f022 0220 	bic.w	r2, r2, #32
 80068b4:	6022      	str	r2, [r4, #0]
 80068b6:	2210      	movs	r2, #16
 80068b8:	e7b7      	b.n	800682a <_printf_i+0xd2>
 80068ba:	064d      	lsls	r5, r1, #25
 80068bc:	bf48      	it	mi
 80068be:	b29b      	uxthmi	r3, r3
 80068c0:	e7ef      	b.n	80068a2 <_printf_i+0x14a>
 80068c2:	4665      	mov	r5, ip
 80068c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80068c8:	fb02 3311 	mls	r3, r2, r1, r3
 80068cc:	5cc3      	ldrb	r3, [r0, r3]
 80068ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068d2:	460b      	mov	r3, r1
 80068d4:	2900      	cmp	r1, #0
 80068d6:	d1f5      	bne.n	80068c4 <_printf_i+0x16c>
 80068d8:	e7b9      	b.n	800684e <_printf_i+0xf6>
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	6825      	ldr	r5, [r4, #0]
 80068de:	6961      	ldr	r1, [r4, #20]
 80068e0:	1d18      	adds	r0, r3, #4
 80068e2:	6010      	str	r0, [r2, #0]
 80068e4:	0628      	lsls	r0, r5, #24
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	d501      	bpl.n	80068ee <_printf_i+0x196>
 80068ea:	6019      	str	r1, [r3, #0]
 80068ec:	e002      	b.n	80068f4 <_printf_i+0x19c>
 80068ee:	066a      	lsls	r2, r5, #25
 80068f0:	d5fb      	bpl.n	80068ea <_printf_i+0x192>
 80068f2:	8019      	strh	r1, [r3, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	6123      	str	r3, [r4, #16]
 80068f8:	4665      	mov	r5, ip
 80068fa:	e7b9      	b.n	8006870 <_printf_i+0x118>
 80068fc:	6813      	ldr	r3, [r2, #0]
 80068fe:	1d19      	adds	r1, r3, #4
 8006900:	6011      	str	r1, [r2, #0]
 8006902:	681d      	ldr	r5, [r3, #0]
 8006904:	6862      	ldr	r2, [r4, #4]
 8006906:	2100      	movs	r1, #0
 8006908:	4628      	mov	r0, r5
 800690a:	f7f9 fc71 	bl	80001f0 <memchr>
 800690e:	b108      	cbz	r0, 8006914 <_printf_i+0x1bc>
 8006910:	1b40      	subs	r0, r0, r5
 8006912:	6060      	str	r0, [r4, #4]
 8006914:	6863      	ldr	r3, [r4, #4]
 8006916:	6123      	str	r3, [r4, #16]
 8006918:	2300      	movs	r3, #0
 800691a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691e:	e7a7      	b.n	8006870 <_printf_i+0x118>
 8006920:	6923      	ldr	r3, [r4, #16]
 8006922:	462a      	mov	r2, r5
 8006924:	4639      	mov	r1, r7
 8006926:	4630      	mov	r0, r6
 8006928:	47c0      	blx	r8
 800692a:	3001      	adds	r0, #1
 800692c:	d0aa      	beq.n	8006884 <_printf_i+0x12c>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	079b      	lsls	r3, r3, #30
 8006932:	d413      	bmi.n	800695c <_printf_i+0x204>
 8006934:	68e0      	ldr	r0, [r4, #12]
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	4298      	cmp	r0, r3
 800693a:	bfb8      	it	lt
 800693c:	4618      	movlt	r0, r3
 800693e:	e7a3      	b.n	8006888 <_printf_i+0x130>
 8006940:	2301      	movs	r3, #1
 8006942:	464a      	mov	r2, r9
 8006944:	4639      	mov	r1, r7
 8006946:	4630      	mov	r0, r6
 8006948:	47c0      	blx	r8
 800694a:	3001      	adds	r0, #1
 800694c:	d09a      	beq.n	8006884 <_printf_i+0x12c>
 800694e:	3501      	adds	r5, #1
 8006950:	68e3      	ldr	r3, [r4, #12]
 8006952:	9a03      	ldr	r2, [sp, #12]
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	42ab      	cmp	r3, r5
 8006958:	dcf2      	bgt.n	8006940 <_printf_i+0x1e8>
 800695a:	e7eb      	b.n	8006934 <_printf_i+0x1dc>
 800695c:	2500      	movs	r5, #0
 800695e:	f104 0919 	add.w	r9, r4, #25
 8006962:	e7f5      	b.n	8006950 <_printf_i+0x1f8>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1ac      	bne.n	80068c2 <_printf_i+0x16a>
 8006968:	7803      	ldrb	r3, [r0, #0]
 800696a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800696e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006972:	e76c      	b.n	800684e <_printf_i+0xf6>
 8006974:	0807a232 	.word	0x0807a232
 8006978:	0807a243 	.word	0x0807a243

0800697c <iprintf>:
 800697c:	b40f      	push	{r0, r1, r2, r3}
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <iprintf+0x2c>)
 8006980:	b513      	push	{r0, r1, r4, lr}
 8006982:	681c      	ldr	r4, [r3, #0]
 8006984:	b124      	cbz	r4, 8006990 <iprintf+0x14>
 8006986:	69a3      	ldr	r3, [r4, #24]
 8006988:	b913      	cbnz	r3, 8006990 <iprintf+0x14>
 800698a:	4620      	mov	r0, r4
 800698c:	f001 f878 	bl	8007a80 <__sinit>
 8006990:	ab05      	add	r3, sp, #20
 8006992:	9a04      	ldr	r2, [sp, #16]
 8006994:	68a1      	ldr	r1, [r4, #8]
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	4620      	mov	r0, r4
 800699a:	f001 fc75 	bl	8008288 <_vfiprintf_r>
 800699e:	b002      	add	sp, #8
 80069a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069a4:	b004      	add	sp, #16
 80069a6:	4770      	bx	lr
 80069a8:	20001c40 	.word	0x20001c40

080069ac <_puts_r>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	460e      	mov	r6, r1
 80069b0:	4605      	mov	r5, r0
 80069b2:	b118      	cbz	r0, 80069bc <_puts_r+0x10>
 80069b4:	6983      	ldr	r3, [r0, #24]
 80069b6:	b90b      	cbnz	r3, 80069bc <_puts_r+0x10>
 80069b8:	f001 f862 	bl	8007a80 <__sinit>
 80069bc:	69ab      	ldr	r3, [r5, #24]
 80069be:	68ac      	ldr	r4, [r5, #8]
 80069c0:	b913      	cbnz	r3, 80069c8 <_puts_r+0x1c>
 80069c2:	4628      	mov	r0, r5
 80069c4:	f001 f85c 	bl	8007a80 <__sinit>
 80069c8:	4b23      	ldr	r3, [pc, #140]	; (8006a58 <_puts_r+0xac>)
 80069ca:	429c      	cmp	r4, r3
 80069cc:	d117      	bne.n	80069fe <_puts_r+0x52>
 80069ce:	686c      	ldr	r4, [r5, #4]
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	071b      	lsls	r3, r3, #28
 80069d4:	d51d      	bpl.n	8006a12 <_puts_r+0x66>
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	b1db      	cbz	r3, 8006a12 <_puts_r+0x66>
 80069da:	3e01      	subs	r6, #1
 80069dc:	68a3      	ldr	r3, [r4, #8]
 80069de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069e2:	3b01      	subs	r3, #1
 80069e4:	60a3      	str	r3, [r4, #8]
 80069e6:	b9e9      	cbnz	r1, 8006a24 <_puts_r+0x78>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	da2e      	bge.n	8006a4a <_puts_r+0x9e>
 80069ec:	4622      	mov	r2, r4
 80069ee:	210a      	movs	r1, #10
 80069f0:	4628      	mov	r0, r5
 80069f2:	f000 f84f 	bl	8006a94 <__swbuf_r>
 80069f6:	3001      	adds	r0, #1
 80069f8:	d011      	beq.n	8006a1e <_puts_r+0x72>
 80069fa:	200a      	movs	r0, #10
 80069fc:	e011      	b.n	8006a22 <_puts_r+0x76>
 80069fe:	4b17      	ldr	r3, [pc, #92]	; (8006a5c <_puts_r+0xb0>)
 8006a00:	429c      	cmp	r4, r3
 8006a02:	d101      	bne.n	8006a08 <_puts_r+0x5c>
 8006a04:	68ac      	ldr	r4, [r5, #8]
 8006a06:	e7e3      	b.n	80069d0 <_puts_r+0x24>
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <_puts_r+0xb4>)
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	bf08      	it	eq
 8006a0e:	68ec      	ldreq	r4, [r5, #12]
 8006a10:	e7de      	b.n	80069d0 <_puts_r+0x24>
 8006a12:	4621      	mov	r1, r4
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 f88f 	bl	8006b38 <__swsetup_r>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d0dd      	beq.n	80069da <_puts_r+0x2e>
 8006a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da04      	bge.n	8006a32 <_puts_r+0x86>
 8006a28:	69a2      	ldr	r2, [r4, #24]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	dc06      	bgt.n	8006a3c <_puts_r+0x90>
 8006a2e:	290a      	cmp	r1, #10
 8006a30:	d004      	beq.n	8006a3c <_puts_r+0x90>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	6022      	str	r2, [r4, #0]
 8006a38:	7019      	strb	r1, [r3, #0]
 8006a3a:	e7cf      	b.n	80069dc <_puts_r+0x30>
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f828 	bl	8006a94 <__swbuf_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d1c9      	bne.n	80069dc <_puts_r+0x30>
 8006a48:	e7e9      	b.n	8006a1e <_puts_r+0x72>
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	200a      	movs	r0, #10
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	6022      	str	r2, [r4, #0]
 8006a52:	7018      	strb	r0, [r3, #0]
 8006a54:	e7e5      	b.n	8006a22 <_puts_r+0x76>
 8006a56:	bf00      	nop
 8006a58:	0807a284 	.word	0x0807a284
 8006a5c:	0807a2a4 	.word	0x0807a2a4
 8006a60:	0807a264 	.word	0x0807a264

08006a64 <puts>:
 8006a64:	4b02      	ldr	r3, [pc, #8]	; (8006a70 <puts+0xc>)
 8006a66:	4601      	mov	r1, r0
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	f7ff bf9f 	b.w	80069ac <_puts_r>
 8006a6e:	bf00      	nop
 8006a70:	20001c40 	.word	0x20001c40

08006a74 <_sbrk_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4c06      	ldr	r4, [pc, #24]	; (8006a90 <_sbrk_r+0x1c>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	f7fb fb2e 	bl	80020e0 <_sbrk>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_sbrk_r+0x1a>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_sbrk_r+0x1a>
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20003998 	.word	0x20003998

08006a94 <__swbuf_r>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	460e      	mov	r6, r1
 8006a98:	4614      	mov	r4, r2
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	b118      	cbz	r0, 8006aa6 <__swbuf_r+0x12>
 8006a9e:	6983      	ldr	r3, [r0, #24]
 8006aa0:	b90b      	cbnz	r3, 8006aa6 <__swbuf_r+0x12>
 8006aa2:	f000 ffed 	bl	8007a80 <__sinit>
 8006aa6:	4b21      	ldr	r3, [pc, #132]	; (8006b2c <__swbuf_r+0x98>)
 8006aa8:	429c      	cmp	r4, r3
 8006aaa:	d12a      	bne.n	8006b02 <__swbuf_r+0x6e>
 8006aac:	686c      	ldr	r4, [r5, #4]
 8006aae:	69a3      	ldr	r3, [r4, #24]
 8006ab0:	60a3      	str	r3, [r4, #8]
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	071a      	lsls	r2, r3, #28
 8006ab6:	d52e      	bpl.n	8006b16 <__swbuf_r+0x82>
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	b363      	cbz	r3, 8006b16 <__swbuf_r+0x82>
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	6820      	ldr	r0, [r4, #0]
 8006ac0:	1ac0      	subs	r0, r0, r3
 8006ac2:	6963      	ldr	r3, [r4, #20]
 8006ac4:	b2f6      	uxtb	r6, r6
 8006ac6:	4283      	cmp	r3, r0
 8006ac8:	4637      	mov	r7, r6
 8006aca:	dc04      	bgt.n	8006ad6 <__swbuf_r+0x42>
 8006acc:	4621      	mov	r1, r4
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 ff6c 	bl	80079ac <_fflush_r>
 8006ad4:	bb28      	cbnz	r0, 8006b22 <__swbuf_r+0x8e>
 8006ad6:	68a3      	ldr	r3, [r4, #8]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	60a3      	str	r3, [r4, #8]
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	6022      	str	r2, [r4, #0]
 8006ae2:	701e      	strb	r6, [r3, #0]
 8006ae4:	6963      	ldr	r3, [r4, #20]
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	4283      	cmp	r3, r0
 8006aea:	d004      	beq.n	8006af6 <__swbuf_r+0x62>
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	07db      	lsls	r3, r3, #31
 8006af0:	d519      	bpl.n	8006b26 <__swbuf_r+0x92>
 8006af2:	2e0a      	cmp	r6, #10
 8006af4:	d117      	bne.n	8006b26 <__swbuf_r+0x92>
 8006af6:	4621      	mov	r1, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	f000 ff57 	bl	80079ac <_fflush_r>
 8006afe:	b190      	cbz	r0, 8006b26 <__swbuf_r+0x92>
 8006b00:	e00f      	b.n	8006b22 <__swbuf_r+0x8e>
 8006b02:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <__swbuf_r+0x9c>)
 8006b04:	429c      	cmp	r4, r3
 8006b06:	d101      	bne.n	8006b0c <__swbuf_r+0x78>
 8006b08:	68ac      	ldr	r4, [r5, #8]
 8006b0a:	e7d0      	b.n	8006aae <__swbuf_r+0x1a>
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <__swbuf_r+0xa0>)
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	bf08      	it	eq
 8006b12:	68ec      	ldreq	r4, [r5, #12]
 8006b14:	e7cb      	b.n	8006aae <__swbuf_r+0x1a>
 8006b16:	4621      	mov	r1, r4
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f000 f80d 	bl	8006b38 <__swsetup_r>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d0cc      	beq.n	8006abc <__swbuf_r+0x28>
 8006b22:	f04f 37ff 	mov.w	r7, #4294967295
 8006b26:	4638      	mov	r0, r7
 8006b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	0807a284 	.word	0x0807a284
 8006b30:	0807a2a4 	.word	0x0807a2a4
 8006b34:	0807a264 	.word	0x0807a264

08006b38 <__swsetup_r>:
 8006b38:	4b32      	ldr	r3, [pc, #200]	; (8006c04 <__swsetup_r+0xcc>)
 8006b3a:	b570      	push	{r4, r5, r6, lr}
 8006b3c:	681d      	ldr	r5, [r3, #0]
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460c      	mov	r4, r1
 8006b42:	b125      	cbz	r5, 8006b4e <__swsetup_r+0x16>
 8006b44:	69ab      	ldr	r3, [r5, #24]
 8006b46:	b913      	cbnz	r3, 8006b4e <__swsetup_r+0x16>
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f000 ff99 	bl	8007a80 <__sinit>
 8006b4e:	4b2e      	ldr	r3, [pc, #184]	; (8006c08 <__swsetup_r+0xd0>)
 8006b50:	429c      	cmp	r4, r3
 8006b52:	d10f      	bne.n	8006b74 <__swsetup_r+0x3c>
 8006b54:	686c      	ldr	r4, [r5, #4]
 8006b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	0715      	lsls	r5, r2, #28
 8006b5e:	d42c      	bmi.n	8006bba <__swsetup_r+0x82>
 8006b60:	06d0      	lsls	r0, r2, #27
 8006b62:	d411      	bmi.n	8006b88 <__swsetup_r+0x50>
 8006b64:	2209      	movs	r2, #9
 8006b66:	6032      	str	r2, [r6, #0]
 8006b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b6c:	81a3      	strh	r3, [r4, #12]
 8006b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b72:	e03e      	b.n	8006bf2 <__swsetup_r+0xba>
 8006b74:	4b25      	ldr	r3, [pc, #148]	; (8006c0c <__swsetup_r+0xd4>)
 8006b76:	429c      	cmp	r4, r3
 8006b78:	d101      	bne.n	8006b7e <__swsetup_r+0x46>
 8006b7a:	68ac      	ldr	r4, [r5, #8]
 8006b7c:	e7eb      	b.n	8006b56 <__swsetup_r+0x1e>
 8006b7e:	4b24      	ldr	r3, [pc, #144]	; (8006c10 <__swsetup_r+0xd8>)
 8006b80:	429c      	cmp	r4, r3
 8006b82:	bf08      	it	eq
 8006b84:	68ec      	ldreq	r4, [r5, #12]
 8006b86:	e7e6      	b.n	8006b56 <__swsetup_r+0x1e>
 8006b88:	0751      	lsls	r1, r2, #29
 8006b8a:	d512      	bpl.n	8006bb2 <__swsetup_r+0x7a>
 8006b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b8e:	b141      	cbz	r1, 8006ba2 <__swsetup_r+0x6a>
 8006b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b94:	4299      	cmp	r1, r3
 8006b96:	d002      	beq.n	8006b9e <__swsetup_r+0x66>
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f7ff f9eb 	bl	8005f74 <_free_r>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ba8:	81a3      	strh	r3, [r4, #12]
 8006baa:	2300      	movs	r3, #0
 8006bac:	6063      	str	r3, [r4, #4]
 8006bae:	6923      	ldr	r3, [r4, #16]
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	f043 0308 	orr.w	r3, r3, #8
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	b94b      	cbnz	r3, 8006bd2 <__swsetup_r+0x9a>
 8006bbe:	89a3      	ldrh	r3, [r4, #12]
 8006bc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bc8:	d003      	beq.n	8006bd2 <__swsetup_r+0x9a>
 8006bca:	4621      	mov	r1, r4
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f001 f813 	bl	8007bf8 <__smakebuf_r>
 8006bd2:	89a2      	ldrh	r2, [r4, #12]
 8006bd4:	f012 0301 	ands.w	r3, r2, #1
 8006bd8:	d00c      	beq.n	8006bf4 <__swsetup_r+0xbc>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60a3      	str	r3, [r4, #8]
 8006bde:	6963      	ldr	r3, [r4, #20]
 8006be0:	425b      	negs	r3, r3
 8006be2:	61a3      	str	r3, [r4, #24]
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	b953      	cbnz	r3, 8006bfe <__swsetup_r+0xc6>
 8006be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006bf0:	d1ba      	bne.n	8006b68 <__swsetup_r+0x30>
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	0792      	lsls	r2, r2, #30
 8006bf6:	bf58      	it	pl
 8006bf8:	6963      	ldrpl	r3, [r4, #20]
 8006bfa:	60a3      	str	r3, [r4, #8]
 8006bfc:	e7f2      	b.n	8006be4 <__swsetup_r+0xac>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	e7f7      	b.n	8006bf2 <__swsetup_r+0xba>
 8006c02:	bf00      	nop
 8006c04:	20001c40 	.word	0x20001c40
 8006c08:	0807a284 	.word	0x0807a284
 8006c0c:	0807a2a4 	.word	0x0807a2a4
 8006c10:	0807a264 	.word	0x0807a264

08006c14 <quorem>:
 8006c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c18:	6903      	ldr	r3, [r0, #16]
 8006c1a:	690c      	ldr	r4, [r1, #16]
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	4680      	mov	r8, r0
 8006c20:	f2c0 8082 	blt.w	8006d28 <quorem+0x114>
 8006c24:	3c01      	subs	r4, #1
 8006c26:	f101 0714 	add.w	r7, r1, #20
 8006c2a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006c2e:	f100 0614 	add.w	r6, r0, #20
 8006c32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006c36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006c3a:	eb06 030c 	add.w	r3, r6, ip
 8006c3e:	3501      	adds	r5, #1
 8006c40:	eb07 090c 	add.w	r9, r7, ip
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	fbb0 f5f5 	udiv	r5, r0, r5
 8006c4a:	b395      	cbz	r5, 8006cb2 <quorem+0x9e>
 8006c4c:	f04f 0a00 	mov.w	sl, #0
 8006c50:	4638      	mov	r0, r7
 8006c52:	46b6      	mov	lr, r6
 8006c54:	46d3      	mov	fp, sl
 8006c56:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c5a:	b293      	uxth	r3, r2
 8006c5c:	fb05 a303 	mla	r3, r5, r3, sl
 8006c60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	ebab 0303 	sub.w	r3, fp, r3
 8006c6a:	0c12      	lsrs	r2, r2, #16
 8006c6c:	f8de b000 	ldr.w	fp, [lr]
 8006c70:	fb05 a202 	mla	r2, r5, r2, sl
 8006c74:	fa13 f38b 	uxtah	r3, r3, fp
 8006c78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006c7c:	fa1f fb82 	uxth.w	fp, r2
 8006c80:	f8de 2000 	ldr.w	r2, [lr]
 8006c84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006c88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c92:	4581      	cmp	r9, r0
 8006c94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006c98:	f84e 3b04 	str.w	r3, [lr], #4
 8006c9c:	d2db      	bcs.n	8006c56 <quorem+0x42>
 8006c9e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006ca2:	b933      	cbnz	r3, 8006cb2 <quorem+0x9e>
 8006ca4:	9b01      	ldr	r3, [sp, #4]
 8006ca6:	3b04      	subs	r3, #4
 8006ca8:	429e      	cmp	r6, r3
 8006caa:	461a      	mov	r2, r3
 8006cac:	d330      	bcc.n	8006d10 <quorem+0xfc>
 8006cae:	f8c8 4010 	str.w	r4, [r8, #16]
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	f001 f9f8 	bl	80080a8 <__mcmp>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	db25      	blt.n	8006d08 <quorem+0xf4>
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f04f 0c00 	mov.w	ip, #0
 8006cc4:	f857 2b04 	ldr.w	r2, [r7], #4
 8006cc8:	f8d0 e000 	ldr.w	lr, [r0]
 8006ccc:	b293      	uxth	r3, r2
 8006cce:	ebac 0303 	sub.w	r3, ip, r3
 8006cd2:	0c12      	lsrs	r2, r2, #16
 8006cd4:	fa13 f38e 	uxtah	r3, r3, lr
 8006cd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006cdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ce6:	45b9      	cmp	r9, r7
 8006ce8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cec:	f840 3b04 	str.w	r3, [r0], #4
 8006cf0:	d2e8      	bcs.n	8006cc4 <quorem+0xb0>
 8006cf2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006cf6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006cfa:	b92a      	cbnz	r2, 8006d08 <quorem+0xf4>
 8006cfc:	3b04      	subs	r3, #4
 8006cfe:	429e      	cmp	r6, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	d30b      	bcc.n	8006d1c <quorem+0x108>
 8006d04:	f8c8 4010 	str.w	r4, [r8, #16]
 8006d08:	4628      	mov	r0, r5
 8006d0a:	b003      	add	sp, #12
 8006d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	3b04      	subs	r3, #4
 8006d14:	2a00      	cmp	r2, #0
 8006d16:	d1ca      	bne.n	8006cae <quorem+0x9a>
 8006d18:	3c01      	subs	r4, #1
 8006d1a:	e7c5      	b.n	8006ca8 <quorem+0x94>
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	3b04      	subs	r3, #4
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d1ef      	bne.n	8006d04 <quorem+0xf0>
 8006d24:	3c01      	subs	r4, #1
 8006d26:	e7ea      	b.n	8006cfe <quorem+0xea>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e7ee      	b.n	8006d0a <quorem+0xf6>
 8006d2c:	0000      	movs	r0, r0
	...

08006d30 <_dtoa_r>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	ec57 6b10 	vmov	r6, r7, d0
 8006d38:	b097      	sub	sp, #92	; 0x5c
 8006d3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d3c:	9106      	str	r1, [sp, #24]
 8006d3e:	4604      	mov	r4, r0
 8006d40:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d42:	9312      	str	r3, [sp, #72]	; 0x48
 8006d44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d48:	e9cd 6700 	strd	r6, r7, [sp]
 8006d4c:	b93d      	cbnz	r5, 8006d5e <_dtoa_r+0x2e>
 8006d4e:	2010      	movs	r0, #16
 8006d50:	f7ff f8de 	bl	8005f10 <malloc>
 8006d54:	6260      	str	r0, [r4, #36]	; 0x24
 8006d56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d5a:	6005      	str	r5, [r0, #0]
 8006d5c:	60c5      	str	r5, [r0, #12]
 8006d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d60:	6819      	ldr	r1, [r3, #0]
 8006d62:	b151      	cbz	r1, 8006d7a <_dtoa_r+0x4a>
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	604a      	str	r2, [r1, #4]
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4093      	lsls	r3, r2
 8006d6c:	608b      	str	r3, [r1, #8]
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 ffb8 	bl	8007ce4 <_Bfree>
 8006d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	1e3b      	subs	r3, r7, #0
 8006d7c:	bfbb      	ittet	lt
 8006d7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d82:	9301      	strlt	r3, [sp, #4]
 8006d84:	2300      	movge	r3, #0
 8006d86:	2201      	movlt	r2, #1
 8006d88:	bfac      	ite	ge
 8006d8a:	f8c8 3000 	strge.w	r3, [r8]
 8006d8e:	f8c8 2000 	strlt.w	r2, [r8]
 8006d92:	4baf      	ldr	r3, [pc, #700]	; (8007050 <_dtoa_r+0x320>)
 8006d94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d98:	ea33 0308 	bics.w	r3, r3, r8
 8006d9c:	d114      	bne.n	8006dc8 <_dtoa_r+0x98>
 8006d9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	9b00      	ldr	r3, [sp, #0]
 8006da8:	b923      	cbnz	r3, 8006db4 <_dtoa_r+0x84>
 8006daa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f000 8542 	beq.w	8007838 <_dtoa_r+0xb08>
 8006db4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006db6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007064 <_dtoa_r+0x334>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 8544 	beq.w	8007848 <_dtoa_r+0xb18>
 8006dc0:	f10b 0303 	add.w	r3, fp, #3
 8006dc4:	f000 bd3e 	b.w	8007844 <_dtoa_r+0xb14>
 8006dc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	f7f9 fe80 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dd8:	4681      	mov	r9, r0
 8006dda:	b168      	cbz	r0, 8006df8 <_dtoa_r+0xc8>
 8006ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dde:	2301      	movs	r3, #1
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8524 	beq.w	8007832 <_dtoa_r+0xb02>
 8006dea:	4b9a      	ldr	r3, [pc, #616]	; (8007054 <_dtoa_r+0x324>)
 8006dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dee:	f103 3bff 	add.w	fp, r3, #4294967295
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	f000 bd28 	b.w	8007848 <_dtoa_r+0xb18>
 8006df8:	aa14      	add	r2, sp, #80	; 0x50
 8006dfa:	a915      	add	r1, sp, #84	; 0x54
 8006dfc:	ec47 6b10 	vmov	d0, r6, r7
 8006e00:	4620      	mov	r0, r4
 8006e02:	f001 f9c8 	bl	8008196 <__d2b>
 8006e06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006e0a:	9004      	str	r0, [sp, #16]
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	d07c      	beq.n	8006f0a <_dtoa_r+0x1da>
 8006e10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006e18:	46b2      	mov	sl, r6
 8006e1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006e26:	2200      	movs	r2, #0
 8006e28:	4b8b      	ldr	r3, [pc, #556]	; (8007058 <_dtoa_r+0x328>)
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	f7f9 fa33 	bl	8000298 <__aeabi_dsub>
 8006e32:	a381      	add	r3, pc, #516	; (adr r3, 8007038 <_dtoa_r+0x308>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 fbe6 	bl	8000608 <__aeabi_dmul>
 8006e3c:	a380      	add	r3, pc, #512	; (adr r3, 8007040 <_dtoa_r+0x310>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 fa2b 	bl	800029c <__adddf3>
 8006e46:	4606      	mov	r6, r0
 8006e48:	4628      	mov	r0, r5
 8006e4a:	460f      	mov	r7, r1
 8006e4c:	f7f9 fb72 	bl	8000534 <__aeabi_i2d>
 8006e50:	a37d      	add	r3, pc, #500	; (adr r3, 8007048 <_dtoa_r+0x318>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fbd7 	bl	8000608 <__aeabi_dmul>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4639      	mov	r1, r7
 8006e62:	f7f9 fa1b 	bl	800029c <__adddf3>
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	f7f9 fe7d 	bl	8000b68 <__aeabi_d2iz>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4682      	mov	sl, r0
 8006e72:	2300      	movs	r3, #0
 8006e74:	4630      	mov	r0, r6
 8006e76:	4639      	mov	r1, r7
 8006e78:	f7f9 fe38 	bl	8000aec <__aeabi_dcmplt>
 8006e7c:	b148      	cbz	r0, 8006e92 <_dtoa_r+0x162>
 8006e7e:	4650      	mov	r0, sl
 8006e80:	f7f9 fb58 	bl	8000534 <__aeabi_i2d>
 8006e84:	4632      	mov	r2, r6
 8006e86:	463b      	mov	r3, r7
 8006e88:	f7f9 fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e8c:	b908      	cbnz	r0, 8006e92 <_dtoa_r+0x162>
 8006e8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e92:	f1ba 0f16 	cmp.w	sl, #22
 8006e96:	d859      	bhi.n	8006f4c <_dtoa_r+0x21c>
 8006e98:	4970      	ldr	r1, [pc, #448]	; (800705c <_dtoa_r+0x32c>)
 8006e9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006e9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea6:	f7f9 fe3f 	bl	8000b28 <__aeabi_dcmpgt>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d050      	beq.n	8006f50 <_dtoa_r+0x220>
 8006eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006eb8:	1b5d      	subs	r5, r3, r5
 8006eba:	f1b5 0801 	subs.w	r8, r5, #1
 8006ebe:	bf49      	itett	mi
 8006ec0:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ec4:	2300      	movpl	r3, #0
 8006ec6:	9305      	strmi	r3, [sp, #20]
 8006ec8:	f04f 0800 	movmi.w	r8, #0
 8006ecc:	bf58      	it	pl
 8006ece:	9305      	strpl	r3, [sp, #20]
 8006ed0:	f1ba 0f00 	cmp.w	sl, #0
 8006ed4:	db3e      	blt.n	8006f54 <_dtoa_r+0x224>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	44d0      	add	r8, sl
 8006eda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006ede:	9307      	str	r3, [sp, #28]
 8006ee0:	9b06      	ldr	r3, [sp, #24]
 8006ee2:	2b09      	cmp	r3, #9
 8006ee4:	f200 8090 	bhi.w	8007008 <_dtoa_r+0x2d8>
 8006ee8:	2b05      	cmp	r3, #5
 8006eea:	bfc4      	itt	gt
 8006eec:	3b04      	subgt	r3, #4
 8006eee:	9306      	strgt	r3, [sp, #24]
 8006ef0:	9b06      	ldr	r3, [sp, #24]
 8006ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8006ef6:	bfcc      	ite	gt
 8006ef8:	2500      	movgt	r5, #0
 8006efa:	2501      	movle	r5, #1
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	f200 808f 	bhi.w	8007020 <_dtoa_r+0x2f0>
 8006f02:	e8df f003 	tbb	[pc, r3]
 8006f06:	7f7d      	.short	0x7f7d
 8006f08:	7131      	.short	0x7131
 8006f0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006f0e:	441d      	add	r5, r3
 8006f10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006f14:	2820      	cmp	r0, #32
 8006f16:	dd13      	ble.n	8006f40 <_dtoa_r+0x210>
 8006f18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006f1c:	9b00      	ldr	r3, [sp, #0]
 8006f1e:	fa08 f800 	lsl.w	r8, r8, r0
 8006f22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006f26:	fa23 f000 	lsr.w	r0, r3, r0
 8006f2a:	ea48 0000 	orr.w	r0, r8, r0
 8006f2e:	f7f9 faf1 	bl	8000514 <__aeabi_ui2d>
 8006f32:	2301      	movs	r3, #1
 8006f34:	4682      	mov	sl, r0
 8006f36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006f3a:	3d01      	subs	r5, #1
 8006f3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f3e:	e772      	b.n	8006e26 <_dtoa_r+0xf6>
 8006f40:	9b00      	ldr	r3, [sp, #0]
 8006f42:	f1c0 0020 	rsb	r0, r0, #32
 8006f46:	fa03 f000 	lsl.w	r0, r3, r0
 8006f4a:	e7f0      	b.n	8006f2e <_dtoa_r+0x1fe>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e7b1      	b.n	8006eb4 <_dtoa_r+0x184>
 8006f50:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f52:	e7b0      	b.n	8006eb6 <_dtoa_r+0x186>
 8006f54:	9b05      	ldr	r3, [sp, #20]
 8006f56:	eba3 030a 	sub.w	r3, r3, sl
 8006f5a:	9305      	str	r3, [sp, #20]
 8006f5c:	f1ca 0300 	rsb	r3, sl, #0
 8006f60:	9307      	str	r3, [sp, #28]
 8006f62:	2300      	movs	r3, #0
 8006f64:	930e      	str	r3, [sp, #56]	; 0x38
 8006f66:	e7bb      	b.n	8006ee0 <_dtoa_r+0x1b0>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dd59      	ble.n	8007026 <_dtoa_r+0x2f6>
 8006f72:	9302      	str	r3, [sp, #8]
 8006f74:	4699      	mov	r9, r3
 8006f76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f78:	2200      	movs	r2, #0
 8006f7a:	6072      	str	r2, [r6, #4]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	f102 0014 	add.w	r0, r2, #20
 8006f82:	4298      	cmp	r0, r3
 8006f84:	6871      	ldr	r1, [r6, #4]
 8006f86:	d953      	bls.n	8007030 <_dtoa_r+0x300>
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 fe77 	bl	8007c7c <_Balloc>
 8006f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f90:	6030      	str	r0, [r6, #0]
 8006f92:	f1b9 0f0e 	cmp.w	r9, #14
 8006f96:	f8d3 b000 	ldr.w	fp, [r3]
 8006f9a:	f200 80e6 	bhi.w	800716a <_dtoa_r+0x43a>
 8006f9e:	2d00      	cmp	r5, #0
 8006fa0:	f000 80e3 	beq.w	800716a <_dtoa_r+0x43a>
 8006fa4:	ed9d 7b00 	vldr	d7, [sp]
 8006fa8:	f1ba 0f00 	cmp.w	sl, #0
 8006fac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006fb0:	dd74      	ble.n	800709c <_dtoa_r+0x36c>
 8006fb2:	4a2a      	ldr	r2, [pc, #168]	; (800705c <_dtoa_r+0x32c>)
 8006fb4:	f00a 030f 	and.w	r3, sl, #15
 8006fb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006fbc:	ed93 7b00 	vldr	d7, [r3]
 8006fc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006fc4:	06f0      	lsls	r0, r6, #27
 8006fc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006fca:	d565      	bpl.n	8007098 <_dtoa_r+0x368>
 8006fcc:	4b24      	ldr	r3, [pc, #144]	; (8007060 <_dtoa_r+0x330>)
 8006fce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fd6:	f7f9 fc41 	bl	800085c <__aeabi_ddiv>
 8006fda:	e9cd 0100 	strd	r0, r1, [sp]
 8006fde:	f006 060f 	and.w	r6, r6, #15
 8006fe2:	2503      	movs	r5, #3
 8006fe4:	4f1e      	ldr	r7, [pc, #120]	; (8007060 <_dtoa_r+0x330>)
 8006fe6:	e04c      	b.n	8007082 <_dtoa_r+0x352>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	930a      	str	r3, [sp, #40]	; 0x28
 8006fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fee:	4453      	add	r3, sl
 8006ff0:	f103 0901 	add.w	r9, r3, #1
 8006ff4:	9302      	str	r3, [sp, #8]
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	bfb8      	it	lt
 8006ffc:	2301      	movlt	r3, #1
 8006ffe:	e7ba      	b.n	8006f76 <_dtoa_r+0x246>
 8007000:	2300      	movs	r3, #0
 8007002:	e7b2      	b.n	8006f6a <_dtoa_r+0x23a>
 8007004:	2300      	movs	r3, #0
 8007006:	e7f0      	b.n	8006fea <_dtoa_r+0x2ba>
 8007008:	2501      	movs	r5, #1
 800700a:	2300      	movs	r3, #0
 800700c:	9306      	str	r3, [sp, #24]
 800700e:	950a      	str	r5, [sp, #40]	; 0x28
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
 8007014:	9302      	str	r3, [sp, #8]
 8007016:	4699      	mov	r9, r3
 8007018:	2200      	movs	r2, #0
 800701a:	2312      	movs	r3, #18
 800701c:	920b      	str	r2, [sp, #44]	; 0x2c
 800701e:	e7aa      	b.n	8006f76 <_dtoa_r+0x246>
 8007020:	2301      	movs	r3, #1
 8007022:	930a      	str	r3, [sp, #40]	; 0x28
 8007024:	e7f4      	b.n	8007010 <_dtoa_r+0x2e0>
 8007026:	2301      	movs	r3, #1
 8007028:	9302      	str	r3, [sp, #8]
 800702a:	4699      	mov	r9, r3
 800702c:	461a      	mov	r2, r3
 800702e:	e7f5      	b.n	800701c <_dtoa_r+0x2ec>
 8007030:	3101      	adds	r1, #1
 8007032:	6071      	str	r1, [r6, #4]
 8007034:	0052      	lsls	r2, r2, #1
 8007036:	e7a2      	b.n	8006f7e <_dtoa_r+0x24e>
 8007038:	636f4361 	.word	0x636f4361
 800703c:	3fd287a7 	.word	0x3fd287a7
 8007040:	8b60c8b3 	.word	0x8b60c8b3
 8007044:	3fc68a28 	.word	0x3fc68a28
 8007048:	509f79fb 	.word	0x509f79fb
 800704c:	3fd34413 	.word	0x3fd34413
 8007050:	7ff00000 	.word	0x7ff00000
 8007054:	0807a231 	.word	0x0807a231
 8007058:	3ff80000 	.word	0x3ff80000
 800705c:	0807a2f0 	.word	0x0807a2f0
 8007060:	0807a2c8 	.word	0x0807a2c8
 8007064:	0807a25d 	.word	0x0807a25d
 8007068:	07f1      	lsls	r1, r6, #31
 800706a:	d508      	bpl.n	800707e <_dtoa_r+0x34e>
 800706c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007074:	f7f9 fac8 	bl	8000608 <__aeabi_dmul>
 8007078:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800707c:	3501      	adds	r5, #1
 800707e:	1076      	asrs	r6, r6, #1
 8007080:	3708      	adds	r7, #8
 8007082:	2e00      	cmp	r6, #0
 8007084:	d1f0      	bne.n	8007068 <_dtoa_r+0x338>
 8007086:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800708a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800708e:	f7f9 fbe5 	bl	800085c <__aeabi_ddiv>
 8007092:	e9cd 0100 	strd	r0, r1, [sp]
 8007096:	e01a      	b.n	80070ce <_dtoa_r+0x39e>
 8007098:	2502      	movs	r5, #2
 800709a:	e7a3      	b.n	8006fe4 <_dtoa_r+0x2b4>
 800709c:	f000 80a0 	beq.w	80071e0 <_dtoa_r+0x4b0>
 80070a0:	f1ca 0600 	rsb	r6, sl, #0
 80070a4:	4b9f      	ldr	r3, [pc, #636]	; (8007324 <_dtoa_r+0x5f4>)
 80070a6:	4fa0      	ldr	r7, [pc, #640]	; (8007328 <_dtoa_r+0x5f8>)
 80070a8:	f006 020f 	and.w	r2, r6, #15
 80070ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070b8:	f7f9 faa6 	bl	8000608 <__aeabi_dmul>
 80070bc:	e9cd 0100 	strd	r0, r1, [sp]
 80070c0:	1136      	asrs	r6, r6, #4
 80070c2:	2300      	movs	r3, #0
 80070c4:	2502      	movs	r5, #2
 80070c6:	2e00      	cmp	r6, #0
 80070c8:	d17f      	bne.n	80071ca <_dtoa_r+0x49a>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e1      	bne.n	8007092 <_dtoa_r+0x362>
 80070ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8087 	beq.w	80071e4 <_dtoa_r+0x4b4>
 80070d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80070da:	2200      	movs	r2, #0
 80070dc:	4b93      	ldr	r3, [pc, #588]	; (800732c <_dtoa_r+0x5fc>)
 80070de:	4630      	mov	r0, r6
 80070e0:	4639      	mov	r1, r7
 80070e2:	f7f9 fd03 	bl	8000aec <__aeabi_dcmplt>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d07c      	beq.n	80071e4 <_dtoa_r+0x4b4>
 80070ea:	f1b9 0f00 	cmp.w	r9, #0
 80070ee:	d079      	beq.n	80071e4 <_dtoa_r+0x4b4>
 80070f0:	9b02      	ldr	r3, [sp, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	dd35      	ble.n	8007162 <_dtoa_r+0x432>
 80070f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80070fa:	9308      	str	r3, [sp, #32]
 80070fc:	4639      	mov	r1, r7
 80070fe:	2200      	movs	r2, #0
 8007100:	4b8b      	ldr	r3, [pc, #556]	; (8007330 <_dtoa_r+0x600>)
 8007102:	4630      	mov	r0, r6
 8007104:	f7f9 fa80 	bl	8000608 <__aeabi_dmul>
 8007108:	e9cd 0100 	strd	r0, r1, [sp]
 800710c:	9f02      	ldr	r7, [sp, #8]
 800710e:	3501      	adds	r5, #1
 8007110:	4628      	mov	r0, r5
 8007112:	f7f9 fa0f 	bl	8000534 <__aeabi_i2d>
 8007116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800711a:	f7f9 fa75 	bl	8000608 <__aeabi_dmul>
 800711e:	2200      	movs	r2, #0
 8007120:	4b84      	ldr	r3, [pc, #528]	; (8007334 <_dtoa_r+0x604>)
 8007122:	f7f9 f8bb 	bl	800029c <__adddf3>
 8007126:	4605      	mov	r5, r0
 8007128:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800712c:	2f00      	cmp	r7, #0
 800712e:	d15d      	bne.n	80071ec <_dtoa_r+0x4bc>
 8007130:	2200      	movs	r2, #0
 8007132:	4b81      	ldr	r3, [pc, #516]	; (8007338 <_dtoa_r+0x608>)
 8007134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007138:	f7f9 f8ae 	bl	8000298 <__aeabi_dsub>
 800713c:	462a      	mov	r2, r5
 800713e:	4633      	mov	r3, r6
 8007140:	e9cd 0100 	strd	r0, r1, [sp]
 8007144:	f7f9 fcf0 	bl	8000b28 <__aeabi_dcmpgt>
 8007148:	2800      	cmp	r0, #0
 800714a:	f040 8288 	bne.w	800765e <_dtoa_r+0x92e>
 800714e:	462a      	mov	r2, r5
 8007150:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007154:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007158:	f7f9 fcc8 	bl	8000aec <__aeabi_dcmplt>
 800715c:	2800      	cmp	r0, #0
 800715e:	f040 827c 	bne.w	800765a <_dtoa_r+0x92a>
 8007162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007166:	e9cd 2300 	strd	r2, r3, [sp]
 800716a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800716c:	2b00      	cmp	r3, #0
 800716e:	f2c0 8150 	blt.w	8007412 <_dtoa_r+0x6e2>
 8007172:	f1ba 0f0e 	cmp.w	sl, #14
 8007176:	f300 814c 	bgt.w	8007412 <_dtoa_r+0x6e2>
 800717a:	4b6a      	ldr	r3, [pc, #424]	; (8007324 <_dtoa_r+0x5f4>)
 800717c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007180:	ed93 7b00 	vldr	d7, [r3]
 8007184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007186:	2b00      	cmp	r3, #0
 8007188:	ed8d 7b02 	vstr	d7, [sp, #8]
 800718c:	f280 80d8 	bge.w	8007340 <_dtoa_r+0x610>
 8007190:	f1b9 0f00 	cmp.w	r9, #0
 8007194:	f300 80d4 	bgt.w	8007340 <_dtoa_r+0x610>
 8007198:	f040 825e 	bne.w	8007658 <_dtoa_r+0x928>
 800719c:	2200      	movs	r2, #0
 800719e:	4b66      	ldr	r3, [pc, #408]	; (8007338 <_dtoa_r+0x608>)
 80071a0:	ec51 0b17 	vmov	r0, r1, d7
 80071a4:	f7f9 fa30 	bl	8000608 <__aeabi_dmul>
 80071a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071ac:	f7f9 fcb2 	bl	8000b14 <__aeabi_dcmpge>
 80071b0:	464f      	mov	r7, r9
 80071b2:	464e      	mov	r6, r9
 80071b4:	2800      	cmp	r0, #0
 80071b6:	f040 8234 	bne.w	8007622 <_dtoa_r+0x8f2>
 80071ba:	2331      	movs	r3, #49	; 0x31
 80071bc:	f10b 0501 	add.w	r5, fp, #1
 80071c0:	f88b 3000 	strb.w	r3, [fp]
 80071c4:	f10a 0a01 	add.w	sl, sl, #1
 80071c8:	e22f      	b.n	800762a <_dtoa_r+0x8fa>
 80071ca:	07f2      	lsls	r2, r6, #31
 80071cc:	d505      	bpl.n	80071da <_dtoa_r+0x4aa>
 80071ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d2:	f7f9 fa19 	bl	8000608 <__aeabi_dmul>
 80071d6:	3501      	adds	r5, #1
 80071d8:	2301      	movs	r3, #1
 80071da:	1076      	asrs	r6, r6, #1
 80071dc:	3708      	adds	r7, #8
 80071de:	e772      	b.n	80070c6 <_dtoa_r+0x396>
 80071e0:	2502      	movs	r5, #2
 80071e2:	e774      	b.n	80070ce <_dtoa_r+0x39e>
 80071e4:	f8cd a020 	str.w	sl, [sp, #32]
 80071e8:	464f      	mov	r7, r9
 80071ea:	e791      	b.n	8007110 <_dtoa_r+0x3e0>
 80071ec:	4b4d      	ldr	r3, [pc, #308]	; (8007324 <_dtoa_r+0x5f4>)
 80071ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80071f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d047      	beq.n	800728c <_dtoa_r+0x55c>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	2000      	movs	r0, #0
 8007202:	494e      	ldr	r1, [pc, #312]	; (800733c <_dtoa_r+0x60c>)
 8007204:	f7f9 fb2a 	bl	800085c <__aeabi_ddiv>
 8007208:	462a      	mov	r2, r5
 800720a:	4633      	mov	r3, r6
 800720c:	f7f9 f844 	bl	8000298 <__aeabi_dsub>
 8007210:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007214:	465d      	mov	r5, fp
 8007216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800721a:	f7f9 fca5 	bl	8000b68 <__aeabi_d2iz>
 800721e:	4606      	mov	r6, r0
 8007220:	f7f9 f988 	bl	8000534 <__aeabi_i2d>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800722c:	f7f9 f834 	bl	8000298 <__aeabi_dsub>
 8007230:	3630      	adds	r6, #48	; 0x30
 8007232:	f805 6b01 	strb.w	r6, [r5], #1
 8007236:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800723a:	e9cd 0100 	strd	r0, r1, [sp]
 800723e:	f7f9 fc55 	bl	8000aec <__aeabi_dcmplt>
 8007242:	2800      	cmp	r0, #0
 8007244:	d163      	bne.n	800730e <_dtoa_r+0x5de>
 8007246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800724a:	2000      	movs	r0, #0
 800724c:	4937      	ldr	r1, [pc, #220]	; (800732c <_dtoa_r+0x5fc>)
 800724e:	f7f9 f823 	bl	8000298 <__aeabi_dsub>
 8007252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007256:	f7f9 fc49 	bl	8000aec <__aeabi_dcmplt>
 800725a:	2800      	cmp	r0, #0
 800725c:	f040 80b7 	bne.w	80073ce <_dtoa_r+0x69e>
 8007260:	eba5 030b 	sub.w	r3, r5, fp
 8007264:	429f      	cmp	r7, r3
 8007266:	f77f af7c 	ble.w	8007162 <_dtoa_r+0x432>
 800726a:	2200      	movs	r2, #0
 800726c:	4b30      	ldr	r3, [pc, #192]	; (8007330 <_dtoa_r+0x600>)
 800726e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007272:	f7f9 f9c9 	bl	8000608 <__aeabi_dmul>
 8007276:	2200      	movs	r2, #0
 8007278:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800727c:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <_dtoa_r+0x600>)
 800727e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007282:	f7f9 f9c1 	bl	8000608 <__aeabi_dmul>
 8007286:	e9cd 0100 	strd	r0, r1, [sp]
 800728a:	e7c4      	b.n	8007216 <_dtoa_r+0x4e6>
 800728c:	462a      	mov	r2, r5
 800728e:	4633      	mov	r3, r6
 8007290:	f7f9 f9ba 	bl	8000608 <__aeabi_dmul>
 8007294:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007298:	eb0b 0507 	add.w	r5, fp, r7
 800729c:	465e      	mov	r6, fp
 800729e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072a2:	f7f9 fc61 	bl	8000b68 <__aeabi_d2iz>
 80072a6:	4607      	mov	r7, r0
 80072a8:	f7f9 f944 	bl	8000534 <__aeabi_i2d>
 80072ac:	3730      	adds	r7, #48	; 0x30
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072b6:	f7f8 ffef 	bl	8000298 <__aeabi_dsub>
 80072ba:	f806 7b01 	strb.w	r7, [r6], #1
 80072be:	42ae      	cmp	r6, r5
 80072c0:	e9cd 0100 	strd	r0, r1, [sp]
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	d126      	bne.n	8007318 <_dtoa_r+0x5e8>
 80072ca:	4b1c      	ldr	r3, [pc, #112]	; (800733c <_dtoa_r+0x60c>)
 80072cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072d0:	f7f8 ffe4 	bl	800029c <__adddf3>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072dc:	f7f9 fc24 	bl	8000b28 <__aeabi_dcmpgt>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d174      	bne.n	80073ce <_dtoa_r+0x69e>
 80072e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80072e8:	2000      	movs	r0, #0
 80072ea:	4914      	ldr	r1, [pc, #80]	; (800733c <_dtoa_r+0x60c>)
 80072ec:	f7f8 ffd4 	bl	8000298 <__aeabi_dsub>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072f8:	f7f9 fbf8 	bl	8000aec <__aeabi_dcmplt>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	f43f af30 	beq.w	8007162 <_dtoa_r+0x432>
 8007302:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007306:	2b30      	cmp	r3, #48	; 0x30
 8007308:	f105 32ff 	add.w	r2, r5, #4294967295
 800730c:	d002      	beq.n	8007314 <_dtoa_r+0x5e4>
 800730e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007312:	e04a      	b.n	80073aa <_dtoa_r+0x67a>
 8007314:	4615      	mov	r5, r2
 8007316:	e7f4      	b.n	8007302 <_dtoa_r+0x5d2>
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <_dtoa_r+0x600>)
 800731a:	f7f9 f975 	bl	8000608 <__aeabi_dmul>
 800731e:	e9cd 0100 	strd	r0, r1, [sp]
 8007322:	e7bc      	b.n	800729e <_dtoa_r+0x56e>
 8007324:	0807a2f0 	.word	0x0807a2f0
 8007328:	0807a2c8 	.word	0x0807a2c8
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	40240000 	.word	0x40240000
 8007334:	401c0000 	.word	0x401c0000
 8007338:	40140000 	.word	0x40140000
 800733c:	3fe00000 	.word	0x3fe00000
 8007340:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007344:	465d      	mov	r5, fp
 8007346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800734a:	4630      	mov	r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	f7f9 fa85 	bl	800085c <__aeabi_ddiv>
 8007352:	f7f9 fc09 	bl	8000b68 <__aeabi_d2iz>
 8007356:	4680      	mov	r8, r0
 8007358:	f7f9 f8ec 	bl	8000534 <__aeabi_i2d>
 800735c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007360:	f7f9 f952 	bl	8000608 <__aeabi_dmul>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4630      	mov	r0, r6
 800736a:	4639      	mov	r1, r7
 800736c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007370:	f7f8 ff92 	bl	8000298 <__aeabi_dsub>
 8007374:	f805 6b01 	strb.w	r6, [r5], #1
 8007378:	eba5 060b 	sub.w	r6, r5, fp
 800737c:	45b1      	cmp	r9, r6
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	d139      	bne.n	80073f8 <_dtoa_r+0x6c8>
 8007384:	f7f8 ff8a 	bl	800029c <__adddf3>
 8007388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	f7f9 fbca 	bl	8000b28 <__aeabi_dcmpgt>
 8007394:	b9c8      	cbnz	r0, 80073ca <_dtoa_r+0x69a>
 8007396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800739a:	4630      	mov	r0, r6
 800739c:	4639      	mov	r1, r7
 800739e:	f7f9 fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80073a2:	b110      	cbz	r0, 80073aa <_dtoa_r+0x67a>
 80073a4:	f018 0f01 	tst.w	r8, #1
 80073a8:	d10f      	bne.n	80073ca <_dtoa_r+0x69a>
 80073aa:	9904      	ldr	r1, [sp, #16]
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fc99 	bl	8007ce4 <_Bfree>
 80073b2:	2300      	movs	r3, #0
 80073b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073b6:	702b      	strb	r3, [r5, #0]
 80073b8:	f10a 0301 	add.w	r3, sl, #1
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 8241 	beq.w	8007848 <_dtoa_r+0xb18>
 80073c6:	601d      	str	r5, [r3, #0]
 80073c8:	e23e      	b.n	8007848 <_dtoa_r+0xb18>
 80073ca:	f8cd a020 	str.w	sl, [sp, #32]
 80073ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073d2:	2a39      	cmp	r2, #57	; 0x39
 80073d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80073d8:	d108      	bne.n	80073ec <_dtoa_r+0x6bc>
 80073da:	459b      	cmp	fp, r3
 80073dc:	d10a      	bne.n	80073f4 <_dtoa_r+0x6c4>
 80073de:	9b08      	ldr	r3, [sp, #32]
 80073e0:	3301      	adds	r3, #1
 80073e2:	9308      	str	r3, [sp, #32]
 80073e4:	2330      	movs	r3, #48	; 0x30
 80073e6:	f88b 3000 	strb.w	r3, [fp]
 80073ea:	465b      	mov	r3, fp
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	3201      	adds	r2, #1
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	e78c      	b.n	800730e <_dtoa_r+0x5de>
 80073f4:	461d      	mov	r5, r3
 80073f6:	e7ea      	b.n	80073ce <_dtoa_r+0x69e>
 80073f8:	2200      	movs	r2, #0
 80073fa:	4b9b      	ldr	r3, [pc, #620]	; (8007668 <_dtoa_r+0x938>)
 80073fc:	f7f9 f904 	bl	8000608 <__aeabi_dmul>
 8007400:	2200      	movs	r2, #0
 8007402:	2300      	movs	r3, #0
 8007404:	4606      	mov	r6, r0
 8007406:	460f      	mov	r7, r1
 8007408:	f7f9 fb66 	bl	8000ad8 <__aeabi_dcmpeq>
 800740c:	2800      	cmp	r0, #0
 800740e:	d09a      	beq.n	8007346 <_dtoa_r+0x616>
 8007410:	e7cb      	b.n	80073aa <_dtoa_r+0x67a>
 8007412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007414:	2a00      	cmp	r2, #0
 8007416:	f000 808b 	beq.w	8007530 <_dtoa_r+0x800>
 800741a:	9a06      	ldr	r2, [sp, #24]
 800741c:	2a01      	cmp	r2, #1
 800741e:	dc6e      	bgt.n	80074fe <_dtoa_r+0x7ce>
 8007420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007422:	2a00      	cmp	r2, #0
 8007424:	d067      	beq.n	80074f6 <_dtoa_r+0x7c6>
 8007426:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800742a:	9f07      	ldr	r7, [sp, #28]
 800742c:	9d05      	ldr	r5, [sp, #20]
 800742e:	9a05      	ldr	r2, [sp, #20]
 8007430:	2101      	movs	r1, #1
 8007432:	441a      	add	r2, r3
 8007434:	4620      	mov	r0, r4
 8007436:	9205      	str	r2, [sp, #20]
 8007438:	4498      	add	r8, r3
 800743a:	f000 fcf3 	bl	8007e24 <__i2b>
 800743e:	4606      	mov	r6, r0
 8007440:	2d00      	cmp	r5, #0
 8007442:	dd0c      	ble.n	800745e <_dtoa_r+0x72e>
 8007444:	f1b8 0f00 	cmp.w	r8, #0
 8007448:	dd09      	ble.n	800745e <_dtoa_r+0x72e>
 800744a:	4545      	cmp	r5, r8
 800744c:	9a05      	ldr	r2, [sp, #20]
 800744e:	462b      	mov	r3, r5
 8007450:	bfa8      	it	ge
 8007452:	4643      	movge	r3, r8
 8007454:	1ad2      	subs	r2, r2, r3
 8007456:	9205      	str	r2, [sp, #20]
 8007458:	1aed      	subs	r5, r5, r3
 800745a:	eba8 0803 	sub.w	r8, r8, r3
 800745e:	9b07      	ldr	r3, [sp, #28]
 8007460:	b1eb      	cbz	r3, 800749e <_dtoa_r+0x76e>
 8007462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007464:	2b00      	cmp	r3, #0
 8007466:	d067      	beq.n	8007538 <_dtoa_r+0x808>
 8007468:	b18f      	cbz	r7, 800748e <_dtoa_r+0x75e>
 800746a:	4631      	mov	r1, r6
 800746c:	463a      	mov	r2, r7
 800746e:	4620      	mov	r0, r4
 8007470:	f000 fd78 	bl	8007f64 <__pow5mult>
 8007474:	9a04      	ldr	r2, [sp, #16]
 8007476:	4601      	mov	r1, r0
 8007478:	4606      	mov	r6, r0
 800747a:	4620      	mov	r0, r4
 800747c:	f000 fcdb 	bl	8007e36 <__multiply>
 8007480:	9904      	ldr	r1, [sp, #16]
 8007482:	9008      	str	r0, [sp, #32]
 8007484:	4620      	mov	r0, r4
 8007486:	f000 fc2d 	bl	8007ce4 <_Bfree>
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	9b07      	ldr	r3, [sp, #28]
 8007490:	1bda      	subs	r2, r3, r7
 8007492:	d004      	beq.n	800749e <_dtoa_r+0x76e>
 8007494:	9904      	ldr	r1, [sp, #16]
 8007496:	4620      	mov	r0, r4
 8007498:	f000 fd64 	bl	8007f64 <__pow5mult>
 800749c:	9004      	str	r0, [sp, #16]
 800749e:	2101      	movs	r1, #1
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 fcbf 	bl	8007e24 <__i2b>
 80074a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a8:	4607      	mov	r7, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 81d0 	beq.w	8007850 <_dtoa_r+0xb20>
 80074b0:	461a      	mov	r2, r3
 80074b2:	4601      	mov	r1, r0
 80074b4:	4620      	mov	r0, r4
 80074b6:	f000 fd55 	bl	8007f64 <__pow5mult>
 80074ba:	9b06      	ldr	r3, [sp, #24]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	4607      	mov	r7, r0
 80074c0:	dc40      	bgt.n	8007544 <_dtoa_r+0x814>
 80074c2:	9b00      	ldr	r3, [sp, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d139      	bne.n	800753c <_dtoa_r+0x80c>
 80074c8:	9b01      	ldr	r3, [sp, #4]
 80074ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d136      	bne.n	8007540 <_dtoa_r+0x810>
 80074d2:	9b01      	ldr	r3, [sp, #4]
 80074d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074d8:	0d1b      	lsrs	r3, r3, #20
 80074da:	051b      	lsls	r3, r3, #20
 80074dc:	b12b      	cbz	r3, 80074ea <_dtoa_r+0x7ba>
 80074de:	9b05      	ldr	r3, [sp, #20]
 80074e0:	3301      	adds	r3, #1
 80074e2:	9305      	str	r3, [sp, #20]
 80074e4:	f108 0801 	add.w	r8, r8, #1
 80074e8:	2301      	movs	r3, #1
 80074ea:	9307      	str	r3, [sp, #28]
 80074ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d12a      	bne.n	8007548 <_dtoa_r+0x818>
 80074f2:	2001      	movs	r0, #1
 80074f4:	e030      	b.n	8007558 <_dtoa_r+0x828>
 80074f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074fc:	e795      	b.n	800742a <_dtoa_r+0x6fa>
 80074fe:	9b07      	ldr	r3, [sp, #28]
 8007500:	f109 37ff 	add.w	r7, r9, #4294967295
 8007504:	42bb      	cmp	r3, r7
 8007506:	bfbf      	itttt	lt
 8007508:	9b07      	ldrlt	r3, [sp, #28]
 800750a:	9707      	strlt	r7, [sp, #28]
 800750c:	1afa      	sublt	r2, r7, r3
 800750e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007510:	bfbb      	ittet	lt
 8007512:	189b      	addlt	r3, r3, r2
 8007514:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007516:	1bdf      	subge	r7, r3, r7
 8007518:	2700      	movlt	r7, #0
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	bfb5      	itete	lt
 8007520:	9b05      	ldrlt	r3, [sp, #20]
 8007522:	9d05      	ldrge	r5, [sp, #20]
 8007524:	eba3 0509 	sublt.w	r5, r3, r9
 8007528:	464b      	movge	r3, r9
 800752a:	bfb8      	it	lt
 800752c:	2300      	movlt	r3, #0
 800752e:	e77e      	b.n	800742e <_dtoa_r+0x6fe>
 8007530:	9f07      	ldr	r7, [sp, #28]
 8007532:	9d05      	ldr	r5, [sp, #20]
 8007534:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007536:	e783      	b.n	8007440 <_dtoa_r+0x710>
 8007538:	9a07      	ldr	r2, [sp, #28]
 800753a:	e7ab      	b.n	8007494 <_dtoa_r+0x764>
 800753c:	2300      	movs	r3, #0
 800753e:	e7d4      	b.n	80074ea <_dtoa_r+0x7ba>
 8007540:	9b00      	ldr	r3, [sp, #0]
 8007542:	e7d2      	b.n	80074ea <_dtoa_r+0x7ba>
 8007544:	2300      	movs	r3, #0
 8007546:	9307      	str	r3, [sp, #28]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800754e:	6918      	ldr	r0, [r3, #16]
 8007550:	f000 fc1a 	bl	8007d88 <__hi0bits>
 8007554:	f1c0 0020 	rsb	r0, r0, #32
 8007558:	4440      	add	r0, r8
 800755a:	f010 001f 	ands.w	r0, r0, #31
 800755e:	d047      	beq.n	80075f0 <_dtoa_r+0x8c0>
 8007560:	f1c0 0320 	rsb	r3, r0, #32
 8007564:	2b04      	cmp	r3, #4
 8007566:	dd3b      	ble.n	80075e0 <_dtoa_r+0x8b0>
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	f1c0 001c 	rsb	r0, r0, #28
 800756e:	4403      	add	r3, r0
 8007570:	9305      	str	r3, [sp, #20]
 8007572:	4405      	add	r5, r0
 8007574:	4480      	add	r8, r0
 8007576:	9b05      	ldr	r3, [sp, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	dd05      	ble.n	8007588 <_dtoa_r+0x858>
 800757c:	461a      	mov	r2, r3
 800757e:	9904      	ldr	r1, [sp, #16]
 8007580:	4620      	mov	r0, r4
 8007582:	f000 fd3d 	bl	8008000 <__lshift>
 8007586:	9004      	str	r0, [sp, #16]
 8007588:	f1b8 0f00 	cmp.w	r8, #0
 800758c:	dd05      	ble.n	800759a <_dtoa_r+0x86a>
 800758e:	4639      	mov	r1, r7
 8007590:	4642      	mov	r2, r8
 8007592:	4620      	mov	r0, r4
 8007594:	f000 fd34 	bl	8008000 <__lshift>
 8007598:	4607      	mov	r7, r0
 800759a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800759c:	b353      	cbz	r3, 80075f4 <_dtoa_r+0x8c4>
 800759e:	4639      	mov	r1, r7
 80075a0:	9804      	ldr	r0, [sp, #16]
 80075a2:	f000 fd81 	bl	80080a8 <__mcmp>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	da24      	bge.n	80075f4 <_dtoa_r+0x8c4>
 80075aa:	2300      	movs	r3, #0
 80075ac:	220a      	movs	r2, #10
 80075ae:	9904      	ldr	r1, [sp, #16]
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 fbae 	bl	8007d12 <__multadd>
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	9004      	str	r0, [sp, #16]
 80075ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 814d 	beq.w	800785e <_dtoa_r+0xb2e>
 80075c4:	2300      	movs	r3, #0
 80075c6:	4631      	mov	r1, r6
 80075c8:	220a      	movs	r2, #10
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 fba1 	bl	8007d12 <__multadd>
 80075d0:	9b02      	ldr	r3, [sp, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	4606      	mov	r6, r0
 80075d6:	dc4f      	bgt.n	8007678 <_dtoa_r+0x948>
 80075d8:	9b06      	ldr	r3, [sp, #24]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	dd4c      	ble.n	8007678 <_dtoa_r+0x948>
 80075de:	e011      	b.n	8007604 <_dtoa_r+0x8d4>
 80075e0:	d0c9      	beq.n	8007576 <_dtoa_r+0x846>
 80075e2:	9a05      	ldr	r2, [sp, #20]
 80075e4:	331c      	adds	r3, #28
 80075e6:	441a      	add	r2, r3
 80075e8:	9205      	str	r2, [sp, #20]
 80075ea:	441d      	add	r5, r3
 80075ec:	4498      	add	r8, r3
 80075ee:	e7c2      	b.n	8007576 <_dtoa_r+0x846>
 80075f0:	4603      	mov	r3, r0
 80075f2:	e7f6      	b.n	80075e2 <_dtoa_r+0x8b2>
 80075f4:	f1b9 0f00 	cmp.w	r9, #0
 80075f8:	dc38      	bgt.n	800766c <_dtoa_r+0x93c>
 80075fa:	9b06      	ldr	r3, [sp, #24]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	dd35      	ble.n	800766c <_dtoa_r+0x93c>
 8007600:	f8cd 9008 	str.w	r9, [sp, #8]
 8007604:	9b02      	ldr	r3, [sp, #8]
 8007606:	b963      	cbnz	r3, 8007622 <_dtoa_r+0x8f2>
 8007608:	4639      	mov	r1, r7
 800760a:	2205      	movs	r2, #5
 800760c:	4620      	mov	r0, r4
 800760e:	f000 fb80 	bl	8007d12 <__multadd>
 8007612:	4601      	mov	r1, r0
 8007614:	4607      	mov	r7, r0
 8007616:	9804      	ldr	r0, [sp, #16]
 8007618:	f000 fd46 	bl	80080a8 <__mcmp>
 800761c:	2800      	cmp	r0, #0
 800761e:	f73f adcc 	bgt.w	80071ba <_dtoa_r+0x48a>
 8007622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007624:	465d      	mov	r5, fp
 8007626:	ea6f 0a03 	mvn.w	sl, r3
 800762a:	f04f 0900 	mov.w	r9, #0
 800762e:	4639      	mov	r1, r7
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fb57 	bl	8007ce4 <_Bfree>
 8007636:	2e00      	cmp	r6, #0
 8007638:	f43f aeb7 	beq.w	80073aa <_dtoa_r+0x67a>
 800763c:	f1b9 0f00 	cmp.w	r9, #0
 8007640:	d005      	beq.n	800764e <_dtoa_r+0x91e>
 8007642:	45b1      	cmp	r9, r6
 8007644:	d003      	beq.n	800764e <_dtoa_r+0x91e>
 8007646:	4649      	mov	r1, r9
 8007648:	4620      	mov	r0, r4
 800764a:	f000 fb4b 	bl	8007ce4 <_Bfree>
 800764e:	4631      	mov	r1, r6
 8007650:	4620      	mov	r0, r4
 8007652:	f000 fb47 	bl	8007ce4 <_Bfree>
 8007656:	e6a8      	b.n	80073aa <_dtoa_r+0x67a>
 8007658:	2700      	movs	r7, #0
 800765a:	463e      	mov	r6, r7
 800765c:	e7e1      	b.n	8007622 <_dtoa_r+0x8f2>
 800765e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007662:	463e      	mov	r6, r7
 8007664:	e5a9      	b.n	80071ba <_dtoa_r+0x48a>
 8007666:	bf00      	nop
 8007668:	40240000 	.word	0x40240000
 800766c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800766e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80fa 	beq.w	800786c <_dtoa_r+0xb3c>
 8007678:	2d00      	cmp	r5, #0
 800767a:	dd05      	ble.n	8007688 <_dtoa_r+0x958>
 800767c:	4631      	mov	r1, r6
 800767e:	462a      	mov	r2, r5
 8007680:	4620      	mov	r0, r4
 8007682:	f000 fcbd 	bl	8008000 <__lshift>
 8007686:	4606      	mov	r6, r0
 8007688:	9b07      	ldr	r3, [sp, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d04c      	beq.n	8007728 <_dtoa_r+0x9f8>
 800768e:	6871      	ldr	r1, [r6, #4]
 8007690:	4620      	mov	r0, r4
 8007692:	f000 faf3 	bl	8007c7c <_Balloc>
 8007696:	6932      	ldr	r2, [r6, #16]
 8007698:	3202      	adds	r2, #2
 800769a:	4605      	mov	r5, r0
 800769c:	0092      	lsls	r2, r2, #2
 800769e:	f106 010c 	add.w	r1, r6, #12
 80076a2:	300c      	adds	r0, #12
 80076a4:	f7fe fc44 	bl	8005f30 <memcpy>
 80076a8:	2201      	movs	r2, #1
 80076aa:	4629      	mov	r1, r5
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fca7 	bl	8008000 <__lshift>
 80076b2:	9b00      	ldr	r3, [sp, #0]
 80076b4:	f8cd b014 	str.w	fp, [sp, #20]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	46b1      	mov	r9, r6
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	4606      	mov	r6, r0
 80076c2:	4639      	mov	r1, r7
 80076c4:	9804      	ldr	r0, [sp, #16]
 80076c6:	f7ff faa5 	bl	8006c14 <quorem>
 80076ca:	4649      	mov	r1, r9
 80076cc:	4605      	mov	r5, r0
 80076ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80076d2:	9804      	ldr	r0, [sp, #16]
 80076d4:	f000 fce8 	bl	80080a8 <__mcmp>
 80076d8:	4632      	mov	r2, r6
 80076da:	9000      	str	r0, [sp, #0]
 80076dc:	4639      	mov	r1, r7
 80076de:	4620      	mov	r0, r4
 80076e0:	f000 fcfc 	bl	80080dc <__mdiff>
 80076e4:	68c3      	ldr	r3, [r0, #12]
 80076e6:	4602      	mov	r2, r0
 80076e8:	bb03      	cbnz	r3, 800772c <_dtoa_r+0x9fc>
 80076ea:	4601      	mov	r1, r0
 80076ec:	9008      	str	r0, [sp, #32]
 80076ee:	9804      	ldr	r0, [sp, #16]
 80076f0:	f000 fcda 	bl	80080a8 <__mcmp>
 80076f4:	9a08      	ldr	r2, [sp, #32]
 80076f6:	4603      	mov	r3, r0
 80076f8:	4611      	mov	r1, r2
 80076fa:	4620      	mov	r0, r4
 80076fc:	9308      	str	r3, [sp, #32]
 80076fe:	f000 faf1 	bl	8007ce4 <_Bfree>
 8007702:	9b08      	ldr	r3, [sp, #32]
 8007704:	b9a3      	cbnz	r3, 8007730 <_dtoa_r+0xa00>
 8007706:	9a06      	ldr	r2, [sp, #24]
 8007708:	b992      	cbnz	r2, 8007730 <_dtoa_r+0xa00>
 800770a:	9a07      	ldr	r2, [sp, #28]
 800770c:	b982      	cbnz	r2, 8007730 <_dtoa_r+0xa00>
 800770e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007712:	d029      	beq.n	8007768 <_dtoa_r+0xa38>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd01      	ble.n	800771e <_dtoa_r+0x9ee>
 800771a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800771e:	9b05      	ldr	r3, [sp, #20]
 8007720:	1c5d      	adds	r5, r3, #1
 8007722:	f883 8000 	strb.w	r8, [r3]
 8007726:	e782      	b.n	800762e <_dtoa_r+0x8fe>
 8007728:	4630      	mov	r0, r6
 800772a:	e7c2      	b.n	80076b2 <_dtoa_r+0x982>
 800772c:	2301      	movs	r3, #1
 800772e:	e7e3      	b.n	80076f8 <_dtoa_r+0x9c8>
 8007730:	9a00      	ldr	r2, [sp, #0]
 8007732:	2a00      	cmp	r2, #0
 8007734:	db04      	blt.n	8007740 <_dtoa_r+0xa10>
 8007736:	d125      	bne.n	8007784 <_dtoa_r+0xa54>
 8007738:	9a06      	ldr	r2, [sp, #24]
 800773a:	bb1a      	cbnz	r2, 8007784 <_dtoa_r+0xa54>
 800773c:	9a07      	ldr	r2, [sp, #28]
 800773e:	bb0a      	cbnz	r2, 8007784 <_dtoa_r+0xa54>
 8007740:	2b00      	cmp	r3, #0
 8007742:	ddec      	ble.n	800771e <_dtoa_r+0x9ee>
 8007744:	2201      	movs	r2, #1
 8007746:	9904      	ldr	r1, [sp, #16]
 8007748:	4620      	mov	r0, r4
 800774a:	f000 fc59 	bl	8008000 <__lshift>
 800774e:	4639      	mov	r1, r7
 8007750:	9004      	str	r0, [sp, #16]
 8007752:	f000 fca9 	bl	80080a8 <__mcmp>
 8007756:	2800      	cmp	r0, #0
 8007758:	dc03      	bgt.n	8007762 <_dtoa_r+0xa32>
 800775a:	d1e0      	bne.n	800771e <_dtoa_r+0x9ee>
 800775c:	f018 0f01 	tst.w	r8, #1
 8007760:	d0dd      	beq.n	800771e <_dtoa_r+0x9ee>
 8007762:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007766:	d1d8      	bne.n	800771a <_dtoa_r+0x9ea>
 8007768:	9b05      	ldr	r3, [sp, #20]
 800776a:	9a05      	ldr	r2, [sp, #20]
 800776c:	1c5d      	adds	r5, r3, #1
 800776e:	2339      	movs	r3, #57	; 0x39
 8007770:	7013      	strb	r3, [r2, #0]
 8007772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007776:	2b39      	cmp	r3, #57	; 0x39
 8007778:	f105 32ff 	add.w	r2, r5, #4294967295
 800777c:	d04f      	beq.n	800781e <_dtoa_r+0xaee>
 800777e:	3301      	adds	r3, #1
 8007780:	7013      	strb	r3, [r2, #0]
 8007782:	e754      	b.n	800762e <_dtoa_r+0x8fe>
 8007784:	9a05      	ldr	r2, [sp, #20]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f102 0501 	add.w	r5, r2, #1
 800778c:	dd06      	ble.n	800779c <_dtoa_r+0xa6c>
 800778e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007792:	d0e9      	beq.n	8007768 <_dtoa_r+0xa38>
 8007794:	f108 0801 	add.w	r8, r8, #1
 8007798:	9b05      	ldr	r3, [sp, #20]
 800779a:	e7c2      	b.n	8007722 <_dtoa_r+0x9f2>
 800779c:	9a02      	ldr	r2, [sp, #8]
 800779e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80077a2:	eba5 030b 	sub.w	r3, r5, fp
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d021      	beq.n	80077ee <_dtoa_r+0xabe>
 80077aa:	2300      	movs	r3, #0
 80077ac:	220a      	movs	r2, #10
 80077ae:	9904      	ldr	r1, [sp, #16]
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 faae 	bl	8007d12 <__multadd>
 80077b6:	45b1      	cmp	r9, r6
 80077b8:	9004      	str	r0, [sp, #16]
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	f04f 020a 	mov.w	r2, #10
 80077c2:	4649      	mov	r1, r9
 80077c4:	4620      	mov	r0, r4
 80077c6:	d105      	bne.n	80077d4 <_dtoa_r+0xaa4>
 80077c8:	f000 faa3 	bl	8007d12 <__multadd>
 80077cc:	4681      	mov	r9, r0
 80077ce:	4606      	mov	r6, r0
 80077d0:	9505      	str	r5, [sp, #20]
 80077d2:	e776      	b.n	80076c2 <_dtoa_r+0x992>
 80077d4:	f000 fa9d 	bl	8007d12 <__multadd>
 80077d8:	4631      	mov	r1, r6
 80077da:	4681      	mov	r9, r0
 80077dc:	2300      	movs	r3, #0
 80077de:	220a      	movs	r2, #10
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fa96 	bl	8007d12 <__multadd>
 80077e6:	4606      	mov	r6, r0
 80077e8:	e7f2      	b.n	80077d0 <_dtoa_r+0xaa0>
 80077ea:	f04f 0900 	mov.w	r9, #0
 80077ee:	2201      	movs	r2, #1
 80077f0:	9904      	ldr	r1, [sp, #16]
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 fc04 	bl	8008000 <__lshift>
 80077f8:	4639      	mov	r1, r7
 80077fa:	9004      	str	r0, [sp, #16]
 80077fc:	f000 fc54 	bl	80080a8 <__mcmp>
 8007800:	2800      	cmp	r0, #0
 8007802:	dcb6      	bgt.n	8007772 <_dtoa_r+0xa42>
 8007804:	d102      	bne.n	800780c <_dtoa_r+0xadc>
 8007806:	f018 0f01 	tst.w	r8, #1
 800780a:	d1b2      	bne.n	8007772 <_dtoa_r+0xa42>
 800780c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007810:	2b30      	cmp	r3, #48	; 0x30
 8007812:	f105 32ff 	add.w	r2, r5, #4294967295
 8007816:	f47f af0a 	bne.w	800762e <_dtoa_r+0x8fe>
 800781a:	4615      	mov	r5, r2
 800781c:	e7f6      	b.n	800780c <_dtoa_r+0xadc>
 800781e:	4593      	cmp	fp, r2
 8007820:	d105      	bne.n	800782e <_dtoa_r+0xafe>
 8007822:	2331      	movs	r3, #49	; 0x31
 8007824:	f10a 0a01 	add.w	sl, sl, #1
 8007828:	f88b 3000 	strb.w	r3, [fp]
 800782c:	e6ff      	b.n	800762e <_dtoa_r+0x8fe>
 800782e:	4615      	mov	r5, r2
 8007830:	e79f      	b.n	8007772 <_dtoa_r+0xa42>
 8007832:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007898 <_dtoa_r+0xb68>
 8007836:	e007      	b.n	8007848 <_dtoa_r+0xb18>
 8007838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800783a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800789c <_dtoa_r+0xb6c>
 800783e:	b11b      	cbz	r3, 8007848 <_dtoa_r+0xb18>
 8007840:	f10b 0308 	add.w	r3, fp, #8
 8007844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	4658      	mov	r0, fp
 800784a:	b017      	add	sp, #92	; 0x5c
 800784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007850:	9b06      	ldr	r3, [sp, #24]
 8007852:	2b01      	cmp	r3, #1
 8007854:	f77f ae35 	ble.w	80074c2 <_dtoa_r+0x792>
 8007858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800785a:	9307      	str	r3, [sp, #28]
 800785c:	e649      	b.n	80074f2 <_dtoa_r+0x7c2>
 800785e:	9b02      	ldr	r3, [sp, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	dc03      	bgt.n	800786c <_dtoa_r+0xb3c>
 8007864:	9b06      	ldr	r3, [sp, #24]
 8007866:	2b02      	cmp	r3, #2
 8007868:	f73f aecc 	bgt.w	8007604 <_dtoa_r+0x8d4>
 800786c:	465d      	mov	r5, fp
 800786e:	4639      	mov	r1, r7
 8007870:	9804      	ldr	r0, [sp, #16]
 8007872:	f7ff f9cf 	bl	8006c14 <quorem>
 8007876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800787a:	f805 8b01 	strb.w	r8, [r5], #1
 800787e:	9a02      	ldr	r2, [sp, #8]
 8007880:	eba5 030b 	sub.w	r3, r5, fp
 8007884:	429a      	cmp	r2, r3
 8007886:	ddb0      	ble.n	80077ea <_dtoa_r+0xaba>
 8007888:	2300      	movs	r3, #0
 800788a:	220a      	movs	r2, #10
 800788c:	9904      	ldr	r1, [sp, #16]
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fa3f 	bl	8007d12 <__multadd>
 8007894:	9004      	str	r0, [sp, #16]
 8007896:	e7ea      	b.n	800786e <_dtoa_r+0xb3e>
 8007898:	0807a230 	.word	0x0807a230
 800789c:	0807a254 	.word	0x0807a254

080078a0 <__sflush_r>:
 80078a0:	898a      	ldrh	r2, [r1, #12]
 80078a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a6:	4605      	mov	r5, r0
 80078a8:	0710      	lsls	r0, r2, #28
 80078aa:	460c      	mov	r4, r1
 80078ac:	d458      	bmi.n	8007960 <__sflush_r+0xc0>
 80078ae:	684b      	ldr	r3, [r1, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc05      	bgt.n	80078c0 <__sflush_r+0x20>
 80078b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dc02      	bgt.n	80078c0 <__sflush_r+0x20>
 80078ba:	2000      	movs	r0, #0
 80078bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078c2:	2e00      	cmp	r6, #0
 80078c4:	d0f9      	beq.n	80078ba <__sflush_r+0x1a>
 80078c6:	2300      	movs	r3, #0
 80078c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078cc:	682f      	ldr	r7, [r5, #0]
 80078ce:	6a21      	ldr	r1, [r4, #32]
 80078d0:	602b      	str	r3, [r5, #0]
 80078d2:	d032      	beq.n	800793a <__sflush_r+0x9a>
 80078d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	075a      	lsls	r2, r3, #29
 80078da:	d505      	bpl.n	80078e8 <__sflush_r+0x48>
 80078dc:	6863      	ldr	r3, [r4, #4]
 80078de:	1ac0      	subs	r0, r0, r3
 80078e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078e2:	b10b      	cbz	r3, 80078e8 <__sflush_r+0x48>
 80078e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078e6:	1ac0      	subs	r0, r0, r3
 80078e8:	2300      	movs	r3, #0
 80078ea:	4602      	mov	r2, r0
 80078ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078ee:	6a21      	ldr	r1, [r4, #32]
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b0      	blx	r6
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	d106      	bne.n	8007908 <__sflush_r+0x68>
 80078fa:	6829      	ldr	r1, [r5, #0]
 80078fc:	291d      	cmp	r1, #29
 80078fe:	d848      	bhi.n	8007992 <__sflush_r+0xf2>
 8007900:	4a29      	ldr	r2, [pc, #164]	; (80079a8 <__sflush_r+0x108>)
 8007902:	40ca      	lsrs	r2, r1
 8007904:	07d6      	lsls	r6, r2, #31
 8007906:	d544      	bpl.n	8007992 <__sflush_r+0xf2>
 8007908:	2200      	movs	r2, #0
 800790a:	6062      	str	r2, [r4, #4]
 800790c:	04d9      	lsls	r1, r3, #19
 800790e:	6922      	ldr	r2, [r4, #16]
 8007910:	6022      	str	r2, [r4, #0]
 8007912:	d504      	bpl.n	800791e <__sflush_r+0x7e>
 8007914:	1c42      	adds	r2, r0, #1
 8007916:	d101      	bne.n	800791c <__sflush_r+0x7c>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b903      	cbnz	r3, 800791e <__sflush_r+0x7e>
 800791c:	6560      	str	r0, [r4, #84]	; 0x54
 800791e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007920:	602f      	str	r7, [r5, #0]
 8007922:	2900      	cmp	r1, #0
 8007924:	d0c9      	beq.n	80078ba <__sflush_r+0x1a>
 8007926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800792a:	4299      	cmp	r1, r3
 800792c:	d002      	beq.n	8007934 <__sflush_r+0x94>
 800792e:	4628      	mov	r0, r5
 8007930:	f7fe fb20 	bl	8005f74 <_free_r>
 8007934:	2000      	movs	r0, #0
 8007936:	6360      	str	r0, [r4, #52]	; 0x34
 8007938:	e7c0      	b.n	80078bc <__sflush_r+0x1c>
 800793a:	2301      	movs	r3, #1
 800793c:	4628      	mov	r0, r5
 800793e:	47b0      	blx	r6
 8007940:	1c41      	adds	r1, r0, #1
 8007942:	d1c8      	bne.n	80078d6 <__sflush_r+0x36>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0c5      	beq.n	80078d6 <__sflush_r+0x36>
 800794a:	2b1d      	cmp	r3, #29
 800794c:	d001      	beq.n	8007952 <__sflush_r+0xb2>
 800794e:	2b16      	cmp	r3, #22
 8007950:	d101      	bne.n	8007956 <__sflush_r+0xb6>
 8007952:	602f      	str	r7, [r5, #0]
 8007954:	e7b1      	b.n	80078ba <__sflush_r+0x1a>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	e7ad      	b.n	80078bc <__sflush_r+0x1c>
 8007960:	690f      	ldr	r7, [r1, #16]
 8007962:	2f00      	cmp	r7, #0
 8007964:	d0a9      	beq.n	80078ba <__sflush_r+0x1a>
 8007966:	0793      	lsls	r3, r2, #30
 8007968:	680e      	ldr	r6, [r1, #0]
 800796a:	bf08      	it	eq
 800796c:	694b      	ldreq	r3, [r1, #20]
 800796e:	600f      	str	r7, [r1, #0]
 8007970:	bf18      	it	ne
 8007972:	2300      	movne	r3, #0
 8007974:	eba6 0807 	sub.w	r8, r6, r7
 8007978:	608b      	str	r3, [r1, #8]
 800797a:	f1b8 0f00 	cmp.w	r8, #0
 800797e:	dd9c      	ble.n	80078ba <__sflush_r+0x1a>
 8007980:	4643      	mov	r3, r8
 8007982:	463a      	mov	r2, r7
 8007984:	6a21      	ldr	r1, [r4, #32]
 8007986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007988:	4628      	mov	r0, r5
 800798a:	47b0      	blx	r6
 800798c:	2800      	cmp	r0, #0
 800798e:	dc06      	bgt.n	800799e <__sflush_r+0xfe>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	e78e      	b.n	80078bc <__sflush_r+0x1c>
 800799e:	4407      	add	r7, r0
 80079a0:	eba8 0800 	sub.w	r8, r8, r0
 80079a4:	e7e9      	b.n	800797a <__sflush_r+0xda>
 80079a6:	bf00      	nop
 80079a8:	20400001 	.word	0x20400001

080079ac <_fflush_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	690b      	ldr	r3, [r1, #16]
 80079b0:	4605      	mov	r5, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	b1db      	cbz	r3, 80079ee <_fflush_r+0x42>
 80079b6:	b118      	cbz	r0, 80079c0 <_fflush_r+0x14>
 80079b8:	6983      	ldr	r3, [r0, #24]
 80079ba:	b90b      	cbnz	r3, 80079c0 <_fflush_r+0x14>
 80079bc:	f000 f860 	bl	8007a80 <__sinit>
 80079c0:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <_fflush_r+0x48>)
 80079c2:	429c      	cmp	r4, r3
 80079c4:	d109      	bne.n	80079da <_fflush_r+0x2e>
 80079c6:	686c      	ldr	r4, [r5, #4]
 80079c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079cc:	b17b      	cbz	r3, 80079ee <_fflush_r+0x42>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d6:	f7ff bf63 	b.w	80078a0 <__sflush_r>
 80079da:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <_fflush_r+0x4c>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	d101      	bne.n	80079e4 <_fflush_r+0x38>
 80079e0:	68ac      	ldr	r4, [r5, #8]
 80079e2:	e7f1      	b.n	80079c8 <_fflush_r+0x1c>
 80079e4:	4b05      	ldr	r3, [pc, #20]	; (80079fc <_fflush_r+0x50>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	bf08      	it	eq
 80079ea:	68ec      	ldreq	r4, [r5, #12]
 80079ec:	e7ec      	b.n	80079c8 <_fflush_r+0x1c>
 80079ee:	2000      	movs	r0, #0
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	bf00      	nop
 80079f4:	0807a284 	.word	0x0807a284
 80079f8:	0807a2a4 	.word	0x0807a2a4
 80079fc:	0807a264 	.word	0x0807a264

08007a00 <std>:
 8007a00:	2300      	movs	r3, #0
 8007a02:	b510      	push	{r4, lr}
 8007a04:	4604      	mov	r4, r0
 8007a06:	e9c0 3300 	strd	r3, r3, [r0]
 8007a0a:	6083      	str	r3, [r0, #8]
 8007a0c:	8181      	strh	r1, [r0, #12]
 8007a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a10:	81c2      	strh	r2, [r0, #14]
 8007a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a16:	6183      	str	r3, [r0, #24]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	305c      	adds	r0, #92	; 0x5c
 8007a1e:	f7fe fa92 	bl	8005f46 <memset>
 8007a22:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <std+0x38>)
 8007a24:	6263      	str	r3, [r4, #36]	; 0x24
 8007a26:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <std+0x3c>)
 8007a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <std+0x40>)
 8007a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <std+0x44>)
 8007a30:	6224      	str	r4, [r4, #32]
 8007a32:	6323      	str	r3, [r4, #48]	; 0x30
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	bf00      	nop
 8007a38:	080084b5 	.word	0x080084b5
 8007a3c:	080084d7 	.word	0x080084d7
 8007a40:	0800850f 	.word	0x0800850f
 8007a44:	08008533 	.word	0x08008533

08007a48 <_cleanup_r>:
 8007a48:	4901      	ldr	r1, [pc, #4]	; (8007a50 <_cleanup_r+0x8>)
 8007a4a:	f000 b885 	b.w	8007b58 <_fwalk_reent>
 8007a4e:	bf00      	nop
 8007a50:	080079ad 	.word	0x080079ad

08007a54 <__sfmoreglue>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	1e4a      	subs	r2, r1, #1
 8007a58:	2568      	movs	r5, #104	; 0x68
 8007a5a:	4355      	muls	r5, r2
 8007a5c:	460e      	mov	r6, r1
 8007a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a62:	f7fe fad5 	bl	8006010 <_malloc_r>
 8007a66:	4604      	mov	r4, r0
 8007a68:	b140      	cbz	r0, 8007a7c <__sfmoreglue+0x28>
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8007a70:	300c      	adds	r0, #12
 8007a72:	60a0      	str	r0, [r4, #8]
 8007a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a78:	f7fe fa65 	bl	8005f46 <memset>
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}

08007a80 <__sinit>:
 8007a80:	6983      	ldr	r3, [r0, #24]
 8007a82:	b510      	push	{r4, lr}
 8007a84:	4604      	mov	r4, r0
 8007a86:	bb33      	cbnz	r3, 8007ad6 <__sinit+0x56>
 8007a88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007a8c:	6503      	str	r3, [r0, #80]	; 0x50
 8007a8e:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <__sinit+0x58>)
 8007a90:	4a12      	ldr	r2, [pc, #72]	; (8007adc <__sinit+0x5c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6282      	str	r2, [r0, #40]	; 0x28
 8007a96:	4298      	cmp	r0, r3
 8007a98:	bf04      	itt	eq
 8007a9a:	2301      	moveq	r3, #1
 8007a9c:	6183      	streq	r3, [r0, #24]
 8007a9e:	f000 f81f 	bl	8007ae0 <__sfp>
 8007aa2:	6060      	str	r0, [r4, #4]
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 f81b 	bl	8007ae0 <__sfp>
 8007aaa:	60a0      	str	r0, [r4, #8]
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 f817 	bl	8007ae0 <__sfp>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	60e0      	str	r0, [r4, #12]
 8007ab6:	2104      	movs	r1, #4
 8007ab8:	6860      	ldr	r0, [r4, #4]
 8007aba:	f7ff ffa1 	bl	8007a00 <std>
 8007abe:	2201      	movs	r2, #1
 8007ac0:	2109      	movs	r1, #9
 8007ac2:	68a0      	ldr	r0, [r4, #8]
 8007ac4:	f7ff ff9c 	bl	8007a00 <std>
 8007ac8:	2202      	movs	r2, #2
 8007aca:	2112      	movs	r1, #18
 8007acc:	68e0      	ldr	r0, [r4, #12]
 8007ace:	f7ff ff97 	bl	8007a00 <std>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	61a3      	str	r3, [r4, #24]
 8007ad6:	bd10      	pop	{r4, pc}
 8007ad8:	0807a21c 	.word	0x0807a21c
 8007adc:	08007a49 	.word	0x08007a49

08007ae0 <__sfp>:
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae2:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <__sfp+0x70>)
 8007ae4:	681e      	ldr	r6, [r3, #0]
 8007ae6:	69b3      	ldr	r3, [r6, #24]
 8007ae8:	4607      	mov	r7, r0
 8007aea:	b913      	cbnz	r3, 8007af2 <__sfp+0x12>
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff ffc7 	bl	8007a80 <__sinit>
 8007af2:	3648      	adds	r6, #72	; 0x48
 8007af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	d503      	bpl.n	8007b04 <__sfp+0x24>
 8007afc:	6833      	ldr	r3, [r6, #0]
 8007afe:	b133      	cbz	r3, 8007b0e <__sfp+0x2e>
 8007b00:	6836      	ldr	r6, [r6, #0]
 8007b02:	e7f7      	b.n	8007af4 <__sfp+0x14>
 8007b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b08:	b16d      	cbz	r5, 8007b26 <__sfp+0x46>
 8007b0a:	3468      	adds	r4, #104	; 0x68
 8007b0c:	e7f4      	b.n	8007af8 <__sfp+0x18>
 8007b0e:	2104      	movs	r1, #4
 8007b10:	4638      	mov	r0, r7
 8007b12:	f7ff ff9f 	bl	8007a54 <__sfmoreglue>
 8007b16:	6030      	str	r0, [r6, #0]
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d1f1      	bne.n	8007b00 <__sfp+0x20>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	4604      	mov	r4, r0
 8007b22:	4620      	mov	r0, r4
 8007b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <__sfp+0x74>)
 8007b28:	6665      	str	r5, [r4, #100]	; 0x64
 8007b2a:	e9c4 5500 	strd	r5, r5, [r4]
 8007b2e:	60a5      	str	r5, [r4, #8]
 8007b30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007b34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007b38:	2208      	movs	r2, #8
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b40:	f7fe fa01 	bl	8005f46 <memset>
 8007b44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b4c:	e7e9      	b.n	8007b22 <__sfp+0x42>
 8007b4e:	bf00      	nop
 8007b50:	0807a21c 	.word	0x0807a21c
 8007b54:	ffff0001 	.word	0xffff0001

08007b58 <_fwalk_reent>:
 8007b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	4689      	mov	r9, r1
 8007b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b64:	2600      	movs	r6, #0
 8007b66:	b914      	cbnz	r4, 8007b6e <_fwalk_reent+0x16>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007b72:	3f01      	subs	r7, #1
 8007b74:	d501      	bpl.n	8007b7a <_fwalk_reent+0x22>
 8007b76:	6824      	ldr	r4, [r4, #0]
 8007b78:	e7f5      	b.n	8007b66 <_fwalk_reent+0xe>
 8007b7a:	89ab      	ldrh	r3, [r5, #12]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d907      	bls.n	8007b90 <_fwalk_reent+0x38>
 8007b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b84:	3301      	adds	r3, #1
 8007b86:	d003      	beq.n	8007b90 <_fwalk_reent+0x38>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	47c8      	blx	r9
 8007b8e:	4306      	orrs	r6, r0
 8007b90:	3568      	adds	r5, #104	; 0x68
 8007b92:	e7ee      	b.n	8007b72 <_fwalk_reent+0x1a>

08007b94 <_localeconv_r>:
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <_localeconv_r+0x14>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6a18      	ldr	r0, [r3, #32]
 8007b9a:	4b04      	ldr	r3, [pc, #16]	; (8007bac <_localeconv_r+0x18>)
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	bf08      	it	eq
 8007ba0:	4618      	moveq	r0, r3
 8007ba2:	30f0      	adds	r0, #240	; 0xf0
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	20001c40 	.word	0x20001c40
 8007bac:	20001ca4 	.word	0x20001ca4

08007bb0 <__swhatbuf_r>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	460e      	mov	r6, r1
 8007bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb8:	2900      	cmp	r1, #0
 8007bba:	b096      	sub	sp, #88	; 0x58
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	da07      	bge.n	8007bd2 <__swhatbuf_r+0x22>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	602b      	str	r3, [r5, #0]
 8007bc6:	89b3      	ldrh	r3, [r6, #12]
 8007bc8:	061a      	lsls	r2, r3, #24
 8007bca:	d410      	bmi.n	8007bee <__swhatbuf_r+0x3e>
 8007bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd0:	e00e      	b.n	8007bf0 <__swhatbuf_r+0x40>
 8007bd2:	466a      	mov	r2, sp
 8007bd4:	f000 fcd4 	bl	8008580 <_fstat_r>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	dbf2      	blt.n	8007bc2 <__swhatbuf_r+0x12>
 8007bdc:	9a01      	ldr	r2, [sp, #4]
 8007bde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007be2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007be6:	425a      	negs	r2, r3
 8007be8:	415a      	adcs	r2, r3
 8007bea:	602a      	str	r2, [r5, #0]
 8007bec:	e7ee      	b.n	8007bcc <__swhatbuf_r+0x1c>
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	b016      	add	sp, #88	; 0x58
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}

08007bf8 <__smakebuf_r>:
 8007bf8:	898b      	ldrh	r3, [r1, #12]
 8007bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bfc:	079d      	lsls	r5, r3, #30
 8007bfe:	4606      	mov	r6, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	d507      	bpl.n	8007c14 <__smakebuf_r+0x1c>
 8007c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	6163      	str	r3, [r4, #20]
 8007c10:	b002      	add	sp, #8
 8007c12:	bd70      	pop	{r4, r5, r6, pc}
 8007c14:	ab01      	add	r3, sp, #4
 8007c16:	466a      	mov	r2, sp
 8007c18:	f7ff ffca 	bl	8007bb0 <__swhatbuf_r>
 8007c1c:	9900      	ldr	r1, [sp, #0]
 8007c1e:	4605      	mov	r5, r0
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7fe f9f5 	bl	8006010 <_malloc_r>
 8007c26:	b948      	cbnz	r0, 8007c3c <__smakebuf_r+0x44>
 8007c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2c:	059a      	lsls	r2, r3, #22
 8007c2e:	d4ef      	bmi.n	8007c10 <__smakebuf_r+0x18>
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	f043 0302 	orr.w	r3, r3, #2
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	e7e3      	b.n	8007c04 <__smakebuf_r+0xc>
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <__smakebuf_r+0x7c>)
 8007c3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	6020      	str	r0, [r4, #0]
 8007c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	9b00      	ldr	r3, [sp, #0]
 8007c4c:	6163      	str	r3, [r4, #20]
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	6120      	str	r0, [r4, #16]
 8007c52:	b15b      	cbz	r3, 8007c6c <__smakebuf_r+0x74>
 8007c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f000 fca3 	bl	80085a4 <_isatty_r>
 8007c5e:	b128      	cbz	r0, 8007c6c <__smakebuf_r+0x74>
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	f023 0303 	bic.w	r3, r3, #3
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	81a3      	strh	r3, [r4, #12]
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	431d      	orrs	r5, r3
 8007c70:	81a5      	strh	r5, [r4, #12]
 8007c72:	e7cd      	b.n	8007c10 <__smakebuf_r+0x18>
 8007c74:	08007a49 	.word	0x08007a49

08007c78 <__malloc_lock>:
 8007c78:	4770      	bx	lr

08007c7a <__malloc_unlock>:
 8007c7a:	4770      	bx	lr

08007c7c <_Balloc>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c80:	4604      	mov	r4, r0
 8007c82:	460e      	mov	r6, r1
 8007c84:	b93d      	cbnz	r5, 8007c96 <_Balloc+0x1a>
 8007c86:	2010      	movs	r0, #16
 8007c88:	f7fe f942 	bl	8005f10 <malloc>
 8007c8c:	6260      	str	r0, [r4, #36]	; 0x24
 8007c8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c92:	6005      	str	r5, [r0, #0]
 8007c94:	60c5      	str	r5, [r0, #12]
 8007c96:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007c98:	68eb      	ldr	r3, [r5, #12]
 8007c9a:	b183      	cbz	r3, 8007cbe <_Balloc+0x42>
 8007c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007ca4:	b9b8      	cbnz	r0, 8007cd6 <_Balloc+0x5a>
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	fa01 f506 	lsl.w	r5, r1, r6
 8007cac:	1d6a      	adds	r2, r5, #5
 8007cae:	0092      	lsls	r2, r2, #2
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f7fe f950 	bl	8005f56 <_calloc_r>
 8007cb6:	b160      	cbz	r0, 8007cd2 <_Balloc+0x56>
 8007cb8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007cbc:	e00e      	b.n	8007cdc <_Balloc+0x60>
 8007cbe:	2221      	movs	r2, #33	; 0x21
 8007cc0:	2104      	movs	r1, #4
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f7fe f947 	bl	8005f56 <_calloc_r>
 8007cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cca:	60e8      	str	r0, [r5, #12]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e4      	bne.n	8007c9c <_Balloc+0x20>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	6802      	ldr	r2, [r0, #0]
 8007cd8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ce2:	e7f7      	b.n	8007cd4 <_Balloc+0x58>

08007ce4 <_Bfree>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ce8:	4606      	mov	r6, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	b93c      	cbnz	r4, 8007cfe <_Bfree+0x1a>
 8007cee:	2010      	movs	r0, #16
 8007cf0:	f7fe f90e 	bl	8005f10 <malloc>
 8007cf4:	6270      	str	r0, [r6, #36]	; 0x24
 8007cf6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cfa:	6004      	str	r4, [r0, #0]
 8007cfc:	60c4      	str	r4, [r0, #12]
 8007cfe:	b13d      	cbz	r5, 8007d10 <_Bfree+0x2c>
 8007d00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d02:	686a      	ldr	r2, [r5, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d0a:	6029      	str	r1, [r5, #0]
 8007d0c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007d10:	bd70      	pop	{r4, r5, r6, pc}

08007d12 <__multadd>:
 8007d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d16:	690d      	ldr	r5, [r1, #16]
 8007d18:	461f      	mov	r7, r3
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	f101 0c14 	add.w	ip, r1, #20
 8007d22:	2300      	movs	r3, #0
 8007d24:	f8dc 0000 	ldr.w	r0, [ip]
 8007d28:	b281      	uxth	r1, r0
 8007d2a:	fb02 7101 	mla	r1, r2, r1, r7
 8007d2e:	0c0f      	lsrs	r7, r1, #16
 8007d30:	0c00      	lsrs	r0, r0, #16
 8007d32:	fb02 7000 	mla	r0, r2, r0, r7
 8007d36:	b289      	uxth	r1, r1
 8007d38:	3301      	adds	r3, #1
 8007d3a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007d3e:	429d      	cmp	r5, r3
 8007d40:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007d44:	f84c 1b04 	str.w	r1, [ip], #4
 8007d48:	dcec      	bgt.n	8007d24 <__multadd+0x12>
 8007d4a:	b1d7      	cbz	r7, 8007d82 <__multadd+0x70>
 8007d4c:	68a3      	ldr	r3, [r4, #8]
 8007d4e:	42ab      	cmp	r3, r5
 8007d50:	dc12      	bgt.n	8007d78 <__multadd+0x66>
 8007d52:	6861      	ldr	r1, [r4, #4]
 8007d54:	4630      	mov	r0, r6
 8007d56:	3101      	adds	r1, #1
 8007d58:	f7ff ff90 	bl	8007c7c <_Balloc>
 8007d5c:	6922      	ldr	r2, [r4, #16]
 8007d5e:	3202      	adds	r2, #2
 8007d60:	f104 010c 	add.w	r1, r4, #12
 8007d64:	4680      	mov	r8, r0
 8007d66:	0092      	lsls	r2, r2, #2
 8007d68:	300c      	adds	r0, #12
 8007d6a:	f7fe f8e1 	bl	8005f30 <memcpy>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff ffb7 	bl	8007ce4 <_Bfree>
 8007d76:	4644      	mov	r4, r8
 8007d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d7c:	3501      	adds	r5, #1
 8007d7e:	615f      	str	r7, [r3, #20]
 8007d80:	6125      	str	r5, [r4, #16]
 8007d82:	4620      	mov	r0, r4
 8007d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d88 <__hi0bits>:
 8007d88:	0c02      	lsrs	r2, r0, #16
 8007d8a:	0412      	lsls	r2, r2, #16
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	b9b2      	cbnz	r2, 8007dbe <__hi0bits+0x36>
 8007d90:	0403      	lsls	r3, r0, #16
 8007d92:	2010      	movs	r0, #16
 8007d94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d98:	bf04      	itt	eq
 8007d9a:	021b      	lsleq	r3, r3, #8
 8007d9c:	3008      	addeq	r0, #8
 8007d9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007da2:	bf04      	itt	eq
 8007da4:	011b      	lsleq	r3, r3, #4
 8007da6:	3004      	addeq	r0, #4
 8007da8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007dac:	bf04      	itt	eq
 8007dae:	009b      	lsleq	r3, r3, #2
 8007db0:	3002      	addeq	r0, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	db06      	blt.n	8007dc4 <__hi0bits+0x3c>
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	d503      	bpl.n	8007dc2 <__hi0bits+0x3a>
 8007dba:	3001      	adds	r0, #1
 8007dbc:	4770      	bx	lr
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e7e8      	b.n	8007d94 <__hi0bits+0xc>
 8007dc2:	2020      	movs	r0, #32
 8007dc4:	4770      	bx	lr

08007dc6 <__lo0bits>:
 8007dc6:	6803      	ldr	r3, [r0, #0]
 8007dc8:	f013 0207 	ands.w	r2, r3, #7
 8007dcc:	4601      	mov	r1, r0
 8007dce:	d00b      	beq.n	8007de8 <__lo0bits+0x22>
 8007dd0:	07da      	lsls	r2, r3, #31
 8007dd2:	d423      	bmi.n	8007e1c <__lo0bits+0x56>
 8007dd4:	0798      	lsls	r0, r3, #30
 8007dd6:	bf49      	itett	mi
 8007dd8:	085b      	lsrmi	r3, r3, #1
 8007dda:	089b      	lsrpl	r3, r3, #2
 8007ddc:	2001      	movmi	r0, #1
 8007dde:	600b      	strmi	r3, [r1, #0]
 8007de0:	bf5c      	itt	pl
 8007de2:	600b      	strpl	r3, [r1, #0]
 8007de4:	2002      	movpl	r0, #2
 8007de6:	4770      	bx	lr
 8007de8:	b298      	uxth	r0, r3
 8007dea:	b9a8      	cbnz	r0, 8007e18 <__lo0bits+0x52>
 8007dec:	0c1b      	lsrs	r3, r3, #16
 8007dee:	2010      	movs	r0, #16
 8007df0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007df4:	bf04      	itt	eq
 8007df6:	0a1b      	lsreq	r3, r3, #8
 8007df8:	3008      	addeq	r0, #8
 8007dfa:	071a      	lsls	r2, r3, #28
 8007dfc:	bf04      	itt	eq
 8007dfe:	091b      	lsreq	r3, r3, #4
 8007e00:	3004      	addeq	r0, #4
 8007e02:	079a      	lsls	r2, r3, #30
 8007e04:	bf04      	itt	eq
 8007e06:	089b      	lsreq	r3, r3, #2
 8007e08:	3002      	addeq	r0, #2
 8007e0a:	07da      	lsls	r2, r3, #31
 8007e0c:	d402      	bmi.n	8007e14 <__lo0bits+0x4e>
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	d006      	beq.n	8007e20 <__lo0bits+0x5a>
 8007e12:	3001      	adds	r0, #1
 8007e14:	600b      	str	r3, [r1, #0]
 8007e16:	4770      	bx	lr
 8007e18:	4610      	mov	r0, r2
 8007e1a:	e7e9      	b.n	8007df0 <__lo0bits+0x2a>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	4770      	bx	lr
 8007e20:	2020      	movs	r0, #32
 8007e22:	4770      	bx	lr

08007e24 <__i2b>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	460c      	mov	r4, r1
 8007e28:	2101      	movs	r1, #1
 8007e2a:	f7ff ff27 	bl	8007c7c <_Balloc>
 8007e2e:	2201      	movs	r2, #1
 8007e30:	6144      	str	r4, [r0, #20]
 8007e32:	6102      	str	r2, [r0, #16]
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <__multiply>:
 8007e36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	4614      	mov	r4, r2
 8007e3c:	690a      	ldr	r2, [r1, #16]
 8007e3e:	6923      	ldr	r3, [r4, #16]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	bfb8      	it	lt
 8007e44:	460b      	movlt	r3, r1
 8007e46:	4688      	mov	r8, r1
 8007e48:	bfbc      	itt	lt
 8007e4a:	46a0      	movlt	r8, r4
 8007e4c:	461c      	movlt	r4, r3
 8007e4e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e52:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e5e:	eb07 0609 	add.w	r6, r7, r9
 8007e62:	42b3      	cmp	r3, r6
 8007e64:	bfb8      	it	lt
 8007e66:	3101      	addlt	r1, #1
 8007e68:	f7ff ff08 	bl	8007c7c <_Balloc>
 8007e6c:	f100 0514 	add.w	r5, r0, #20
 8007e70:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007e74:	462b      	mov	r3, r5
 8007e76:	2200      	movs	r2, #0
 8007e78:	4573      	cmp	r3, lr
 8007e7a:	d316      	bcc.n	8007eaa <__multiply+0x74>
 8007e7c:	f104 0214 	add.w	r2, r4, #20
 8007e80:	f108 0114 	add.w	r1, r8, #20
 8007e84:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007e88:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	9b00      	ldr	r3, [sp, #0]
 8007e90:	9201      	str	r2, [sp, #4]
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d80c      	bhi.n	8007eb0 <__multiply+0x7a>
 8007e96:	2e00      	cmp	r6, #0
 8007e98:	dd03      	ble.n	8007ea2 <__multiply+0x6c>
 8007e9a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d05d      	beq.n	8007f5e <__multiply+0x128>
 8007ea2:	6106      	str	r6, [r0, #16]
 8007ea4:	b003      	add	sp, #12
 8007ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eaa:	f843 2b04 	str.w	r2, [r3], #4
 8007eae:	e7e3      	b.n	8007e78 <__multiply+0x42>
 8007eb0:	f8b2 b000 	ldrh.w	fp, [r2]
 8007eb4:	f1bb 0f00 	cmp.w	fp, #0
 8007eb8:	d023      	beq.n	8007f02 <__multiply+0xcc>
 8007eba:	4689      	mov	r9, r1
 8007ebc:	46ac      	mov	ip, r5
 8007ebe:	f04f 0800 	mov.w	r8, #0
 8007ec2:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ec6:	f8dc a000 	ldr.w	sl, [ip]
 8007eca:	b2a3      	uxth	r3, r4
 8007ecc:	fa1f fa8a 	uxth.w	sl, sl
 8007ed0:	fb0b a303 	mla	r3, fp, r3, sl
 8007ed4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007ed8:	f8dc 4000 	ldr.w	r4, [ip]
 8007edc:	4443      	add	r3, r8
 8007ede:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007ee2:	fb0b 840a 	mla	r4, fp, sl, r8
 8007ee6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007eea:	46e2      	mov	sl, ip
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007ef2:	454f      	cmp	r7, r9
 8007ef4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007ef8:	f84a 3b04 	str.w	r3, [sl], #4
 8007efc:	d82b      	bhi.n	8007f56 <__multiply+0x120>
 8007efe:	f8cc 8004 	str.w	r8, [ip, #4]
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007f08:	3204      	adds	r2, #4
 8007f0a:	f1ba 0f00 	cmp.w	sl, #0
 8007f0e:	d020      	beq.n	8007f52 <__multiply+0x11c>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	4689      	mov	r9, r1
 8007f14:	46a8      	mov	r8, r5
 8007f16:	f04f 0b00 	mov.w	fp, #0
 8007f1a:	f8b9 c000 	ldrh.w	ip, [r9]
 8007f1e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007f22:	fb0a 440c 	mla	r4, sl, ip, r4
 8007f26:	445c      	add	r4, fp
 8007f28:	46c4      	mov	ip, r8
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007f30:	f84c 3b04 	str.w	r3, [ip], #4
 8007f34:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f38:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007f3c:	0c1b      	lsrs	r3, r3, #16
 8007f3e:	fb0a b303 	mla	r3, sl, r3, fp
 8007f42:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007f46:	454f      	cmp	r7, r9
 8007f48:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007f4c:	d805      	bhi.n	8007f5a <__multiply+0x124>
 8007f4e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f52:	3504      	adds	r5, #4
 8007f54:	e79b      	b.n	8007e8e <__multiply+0x58>
 8007f56:	46d4      	mov	ip, sl
 8007f58:	e7b3      	b.n	8007ec2 <__multiply+0x8c>
 8007f5a:	46e0      	mov	r8, ip
 8007f5c:	e7dd      	b.n	8007f1a <__multiply+0xe4>
 8007f5e:	3e01      	subs	r6, #1
 8007f60:	e799      	b.n	8007e96 <__multiply+0x60>
	...

08007f64 <__pow5mult>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4615      	mov	r5, r2
 8007f6a:	f012 0203 	ands.w	r2, r2, #3
 8007f6e:	4606      	mov	r6, r0
 8007f70:	460f      	mov	r7, r1
 8007f72:	d007      	beq.n	8007f84 <__pow5mult+0x20>
 8007f74:	3a01      	subs	r2, #1
 8007f76:	4c21      	ldr	r4, [pc, #132]	; (8007ffc <__pow5mult+0x98>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f7e:	f7ff fec8 	bl	8007d12 <__multadd>
 8007f82:	4607      	mov	r7, r0
 8007f84:	10ad      	asrs	r5, r5, #2
 8007f86:	d035      	beq.n	8007ff4 <__pow5mult+0x90>
 8007f88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f8a:	b93c      	cbnz	r4, 8007f9c <__pow5mult+0x38>
 8007f8c:	2010      	movs	r0, #16
 8007f8e:	f7fd ffbf 	bl	8005f10 <malloc>
 8007f92:	6270      	str	r0, [r6, #36]	; 0x24
 8007f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f98:	6004      	str	r4, [r0, #0]
 8007f9a:	60c4      	str	r4, [r0, #12]
 8007f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fa4:	b94c      	cbnz	r4, 8007fba <__pow5mult+0x56>
 8007fa6:	f240 2171 	movw	r1, #625	; 0x271
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ff3a 	bl	8007e24 <__i2b>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	6003      	str	r3, [r0, #0]
 8007fba:	f04f 0800 	mov.w	r8, #0
 8007fbe:	07eb      	lsls	r3, r5, #31
 8007fc0:	d50a      	bpl.n	8007fd8 <__pow5mult+0x74>
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ff35 	bl	8007e36 <__multiply>
 8007fcc:	4639      	mov	r1, r7
 8007fce:	4681      	mov	r9, r0
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff fe87 	bl	8007ce4 <_Bfree>
 8007fd6:	464f      	mov	r7, r9
 8007fd8:	106d      	asrs	r5, r5, #1
 8007fda:	d00b      	beq.n	8007ff4 <__pow5mult+0x90>
 8007fdc:	6820      	ldr	r0, [r4, #0]
 8007fde:	b938      	cbnz	r0, 8007ff0 <__pow5mult+0x8c>
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff ff26 	bl	8007e36 <__multiply>
 8007fea:	6020      	str	r0, [r4, #0]
 8007fec:	f8c0 8000 	str.w	r8, [r0]
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	e7e4      	b.n	8007fbe <__pow5mult+0x5a>
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffa:	bf00      	nop
 8007ffc:	0807a3b8 	.word	0x0807a3b8

08008000 <__lshift>:
 8008000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	460c      	mov	r4, r1
 8008006:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	6849      	ldr	r1, [r1, #4]
 800800e:	eb0a 0903 	add.w	r9, sl, r3
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	4607      	mov	r7, r0
 8008016:	4616      	mov	r6, r2
 8008018:	f109 0501 	add.w	r5, r9, #1
 800801c:	42ab      	cmp	r3, r5
 800801e:	db32      	blt.n	8008086 <__lshift+0x86>
 8008020:	4638      	mov	r0, r7
 8008022:	f7ff fe2b 	bl	8007c7c <_Balloc>
 8008026:	2300      	movs	r3, #0
 8008028:	4680      	mov	r8, r0
 800802a:	f100 0114 	add.w	r1, r0, #20
 800802e:	461a      	mov	r2, r3
 8008030:	4553      	cmp	r3, sl
 8008032:	db2b      	blt.n	800808c <__lshift+0x8c>
 8008034:	6920      	ldr	r0, [r4, #16]
 8008036:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800803a:	f104 0314 	add.w	r3, r4, #20
 800803e:	f016 021f 	ands.w	r2, r6, #31
 8008042:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008046:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800804a:	d025      	beq.n	8008098 <__lshift+0x98>
 800804c:	f1c2 0e20 	rsb	lr, r2, #32
 8008050:	2000      	movs	r0, #0
 8008052:	681e      	ldr	r6, [r3, #0]
 8008054:	468a      	mov	sl, r1
 8008056:	4096      	lsls	r6, r2
 8008058:	4330      	orrs	r0, r6
 800805a:	f84a 0b04 	str.w	r0, [sl], #4
 800805e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008062:	459c      	cmp	ip, r3
 8008064:	fa20 f00e 	lsr.w	r0, r0, lr
 8008068:	d814      	bhi.n	8008094 <__lshift+0x94>
 800806a:	6048      	str	r0, [r1, #4]
 800806c:	b108      	cbz	r0, 8008072 <__lshift+0x72>
 800806e:	f109 0502 	add.w	r5, r9, #2
 8008072:	3d01      	subs	r5, #1
 8008074:	4638      	mov	r0, r7
 8008076:	f8c8 5010 	str.w	r5, [r8, #16]
 800807a:	4621      	mov	r1, r4
 800807c:	f7ff fe32 	bl	8007ce4 <_Bfree>
 8008080:	4640      	mov	r0, r8
 8008082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008086:	3101      	adds	r1, #1
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	e7c7      	b.n	800801c <__lshift+0x1c>
 800808c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008090:	3301      	adds	r3, #1
 8008092:	e7cd      	b.n	8008030 <__lshift+0x30>
 8008094:	4651      	mov	r1, sl
 8008096:	e7dc      	b.n	8008052 <__lshift+0x52>
 8008098:	3904      	subs	r1, #4
 800809a:	f853 2b04 	ldr.w	r2, [r3], #4
 800809e:	f841 2f04 	str.w	r2, [r1, #4]!
 80080a2:	459c      	cmp	ip, r3
 80080a4:	d8f9      	bhi.n	800809a <__lshift+0x9a>
 80080a6:	e7e4      	b.n	8008072 <__lshift+0x72>

080080a8 <__mcmp>:
 80080a8:	6903      	ldr	r3, [r0, #16]
 80080aa:	690a      	ldr	r2, [r1, #16]
 80080ac:	1a9b      	subs	r3, r3, r2
 80080ae:	b530      	push	{r4, r5, lr}
 80080b0:	d10c      	bne.n	80080cc <__mcmp+0x24>
 80080b2:	0092      	lsls	r2, r2, #2
 80080b4:	3014      	adds	r0, #20
 80080b6:	3114      	adds	r1, #20
 80080b8:	1884      	adds	r4, r0, r2
 80080ba:	4411      	add	r1, r2
 80080bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080c4:	4295      	cmp	r5, r2
 80080c6:	d003      	beq.n	80080d0 <__mcmp+0x28>
 80080c8:	d305      	bcc.n	80080d6 <__mcmp+0x2e>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4618      	mov	r0, r3
 80080ce:	bd30      	pop	{r4, r5, pc}
 80080d0:	42a0      	cmp	r0, r4
 80080d2:	d3f3      	bcc.n	80080bc <__mcmp+0x14>
 80080d4:	e7fa      	b.n	80080cc <__mcmp+0x24>
 80080d6:	f04f 33ff 	mov.w	r3, #4294967295
 80080da:	e7f7      	b.n	80080cc <__mcmp+0x24>

080080dc <__mdiff>:
 80080dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e0:	460d      	mov	r5, r1
 80080e2:	4607      	mov	r7, r0
 80080e4:	4611      	mov	r1, r2
 80080e6:	4628      	mov	r0, r5
 80080e8:	4614      	mov	r4, r2
 80080ea:	f7ff ffdd 	bl	80080a8 <__mcmp>
 80080ee:	1e06      	subs	r6, r0, #0
 80080f0:	d108      	bne.n	8008104 <__mdiff+0x28>
 80080f2:	4631      	mov	r1, r6
 80080f4:	4638      	mov	r0, r7
 80080f6:	f7ff fdc1 	bl	8007c7c <_Balloc>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008104:	bfa4      	itt	ge
 8008106:	4623      	movge	r3, r4
 8008108:	462c      	movge	r4, r5
 800810a:	4638      	mov	r0, r7
 800810c:	6861      	ldr	r1, [r4, #4]
 800810e:	bfa6      	itte	ge
 8008110:	461d      	movge	r5, r3
 8008112:	2600      	movge	r6, #0
 8008114:	2601      	movlt	r6, #1
 8008116:	f7ff fdb1 	bl	8007c7c <_Balloc>
 800811a:	692b      	ldr	r3, [r5, #16]
 800811c:	60c6      	str	r6, [r0, #12]
 800811e:	6926      	ldr	r6, [r4, #16]
 8008120:	f105 0914 	add.w	r9, r5, #20
 8008124:	f104 0214 	add.w	r2, r4, #20
 8008128:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800812c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008130:	f100 0514 	add.w	r5, r0, #20
 8008134:	f04f 0e00 	mov.w	lr, #0
 8008138:	f852 ab04 	ldr.w	sl, [r2], #4
 800813c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008140:	fa1e f18a 	uxtah	r1, lr, sl
 8008144:	b2a3      	uxth	r3, r4
 8008146:	1ac9      	subs	r1, r1, r3
 8008148:	0c23      	lsrs	r3, r4, #16
 800814a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800814e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008152:	b289      	uxth	r1, r1
 8008154:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008158:	45c8      	cmp	r8, r9
 800815a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800815e:	4694      	mov	ip, r2
 8008160:	f845 3b04 	str.w	r3, [r5], #4
 8008164:	d8e8      	bhi.n	8008138 <__mdiff+0x5c>
 8008166:	45bc      	cmp	ip, r7
 8008168:	d304      	bcc.n	8008174 <__mdiff+0x98>
 800816a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800816e:	b183      	cbz	r3, 8008192 <__mdiff+0xb6>
 8008170:	6106      	str	r6, [r0, #16]
 8008172:	e7c5      	b.n	8008100 <__mdiff+0x24>
 8008174:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008178:	fa1e f381 	uxtah	r3, lr, r1
 800817c:	141a      	asrs	r2, r3, #16
 800817e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008188:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800818c:	f845 3b04 	str.w	r3, [r5], #4
 8008190:	e7e9      	b.n	8008166 <__mdiff+0x8a>
 8008192:	3e01      	subs	r6, #1
 8008194:	e7e9      	b.n	800816a <__mdiff+0x8e>

08008196 <__d2b>:
 8008196:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800819a:	460e      	mov	r6, r1
 800819c:	2101      	movs	r1, #1
 800819e:	ec59 8b10 	vmov	r8, r9, d0
 80081a2:	4615      	mov	r5, r2
 80081a4:	f7ff fd6a 	bl	8007c7c <_Balloc>
 80081a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80081ac:	4607      	mov	r7, r0
 80081ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081b2:	bb34      	cbnz	r4, 8008202 <__d2b+0x6c>
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	f1b8 0300 	subs.w	r3, r8, #0
 80081ba:	d027      	beq.n	800820c <__d2b+0x76>
 80081bc:	a802      	add	r0, sp, #8
 80081be:	f840 3d08 	str.w	r3, [r0, #-8]!
 80081c2:	f7ff fe00 	bl	8007dc6 <__lo0bits>
 80081c6:	9900      	ldr	r1, [sp, #0]
 80081c8:	b1f0      	cbz	r0, 8008208 <__d2b+0x72>
 80081ca:	9a01      	ldr	r2, [sp, #4]
 80081cc:	f1c0 0320 	rsb	r3, r0, #32
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	430b      	orrs	r3, r1
 80081d6:	40c2      	lsrs	r2, r0
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	9201      	str	r2, [sp, #4]
 80081dc:	9b01      	ldr	r3, [sp, #4]
 80081de:	61bb      	str	r3, [r7, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bf14      	ite	ne
 80081e4:	2102      	movne	r1, #2
 80081e6:	2101      	moveq	r1, #1
 80081e8:	6139      	str	r1, [r7, #16]
 80081ea:	b1c4      	cbz	r4, 800821e <__d2b+0x88>
 80081ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80081f0:	4404      	add	r4, r0
 80081f2:	6034      	str	r4, [r6, #0]
 80081f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081f8:	6028      	str	r0, [r5, #0]
 80081fa:	4638      	mov	r0, r7
 80081fc:	b003      	add	sp, #12
 80081fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008206:	e7d5      	b.n	80081b4 <__d2b+0x1e>
 8008208:	6179      	str	r1, [r7, #20]
 800820a:	e7e7      	b.n	80081dc <__d2b+0x46>
 800820c:	a801      	add	r0, sp, #4
 800820e:	f7ff fdda 	bl	8007dc6 <__lo0bits>
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	2101      	movs	r1, #1
 8008218:	6139      	str	r1, [r7, #16]
 800821a:	3020      	adds	r0, #32
 800821c:	e7e5      	b.n	80081ea <__d2b+0x54>
 800821e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008222:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008226:	6030      	str	r0, [r6, #0]
 8008228:	6918      	ldr	r0, [r3, #16]
 800822a:	f7ff fdad 	bl	8007d88 <__hi0bits>
 800822e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008232:	e7e1      	b.n	80081f8 <__d2b+0x62>

08008234 <__sfputc_r>:
 8008234:	6893      	ldr	r3, [r2, #8]
 8008236:	3b01      	subs	r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	b410      	push	{r4}
 800823c:	6093      	str	r3, [r2, #8]
 800823e:	da08      	bge.n	8008252 <__sfputc_r+0x1e>
 8008240:	6994      	ldr	r4, [r2, #24]
 8008242:	42a3      	cmp	r3, r4
 8008244:	db01      	blt.n	800824a <__sfputc_r+0x16>
 8008246:	290a      	cmp	r1, #10
 8008248:	d103      	bne.n	8008252 <__sfputc_r+0x1e>
 800824a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800824e:	f7fe bc21 	b.w	8006a94 <__swbuf_r>
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	1c58      	adds	r0, r3, #1
 8008256:	6010      	str	r0, [r2, #0]
 8008258:	7019      	strb	r1, [r3, #0]
 800825a:	4608      	mov	r0, r1
 800825c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008260:	4770      	bx	lr

08008262 <__sfputs_r>:
 8008262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008264:	4606      	mov	r6, r0
 8008266:	460f      	mov	r7, r1
 8008268:	4614      	mov	r4, r2
 800826a:	18d5      	adds	r5, r2, r3
 800826c:	42ac      	cmp	r4, r5
 800826e:	d101      	bne.n	8008274 <__sfputs_r+0x12>
 8008270:	2000      	movs	r0, #0
 8008272:	e007      	b.n	8008284 <__sfputs_r+0x22>
 8008274:	463a      	mov	r2, r7
 8008276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800827a:	4630      	mov	r0, r6
 800827c:	f7ff ffda 	bl	8008234 <__sfputc_r>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d1f3      	bne.n	800826c <__sfputs_r+0xa>
 8008284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008288 <_vfiprintf_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	460c      	mov	r4, r1
 800828e:	b09d      	sub	sp, #116	; 0x74
 8008290:	4617      	mov	r7, r2
 8008292:	461d      	mov	r5, r3
 8008294:	4606      	mov	r6, r0
 8008296:	b118      	cbz	r0, 80082a0 <_vfiprintf_r+0x18>
 8008298:	6983      	ldr	r3, [r0, #24]
 800829a:	b90b      	cbnz	r3, 80082a0 <_vfiprintf_r+0x18>
 800829c:	f7ff fbf0 	bl	8007a80 <__sinit>
 80082a0:	4b7c      	ldr	r3, [pc, #496]	; (8008494 <_vfiprintf_r+0x20c>)
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d158      	bne.n	8008358 <_vfiprintf_r+0xd0>
 80082a6:	6874      	ldr	r4, [r6, #4]
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	0718      	lsls	r0, r3, #28
 80082ac:	d55e      	bpl.n	800836c <_vfiprintf_r+0xe4>
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d05b      	beq.n	800836c <_vfiprintf_r+0xe4>
 80082b4:	2300      	movs	r3, #0
 80082b6:	9309      	str	r3, [sp, #36]	; 0x24
 80082b8:	2320      	movs	r3, #32
 80082ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082be:	2330      	movs	r3, #48	; 0x30
 80082c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082c4:	9503      	str	r5, [sp, #12]
 80082c6:	f04f 0b01 	mov.w	fp, #1
 80082ca:	46b8      	mov	r8, r7
 80082cc:	4645      	mov	r5, r8
 80082ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082d2:	b10b      	cbz	r3, 80082d8 <_vfiprintf_r+0x50>
 80082d4:	2b25      	cmp	r3, #37	; 0x25
 80082d6:	d154      	bne.n	8008382 <_vfiprintf_r+0xfa>
 80082d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80082dc:	d00b      	beq.n	80082f6 <_vfiprintf_r+0x6e>
 80082de:	4653      	mov	r3, sl
 80082e0:	463a      	mov	r2, r7
 80082e2:	4621      	mov	r1, r4
 80082e4:	4630      	mov	r0, r6
 80082e6:	f7ff ffbc 	bl	8008262 <__sfputs_r>
 80082ea:	3001      	adds	r0, #1
 80082ec:	f000 80c2 	beq.w	8008474 <_vfiprintf_r+0x1ec>
 80082f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f2:	4453      	add	r3, sl
 80082f4:	9309      	str	r3, [sp, #36]	; 0x24
 80082f6:	f898 3000 	ldrb.w	r3, [r8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 80ba 	beq.w	8008474 <_vfiprintf_r+0x1ec>
 8008300:	2300      	movs	r3, #0
 8008302:	f04f 32ff 	mov.w	r2, #4294967295
 8008306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	9307      	str	r3, [sp, #28]
 800830e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008312:	931a      	str	r3, [sp, #104]	; 0x68
 8008314:	46a8      	mov	r8, r5
 8008316:	2205      	movs	r2, #5
 8008318:	f818 1b01 	ldrb.w	r1, [r8], #1
 800831c:	485e      	ldr	r0, [pc, #376]	; (8008498 <_vfiprintf_r+0x210>)
 800831e:	f7f7 ff67 	bl	80001f0 <memchr>
 8008322:	9b04      	ldr	r3, [sp, #16]
 8008324:	bb78      	cbnz	r0, 8008386 <_vfiprintf_r+0xfe>
 8008326:	06d9      	lsls	r1, r3, #27
 8008328:	bf44      	itt	mi
 800832a:	2220      	movmi	r2, #32
 800832c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008330:	071a      	lsls	r2, r3, #28
 8008332:	bf44      	itt	mi
 8008334:	222b      	movmi	r2, #43	; 0x2b
 8008336:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800833a:	782a      	ldrb	r2, [r5, #0]
 800833c:	2a2a      	cmp	r2, #42	; 0x2a
 800833e:	d02a      	beq.n	8008396 <_vfiprintf_r+0x10e>
 8008340:	9a07      	ldr	r2, [sp, #28]
 8008342:	46a8      	mov	r8, r5
 8008344:	2000      	movs	r0, #0
 8008346:	250a      	movs	r5, #10
 8008348:	4641      	mov	r1, r8
 800834a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800834e:	3b30      	subs	r3, #48	; 0x30
 8008350:	2b09      	cmp	r3, #9
 8008352:	d969      	bls.n	8008428 <_vfiprintf_r+0x1a0>
 8008354:	b360      	cbz	r0, 80083b0 <_vfiprintf_r+0x128>
 8008356:	e024      	b.n	80083a2 <_vfiprintf_r+0x11a>
 8008358:	4b50      	ldr	r3, [pc, #320]	; (800849c <_vfiprintf_r+0x214>)
 800835a:	429c      	cmp	r4, r3
 800835c:	d101      	bne.n	8008362 <_vfiprintf_r+0xda>
 800835e:	68b4      	ldr	r4, [r6, #8]
 8008360:	e7a2      	b.n	80082a8 <_vfiprintf_r+0x20>
 8008362:	4b4f      	ldr	r3, [pc, #316]	; (80084a0 <_vfiprintf_r+0x218>)
 8008364:	429c      	cmp	r4, r3
 8008366:	bf08      	it	eq
 8008368:	68f4      	ldreq	r4, [r6, #12]
 800836a:	e79d      	b.n	80082a8 <_vfiprintf_r+0x20>
 800836c:	4621      	mov	r1, r4
 800836e:	4630      	mov	r0, r6
 8008370:	f7fe fbe2 	bl	8006b38 <__swsetup_r>
 8008374:	2800      	cmp	r0, #0
 8008376:	d09d      	beq.n	80082b4 <_vfiprintf_r+0x2c>
 8008378:	f04f 30ff 	mov.w	r0, #4294967295
 800837c:	b01d      	add	sp, #116	; 0x74
 800837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008382:	46a8      	mov	r8, r5
 8008384:	e7a2      	b.n	80082cc <_vfiprintf_r+0x44>
 8008386:	4a44      	ldr	r2, [pc, #272]	; (8008498 <_vfiprintf_r+0x210>)
 8008388:	1a80      	subs	r0, r0, r2
 800838a:	fa0b f000 	lsl.w	r0, fp, r0
 800838e:	4318      	orrs	r0, r3
 8008390:	9004      	str	r0, [sp, #16]
 8008392:	4645      	mov	r5, r8
 8008394:	e7be      	b.n	8008314 <_vfiprintf_r+0x8c>
 8008396:	9a03      	ldr	r2, [sp, #12]
 8008398:	1d11      	adds	r1, r2, #4
 800839a:	6812      	ldr	r2, [r2, #0]
 800839c:	9103      	str	r1, [sp, #12]
 800839e:	2a00      	cmp	r2, #0
 80083a0:	db01      	blt.n	80083a6 <_vfiprintf_r+0x11e>
 80083a2:	9207      	str	r2, [sp, #28]
 80083a4:	e004      	b.n	80083b0 <_vfiprintf_r+0x128>
 80083a6:	4252      	negs	r2, r2
 80083a8:	f043 0302 	orr.w	r3, r3, #2
 80083ac:	9207      	str	r2, [sp, #28]
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	f898 3000 	ldrb.w	r3, [r8]
 80083b4:	2b2e      	cmp	r3, #46	; 0x2e
 80083b6:	d10e      	bne.n	80083d6 <_vfiprintf_r+0x14e>
 80083b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80083bc:	2b2a      	cmp	r3, #42	; 0x2a
 80083be:	d138      	bne.n	8008432 <_vfiprintf_r+0x1aa>
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	1d1a      	adds	r2, r3, #4
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	9203      	str	r2, [sp, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bfb8      	it	lt
 80083cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80083d0:	f108 0802 	add.w	r8, r8, #2
 80083d4:	9305      	str	r3, [sp, #20]
 80083d6:	4d33      	ldr	r5, [pc, #204]	; (80084a4 <_vfiprintf_r+0x21c>)
 80083d8:	f898 1000 	ldrb.w	r1, [r8]
 80083dc:	2203      	movs	r2, #3
 80083de:	4628      	mov	r0, r5
 80083e0:	f7f7 ff06 	bl	80001f0 <memchr>
 80083e4:	b140      	cbz	r0, 80083f8 <_vfiprintf_r+0x170>
 80083e6:	2340      	movs	r3, #64	; 0x40
 80083e8:	1b40      	subs	r0, r0, r5
 80083ea:	fa03 f000 	lsl.w	r0, r3, r0
 80083ee:	9b04      	ldr	r3, [sp, #16]
 80083f0:	4303      	orrs	r3, r0
 80083f2:	f108 0801 	add.w	r8, r8, #1
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	f898 1000 	ldrb.w	r1, [r8]
 80083fc:	482a      	ldr	r0, [pc, #168]	; (80084a8 <_vfiprintf_r+0x220>)
 80083fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008402:	2206      	movs	r2, #6
 8008404:	f108 0701 	add.w	r7, r8, #1
 8008408:	f7f7 fef2 	bl	80001f0 <memchr>
 800840c:	2800      	cmp	r0, #0
 800840e:	d037      	beq.n	8008480 <_vfiprintf_r+0x1f8>
 8008410:	4b26      	ldr	r3, [pc, #152]	; (80084ac <_vfiprintf_r+0x224>)
 8008412:	bb1b      	cbnz	r3, 800845c <_vfiprintf_r+0x1d4>
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	3307      	adds	r3, #7
 8008418:	f023 0307 	bic.w	r3, r3, #7
 800841c:	3308      	adds	r3, #8
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008422:	444b      	add	r3, r9
 8008424:	9309      	str	r3, [sp, #36]	; 0x24
 8008426:	e750      	b.n	80082ca <_vfiprintf_r+0x42>
 8008428:	fb05 3202 	mla	r2, r5, r2, r3
 800842c:	2001      	movs	r0, #1
 800842e:	4688      	mov	r8, r1
 8008430:	e78a      	b.n	8008348 <_vfiprintf_r+0xc0>
 8008432:	2300      	movs	r3, #0
 8008434:	f108 0801 	add.w	r8, r8, #1
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	4619      	mov	r1, r3
 800843c:	250a      	movs	r5, #10
 800843e:	4640      	mov	r0, r8
 8008440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008444:	3a30      	subs	r2, #48	; 0x30
 8008446:	2a09      	cmp	r2, #9
 8008448:	d903      	bls.n	8008452 <_vfiprintf_r+0x1ca>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0c3      	beq.n	80083d6 <_vfiprintf_r+0x14e>
 800844e:	9105      	str	r1, [sp, #20]
 8008450:	e7c1      	b.n	80083d6 <_vfiprintf_r+0x14e>
 8008452:	fb05 2101 	mla	r1, r5, r1, r2
 8008456:	2301      	movs	r3, #1
 8008458:	4680      	mov	r8, r0
 800845a:	e7f0      	b.n	800843e <_vfiprintf_r+0x1b6>
 800845c:	ab03      	add	r3, sp, #12
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	4622      	mov	r2, r4
 8008462:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <_vfiprintf_r+0x228>)
 8008464:	a904      	add	r1, sp, #16
 8008466:	4630      	mov	r0, r6
 8008468:	f7fd fec0 	bl	80061ec <_printf_float>
 800846c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008470:	4681      	mov	r9, r0
 8008472:	d1d5      	bne.n	8008420 <_vfiprintf_r+0x198>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	065b      	lsls	r3, r3, #25
 8008478:	f53f af7e 	bmi.w	8008378 <_vfiprintf_r+0xf0>
 800847c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800847e:	e77d      	b.n	800837c <_vfiprintf_r+0xf4>
 8008480:	ab03      	add	r3, sp, #12
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	4622      	mov	r2, r4
 8008486:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <_vfiprintf_r+0x228>)
 8008488:	a904      	add	r1, sp, #16
 800848a:	4630      	mov	r0, r6
 800848c:	f7fe f964 	bl	8006758 <_printf_i>
 8008490:	e7ec      	b.n	800846c <_vfiprintf_r+0x1e4>
 8008492:	bf00      	nop
 8008494:	0807a284 	.word	0x0807a284
 8008498:	0807a3c4 	.word	0x0807a3c4
 800849c:	0807a2a4 	.word	0x0807a2a4
 80084a0:	0807a264 	.word	0x0807a264
 80084a4:	0807a3ca 	.word	0x0807a3ca
 80084a8:	0807a3ce 	.word	0x0807a3ce
 80084ac:	080061ed 	.word	0x080061ed
 80084b0:	08008263 	.word	0x08008263

080084b4 <__sread>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	460c      	mov	r4, r1
 80084b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084bc:	f000 f8a6 	bl	800860c <_read_r>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	bfab      	itete	ge
 80084c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084c6:	89a3      	ldrhlt	r3, [r4, #12]
 80084c8:	181b      	addge	r3, r3, r0
 80084ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084ce:	bfac      	ite	ge
 80084d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80084d2:	81a3      	strhlt	r3, [r4, #12]
 80084d4:	bd10      	pop	{r4, pc}

080084d6 <__swrite>:
 80084d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084da:	461f      	mov	r7, r3
 80084dc:	898b      	ldrh	r3, [r1, #12]
 80084de:	05db      	lsls	r3, r3, #23
 80084e0:	4605      	mov	r5, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	4616      	mov	r6, r2
 80084e6:	d505      	bpl.n	80084f4 <__swrite+0x1e>
 80084e8:	2302      	movs	r3, #2
 80084ea:	2200      	movs	r2, #0
 80084ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f0:	f000 f868 	bl	80085c4 <_lseek_r>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	4632      	mov	r2, r6
 8008502:	463b      	mov	r3, r7
 8008504:	4628      	mov	r0, r5
 8008506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800850a:	f000 b817 	b.w	800853c <_write_r>

0800850e <__sseek>:
 800850e:	b510      	push	{r4, lr}
 8008510:	460c      	mov	r4, r1
 8008512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008516:	f000 f855 	bl	80085c4 <_lseek_r>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	bf15      	itete	ne
 8008520:	6560      	strne	r0, [r4, #84]	; 0x54
 8008522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800852a:	81a3      	strheq	r3, [r4, #12]
 800852c:	bf18      	it	ne
 800852e:	81a3      	strhne	r3, [r4, #12]
 8008530:	bd10      	pop	{r4, pc}

08008532 <__sclose>:
 8008532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008536:	f000 b813 	b.w	8008560 <_close_r>
	...

0800853c <_write_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4c07      	ldr	r4, [pc, #28]	; (800855c <_write_r+0x20>)
 8008540:	4605      	mov	r5, r0
 8008542:	4608      	mov	r0, r1
 8008544:	4611      	mov	r1, r2
 8008546:	2200      	movs	r2, #0
 8008548:	6022      	str	r2, [r4, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	f000 fcd8 	bl	8008f00 <_write>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_write_r+0x1e>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	b103      	cbz	r3, 800855a <_write_r+0x1e>
 8008558:	602b      	str	r3, [r5, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	20003998 	.word	0x20003998

08008560 <_close_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4c06      	ldr	r4, [pc, #24]	; (800857c <_close_r+0x1c>)
 8008564:	2300      	movs	r3, #0
 8008566:	4605      	mov	r5, r0
 8008568:	4608      	mov	r0, r1
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	f000 fca0 	bl	8008eb0 <_close>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d102      	bne.n	800857a <_close_r+0x1a>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	b103      	cbz	r3, 800857a <_close_r+0x1a>
 8008578:	602b      	str	r3, [r5, #0]
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	20003998 	.word	0x20003998

08008580 <_fstat_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4c07      	ldr	r4, [pc, #28]	; (80085a0 <_fstat_r+0x20>)
 8008584:	2300      	movs	r3, #0
 8008586:	4605      	mov	r5, r0
 8008588:	4608      	mov	r0, r1
 800858a:	4611      	mov	r1, r2
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	f000 fc97 	bl	8008ec0 <_fstat>
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	d102      	bne.n	800859c <_fstat_r+0x1c>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	b103      	cbz	r3, 800859c <_fstat_r+0x1c>
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	bd38      	pop	{r3, r4, r5, pc}
 800859e:	bf00      	nop
 80085a0:	20003998 	.word	0x20003998

080085a4 <_isatty_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	4c06      	ldr	r4, [pc, #24]	; (80085c0 <_isatty_r+0x1c>)
 80085a8:	2300      	movs	r3, #0
 80085aa:	4605      	mov	r5, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	6023      	str	r3, [r4, #0]
 80085b0:	f000 fc8e 	bl	8008ed0 <_isatty>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_isatty_r+0x1a>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	b103      	cbz	r3, 80085be <_isatty_r+0x1a>
 80085bc:	602b      	str	r3, [r5, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	20003998 	.word	0x20003998

080085c4 <_lseek_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4c07      	ldr	r4, [pc, #28]	; (80085e4 <_lseek_r+0x20>)
 80085c8:	4605      	mov	r5, r0
 80085ca:	4608      	mov	r0, r1
 80085cc:	4611      	mov	r1, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	6022      	str	r2, [r4, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f000 fc84 	bl	8008ee0 <_lseek>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_lseek_r+0x1e>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_lseek_r+0x1e>
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	20003998 	.word	0x20003998

080085e8 <__ascii_mbtowc>:
 80085e8:	b082      	sub	sp, #8
 80085ea:	b901      	cbnz	r1, 80085ee <__ascii_mbtowc+0x6>
 80085ec:	a901      	add	r1, sp, #4
 80085ee:	b142      	cbz	r2, 8008602 <__ascii_mbtowc+0x1a>
 80085f0:	b14b      	cbz	r3, 8008606 <__ascii_mbtowc+0x1e>
 80085f2:	7813      	ldrb	r3, [r2, #0]
 80085f4:	600b      	str	r3, [r1, #0]
 80085f6:	7812      	ldrb	r2, [r2, #0]
 80085f8:	1c10      	adds	r0, r2, #0
 80085fa:	bf18      	it	ne
 80085fc:	2001      	movne	r0, #1
 80085fe:	b002      	add	sp, #8
 8008600:	4770      	bx	lr
 8008602:	4610      	mov	r0, r2
 8008604:	e7fb      	b.n	80085fe <__ascii_mbtowc+0x16>
 8008606:	f06f 0001 	mvn.w	r0, #1
 800860a:	e7f8      	b.n	80085fe <__ascii_mbtowc+0x16>

0800860c <_read_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4c07      	ldr	r4, [pc, #28]	; (800862c <_read_r+0x20>)
 8008610:	4605      	mov	r5, r0
 8008612:	4608      	mov	r0, r1
 8008614:	4611      	mov	r1, r2
 8008616:	2200      	movs	r2, #0
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	f000 fc68 	bl	8008ef0 <_read>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_read_r+0x1e>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	b103      	cbz	r3, 800862a <_read_r+0x1e>
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20003998 	.word	0x20003998

08008630 <__ascii_wctomb>:
 8008630:	b149      	cbz	r1, 8008646 <__ascii_wctomb+0x16>
 8008632:	2aff      	cmp	r2, #255	; 0xff
 8008634:	bf85      	ittet	hi
 8008636:	238a      	movhi	r3, #138	; 0x8a
 8008638:	6003      	strhi	r3, [r0, #0]
 800863a:	700a      	strbls	r2, [r1, #0]
 800863c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008640:	bf98      	it	ls
 8008642:	2001      	movls	r0, #1
 8008644:	4770      	bx	lr
 8008646:	4608      	mov	r0, r1
 8008648:	4770      	bx	lr
 800864a:	0000      	movs	r0, r0
 800864c:	0000      	movs	r0, r0
	...

08008650 <exp>:
 8008650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008652:	ed2d 8b02 	vpush	{d8}
 8008656:	4e38      	ldr	r6, [pc, #224]	; (8008738 <exp+0xe8>)
 8008658:	b08b      	sub	sp, #44	; 0x2c
 800865a:	ec55 4b10 	vmov	r4, r5, d0
 800865e:	f000 f8f3 	bl	8008848 <__ieee754_exp>
 8008662:	f996 3000 	ldrsb.w	r3, [r6]
 8008666:	eeb0 8a40 	vmov.f32	s16, s0
 800866a:	eef0 8a60 	vmov.f32	s17, s1
 800866e:	3301      	adds	r3, #1
 8008670:	d02c      	beq.n	80086cc <exp+0x7c>
 8008672:	ec45 4b10 	vmov	d0, r4, r5
 8008676:	f000 fc09 	bl	8008e8c <finite>
 800867a:	b338      	cbz	r0, 80086cc <exp+0x7c>
 800867c:	a32a      	add	r3, pc, #168	; (adr r3, 8008728 <exp+0xd8>)
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	4620      	mov	r0, r4
 8008684:	4629      	mov	r1, r5
 8008686:	f7f8 fa4f 	bl	8000b28 <__aeabi_dcmpgt>
 800868a:	4607      	mov	r7, r0
 800868c:	2800      	cmp	r0, #0
 800868e:	d030      	beq.n	80086f2 <exp+0xa2>
 8008690:	2303      	movs	r3, #3
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	4b29      	ldr	r3, [pc, #164]	; (800873c <exp+0xec>)
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	2300      	movs	r3, #0
 800869a:	9308      	str	r3, [sp, #32]
 800869c:	f996 3000 	ldrsb.w	r3, [r6]
 80086a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80086a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80086a8:	b9c3      	cbnz	r3, 80086dc <exp+0x8c>
 80086aa:	4b25      	ldr	r3, [pc, #148]	; (8008740 <exp+0xf0>)
 80086ac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80086b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80086b4:	4668      	mov	r0, sp
 80086b6:	f000 fbf1 	bl	8008e9c <matherr>
 80086ba:	b1a8      	cbz	r0, 80086e8 <exp+0x98>
 80086bc:	9b08      	ldr	r3, [sp, #32]
 80086be:	b11b      	cbz	r3, 80086c8 <exp+0x78>
 80086c0:	f7fd fbfc 	bl	8005ebc <__errno>
 80086c4:	9b08      	ldr	r3, [sp, #32]
 80086c6:	6003      	str	r3, [r0, #0]
 80086c8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80086cc:	eeb0 0a48 	vmov.f32	s0, s16
 80086d0:	eef0 0a68 	vmov.f32	s1, s17
 80086d4:	b00b      	add	sp, #44	; 0x2c
 80086d6:	ecbd 8b02 	vpop	{d8}
 80086da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086dc:	4919      	ldr	r1, [pc, #100]	; (8008744 <exp+0xf4>)
 80086de:	2000      	movs	r0, #0
 80086e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d1e5      	bne.n	80086b4 <exp+0x64>
 80086e8:	f7fd fbe8 	bl	8005ebc <__errno>
 80086ec:	2322      	movs	r3, #34	; 0x22
 80086ee:	6003      	str	r3, [r0, #0]
 80086f0:	e7e4      	b.n	80086bc <exp+0x6c>
 80086f2:	a30f      	add	r3, pc, #60	; (adr r3, 8008730 <exp+0xe0>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	4620      	mov	r0, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	f7f8 f9f6 	bl	8000aec <__aeabi_dcmplt>
 8008700:	2800      	cmp	r0, #0
 8008702:	d0e3      	beq.n	80086cc <exp+0x7c>
 8008704:	2304      	movs	r3, #4
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	4b0c      	ldr	r3, [pc, #48]	; (800873c <exp+0xec>)
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	2300      	movs	r3, #0
 8008710:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008714:	9708      	str	r7, [sp, #32]
 8008716:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800871a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800871e:	f996 3000 	ldrsb.w	r3, [r6]
 8008722:	e7df      	b.n	80086e4 <exp+0x94>
 8008724:	f3af 8000 	nop.w
 8008728:	fefa39ef 	.word	0xfefa39ef
 800872c:	40862e42 	.word	0x40862e42
 8008730:	d52d3051 	.word	0xd52d3051
 8008734:	c0874910 	.word	0xc0874910
 8008738:	20001e10 	.word	0x20001e10
 800873c:	0807a4e0 	.word	0x0807a4e0
 8008740:	47efffff 	.word	0x47efffff
 8008744:	7ff00000 	.word	0x7ff00000

08008748 <log>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	ed2d 8b02 	vpush	{d8}
 800874e:	b08a      	sub	sp, #40	; 0x28
 8008750:	ec55 4b10 	vmov	r4, r5, d0
 8008754:	f000 f9e8 	bl	8008b28 <__ieee754_log>
 8008758:	4b36      	ldr	r3, [pc, #216]	; (8008834 <log+0xec>)
 800875a:	eeb0 8a40 	vmov.f32	s16, s0
 800875e:	eef0 8a60 	vmov.f32	s17, s1
 8008762:	f993 6000 	ldrsb.w	r6, [r3]
 8008766:	1c73      	adds	r3, r6, #1
 8008768:	d05b      	beq.n	8008822 <log+0xda>
 800876a:	4622      	mov	r2, r4
 800876c:	462b      	mov	r3, r5
 800876e:	4620      	mov	r0, r4
 8008770:	4629      	mov	r1, r5
 8008772:	f7f8 f9e3 	bl	8000b3c <__aeabi_dcmpun>
 8008776:	2800      	cmp	r0, #0
 8008778:	d153      	bne.n	8008822 <log+0xda>
 800877a:	2200      	movs	r2, #0
 800877c:	2300      	movs	r3, #0
 800877e:	4620      	mov	r0, r4
 8008780:	4629      	mov	r1, r5
 8008782:	f7f8 f9d1 	bl	8000b28 <__aeabi_dcmpgt>
 8008786:	2800      	cmp	r0, #0
 8008788:	d14b      	bne.n	8008822 <log+0xda>
 800878a:	4b2b      	ldr	r3, [pc, #172]	; (8008838 <log+0xf0>)
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	9008      	str	r0, [sp, #32]
 8008790:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008794:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008798:	b9a6      	cbnz	r6, 80087c4 <log+0x7c>
 800879a:	4b28      	ldr	r3, [pc, #160]	; (800883c <log+0xf4>)
 800879c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80087a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087a4:	4620      	mov	r0, r4
 80087a6:	2200      	movs	r2, #0
 80087a8:	2300      	movs	r3, #0
 80087aa:	4629      	mov	r1, r5
 80087ac:	f7f8 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80087b0:	bb40      	cbnz	r0, 8008804 <log+0xbc>
 80087b2:	2301      	movs	r3, #1
 80087b4:	2e02      	cmp	r6, #2
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	d119      	bne.n	80087ee <log+0xa6>
 80087ba:	f7fd fb7f 	bl	8005ebc <__errno>
 80087be:	2321      	movs	r3, #33	; 0x21
 80087c0:	6003      	str	r3, [r0, #0]
 80087c2:	e019      	b.n	80087f8 <log+0xb0>
 80087c4:	4b1e      	ldr	r3, [pc, #120]	; (8008840 <log+0xf8>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087cc:	4620      	mov	r0, r4
 80087ce:	2200      	movs	r2, #0
 80087d0:	2300      	movs	r3, #0
 80087d2:	4629      	mov	r1, r5
 80087d4:	f7f8 f980 	bl	8000ad8 <__aeabi_dcmpeq>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d0ea      	beq.n	80087b2 <log+0x6a>
 80087dc:	2302      	movs	r3, #2
 80087de:	429e      	cmp	r6, r3
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	d111      	bne.n	8008808 <log+0xc0>
 80087e4:	f7fd fb6a 	bl	8005ebc <__errno>
 80087e8:	2322      	movs	r3, #34	; 0x22
 80087ea:	6003      	str	r3, [r0, #0]
 80087ec:	e011      	b.n	8008812 <log+0xca>
 80087ee:	4668      	mov	r0, sp
 80087f0:	f000 fb54 	bl	8008e9c <matherr>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d0e0      	beq.n	80087ba <log+0x72>
 80087f8:	4812      	ldr	r0, [pc, #72]	; (8008844 <log+0xfc>)
 80087fa:	f000 fb51 	bl	8008ea0 <nan>
 80087fe:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008802:	e006      	b.n	8008812 <log+0xca>
 8008804:	2302      	movs	r3, #2
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	4668      	mov	r0, sp
 800880a:	f000 fb47 	bl	8008e9c <matherr>
 800880e:	2800      	cmp	r0, #0
 8008810:	d0e8      	beq.n	80087e4 <log+0x9c>
 8008812:	9b08      	ldr	r3, [sp, #32]
 8008814:	b11b      	cbz	r3, 800881e <log+0xd6>
 8008816:	f7fd fb51 	bl	8005ebc <__errno>
 800881a:	9b08      	ldr	r3, [sp, #32]
 800881c:	6003      	str	r3, [r0, #0]
 800881e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008822:	eeb0 0a48 	vmov.f32	s0, s16
 8008826:	eef0 0a68 	vmov.f32	s1, s17
 800882a:	b00a      	add	sp, #40	; 0x28
 800882c:	ecbd 8b02 	vpop	{d8}
 8008830:	bd70      	pop	{r4, r5, r6, pc}
 8008832:	bf00      	nop
 8008834:	20001e10 	.word	0x20001e10
 8008838:	0807a4e4 	.word	0x0807a4e4
 800883c:	c7efffff 	.word	0xc7efffff
 8008840:	fff00000 	.word	0xfff00000
 8008844:	0807a3c9 	.word	0x0807a3c9

08008848 <__ieee754_exp>:
 8008848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800884c:	ec55 4b10 	vmov	r4, r5, d0
 8008850:	4aab      	ldr	r2, [pc, #684]	; (8008b00 <__ieee754_exp+0x2b8>)
 8008852:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008856:	4296      	cmp	r6, r2
 8008858:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 800885c:	d932      	bls.n	80088c4 <__ieee754_exp+0x7c>
 800885e:	4aa9      	ldr	r2, [pc, #676]	; (8008b04 <__ieee754_exp+0x2bc>)
 8008860:	4296      	cmp	r6, r2
 8008862:	d913      	bls.n	800888c <__ieee754_exp+0x44>
 8008864:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008868:	4323      	orrs	r3, r4
 800886a:	ee10 2a10 	vmov	r2, s0
 800886e:	d007      	beq.n	8008880 <__ieee754_exp+0x38>
 8008870:	462b      	mov	r3, r5
 8008872:	4620      	mov	r0, r4
 8008874:	4629      	mov	r1, r5
 8008876:	f7f7 fd11 	bl	800029c <__adddf3>
 800887a:	4604      	mov	r4, r0
 800887c:	460d      	mov	r5, r1
 800887e:	e000      	b.n	8008882 <__ieee754_exp+0x3a>
 8008880:	b9ef      	cbnz	r7, 80088be <__ieee754_exp+0x76>
 8008882:	ec45 4b10 	vmov	d0, r4, r5
 8008886:	b004      	add	sp, #16
 8008888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888c:	a386      	add	r3, pc, #536	; (adr r3, 8008aa8 <__ieee754_exp+0x260>)
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	ee10 0a10 	vmov	r0, s0
 8008896:	4629      	mov	r1, r5
 8008898:	f7f8 f946 	bl	8000b28 <__aeabi_dcmpgt>
 800889c:	b138      	cbz	r0, 80088ae <__ieee754_exp+0x66>
 800889e:	a384      	add	r3, pc, #528	; (adr r3, 8008ab0 <__ieee754_exp+0x268>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	4610      	mov	r0, r2
 80088a6:	4619      	mov	r1, r3
 80088a8:	f7f7 feae 	bl	8000608 <__aeabi_dmul>
 80088ac:	e7e5      	b.n	800887a <__ieee754_exp+0x32>
 80088ae:	a382      	add	r3, pc, #520	; (adr r3, 8008ab8 <__ieee754_exp+0x270>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	f7f8 f918 	bl	8000aec <__aeabi_dcmplt>
 80088bc:	b130      	cbz	r0, 80088cc <__ieee754_exp+0x84>
 80088be:	2400      	movs	r4, #0
 80088c0:	2500      	movs	r5, #0
 80088c2:	e7de      	b.n	8008882 <__ieee754_exp+0x3a>
 80088c4:	4b90      	ldr	r3, [pc, #576]	; (8008b08 <__ieee754_exp+0x2c0>)
 80088c6:	429e      	cmp	r6, r3
 80088c8:	f240 80a6 	bls.w	8008a18 <__ieee754_exp+0x1d0>
 80088cc:	4b8f      	ldr	r3, [pc, #572]	; (8008b0c <__ieee754_exp+0x2c4>)
 80088ce:	429e      	cmp	r6, r3
 80088d0:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 80088d4:	d875      	bhi.n	80089c2 <__ieee754_exp+0x17a>
 80088d6:	4b8e      	ldr	r3, [pc, #568]	; (8008b10 <__ieee754_exp+0x2c8>)
 80088d8:	4e8e      	ldr	r6, [pc, #568]	; (8008b14 <__ieee754_exp+0x2cc>)
 80088da:	4443      	add	r3, r8
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	4620      	mov	r0, r4
 80088e2:	4629      	mov	r1, r5
 80088e4:	f7f7 fcd8 	bl	8000298 <__aeabi_dsub>
 80088e8:	4446      	add	r6, r8
 80088ea:	e9cd 0100 	strd	r0, r1, [sp]
 80088ee:	e9d6 8900 	ldrd	r8, r9, [r6]
 80088f2:	f1c7 0a01 	rsb	sl, r7, #1
 80088f6:	ebaa 0a07 	sub.w	sl, sl, r7
 80088fa:	4642      	mov	r2, r8
 80088fc:	464b      	mov	r3, r9
 80088fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008902:	f7f7 fcc9 	bl	8000298 <__aeabi_dsub>
 8008906:	4604      	mov	r4, r0
 8008908:	460d      	mov	r5, r1
 800890a:	4622      	mov	r2, r4
 800890c:	462b      	mov	r3, r5
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f7 fe79 	bl	8000608 <__aeabi_dmul>
 8008916:	a36a      	add	r3, pc, #424	; (adr r3, 8008ac0 <__ieee754_exp+0x278>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	4606      	mov	r6, r0
 800891e:	460f      	mov	r7, r1
 8008920:	f7f7 fe72 	bl	8000608 <__aeabi_dmul>
 8008924:	a368      	add	r3, pc, #416	; (adr r3, 8008ac8 <__ieee754_exp+0x280>)
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	f7f7 fcb5 	bl	8000298 <__aeabi_dsub>
 800892e:	4632      	mov	r2, r6
 8008930:	463b      	mov	r3, r7
 8008932:	f7f7 fe69 	bl	8000608 <__aeabi_dmul>
 8008936:	a366      	add	r3, pc, #408	; (adr r3, 8008ad0 <__ieee754_exp+0x288>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f7f7 fcae 	bl	800029c <__adddf3>
 8008940:	4632      	mov	r2, r6
 8008942:	463b      	mov	r3, r7
 8008944:	f7f7 fe60 	bl	8000608 <__aeabi_dmul>
 8008948:	a363      	add	r3, pc, #396	; (adr r3, 8008ad8 <__ieee754_exp+0x290>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fca3 	bl	8000298 <__aeabi_dsub>
 8008952:	4632      	mov	r2, r6
 8008954:	463b      	mov	r3, r7
 8008956:	f7f7 fe57 	bl	8000608 <__aeabi_dmul>
 800895a:	a361      	add	r3, pc, #388	; (adr r3, 8008ae0 <__ieee754_exp+0x298>)
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	f7f7 fc9c 	bl	800029c <__adddf3>
 8008964:	4632      	mov	r2, r6
 8008966:	463b      	mov	r3, r7
 8008968:	f7f7 fe4e 	bl	8000608 <__aeabi_dmul>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4620      	mov	r0, r4
 8008972:	4629      	mov	r1, r5
 8008974:	f7f7 fc90 	bl	8000298 <__aeabi_dsub>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4606      	mov	r6, r0
 800897e:	460f      	mov	r7, r1
 8008980:	4620      	mov	r0, r4
 8008982:	4629      	mov	r1, r5
 8008984:	f7f7 fe40 	bl	8000608 <__aeabi_dmul>
 8008988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800898c:	f1ba 0f00 	cmp.w	sl, #0
 8008990:	d15c      	bne.n	8008a4c <__ieee754_exp+0x204>
 8008992:	2200      	movs	r2, #0
 8008994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008998:	4630      	mov	r0, r6
 800899a:	4639      	mov	r1, r7
 800899c:	f7f7 fc7c 	bl	8000298 <__aeabi_dsub>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089a8:	f7f7 ff58 	bl	800085c <__aeabi_ddiv>
 80089ac:	4622      	mov	r2, r4
 80089ae:	462b      	mov	r3, r5
 80089b0:	f7f7 fc72 	bl	8000298 <__aeabi_dsub>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	2000      	movs	r0, #0
 80089ba:	4957      	ldr	r1, [pc, #348]	; (8008b18 <__ieee754_exp+0x2d0>)
 80089bc:	f7f7 fc6c 	bl	8000298 <__aeabi_dsub>
 80089c0:	e75b      	b.n	800887a <__ieee754_exp+0x32>
 80089c2:	4e56      	ldr	r6, [pc, #344]	; (8008b1c <__ieee754_exp+0x2d4>)
 80089c4:	a348      	add	r3, pc, #288	; (adr r3, 8008ae8 <__ieee754_exp+0x2a0>)
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	4446      	add	r6, r8
 80089cc:	4620      	mov	r0, r4
 80089ce:	4629      	mov	r1, r5
 80089d0:	f7f7 fe1a 	bl	8000608 <__aeabi_dmul>
 80089d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089d8:	f7f7 fc60 	bl	800029c <__adddf3>
 80089dc:	f7f8 f8c4 	bl	8000b68 <__aeabi_d2iz>
 80089e0:	4682      	mov	sl, r0
 80089e2:	f7f7 fda7 	bl	8000534 <__aeabi_i2d>
 80089e6:	a342      	add	r3, pc, #264	; (adr r3, 8008af0 <__ieee754_exp+0x2a8>)
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	4606      	mov	r6, r0
 80089ee:	460f      	mov	r7, r1
 80089f0:	f7f7 fe0a 	bl	8000608 <__aeabi_dmul>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7f7 fc4c 	bl	8000298 <__aeabi_dsub>
 8008a00:	a33d      	add	r3, pc, #244	; (adr r3, 8008af8 <__ieee754_exp+0x2b0>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	e9cd 0100 	strd	r0, r1, [sp]
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	f7f7 fdfb 	bl	8000608 <__aeabi_dmul>
 8008a12:	4680      	mov	r8, r0
 8008a14:	4689      	mov	r9, r1
 8008a16:	e770      	b.n	80088fa <__ieee754_exp+0xb2>
 8008a18:	4b41      	ldr	r3, [pc, #260]	; (8008b20 <__ieee754_exp+0x2d8>)
 8008a1a:	429e      	cmp	r6, r3
 8008a1c:	d811      	bhi.n	8008a42 <__ieee754_exp+0x1fa>
 8008a1e:	a324      	add	r3, pc, #144	; (adr r3, 8008ab0 <__ieee754_exp+0x268>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	ee10 0a10 	vmov	r0, s0
 8008a28:	4629      	mov	r1, r5
 8008a2a:	f7f7 fc37 	bl	800029c <__adddf3>
 8008a2e:	2200      	movs	r2, #0
 8008a30:	4b39      	ldr	r3, [pc, #228]	; (8008b18 <__ieee754_exp+0x2d0>)
 8008a32:	f7f8 f879 	bl	8000b28 <__aeabi_dcmpgt>
 8008a36:	b138      	cbz	r0, 8008a48 <__ieee754_exp+0x200>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4b37      	ldr	r3, [pc, #220]	; (8008b18 <__ieee754_exp+0x2d0>)
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	4629      	mov	r1, r5
 8008a40:	e719      	b.n	8008876 <__ieee754_exp+0x2e>
 8008a42:	f04f 0a00 	mov.w	sl, #0
 8008a46:	e760      	b.n	800890a <__ieee754_exp+0xc2>
 8008a48:	4682      	mov	sl, r0
 8008a4a:	e75e      	b.n	800890a <__ieee754_exp+0xc2>
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	463b      	mov	r3, r7
 8008a50:	2000      	movs	r0, #0
 8008a52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008a56:	f7f7 fc1f 	bl	8000298 <__aeabi_dsub>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a62:	f7f7 fefb 	bl	800085c <__aeabi_ddiv>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	f7f7 fc13 	bl	8000298 <__aeabi_dsub>
 8008a72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a76:	f7f7 fc0f 	bl	8000298 <__aeabi_dsub>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	2000      	movs	r0, #0
 8008a80:	4925      	ldr	r1, [pc, #148]	; (8008b18 <__ieee754_exp+0x2d0>)
 8008a82:	f7f7 fc09 	bl	8000298 <__aeabi_dsub>
 8008a86:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008a8a:	4592      	cmp	sl, r2
 8008a8c:	db02      	blt.n	8008a94 <__ieee754_exp+0x24c>
 8008a8e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008a92:	e6f2      	b.n	800887a <__ieee754_exp+0x32>
 8008a94:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8008a98:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008aa2:	e701      	b.n	80088a8 <__ieee754_exp+0x60>
 8008aa4:	f3af 8000 	nop.w
 8008aa8:	fefa39ef 	.word	0xfefa39ef
 8008aac:	40862e42 	.word	0x40862e42
 8008ab0:	8800759c 	.word	0x8800759c
 8008ab4:	7e37e43c 	.word	0x7e37e43c
 8008ab8:	d52d3051 	.word	0xd52d3051
 8008abc:	c0874910 	.word	0xc0874910
 8008ac0:	72bea4d0 	.word	0x72bea4d0
 8008ac4:	3e663769 	.word	0x3e663769
 8008ac8:	c5d26bf1 	.word	0xc5d26bf1
 8008acc:	3ebbbd41 	.word	0x3ebbbd41
 8008ad0:	af25de2c 	.word	0xaf25de2c
 8008ad4:	3f11566a 	.word	0x3f11566a
 8008ad8:	16bebd93 	.word	0x16bebd93
 8008adc:	3f66c16c 	.word	0x3f66c16c
 8008ae0:	5555553e 	.word	0x5555553e
 8008ae4:	3fc55555 	.word	0x3fc55555
 8008ae8:	652b82fe 	.word	0x652b82fe
 8008aec:	3ff71547 	.word	0x3ff71547
 8008af0:	fee00000 	.word	0xfee00000
 8008af4:	3fe62e42 	.word	0x3fe62e42
 8008af8:	35793c76 	.word	0x35793c76
 8008afc:	3dea39ef 	.word	0x3dea39ef
 8008b00:	40862e41 	.word	0x40862e41
 8008b04:	7fefffff 	.word	0x7fefffff
 8008b08:	3fd62e42 	.word	0x3fd62e42
 8008b0c:	3ff0a2b1 	.word	0x3ff0a2b1
 8008b10:	0807a4f8 	.word	0x0807a4f8
 8008b14:	0807a508 	.word	0x0807a508
 8008b18:	3ff00000 	.word	0x3ff00000
 8008b1c:	0807a4e8 	.word	0x0807a4e8
 8008b20:	3e2fffff 	.word	0x3e2fffff
 8008b24:	00000000 	.word	0x00000000

08008b28 <__ieee754_log>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	ec51 0b10 	vmov	r0, r1, d0
 8008b30:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008b34:	b087      	sub	sp, #28
 8008b36:	460d      	mov	r5, r1
 8008b38:	da27      	bge.n	8008b8a <__ieee754_log+0x62>
 8008b3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b3e:	4303      	orrs	r3, r0
 8008b40:	ee10 2a10 	vmov	r2, s0
 8008b44:	d10a      	bne.n	8008b5c <__ieee754_log+0x34>
 8008b46:	49cc      	ldr	r1, [pc, #816]	; (8008e78 <__ieee754_log+0x350>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	f7f7 fe85 	bl	800085c <__aeabi_ddiv>
 8008b52:	ec41 0b10 	vmov	d0, r0, r1
 8008b56:	b007      	add	sp, #28
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	da05      	bge.n	8008b6c <__ieee754_log+0x44>
 8008b60:	460b      	mov	r3, r1
 8008b62:	f7f7 fb99 	bl	8000298 <__aeabi_dsub>
 8008b66:	2200      	movs	r2, #0
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e7f0      	b.n	8008b4e <__ieee754_log+0x26>
 8008b6c:	4bc3      	ldr	r3, [pc, #780]	; (8008e7c <__ieee754_log+0x354>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f7f7 fd4a 	bl	8000608 <__aeabi_dmul>
 8008b74:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008b78:	460d      	mov	r5, r1
 8008b7a:	4ac1      	ldr	r2, [pc, #772]	; (8008e80 <__ieee754_log+0x358>)
 8008b7c:	4295      	cmp	r5, r2
 8008b7e:	dd06      	ble.n	8008b8e <__ieee754_log+0x66>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	f7f7 fb8a 	bl	800029c <__adddf3>
 8008b88:	e7e3      	b.n	8008b52 <__ieee754_log+0x2a>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e7f5      	b.n	8008b7a <__ieee754_log+0x52>
 8008b8e:	152c      	asrs	r4, r5, #20
 8008b90:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008b94:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008b98:	441c      	add	r4, r3
 8008b9a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008b9e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ba6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008baa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008bae:	ea42 0105 	orr.w	r1, r2, r5
 8008bb2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4bb2      	ldr	r3, [pc, #712]	; (8008e84 <__ieee754_log+0x35c>)
 8008bba:	f7f7 fb6d 	bl	8000298 <__aeabi_dsub>
 8008bbe:	1cab      	adds	r3, r5, #2
 8008bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	4682      	mov	sl, r0
 8008bc8:	468b      	mov	fp, r1
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	dc53      	bgt.n	8008c78 <__ieee754_log+0x150>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f7f7 ff81 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bd6:	b1d0      	cbz	r0, 8008c0e <__ieee754_log+0xe6>
 8008bd8:	2c00      	cmp	r4, #0
 8008bda:	f000 8120 	beq.w	8008e1e <__ieee754_log+0x2f6>
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7f7 fca8 	bl	8000534 <__aeabi_i2d>
 8008be4:	a390      	add	r3, pc, #576	; (adr r3, 8008e28 <__ieee754_log+0x300>)
 8008be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bea:	4606      	mov	r6, r0
 8008bec:	460f      	mov	r7, r1
 8008bee:	f7f7 fd0b 	bl	8000608 <__aeabi_dmul>
 8008bf2:	a38f      	add	r3, pc, #572	; (adr r3, 8008e30 <__ieee754_log+0x308>)
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	460d      	mov	r5, r1
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	4639      	mov	r1, r7
 8008c00:	f7f7 fd02 	bl	8000608 <__aeabi_dmul>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4620      	mov	r0, r4
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	e7ba      	b.n	8008b84 <__ieee754_log+0x5c>
 8008c0e:	a38a      	add	r3, pc, #552	; (adr r3, 8008e38 <__ieee754_log+0x310>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	4650      	mov	r0, sl
 8008c16:	4659      	mov	r1, fp
 8008c18:	f7f7 fcf6 	bl	8000608 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	2000      	movs	r0, #0
 8008c22:	4999      	ldr	r1, [pc, #612]	; (8008e88 <__ieee754_log+0x360>)
 8008c24:	f7f7 fb38 	bl	8000298 <__aeabi_dsub>
 8008c28:	4652      	mov	r2, sl
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	460f      	mov	r7, r1
 8008c2e:	465b      	mov	r3, fp
 8008c30:	4650      	mov	r0, sl
 8008c32:	4659      	mov	r1, fp
 8008c34:	f7f7 fce8 	bl	8000608 <__aeabi_dmul>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	f7f7 fce2 	bl	8000608 <__aeabi_dmul>
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	b914      	cbnz	r4, 8008c50 <__ieee754_log+0x128>
 8008c4a:	4632      	mov	r2, r6
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	e0a0      	b.n	8008d92 <__ieee754_log+0x26a>
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7f7 fc6f 	bl	8000534 <__aeabi_i2d>
 8008c56:	a374      	add	r3, pc, #464	; (adr r3, 8008e28 <__ieee754_log+0x300>)
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	4689      	mov	r9, r1
 8008c60:	f7f7 fcd2 	bl	8000608 <__aeabi_dmul>
 8008c64:	a372      	add	r3, pc, #456	; (adr r3, 8008e30 <__ieee754_log+0x308>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	4640      	mov	r0, r8
 8008c70:	4649      	mov	r1, r9
 8008c72:	f7f7 fcc9 	bl	8000608 <__aeabi_dmul>
 8008c76:	e0a5      	b.n	8008dc4 <__ieee754_log+0x29c>
 8008c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c7c:	f7f7 fb0e 	bl	800029c <__adddf3>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4650      	mov	r0, sl
 8008c86:	4659      	mov	r1, fp
 8008c88:	f7f7 fde8 	bl	800085c <__aeabi_ddiv>
 8008c8c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c90:	4620      	mov	r0, r4
 8008c92:	f7f7 fc4f 	bl	8000534 <__aeabi_i2d>
 8008c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f7f7 fcb1 	bl	8000608 <__aeabi_dmul>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cae:	f7f7 fcab 	bl	8000608 <__aeabi_dmul>
 8008cb2:	a363      	add	r3, pc, #396	; (adr r3, 8008e40 <__ieee754_log+0x318>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	4680      	mov	r8, r0
 8008cba:	4689      	mov	r9, r1
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	a361      	add	r3, pc, #388	; (adr r3, 8008e48 <__ieee754_log+0x320>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f7f7 fae9 	bl	800029c <__adddf3>
 8008cca:	4642      	mov	r2, r8
 8008ccc:	464b      	mov	r3, r9
 8008cce:	f7f7 fc9b 	bl	8000608 <__aeabi_dmul>
 8008cd2:	a35f      	add	r3, pc, #380	; (adr r3, 8008e50 <__ieee754_log+0x328>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f7f7 fae0 	bl	800029c <__adddf3>
 8008cdc:	4642      	mov	r2, r8
 8008cde:	464b      	mov	r3, r9
 8008ce0:	f7f7 fc92 	bl	8000608 <__aeabi_dmul>
 8008ce4:	a35c      	add	r3, pc, #368	; (adr r3, 8008e58 <__ieee754_log+0x330>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f7f7 fad7 	bl	800029c <__adddf3>
 8008cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cf2:	f7f7 fc89 	bl	8000608 <__aeabi_dmul>
 8008cf6:	a35a      	add	r3, pc, #360	; (adr r3, 8008e60 <__ieee754_log+0x338>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d00:	4640      	mov	r0, r8
 8008d02:	4649      	mov	r1, r9
 8008d04:	f7f7 fc80 	bl	8000608 <__aeabi_dmul>
 8008d08:	a357      	add	r3, pc, #348	; (adr r3, 8008e68 <__ieee754_log+0x340>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fac5 	bl	800029c <__adddf3>
 8008d12:	4642      	mov	r2, r8
 8008d14:	464b      	mov	r3, r9
 8008d16:	f7f7 fc77 	bl	8000608 <__aeabi_dmul>
 8008d1a:	a355      	add	r3, pc, #340	; (adr r3, 8008e70 <__ieee754_log+0x348>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fabc 	bl	800029c <__adddf3>
 8008d24:	4642      	mov	r2, r8
 8008d26:	464b      	mov	r3, r9
 8008d28:	f7f7 fc6e 	bl	8000608 <__aeabi_dmul>
 8008d2c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d3c:	f7f7 faae 	bl	800029c <__adddf3>
 8008d40:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8008d44:	3551      	adds	r5, #81	; 0x51
 8008d46:	4335      	orrs	r5, r6
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	4689      	mov	r9, r1
 8008d4e:	dd48      	ble.n	8008de2 <__ieee754_log+0x2ba>
 8008d50:	2200      	movs	r2, #0
 8008d52:	4b4d      	ldr	r3, [pc, #308]	; (8008e88 <__ieee754_log+0x360>)
 8008d54:	4650      	mov	r0, sl
 8008d56:	4659      	mov	r1, fp
 8008d58:	f7f7 fc56 	bl	8000608 <__aeabi_dmul>
 8008d5c:	4652      	mov	r2, sl
 8008d5e:	465b      	mov	r3, fp
 8008d60:	f7f7 fc52 	bl	8000608 <__aeabi_dmul>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4606      	mov	r6, r0
 8008d6a:	460f      	mov	r7, r1
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	4649      	mov	r1, r9
 8008d70:	f7f7 fa94 	bl	800029c <__adddf3>
 8008d74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d78:	f7f7 fc46 	bl	8000608 <__aeabi_dmul>
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	4689      	mov	r9, r1
 8008d80:	b964      	cbnz	r4, 8008d9c <__ieee754_log+0x274>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4630      	mov	r0, r6
 8008d88:	4639      	mov	r1, r7
 8008d8a:	f7f7 fa85 	bl	8000298 <__aeabi_dsub>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4650      	mov	r0, sl
 8008d94:	4659      	mov	r1, fp
 8008d96:	f7f7 fa7f 	bl	8000298 <__aeabi_dsub>
 8008d9a:	e6da      	b.n	8008b52 <__ieee754_log+0x2a>
 8008d9c:	a322      	add	r3, pc, #136	; (adr r3, 8008e28 <__ieee754_log+0x300>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da6:	f7f7 fc2f 	bl	8000608 <__aeabi_dmul>
 8008daa:	a321      	add	r3, pc, #132	; (adr r3, 8008e30 <__ieee754_log+0x308>)
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	4604      	mov	r4, r0
 8008db2:	460d      	mov	r5, r1
 8008db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db8:	f7f7 fc26 	bl	8000608 <__aeabi_dmul>
 8008dbc:	4642      	mov	r2, r8
 8008dbe:	464b      	mov	r3, r9
 8008dc0:	f7f7 fa6c 	bl	800029c <__adddf3>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fa64 	bl	8000298 <__aeabi_dsub>
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	465b      	mov	r3, fp
 8008dd4:	f7f7 fa60 	bl	8000298 <__aeabi_dsub>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4620      	mov	r0, r4
 8008dde:	4629      	mov	r1, r5
 8008de0:	e7d9      	b.n	8008d96 <__ieee754_log+0x26e>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4650      	mov	r0, sl
 8008de8:	4659      	mov	r1, fp
 8008dea:	f7f7 fa55 	bl	8000298 <__aeabi_dsub>
 8008dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008df2:	f7f7 fc09 	bl	8000608 <__aeabi_dmul>
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	f43f af25 	beq.w	8008c4a <__ieee754_log+0x122>
 8008e00:	a309      	add	r3, pc, #36	; (adr r3, 8008e28 <__ieee754_log+0x300>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0a:	f7f7 fbfd 	bl	8000608 <__aeabi_dmul>
 8008e0e:	a308      	add	r3, pc, #32	; (adr r3, 8008e30 <__ieee754_log+0x308>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	4604      	mov	r4, r0
 8008e16:	460d      	mov	r5, r1
 8008e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1c:	e729      	b.n	8008c72 <__ieee754_log+0x14a>
 8008e1e:	2000      	movs	r0, #0
 8008e20:	2100      	movs	r1, #0
 8008e22:	e696      	b.n	8008b52 <__ieee754_log+0x2a>
 8008e24:	f3af 8000 	nop.w
 8008e28:	fee00000 	.word	0xfee00000
 8008e2c:	3fe62e42 	.word	0x3fe62e42
 8008e30:	35793c76 	.word	0x35793c76
 8008e34:	3dea39ef 	.word	0x3dea39ef
 8008e38:	55555555 	.word	0x55555555
 8008e3c:	3fd55555 	.word	0x3fd55555
 8008e40:	df3e5244 	.word	0xdf3e5244
 8008e44:	3fc2f112 	.word	0x3fc2f112
 8008e48:	96cb03de 	.word	0x96cb03de
 8008e4c:	3fc74664 	.word	0x3fc74664
 8008e50:	94229359 	.word	0x94229359
 8008e54:	3fd24924 	.word	0x3fd24924
 8008e58:	55555593 	.word	0x55555593
 8008e5c:	3fe55555 	.word	0x3fe55555
 8008e60:	d078c69f 	.word	0xd078c69f
 8008e64:	3fc39a09 	.word	0x3fc39a09
 8008e68:	1d8e78af 	.word	0x1d8e78af
 8008e6c:	3fcc71c5 	.word	0x3fcc71c5
 8008e70:	9997fa04 	.word	0x9997fa04
 8008e74:	3fd99999 	.word	0x3fd99999
 8008e78:	c3500000 	.word	0xc3500000
 8008e7c:	43500000 	.word	0x43500000
 8008e80:	7fefffff 	.word	0x7fefffff
 8008e84:	3ff00000 	.word	0x3ff00000
 8008e88:	3fe00000 	.word	0x3fe00000

08008e8c <finite>:
 8008e8c:	ee10 3a90 	vmov	r3, s1
 8008e90:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008e94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008e98:	0fc0      	lsrs	r0, r0, #31
 8008e9a:	4770      	bx	lr

08008e9c <matherr>:
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	4770      	bx	lr

08008ea0 <nan>:
 8008ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ea8 <nan+0x8>
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	00000000 	.word	0x00000000
 8008eac:	7ff80000 	.word	0x7ff80000

08008eb0 <_close>:
 8008eb0:	4b02      	ldr	r3, [pc, #8]	; (8008ebc <_close+0xc>)
 8008eb2:	2258      	movs	r2, #88	; 0x58
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eba:	4770      	bx	lr
 8008ebc:	20003998 	.word	0x20003998

08008ec0 <_fstat>:
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <_fstat+0xc>)
 8008ec2:	2258      	movs	r2, #88	; 0x58
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	4770      	bx	lr
 8008ecc:	20003998 	.word	0x20003998

08008ed0 <_isatty>:
 8008ed0:	4b02      	ldr	r3, [pc, #8]	; (8008edc <_isatty+0xc>)
 8008ed2:	2258      	movs	r2, #88	; 0x58
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	20003998 	.word	0x20003998

08008ee0 <_lseek>:
 8008ee0:	4b02      	ldr	r3, [pc, #8]	; (8008eec <_lseek+0xc>)
 8008ee2:	2258      	movs	r2, #88	; 0x58
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eea:	4770      	bx	lr
 8008eec:	20003998 	.word	0x20003998

08008ef0 <_read>:
 8008ef0:	4b02      	ldr	r3, [pc, #8]	; (8008efc <_read+0xc>)
 8008ef2:	2258      	movs	r2, #88	; 0x58
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8008efa:	4770      	bx	lr
 8008efc:	20003998 	.word	0x20003998

08008f00 <_write>:
 8008f00:	4b02      	ldr	r3, [pc, #8]	; (8008f0c <_write+0xc>)
 8008f02:	2258      	movs	r2, #88	; 0x58
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0a:	4770      	bx	lr
 8008f0c:	20003998 	.word	0x20003998

08008f10 <_init>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr

08008f1c <_fini>:
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1e:	bf00      	nop
 8008f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f22:	bc08      	pop	{r3}
 8008f24:	469e      	mov	lr, r3
 8008f26:	4770      	bx	lr
