HERE I SAVE MANUALLY THE MEMORY USED FROM THE CODE IN ORDER TO UNDERSTAND WHICH ONE IS THE 
MOST OPTIMIZED IN TERMS OF MEMORY


arm-none-eabi-size -x --format=sysv "TinyOL.elf"
TinyOL.elf  :
section                 size         addr
.isr_vector            0x194    0x8000000
.text                 0x9f68    0x80001a0
.rodata              0x5b928    0x800a120
.ARM.extab               0x0    0x8065a48
.ARM                     0x8    0x8065a48
.preinit_array           0x0    0x8065a50
.init_array              0x4    0x8065a50
.fini_array              0x4    0x8065a54
.data                 0x10a4   0x20000000
.bss                  0x1664   0x200010a4
._user_heap_stack     0x1200   0x20002708
.ARM.attributes         0x30          0x0
.debug_info          0x11902          0x0
.debug_abbrev         0x29e1          0x0
.debug_aranges         0xde8          0x0
.debug_ranges          0xc80          0x0
.debug_macro         0x196a2          0x0
.debug_line           0xd4de          0x0
.debug_str           0x97b55          0x0
.comment                0x7b          0x0
.debug_frame          0x4894          0x0
.stab                   0x9c          0x0
.stabstr               0x14d          0x0
Total               0x142284




https://electronics.stackexchange.com/questions/363931/how-do-i-find-out-at-compile-time-how-much-of-an-stm32s-flash-memory-and-dynami

From the web I found that at build time is possible to compute the RAM and FLASH usage simply by adding
some numbers that I copy paster above here. These lines are generated from the STM CUBE IDE when I build
the project. 

RAM   = data + bss  = .init_array + .fini_array + .data + .bss + ._user_heap_stack      = 4+4+4260+5732+4608        = 14608 Bytes
FLASH = data + text = .init_array + .fini_array + .data + .isr_vector + .text + .rodata = 4+4+4260+404+40808+375080 = 420560 Bytes




IN ORDER TO COUNT THE MEMORY USED DURING RIN TIME I IMPLEMENTED A FUNCTION THAT TRIES TO ALLOCATE AS MUCH AS POSSIBLE WITH MALLOC
UNTIL IT REACHES A NULL RETURN, AT THAT POINTS IT FREES ALL AGAIN AND RETURNS THE COUNTER OF BYTES. THE NUMBERS BELOW ARE THE RESULTS
OBTAINED FROM EACH ALGORITHM. THE IDEA IS TO CALL THIS FUNCTION IN DIFFERENT PARTS OF THE CODE AND SAVE THE LOWEST NUMBER (BECAUSE
IT MEANS THERE IS LESS FREE SPACE). OF COURSE THIS IS NOT DONE AT EACH CYLE BUT ONLY EVERY 20 TIMES.

OL              69900 Bytes
OL V2           69900 Bytes
CWR		66100 Bytes
LWF             66000 Bytes
OL batches      66100 Bytes
OL V2 batches   66100 Bytes
LWF batches     66000 Bytes



