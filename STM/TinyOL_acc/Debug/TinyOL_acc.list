
TinyOL_acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cae0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005ba20  0800cc80  0800cc80  0001cc80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080686a0  080686a0  00081010  2**0
                  CONTENTS
  4 .ARM          00000008  080686a0  080686a0  000786a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080686a8  080686a8  00081010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080686a8  080686a8  000786a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080686ac  080686ac  000786ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001010  20000000  080686b0  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017b0  20001010  080696c0  00081010  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  200027c0  080696c0  000827c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00081010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c1ff  00000000  00000000  00081040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ca8  00000000  00000000  000ad23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a8  00000000  00000000  000b0ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020f8  00000000  00000000  000b3190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b31f  00000000  00000000  000b5288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015423  00000000  00000000  000d05a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4b19  00000000  00000000  000e59ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018a4e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1cc  00000000  00000000  0018a560  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  0019472c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001947c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001010 	.word	0x20001010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc68 	.word	0x0800cc68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001014 	.word	0x20001014
 80001dc:	0800cc68 	.word	0x0800cc68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <OL_lettToSoft>:
}




void OL_lettToSoft(OL_LAYER_STRUCT * layer, char *lett, float * y_true){
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	msgLen = sprintf(msgDebug, "\n\n\r    -- OL_lettToSoft");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	// Check if letter is inside label of the layer
	for(int i=0; i<layer->WIDTH; i++){
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e01a      	b.n	8000f90 <OL_lettToSoft+0x48>
		if(lett[0] == layer->label[i]){
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6919      	ldr	r1, [r3, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	440b      	add	r3, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d107      	bne.n	8000f7c <OL_lettToSoft+0x34>
			y_true[i] = 1;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e006      	b.n	8000f8a <OL_lettToSoft+0x42>
		}else{
			y_true[i] = 0;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
	for(int i=0; i<layer->WIDTH; i++){
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbdf      	blt.n	8000f5a <OL_lettToSoft+0x12>
		}
	}
};
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <OL_feedForward>:




void OL_feedForward(OL_LAYER_STRUCT * layer, float * input){
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r      -- OL_feedForward");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	for(int i=0; i<layer->WIDTH; i++){			// Da 0 a 5
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e049      	b.n	800104a <OL_feedForward+0xa4>
		for(int j=0; j< layer->HEIGHT; j++){	// 0 a 128
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	e027      	b.n	800100c <OL_feedForward+0x66>
			layer->y_pred[i] += layer->weights[layer->HEIGHT*i+j]* input[j];
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69da      	ldr	r2, [r3, #28]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	fb01 f103 	mul.w	r1, r1, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	440b      	add	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	edd3 6a00 	vldr	s13, [r3]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69da      	ldr	r2, [r3, #28]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001002:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j< layer->HEIGHT; j++){	// 0 a 128
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3301      	adds	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	429a      	cmp	r2, r3
 8001014:	dbd2      	blt.n	8000fbc <OL_feedForward+0x16>
		}
		layer->y_pred[i] += layer->biases[i];
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69da      	ldr	r2, [r3, #28]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	ed93 7a00 	vldr	s14, [r3]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	699a      	ldr	r2, [r3, #24]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	edd3 7a00 	vldr	s15, [r3]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69da      	ldr	r2, [r3, #28]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001040:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<layer->WIDTH; i++){			// Da 0 a 5
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbb0      	blt.n	8000fb6 <OL_feedForward+0x10>
	}
};
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <OL_softmax>:




void OL_softmax(OL_LAYER_STRUCT * layer){
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	int i;
	float m;
	int size = layer->WIDTH;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60bb      	str	r3, [r7, #8]

	m = layer->y_pred[0];
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	613b      	str	r3, [r7, #16]
	// Find the highest value in array input
	for (i = 0; i < size; ++i) {
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e017      	b.n	80010ac <OL_softmax+0x4c>
		if (layer->y_pred[i] > m) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69da      	ldr	r2, [r3, #28]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ed97 7a04 	vldr	s14, [r7, #16]
 800108e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	d506      	bpl.n	80010a6 <OL_softmax+0x46>
			m = layer->y_pred[i];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	613b      	str	r3, [r7, #16]
	for (i = 0; i < size; ++i) {
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbe3      	blt.n	800107c <OL_softmax+0x1c>
		}
	}

	// Compute the sum of the exponentials
	float sum = 0.0;
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < size; ++i) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e02c      	b.n	800111a <OL_softmax+0xba>
		sum += exp(layer->y_pred[i] - m);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	ed93 7a00 	vldr	s14, [r3]
 80010ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	ee17 0a90 	vmov	r0, s15
 80010da:	f7ff fa35 	bl	8000548 <__aeabi_f2d>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	ec44 3b10 	vmov	d0, r3, r4
 80010e6:	f00b f95f 	bl	800c3a8 <exp>
 80010ea:	ec56 5b10 	vmov	r5, r6, d0
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff fa2a 	bl	8000548 <__aeabi_f2d>
 80010f4:	4603      	mov	r3, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	461a      	mov	r2, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	4628      	mov	r0, r5
 80010fe:	4631      	mov	r1, r6
 8001100:	f7ff f8c4 	bl	800028c <__adddf3>
 8001104:	4603      	mov	r3, r0
 8001106:	460c      	mov	r4, r1
 8001108:	4618      	mov	r0, r3
 800110a:	4621      	mov	r1, r4
 800110c:	f7ff fd4c 	bl	8000ba8 <__aeabi_d2f>
 8001110:	4603      	mov	r3, r0
 8001112:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < size; ++i) {
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	429a      	cmp	r2, r3
 8001120:	dbce      	blt.n	80010c0 <OL_softmax+0x60>
	}

	// Compute the softmax value for each input entry
	for (i = 0; i < size; ++i) {
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e037      	b.n	8001198 <OL_softmax+0x138>
		layer->y_pred[i] = exp(layer->y_pred[i] - m - log(sum));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69da      	ldr	r2, [r3, #28]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	edd7 7a04 	vldr	s15, [r7, #16]
 800113a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113e:	ee17 0a90 	vmov	r0, s15
 8001142:	f7ff fa01 	bl	8000548 <__aeabi_f2d>
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff f9fc 	bl	8000548 <__aeabi_f2d>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	ec43 2b10 	vmov	d0, r2, r3
 8001158:	f00b f9a2 	bl	800c4a0 <log>
 800115c:	ec53 2b10 	vmov	r2, r3, d0
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff f890 	bl	8000288 <__aeabi_dsub>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	ec44 3b17 	vmov	d7, r3, r4
 8001170:	eeb0 0a47 	vmov.f32	s0, s14
 8001174:	eef0 0a67 	vmov.f32	s1, s15
 8001178:	f00b f916 	bl	800c3a8 <exp>
 800117c:	ec51 0b10 	vmov	r0, r1, d0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69da      	ldr	r2, [r3, #28]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	18d4      	adds	r4, r2, r3
 800118a:	f7ff fd0d 	bl	8000ba8 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	6023      	str	r3, [r4, #0]
	for (i = 0; i < size; ++i) {
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbc3      	blt.n	8001128 <OL_softmax+0xc8>
	}
};
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011a8 <OL_gradientDescend>:




void OL_gradientDescend(OL_LAYER_STRUCT * layer, float* input, float *y_true){
 80011a8:	b4b0      	push	{r4, r5, r7}
 80011aa:	b08d      	sub	sp, #52	; 0x34
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	466b      	mov	r3, sp
 80011b6:	461d      	mov	r5, r3
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r      -- OL_gradientDescend");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	float cost[layer->WIDTH],dW, deltaW;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	1e43      	subs	r3, r0, #1
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	4603      	mov	r3, r0
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	f04f 0400 	mov.w	r4, #0
 80011d0:	0154      	lsls	r4, r2, #5
 80011d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011d6:	014b      	lsls	r3, r1, #5
 80011d8:	4603      	mov	r3, r0
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	f04f 0400 	mov.w	r4, #0
 80011e8:	0154      	lsls	r4, r2, #5
 80011ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ee:	014b      	lsls	r3, r1, #5
 80011f0:	4603      	mov	r3, r0
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	3303      	adds	r3, #3
 80011f6:	3307      	adds	r3, #7
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001200:	466b      	mov	r3, sp
 8001202:	3303      	adds	r3, #3
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	61fb      	str	r3, [r7, #28]

	layer->w_update = 1;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	// Compute the cost (prediction-true)
	for(int k=0; k<layer->WIDTH; k++){
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
 8001216:	e032      	b.n	800127e <OL_gradientDescend+0xd6>
		// Compute label error
		cost[k] = layer->y_pred[k]-y_true[k];
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	69da      	ldr	r2, [r3, #28]
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	edc3 7a00 	vstr	s15, [r3]

		// Update the biases
		layer->biases[k] -= cost[k]*layer->l_rate;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	edd3 6a00 	vldr	s13, [r3]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	699a      	ldr	r2, [r3, #24]
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001274:	edc3 7a00 	vstr	s15, [r3]
	for(int k=0; k<layer->WIDTH; k++){
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	3301      	adds	r3, #1
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	429a      	cmp	r2, r3
 8001286:	dbc7      	blt.n	8001218 <OL_gradientDescend+0x70>
	}

	// Update the weights
	for(int i=0; i<layer->HEIGHT; i++){		// da 0 a 128
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
 800128c:	e044      	b.n	8001318 <OL_gradientDescend+0x170>

		for(int j=0; j<layer->WIDTH; j++){	// da 0 a 5
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001292:	e039      	b.n	8001308 <OL_gradientDescend+0x160>

			deltaW = cost[j]* input[i];
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	ed93 7a00 	vldr	s14, [r3]
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	4413      	add	r3, r2
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b0:	edc7 7a06 	vstr	s15, [r7, #24]
			dW = deltaW*layer->l_rate;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80012be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c2:	edc7 7a05 	vstr	s15, [r7, #20]
			layer->weights[j*layer->HEIGHT+i] -= dW;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012d0:	fb01 f103 	mul.w	r1, r1, r3
 80012d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d6:	440b      	add	r3, r1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	ed93 7a00 	vldr	s14, [r3]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012ea:	fb01 f103 	mul.w	r1, r1, r3
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	440b      	add	r3, r1
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012fe:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<layer->WIDTH; j++){	// da 0 a 5
 8001302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001304:	3301      	adds	r3, #1
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130e:	429a      	cmp	r2, r3
 8001310:	dbc0      	blt.n	8001294 <OL_gradientDescend+0xec>
	for(int i=0; i<layer->HEIGHT; i++){		// da 0 a 128
 8001312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001314:	3301      	adds	r3, #1
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800131e:	429a      	cmp	r2, r3
 8001320:	dbb5      	blt.n	800128e <OL_gradientDescend+0xe6>
 8001322:	46ad      	mov	sp, r5
		}
	}
};
 8001324:	bf00      	nop
 8001326:	3734      	adds	r7, #52	; 0x34
 8001328:	46bd      	mov	sp, r7
 800132a:	bcb0      	pop	{r4, r5, r7}
 800132c:	4770      	bx	lr

0800132e <OL_increaseWeightDim>:




void OL_increaseWeightDim(OL_LAYER_STRUCT * layer){
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r        -- OL_increaseWeightDim");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	uint8_t h = layer->HEIGHT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	74fb      	strb	r3, [r7, #19]
	uint8_t w = layer->WIDTH;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	74bb      	strb	r3, [r7, #18]

	float * tmp_ptr = calloc(h*w,sizeof(float));
 8001342:	7cfb      	ldrb	r3, [r7, #19]
 8001344:	7cba      	ldrb	r2, [r7, #18]
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	2104      	movs	r1, #4
 800134c:	4618      	mov	r0, r3
 800134e:	f009 fec3 	bl	800b0d8 <calloc>
 8001352:	4603      	mov	r3, r0
 8001354:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<(h-1)*(w-1); i++){
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e00d      	b.n	8001378 <OL_increaseWeightDim+0x4a>
			tmp_ptr[i] = layer->weights[i]; 	// If weight already exist fill with old ones
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	441a      	add	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	68f9      	ldr	r1, [r7, #12]
 800136c:	440b      	add	r3, r1
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	601a      	str	r2, [r3, #0]
	for(int i=0; i<(h-1)*(w-1); i++){
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	7cfb      	ldrb	r3, [r7, #19]
 800137a:	3b01      	subs	r3, #1
 800137c:	7cba      	ldrb	r2, [r7, #18]
 800137e:	3a01      	subs	r2, #1
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	429a      	cmp	r2, r3
 8001388:	dbe8      	blt.n	800135c <OL_increaseWeightDim+0x2e>
	}

	free(layer->weights);		// Free the old allocated weights
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4618      	mov	r0, r3
 8001390:	f009 fedc 	bl	800b14c <free>
	layer->weights = tmp_ptr;	// Move the pointer to the new allocated weights
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	615a      	str	r2, [r3, #20]
	tmp_ptr = NULL;				// Reset the temporary pointer
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
};
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <OL_increaseLabel>:




void OL_increaseLabel(OL_LAYER_STRUCT * layer, char new_letter){
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	70fb      	strb	r3, [r7, #3]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r        -- OL_increaseLabel");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	uint8_t w = layer->WIDTH;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	74fb      	strb	r3, [r7, #19]

	char * tmp_ptr = malloc(w*sizeof(char));
 80013b8:	7cfb      	ldrb	r3, [r7, #19]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f009 febe 	bl	800b13c <malloc>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<w; i++){
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e016      	b.n	80013f8 <OL_increaseLabel+0x52>
		if(i<w-1){
 80013ca:	7cfb      	ldrb	r3, [r7, #19]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	da09      	bge.n	80013e8 <OL_increaseLabel+0x42>
			tmp_ptr[i] = layer->label[i]; 	// If letter already exist fill with old ones
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	441a      	add	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	440b      	add	r3, r1
 80013e2:	7812      	ldrb	r2, [r2, #0]
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	e004      	b.n	80013f2 <OL_increaseLabel+0x4c>
		}else{
			tmp_ptr[i] = new_letter;		// If letter is new put the new one
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<w; i++){
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	7cfb      	ldrb	r3, [r7, #19]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbe4      	blt.n	80013ca <OL_increaseLabel+0x24>
		}
	}

	free(layer->label);		// Free the old allocated weights
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	4618      	mov	r0, r3
 8001406:	f009 fea1 	bl	800b14c <free>
	layer->label = tmp_ptr;	// Move the pointer to the new allocated weights
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	611a      	str	r2, [r3, #16]
	tmp_ptr = NULL;			// Reset the temporary pointer
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
};
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <OL_increaseBiasDim>:




void OL_increaseBiasDim(OL_LAYER_STRUCT * layer){
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r        -- OL_increaseBiasDim");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	uint8_t w = layer->WIDTH;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	74fb      	strb	r3, [r7, #19]

	float * tmp_ptr = calloc(w,sizeof(float));
 800142a:	7cfb      	ldrb	r3, [r7, #19]
 800142c:	2104      	movs	r1, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f009 fe52 	bl	800b0d8 <calloc>
 8001434:	4603      	mov	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<w-1; i++){
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00d      	b.n	800145a <OL_increaseBiasDim+0x3e>
			tmp_ptr[i] = layer->biases[i]; 		// If bias already exist, fill with old ones
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	441a      	add	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	68f9      	ldr	r1, [r7, #12]
 800144e:	440b      	add	r3, r1
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	601a      	str	r2, [r3, #0]
	for(int i=0; i<w-1; i++){
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	7cfb      	ldrb	r3, [r7, #19]
 800145c:	3b01      	subs	r3, #1
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	429a      	cmp	r2, r3
 8001462:	dbec      	blt.n	800143e <OL_increaseBiasDim+0x22>
	}

	free(layer->biases);		// Free the old allocated weights
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4618      	mov	r0, r3
 800146a:	f009 fe6f 	bl	800b14c <free>
	layer->biases = tmp_ptr;	// Move the pointer to the new allocated weights
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	619a      	str	r2, [r3, #24]
	tmp_ptr = NULL;				// Reset the temporary pointer
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
};
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <OL_checkNewClass>:




void OL_checkNewClass(OL_LAYER_STRUCT * layer, char *letter){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ACTIVE
	msgLen = sprintf(msgDebug, "\n\n\r    -- OL_checkNewClass");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

	int found = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<layer->WIDTH; i++){
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	e00d      	b.n	80014b0 <OL_checkNewClass+0x30>
		if(letter[0] == layer->label[i]){
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6919      	ldr	r1, [r3, #16]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	440b      	add	r3, r1
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d101      	bne.n	80014aa <OL_checkNewClass+0x2a>
			found = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<layer->WIDTH; i++){
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dbec      	blt.n	8001494 <OL_checkNewClass+0x14>
		}
	}

	// If the letter is new perform the following
	if(found==0){
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d123      	bne.n	8001508 <OL_checkNewClass+0x88>
#ifdef MSG_ACTIVE
		msgLen = sprintf(msgDebug, "\n\n\r    New letter found %c", letter[0]);
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif

		layer->new_class = 1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		layer->WIDTH +=1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]

		OL_increaseLabel(layer, letter[0]);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff64 	bl	80013a6 <OL_increaseLabel>
		OL_increaseWeightDim(layer);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff25 	bl	800132e <OL_increaseWeightDim>
		OL_increaseBiasDim(layer);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff99 	bl	800141c <OL_increaseBiasDim>

		free(layer->y_pred);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f009 fe2c 	bl	800b14c <free>
		layer->y_pred = (float*)calloc(layer->WIDTH, sizeof(float));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2104      	movs	r1, #4
 80014fa:	4618      	mov	r0, r3
 80014fc:	f009 fdec 	bl	800b0d8 <calloc>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	61da      	str	r2, [r3, #28]
	}
};
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <OL_train>:




void OL_train(OL_LAYER_STRUCT * layer, float *x, float *y_true, char *letter){
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6178      	str	r0, [r7, #20]
 8001518:	6139      	str	r1, [r7, #16]
 800151a:	60fa      	str	r2, [r7, #12]
 800151c:	60bb      	str	r3, [r7, #8]
	msgLen = sprintf(msgDebug, "\n\n\r  -- Begin on TRAIN routine --\n\n\r    OL_train");
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif


	for(int i=0; i<layer->n_epochs; i++){
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
 8001522:	e07e      	b.n	8001622 <OL_train+0x112>

		// Perform inference of OL LAYER
		OL_feedForward(layer, x);
 8001524:	6939      	ldr	r1, [r7, #16]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff fd3d 	bl	8000fa6 <OL_feedForward>
		OL_softmax(layer);
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7ff fd97 	bl	8001060 <OL_softmax>

		// Find the max value in the prediction and in the true label
		layer->vowel_guess = 0;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		uint8_t max_pred = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t max_true = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t max_i_pred;
		uint8_t max_i_true;
		for(int i=0; i<layer->WIDTH; i++){
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	e04e      	b.n	80015ea <OL_train+0xda>
			if(max_pred < layer->y_pred[i]){
 800154c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	69da      	ldr	r2, [r3, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	d518      	bpl.n	80015a2 <OL_train+0x92>
				max_i_pred = i;
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				max_pred = layer->y_pred[i];
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	69da      	ldr	r2, [r3, #28]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001588:	edc7 7a01 	vstr	s15, [r7, #4]
 800158c:	793b      	ldrb	r3, [r7, #4]
 800158e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				layer->vowel_guess = layer->label[i];
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			}
			if(max_true < y_true[i]){
 80015a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	d50f      	bpl.n	80015e4 <OL_train+0xd4>
				max_i_true=i;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f887 3020 	strb.w	r3, [r7, #32]
				max_true = y_true[i];
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4413      	add	r3, r2
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015da:	edc7 7a01 	vstr	s15, [r7, #4]
 80015de:	793b      	ldrb	r3, [r7, #4]
 80015e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		for(int i=0; i<layer->WIDTH; i++){
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	3301      	adds	r3, #1
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbab      	blt.n	800154c <OL_train+0x3c>



		// Check if prediction is correct or not

		if(max_i_true != max_i_pred){
 80015f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d009      	beq.n	8001614 <OL_train+0x104>
#ifdef MSG_ACTIVE
				msgLen = sprintf(msgDebug, "\r    Performing weights update\n");
				HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
#endif
			layer->prediction_correct = 1;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2020 	strb.w	r2, [r3, #32]
			// Update weights
			OL_gradientDescend(layer, x, y_true);
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	6939      	ldr	r1, [r7, #16]
 800160c:	6978      	ldr	r0, [r7, #20]
 800160e:	f7ff fdcb 	bl	80011a8 <OL_gradientDescend>
 8001612:	e003      	b.n	800161c <OL_train+0x10c>
		}else{
			layer->prediction_correct = 2;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 2020 	strb.w	r2, [r3, #32]
	for(int i=0; i<layer->n_epochs; i++){
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	3301      	adds	r3, #1
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001628:	429a      	cmp	r2, r3
 800162a:	f6ff af7b 	blt.w	8001524 <OL_train+0x14>




	}
};
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <PRINT_checkLabels>:
// *********************************************************




void PRINT_checkLabels(OL_LAYER_STRUCT * layer, float * y_true){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]

	  msgLen = sprintf(msgDebug, "\r    LABEL CHECK:");
 8001642:	4a96      	ldr	r2, [pc, #600]	; (800189c <PRINT_checkLabels+0x264>)
 8001644:	4b96      	ldr	r3, [pc, #600]	; (80018a0 <PRINT_checkLabels+0x268>)
 8001646:	4615      	mov	r5, r2
 8001648:	461c      	mov	r4, r3
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	6028      	str	r0, [r5, #0]
 800164e:	6069      	str	r1, [r5, #4]
 8001650:	60aa      	str	r2, [r5, #8]
 8001652:	60eb      	str	r3, [r5, #12]
 8001654:	8823      	ldrh	r3, [r4, #0]
 8001656:	822b      	strh	r3, [r5, #16]
 8001658:	2211      	movs	r2, #17
 800165a:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <PRINT_checkLabels+0x26c>)
 800165c:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 800165e:	4b91      	ldr	r3, [pc, #580]	; (80018a4 <PRINT_checkLabels+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29a      	uxth	r2, r3
 8001664:	2364      	movs	r3, #100	; 0x64
 8001666:	498d      	ldr	r1, [pc, #564]	; (800189c <PRINT_checkLabels+0x264>)
 8001668:	488f      	ldr	r0, [pc, #572]	; (80018a8 <PRINT_checkLabels+0x270>)
 800166a:	f006 ffa0 	bl	80085ae <HAL_UART_Transmit>
	  for(int i=0; i<layer->WIDTH; i++){
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e017      	b.n	80016a4 <PRINT_checkLabels+0x6c>
		  msgLen = sprintf(msgDebug, "  %c       ", layer->label[i]);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	498a      	ldr	r1, [pc, #552]	; (80018ac <PRINT_checkLabels+0x274>)
 8001682:	4886      	ldr	r0, [pc, #536]	; (800189c <PRINT_checkLabels+0x264>)
 8001684:	f009 fec0 	bl	800b408 <siprintf>
 8001688:	4602      	mov	r2, r0
 800168a:	4b86      	ldr	r3, [pc, #536]	; (80018a4 <PRINT_checkLabels+0x26c>)
 800168c:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 800168e:	4b85      	ldr	r3, [pc, #532]	; (80018a4 <PRINT_checkLabels+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29a      	uxth	r2, r3
 8001694:	2364      	movs	r3, #100	; 0x64
 8001696:	4981      	ldr	r1, [pc, #516]	; (800189c <PRINT_checkLabels+0x264>)
 8001698:	4883      	ldr	r0, [pc, #524]	; (80018a8 <PRINT_checkLabels+0x270>)
 800169a:	f006 ff88 	bl	80085ae <HAL_UART_Transmit>
	  for(int i=0; i<layer->WIDTH; i++){
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3301      	adds	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	dbe2      	blt.n	8001674 <PRINT_checkLabels+0x3c>
	  }
	  msgLen = sprintf(msgDebug, "\n");
 80016ae:	4a7b      	ldr	r2, [pc, #492]	; (800189c <PRINT_checkLabels+0x264>)
 80016b0:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <PRINT_checkLabels+0x278>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	8013      	strh	r3, [r2, #0]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <PRINT_checkLabels+0x26c>)
 80016ba:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 80016bc:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <PRINT_checkLabels+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	2364      	movs	r3, #100	; 0x64
 80016c4:	4975      	ldr	r1, [pc, #468]	; (800189c <PRINT_checkLabels+0x264>)
 80016c6:	4878      	ldr	r0, [pc, #480]	; (80018a8 <PRINT_checkLabels+0x270>)
 80016c8:	f006 ff71 	bl	80085ae <HAL_UART_Transmit>

	  msgLen = sprintf(msgDebug,   "\r      Inference:");
 80016cc:	4a73      	ldr	r2, [pc, #460]	; (800189c <PRINT_checkLabels+0x264>)
 80016ce:	4b79      	ldr	r3, [pc, #484]	; (80018b4 <PRINT_checkLabels+0x27c>)
 80016d0:	4615      	mov	r5, r2
 80016d2:	461c      	mov	r4, r3
 80016d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d6:	6028      	str	r0, [r5, #0]
 80016d8:	6069      	str	r1, [r5, #4]
 80016da:	60aa      	str	r2, [r5, #8]
 80016dc:	60eb      	str	r3, [r5, #12]
 80016de:	8823      	ldrh	r3, [r4, #0]
 80016e0:	822b      	strh	r3, [r5, #16]
 80016e2:	2211      	movs	r2, #17
 80016e4:	4b6f      	ldr	r3, [pc, #444]	; (80018a4 <PRINT_checkLabels+0x26c>)
 80016e6:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 80016e8:	4b6e      	ldr	r3, [pc, #440]	; (80018a4 <PRINT_checkLabels+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	2364      	movs	r3, #100	; 0x64
 80016f0:	496a      	ldr	r1, [pc, #424]	; (800189c <PRINT_checkLabels+0x264>)
 80016f2:	486d      	ldr	r0, [pc, #436]	; (80018a8 <PRINT_checkLabels+0x270>)
 80016f4:	f006 ff5b 	bl	80085ae <HAL_UART_Transmit>
	  for(int i=0; i<layer->WIDTH; i++){
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
 80016fc:	e01e      	b.n	800173c <PRINT_checkLabels+0x104>
		  msgLen = sprintf(msgDebug, "  %f", layer->y_pred[i]);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff1c 	bl	8000548 <__aeabi_f2d>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	4967      	ldr	r1, [pc, #412]	; (80018b8 <PRINT_checkLabels+0x280>)
 800171a:	4860      	ldr	r0, [pc, #384]	; (800189c <PRINT_checkLabels+0x264>)
 800171c:	f009 fe74 	bl	800b408 <siprintf>
 8001720:	4602      	mov	r2, r0
 8001722:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <PRINT_checkLabels+0x26c>)
 8001724:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <PRINT_checkLabels+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b29a      	uxth	r2, r3
 800172c:	2364      	movs	r3, #100	; 0x64
 800172e:	495b      	ldr	r1, [pc, #364]	; (800189c <PRINT_checkLabels+0x264>)
 8001730:	485d      	ldr	r0, [pc, #372]	; (80018a8 <PRINT_checkLabels+0x270>)
 8001732:	f006 ff3c 	bl	80085ae <HAL_UART_Transmit>
	  for(int i=0; i<layer->WIDTH; i++){
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	3301      	adds	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbdb      	blt.n	80016fe <PRINT_checkLabels+0xc6>
	  }
	  msgLen = sprintf(msgDebug, "\n");
 8001746:	4a55      	ldr	r2, [pc, #340]	; (800189c <PRINT_checkLabels+0x264>)
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <PRINT_checkLabels+0x278>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	8013      	strh	r3, [r2, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <PRINT_checkLabels+0x26c>)
 8001752:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001754:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <PRINT_checkLabels+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b29a      	uxth	r2, r3
 800175a:	2364      	movs	r3, #100	; 0x64
 800175c:	494f      	ldr	r1, [pc, #316]	; (800189c <PRINT_checkLabels+0x264>)
 800175e:	4852      	ldr	r0, [pc, #328]	; (80018a8 <PRINT_checkLabels+0x270>)
 8001760:	f006 ff25 	bl	80085ae <HAL_UART_Transmit>

	  msgLen = sprintf(msgDebug,   "\r      True:     ");
 8001764:	4a4d      	ldr	r2, [pc, #308]	; (800189c <PRINT_checkLabels+0x264>)
 8001766:	4b55      	ldr	r3, [pc, #340]	; (80018bc <PRINT_checkLabels+0x284>)
 8001768:	4615      	mov	r5, r2
 800176a:	461c      	mov	r4, r3
 800176c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176e:	6028      	str	r0, [r5, #0]
 8001770:	6069      	str	r1, [r5, #4]
 8001772:	60aa      	str	r2, [r5, #8]
 8001774:	60eb      	str	r3, [r5, #12]
 8001776:	8823      	ldrh	r3, [r4, #0]
 8001778:	822b      	strh	r3, [r5, #16]
 800177a:	2211      	movs	r2, #17
 800177c:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <PRINT_checkLabels+0x26c>)
 800177e:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001780:	4b48      	ldr	r3, [pc, #288]	; (80018a4 <PRINT_checkLabels+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b29a      	uxth	r2, r3
 8001786:	2364      	movs	r3, #100	; 0x64
 8001788:	4944      	ldr	r1, [pc, #272]	; (800189c <PRINT_checkLabels+0x264>)
 800178a:	4847      	ldr	r0, [pc, #284]	; (80018a8 <PRINT_checkLabels+0x270>)
 800178c:	f006 ff0f 	bl	80085ae <HAL_UART_Transmit>
	  for(int i=0; i<layer->WIDTH; i++){
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e01d      	b.n	80017d2 <PRINT_checkLabels+0x19a>
		  msgLen = sprintf(msgDebug,   "  %f", y_true[i]);
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fed1 	bl	8000548 <__aeabi_f2d>
 80017a6:	4603      	mov	r3, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	461a      	mov	r2, r3
 80017ac:	4623      	mov	r3, r4
 80017ae:	4942      	ldr	r1, [pc, #264]	; (80018b8 <PRINT_checkLabels+0x280>)
 80017b0:	483a      	ldr	r0, [pc, #232]	; (800189c <PRINT_checkLabels+0x264>)
 80017b2:	f009 fe29 	bl	800b408 <siprintf>
 80017b6:	4602      	mov	r2, r0
 80017b8:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <PRINT_checkLabels+0x26c>)
 80017ba:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <PRINT_checkLabels+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	2364      	movs	r3, #100	; 0x64
 80017c4:	4935      	ldr	r1, [pc, #212]	; (800189c <PRINT_checkLabels+0x264>)
 80017c6:	4838      	ldr	r0, [pc, #224]	; (80018a8 <PRINT_checkLabels+0x270>)
 80017c8:	f006 fef1 	bl	80085ae <HAL_UART_Transmit>
	  for(int i=0; i<layer->WIDTH; i++){
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbdc      	blt.n	8001796 <PRINT_checkLabels+0x15e>
	  }
	  msgLen = sprintf(msgDebug, "\n");
 80017dc:	4a2f      	ldr	r2, [pc, #188]	; (800189c <PRINT_checkLabels+0x264>)
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <PRINT_checkLabels+0x278>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	8013      	strh	r3, [r2, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <PRINT_checkLabels+0x26c>)
 80017e8:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <PRINT_checkLabels+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	2364      	movs	r3, #100	; 0x64
 80017f2:	492a      	ldr	r1, [pc, #168]	; (800189c <PRINT_checkLabels+0x264>)
 80017f4:	482c      	ldr	r0, [pc, #176]	; (80018a8 <PRINT_checkLabels+0x270>)
 80017f6:	f006 feda 	bl	80085ae <HAL_UART_Transmit>

	  int correct = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
	  for(int i=0; i<layer->WIDTH; i++){
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e016      	b.n	8001832 <PRINT_checkLabels+0x1fa>
		  if(layer->y_pred[i] != y_true[i]){
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	ed93 7a00 	vldr	s14, [r3]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	4413      	add	r3, r2
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	d001      	beq.n	800182c <PRINT_checkLabels+0x1f4>
			  correct = 1;
 8001828:	2301      	movs	r3, #1
 800182a:	613b      	str	r3, [r7, #16]
	  for(int i=0; i<layer->WIDTH; i++){
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3301      	adds	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbe3      	blt.n	8001804 <PRINT_checkLabels+0x1cc>
		  }
	  }

	  if(correct==0){
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <PRINT_checkLabels+0x22a>
		  msgLen = sprintf(msgDebug, "\r    Prediction -> 	OK\n");
 8001842:	4a16      	ldr	r2, [pc, #88]	; (800189c <PRINT_checkLabels+0x264>)
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <PRINT_checkLabels+0x288>)
 8001846:	4615      	mov	r5, r2
 8001848:	461c      	mov	r4, r3
 800184a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184c:	6028      	str	r0, [r5, #0]
 800184e:	6069      	str	r1, [r5, #4]
 8001850:	60aa      	str	r2, [r5, #8]
 8001852:	60eb      	str	r3, [r5, #12]
 8001854:	cc03      	ldmia	r4!, {r0, r1}
 8001856:	6128      	str	r0, [r5, #16]
 8001858:	6169      	str	r1, [r5, #20]
 800185a:	2217      	movs	r2, #23
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <PRINT_checkLabels+0x26c>)
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e010      	b.n	8001884 <PRINT_checkLabels+0x24c>
	  }else{
		  msgLen = sprintf(msgDebug, "\r    Prediction -> ERROR\n");
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <PRINT_checkLabels+0x264>)
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <PRINT_checkLabels+0x28c>)
 8001866:	4615      	mov	r5, r2
 8001868:	461c      	mov	r4, r3
 800186a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186c:	6028      	str	r0, [r5, #0]
 800186e:	6069      	str	r1, [r5, #4]
 8001870:	60aa      	str	r2, [r5, #8]
 8001872:	60eb      	str	r3, [r5, #12]
 8001874:	cc03      	ldmia	r4!, {r0, r1}
 8001876:	6128      	str	r0, [r5, #16]
 8001878:	6169      	str	r1, [r5, #20]
 800187a:	8823      	ldrh	r3, [r4, #0]
 800187c:	832b      	strh	r3, [r5, #24]
 800187e:	2219      	movs	r2, #25
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <PRINT_checkLabels+0x26c>)
 8001882:	601a      	str	r2, [r3, #0]
	  }
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <PRINT_checkLabels+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29a      	uxth	r2, r3
 800188a:	2364      	movs	r3, #100	; 0x64
 800188c:	4903      	ldr	r1, [pc, #12]	; (800189c <PRINT_checkLabels+0x264>)
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <PRINT_checkLabels+0x270>)
 8001890:	f006 fe8d 	bl	80085ae <HAL_UART_Transmit>
}
 8001894:	bf00      	nop
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bdb0      	pop	{r4, r5, r7, pc}
 800189c:	20001ac0 	.word	0x20001ac0
 80018a0:	0800cc80 	.word	0x0800cc80
 80018a4:	20001b40 	.word	0x20001b40
 80018a8:	2000276c 	.word	0x2000276c
 80018ac:	0800cc94 	.word	0x0800cc94
 80018b0:	0800cca0 	.word	0x0800cca0
 80018b4:	0800cca4 	.word	0x0800cca4
 80018b8:	0800ccb8 	.word	0x0800ccb8
 80018bc:	0800ccc0 	.word	0x0800ccc0
 80018c0:	0800ccd4 	.word	0x0800ccd4
 80018c4:	0800ccec 	.word	0x0800ccec

080018c8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_CRC_Init+0x20>)
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <MX_CRC_Init+0x24>)
 80018d0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_CRC_Init+0x20>)
 80018d4:	f004 fca7 	bl	8006226 <HAL_CRC_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80018de:	f000 fcc9 	bl	8002274 <Error_Handler>
  }

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20001b44 	.word	0x20001b44
 80018ec:	40023000 	.word	0x40023000

080018f0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_CRC_MspInit+0x3c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10d      	bne.n	800191e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_CRC_MspInit+0x40>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_CRC_MspInit+0x40>)
 800190c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_CRC_MspInit+0x40>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023000 	.word	0x40023000
 8001930:	40023800 	.word	0x40023800

08001934 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <MX_GPIO_Init+0xe0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a30      	ldr	r2, [pc, #192]	; (8001a14 <MX_GPIO_Init+0xe0>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <MX_GPIO_Init+0xe0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <MX_GPIO_Init+0xe0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a29      	ldr	r2, [pc, #164]	; (8001a14 <MX_GPIO_Init+0xe0>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <MX_GPIO_Init+0xe0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <MX_GPIO_Init+0xe0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <MX_GPIO_Init+0xe0>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <MX_GPIO_Init+0xe0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_GPIO_Init+0xe0>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <MX_GPIO_Init+0xe0>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <MX_GPIO_Init+0xe0>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2120      	movs	r1, #32
 80019be:	4816      	ldr	r0, [pc, #88]	; (8001a18 <MX_GPIO_Init+0xe4>)
 80019c0:	f004 fed4 	bl	800676c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_GPIO_Init+0xe8>)
 80019cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4811      	ldr	r0, [pc, #68]	; (8001a20 <MX_GPIO_Init+0xec>)
 80019da:	f004 fc63 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019de:	2320      	movs	r3, #32
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4808      	ldr	r0, [pc, #32]	; (8001a18 <MX_GPIO_Init+0xe4>)
 80019f6:	f004 fc55 	bl	80062a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2028      	movs	r0, #40	; 0x28
 8001a00:	f004 fbdb 	bl	80061ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a04:	2028      	movs	r0, #40	; 0x28
 8001a06:	f004 fbf4 	bl	80061f2 <HAL_NVIC_EnableIRQ>

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	10210000 	.word	0x10210000
 8001a20:	40020800 	.word	0x40020800

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a26:	b093      	sub	sp, #76	; 0x4c
 8001a28:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2a:	f004 fa57 	bl	8005edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2e:	f000 fae5 	bl	8001ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a32:	f7ff ff7f 	bl	8001934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a36:	f000 fe97 	bl	8002768 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001a3a:	f7ff ff45 	bl	80018c8 <MX_CRC_Init>
  MX_TIM10_Init();
 8001a3e:	f000 fe47 	bl	80026d0 <MX_TIM10_Init>
  MX_X_CUBE_AI_Init();
 8001a42:	f007 fddd 	bl	8009600 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */


  // Start timer for the data recording

  msgLen = sprintf(msgDebug, "\n\n\r### TEST X-CUBEMX-AI ###");
 8001a46:	4ab5      	ldr	r2, [pc, #724]	; (8001d1c <main+0x2f8>)
 8001a48:	4bb5      	ldr	r3, [pc, #724]	; (8001d20 <main+0x2fc>)
 8001a4a:	4615      	mov	r5, r2
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a50:	6028      	str	r0, [r5, #0]
 8001a52:	6069      	str	r1, [r5, #4]
 8001a54:	60aa      	str	r2, [r5, #8]
 8001a56:	60eb      	str	r3, [r5, #12]
 8001a58:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001a5a:	6128      	str	r0, [r5, #16]
 8001a5c:	6169      	str	r1, [r5, #20]
 8001a5e:	61aa      	str	r2, [r5, #24]
 8001a60:	221b      	movs	r2, #27
 8001a62:	4bb0      	ldr	r3, [pc, #704]	; (8001d24 <main+0x300>)
 8001a64:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001a66:	4baf      	ldr	r3, [pc, #700]	; (8001d24 <main+0x300>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2364      	movs	r3, #100	; 0x64
 8001a6e:	49ab      	ldr	r1, [pc, #684]	; (8001d1c <main+0x2f8>)
 8001a70:	48ad      	ldr	r0, [pc, #692]	; (8001d28 <main+0x304>)
 8001a72:	f006 fd9c 	bl	80085ae <HAL_UART_Transmit>

  int init_acc = IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0 , MOTION_ACCELERO );
 8001a76:	2102      	movs	r1, #2
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f003 fde3 	bl	8005644 <IKS01A2_MOTION_SENSOR_Init>
 8001a7e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ( init_acc == 0 ){
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d123      	bne.n	8001ace <main+0xaa>
	  msgLen = sprintf(msgDebug, "\n\n\r>Accelerometer initialisation: completed");
 8001a86:	4ba5      	ldr	r3, [pc, #660]	; (8001d1c <main+0x2f8>)
 8001a88:	4aa8      	ldr	r2, [pc, #672]	; (8001d2c <main+0x308>)
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	469c      	mov	ip, r3
 8001a8e:	f104 0e20 	add.w	lr, r4, #32
 8001a92:	4665      	mov	r5, ip
 8001a94:	4626      	mov	r6, r4
 8001a96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a98:	6028      	str	r0, [r5, #0]
 8001a9a:	6069      	str	r1, [r5, #4]
 8001a9c:	60aa      	str	r2, [r5, #8]
 8001a9e:	60eb      	str	r3, [r5, #12]
 8001aa0:	3410      	adds	r4, #16
 8001aa2:	f10c 0c10 	add.w	ip, ip, #16
 8001aa6:	4574      	cmp	r4, lr
 8001aa8:	d1f3      	bne.n	8001a92 <main+0x6e>
 8001aaa:	4665      	mov	r5, ip
 8001aac:	4623      	mov	r3, r4
 8001aae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ab0:	6028      	str	r0, [r5, #0]
 8001ab2:	6069      	str	r1, [r5, #4]
 8001ab4:	60aa      	str	r2, [r5, #8]
 8001ab6:	222b      	movs	r2, #43	; 0x2b
 8001ab8:	4b9a      	ldr	r3, [pc, #616]	; (8001d24 <main+0x300>)
 8001aba:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000);
 8001abc:	4b99      	ldr	r3, [pc, #612]	; (8001d24 <main+0x300>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	4995      	ldr	r1, [pc, #596]	; (8001d1c <main+0x2f8>)
 8001ac8:	4897      	ldr	r0, [pc, #604]	; (8001d28 <main+0x304>)
 8001aca:	f006 fd70 	bl	80085ae <HAL_UART_Transmit>
  }

  // Accelerometer enabling
  int enable_acc = IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO );
 8001ace:	2102      	movs	r1, #2
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f003 fead 	bl	8005830 <IKS01A2_MOTION_SENSOR_Enable>
 8001ad6:	62b8      	str	r0, [r7, #40]	; 0x28
  if ( enable_acc == 0){
 8001ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d123      	bne.n	8001b26 <main+0x102>
	  msgLen = sprintf(msgDebug, "\n\r>Accelerometer enabling: completed");
 8001ade:	4b8f      	ldr	r3, [pc, #572]	; (8001d1c <main+0x2f8>)
 8001ae0:	4a93      	ldr	r2, [pc, #588]	; (8001d30 <main+0x30c>)
 8001ae2:	4614      	mov	r4, r2
 8001ae4:	469c      	mov	ip, r3
 8001ae6:	f104 0e20 	add.w	lr, r4, #32
 8001aea:	4665      	mov	r5, ip
 8001aec:	4626      	mov	r6, r4
 8001aee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001af0:	6028      	str	r0, [r5, #0]
 8001af2:	6069      	str	r1, [r5, #4]
 8001af4:	60aa      	str	r2, [r5, #8]
 8001af6:	60eb      	str	r3, [r5, #12]
 8001af8:	3410      	adds	r4, #16
 8001afa:	f10c 0c10 	add.w	ip, ip, #16
 8001afe:	4574      	cmp	r4, lr
 8001b00:	d1f3      	bne.n	8001aea <main+0xc6>
 8001b02:	4663      	mov	r3, ip
 8001b04:	4622      	mov	r2, r4
 8001b06:	6810      	ldr	r0, [r2, #0]
 8001b08:	6018      	str	r0, [r3, #0]
 8001b0a:	7912      	ldrb	r2, [r2, #4]
 8001b0c:	711a      	strb	r2, [r3, #4]
 8001b0e:	2224      	movs	r2, #36	; 0x24
 8001b10:	4b84      	ldr	r3, [pc, #528]	; (8001d24 <main+0x300>)
 8001b12:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000);
 8001b14:	4b83      	ldr	r3, [pc, #524]	; (8001d24 <main+0x300>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	497f      	ldr	r1, [pc, #508]	; (8001d1c <main+0x2f8>)
 8001b20:	4881      	ldr	r0, [pc, #516]	; (8001d28 <main+0x304>)
 8001b22:	f006 fd44 	bl	80085ae <HAL_UART_Transmit>
  }

  IKS01A2_MOTION_SENSOR_GetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_odr);
 8001b26:	4a83      	ldr	r2, [pc, #524]	; (8001d34 <main+0x310>)
 8001b28:	2102      	movs	r1, #2
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f003 ff4a 	bl	80059c4 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>
  IKS01A2_MOTION_SENSOR_GetSensitivity(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_sens);
 8001b30:	4a81      	ldr	r2, [pc, #516]	; (8001d38 <main+0x314>)
 8001b32:	2102      	movs	r1, #2
 8001b34:	2000      	movs	r0, #0
 8001b36:	f003 ff01 	bl	800593c <IKS01A2_MOTION_SENSOR_GetSensitivity>
  IKS01A2_MOTION_SENSOR_GetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_fs);
 8001b3a:	4a80      	ldr	r2, [pc, #512]	; (8001d3c <main+0x318>)
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f003 ff84 	bl	8005a4c <IKS01A2_MOTION_SENSOR_GetFullScale>

  msgLen = sprintf(msgDebug, ">\n\r Output rate:%f Hz	Sensitivity:%f g FullScale:%ld g\r\n",accelerometer_odr, accelerometer_sens, accelerometer_fs);
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <main+0x310>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	4605      	mov	r5, r0
 8001b50:	460e      	mov	r6, r1
 8001b52:	4b79      	ldr	r3, [pc, #484]	; (8001d38 <main+0x314>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fcf6 	bl	8000548 <__aeabi_f2d>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	4a76      	ldr	r2, [pc, #472]	; (8001d3c <main+0x318>)
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	9202      	str	r2, [sp, #8]
 8001b66:	e9cd 3400 	strd	r3, r4, [sp]
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	4633      	mov	r3, r6
 8001b6e:	4974      	ldr	r1, [pc, #464]	; (8001d40 <main+0x31c>)
 8001b70:	486a      	ldr	r0, [pc, #424]	; (8001d1c <main+0x2f8>)
 8001b72:	f009 fc49 	bl	800b408 <siprintf>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b6a      	ldr	r3, [pc, #424]	; (8001d24 <main+0x300>)
 8001b7a:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000);
 8001b7c:	4b69      	ldr	r3, [pc, #420]	; (8001d24 <main+0x300>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	4965      	ldr	r1, [pc, #404]	; (8001d1c <main+0x2f8>)
 8001b88:	4867      	ldr	r0, [pc, #412]	; (8001d28 <main+0x304>)
 8001b8a:	f006 fd10 	bl	80085ae <HAL_UART_Transmit>

  HAL_TIM_Base_Start_IT(&htim10);
 8001b8e:	486d      	ldr	r0, [pc, #436]	; (8001d44 <main+0x320>)
 8001b90:	f006 fad7 	bl	8008142 <HAL_TIM_Base_Start_IT>

  OL_LAYER_STRUCT OL_layer;

  // Assign the weight and bias matrices

  OL_layer.WIDTH = 5;
 8001b94:	2305      	movs	r3, #5
 8001b96:	603b      	str	r3, [r7, #0]
  OL_layer.HEIGHT = AI_NETWORK_OUT_1_SIZE;
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	607b      	str	r3, [r7, #4]

  OL_layer.n_epochs = 1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
  OL_layer.l_rate = 0.01;
 8001ba0:	4b69      	ldr	r3, [pc, #420]	; (8001d48 <main+0x324>)
 8001ba2:	60bb      	str	r3, [r7, #8]


  OL_layer.weights = (float*)calloc(OL_layer.WIDTH*OL_layer.HEIGHT, sizeof(float));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	2104      	movs	r1, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f009 fa92 	bl	800b0d8 <calloc>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	617b      	str	r3, [r7, #20]
  if(OL_layer.weights==NULL){
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11c      	bne.n	8001bf8 <main+0x1d4>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for weights");
 8001bbe:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <main+0x2f8>)
 8001bc0:	4a62      	ldr	r2, [pc, #392]	; (8001d4c <main+0x328>)
 8001bc2:	4614      	mov	r4, r2
 8001bc4:	469c      	mov	ip, r3
 8001bc6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001bca:	4665      	mov	r5, ip
 8001bcc:	4626      	mov	r6, r4
 8001bce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bd0:	6028      	str	r0, [r5, #0]
 8001bd2:	6069      	str	r1, [r5, #4]
 8001bd4:	60aa      	str	r2, [r5, #8]
 8001bd6:	60eb      	str	r3, [r5, #12]
 8001bd8:	3410      	adds	r4, #16
 8001bda:	f10c 0c10 	add.w	ip, ip, #16
 8001bde:	4574      	cmp	r4, lr
 8001be0:	d1f3      	bne.n	8001bca <main+0x1a6>
 8001be2:	222f      	movs	r2, #47	; 0x2f
 8001be4:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <main+0x300>)
 8001be6:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001be8:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <main+0x300>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	2364      	movs	r3, #100	; 0x64
 8001bf0:	494a      	ldr	r1, [pc, #296]	; (8001d1c <main+0x2f8>)
 8001bf2:	484d      	ldr	r0, [pc, #308]	; (8001d28 <main+0x304>)
 8001bf4:	f006 fcdb 	bl	80085ae <HAL_UART_Transmit>
  }

  OL_layer.biases = (float*)calloc(OL_layer.WIDTH, sizeof(float));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f009 fa6b 	bl	800b0d8 <calloc>
 8001c02:	4603      	mov	r3, r0
 8001c04:	61bb      	str	r3, [r7, #24]
  if(OL_layer.biases==NULL){
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d126      	bne.n	8001c5a <main+0x236>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for biases");
 8001c0c:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <main+0x2f8>)
 8001c0e:	4a50      	ldr	r2, [pc, #320]	; (8001d50 <main+0x32c>)
 8001c10:	4615      	mov	r5, r2
 8001c12:	469c      	mov	ip, r3
 8001c14:	f105 0e20 	add.w	lr, r5, #32
 8001c18:	4664      	mov	r4, ip
 8001c1a:	462e      	mov	r6, r5
 8001c1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c1e:	6020      	str	r0, [r4, #0]
 8001c20:	6061      	str	r1, [r4, #4]
 8001c22:	60a2      	str	r2, [r4, #8]
 8001c24:	60e3      	str	r3, [r4, #12]
 8001c26:	3510      	adds	r5, #16
 8001c28:	f10c 0c10 	add.w	ip, ip, #16
 8001c2c:	4575      	cmp	r5, lr
 8001c2e:	d1f3      	bne.n	8001c18 <main+0x1f4>
 8001c30:	4664      	mov	r4, ip
 8001c32:	462b      	mov	r3, r5
 8001c34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c36:	6020      	str	r0, [r4, #0]
 8001c38:	6061      	str	r1, [r4, #4]
 8001c3a:	60a2      	str	r2, [r4, #8]
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	789b      	ldrb	r3, [r3, #2]
 8001c40:	81a2      	strh	r2, [r4, #12]
 8001c42:	73a3      	strb	r3, [r4, #14]
 8001c44:	222e      	movs	r2, #46	; 0x2e
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <main+0x300>)
 8001c48:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001c4a:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <main+0x300>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	2364      	movs	r3, #100	; 0x64
 8001c52:	4932      	ldr	r1, [pc, #200]	; (8001d1c <main+0x2f8>)
 8001c54:	4834      	ldr	r0, [pc, #208]	; (8001d28 <main+0x304>)
 8001c56:	f006 fcaa 	bl	80085ae <HAL_UART_Transmit>
  }

  OL_layer.label = (char*)calloc(OL_layer.WIDTH, sizeof(char));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f009 fa3a 	bl	800b0d8 <calloc>
 8001c64:	4603      	mov	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]
  if(OL_layer.label==NULL){
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d124      	bne.n	8001cb8 <main+0x294>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for label");
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <main+0x2f8>)
 8001c70:	4a38      	ldr	r2, [pc, #224]	; (8001d54 <main+0x330>)
 8001c72:	4614      	mov	r4, r2
 8001c74:	469c      	mov	ip, r3
 8001c76:	f104 0e20 	add.w	lr, r4, #32
 8001c7a:	4665      	mov	r5, ip
 8001c7c:	4626      	mov	r6, r4
 8001c7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c80:	6028      	str	r0, [r5, #0]
 8001c82:	6069      	str	r1, [r5, #4]
 8001c84:	60aa      	str	r2, [r5, #8]
 8001c86:	60eb      	str	r3, [r5, #12]
 8001c88:	3410      	adds	r4, #16
 8001c8a:	f10c 0c10 	add.w	ip, ip, #16
 8001c8e:	4574      	cmp	r4, lr
 8001c90:	d1f3      	bne.n	8001c7a <main+0x256>
 8001c92:	4665      	mov	r5, ip
 8001c94:	4623      	mov	r3, r4
 8001c96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c98:	6028      	str	r0, [r5, #0]
 8001c9a:	6069      	str	r1, [r5, #4]
 8001c9c:	60aa      	str	r2, [r5, #8]
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	81ab      	strh	r3, [r5, #12]
 8001ca2:	222d      	movs	r2, #45	; 0x2d
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <main+0x300>)
 8001ca6:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <main+0x300>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	2364      	movs	r3, #100	; 0x64
 8001cb0:	491a      	ldr	r1, [pc, #104]	; (8001d1c <main+0x2f8>)
 8001cb2:	481d      	ldr	r0, [pc, #116]	; (8001d28 <main+0x304>)
 8001cb4:	f006 fc7b 	bl	80085ae <HAL_UART_Transmit>
  }

  OL_layer.y_pred = (float*)calloc(OL_layer.WIDTH, sizeof(float));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2104      	movs	r1, #4
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f009 fa0b 	bl	800b0d8 <calloc>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	61fb      	str	r3, [r7, #28]
  if(OL_layer.y_pred==NULL){
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d147      	bne.n	8001d5c <main+0x338>
	  msgLen = sprintf(msgDebug, "\n\r ERROR: Failed to allocate memory for y_pred");
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <main+0x2f8>)
 8001cce:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <main+0x334>)
 8001cd0:	4615      	mov	r5, r2
 8001cd2:	469c      	mov	ip, r3
 8001cd4:	f105 0e20 	add.w	lr, r5, #32
 8001cd8:	4664      	mov	r4, ip
 8001cda:	462e      	mov	r6, r5
 8001cdc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001cde:	6020      	str	r0, [r4, #0]
 8001ce0:	6061      	str	r1, [r4, #4]
 8001ce2:	60a2      	str	r2, [r4, #8]
 8001ce4:	60e3      	str	r3, [r4, #12]
 8001ce6:	3510      	adds	r5, #16
 8001ce8:	f10c 0c10 	add.w	ip, ip, #16
 8001cec:	4575      	cmp	r5, lr
 8001cee:	d1f3      	bne.n	8001cd8 <main+0x2b4>
 8001cf0:	4664      	mov	r4, ip
 8001cf2:	462b      	mov	r3, r5
 8001cf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001cf6:	6020      	str	r0, [r4, #0]
 8001cf8:	6061      	str	r1, [r4, #4]
 8001cfa:	60a2      	str	r2, [r4, #8]
 8001cfc:	881a      	ldrh	r2, [r3, #0]
 8001cfe:	789b      	ldrb	r3, [r3, #2]
 8001d00:	81a2      	strh	r2, [r4, #12]
 8001d02:	73a3      	strb	r3, [r4, #14]
 8001d04:	222e      	movs	r2, #46	; 0x2e
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <main+0x300>)
 8001d08:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <main+0x300>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	2364      	movs	r3, #100	; 0x64
 8001d12:	4902      	ldr	r1, [pc, #8]	; (8001d1c <main+0x2f8>)
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <main+0x304>)
 8001d16:	f006 fc4a 	bl	80085ae <HAL_UART_Transmit>
 8001d1a:	e01f      	b.n	8001d5c <main+0x338>
 8001d1c:	20001ac0 	.word	0x20001ac0
 8001d20:	0800cd08 	.word	0x0800cd08
 8001d24:	20001b40 	.word	0x20001b40
 8001d28:	2000276c 	.word	0x2000276c
 8001d2c:	0800cd24 	.word	0x0800cd24
 8001d30:	0800cd50 	.word	0x0800cd50
 8001d34:	200026d4 	.word	0x200026d4
 8001d38:	20001b50 	.word	0x20001b50
 8001d3c:	20001b54 	.word	0x20001b54
 8001d40:	0800cd78 	.word	0x0800cd78
 8001d44:	2000272c 	.word	0x2000272c
 8001d48:	3c23d70a 	.word	0x3c23d70a
 8001d4c:	0800cdb4 	.word	0x0800cdb4
 8001d50:	0800cde4 	.word	0x0800cde4
 8001d54:	0800ce14 	.word	0x0800ce14
 8001d58:	0800ce44 	.word	0x0800ce44


  // ***********************************

  // Fill up the initial labels
  OL_layer.label[0] = 'A';
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2241      	movs	r2, #65	; 0x41
 8001d60:	701a      	strb	r2, [r3, #0]
  OL_layer.label[1] = 'E';
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	3301      	adds	r3, #1
 8001d66:	2245      	movs	r2, #69	; 0x45
 8001d68:	701a      	strb	r2, [r3, #0]
  OL_layer.label[2] = 'I';
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	2249      	movs	r2, #73	; 0x49
 8001d70:	701a      	strb	r2, [r3, #0]
  OL_layer.label[3] = 'O';
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	3303      	adds	r3, #3
 8001d76:	224f      	movs	r2, #79	; 0x4f
 8001d78:	701a      	strb	r2, [r3, #0]
  OL_layer.label[4] = 'U';
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2255      	movs	r2, #85	; 0x55
 8001d80:	701a      	strb	r2, [r3, #0]

  // Fill up weigths and biases
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8001d82:	2300      	movs	r3, #0
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
 8001d86:	e00c      	b.n	8001da2 <main+0x37e>
  	  OL_layer.weights[i]=saved_weights[i];
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	4986      	ldr	r1, [pc, #536]	; (8001fac <main+0x588>)
 8001d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	440a      	add	r2, r1
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH*OL_layer.HEIGHT; i++){
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	3301      	adds	r3, #1
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbeb      	blt.n	8001d88 <main+0x364>
  }

  for(int i=0; i<OL_layer.WIDTH; i++){
 8001db0:	2300      	movs	r3, #0
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
 8001db4:	e00c      	b.n	8001dd0 <main+0x3ac>
	  OL_layer.biases[i]=saved_biases[i];
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	497c      	ldr	r1, [pc, #496]	; (8001fb0 <main+0x58c>)
 8001dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	440a      	add	r2, r1
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	601a      	str	r2, [r3, #0]
  for(int i=0; i<OL_layer.WIDTH; i++){
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	3301      	adds	r3, #1
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbee      	blt.n	8001db6 <main+0x392>
  }

  //Create container for the output prediction of OL layer
  float * y_true = (float*)calloc(OL_layer.WIDTH, sizeof(float));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2104      	movs	r1, #4
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f009 f97b 	bl	800b0d8 <calloc>
 8001de2:	4603      	mov	r3, r0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24

  // ***********************************


  msgLen = sprintf(msgDebug, "\n\n\r Initializations done\n\r");
 8001de6:	4a73      	ldr	r2, [pc, #460]	; (8001fb4 <main+0x590>)
 8001de8:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <main+0x594>)
 8001dea:	4615      	mov	r5, r2
 8001dec:	461c      	mov	r4, r3
 8001dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df0:	6028      	str	r0, [r5, #0]
 8001df2:	6069      	str	r1, [r5, #4]
 8001df4:	60aa      	str	r2, [r5, #8]
 8001df6:	60eb      	str	r3, [r5, #12]
 8001df8:	cc03      	ldmia	r4!, {r0, r1}
 8001dfa:	6128      	str	r0, [r5, #16]
 8001dfc:	6169      	str	r1, [r5, #20]
 8001dfe:	8823      	ldrh	r3, [r4, #0]
 8001e00:	78a2      	ldrb	r2, [r4, #2]
 8001e02:	832b      	strh	r3, [r5, #24]
 8001e04:	4613      	mov	r3, r2
 8001e06:	76ab      	strb	r3, [r5, #26]
 8001e08:	221a      	movs	r2, #26
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <main+0x598>)
 8001e0c:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001e0e:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <main+0x598>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2364      	movs	r3, #100	; 0x64
 8001e16:	4967      	ldr	r1, [pc, #412]	; (8001fb4 <main+0x590>)
 8001e18:	4869      	ldr	r0, [pc, #420]	; (8001fc0 <main+0x59c>)
 8001e1a:	f006 fbc8 	bl	80085ae <HAL_UART_Transmit>
  msgLen = sprintf(msgDebug, "\n\n\r Data acquisition mode: ACCELEROMETER\n\r");
 8001e1e:	4b65      	ldr	r3, [pc, #404]	; (8001fb4 <main+0x590>)
 8001e20:	4a68      	ldr	r2, [pc, #416]	; (8001fc4 <main+0x5a0>)
 8001e22:	4614      	mov	r4, r2
 8001e24:	469c      	mov	ip, r3
 8001e26:	f104 0e20 	add.w	lr, r4, #32
 8001e2a:	4665      	mov	r5, ip
 8001e2c:	4626      	mov	r6, r4
 8001e2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e30:	6028      	str	r0, [r5, #0]
 8001e32:	6069      	str	r1, [r5, #4]
 8001e34:	60aa      	str	r2, [r5, #8]
 8001e36:	60eb      	str	r3, [r5, #12]
 8001e38:	3410      	adds	r4, #16
 8001e3a:	f10c 0c10 	add.w	ip, ip, #16
 8001e3e:	4574      	cmp	r4, lr
 8001e40:	d1f3      	bne.n	8001e2a <main+0x406>
 8001e42:	4662      	mov	r2, ip
 8001e44:	4623      	mov	r3, r4
 8001e46:	cb03      	ldmia	r3!, {r0, r1}
 8001e48:	6010      	str	r0, [r2, #0]
 8001e4a:	6051      	str	r1, [r2, #4]
 8001e4c:	8819      	ldrh	r1, [r3, #0]
 8001e4e:	789b      	ldrb	r3, [r3, #2]
 8001e50:	8111      	strh	r1, [r2, #8]
 8001e52:	7293      	strb	r3, [r2, #10]
 8001e54:	222a      	movs	r2, #42	; 0x2a
 8001e56:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <main+0x598>)
 8001e58:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001e5a:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <main+0x598>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2364      	movs	r3, #100	; 0x64
 8001e62:	4954      	ldr	r1, [pc, #336]	; (8001fb4 <main+0x590>)
 8001e64:	4856      	ldr	r0, [pc, #344]	; (8001fc0 <main+0x59c>)
 8001e66:	f006 fba2 	bl	80085ae <HAL_UART_Transmit>
  msgLen = sprintf(msgDebug, "\n\n\r When ready press BLUE button for inference.\n");
 8001e6a:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <main+0x590>)
 8001e6c:	4a56      	ldr	r2, [pc, #344]	; (8001fc8 <main+0x5a4>)
 8001e6e:	4614      	mov	r4, r2
 8001e70:	469c      	mov	ip, r3
 8001e72:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001e76:	4665      	mov	r5, ip
 8001e78:	4626      	mov	r6, r4
 8001e7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e7c:	6028      	str	r0, [r5, #0]
 8001e7e:	6069      	str	r1, [r5, #4]
 8001e80:	60aa      	str	r2, [r5, #8]
 8001e82:	60eb      	str	r3, [r5, #12]
 8001e84:	3410      	adds	r4, #16
 8001e86:	f10c 0c10 	add.w	ip, ip, #16
 8001e8a:	4574      	cmp	r4, lr
 8001e8c:	d1f3      	bne.n	8001e76 <main+0x452>
 8001e8e:	4663      	mov	r3, ip
 8001e90:	4622      	mov	r2, r4
 8001e92:	7812      	ldrb	r2, [r2, #0]
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	2230      	movs	r2, #48	; 0x30
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <main+0x598>)
 8001e9a:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001e9c:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <main+0x598>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	2364      	movs	r3, #100	; 0x64
 8001ea4:	4943      	ldr	r1, [pc, #268]	; (8001fb4 <main+0x590>)
 8001ea6:	4846      	ldr	r0, [pc, #280]	; (8001fc0 <main+0x59c>)
 8001ea8:	f006 fb81 	bl	80085ae <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // When blue button is pressed perform these actions
	  if(enable_inference == 1){
 8001eac:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <main+0x5a8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d168      	bne.n	8001f86 <main+0x562>

		  msgLen = sprintf(msgDebug, "\n\r    Begin now inference num: %d\n", counter);
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <main+0x5ac>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4946      	ldr	r1, [pc, #280]	; (8001fd4 <main+0x5b0>)
 8001ebc:	483d      	ldr	r0, [pc, #244]	; (8001fb4 <main+0x590>)
 8001ebe:	f009 faa3 	bl	800b408 <siprintf>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <main+0x598>)
 8001ec6:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001ec8:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <main+0x598>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	2364      	movs	r3, #100	; 0x64
 8001ed0:	4938      	ldr	r1, [pc, #224]	; (8001fb4 <main+0x590>)
 8001ed2:	483b      	ldr	r0, [pc, #236]	; (8001fc0 <main+0x59c>)
 8001ed4:	f006 fb6b 	bl	80085ae <HAL_UART_Transmit>

		  counter +=1;
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <main+0x5ac>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <main+0x5ac>)
 8001ee2:	701a      	strb	r2, [r3, #0]

		  startTime = HAL_GetTick();
 8001ee4:	f004 f860 	bl	8005fa8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <main+0x5b4>)
 8001eec:	601a      	str	r2, [r3, #0]

		  // Perform inference from FROZEN MODEL
		  ai_run_v2(&in_data, &out_data);
 8001eee:	493b      	ldr	r1, [pc, #236]	; (8001fdc <main+0x5b8>)
 8001ef0:	483b      	ldr	r0, [pc, #236]	; (8001fe0 <main+0x5bc>)
 8001ef2:	f007 fb47 	bl	8009584 <ai_run_v2>

		  endFrozenTime = HAL_GetTick();
 8001ef6:	f004 f857 	bl	8005fa8 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <main+0x5c0>)
 8001efe:	601a      	str	r2, [r3, #0]

		  // Check if the letter is known, otherwise increase dimensions
		  OL_checkNewClass(&OL_layer, letter);
 8001f00:	463b      	mov	r3, r7
 8001f02:	4939      	ldr	r1, [pc, #228]	; (8001fe8 <main+0x5c4>)
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fabb 	bl	8001480 <OL_checkNewClass>
		  OL_lettToSoft(&OL_layer, letter, y_true);
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0e:	4936      	ldr	r1, [pc, #216]	; (8001fe8 <main+0x5c4>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f819 	bl	8000f48 <OL_lettToSoft>

		  // Perform training on last captured sample
		  OL_train(&OL_layer, out_data, y_true, letter);
 8001f16:	4638      	mov	r0, r7
 8001f18:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <main+0x5c4>)
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	492f      	ldr	r1, [pc, #188]	; (8001fdc <main+0x5b8>)
 8001f1e:	f7ff faf7 	bl	8001510 <OL_train>

		  endOLTime = HAL_GetTick();
 8001f22:	f004 f841 	bl	8005fa8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b30      	ldr	r3, [pc, #192]	; (8001fec <main+0x5c8>)
 8001f2a:	601a      	str	r2, [r3, #0]

		  // Output messages
		  PRINT_checkLabels(&OL_layer, y_true);
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fb81 	bl	8001638 <PRINT_checkLabels>

		  msgLen = sprintf(msgDebug, "\r    Time needed:  frozen model-> %ld ms;    OL layer -> %ld ms;    Total -> %ld ms \n\n\r", endFrozenTime-startTime, endOLTime-endFrozenTime, endOLTime-startTime);
 8001f36:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <main+0x5c0>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <main+0x5b4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1ad1      	subs	r1, r2, r3
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <main+0x5c8>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <main+0x5c0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1ad0      	subs	r0, r2, r3
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <main+0x5c8>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <main+0x5b4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	4603      	mov	r3, r0
 8001f58:	460a      	mov	r2, r1
 8001f5a:	4925      	ldr	r1, [pc, #148]	; (8001ff0 <main+0x5cc>)
 8001f5c:	4815      	ldr	r0, [pc, #84]	; (8001fb4 <main+0x590>)
 8001f5e:	f009 fa53 	bl	800b408 <siprintf>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <main+0x598>)
 8001f66:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <main+0x598>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	2364      	movs	r3, #100	; 0x64
 8001f70:	4910      	ldr	r1, [pc, #64]	; (8001fb4 <main+0x590>)
 8001f72:	4813      	ldr	r0, [pc, #76]	; (8001fc0 <main+0x59c>)
 8001f74:	f006 fb1b 	bl	80085ae <HAL_UART_Transmit>


		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001f78:	2120      	movs	r1, #32
 8001f7a:	481e      	ldr	r0, [pc, #120]	; (8001ff4 <main+0x5d0>)
 8001f7c:	f004 fc0f 	bl	800679e <HAL_GPIO_TogglePin>
		  enable_inference = 0;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <main+0x5a8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
	  }



	  HAL_Delay(250);
 8001f86:	20fa      	movs	r0, #250	; 0xfa
 8001f88:	f004 f81a 	bl	8005fc0 <HAL_Delay>
	  msgLen = sprintf(msgDebug, ".");
 8001f8c:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <main+0x590>)
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <main+0x5d4>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	8013      	strh	r3, [r2, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <main+0x598>)
 8001f98:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <main+0x598>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	2364      	movs	r3, #100	; 0x64
 8001fa2:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <main+0x590>)
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <main+0x59c>)
 8001fa6:	f006 fb02 	bl	80085ae <HAL_UART_Transmit>
	  if(enable_inference == 1){
 8001faa:	e77f      	b.n	8001eac <main+0x488>
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000a00 	.word	0x20000a00
 8001fb4:	20001ac0 	.word	0x20001ac0
 8001fb8:	0800ce74 	.word	0x0800ce74
 8001fbc:	20001b40 	.word	0x20001b40
 8001fc0:	2000276c 	.word	0x2000276c
 8001fc4:	0800ce90 	.word	0x0800ce90
 8001fc8:	0800cebc 	.word	0x0800cebc
 8001fcc:	20001038 	.word	0x20001038
 8001fd0:	2000102c 	.word	0x2000102c
 8001fd4:	0800cef0 	.word	0x0800cef0
 8001fd8:	200026c4 	.word	0x200026c4
 8001fdc:	200024c4 	.word	0x200024c4
 8001fe0:	20001b60 	.word	0x20001b60
 8001fe4:	20001b4c 	.word	0x20001b4c
 8001fe8:	20001b58 	.word	0x20001b58
 8001fec:	20001b5c 	.word	0x20001b5c
 8001ff0:	0800cf14 	.word	0x0800cf14
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	0800cf6c 	.word	0x0800cf6c

08001ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b094      	sub	sp, #80	; 0x50
 8002000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	2230      	movs	r2, #48	; 0x30
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f009 f8b1 	bl	800b172 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <SystemClock_Config+0xd0>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <SystemClock_Config+0xd0>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6413      	str	r3, [r2, #64]	; 0x40
 8002030:	4b26      	ldr	r3, [pc, #152]	; (80020cc <SystemClock_Config+0xd0>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <SystemClock_Config+0xd4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <SystemClock_Config+0xd4>)
 800204a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <SystemClock_Config+0xd4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002060:	2301      	movs	r3, #1
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002064:	2310      	movs	r3, #16
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002068:	2302      	movs	r3, #2
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002070:	2310      	movs	r3, #16
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002074:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002078:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800207a:	2304      	movs	r3, #4
 800207c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800207e:	2307      	movs	r3, #7
 8002080:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	4618      	mov	r0, r3
 8002088:	f005 fbce 	bl	8007828 <HAL_RCC_OscConfig>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002092:	f000 f8ef 	bl	8002274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002096:	230f      	movs	r3, #15
 8002098:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800209a:	2302      	movs	r3, #2
 800209c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	2102      	movs	r1, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f005 fe28 	bl	8007d08 <HAL_RCC_ClockConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80020be:	f000 f8d9 	bl	8002274 <Error_Handler>
  }
}
 80020c2:	bf00      	nop
 80020c4:	3750      	adds	r7, #80	; 0x50
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40007000 	.word	0x40007000

080020d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == B1_Pin){
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e4:	d131      	bne.n	800214a <HAL_GPIO_EXTI_Callback+0x76>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020e6:	2120      	movs	r1, #32
 80020e8:	481a      	ldr	r0, [pc, #104]	; (8002154 <HAL_GPIO_EXTI_Callback+0x80>)
 80020ea:	f004 fb58 	bl	800679e <HAL_GPIO_TogglePin>

		enable_acquisition = 1;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_GPIO_EXTI_Callback+0x84>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

		msgLen = sprintf(msgDebug, "\n\r    Insert the letter you will draw (in caps):");
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_GPIO_EXTI_Callback+0x88>)
 80020f6:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <HAL_GPIO_EXTI_Callback+0x8c>)
 80020f8:	4614      	mov	r4, r2
 80020fa:	469c      	mov	ip, r3
 80020fc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002100:	4665      	mov	r5, ip
 8002102:	4626      	mov	r6, r4
 8002104:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002106:	6028      	str	r0, [r5, #0]
 8002108:	6069      	str	r1, [r5, #4]
 800210a:	60aa      	str	r2, [r5, #8]
 800210c:	60eb      	str	r3, [r5, #12]
 800210e:	3410      	adds	r4, #16
 8002110:	f10c 0c10 	add.w	ip, ip, #16
 8002114:	4574      	cmp	r4, lr
 8002116:	d1f3      	bne.n	8002100 <HAL_GPIO_EXTI_Callback+0x2c>
 8002118:	4663      	mov	r3, ip
 800211a:	4622      	mov	r2, r4
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	2230      	movs	r2, #48	; 0x30
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_GPIO_EXTI_Callback+0x90>)
 8002124:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_GPIO_EXTI_Callback+0x90>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29a      	uxth	r2, r3
 800212c:	2364      	movs	r3, #100	; 0x64
 800212e:	490b      	ldr	r1, [pc, #44]	; (800215c <HAL_GPIO_EXTI_Callback+0x88>)
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <HAL_GPIO_EXTI_Callback+0x94>)
 8002132:	f006 fa3c 	bl	80085ae <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, (uint8_t*)msgRxData, 1, 100);
 8002136:	2364      	movs	r3, #100	; 0x64
 8002138:	2201      	movs	r2, #1
 800213a:	490c      	ldr	r1, [pc, #48]	; (800216c <HAL_GPIO_EXTI_Callback+0x98>)
 800213c:	480a      	ldr	r0, [pc, #40]	; (8002168 <HAL_GPIO_EXTI_Callback+0x94>)
 800213e:	f006 facf 	bl	80086e0 <HAL_UART_Receive>
		letter[0] = msgRxData[0];
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_GPIO_EXTI_Callback+0x98>)
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002148:	701a      	strb	r2, [r3, #0]
	}
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002152:	bf00      	nop
 8002154:	40020000 	.word	0x40020000
 8002158:	20001030 	.word	0x20001030
 800215c:	20001ac0 	.word	0x20001ac0
 8002160:	0800cf70 	.word	0x0800cf70
 8002164:	20001b40 	.word	0x20001b40
 8002168:	2000276c 	.word	0x2000276c
 800216c:	20001610 	.word	0x20001610
 8002170:	20001b58 	.word	0x20001b58

08002174 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim){
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af02      	add	r7, sp, #8
 800217a:	6078      	str	r0, [r7, #4]

	if(data_counter == max_sample){
 800217c:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d109      	bne.n	800219c <HAL_TIM_PeriodElapsedCallback+0x28>

		data_counter=0;
 8002188:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
		enable_acquisition=0;
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
		enable_inference = 1;
 8002194:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

		in_data[data_counter] = acceleration.x;
		in_data[data_counter+max_sample] =  acceleration.y;
		in_data[data_counter+2*max_sample] = acceleration.z;
	}
}
 800219a:	e053      	b.n	8002244 <HAL_TIM_PeriodElapsedCallback+0xd0>
	}else if(enable_acquisition == 1){
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d14f      	bne.n	8002244 <HAL_TIM_PeriodElapsedCallback+0xd0>
		data_counter ++;
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	4a28      	ldr	r2, [pc, #160]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80021ac:	6013      	str	r3, [r2, #0]
		IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &acceleration);
 80021ae:	4a2b      	ldr	r2, [pc, #172]	; (800225c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80021b0:	2102      	movs	r1, #2
 80021b2:	2000      	movs	r0, #0
 80021b4:	f003 fb7e 	bl	80058b4 <IKS01A2_MOTION_SENSOR_GetAxes>
	    msgLen = sprintf(msgDebug, "%ld,%ld,%ld\r\n", (int32_t)acceleration.x, (int32_t)acceleration.y, (int32_t)acceleration.z);
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	460b      	mov	r3, r1
 80021c8:	4925      	ldr	r1, [pc, #148]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80021ca:	4826      	ldr	r0, [pc, #152]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80021cc:	f009 f91c 	bl	800b408 <siprintf>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80021d4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000);
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e0:	4920      	ldr	r1, [pc, #128]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80021e2:	4822      	ldr	r0, [pc, #136]	; (800226c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80021e4:	f006 f9e3 	bl	80085ae <HAL_UART_Transmit>
		in_data[data_counter] = acceleration.x;
 80021e8:	4b1c      	ldr	r3, [pc, #112]	; (800225c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	ee07 2a90 	vmov	s15, r2
 80021f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f8:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	edc3 7a00 	vstr	s15, [r3]
		in_data[data_counter+max_sample] =  acceleration.y;
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002204:	6859      	ldr	r1, [r3, #4]
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	ee07 1a90 	vmov	s15, r1
 8002214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	edc3 7a00 	vstr	s15, [r3]
		in_data[data_counter+2*max_sample] = acceleration.z;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002224:	6899      	ldr	r1, [r3, #8]
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	005a      	lsls	r2, r3, #1
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4413      	add	r3, r2
 8002232:	ee07 1a90 	vmov	s15, r1
 8002236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223a:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	edc3 7a00 	vstr	s15, [r3]
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20001034 	.word	0x20001034
 8002250:	20000a14 	.word	0x20000a14
 8002254:	20001030 	.word	0x20001030
 8002258:	20001038 	.word	0x20001038
 800225c:	200026c8 	.word	0x200026c8
 8002260:	0800cfa4 	.word	0x0800cfa4
 8002264:	20001ac0 	.word	0x20001ac0
 8002268:	20001b40 	.word	0x20001b40
 800226c:	2000276c 	.word	0x2000276c
 8002270:	20001b60 	.word	0x20001b60

08002274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227a:	e7fe      	b.n	800227a <Error_Handler+0x6>

0800227c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_MspInit+0x5c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_MspInit+0x5c>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_MspInit+0x5c>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_MspInit+0x5c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_MspInit+0x5c>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_MspInit+0x5c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022ba:	2007      	movs	r0, #7
 80022bc:	f003 ff72 	bl	80061a4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2051      	movs	r0, #81	; 0x51
 80022c6:	f003 ff78 	bl	80061ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80022ca:	2051      	movs	r0, #81	; 0x51
 80022cc:	f003 ff91 	bl	80061f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40023800 	.word	0x40023800

080022dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <NMI_Handler+0x4>

080022e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <HardFault_Handler+0x4>

080022e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <MemManage_Handler+0x4>

080022ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <BusFault_Handler+0x4>

080022f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <UsageFault_Handler+0x4>

080022fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002328:	f003 fe2a 	bl	8005f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}

08002330 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002336:	f005 ff28 	bl	800818a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000272c 	.word	0x2000272c

08002344 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <USART2_IRQHandler+0x10>)
 800234a:	f006 fa6f 	bl	800882c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000276c 	.word	0x2000276c

08002358 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800235c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002360:	f004 fa38 	bl	80067d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <BSP_I2C1_Init+0x58>)
 8002384:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <BSP_I2C1_Init+0x5c>)
 8002386:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <BSP_I2C1_Init+0x60>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	4912      	ldr	r1, [pc, #72]	; (80023d8 <BSP_I2C1_Init+0x60>)
 8002390:	600a      	str	r2, [r1, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d117      	bne.n	80023c6 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002396:	480e      	ldr	r0, [pc, #56]	; (80023d0 <BSP_I2C1_Init+0x58>)
 8002398:	f004 fed0 	bl	800713c <HAL_I2C_GetState>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d111      	bne.n	80023c6 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80023a2:	480b      	ldr	r0, [pc, #44]	; (80023d0 <BSP_I2C1_Init+0x58>)
 80023a4:	f000 f8e2 	bl	800256c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10b      	bne.n	80023c6 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80023ae:	4808      	ldr	r0, [pc, #32]	; (80023d0 <BSP_I2C1_Init+0x58>)
 80023b0:	f000 f8a8 	bl	8002504 <MX_I2C1_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 80023ba:	f06f 0307 	mvn.w	r3, #7
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	e001      	b.n	80023c6 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80023c6:	687b      	ldr	r3, [r7, #4]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	200026d8 	.word	0x200026d8
 80023d4:	40005400 	.word	0x40005400
 80023d8:	2000103c 	.word	0x2000103c

080023dc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <BSP_I2C1_DeInit+0x48>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d014      	beq.n	8002418 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <BSP_I2C1_DeInit+0x48>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <BSP_I2C1_DeInit+0x48>)
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <BSP_I2C1_DeInit+0x48>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002400:	4809      	ldr	r0, [pc, #36]	; (8002428 <BSP_I2C1_DeInit+0x4c>)
 8002402:	f000 f8fd 	bl	8002600 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002406:	4808      	ldr	r0, [pc, #32]	; (8002428 <BSP_I2C1_DeInit+0x4c>)
 8002408:	f004 fb34 	bl	8006a74 <HAL_I2C_DeInit>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002412:	f06f 0307 	mvn.w	r3, #7
 8002416:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002418:	687b      	ldr	r3, [r7, #4]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000103c 	.word	0x2000103c
 8002428:	200026d8 	.word	0x200026d8

0800242c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af04      	add	r7, sp, #16
 8002432:	60ba      	str	r2, [r7, #8]
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	81fb      	strh	r3, [r7, #14]
 800243a:	460b      	mov	r3, r1
 800243c:	81bb      	strh	r3, [r7, #12]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002446:	89ba      	ldrh	r2, [r7, #12]
 8002448:	89f9      	ldrh	r1, [r7, #14]
 800244a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2301      	movs	r3, #1
 800245a:	480c      	ldr	r0, [pc, #48]	; (800248c <BSP_I2C1_WriteReg+0x60>)
 800245c:	f004 fb4e 	bl	8006afc <HAL_I2C_Mem_Write>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00c      	beq.n	8002480 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002466:	4809      	ldr	r0, [pc, #36]	; (800248c <BSP_I2C1_WriteReg+0x60>)
 8002468:	f004 fe76 	bl	8007158 <HAL_I2C_GetError>
 800246c:	4603      	mov	r3, r0
 800246e:	2b04      	cmp	r3, #4
 8002470:	d103      	bne.n	800247a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002472:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e002      	b.n	8002480 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800247a:	f06f 0303 	mvn.w	r3, #3
 800247e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002480:	697b      	ldr	r3, [r7, #20]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200026d8 	.word	0x200026d8

08002490 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af04      	add	r7, sp, #16
 8002496:	60ba      	str	r2, [r7, #8]
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	81fb      	strh	r3, [r7, #14]
 800249e:	460b      	mov	r3, r1
 80024a0:	81bb      	strh	r3, [r7, #12]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80024aa:	89ba      	ldrh	r2, [r7, #12]
 80024ac:	89f9      	ldrh	r1, [r7, #14]
 80024ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2301      	movs	r3, #1
 80024be:	480c      	ldr	r0, [pc, #48]	; (80024f0 <BSP_I2C1_ReadReg+0x60>)
 80024c0:	f004 fc16 	bl	8006cf0 <HAL_I2C_Mem_Read>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80024ca:	4809      	ldr	r0, [pc, #36]	; (80024f0 <BSP_I2C1_ReadReg+0x60>)
 80024cc:	f004 fe44 	bl	8007158 <HAL_I2C_GetError>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d103      	bne.n	80024de <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80024d6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e002      	b.n	80024e4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80024de:	f06f 0303 	mvn.w	r3, #3
 80024e2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80024e4:	697b      	ldr	r3, [r7, #20]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200026d8 	.word	0x200026d8

080024f4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80024f8:	f003 fd56 	bl	8005fa8 <HAL_GetTick>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a14      	ldr	r2, [pc, #80]	; (8002564 <MX_I2C1_Init+0x60>)
 8002514:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a13      	ldr	r2, [pc, #76]	; (8002568 <MX_I2C1_Init+0x64>)
 800251a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800252e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f004 f95b 	bl	8006804 <HAL_I2C_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40005400 	.word	0x40005400
 8002568:	00061a80 	.word	0x00061a80

0800256c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <I2C1_MspInit+0x8c>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <I2C1_MspInit+0x8c>)
 800257e:	f043 0302 	orr.w	r3, r3, #2
 8002582:	6313      	str	r3, [r2, #48]	; 0x30
 8002584:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <I2C1_MspInit+0x8c>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002596:	2312      	movs	r3, #18
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800259a:	2301      	movs	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259e:	2303      	movs	r3, #3
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80025a2:	2304      	movs	r3, #4
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4813      	ldr	r0, [pc, #76]	; (80025fc <I2C1_MspInit+0x90>)
 80025ae:	f003 fe79 	bl	80062a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80025b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b8:	2312      	movs	r3, #18
 80025ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025bc:	2301      	movs	r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80025c4:	2304      	movs	r3, #4
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	480b      	ldr	r0, [pc, #44]	; (80025fc <I2C1_MspInit+0x90>)
 80025d0:	f003 fe68 	bl	80062a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <I2C1_MspInit+0x8c>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <I2C1_MspInit+0x8c>)
 80025de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e2:	6413      	str	r3, [r2, #64]	; 0x40
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <I2C1_MspInit+0x8c>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80025f0:	bf00      	nop
 80025f2:	3728      	adds	r7, #40	; 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020400 	.word	0x40020400

08002600 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <I2C1_MspDeInit+0x30>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4a08      	ldr	r2, [pc, #32]	; (8002630 <I2C1_MspDeInit+0x30>)
 800260e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002612:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002618:	4806      	ldr	r0, [pc, #24]	; (8002634 <I2C1_MspDeInit+0x34>)
 800261a:	f003 ffc5 	bl	80065a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800261e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002622:	4804      	ldr	r0, [pc, #16]	; (8002634 <I2C1_MspDeInit+0x34>)
 8002624:	f003 ffc0 	bl	80065a8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	40020400 	.word	0x40020400

08002638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002640:	4a14      	ldr	r2, [pc, #80]	; (8002694 <_sbrk+0x5c>)
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <_sbrk+0x60>)
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <_sbrk+0x64>)
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <_sbrk+0x68>)
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	429a      	cmp	r2, r3
 8002666:	d207      	bcs.n	8002678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002668:	f008 fd3e 	bl	800b0e8 <__errno>
 800266c:	4602      	mov	r2, r0
 800266e:	230c      	movs	r3, #12
 8002670:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	e009      	b.n	800268c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <_sbrk+0x64>)
 8002688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20018000 	.word	0x20018000
 8002698:	00001000 	.word	0x00001000
 800269c:	20001040 	.word	0x20001040
 80026a0:	200027c0 	.word	0x200027c0

080026a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <SystemInit+0x28>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <SystemInit+0x28>)
 80026b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <SystemInit+0x28>)
 80026ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026be:	609a      	str	r2, [r3, #8]
#endif
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_TIM10_Init+0x40>)
 80026d6:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <MX_TIM10_Init+0x44>)
 80026d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <MX_TIM10_Init+0x40>)
 80026dc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80026e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MX_TIM10_Init+0x40>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_TIM10_Init+0x40>)
 80026ea:	2263      	movs	r2, #99	; 0x63
 80026ec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <MX_TIM10_Init+0x40>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_TIM10_Init+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_TIM10_Init+0x40>)
 80026fc:	f005 fcf6 	bl	80080ec <HAL_TIM_Base_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002706:	f7ff fdb5 	bl	8002274 <Error_Handler>
  }

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000272c 	.word	0x2000272c
 8002714:	40014400 	.word	0x40014400

08002718 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_TIM_Base_MspInit+0x48>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d115      	bne.n	8002756 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <HAL_TIM_Base_MspInit+0x4c>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_TIM_Base_MspInit+0x4c>)
 8002734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_TIM_Base_MspInit+0x4c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	2019      	movs	r0, #25
 800274c:	f003 fd35 	bl	80061ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002750:	2019      	movs	r0, #25
 8002752:	f003 fd4e 	bl	80061f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40014400 	.word	0x40014400
 8002764:	40023800 	.word	0x40023800

08002768 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <MX_USART2_UART_Init+0x50>)
 8002770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 8002774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 800278e:	220c      	movs	r2, #12
 8002790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 80027a0:	f005 feb8 	bl	8008514 <HAL_UART_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027aa:	f7ff fd63 	bl	8002274 <Error_Handler>
  }

}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000276c 	.word	0x2000276c
 80027b8:	40004400 	.word	0x40004400

080027bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_UART_MspInit+0x94>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d133      	bne.n	8002846 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <HAL_UART_MspInit+0x98>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_UART_MspInit+0x98>)
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_UART_MspInit+0x98>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_UART_MspInit+0x98>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_UART_MspInit+0x98>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_UART_MspInit+0x98>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002816:	230c      	movs	r3, #12
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002826:	2307      	movs	r3, #7
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4619      	mov	r1, r3
 8002830:	4809      	ldr	r0, [pc, #36]	; (8002858 <HAL_UART_MspInit+0x9c>)
 8002832:	f003 fd37 	bl	80062a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2026      	movs	r0, #38	; 0x26
 800283c:	f003 fcbd 	bl	80061ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002840:	2026      	movs	r0, #38	; 0x26
 8002842:	f003 fcd6 	bl	80061f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002846:	bf00      	nop
 8002848:	3728      	adds	r7, #40	; 0x28
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40004400 	.word	0x40004400
 8002854:	40023800 	.word	0x40023800
 8002858:	40020000 	.word	0x40020000

0800285c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002894 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002860:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002862:	e003      	b.n	800286c <LoopCopyDataInit>

08002864 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002866:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002868:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800286a:	3104      	adds	r1, #4

0800286c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800286c:	480b      	ldr	r0, [pc, #44]	; (800289c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002870:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002872:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002874:	d3f6      	bcc.n	8002864 <CopyDataInit>
  ldr  r2, =_sbss
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002878:	e002      	b.n	8002880 <LoopFillZerobss>

0800287a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800287a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800287c:	f842 3b04 	str.w	r3, [r2], #4

08002880 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002882:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002884:	d3f9      	bcc.n	800287a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002886:	f7ff ff0d 	bl	80026a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288a:	f008 fc33 	bl	800b0f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288e:	f7ff f8c9 	bl	8001a24 <main>
  bx  lr    
 8002892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002894:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002898:	080686b0 	.word	0x080686b0
  ldr  r0, =_sdata
 800289c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028a0:	20001010 	.word	0x20001010
  ldr  r2, =_sbss
 80028a4:	20001010 	.word	0x20001010
  ldr  r3, = _ebss
 80028a8:	200027c0 	.word	0x200027c0

080028ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC_IRQHandler>
	...

080028b0 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e04d      	b.n	8002968 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	7b1a      	ldrb	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002908:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1a      	ldr	r2, [pc, #104]	; (8002978 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 800290e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e020      	b.n	8002968 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4798      	blx	r3
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	e016      	b.n	8002968 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d112      	bne.n	8002968 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10d      	bne.n	8002968 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800294c:	2301      	movs	r3, #1
 800294e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002950:	7afb      	ldrb	r3, [r7, #11]
 8002952:	461a      	mov	r2, r3
 8002954:	2123      	movs	r1, #35	; 0x23
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fb52 	bl	8003000 <LSM303AGR_ACC_Write_Reg>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	e000      	b.n	800296a <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002968:	68fb      	ldr	r3, [r7, #12]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	08003811 	.word	0x08003811
 8002978:	08003873 	.word	0x08003873

0800297c <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	331c      	adds	r3, #28
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f001 f948 	bl	8003c20 <lsm303agr_xl_block_data_update_set>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	e02c      	b.n	80029f6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	331c      	adds	r3, #28
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 faeb 	bl	8003f7e <lsm303agr_xl_fifo_mode_set>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	e020      	b.n	80029f6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2205      	movs	r2, #5
 80029b8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	331c      	adds	r3, #28
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 f84c 	bl	8003a60 <lsm303agr_xl_data_rate_set>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	e010      	b.n	80029f6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	331c      	adds	r3, #28
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f001 f8c2 	bl	8003b64 <lsm303agr_xl_full_scale_set>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	e004      	b.n	80029f6 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f87c 	bl	8002b04 <LSM303AGR_ACC_Disable>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	e008      	b.n	8002a2a <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	331c      	adds	r3, #28
 8002a40:	6839      	ldr	r1, [r7, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 fa53 	bl	8003eee <lsm303agr_xl_device_id_get>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e000      	b.n	8002a56 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2200      	movs	r2, #0
 8002a74:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	4a06      	ldr	r2, [pc, #24]	; (8002ab8 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002aa0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	43c80000 	.word	0x43c80000

08002abc <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e014      	b.n	8002afc <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f103 021c 	add.w	r2, r3, #28
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f000 ffbd 	bl	8003a60 <lsm303agr_xl_data_rate_set>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	e004      	b.n	8002afc <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e01f      	b.n	8002b5a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f103 021c 	add.w	r2, r3, #28
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	332a      	adds	r3, #42	; 0x2a
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 ffc0 	bl	8003aac <lsm303agr_xl_data_rate_get>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e010      	b.n	8002b5a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	331c      	adds	r3, #28
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 ff8e 	bl	8003a60 <lsm303agr_xl_data_rate_set>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4e:	e004      	b.n	8002b5a <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	331c      	adds	r3, #28
 8002b74:	f107 020b 	add.w	r2, r7, #11
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 ff3c 	bl	80039f8 <lsm303agr_xl_operating_mode_get>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	e02e      	b.n	8002bea <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d00d      	beq.n	8002bae <LSM303AGR_ACC_GetSensitivity+0x4c>
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d015      	beq.n	8002bc2 <LSM303AGR_ACC_GetSensitivity+0x60>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11d      	bne.n	8002bd6 <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fca9 	bl	80034f4 <LSM303AGR_ACC_GetSensitivityHR>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01a      	beq.n	8002bde <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bac:	e01d      	b.n	8002bea <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002bae:	6839      	ldr	r1, [r7, #0]
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fce5 	bl	8003580 <LSM303AGR_ACC_GetSensitivityNM>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d012      	beq.n	8002be2 <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	e013      	b.n	8002bea <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002bc2:	6839      	ldr	r1, [r7, #0]
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fd21 	bl	800360c <LSM303AGR_ACC_GetSensitivityLP>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd4:	e009      	b.n	8002bea <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bda:	60fb      	str	r3, [r7, #12]
      break;
 8002bdc:	e004      	b.n	8002be8 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8002bde:	bf00      	nop
 8002be0:	e002      	b.n	8002be8 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8002be6:	bf00      	nop
  }

  return ret;
 8002be8:	68fb      	ldr	r3, [r7, #12]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	331c      	adds	r3, #28
 8002c06:	f107 020b 	add.w	r2, r7, #11
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fef3 	bl	80039f8 <lsm303agr_xl_operating_mode_get>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	e09f      	b.n	8002d5e <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	331c      	adds	r3, #28
 8002c22:	f107 020a 	add.w	r2, r7, #10
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 ff3f 	bl	8003aac <lsm303agr_xl_data_rate_get>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
 8002c38:	e091      	b.n	8002d5e <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d148      	bne.n	8002cd2 <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 8002c40:	7abb      	ldrb	r3, [r7, #10]
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d840      	bhi.n	8002cc8 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002c46:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002c75 	.word	0x08002c75
 8002c50:	08002c7f 	.word	0x08002c7f
 8002c54:	08002c89 	.word	0x08002c89
 8002c58:	08002c91 	.word	0x08002c91
 8002c5c:	08002c99 	.word	0x08002c99
 8002c60:	08002ca1 	.word	0x08002ca1
 8002c64:	08002ca9 	.word	0x08002ca9
 8002c68:	08002cb1 	.word	0x08002cb1
 8002c6c:	08002cb9 	.word	0x08002cb9
 8002c70:	08002cc1 	.word	0x08002cc1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
        break;
 8002c7c:	e06e      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c84:	601a      	str	r2, [r3, #0]
        break;
 8002c86:	e069      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4a37      	ldr	r2, [pc, #220]	; (8002d68 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002c8c:	601a      	str	r2, [r3, #0]
        break;
 8002c8e:	e065      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4a36      	ldr	r2, [pc, #216]	; (8002d6c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002c94:	601a      	str	r2, [r3, #0]
        break;
 8002c96:	e061      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4a35      	ldr	r2, [pc, #212]	; (8002d70 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002c9c:	601a      	str	r2, [r3, #0]
        break;
 8002c9e:	e05d      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002ca4:	601a      	str	r2, [r3, #0]
        break;
 8002ca6:	e059      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4a33      	ldr	r2, [pc, #204]	; (8002d78 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002cac:	601a      	str	r2, [r3, #0]
        break;
 8002cae:	e055      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4a32      	ldr	r2, [pc, #200]	; (8002d7c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002cb4:	601a      	str	r2, [r3, #0]
        break;
 8002cb6:	e051      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4a31      	ldr	r2, [pc, #196]	; (8002d80 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002cbc:	601a      	str	r2, [r3, #0]
        break;
 8002cbe:	e04d      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002cc4:	601a      	str	r2, [r3, #0]
        break;
 8002cc6:	e049      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	60fb      	str	r3, [r7, #12]
        break;
 8002cce:	bf00      	nop
 8002cd0:	e044      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002cd2:	7abb      	ldrb	r3, [r7, #10]
 8002cd4:	2b09      	cmp	r3, #9
 8002cd6:	d83d      	bhi.n	8002d54 <LSM303AGR_ACC_GetOutputDataRate+0x160>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002d09 	.word	0x08002d09
 8002ce4:	08002d13 	.word	0x08002d13
 8002ce8:	08002d1d 	.word	0x08002d1d
 8002cec:	08002d25 	.word	0x08002d25
 8002cf0:	08002d2d 	.word	0x08002d2d
 8002cf4:	08002d35 	.word	0x08002d35
 8002cf8:	08002d3d 	.word	0x08002d3d
 8002cfc:	08002d45 	.word	0x08002d45
 8002d00:	08002d55 	.word	0x08002d55
 8002d04:	08002d4d 	.word	0x08002d4d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
        break;
 8002d10:	e024      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d18:	601a      	str	r2, [r3, #0]
        break;
 8002d1a:	e01f      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002d20:	601a      	str	r2, [r3, #0]
        break;
 8002d22:	e01b      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002d28:	601a      	str	r2, [r3, #0]
        break;
 8002d2a:	e017      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002d30:	601a      	str	r2, [r3, #0]
        break;
 8002d32:	e013      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002d38:	601a      	str	r2, [r3, #0]
        break;
 8002d3a:	e00f      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002d40:	601a      	str	r2, [r3, #0]
        break;
 8002d42:	e00b      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002d48:	601a      	str	r2, [r3, #0]
        break;
 8002d4a:	e007      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 8002d50:	601a      	str	r2, [r3, #0]
        break;
 8002d52:	e003      	b.n	8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	60fb      	str	r3, [r7, #12]
        break;
 8002d5a:	bf00      	nop
    }
  }

  return ret;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	41200000 	.word	0x41200000
 8002d6c:	41c80000 	.word	0x41c80000
 8002d70:	42480000 	.word	0x42480000
 8002d74:	42c80000 	.word	0x42c80000
 8002d78:	43480000 	.word	0x43480000
 8002d7c:	43c80000 	.word	0x43c80000
 8002d80:	44ca8000 	.word	0x44ca8000
 8002d84:	45a80000 	.word	0x45a80000
 8002d88:	44a80000 	.word	0x44a80000

08002d8c <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d106      	bne.n	8002db0 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002da2:	ed97 0a00 	vldr	s0, [r7]
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fc76 	bl	8003698 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002dac:	4603      	mov	r3, r0
 8002dae:	e005      	b.n	8002dbc <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002db0:	ed97 0a00 	vldr	s0, [r7]
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fcd1 	bl	800375c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002dba:	4603      	mov	r3, r0
  }
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	331c      	adds	r3, #28
 8002dd6:	f107 020b 	add.w	r2, r7, #11
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fee7 	bl	8003bb0 <lsm303agr_xl_full_scale_get>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	e023      	b.n	8002e36 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002dee:	7afb      	ldrb	r3, [r7, #11]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d81b      	bhi.n	8002e2c <LSM303AGR_ACC_GetFullScale+0x68>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <LSM303AGR_ACC_GetFullScale+0x38>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e15 	.word	0x08002e15
 8002e04:	08002e1d 	.word	0x08002e1d
 8002e08:	08002e25 	.word	0x08002e25
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	601a      	str	r2, [r3, #0]
      break;
 8002e12:	e00f      	b.n	8002e34 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2204      	movs	r2, #4
 8002e18:	601a      	str	r2, [r3, #0]
      break;
 8002e1a:	e00b      	b.n	8002e34 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2208      	movs	r2, #8
 8002e20:	601a      	str	r2, [r3, #0]
      break;
 8002e22:	e007      	b.n	8002e34 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2210      	movs	r2, #16
 8002e28:	601a      	str	r2, [r3, #0]
      break;
 8002e2a:	e003      	b.n	8002e34 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e30:	60fb      	str	r3, [r7, #12]
      break;
 8002e32:	bf00      	nop
  }

  return ret;
 8002e34:	68fb      	ldr	r3, [r7, #12]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop

08002e40 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	dd0b      	ble.n	8002e68 <LSM303AGR_ACC_SetFullScale+0x28>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	dd06      	ble.n	8002e64 <LSM303AGR_ACC_SetFullScale+0x24>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	dc01      	bgt.n	8002e60 <LSM303AGR_ACC_SetFullScale+0x20>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e004      	b.n	8002e6a <LSM303AGR_ACC_SetFullScale+0x2a>
 8002e60:	2303      	movs	r3, #3
 8002e62:	e002      	b.n	8002e6a <LSM303AGR_ACC_SetFullScale+0x2a>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <LSM303AGR_ACC_SetFullScale+0x2a>
 8002e68:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002e6a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	331c      	adds	r3, #28
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fe75 	bl	8003b64 <lsm303agr_xl_full_scale_set>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	e000      	b.n	8002e88 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	331c      	adds	r3, #28
 8002ea6:	f107 020f 	add.w	r2, r7, #15
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fda3 	bl	80039f8 <lsm303agr_xl_operating_mode_get>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebc:	e047      	b.n	8002f4e <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d006      	beq.n	8002ed2 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d007      	beq.n	8002ed8 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002ecc:	2310      	movs	r3, #16
 8002ece:	83fb      	strh	r3, [r7, #30]
      break;
 8002ed0:	e00a      	b.n	8002ee8 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002ed2:	2340      	movs	r3, #64	; 0x40
 8002ed4:	83fb      	strh	r3, [r7, #30]
      break;
 8002ed6:	e007      	b.n	8002ee8 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002edc:	83fb      	strh	r3, [r7, #30]
      break;
 8002ede:	e003      	b.n	8002ee8 <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee4:	61bb      	str	r3, [r7, #24]
      break;
 8002ee6:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d101      	bne.n	8002ef4 <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	e02c      	b.n	8002f4e <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	331c      	adds	r3, #28
 8002ef8:	f107 0210 	add.w	r2, r7, #16
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 feb4 	bl	8003c6c <lsm303agr_acceleration_raw_get>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	e01e      	b.n	8002f4e <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002f10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f14:	461a      	mov	r2, r3
 8002f16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f1e:	b21a      	sxth	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002f24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f32:	b21a      	sxth	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002f38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f42:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f46:	b21a      	sxth	r2, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	809a      	strh	r2, [r3, #4]

  return ret;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff8f 	bl	8002e90 <LSM303AGR_ACC_GetAxesRaw>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7c:	e03c      	b.n	8002ff8 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fdec 	bl	8002b62 <LSM303AGR_ACC_GetSensitivity>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295
 8002f94:	e030      	b.n	8002ff8 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002f96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fae:	ee17 2a90 	vmov	r2, s15
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002fb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fce:	ee17 2a90 	vmov	r2, s15
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002fd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fee:	ee17 2a90 	vmov	r2, s15
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
 800300c:	4613      	mov	r3, r2
 800300e:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f103 001c 	add.w	r0, r3, #28
 8003016:	1cba      	adds	r2, r7, #2
 8003018:	78f9      	ldrb	r1, [r7, #3]
 800301a:	2301      	movs	r3, #1
 800301c:	f000 fcd4 	bl	80039c8 <lsm303agr_write_reg>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	e000      	b.n	800302e <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d103      	bne.n	8003054 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e04b      	b.n	80030ec <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	7b1a      	ldrb	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003090:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8003096:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e01e      	b.n	80030ec <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4798      	blx	r3
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e014      	b.n	80030ec <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	331c      	adds	r3, #28
 80030d8:	2101      	movs	r1, #1
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 ff75 	bl	8003fca <lsm303agr_mag_i2c_interface_set>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e000      	b.n	80030ee <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80030ec:	68fb      	ldr	r3, [r7, #12]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	080038d5 	.word	0x080038d5
 80030fc:	08003937 	.word	0x08003937

08003100 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	331c      	adds	r3, #28
 800310c:	2101      	movs	r1, #1
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fe7c 	bl	8003e0c <lsm303agr_mag_block_data_update_set>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	e028      	b.n	8003172 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	331c      	adds	r3, #28
 8003124:	2102      	movs	r1, #2
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fdeb 	bl	8003d02 <lsm303agr_mag_operating_mode_set>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
 8003136:	e01c      	b.n	8003172 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	331c      	adds	r3, #28
 800313c:	2103      	movs	r1, #3
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fe05 	bl	8003d4e <lsm303agr_mag_data_rate_set>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	e010      	b.n	8003172 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	331c      	adds	r3, #28
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f000 feeb 	bl	8003f32 <lsm303agr_mag_self_test_set>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	e004      	b.n	8003172 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f874 	bl	8003270 <LSM303AGR_MAG_Disable>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	e004      	b.n	800319e <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	331c      	adds	r3, #28
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 feaa 	bl	8003f10 <lsm303agr_mag_device_id_get>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e000      	b.n	80031ca <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2200      	movs	r2, #0
 80031f4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2232      	movs	r2, #50	; 0x32
 8003206:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4a04      	ldr	r2, [pc, #16]	; (800322c <LSM303AGR_MAG_GetCapabilities+0x58>)
 800321c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	42c80000 	.word	0x42c80000

08003230 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e010      	b.n	8003268 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	331c      	adds	r3, #28
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fd58 	bl	8003d02 <lsm303agr_mag_operating_mode_set>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003258:	f04f 33ff 	mov.w	r3, #4294967295
 800325c:	e004      	b.n	8003268 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e010      	b.n	80032a8 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	331c      	adds	r3, #28
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd38 	bl	8003d02 <lsm303agr_mag_operating_mode_set>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003298:	f04f 33ff 	mov.w	r3, #4294967295
 800329c:	e004      	b.n	80032a8 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80032c0:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	331c      	adds	r3, #28
 80032e2:	f107 020b 	add.w	r2, r7, #11
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fd57 	bl	8003d9c <lsm303agr_mag_data_rate_get>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	e023      	b.n	8003342 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80032fa:	7afb      	ldrb	r3, [r7, #11]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d81b      	bhi.n	8003338 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8003300:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	08003319 	.word	0x08003319
 800330c:	08003321 	.word	0x08003321
 8003310:	08003329 	.word	0x08003329
 8003314:	08003331 	.word	0x08003331
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4a0c      	ldr	r2, [pc, #48]	; (800334c <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 800331c:	601a      	str	r2, [r3, #0]
      break;
 800331e:	e00f      	b.n	8003340 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003324:	601a      	str	r2, [r3, #0]
      break;
 8003326:	e00b      	b.n	8003340 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 800332c:	601a      	str	r2, [r3, #0]
      break;
 800332e:	e007      	b.n	8003340 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003334:	601a      	str	r2, [r3, #0]
      break;
 8003336:	e003      	b.n	8003340 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
 800333c:	60fb      	str	r3, [r7, #12]
      break;
 800333e:	bf00      	nop
  }

  return ret;
 8003340:	68fb      	ldr	r3, [r7, #12]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	41200000 	.word	0x41200000
 8003350:	41a00000 	.word	0x41a00000
 8003354:	42480000 	.word	0x42480000
 8003358:	42c80000 	.word	0x42c80000

0800335c <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003368:	edd7 7a00 	vldr	s15, [r7]
 800336c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	d801      	bhi.n	800337e <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800337a:	2300      	movs	r3, #0
 800337c:	e016      	b.n	80033ac <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800337e:	edd7 7a00 	vldr	s15, [r7]
 8003382:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	d801      	bhi.n	8003394 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003390:	2301      	movs	r3, #1
 8003392:	e00b      	b.n	80033ac <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003394:	edd7 7a00 	vldr	s15, [r7]
 8003398:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80033d4 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 800339c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a4:	d801      	bhi.n	80033aa <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e000      	b.n	80033ac <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80033aa:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 80033ac:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	331c      	adds	r3, #28
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fcc9 	bl	8003d4e <lsm303agr_mag_data_rate_set>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	e000      	b.n	80033ca <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	42480000 	.word	0x42480000

080033d8 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2232      	movs	r2, #50	; 0x32
 80033e6:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	331c      	adds	r3, #28
 800341c:	f107 0208 	add.w	r2, r7, #8
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fd18 	bl	8003e58 <lsm303agr_magnetic_raw_get>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	e00c      	b.n	800344e <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003434:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800343c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003444:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	331c      	adds	r3, #28
 8003464:	f107 0210 	add.w	r2, r7, #16
 8003468:	4611      	mov	r1, r2
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fcf4 	bl	8003e58 <lsm303agr_magnetic_raw_get>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003476:	f04f 33ff 	mov.w	r3, #4294967295
 800347a:	e036      	b.n	80034ea <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 800347c:	f107 030c 	add.w	r3, r7, #12
 8003480:	4619      	mov	r1, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ff14 	bl	80032b0 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003488:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800348c:	ee07 3a90 	vmov	s15, r3
 8003490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003494:	edd7 7a03 	vldr	s15, [r7, #12]
 8003498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a0:	ee17 2a90 	vmov	r2, s15
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80034a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c0:	ee17 2a90 	vmov	r2, s15
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80034c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e0:	ee17 2a90 	vmov	r2, s15
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	331c      	adds	r3, #28
 8003506:	f107 020b 	add.w	r2, r7, #11
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fb4f 	bl	8003bb0 <lsm303agr_xl_full_scale_get>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8003518:	f04f 33ff 	mov.w	r3, #4294967295
 800351c:	e023      	b.n	8003566 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d81b      	bhi.n	800355c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003545 	.word	0x08003545
 8003534:	0800354d 	.word	0x0800354d
 8003538:	08003555 	.word	0x08003555
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003540:	601a      	str	r2, [r3, #0]
      break;
 8003542:	e00f      	b.n	8003564 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003548:	601a      	str	r2, [r3, #0]
      break;
 800354a:	e00b      	b.n	8003564 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003550:	601a      	str	r2, [r3, #0]
      break;
 8003552:	e007      	b.n	8003564 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003558:	601a      	str	r2, [r3, #0]
      break;
 800355a:	e003      	b.n	8003564 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
 8003560:	60fb      	str	r3, [r7, #12]
      break;
 8003562:	bf00      	nop
  }

  return ret;
 8003564:	68fb      	ldr	r3, [r7, #12]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	3f7ae148 	.word	0x3f7ae148
 8003574:	3ff9999a 	.word	0x3ff9999a
 8003578:	4079999a 	.word	0x4079999a
 800357c:	413b851f 	.word	0x413b851f

08003580 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	331c      	adds	r3, #28
 8003592:	f107 020b 	add.w	r2, r7, #11
 8003596:	4611      	mov	r1, r2
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fb09 	bl	8003bb0 <lsm303agr_xl_full_scale_get>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	e023      	b.n	80035f2 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80035aa:	7afb      	ldrb	r3, [r7, #11]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d81b      	bhi.n	80035e8 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	080035d1 	.word	0x080035d1
 80035c0:	080035d9 	.word	0x080035d9
 80035c4:	080035e1 	.word	0x080035e1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80035cc:	601a      	str	r2, [r3, #0]
      break;
 80035ce:	e00f      	b.n	80035f0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80035d4:	601a      	str	r2, [r3, #0]
      break;
 80035d6:	e00b      	b.n	80035f0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80035dc:	601a      	str	r2, [r3, #0]
      break;
 80035de:	e007      	b.n	80035f0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4a09      	ldr	r2, [pc, #36]	; (8003608 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80035e4:	601a      	str	r2, [r3, #0]
      break;
 80035e6:	e003      	b.n	80035f0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ec:	60fb      	str	r3, [r7, #12]
      break;
 80035ee:	bf00      	nop
  }

  return ret;
 80035f0:	68fb      	ldr	r3, [r7, #12]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	4079999a 	.word	0x4079999a
 8003600:	40fa3d71 	.word	0x40fa3d71
 8003604:	417a147b 	.word	0x417a147b
 8003608:	423b999a 	.word	0x423b999a

0800360c <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	331c      	adds	r3, #28
 800361e:	f107 020b 	add.w	r2, r7, #11
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fac3 	bl	8003bb0 <lsm303agr_xl_full_scale_get>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003630:	f04f 33ff 	mov.w	r3, #4294967295
 8003634:	e023      	b.n	800367e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003636:	7afb      	ldrb	r3, [r7, #11]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d81b      	bhi.n	8003674 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003655 	.word	0x08003655
 8003648:	0800365d 	.word	0x0800365d
 800364c:	08003665 	.word	0x08003665
 8003650:	0800366d 	.word	0x0800366d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4a0c      	ldr	r2, [pc, #48]	; (8003688 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003658:	601a      	str	r2, [r3, #0]
      break;
 800365a:	e00f      	b.n	800367c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003660:	601a      	str	r2, [r3, #0]
      break;
 8003662:	e00b      	b.n	800367c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003668:	601a      	str	r2, [r3, #0]
      break;
 800366a:	e007      	b.n	800367c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003670:	601a      	str	r2, [r3, #0]
      break;
 8003672:	e003      	b.n	800367c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
 8003678:	60fb      	str	r3, [r7, #12]
      break;
 800367a:	bf00      	nop
  }

  return ret;
 800367c:	68fb      	ldr	r3, [r7, #12]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	417a147b 	.word	0x417a147b
 800368c:	41fa147b 	.word	0x41fa147b
 8003690:	427a147b 	.word	0x427a147b
 8003694:	433b947b 	.word	0x433b947b

08003698 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80036a4:	edd7 7a00 	vldr	s15, [r7]
 80036a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b4:	d801      	bhi.n	80036ba <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e037      	b.n	800372a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80036ba:	edd7 7a00 	vldr	s15, [r7]
 80036be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	d801      	bhi.n	80036d0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e02c      	b.n	800372a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80036d0:	edd7 7a00 	vldr	s15, [r7]
 80036d4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80036d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e0:	d801      	bhi.n	80036e6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e021      	b.n	800372a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80036e6:	edd7 7a00 	vldr	s15, [r7]
 80036ea:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003750 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80036ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	d801      	bhi.n	80036fc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80036f8:	2304      	movs	r3, #4
 80036fa:	e016      	b.n	800372a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80036fc:	edd7 7a00 	vldr	s15, [r7]
 8003700:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003754 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370c:	d801      	bhi.n	8003712 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800370e:	2305      	movs	r3, #5
 8003710:	e00b      	b.n	800372a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003712:	edd7 7a00 	vldr	s15, [r7]
 8003716:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003758 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800371a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	d801      	bhi.n	8003728 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003724:	2306      	movs	r3, #6
 8003726:	e000      	b.n	800372a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003728:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800372a:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	331c      	adds	r3, #28
 8003730:	7bfa      	ldrb	r2, [r7, #15]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f993 	bl	8003a60 <lsm303agr_xl_data_rate_set>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	e000      	b.n	8003748 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	42480000 	.word	0x42480000
 8003754:	42c80000 	.word	0x42c80000
 8003758:	43480000 	.word	0x43480000

0800375c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003768:	edd7 7a00 	vldr	s15, [r7]
 800376c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003778:	d801      	bhi.n	800377e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 800377a:	2301      	movs	r3, #1
 800377c:	e037      	b.n	80037ee <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800377e:	edd7 7a00 	vldr	s15, [r7]
 8003782:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	d801      	bhi.n	8003794 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003790:	2302      	movs	r3, #2
 8003792:	e02c      	b.n	80037ee <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003794:	edd7 7a00 	vldr	s15, [r7]
 8003798:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800379c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a4:	d801      	bhi.n	80037aa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e021      	b.n	80037ee <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80037aa:	edd7 7a00 	vldr	s15, [r7]
 80037ae:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003804 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80037b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	d801      	bhi.n	80037c0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80037bc:	2304      	movs	r3, #4
 80037be:	e016      	b.n	80037ee <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80037c0:	edd7 7a00 	vldr	s15, [r7]
 80037c4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003808 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80037c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	d801      	bhi.n	80037d6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80037d2:	2305      	movs	r3, #5
 80037d4:	e00b      	b.n	80037ee <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80037d6:	edd7 7a00 	vldr	s15, [r7]
 80037da:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800380c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80037de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	d801      	bhi.n	80037ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80037e8:	2306      	movs	r3, #6
 80037ea:	e000      	b.n	80037ee <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80037ec:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	42480000 	.word	0x42480000
 8003808:	42c80000 	.word	0x42c80000
 800380c:	43480000 	.word	0x43480000

08003810 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	461a      	mov	r2, r3
 800381c:	460b      	mov	r3, r1
 800381e:	72fb      	strb	r3, [r7, #11]
 8003820:	4613      	mov	r3, r2
 8003822:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10e      	bne.n	800384e <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	695c      	ldr	r4, [r3, #20]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	7b1b      	ldrb	r3, [r3, #12]
 8003838:	b298      	uxth	r0, r3
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003840:	b2db      	uxtb	r3, r3
 8003842:	b299      	uxth	r1, r3
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	47a0      	blx	r4
 800384a:	4603      	mov	r3, r0
 800384c:	e00d      	b.n	800386a <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	695c      	ldr	r4, [r3, #20]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	7b1b      	ldrb	r3, [r3, #12]
 8003856:	b298      	uxth	r0, r3
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385e:	b2db      	uxtb	r3, r3
 8003860:	b299      	uxth	r1, r3
 8003862:	893b      	ldrh	r3, [r7, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	47a0      	blx	r4
 8003868:	4603      	mov	r3, r0
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}

08003872 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003872:	b590      	push	{r4, r7, lr}
 8003874:	b087      	sub	sp, #28
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	461a      	mov	r2, r3
 800387e:	460b      	mov	r3, r1
 8003880:	72fb      	strb	r3, [r7, #11]
 8003882:	4613      	mov	r3, r2
 8003884:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10e      	bne.n	80038b0 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	691c      	ldr	r4, [r3, #16]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	7b1b      	ldrb	r3, [r3, #12]
 800389a:	b298      	uxth	r0, r3
 800389c:	7afb      	ldrb	r3, [r7, #11]
 800389e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	b299      	uxth	r1, r3
 80038a6:	893b      	ldrh	r3, [r7, #8]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	47a0      	blx	r4
 80038ac:	4603      	mov	r3, r0
 80038ae:	e00d      	b.n	80038cc <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	691c      	ldr	r4, [r3, #16]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	7b1b      	ldrb	r3, [r3, #12]
 80038b8:	b298      	uxth	r0, r3
 80038ba:	7afb      	ldrb	r3, [r7, #11]
 80038bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	b299      	uxth	r1, r3
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	47a0      	blx	r4
 80038ca:	4603      	mov	r3, r0
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd90      	pop	{r4, r7, pc}

080038d4 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	461a      	mov	r2, r3
 80038e0:	460b      	mov	r3, r1
 80038e2:	72fb      	strb	r3, [r7, #11]
 80038e4:	4613      	mov	r3, r2
 80038e6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10e      	bne.n	8003912 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	695c      	ldr	r4, [r3, #20]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	7b1b      	ldrb	r3, [r3, #12]
 80038fc:	b298      	uxth	r0, r3
 80038fe:	7afb      	ldrb	r3, [r7, #11]
 8003900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003904:	b2db      	uxtb	r3, r3
 8003906:	b299      	uxth	r1, r3
 8003908:	893b      	ldrh	r3, [r7, #8]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	47a0      	blx	r4
 800390e:	4603      	mov	r3, r0
 8003910:	e00d      	b.n	800392e <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	695c      	ldr	r4, [r3, #20]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	7b1b      	ldrb	r3, [r3, #12]
 800391a:	b298      	uxth	r0, r3
 800391c:	7afb      	ldrb	r3, [r7, #11]
 800391e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003922:	b2db      	uxtb	r3, r3
 8003924:	b299      	uxth	r1, r3
 8003926:	893b      	ldrh	r3, [r7, #8]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	47a0      	blx	r4
 800392c:	4603      	mov	r3, r0
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}

08003936 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003936:	b590      	push	{r4, r7, lr}
 8003938:	b087      	sub	sp, #28
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	461a      	mov	r2, r3
 8003942:	460b      	mov	r3, r1
 8003944:	72fb      	strb	r3, [r7, #11]
 8003946:	4613      	mov	r3, r2
 8003948:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10e      	bne.n	8003974 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	691c      	ldr	r4, [r3, #16]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	7b1b      	ldrb	r3, [r3, #12]
 800395e:	b298      	uxth	r0, r3
 8003960:	7afb      	ldrb	r3, [r7, #11]
 8003962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003966:	b2db      	uxtb	r3, r3
 8003968:	b299      	uxth	r1, r3
 800396a:	893b      	ldrh	r3, [r7, #8]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	47a0      	blx	r4
 8003970:	4603      	mov	r3, r0
 8003972:	e00d      	b.n	8003990 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	691c      	ldr	r4, [r3, #16]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	7b1b      	ldrb	r3, [r3, #12]
 800397c:	b298      	uxth	r0, r3
 800397e:	7afb      	ldrb	r3, [r7, #11]
 8003980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003984:	b2db      	uxtb	r3, r3
 8003986:	b299      	uxth	r1, r3
 8003988:	893b      	ldrh	r3, [r7, #8]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	47a0      	blx	r4
 800398e:	4603      	mov	r3, r0
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}

08003998 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	461a      	mov	r2, r3
 80039a4:	460b      	mov	r3, r1
 80039a6:	72fb      	strb	r3, [r7, #11]
 80039a8:	4613      	mov	r3, r2
 80039aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685c      	ldr	r4, [r3, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6898      	ldr	r0, [r3, #8]
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	7af9      	ldrb	r1, [r7, #11]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	47a0      	blx	r4
 80039bc:	6178      	str	r0, [r7, #20]
  return ret;
 80039be:	697b      	ldr	r3, [r7, #20]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd90      	pop	{r4, r7, pc}

080039c8 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	461a      	mov	r2, r3
 80039d4:	460b      	mov	r3, r1
 80039d6:	72fb      	strb	r3, [r7, #11]
 80039d8:	4613      	mov	r3, r2
 80039da:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681c      	ldr	r4, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6898      	ldr	r0, [r3, #8]
 80039e4:	893b      	ldrh	r3, [r7, #8]
 80039e6:	7af9      	ldrb	r1, [r7, #11]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	47a0      	blx	r4
 80039ec:	6178      	str	r0, [r7, #20]
  return ret;
 80039ee:	697b      	ldr	r3, [r7, #20]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd90      	pop	{r4, r7, pc}

080039f8 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003a02:	f107 020c 	add.w	r2, r7, #12
 8003a06:	2301      	movs	r3, #1
 8003a08:	2120      	movs	r1, #32
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff ffc4 	bl	8003998 <lsm303agr_read_reg>
 8003a10:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a18:	f107 0210 	add.w	r2, r7, #16
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	2123      	movs	r1, #35	; 0x23
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ffb9 	bl	8003998 <lsm303agr_read_reg>
 8003a26:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003a28:	7b3b      	ldrb	r3, [r7, #12]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2202      	movs	r2, #2
 8003a38:	701a      	strb	r2, [r3, #0]
 8003a3a:	e00c      	b.n	8003a56 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003a3c:	7c3b      	ldrb	r3, [r7, #16]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	e002      	b.n	8003a56 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003a56:	697b      	ldr	r3, [r7, #20]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003a6c:	f107 0208 	add.w	r2, r7, #8
 8003a70:	2301      	movs	r3, #1
 8003a72:	2120      	movs	r1, #32
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff8f 	bl	8003998 <lsm303agr_read_reg>
 8003a7a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	7a3b      	ldrb	r3, [r7, #8]
 8003a8c:	f362 1307 	bfi	r3, r2, #4, #4
 8003a90:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003a92:	f107 0208 	add.w	r2, r7, #8
 8003a96:	2301      	movs	r3, #1
 8003a98:	2120      	movs	r1, #32
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff94 	bl	80039c8 <lsm303agr_write_reg>
 8003aa0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003ab6:	f107 0208 	add.w	r2, r7, #8
 8003aba:	2301      	movs	r3, #1
 8003abc:	2120      	movs	r1, #32
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ff6a 	bl	8003998 <lsm303agr_read_reg>
 8003ac4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003ac6:	7a3b      	ldrb	r3, [r7, #8]
 8003ac8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d83e      	bhi.n	8003b50 <lsm303agr_xl_data_rate_get+0xa4>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <lsm303agr_xl_data_rate_get+0x2c>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003b01 	.word	0x08003b01
 8003adc:	08003b09 	.word	0x08003b09
 8003ae0:	08003b11 	.word	0x08003b11
 8003ae4:	08003b19 	.word	0x08003b19
 8003ae8:	08003b21 	.word	0x08003b21
 8003aec:	08003b29 	.word	0x08003b29
 8003af0:	08003b31 	.word	0x08003b31
 8003af4:	08003b39 	.word	0x08003b39
 8003af8:	08003b41 	.word	0x08003b41
 8003afc:	08003b49 	.word	0x08003b49
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
      break;
 8003b06:	e027      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
      break;
 8003b0e:	e023      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2202      	movs	r2, #2
 8003b14:	701a      	strb	r2, [r3, #0]
      break;
 8003b16:	e01f      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	701a      	strb	r2, [r3, #0]
      break;
 8003b1e:	e01b      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2204      	movs	r2, #4
 8003b24:	701a      	strb	r2, [r3, #0]
      break;
 8003b26:	e017      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	701a      	strb	r2, [r3, #0]
      break;
 8003b2e:	e013      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2206      	movs	r2, #6
 8003b34:	701a      	strb	r2, [r3, #0]
      break;
 8003b36:	e00f      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	701a      	strb	r2, [r3, #0]
      break;
 8003b3e:	e00b      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2208      	movs	r2, #8
 8003b44:	701a      	strb	r2, [r3, #0]
      break;
 8003b46:	e007      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2209      	movs	r2, #9
 8003b4c:	701a      	strb	r2, [r3, #0]
      break;
 8003b4e:	e003      	b.n	8003b58 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
      break;
 8003b56:	bf00      	nop
  }

  return ret;
 8003b58:	68fb      	ldr	r3, [r7, #12]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop

08003b64 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b70:	f107 0208 	add.w	r2, r7, #8
 8003b74:	2301      	movs	r3, #1
 8003b76:	2123      	movs	r1, #35	; 0x23
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff0d 	bl	8003998 <lsm303agr_read_reg>
 8003b7e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	7a3b      	ldrb	r3, [r7, #8]
 8003b90:	f362 1305 	bfi	r3, r2, #4, #2
 8003b94:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b96:	f107 0208 	add.w	r2, r7, #8
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	2123      	movs	r1, #35	; 0x23
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ff12 	bl	80039c8 <lsm303agr_write_reg>
 8003ba4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003bba:	f107 0208 	add.w	r2, r7, #8
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	2123      	movs	r1, #35	; 0x23
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fee8 	bl	8003998 <lsm303agr_read_reg>
 8003bc8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003bca:	7a3b      	ldrb	r3, [r7, #8]
 8003bcc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d81a      	bhi.n	8003c0c <lsm303agr_xl_full_scale_get+0x5c>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <lsm303agr_xl_full_scale_get+0x2c>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bf5 	.word	0x08003bf5
 8003be4:	08003bfd 	.word	0x08003bfd
 8003be8:	08003c05 	.word	0x08003c05
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
      break;
 8003bf2:	e00f      	b.n	8003c14 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	701a      	strb	r2, [r3, #0]
      break;
 8003bfa:	e00b      	b.n	8003c14 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]
      break;
 8003c02:	e007      	b.n	8003c14 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2203      	movs	r2, #3
 8003c08:	701a      	strb	r2, [r3, #0]
      break;
 8003c0a:	e003      	b.n	8003c14 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
      break;
 8003c12:	bf00      	nop
  }

  return ret;
 8003c14:	68fb      	ldr	r3, [r7, #12]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop

08003c20 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003c2c:	f107 0208 	add.w	r2, r7, #8
 8003c30:	2301      	movs	r3, #1
 8003c32:	2123      	movs	r1, #35	; 0x23
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff feaf 	bl	8003998 <lsm303agr_read_reg>
 8003c3a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	7a3b      	ldrb	r3, [r7, #8]
 8003c4c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003c50:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003c52:	f107 0208 	add.w	r2, r7, #8
 8003c56:	2301      	movs	r3, #1
 8003c58:	2123      	movs	r1, #35	; 0x23
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff feb4 	bl	80039c8 <lsm303agr_write_reg>
 8003c60:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003c62:	68fb      	ldr	r3, [r7, #12]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003c76:	f107 020c 	add.w	r2, r7, #12
 8003c7a:	2306      	movs	r3, #6
 8003c7c:	2128      	movs	r1, #40	; 0x28
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fe8a 	bl	8003998 <lsm303agr_read_reg>
 8003c84:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c86:	7b7b      	ldrb	r3, [r7, #13]
 8003c88:	b21a      	sxth	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	7b3b      	ldrb	r3, [r7, #12]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	3302      	adds	r3, #2
 8003cae:	b212      	sxth	r2, r2
 8003cb0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	7bbb      	ldrb	r3, [r7, #14]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	3302      	adds	r3, #2
 8003ccc:	b212      	sxth	r2, r2
 8003cce:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003cd0:	7c7a      	ldrb	r2, [r7, #17]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	b212      	sxth	r2, r2
 8003cd8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	7c3b      	ldrb	r3, [r7, #16]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	b212      	sxth	r2, r2
 8003cf6:	801a      	strh	r2, [r3, #0]
  return ret;
 8003cf8:	697b      	ldr	r3, [r7, #20]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d0e:	f107 0208 	add.w	r2, r7, #8
 8003d12:	2301      	movs	r3, #1
 8003d14:	2160      	movs	r1, #96	; 0x60
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fe3e 	bl	8003998 <lsm303agr_read_reg>
 8003d1c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10f      	bne.n	8003d44 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	7a3b      	ldrb	r3, [r7, #8]
 8003d2e:	f362 0301 	bfi	r3, r2, #0, #2
 8003d32:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d34:	f107 0208 	add.w	r2, r7, #8
 8003d38:	2301      	movs	r3, #1
 8003d3a:	2160      	movs	r1, #96	; 0x60
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fe43 	bl	80039c8 <lsm303agr_write_reg>
 8003d42:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003d44:	68fb      	ldr	r3, [r7, #12]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d5a:	f107 0208 	add.w	r2, r7, #8
 8003d5e:	2301      	movs	r3, #1
 8003d60:	2160      	movs	r1, #96	; 0x60
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fe18 	bl	8003998 <lsm303agr_read_reg>
 8003d68:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10f      	bne.n	8003d90 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	7a3b      	ldrb	r3, [r7, #8]
 8003d7a:	f362 0383 	bfi	r3, r2, #2, #2
 8003d7e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d80:	f107 0208 	add.w	r2, r7, #8
 8003d84:	2301      	movs	r3, #1
 8003d86:	2160      	movs	r1, #96	; 0x60
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fe1d 	bl	80039c8 <lsm303agr_write_reg>
 8003d8e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003d90:	68fb      	ldr	r3, [r7, #12]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003da6:	f107 0208 	add.w	r2, r7, #8
 8003daa:	2301      	movs	r3, #1
 8003dac:	2160      	movs	r1, #96	; 0x60
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fdf2 	bl	8003998 <lsm303agr_read_reg>
 8003db4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003db6:	7a3b      	ldrb	r3, [r7, #8]
 8003db8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d81a      	bhi.n	8003df8 <lsm303agr_mag_data_rate_get+0x5c>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <lsm303agr_mag_data_rate_get+0x2c>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003de1 	.word	0x08003de1
 8003dd0:	08003de9 	.word	0x08003de9
 8003dd4:	08003df1 	.word	0x08003df1
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
      break;
 8003dde:	e00f      	b.n	8003e00 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
      break;
 8003de6:	e00b      	b.n	8003e00 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2202      	movs	r2, #2
 8003dec:	701a      	strb	r2, [r3, #0]
      break;
 8003dee:	e007      	b.n	8003e00 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2203      	movs	r2, #3
 8003df4:	701a      	strb	r2, [r3, #0]
      break;
 8003df6:	e003      	b.n	8003e00 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
      break;
 8003dfe:	bf00      	nop
  }

  return ret;
 8003e00:	68fb      	ldr	r3, [r7, #12]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop

08003e0c <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003e18:	f107 0208 	add.w	r2, r7, #8
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	2162      	movs	r1, #98	; 0x62
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff fdb9 	bl	8003998 <lsm303agr_read_reg>
 8003e26:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	7a3b      	ldrb	r3, [r7, #8]
 8003e38:	f362 1304 	bfi	r3, r2, #4, #1
 8003e3c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003e3e:	f107 0208 	add.w	r2, r7, #8
 8003e42:	2301      	movs	r3, #1
 8003e44:	2162      	movs	r1, #98	; 0x62
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fdbe 	bl	80039c8 <lsm303agr_write_reg>
 8003e4c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003e62:	f107 020c 	add.w	r2, r7, #12
 8003e66:	2306      	movs	r3, #6
 8003e68:	2168      	movs	r1, #104	; 0x68
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fd94 	bl	8003998 <lsm303agr_read_reg>
 8003e70:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003e72:	7b7b      	ldrb	r3, [r7, #13]
 8003e74:	b21a      	sxth	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	7b3b      	ldrb	r3, [r7, #12]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	b21a      	sxth	r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	3302      	adds	r3, #2
 8003e9a:	b212      	sxth	r2, r2
 8003e9c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	7bbb      	ldrb	r3, [r7, #14]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	b212      	sxth	r2, r2
 8003eba:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003ebc:	7c7a      	ldrb	r2, [r7, #17]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	b212      	sxth	r2, r2
 8003ec4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	7c3b      	ldrb	r3, [r7, #16]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	4413      	add	r3, r2
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	b212      	sxth	r2, r2
 8003ee2:	801a      	strh	r2, [r3, #0]
  return ret;
 8003ee4:	697b      	ldr	r3, [r7, #20]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003ef8:	2301      	movs	r3, #1
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	210f      	movs	r1, #15
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fd4a 	bl	8003998 <lsm303agr_read_reg>
 8003f04:	60f8      	str	r0, [r7, #12]
  return ret;
 8003f06:	68fb      	ldr	r3, [r7, #12]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	214f      	movs	r1, #79	; 0x4f
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff fd39 	bl	8003998 <lsm303agr_read_reg>
 8003f26:	60f8      	str	r0, [r7, #12]
  return ret;
 8003f28:	68fb      	ldr	r3, [r7, #12]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003f3e:	f107 0208 	add.w	r2, r7, #8
 8003f42:	2301      	movs	r3, #1
 8003f44:	2162      	movs	r1, #98	; 0x62
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fd26 	bl	8003998 <lsm303agr_read_reg>
 8003f4c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10f      	bne.n	8003f74 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	7a3b      	ldrb	r3, [r7, #8]
 8003f5e:	f362 0341 	bfi	r3, r2, #1, #1
 8003f62:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003f64:	f107 0208 	add.w	r2, r7, #8
 8003f68:	2301      	movs	r3, #1
 8003f6a:	2162      	movs	r1, #98	; 0x62
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff fd2b 	bl	80039c8 <lsm303agr_write_reg>
 8003f72:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003f8a:	f107 0208 	add.w	r2, r7, #8
 8003f8e:	2301      	movs	r3, #1
 8003f90:	212e      	movs	r1, #46	; 0x2e
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fd00 	bl	8003998 <lsm303agr_read_reg>
 8003f98:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10f      	bne.n	8003fc0 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	7a3b      	ldrb	r3, [r7, #8]
 8003faa:	f362 1387 	bfi	r3, r2, #6, #2
 8003fae:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003fb0:	f107 0208 	add.w	r2, r7, #8
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	212e      	movs	r1, #46	; 0x2e
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff fd05 	bl	80039c8 <lsm303agr_write_reg>
 8003fbe:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003fd6:	f107 0208 	add.w	r2, r7, #8
 8003fda:	2301      	movs	r3, #1
 8003fdc:	2162      	movs	r1, #98	; 0x62
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fcda 	bl	8003998 <lsm303agr_read_reg>
 8003fe4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	7a3b      	ldrb	r3, [r7, #8]
 8003ff6:	f362 1345 	bfi	r3, r2, #5, #1
 8003ffa:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003ffc:	f107 0208 	add.w	r2, r7, #8
 8004000:	2301      	movs	r3, #1
 8004002:	2162      	movs	r1, #98	; 0x62
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fcdf 	bl	80039c8 <lsm303agr_write_reg>
 800400a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800400c:	68fb      	ldr	r3, [r7, #12]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e04d      	b.n	80040d0 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	7b1a      	ldrb	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <LSM6DSL_RegisterBusIO+0xc4>)
 8004070:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <LSM6DSL_RegisterBusIO+0xc8>)
 8004076:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d103      	bne.n	800408e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8004086:	f04f 33ff 	mov.w	r3, #4294967295
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e020      	b.n	80040d0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4798      	blx	r3
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e016      	b.n	80040d0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d112      	bne.n	80040d0 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10d      	bne.n	80040d0 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80040b4:	230c      	movs	r3, #12
 80040b6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80040b8:	7afb      	ldrb	r3, [r7, #11]
 80040ba:	461a      	mov	r2, r3
 80040bc:	2112      	movs	r1, #18
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fd2d 	bl	8004b1e <LSM6DSL_Write_Reg>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80040d0:	68fb      	ldr	r3, [r7, #12]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	08004f8d 	.word	0x08004f8d
 80040e0:	08004fc3 	.word	0x08004fc3

080040e4 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	331c      	adds	r3, #28
 80040f0:	2101      	movs	r1, #1
 80040f2:	4618      	mov	r0, r3
 80040f4:	f001 fa59 	bl	80055aa <lsm6dsl_auto_increment_set>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004102:	e054      	b.n	80041ae <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	331c      	adds	r3, #28
 8004108:	2101      	movs	r1, #1
 800410a:	4618      	mov	r0, r3
 800410c:	f001 f980 	bl	8005410 <lsm6dsl_block_data_update_set>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	e048      	b.n	80041ae <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	331c      	adds	r3, #28
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f001 fa67 	bl	80055f6 <lsm6dsl_fifo_mode_set>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	e03c      	b.n	80041ae <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2204      	movs	r2, #4
 8004138:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	331c      	adds	r3, #28
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f000 ffe6 	bl	8005114 <lsm6dsl_xl_data_rate_set>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800414e:	f04f 33ff 	mov.w	r3, #4294967295
 8004152:	e02c      	b.n	80041ae <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	331c      	adds	r3, #28
 8004158:	2100      	movs	r1, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f000 ff7c 	bl	8005058 <lsm6dsl_xl_full_scale_set>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
 800416a:	e020      	b.n	80041ae <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2204      	movs	r2, #4
 8004170:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	331c      	adds	r3, #28
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f001 f8c0 	bl	8005300 <lsm6dsl_gy_data_rate_set>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004186:	f04f 33ff 	mov.w	r3, #4294967295
 800418a:	e010      	b.n	80041ae <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	331c      	adds	r3, #28
 8004190:	2106      	movs	r1, #6
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f84c 	bl	8005230 <lsm6dsl_gy_full_scale_set>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
 80041a2:	e004      	b.n	80041ae <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f888 	bl	80042d4 <LSM6DSL_ACC_Disable>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	e015      	b.n	80041fc <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fa9a 	bl	800470a <LSM6DSL_GYRO_Disable>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	e00c      	b.n	80041fc <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	331c      	adds	r3, #28
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f001 f9b7 	bl	8005588 <lsm6dsl_device_id_get>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004220:	f04f 33ff 	mov.w	r3, #4294967295
 8004224:	e000      	b.n	8004228 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2201      	movs	r2, #1
 800423e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2201      	movs	r2, #1
 8004244:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2200      	movs	r2, #0
 800424a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004258:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2210      	movs	r2, #16
 800425e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	4a07      	ldr	r2, [pc, #28]	; (8004288 <LSM6DSL_GetCapabilities+0x58>)
 800426a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4a06      	ldr	r2, [pc, #24]	; (8004288 <LSM6DSL_GetCapabilities+0x58>)
 8004270:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	45d02000 	.word	0x45d02000

0800428c <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e014      	b.n	80042cc <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f103 021c 	add.w	r2, r3, #28
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f000 ff2f 	bl	8005114 <lsm6dsl_xl_data_rate_set>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80042bc:	f04f 33ff 	mov.w	r3, #4294967295
 80042c0:	e004      	b.n	80042cc <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e01f      	b.n	800432a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f103 021c 	add.w	r2, r3, #28
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	332b      	adds	r3, #43	; 0x2b
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 ff32 	bl	8005160 <lsm6dsl_xl_data_rate_get>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	e010      	b.n	800432a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	331c      	adds	r3, #28
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f000 ff00 	bl	8005114 <lsm6dsl_xl_data_rate_set>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	e004      	b.n	800432a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	331c      	adds	r3, #28
 8004346:	f107 020b 	add.w	r2, r7, #11
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fea9 	bl	80050a4 <lsm6dsl_xl_full_scale_get>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004358:	f04f 33ff 	mov.w	r3, #4294967295
 800435c:	e023      	b.n	80043a6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800435e:	7afb      	ldrb	r3, [r7, #11]
 8004360:	2b03      	cmp	r3, #3
 8004362:	d81b      	bhi.n	800439c <LSM6DSL_ACC_GetSensitivity+0x68>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	0800437d 	.word	0x0800437d
 8004370:	08004395 	.word	0x08004395
 8004374:	08004385 	.word	0x08004385
 8004378:	0800438d 	.word	0x0800438d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004380:	601a      	str	r2, [r3, #0]
      break;
 8004382:	e00f      	b.n	80043a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4a0b      	ldr	r2, [pc, #44]	; (80043b4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004388:	601a      	str	r2, [r3, #0]
      break;
 800438a:	e00b      	b.n	80043a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004390:	601a      	str	r2, [r3, #0]
      break;
 8004392:	e007      	b.n	80043a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004398:	601a      	str	r2, [r3, #0]
      break;
 800439a:	e003      	b.n	80043a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800439c:	f04f 33ff 	mov.w	r3, #4294967295
 80043a0:	60fb      	str	r3, [r7, #12]
      break;
 80043a2:	bf00      	nop
  }

  return ret;
 80043a4:	68fb      	ldr	r3, [r7, #12]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	3d79db23 	.word	0x3d79db23
 80043b4:	3df9db23 	.word	0x3df9db23
 80043b8:	3e79db23 	.word	0x3e79db23
 80043bc:	3ef9db23 	.word	0x3ef9db23

080043c0 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	331c      	adds	r3, #28
 80043d2:	f107 020b 	add.w	r2, r7, #11
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fec1 	bl	8005160 <lsm6dsl_xl_data_rate_get>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
 80043e8:	e054      	b.n	8004494 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80043ea:	7afb      	ldrb	r3, [r7, #11]
 80043ec:	2b0b      	cmp	r3, #11
 80043ee:	d84c      	bhi.n	800448a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80043f0:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	08004429 	.word	0x08004429
 80043fc:	0800443b 	.word	0x0800443b
 8004400:	08004443 	.word	0x08004443
 8004404:	0800444b 	.word	0x0800444b
 8004408:	08004453 	.word	0x08004453
 800440c:	0800445b 	.word	0x0800445b
 8004410:	08004463 	.word	0x08004463
 8004414:	0800446b 	.word	0x0800446b
 8004418:	08004473 	.word	0x08004473
 800441c:	0800447b 	.word	0x0800447b
 8004420:	08004483 	.word	0x08004483
 8004424:	08004433 	.word	0x08004433
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
      break;
 8004430:	e02f      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	4a19      	ldr	r2, [pc, #100]	; (800449c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004436:	601a      	str	r2, [r3, #0]
      break;
 8004438:	e02b      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800443e:	601a      	str	r2, [r3, #0]
      break;
 8004440:	e027      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004446:	601a      	str	r2, [r3, #0]
      break;
 8004448:	e023      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800444e:	601a      	str	r2, [r3, #0]
      break;
 8004450:	e01f      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004456:	601a      	str	r2, [r3, #0]
      break;
 8004458:	e01b      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800445e:	601a      	str	r2, [r3, #0]
      break;
 8004460:	e017      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004466:	601a      	str	r2, [r3, #0]
      break;
 8004468:	e013      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800446e:	601a      	str	r2, [r3, #0]
      break;
 8004470:	e00f      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	4a11      	ldr	r2, [pc, #68]	; (80044bc <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004476:	601a      	str	r2, [r3, #0]
      break;
 8004478:	e00b      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	4a10      	ldr	r2, [pc, #64]	; (80044c0 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800447e:	601a      	str	r2, [r3, #0]
      break;
 8004480:	e007      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004486:	601a      	str	r2, [r3, #0]
      break;
 8004488:	e003      	b.n	8004492 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	60fb      	str	r3, [r7, #12]
      break;
 8004490:	bf00      	nop
  }

  return ret;
 8004492:	68fb      	ldr	r3, [r7, #12]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	3fcccccd 	.word	0x3fcccccd
 80044a0:	41480000 	.word	0x41480000
 80044a4:	41d00000 	.word	0x41d00000
 80044a8:	42500000 	.word	0x42500000
 80044ac:	42d00000 	.word	0x42d00000
 80044b0:	43500000 	.word	0x43500000
 80044b4:	43d00000 	.word	0x43d00000
 80044b8:	44504000 	.word	0x44504000
 80044bc:	44cf8000 	.word	0x44cf8000
 80044c0:	45502000 	.word	0x45502000
 80044c4:	45d02000 	.word	0x45d02000

080044c8 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d106      	bne.n	80044ec <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80044de:	ed97 0a00 	vldr	s0, [r7]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fb36 	bl	8004b54 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80044e8:	4603      	mov	r3, r0
 80044ea:	e005      	b.n	80044f8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80044ec:	ed97 0a00 	vldr	s0, [r7]
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fbbb 	bl	8004c6c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80044f6:	4603      	mov	r3, r0
  }
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	331c      	adds	r3, #28
 8004512:	f107 020b 	add.w	r2, r7, #11
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fdc3 	bl	80050a4 <lsm6dsl_xl_full_scale_get>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
 8004528:	e023      	b.n	8004572 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800452a:	7afb      	ldrb	r3, [r7, #11]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d81b      	bhi.n	8004568 <LSM6DSL_ACC_GetFullScale+0x68>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <LSM6DSL_ACC_GetFullScale+0x38>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	08004549 	.word	0x08004549
 800453c:	08004561 	.word	0x08004561
 8004540:	08004551 	.word	0x08004551
 8004544:	08004559 	.word	0x08004559
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2202      	movs	r2, #2
 800454c:	601a      	str	r2, [r3, #0]
      break;
 800454e:	e00f      	b.n	8004570 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2204      	movs	r2, #4
 8004554:	601a      	str	r2, [r3, #0]
      break;
 8004556:	e00b      	b.n	8004570 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2208      	movs	r2, #8
 800455c:	601a      	str	r2, [r3, #0]
      break;
 800455e:	e007      	b.n	8004570 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2210      	movs	r2, #16
 8004564:	601a      	str	r2, [r3, #0]
      break;
 8004566:	e003      	b.n	8004570 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295
 800456c:	60fb      	str	r3, [r7, #12]
      break;
 800456e:	bf00      	nop
  }

  return ret;
 8004570:	68fb      	ldr	r3, [r7, #12]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop

0800457c <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b02      	cmp	r3, #2
 800458a:	dd0b      	ble.n	80045a4 <LSM6DSL_ACC_SetFullScale+0x28>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b04      	cmp	r3, #4
 8004590:	dd06      	ble.n	80045a0 <LSM6DSL_ACC_SetFullScale+0x24>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b08      	cmp	r3, #8
 8004596:	dc01      	bgt.n	800459c <LSM6DSL_ACC_SetFullScale+0x20>
 8004598:	2303      	movs	r3, #3
 800459a:	e004      	b.n	80045a6 <LSM6DSL_ACC_SetFullScale+0x2a>
 800459c:	2301      	movs	r3, #1
 800459e:	e002      	b.n	80045a6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e000      	b.n	80045a6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80045a4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80045a6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	331c      	adds	r3, #28
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	4611      	mov	r1, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fd51 	bl	8005058 <lsm6dsl_xl_full_scale_set>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80045bc:	f04f 33ff 	mov.w	r3, #4294967295
 80045c0:	e000      	b.n	80045c4 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	331c      	adds	r3, #28
 80045da:	f107 0208 	add.w	r2, r7, #8
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 ff86 	bl	80054f2 <lsm6dsl_acceleration_raw_get>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
 80045f0:	e00c      	b.n	800460c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80045f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80045fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004602:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	331c      	adds	r3, #28
 8004628:	f107 0210 	add.w	r2, r7, #16
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f000 ff5f 	bl	80054f2 <lsm6dsl_acceleration_raw_get>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	e03c      	b.n	80046ba <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff fe74 	bl	8004334 <LSM6DSL_ACC_GetSensitivity>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295
 8004656:	e030      	b.n	80046ba <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004658:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800465c:	ee07 3a90 	vmov	s15, r3
 8004660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004664:	edd7 7a03 	vldr	s15, [r7, #12]
 8004668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004670:	ee17 2a90 	vmov	r2, s15
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004678:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004684:	edd7 7a03 	vldr	s15, [r7, #12]
 8004688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004690:	ee17 2a90 	vmov	r2, s15
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004698:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80046a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046b0:	ee17 2a90 	vmov	r2, s15
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e014      	b.n	8004702 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 021c 	add.w	r2, r3, #28
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f000 fe0a 	bl	8005300 <lsm6dsl_gy_data_rate_set>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80046f2:	f04f 33ff 	mov.w	r3, #4294967295
 80046f6:	e004      	b.n	8004702 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e01f      	b.n	8004760 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f103 021c 	add.w	r2, r3, #28
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	332c      	adds	r3, #44	; 0x2c
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f000 fe0d 	bl	800534c <lsm6dsl_gy_data_rate_get>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004738:	f04f 33ff 	mov.w	r3, #4294967295
 800473c:	e010      	b.n	8004760 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	331c      	adds	r3, #28
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fddb 	bl	8005300 <lsm6dsl_gy_data_rate_set>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004750:	f04f 33ff 	mov.w	r3, #4294967295
 8004754:	e004      	b.n	8004760 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	331c      	adds	r3, #28
 800477a:	f107 020b 	add.w	r2, r7, #11
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fd7b 	bl	800527c <lsm6dsl_gy_full_scale_get>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800478c:	f04f 33ff 	mov.w	r3, #4294967295
 8004790:	e02d      	b.n	80047ee <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004792:	7afb      	ldrb	r3, [r7, #11]
 8004794:	2b06      	cmp	r3, #6
 8004796:	d825      	bhi.n	80047e4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047bd 	.word	0x080047bd
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047e5 	.word	0x080047e5
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047e5 	.word	0x080047e5
 80047b8:	080047dd 	.word	0x080047dd
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4a0e      	ldr	r2, [pc, #56]	; (80047f8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80047c0:	601a      	str	r2, [r3, #0]
      break;
 80047c2:	e013      	b.n	80047ec <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4a0d      	ldr	r2, [pc, #52]	; (80047fc <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80047c8:	601a      	str	r2, [r3, #0]
      break;
 80047ca:	e00f      	b.n	80047ec <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80047d0:	601a      	str	r2, [r3, #0]
      break;
 80047d2:	e00b      	b.n	80047ec <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4a0b      	ldr	r2, [pc, #44]	; (8004804 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80047d8:	601a      	str	r2, [r3, #0]
      break;
 80047da:	e007      	b.n	80047ec <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80047e0:	601a      	str	r2, [r3, #0]
      break;
 80047e2:	e003      	b.n	80047ec <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295
 80047e8:	60fb      	str	r3, [r7, #12]
      break;
 80047ea:	bf00      	nop
  }

  return ret;
 80047ec:	68fb      	ldr	r3, [r7, #12]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	408c0000 	.word	0x408c0000
 80047fc:	410c0000 	.word	0x410c0000
 8004800:	418c0000 	.word	0x418c0000
 8004804:	420c0000 	.word	0x420c0000
 8004808:	428c0000 	.word	0x428c0000

0800480c <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	331c      	adds	r3, #28
 800481e:	f107 020b 	add.w	r2, r7, #11
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fd91 	bl	800534c <lsm6dsl_gy_data_rate_get>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004830:	f04f 33ff 	mov.w	r3, #4294967295
 8004834:	e04e      	b.n	80048d4 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004836:	7afb      	ldrb	r3, [r7, #11]
 8004838:	2b0a      	cmp	r3, #10
 800483a:	d846      	bhi.n	80048ca <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004871 	.word	0x08004871
 8004848:	0800487b 	.word	0x0800487b
 800484c:	08004883 	.word	0x08004883
 8004850:	0800488b 	.word	0x0800488b
 8004854:	08004893 	.word	0x08004893
 8004858:	0800489b 	.word	0x0800489b
 800485c:	080048a3 	.word	0x080048a3
 8004860:	080048ab 	.word	0x080048ab
 8004864:	080048b3 	.word	0x080048b3
 8004868:	080048bb 	.word	0x080048bb
 800486c:	080048c3 	.word	0x080048c3
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
      break;
 8004878:	e02b      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4a17      	ldr	r2, [pc, #92]	; (80048dc <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800487e:	601a      	str	r2, [r3, #0]
      break;
 8004880:	e027      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004886:	601a      	str	r2, [r3, #0]
      break;
 8004888:	e023      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800488e:	601a      	str	r2, [r3, #0]
      break;
 8004890:	e01f      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004896:	601a      	str	r2, [r3, #0]
      break;
 8004898:	e01b      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	4a13      	ldr	r2, [pc, #76]	; (80048ec <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800489e:	601a      	str	r2, [r3, #0]
      break;
 80048a0:	e017      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80048a6:	601a      	str	r2, [r3, #0]
      break;
 80048a8:	e013      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80048ae:	601a      	str	r2, [r3, #0]
      break;
 80048b0:	e00f      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80048b6:	601a      	str	r2, [r3, #0]
      break;
 80048b8:	e00b      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	4a0f      	ldr	r2, [pc, #60]	; (80048fc <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80048be:	601a      	str	r2, [r3, #0]
      break;
 80048c0:	e007      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80048c6:	601a      	str	r2, [r3, #0]
      break;
 80048c8:	e003      	b.n	80048d2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295
 80048ce:	60fb      	str	r3, [r7, #12]
      break;
 80048d0:	bf00      	nop
  }

  return ret;
 80048d2:	68fb      	ldr	r3, [r7, #12]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	41480000 	.word	0x41480000
 80048e0:	41d00000 	.word	0x41d00000
 80048e4:	42500000 	.word	0x42500000
 80048e8:	42d00000 	.word	0x42d00000
 80048ec:	43500000 	.word	0x43500000
 80048f0:	43d00000 	.word	0x43d00000
 80048f4:	44504000 	.word	0x44504000
 80048f8:	44cf8000 	.word	0x44cf8000
 80048fc:	45502000 	.word	0x45502000
 8004900:	45d02000 	.word	0x45d02000

08004904 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004916:	2b01      	cmp	r3, #1
 8004918:	d106      	bne.n	8004928 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800491a:	ed97 0a00 	vldr	s0, [r7]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa26 	bl	8004d70 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004924:	4603      	mov	r3, r0
 8004926:	e005      	b.n	8004934 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004928:	ed97 0a00 	vldr	s0, [r7]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 faab 	bl	8004e88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004932:	4603      	mov	r3, r0
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	331c      	adds	r3, #28
 800494e:	f107 020b 	add.w	r2, r7, #11
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fc91 	bl	800527c <lsm6dsl_gy_full_scale_get>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	e030      	b.n	80049c8 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004966:	7afb      	ldrb	r3, [r7, #11]
 8004968:	2b06      	cmp	r3, #6
 800496a:	d828      	bhi.n	80049be <LSM6DSL_GYRO_GetFullScale+0x82>
 800496c:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	08004999 	.word	0x08004999
 8004978:	08004991 	.word	0x08004991
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049bf 	.word	0x080049bf
 8004984:	080049ab 	.word	0x080049ab
 8004988:	080049bf 	.word	0x080049bf
 800498c:	080049b5 	.word	0x080049b5
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	227d      	movs	r2, #125	; 0x7d
 8004994:	601a      	str	r2, [r3, #0]
      break;
 8004996:	e016      	b.n	80049c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	22fa      	movs	r2, #250	; 0xfa
 800499c:	601a      	str	r2, [r3, #0]
      break;
 800499e:	e012      	b.n	80049c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80049a6:	601a      	str	r2, [r3, #0]
      break;
 80049a8:	e00d      	b.n	80049c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049b0:	601a      	str	r2, [r3, #0]
      break;
 80049b2:	e008      	b.n	80049c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049ba:	601a      	str	r2, [r3, #0]
      break;
 80049bc:	e003      	b.n	80049c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	60fb      	str	r3, [r7, #12]
      break;
 80049c4:	bf00      	nop
  }

  return ret;
 80049c6:	68fb      	ldr	r3, [r7, #12]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b7d      	cmp	r3, #125	; 0x7d
 80049de:	dd12      	ble.n	8004a06 <LSM6DSL_GYRO_SetFullScale+0x36>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2bfa      	cmp	r3, #250	; 0xfa
 80049e4:	dd0d      	ble.n	8004a02 <LSM6DSL_GYRO_SetFullScale+0x32>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049ec:	dd07      	ble.n	80049fe <LSM6DSL_GYRO_SetFullScale+0x2e>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049f4:	dc01      	bgt.n	80049fa <LSM6DSL_GYRO_SetFullScale+0x2a>
 80049f6:	2304      	movs	r3, #4
 80049f8:	e006      	b.n	8004a08 <LSM6DSL_GYRO_SetFullScale+0x38>
 80049fa:	2306      	movs	r3, #6
 80049fc:	e004      	b.n	8004a08 <LSM6DSL_GYRO_SetFullScale+0x38>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e002      	b.n	8004a08 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004a06:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004a08:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	331c      	adds	r3, #28
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fc0c 	bl	8005230 <lsm6dsl_gy_full_scale_set>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a22:	e000      	b.n	8004a26 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	331c      	adds	r3, #28
 8004a3c:	f107 0208 	add.w	r2, r7, #8
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fd0a 	bl	800545c <lsm6dsl_angular_rate_raw_get>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a52:	e00c      	b.n	8004a6e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004a54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004a5c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004a64:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	331c      	adds	r3, #28
 8004a84:	f107 0210 	add.w	r2, r7, #16
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fce6 	bl	800545c <lsm6dsl_angular_rate_raw_get>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004a96:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9a:	e03c      	b.n	8004b16 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff fe60 	bl	8004768 <LSM6DSL_GYRO_GetSensitivity>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	e030      	b.n	8004b16 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004ab4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004acc:	ee17 2a90 	vmov	r2, s15
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004ad4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ae0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aec:	ee17 2a90 	vmov	r2, s15
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004af4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b00:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b0c:	ee17 2a90 	vmov	r2, s15
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	70fb      	strb	r3, [r7, #3]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f103 001c 	add.w	r0, r3, #28
 8004b34:	1cba      	adds	r2, r7, #2
 8004b36:	78f9      	ldrb	r1, [r7, #3]
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f000 fa75 	bl	8005028 <lsm6dsl_write_reg>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295
 8004b48:	e000      	b.n	8004b4c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004b60:	edd7 7a00 	vldr	s15, [r7]
 8004b64:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b70:	d801      	bhi.n	8004b76 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e058      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004b76:	edd7 7a00 	vldr	s15, [r7]
 8004b7a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	d801      	bhi.n	8004b8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e04d      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004b8c:	edd7 7a00 	vldr	s15, [r7]
 8004b90:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004c50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9c:	d801      	bhi.n	8004ba2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e042      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ba2:	edd7 7a00 	vldr	s15, [r7]
 8004ba6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004c54 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	d801      	bhi.n	8004bb8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	e037      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004bb8:	edd7 7a00 	vldr	s15, [r7]
 8004bbc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004c58 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc8:	d801      	bhi.n	8004bce <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004bca:	2305      	movs	r3, #5
 8004bcc:	e02c      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004bce:	edd7 7a00 	vldr	s15, [r7]
 8004bd2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004c5c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bde:	d801      	bhi.n	8004be4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004be0:	2306      	movs	r3, #6
 8004be2:	e021      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004be4:	edd7 7a00 	vldr	s15, [r7]
 8004be8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004c60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d801      	bhi.n	8004bfa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004bf6:	2307      	movs	r3, #7
 8004bf8:	e016      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004bfa:	edd7 7a00 	vldr	s15, [r7]
 8004bfe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004c64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	d801      	bhi.n	8004c10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	e00b      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c10:	edd7 7a00 	vldr	s15, [r7]
 8004c14:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004c68 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c20:	d801      	bhi.n	8004c26 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004c22:	2309      	movs	r3, #9
 8004c24:	e000      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c26:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004c28:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	331c      	adds	r3, #28
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fa6e 	bl	8005114 <lsm6dsl_xl_data_rate_set>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c42:	e000      	b.n	8004c46 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	42500000 	.word	0x42500000
 8004c54:	42d00000 	.word	0x42d00000
 8004c58:	43500000 	.word	0x43500000
 8004c5c:	43d00000 	.word	0x43d00000
 8004c60:	44504000 	.word	0x44504000
 8004c64:	44cf8000 	.word	0x44cf8000
 8004c68:	45502000 	.word	0x45502000

08004c6c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004c78:	edd7 7a00 	vldr	s15, [r7]
 8004c7c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	d801      	bhi.n	8004c8e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e058      	b.n	8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004c8e:	edd7 7a00 	vldr	s15, [r7]
 8004c92:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9e:	d801      	bhi.n	8004ca4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e04d      	b.n	8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004ca4:	edd7 7a00 	vldr	s15, [r7]
 8004ca8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004d54 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb4:	d801      	bhi.n	8004cba <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e042      	b.n	8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004cba:	edd7 7a00 	vldr	s15, [r7]
 8004cbe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cca:	d801      	bhi.n	8004cd0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	e037      	b.n	8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004cd0:	edd7 7a00 	vldr	s15, [r7]
 8004cd4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004d5c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce0:	d801      	bhi.n	8004ce6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004ce2:	2305      	movs	r3, #5
 8004ce4:	e02c      	b.n	8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004ce6:	edd7 7a00 	vldr	s15, [r7]
 8004cea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004d60 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf6:	d801      	bhi.n	8004cfc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004cf8:	2306      	movs	r3, #6
 8004cfa:	e021      	b.n	8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004cfc:	edd7 7a00 	vldr	s15, [r7]
 8004d00:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004d64 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	d801      	bhi.n	8004d12 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004d0e:	2307      	movs	r3, #7
 8004d10:	e016      	b.n	8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d12:	edd7 7a00 	vldr	s15, [r7]
 8004d16:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004d68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	d801      	bhi.n	8004d28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004d24:	2308      	movs	r3, #8
 8004d26:	e00b      	b.n	8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d28:	edd7 7a00 	vldr	s15, [r7]
 8004d2c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004d6c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d801      	bhi.n	8004d3e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004d3a:	2309      	movs	r3, #9
 8004d3c:	e000      	b.n	8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d3e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	42500000 	.word	0x42500000
 8004d58:	42d00000 	.word	0x42d00000
 8004d5c:	43500000 	.word	0x43500000
 8004d60:	43d00000 	.word	0x43d00000
 8004d64:	44504000 	.word	0x44504000
 8004d68:	44cf8000 	.word	0x44cf8000
 8004d6c:	45502000 	.word	0x45502000

08004d70 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004d7c:	edd7 7a00 	vldr	s15, [r7]
 8004d80:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	d801      	bhi.n	8004d92 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e058      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d92:	edd7 7a00 	vldr	s15, [r7]
 8004d96:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	d801      	bhi.n	8004da8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e04d      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004da8:	edd7 7a00 	vldr	s15, [r7]
 8004dac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db8:	d801      	bhi.n	8004dbe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e042      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004dbe:	edd7 7a00 	vldr	s15, [r7]
 8004dc2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004e70 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	d801      	bhi.n	8004dd4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	e037      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004dd4:	edd7 7a00 	vldr	s15, [r7]
 8004dd8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e74 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de4:	d801      	bhi.n	8004dea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004de6:	2305      	movs	r3, #5
 8004de8:	e02c      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004dea:	edd7 7a00 	vldr	s15, [r7]
 8004dee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004e78 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfa:	d801      	bhi.n	8004e00 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004dfc:	2306      	movs	r3, #6
 8004dfe:	e021      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e00:	edd7 7a00 	vldr	s15, [r7]
 8004e04:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004e7c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e10:	d801      	bhi.n	8004e16 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004e12:	2307      	movs	r3, #7
 8004e14:	e016      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e16:	edd7 7a00 	vldr	s15, [r7]
 8004e1a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004e80 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	d801      	bhi.n	8004e2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004e28:	2308      	movs	r3, #8
 8004e2a:	e00b      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e2c:	edd7 7a00 	vldr	s15, [r7]
 8004e30:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	d801      	bhi.n	8004e42 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004e3e:	2309      	movs	r3, #9
 8004e40:	e000      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e42:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004e44:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	331c      	adds	r3, #28
 8004e4a:	7bfa      	ldrb	r2, [r7, #15]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fa56 	bl	8005300 <lsm6dsl_gy_data_rate_set>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5e:	e000      	b.n	8004e62 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	42500000 	.word	0x42500000
 8004e70:	42d00000 	.word	0x42d00000
 8004e74:	43500000 	.word	0x43500000
 8004e78:	43d00000 	.word	0x43d00000
 8004e7c:	44504000 	.word	0x44504000
 8004e80:	44cf8000 	.word	0x44cf8000
 8004e84:	45502000 	.word	0x45502000

08004e88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004e94:	edd7 7a00 	vldr	s15, [r7]
 8004e98:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea4:	d801      	bhi.n	8004eaa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e058      	b.n	8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004eaa:	edd7 7a00 	vldr	s15, [r7]
 8004eae:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eba:	d801      	bhi.n	8004ec0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e04d      	b.n	8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ec0:	edd7 7a00 	vldr	s15, [r7]
 8004ec4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004f70 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed0:	d801      	bhi.n	8004ed6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e042      	b.n	8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ed6:	edd7 7a00 	vldr	s15, [r7]
 8004eda:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee6:	d801      	bhi.n	8004eec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	e037      	b.n	8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004eec:	edd7 7a00 	vldr	s15, [r7]
 8004ef0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004f78 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efc:	d801      	bhi.n	8004f02 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004efe:	2305      	movs	r3, #5
 8004f00:	e02c      	b.n	8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f02:	edd7 7a00 	vldr	s15, [r7]
 8004f06:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004f7c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f12:	d801      	bhi.n	8004f18 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004f14:	2306      	movs	r3, #6
 8004f16:	e021      	b.n	8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f18:	edd7 7a00 	vldr	s15, [r7]
 8004f1c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004f80 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f28:	d801      	bhi.n	8004f2e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004f2a:	2307      	movs	r3, #7
 8004f2c:	e016      	b.n	8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f2e:	edd7 7a00 	vldr	s15, [r7]
 8004f32:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004f84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3e:	d801      	bhi.n	8004f44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004f40:	2308      	movs	r3, #8
 8004f42:	e00b      	b.n	8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f44:	edd7 7a00 	vldr	s15, [r7]
 8004f48:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004f88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f54:	d801      	bhi.n	8004f5a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004f56:	2309      	movs	r3, #9
 8004f58:	e000      	b.n	8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f5a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	42500000 	.word	0x42500000
 8004f74:	42d00000 	.word	0x42d00000
 8004f78:	43500000 	.word	0x43500000
 8004f7c:	43d00000 	.word	0x43d00000
 8004f80:	44504000 	.word	0x44504000
 8004f84:	44cf8000 	.word	0x44cf8000
 8004f88:	45502000 	.word	0x45502000

08004f8c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f8c:	b590      	push	{r4, r7, lr}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	461a      	mov	r2, r3
 8004f98:	460b      	mov	r3, r1
 8004f9a:	72fb      	strb	r3, [r7, #11]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	695c      	ldr	r4, [r3, #20]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	7b1b      	ldrb	r3, [r3, #12]
 8004fac:	b298      	uxth	r0, r3
 8004fae:	7afb      	ldrb	r3, [r7, #11]
 8004fb0:	b299      	uxth	r1, r3
 8004fb2:	893b      	ldrh	r3, [r7, #8]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	47a0      	blx	r4
 8004fb8:	4603      	mov	r3, r0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd90      	pop	{r4, r7, pc}

08004fc2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004fc2:	b590      	push	{r4, r7, lr}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	460b      	mov	r3, r1
 8004fd0:	72fb      	strb	r3, [r7, #11]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	691c      	ldr	r4, [r3, #16]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	7b1b      	ldrb	r3, [r3, #12]
 8004fe2:	b298      	uxth	r0, r3
 8004fe4:	7afb      	ldrb	r3, [r7, #11]
 8004fe6:	b299      	uxth	r1, r3
 8004fe8:	893b      	ldrh	r3, [r7, #8]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	47a0      	blx	r4
 8004fee:	4603      	mov	r3, r0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd90      	pop	{r4, r7, pc}

08004ff8 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	461a      	mov	r2, r3
 8005004:	460b      	mov	r3, r1
 8005006:	72fb      	strb	r3, [r7, #11]
 8005008:	4613      	mov	r3, r2
 800500a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685c      	ldr	r4, [r3, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6898      	ldr	r0, [r3, #8]
 8005014:	893b      	ldrh	r3, [r7, #8]
 8005016:	7af9      	ldrb	r1, [r7, #11]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	47a0      	blx	r4
 800501c:	6178      	str	r0, [r7, #20]
  return ret;
 800501e:	697b      	ldr	r3, [r7, #20]
}
 8005020:	4618      	mov	r0, r3
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	bd90      	pop	{r4, r7, pc}

08005028 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	461a      	mov	r2, r3
 8005034:	460b      	mov	r3, r1
 8005036:	72fb      	strb	r3, [r7, #11]
 8005038:	4613      	mov	r3, r2
 800503a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681c      	ldr	r4, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6898      	ldr	r0, [r3, #8]
 8005044:	893b      	ldrh	r3, [r7, #8]
 8005046:	7af9      	ldrb	r1, [r7, #11]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	47a0      	blx	r4
 800504c:	6178      	str	r0, [r7, #20]
  return ret;
 800504e:	697b      	ldr	r3, [r7, #20]
}
 8005050:	4618      	mov	r0, r3
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	bd90      	pop	{r4, r7, pc}

08005058 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005064:	f107 0208 	add.w	r2, r7, #8
 8005068:	2301      	movs	r3, #1
 800506a:	2110      	movs	r1, #16
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ffc3 	bl	8004ff8 <lsm6dsl_read_reg>
 8005072:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	b2da      	uxtb	r2, r3
 8005082:	7a3b      	ldrb	r3, [r7, #8]
 8005084:	f362 0383 	bfi	r3, r2, #2, #2
 8005088:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800508a:	f107 0208 	add.w	r2, r7, #8
 800508e:	2301      	movs	r3, #1
 8005090:	2110      	movs	r1, #16
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff ffc8 	bl	8005028 <lsm6dsl_write_reg>
 8005098:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80050ae:	f107 0208 	add.w	r2, r7, #8
 80050b2:	2301      	movs	r3, #1
 80050b4:	2110      	movs	r1, #16
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff ff9e 	bl	8004ff8 <lsm6dsl_read_reg>
 80050bc:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 80050be:	7a3b      	ldrb	r3, [r7, #8]
 80050c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d81a      	bhi.n	8005100 <lsm6dsl_xl_full_scale_get+0x5c>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <lsm6dsl_xl_full_scale_get+0x2c>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050e9 	.word	0x080050e9
 80050d8:	080050f1 	.word	0x080050f1
 80050dc:	080050f9 	.word	0x080050f9
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
      break;
 80050e6:	e00f      	b.n	8005108 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
      break;
 80050ee:	e00b      	b.n	8005108 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2202      	movs	r2, #2
 80050f4:	701a      	strb	r2, [r3, #0]
      break;
 80050f6:	e007      	b.n	8005108 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2203      	movs	r2, #3
 80050fc:	701a      	strb	r2, [r3, #0]
      break;
 80050fe:	e003      	b.n	8005108 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2204      	movs	r2, #4
 8005104:	701a      	strb	r2, [r3, #0]
      break;
 8005106:	bf00      	nop
  }

  return ret;
 8005108:	68fb      	ldr	r3, [r7, #12]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop

08005114 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005120:	f107 0208 	add.w	r2, r7, #8
 8005124:	2301      	movs	r3, #1
 8005126:	2110      	movs	r1, #16
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff ff65 	bl	8004ff8 <lsm6dsl_read_reg>
 800512e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10f      	bne.n	8005156 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	b2da      	uxtb	r2, r3
 800513e:	7a3b      	ldrb	r3, [r7, #8]
 8005140:	f362 1307 	bfi	r3, r2, #4, #4
 8005144:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005146:	f107 0208 	add.w	r2, r7, #8
 800514a:	2301      	movs	r3, #1
 800514c:	2110      	movs	r1, #16
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff ff6a 	bl	8005028 <lsm6dsl_write_reg>
 8005154:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8005156:	68fb      	ldr	r3, [r7, #12]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800516a:	f107 0208 	add.w	r2, r7, #8
 800516e:	2301      	movs	r3, #1
 8005170:	2110      	movs	r1, #16
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ff40 	bl	8004ff8 <lsm6dsl_read_reg>
 8005178:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800517a:	7a3b      	ldrb	r3, [r7, #8]
 800517c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b0b      	cmp	r3, #11
 8005184:	d84a      	bhi.n	800521c <lsm6dsl_xl_data_rate_get+0xbc>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <lsm6dsl_xl_data_rate_get+0x2c>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051bd 	.word	0x080051bd
 8005190:	080051c5 	.word	0x080051c5
 8005194:	080051cd 	.word	0x080051cd
 8005198:	080051d5 	.word	0x080051d5
 800519c:	080051dd 	.word	0x080051dd
 80051a0:	080051e5 	.word	0x080051e5
 80051a4:	080051ed 	.word	0x080051ed
 80051a8:	080051f5 	.word	0x080051f5
 80051ac:	080051fd 	.word	0x080051fd
 80051b0:	08005205 	.word	0x08005205
 80051b4:	0800520d 	.word	0x0800520d
 80051b8:	08005215 	.word	0x08005215
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
      break;
 80051c2:	e02f      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
      break;
 80051ca:	e02b      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2202      	movs	r2, #2
 80051d0:	701a      	strb	r2, [r3, #0]
      break;
 80051d2:	e027      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2203      	movs	r2, #3
 80051d8:	701a      	strb	r2, [r3, #0]
      break;
 80051da:	e023      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2204      	movs	r2, #4
 80051e0:	701a      	strb	r2, [r3, #0]
      break;
 80051e2:	e01f      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2205      	movs	r2, #5
 80051e8:	701a      	strb	r2, [r3, #0]
      break;
 80051ea:	e01b      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2206      	movs	r2, #6
 80051f0:	701a      	strb	r2, [r3, #0]
      break;
 80051f2:	e017      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2207      	movs	r2, #7
 80051f8:	701a      	strb	r2, [r3, #0]
      break;
 80051fa:	e013      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2208      	movs	r2, #8
 8005200:	701a      	strb	r2, [r3, #0]
      break;
 8005202:	e00f      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2209      	movs	r2, #9
 8005208:	701a      	strb	r2, [r3, #0]
      break;
 800520a:	e00b      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	220a      	movs	r2, #10
 8005210:	701a      	strb	r2, [r3, #0]
      break;
 8005212:	e007      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	220b      	movs	r2, #11
 8005218:	701a      	strb	r2, [r3, #0]
      break;
 800521a:	e003      	b.n	8005224 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	220c      	movs	r2, #12
 8005220:	701a      	strb	r2, [r3, #0]
      break;
 8005222:	bf00      	nop
  }

  return ret;
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop

08005230 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800523c:	f107 0208 	add.w	r2, r7, #8
 8005240:	2301      	movs	r3, #1
 8005242:	2111      	movs	r1, #17
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fed7 	bl	8004ff8 <lsm6dsl_read_reg>
 800524a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10f      	bne.n	8005272 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	b2da      	uxtb	r2, r3
 800525a:	7a3b      	ldrb	r3, [r7, #8]
 800525c:	f362 0343 	bfi	r3, r2, #1, #3
 8005260:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005262:	f107 0208 	add.w	r2, r7, #8
 8005266:	2301      	movs	r3, #1
 8005268:	2111      	movs	r1, #17
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fedc 	bl	8005028 <lsm6dsl_write_reg>
 8005270:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005272:	68fb      	ldr	r3, [r7, #12]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005286:	f107 0208 	add.w	r2, r7, #8
 800528a:	2301      	movs	r3, #1
 800528c:	2111      	movs	r1, #17
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff feb2 	bl	8004ff8 <lsm6dsl_read_reg>
 8005294:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8005296:	7a3b      	ldrb	r3, [r7, #8]
 8005298:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d824      	bhi.n	80052ec <lsm6dsl_gy_full_scale_get+0x70>
 80052a2:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <lsm6dsl_gy_full_scale_get+0x2c>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052c5 	.word	0x080052c5
 80052ac:	080052cd 	.word	0x080052cd
 80052b0:	080052d5 	.word	0x080052d5
 80052b4:	080052ed 	.word	0x080052ed
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052ed 	.word	0x080052ed
 80052c0:	080052e5 	.word	0x080052e5
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
      break;
 80052ca:	e013      	b.n	80052f4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
      break;
 80052d2:	e00f      	b.n	80052f4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2202      	movs	r2, #2
 80052d8:	701a      	strb	r2, [r3, #0]
      break;
 80052da:	e00b      	b.n	80052f4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2204      	movs	r2, #4
 80052e0:	701a      	strb	r2, [r3, #0]
      break;
 80052e2:	e007      	b.n	80052f4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2206      	movs	r2, #6
 80052e8:	701a      	strb	r2, [r3, #0]
      break;
 80052ea:	e003      	b.n	80052f4 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2207      	movs	r2, #7
 80052f0:	701a      	strb	r2, [r3, #0]
      break;
 80052f2:	bf00      	nop
  }

  return ret;
 80052f4:	68fb      	ldr	r3, [r7, #12]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop

08005300 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800530c:	f107 0208 	add.w	r2, r7, #8
 8005310:	2301      	movs	r3, #1
 8005312:	2111      	movs	r1, #17
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff fe6f 	bl	8004ff8 <lsm6dsl_read_reg>
 800531a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10f      	bne.n	8005342 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	b2da      	uxtb	r2, r3
 800532a:	7a3b      	ldrb	r3, [r7, #8]
 800532c:	f362 1307 	bfi	r3, r2, #4, #4
 8005330:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005332:	f107 0208 	add.w	r2, r7, #8
 8005336:	2301      	movs	r3, #1
 8005338:	2111      	movs	r1, #17
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff fe74 	bl	8005028 <lsm6dsl_write_reg>
 8005340:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005356:	f107 0208 	add.w	r2, r7, #8
 800535a:	2301      	movs	r3, #1
 800535c:	2111      	movs	r1, #17
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fe4a 	bl	8004ff8 <lsm6dsl_read_reg>
 8005364:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8005366:	7a3b      	ldrb	r3, [r7, #8]
 8005368:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b0a      	cmp	r3, #10
 8005370:	d844      	bhi.n	80053fc <lsm6dsl_gy_data_rate_get+0xb0>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	080053a5 	.word	0x080053a5
 800537c:	080053ad 	.word	0x080053ad
 8005380:	080053b5 	.word	0x080053b5
 8005384:	080053bd 	.word	0x080053bd
 8005388:	080053c5 	.word	0x080053c5
 800538c:	080053cd 	.word	0x080053cd
 8005390:	080053d5 	.word	0x080053d5
 8005394:	080053dd 	.word	0x080053dd
 8005398:	080053e5 	.word	0x080053e5
 800539c:	080053ed 	.word	0x080053ed
 80053a0:	080053f5 	.word	0x080053f5
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
      break;
 80053aa:	e02b      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
      break;
 80053b2:	e027      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2202      	movs	r2, #2
 80053b8:	701a      	strb	r2, [r3, #0]
      break;
 80053ba:	e023      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2203      	movs	r2, #3
 80053c0:	701a      	strb	r2, [r3, #0]
      break;
 80053c2:	e01f      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2204      	movs	r2, #4
 80053c8:	701a      	strb	r2, [r3, #0]
      break;
 80053ca:	e01b      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2205      	movs	r2, #5
 80053d0:	701a      	strb	r2, [r3, #0]
      break;
 80053d2:	e017      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2206      	movs	r2, #6
 80053d8:	701a      	strb	r2, [r3, #0]
      break;
 80053da:	e013      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2207      	movs	r2, #7
 80053e0:	701a      	strb	r2, [r3, #0]
      break;
 80053e2:	e00f      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2208      	movs	r2, #8
 80053e8:	701a      	strb	r2, [r3, #0]
      break;
 80053ea:	e00b      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2209      	movs	r2, #9
 80053f0:	701a      	strb	r2, [r3, #0]
      break;
 80053f2:	e007      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	220a      	movs	r2, #10
 80053f8:	701a      	strb	r2, [r3, #0]
      break;
 80053fa:	e003      	b.n	8005404 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	220b      	movs	r2, #11
 8005400:	701a      	strb	r2, [r3, #0]
      break;
 8005402:	bf00      	nop
  }

  return ret;
 8005404:	68fb      	ldr	r3, [r7, #12]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop

08005410 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800541c:	f107 0208 	add.w	r2, r7, #8
 8005420:	2301      	movs	r3, #1
 8005422:	2112      	movs	r1, #18
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff fde7 	bl	8004ff8 <lsm6dsl_read_reg>
 800542a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	b2da      	uxtb	r2, r3
 800543a:	7a3b      	ldrb	r3, [r7, #8]
 800543c:	f362 1386 	bfi	r3, r2, #6, #1
 8005440:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005442:	f107 0208 	add.w	r2, r7, #8
 8005446:	2301      	movs	r3, #1
 8005448:	2112      	movs	r1, #18
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff fdec 	bl	8005028 <lsm6dsl_write_reg>
 8005450:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005452:	68fb      	ldr	r3, [r7, #12]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005466:	f107 020c 	add.w	r2, r7, #12
 800546a:	2306      	movs	r3, #6
 800546c:	2122      	movs	r1, #34	; 0x22
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fdc2 	bl	8004ff8 <lsm6dsl_read_reg>
 8005474:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005476:	7b7b      	ldrb	r3, [r7, #13]
 8005478:	b21a      	sxth	r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005484:	b29b      	uxth	r3, r3
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	b29a      	uxth	r2, r3
 800548a:	7b3b      	ldrb	r3, [r7, #12]
 800548c:	b29b      	uxth	r3, r3
 800548e:	4413      	add	r3, r2
 8005490:	b29b      	uxth	r3, r3
 8005492:	b21a      	sxth	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005498:	7bfa      	ldrb	r2, [r7, #15]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	3302      	adds	r3, #2
 800549e:	b212      	sxth	r2, r2
 80054a0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	3302      	adds	r3, #2
 80054a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	7bbb      	ldrb	r3, [r7, #14]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	4413      	add	r3, r2
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	3302      	adds	r3, #2
 80054bc:	b212      	sxth	r2, r2
 80054be:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80054c0:	7c7a      	ldrb	r2, [r7, #17]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	3304      	adds	r3, #4
 80054c6:	b212      	sxth	r2, r2
 80054c8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	3304      	adds	r3, #4
 80054ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	7c3b      	ldrb	r3, [r7, #16]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	4413      	add	r3, r2
 80054de:	b29a      	uxth	r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	3304      	adds	r3, #4
 80054e4:	b212      	sxth	r2, r2
 80054e6:	801a      	strh	r2, [r3, #0]
  return ret;
 80054e8:	697b      	ldr	r3, [r7, #20]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80054fc:	f107 020c 	add.w	r2, r7, #12
 8005500:	2306      	movs	r3, #6
 8005502:	2128      	movs	r1, #40	; 0x28
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff fd77 	bl	8004ff8 <lsm6dsl_read_reg>
 800550a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800550c:	7b7b      	ldrb	r3, [r7, #13]
 800550e:	b21a      	sxth	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800551a:	b29b      	uxth	r3, r3
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	b29a      	uxth	r2, r3
 8005520:	7b3b      	ldrb	r3, [r7, #12]
 8005522:	b29b      	uxth	r3, r3
 8005524:	4413      	add	r3, r2
 8005526:	b29b      	uxth	r3, r3
 8005528:	b21a      	sxth	r2, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800552e:	7bfa      	ldrb	r2, [r7, #15]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	3302      	adds	r3, #2
 8005534:	b212      	sxth	r2, r2
 8005536:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	3302      	adds	r3, #2
 800553c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005540:	b29b      	uxth	r3, r3
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	b29a      	uxth	r2, r3
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	b29b      	uxth	r3, r3
 800554a:	4413      	add	r3, r2
 800554c:	b29a      	uxth	r2, r3
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	3302      	adds	r3, #2
 8005552:	b212      	sxth	r2, r2
 8005554:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005556:	7c7a      	ldrb	r2, [r7, #17]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	3304      	adds	r3, #4
 800555c:	b212      	sxth	r2, r2
 800555e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	3304      	adds	r3, #4
 8005564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005568:	b29b      	uxth	r3, r3
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	b29a      	uxth	r2, r3
 800556e:	7c3b      	ldrb	r3, [r7, #16]
 8005570:	b29b      	uxth	r3, r3
 8005572:	4413      	add	r3, r2
 8005574:	b29a      	uxth	r2, r3
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	3304      	adds	r3, #4
 800557a:	b212      	sxth	r2, r2
 800557c:	801a      	strh	r2, [r3, #0]
  return ret;
 800557e:	697b      	ldr	r3, [r7, #20]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005592:	2301      	movs	r3, #1
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	210f      	movs	r1, #15
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fd2d 	bl	8004ff8 <lsm6dsl_read_reg>
 800559e:	60f8      	str	r0, [r7, #12]
  return ret;
 80055a0:	68fb      	ldr	r3, [r7, #12]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80055b6:	f107 0208 	add.w	r2, r7, #8
 80055ba:	2301      	movs	r3, #1
 80055bc:	2112      	movs	r1, #18
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff fd1a 	bl	8004ff8 <lsm6dsl_read_reg>
 80055c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10f      	bne.n	80055ec <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	7a3b      	ldrb	r3, [r7, #8]
 80055d6:	f362 0382 	bfi	r3, r2, #2, #1
 80055da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80055dc:	f107 0208 	add.w	r2, r7, #8
 80055e0:	2301      	movs	r3, #1
 80055e2:	2112      	movs	r1, #18
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff fd1f 	bl	8005028 <lsm6dsl_write_reg>
 80055ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055ec:	68fb      	ldr	r3, [r7, #12]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	460b      	mov	r3, r1
 8005600:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005602:	f107 0208 	add.w	r2, r7, #8
 8005606:	2301      	movs	r3, #1
 8005608:	210a      	movs	r1, #10
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff fcf4 	bl	8004ff8 <lsm6dsl_read_reg>
 8005610:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10f      	bne.n	8005638 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	b2da      	uxtb	r2, r3
 8005620:	7a3b      	ldrb	r3, [r7, #8]
 8005622:	f362 0302 	bfi	r3, r2, #0, #3
 8005626:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005628:	f107 0208 	add.w	r2, r7, #8
 800562c:	2301      	movs	r3, #1
 800562e:	210a      	movs	r1, #10
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff fcf9 	bl	8005028 <lsm6dsl_write_reg>
 8005636:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005638:	68fb      	ldr	r3, [r7, #12]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08e      	sub	sp, #56	; 0x38
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005652:	2301      	movs	r3, #1
 8005654:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d036      	beq.n	80056ce <IKS01A2_MOTION_SENSOR_Init+0x8a>
 8005660:	2b01      	cmp	r3, #1
 8005662:	d302      	bcc.n	800566a <IKS01A2_MOTION_SENSOR_Init+0x26>
 8005664:	2b02      	cmp	r3, #2
 8005666:	d064      	beq.n	8005732 <IKS01A2_MOTION_SENSOR_Init+0xee>
 8005668:	e095      	b.n	8005796 <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800566a:	6838      	ldr	r0, [r7, #0]
 800566c:	f000 fa32 	bl	8005ad4 <LSM6DSL_0_Probe>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	e0cc      	b.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800567c:	4a68      	ldr	r2, [pc, #416]	; (8005820 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4967      	ldr	r1, [pc, #412]	; (8005824 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800568e:	f107 010c 	add.w	r1, r7, #12
 8005692:	4610      	mov	r0, r2
 8005694:	4798      	blx	r3
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800569c:	f06f 0306 	mvn.w	r3, #6
 80056a0:	e0b9      	b.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80056a2:	7b3b      	ldrb	r3, [r7, #12]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d103      	bne.n	80056b0 <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	f043 0302 	orr.w	r3, r3, #2
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80056b0:	7b7b      	ldrb	r3, [r7, #13]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d103      	bne.n	80056be <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d16c      	bne.n	800579e <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	f043 0304 	orr.w	r3, r3, #4
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80056cc:	e067      	b.n	800579e <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 80056ce:	6838      	ldr	r0, [r7, #0]
 80056d0:	f000 fabc 	bl	8005c4c <LSM303AGR_ACC_0_Probe>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 80056da:	f04f 33ff 	mov.w	r3, #4294967295
 80056de:	e09a      	b.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80056e0:	4a4f      	ldr	r2, [pc, #316]	; (8005820 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	494e      	ldr	r1, [pc, #312]	; (8005824 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056f2:	f107 010c 	add.w	r1, r7, #12
 80056f6:	4610      	mov	r0, r2
 80056f8:	4798      	blx	r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005700:	f06f 0306 	mvn.w	r3, #6
 8005704:	e087      	b.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8005706:	7b3b      	ldrb	r3, [r7, #12]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d103      	bne.n	8005714 <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	f043 0302 	orr.w	r3, r3, #2
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005714:	7b7b      	ldrb	r3, [r7, #13]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d103      	bne.n	8005722 <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005722:	7bbb      	ldrb	r3, [r7, #14]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d13c      	bne.n	80057a2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	f043 0304 	orr.w	r3, r3, #4
 800572e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005730:	e037      	b.n	80057a2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005732:	6838      	ldr	r0, [r7, #0]
 8005734:	f000 fb2e 	bl	8005d94 <LSM303AGR_MAG_0_Probe>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 800573e:	f04f 33ff 	mov.w	r3, #4294967295
 8005742:	e068      	b.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005744:	4a36      	ldr	r2, [pc, #216]	; (8005820 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	4935      	ldr	r1, [pc, #212]	; (8005824 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005756:	f107 010c 	add.w	r1, r7, #12
 800575a:	4610      	mov	r0, r2
 800575c:	4798      	blx	r3
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005764:	f06f 0306 	mvn.w	r3, #6
 8005768:	e055      	b.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 800576a:	7b3b      	ldrb	r3, [r7, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d103      	bne.n	8005778 <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	f043 0302 	orr.w	r3, r3, #2
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005778:	7b7b      	ldrb	r3, [r7, #13]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d103      	bne.n	8005786 <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005786:	7bbb      	ldrb	r3, [r7, #14]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d10c      	bne.n	80057a6 <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	f043 0304 	orr.w	r3, r3, #4
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005794:	e007      	b.n	80057a6 <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005796:	f06f 0301 	mvn.w	r3, #1
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800579c:	e004      	b.n	80057a8 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 800579e:	bf00      	nop
 80057a0:	e002      	b.n	80057a8 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 80057a2:	bf00      	nop
 80057a4:	e000      	b.n	80057a8 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 80057a6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	e031      	b.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b6:	e02a      	b.n	800580e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	4013      	ands	r3, r2
 80057be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d11e      	bne.n	8005802 <IKS01A2_MOTION_SENSOR_Init+0x1be>
 80057c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	4013      	ands	r3, r2
 80057ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d118      	bne.n	8005802 <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80057d0:	4a15      	ldr	r2, [pc, #84]	; (8005828 <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057d8:	4814      	ldr	r0, [pc, #80]	; (800582c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4413      	add	r3, r2
 80057e2:	440b      	add	r3, r1
 80057e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	490e      	ldr	r1, [pc, #56]	; (8005824 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80057f2:	4610      	mov	r0, r2
 80057f4:	4798      	blx	r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80057fc:	f06f 0304 	mvn.w	r3, #4
 8005800:	e009      	b.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	3301      	adds	r3, #1
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	2b02      	cmp	r3, #2
 8005812:	d9d1      	bls.n	80057b8 <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005816:	4618      	mov	r0, r3
 8005818:	3738      	adds	r7, #56	; 0x38
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20001068 	.word	0x20001068
 8005824:	200027ac 	.word	0x200027ac
 8005828:	20000adc 	.word	0x20000adc
 800582c:	20001044 	.word	0x20001044

08005830 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d903      	bls.n	8005848 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005840:	f06f 0301 	mvn.w	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e028      	b.n	800589a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005848:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	4013      	ands	r3, r2
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d11c      	bne.n	8005894 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800585a:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005862:	4812      	ldr	r0, [pc, #72]	; (80058ac <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4413      	add	r3, r2
 800586c:	440b      	add	r3, r1
 800586e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	490e      	ldr	r1, [pc, #56]	; (80058b0 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005886:	f06f 0304 	mvn.w	r3, #4
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e005      	b.n	800589a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	e002      	b.n	800589a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005894:	f06f 0301 	mvn.w	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800589a:	68fb      	ldr	r3, [r7, #12]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20001074 	.word	0x20001074
 80058a8:	20000adc 	.word	0x20000adc
 80058ac:	20001044 	.word	0x20001044
 80058b0:	200027ac 	.word	0x200027ac

080058b4 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d903      	bls.n	80058ce <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058c6:	f06f 0301 	mvn.w	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e029      	b.n	8005922 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80058ce:	4a17      	ldr	r2, [pc, #92]	; (800592c <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d11d      	bne.n	800591c <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80058e0:	4a13      	ldr	r2, [pc, #76]	; (8005930 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058e8:	4812      	ldr	r0, [pc, #72]	; (8005934 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4613      	mov	r3, r2
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	4413      	add	r3, r2
 80058f2:	440b      	add	r3, r1
 80058f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	490f      	ldr	r1, [pc, #60]	; (8005938 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	4610      	mov	r0, r2
 8005906:	4798      	blx	r3
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800590e:	f06f 0304 	mvn.w	r3, #4
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	e005      	b.n	8005922 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e002      	b.n	8005922 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800591c:	f06f 0301 	mvn.w	r3, #1
 8005920:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005922:	697b      	ldr	r3, [r7, #20]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20001074 	.word	0x20001074
 8005930:	20000adc 	.word	0x20000adc
 8005934:	20001044 	.word	0x20001044
 8005938:	200027ac 	.word	0x200027ac

0800593c <IKS01A2_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d903      	bls.n	8005956 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800594e:	f06f 0301 	mvn.w	r3, #1
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e029      	b.n	80059aa <IKS01A2_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005956:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x78>)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4013      	ands	r3, r2
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	429a      	cmp	r2, r3
 8005966:	d11d      	bne.n	80059a4 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance],
 8005968:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x7c>)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005970:	4812      	ldr	r0, [pc, #72]	; (80059bc <IKS01A2_MOTION_SENSOR_GetSensitivity+0x80>)
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	4413      	add	r3, r2
 800597a:	440b      	add	r3, r1
 800597c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	490f      	ldr	r1, [pc, #60]	; (80059c0 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x84>)
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	4610      	mov	r0, r2
 800598e:	4798      	blx	r3
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <IKS01A2_MOTION_SENSOR_GetSensitivity+0x62>
          Sensitivity) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005996:	f06f 0304 	mvn.w	r3, #4
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e005      	b.n	80059aa <IKS01A2_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e002      	b.n	80059aa <IKS01A2_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80059a4:	f06f 0301 	mvn.w	r3, #1
 80059a8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80059aa:	697b      	ldr	r3, [r7, #20]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20001074 	.word	0x20001074
 80059b8:	20000adc 	.word	0x20000adc
 80059bc:	20001044 	.word	0x20001044
 80059c0:	200027ac 	.word	0x200027ac

080059c4 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr pointer to Output Data Rate read value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d903      	bls.n	80059de <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80059d6:	f06f 0301 	mvn.w	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e029      	b.n	8005a32 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80059de:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x78>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4013      	ands	r3, r2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d11d      	bne.n	8005a2c <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059f8:	4812      	ldr	r0, [pc, #72]	; (8005a44 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x80>)
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4613      	mov	r3, r2
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	4413      	add	r3, r2
 8005a02:	440b      	add	r3, r1
 8005a04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	490f      	ldr	r1, [pc, #60]	; (8005a48 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4610      	mov	r0, r2
 8005a16:	4798      	blx	r3
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a1e:	f06f 0304 	mvn.w	r3, #4
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e005      	b.n	8005a32 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	e002      	b.n	8005a32 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005a2c:	f06f 0301 	mvn.w	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005a32:	697b      	ldr	r3, [r7, #20]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20001074 	.word	0x20001074
 8005a40:	20000adc 	.word	0x20000adc
 8005a44:	20001044 	.word	0x20001044
 8005a48:	200027ac 	.word	0x200027ac

08005a4c <IKS01A2_MOTION_SENSOR_GetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale pointer to Fullscale read value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d903      	bls.n	8005a66 <IKS01A2_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a5e:	f06f 0301 	mvn.w	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e029      	b.n	8005aba <IKS01A2_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005a66:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <IKS01A2_MOTION_SENSOR_GetFullScale+0x78>)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d11d      	bne.n	8005ab4 <IKS01A2_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8005a78:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <IKS01A2_MOTION_SENSOR_GetFullScale+0x7c>)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a80:	4812      	ldr	r0, [pc, #72]	; (8005acc <IKS01A2_MOTION_SENSOR_GetFullScale+0x80>)
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4613      	mov	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	490f      	ldr	r1, [pc, #60]	; (8005ad0 <IKS01A2_MOTION_SENSOR_GetFullScale+0x84>)
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4798      	blx	r3
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <IKS01A2_MOTION_SENSOR_GetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005aa6:	f06f 0304 	mvn.w	r3, #4
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e005      	b.n	8005aba <IKS01A2_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e002      	b.n	8005aba <IKS01A2_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005ab4:	f06f 0301 	mvn.w	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005aba:	697b      	ldr	r3, [r7, #20]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20001074 	.word	0x20001074
 8005ac8:	20000adc 	.word	0x20000adc
 8005acc:	20001044 	.word	0x20001044
 8005ad0:	200027ac 	.word	0x200027ac

08005ad4 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b092      	sub	sp, #72	; 0x48
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005ae4:	23d7      	movs	r3, #215	; 0xd7
 8005ae6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005aea:	4b4a      	ldr	r3, [pc, #296]	; (8005c14 <LSM6DSL_0_Probe+0x140>)
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005aee:	4b4a      	ldr	r3, [pc, #296]	; (8005c18 <LSM6DSL_0_Probe+0x144>)
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005af2:	4b4a      	ldr	r3, [pc, #296]	; (8005c1c <LSM6DSL_0_Probe+0x148>)
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005af6:	4b4a      	ldr	r3, [pc, #296]	; (8005c20 <LSM6DSL_0_Probe+0x14c>)
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005afa:	4b4a      	ldr	r3, [pc, #296]	; (8005c24 <LSM6DSL_0_Probe+0x150>)
 8005afc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b02:	4619      	mov	r1, r3
 8005b04:	4848      	ldr	r0, [pc, #288]	; (8005c28 <LSM6DSL_0_Probe+0x154>)
 8005b06:	f7fe fa87 	bl	8004018 <LSM6DSL_RegisterBusIO>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b10:	f06f 0306 	mvn.w	r3, #6
 8005b14:	647b      	str	r3, [r7, #68]	; 0x44
 8005b16:	e077      	b.n	8005c08 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005b18:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4842      	ldr	r0, [pc, #264]	; (8005c28 <LSM6DSL_0_Probe+0x154>)
 8005b20:	f7fe fb70 	bl	8004204 <LSM6DSL_ReadID>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b2a:	f06f 0306 	mvn.w	r3, #6
 8005b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b30:	e06a      	b.n	8005c08 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b36:	2b6a      	cmp	r3, #106	; 0x6a
 8005b38:	d003      	beq.n	8005b42 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b3a:	f06f 0306 	mvn.w	r3, #6
 8005b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b40:	e062      	b.n	8005c08 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	4619      	mov	r1, r3
 8005b48:	4837      	ldr	r0, [pc, #220]	; (8005c28 <LSM6DSL_0_Probe+0x154>)
 8005b4a:	f7fe fb71 	bl	8004230 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005b4e:	7a7b      	ldrb	r3, [r7, #9]
 8005b50:	461a      	mov	r2, r3
 8005b52:	7a3b      	ldrb	r3, [r7, #8]
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	431a      	orrs	r2, r3
 8005b58:	7abb      	ldrb	r3, [r7, #10]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	4a33      	ldr	r2, [pc, #204]	; (8005c2c <LSM6DSL_0_Probe+0x158>)
 8005b60:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005b62:	4b33      	ldr	r3, [pc, #204]	; (8005c30 <LSM6DSL_0_Probe+0x15c>)
 8005b64:	4a30      	ldr	r2, [pc, #192]	; (8005c28 <LSM6DSL_0_Probe+0x154>)
 8005b66:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005b68:	4b32      	ldr	r3, [pc, #200]	; (8005c34 <LSM6DSL_0_Probe+0x160>)
 8005b6a:	4a33      	ldr	r2, [pc, #204]	; (8005c38 <LSM6DSL_0_Probe+0x164>)
 8005b6c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d11d      	bne.n	8005bb0 <LSM6DSL_0_Probe+0xdc>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d018      	beq.n	8005bb0 <LSM6DSL_0_Probe+0xdc>
 8005b7e:	7a7b      	ldrb	r3, [r7, #9]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d115      	bne.n	8005bb0 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005b84:	4b2d      	ldr	r3, [pc, #180]	; (8005c3c <LSM6DSL_0_Probe+0x168>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4a2d      	ldr	r2, [pc, #180]	; (8005c40 <LSM6DSL_0_Probe+0x16c>)
 8005b8a:	492e      	ldr	r1, [pc, #184]	; (8005c44 <LSM6DSL_0_Probe+0x170>)
 8005b8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005b90:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <LSM6DSL_0_Probe+0x160>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a26      	ldr	r2, [pc, #152]	; (8005c30 <LSM6DSL_0_Probe+0x15c>)
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ba4:	f06f 0304 	mvn.w	r3, #4
 8005ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8005baa:	e001      	b.n	8005bb0 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d11d      	bne.n	8005bf2 <LSM6DSL_0_Probe+0x11e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d018      	beq.n	8005bf2 <LSM6DSL_0_Probe+0x11e>
 8005bc0:	7a3b      	ldrb	r3, [r7, #8]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d115      	bne.n	8005bf2 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <LSM6DSL_0_Probe+0x168>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <LSM6DSL_0_Probe+0x16c>)
 8005bcc:	491e      	ldr	r1, [pc, #120]	; (8005c48 <LSM6DSL_0_Probe+0x174>)
 8005bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005bd2:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <LSM6DSL_0_Probe+0x160>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <LSM6DSL_0_Probe+0x15c>)
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4798      	blx	r3
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005be6:	f06f 0304 	mvn.w	r3, #4
 8005bea:	647b      	str	r3, [r7, #68]	; 0x44
 8005bec:	e001      	b.n	8005bf2 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d107      	bne.n	8005c08 <LSM6DSL_0_Probe+0x134>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c02:	f06f 0304 	mvn.w	r3, #4
 8005c06:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3748      	adds	r7, #72	; 0x48
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	08002379 	.word	0x08002379
 8005c18:	080023dd 	.word	0x080023dd
 8005c1c:	08002491 	.word	0x08002491
 8005c20:	0800242d 	.word	0x0800242d
 8005c24:	080024f5 	.word	0x080024f5
 8005c28:	20001080 	.word	0x20001080
 8005c2c:	20001074 	.word	0x20001074
 8005c30:	200027ac 	.word	0x200027ac
 8005c34:	20001068 	.word	0x20001068
 8005c38:	20000a84 	.word	0x20000a84
 8005c3c:	20000adc 	.word	0x20000adc
 8005c40:	20001044 	.word	0x20001044
 8005c44:	20000ab8 	.word	0x20000ab8
 8005c48:	20000a94 	.word	0x20000a94

08005c4c <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b092      	sub	sp, #72	; 0x48
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005c58:	2300      	movs	r3, #0
 8005c5a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005c5c:	2333      	movs	r3, #51	; 0x33
 8005c5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005c62:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <LSM303AGR_ACC_0_Probe+0x114>)
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005c66:	4b3f      	ldr	r3, [pc, #252]	; (8005d64 <LSM303AGR_ACC_0_Probe+0x118>)
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005c6a:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <LSM303AGR_ACC_0_Probe+0x11c>)
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <LSM303AGR_ACC_0_Probe+0x120>)
 8005c70:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005c72:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <LSM303AGR_ACC_0_Probe+0x124>)
 8005c74:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	483d      	ldr	r0, [pc, #244]	; (8005d74 <LSM303AGR_ACC_0_Probe+0x128>)
 8005c7e:	f7fc fe17 	bl	80028b0 <LSM303AGR_ACC_RegisterBusIO>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c88:	f06f 0306 	mvn.w	r3, #6
 8005c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8e:	e062      	b.n	8005d56 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005c90:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005c94:	4619      	mov	r1, r3
 8005c96:	4837      	ldr	r0, [pc, #220]	; (8005d74 <LSM303AGR_ACC_0_Probe+0x128>)
 8005c98:	f7fc fecb 	bl	8002a32 <LSM303AGR_ACC_ReadID>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ca2:	f06f 0306 	mvn.w	r3, #6
 8005ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca8:	e055      	b.n	8005d56 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cae:	2b33      	cmp	r3, #51	; 0x33
 8005cb0:	d003      	beq.n	8005cba <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cb2:	f06f 0306 	mvn.w	r3, #6
 8005cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb8:	e04d      	b.n	8005d56 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005cba:	f107 0308 	add.w	r3, r7, #8
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	482c      	ldr	r0, [pc, #176]	; (8005d74 <LSM303AGR_ACC_0_Probe+0x128>)
 8005cc2:	f7fc fecd 	bl	8002a60 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005cc6:	7a7b      	ldrb	r3, [r7, #9]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	7a3b      	ldrb	r3, [r7, #8]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005cd0:	7abb      	ldrb	r3, [r7, #10]
 8005cd2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <LSM303AGR_ACC_0_Probe+0x12c>)
 8005cd8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005cda:	4b28      	ldr	r3, [pc, #160]	; (8005d7c <LSM303AGR_ACC_0_Probe+0x130>)
 8005cdc:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <LSM303AGR_ACC_0_Probe+0x128>)
 8005cde:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005ce0:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <LSM303AGR_ACC_0_Probe+0x134>)
 8005ce2:	4a28      	ldr	r2, [pc, #160]	; (8005d84 <LSM303AGR_ACC_0_Probe+0x138>)
 8005ce4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d11e      	bne.n	8005d2a <LSM303AGR_ACC_0_Probe+0xde>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d019      	beq.n	8005d2a <LSM303AGR_ACC_0_Probe+0xde>
 8005cf6:	7a3b      	ldrb	r3, [r7, #8]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d116      	bne.n	8005d2a <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005cfc:	4b22      	ldr	r3, [pc, #136]	; (8005d88 <LSM303AGR_ACC_0_Probe+0x13c>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <LSM303AGR_ACC_0_Probe+0x140>)
 8005d02:	3303      	adds	r3, #3
 8005d04:	4922      	ldr	r1, [pc, #136]	; (8005d90 <LSM303AGR_ACC_0_Probe+0x144>)
 8005d06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <LSM303AGR_ACC_0_Probe+0x134>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <LSM303AGR_ACC_0_Probe+0x130>)
 8005d12:	6852      	ldr	r2, [r2, #4]
 8005d14:	4610      	mov	r0, r2
 8005d16:	4798      	blx	r3
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d1e:	f06f 0304 	mvn.w	r3, #4
 8005d22:	647b      	str	r3, [r7, #68]	; 0x44
 8005d24:	e001      	b.n	8005d2a <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d107      	bne.n	8005d40 <LSM303AGR_ACC_0_Probe+0xf4>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d3a:	f06f 0304 	mvn.w	r3, #4
 8005d3e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d107      	bne.n	8005d56 <LSM303AGR_ACC_0_Probe+0x10a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d50:	f06f 0304 	mvn.w	r3, #4
 8005d54:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3748      	adds	r7, #72	; 0x48
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	08002379 	.word	0x08002379
 8005d64:	080023dd 	.word	0x080023dd
 8005d68:	08002491 	.word	0x08002491
 8005d6c:	0800242d 	.word	0x0800242d
 8005d70:	080024f5 	.word	0x080024f5
 8005d74:	200010b0 	.word	0x200010b0
 8005d78:	20001074 	.word	0x20001074
 8005d7c:	200027ac 	.word	0x200027ac
 8005d80:	20001068 	.word	0x20001068
 8005d84:	20000a1c 	.word	0x20000a1c
 8005d88:	20000adc 	.word	0x20000adc
 8005d8c:	20001044 	.word	0x20001044
 8005d90:	20000a2c 	.word	0x20000a2c

08005d94 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b092      	sub	sp, #72	; 0x48
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005da0:	2300      	movs	r3, #0
 8005da2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005da4:	233d      	movs	r3, #61	; 0x3d
 8005da6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005daa:	4b3f      	ldr	r3, [pc, #252]	; (8005ea8 <LSM303AGR_MAG_0_Probe+0x114>)
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005dae:	4b3f      	ldr	r3, [pc, #252]	; (8005eac <LSM303AGR_MAG_0_Probe+0x118>)
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005db2:	4b3f      	ldr	r3, [pc, #252]	; (8005eb0 <LSM303AGR_MAG_0_Probe+0x11c>)
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005db6:	4b3f      	ldr	r3, [pc, #252]	; (8005eb4 <LSM303AGR_MAG_0_Probe+0x120>)
 8005db8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005dba:	4b3f      	ldr	r3, [pc, #252]	; (8005eb8 <LSM303AGR_MAG_0_Probe+0x124>)
 8005dbc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	483d      	ldr	r0, [pc, #244]	; (8005ebc <LSM303AGR_MAG_0_Probe+0x128>)
 8005dc6:	f7fd f937 	bl	8003038 <LSM303AGR_MAG_RegisterBusIO>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dd0:	f06f 0306 	mvn.w	r3, #6
 8005dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd6:	e062      	b.n	8005e9e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005dd8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4837      	ldr	r0, [pc, #220]	; (8005ebc <LSM303AGR_MAG_0_Probe+0x128>)
 8005de0:	f7fd f9e1 	bl	80031a6 <LSM303AGR_MAG_ReadID>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dea:	f06f 0306 	mvn.w	r3, #6
 8005dee:	647b      	str	r3, [r7, #68]	; 0x44
 8005df0:	e055      	b.n	8005e9e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df6:	2b40      	cmp	r3, #64	; 0x40
 8005df8:	d003      	beq.n	8005e02 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dfa:	f06f 0306 	mvn.w	r3, #6
 8005dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005e00:	e04d      	b.n	8005e9e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	4619      	mov	r1, r3
 8005e08:	482c      	ldr	r0, [pc, #176]	; (8005ebc <LSM303AGR_MAG_0_Probe+0x128>)
 8005e0a:	f7fd f9e3 	bl	80031d4 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005e0e:	7a7b      	ldrb	r3, [r7, #9]
 8005e10:	461a      	mov	r2, r3
 8005e12:	7a3b      	ldrb	r3, [r7, #8]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005e18:	7abb      	ldrb	r3, [r7, #10]
 8005e1a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	4a28      	ldr	r2, [pc, #160]	; (8005ec0 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005e20:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005e22:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <LSM303AGR_MAG_0_Probe+0x130>)
 8005e24:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <LSM303AGR_MAG_0_Probe+0x128>)
 8005e26:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8005e28:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <LSM303AGR_MAG_0_Probe+0x134>)
 8005e2a:	4a28      	ldr	r2, [pc, #160]	; (8005ecc <LSM303AGR_MAG_0_Probe+0x138>)
 8005e2c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11e      	bne.n	8005e72 <LSM303AGR_MAG_0_Probe+0xde>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d019      	beq.n	8005e72 <LSM303AGR_MAG_0_Probe+0xde>
 8005e3e:	7abb      	ldrb	r3, [r7, #10]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d116      	bne.n	8005e72 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e44:	4b22      	ldr	r3, [pc, #136]	; (8005ed0 <LSM303AGR_MAG_0_Probe+0x13c>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	4a22      	ldr	r2, [pc, #136]	; (8005ed4 <LSM303AGR_MAG_0_Probe+0x140>)
 8005e4a:	3306      	adds	r3, #6
 8005e4c:	4922      	ldr	r1, [pc, #136]	; (8005ed8 <LSM303AGR_MAG_0_Probe+0x144>)
 8005e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005e52:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <LSM303AGR_MAG_0_Probe+0x134>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1a      	ldr	r2, [pc, #104]	; (8005ec4 <LSM303AGR_MAG_0_Probe+0x130>)
 8005e5a:	6892      	ldr	r2, [r2, #8]
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4798      	blx	r3
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e66:	f06f 0304 	mvn.w	r3, #4
 8005e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6c:	e001      	b.n	8005e72 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d107      	bne.n	8005e88 <LSM303AGR_MAG_0_Probe+0xf4>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e82:	f06f 0304 	mvn.w	r3, #4
 8005e86:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d107      	bne.n	8005e9e <LSM303AGR_MAG_0_Probe+0x10a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e98:	f06f 0304 	mvn.w	r3, #4
 8005e9c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3748      	adds	r7, #72	; 0x48
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	08002379 	.word	0x08002379
 8005eac:	080023dd 	.word	0x080023dd
 8005eb0:	08002491 	.word	0x08002491
 8005eb4:	0800242d 	.word	0x0800242d
 8005eb8:	080024f5 	.word	0x080024f5
 8005ebc:	200010dc 	.word	0x200010dc
 8005ec0:	20001074 	.word	0x20001074
 8005ec4:	200027ac 	.word	0x200027ac
 8005ec8:	20001068 	.word	0x20001068
 8005ecc:	20000a50 	.word	0x20000a50
 8005ed0:	20000adc 	.word	0x20000adc
 8005ed4:	20001044 	.word	0x20001044
 8005ed8:	20000a60 	.word	0x20000a60

08005edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <HAL_Init+0x40>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a0d      	ldr	r2, [pc, #52]	; (8005f1c <HAL_Init+0x40>)
 8005ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005eec:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <HAL_Init+0x40>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <HAL_Init+0x40>)
 8005ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ef8:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <HAL_Init+0x40>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a07      	ldr	r2, [pc, #28]	; (8005f1c <HAL_Init+0x40>)
 8005efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f04:	2003      	movs	r0, #3
 8005f06:	f000 f94d 	bl	80061a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f000 f808 	bl	8005f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f10:	f7fc f9b4 	bl	800227c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40023c00 	.word	0x40023c00

08005f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f28:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <HAL_InitTick+0x54>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <HAL_InitTick+0x58>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	4619      	mov	r1, r3
 8005f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f965 	bl	800620e <HAL_SYSTICK_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e00e      	b.n	8005f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b0f      	cmp	r3, #15
 8005f52:	d80a      	bhi.n	8005f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f54:	2200      	movs	r2, #0
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	f000 f92d 	bl	80061ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f60:	4a06      	ldr	r2, [pc, #24]	; (8005f7c <HAL_InitTick+0x5c>)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e000      	b.n	8005f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20000a18 	.word	0x20000a18
 8005f78:	20000af4 	.word	0x20000af4
 8005f7c:	20000af0 	.word	0x20000af0

08005f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_IncTick+0x20>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <HAL_IncTick+0x24>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4413      	add	r3, r2
 8005f90:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <HAL_IncTick+0x24>)
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000af4 	.word	0x20000af4
 8005fa4:	200027b8 	.word	0x200027b8

08005fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  return uwTick;
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <HAL_GetTick+0x14>)
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	200027b8 	.word	0x200027b8

08005fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fc8:	f7ff ffee 	bl	8005fa8 <HAL_GetTick>
 8005fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d005      	beq.n	8005fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_Delay+0x40>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fe6:	bf00      	nop
 8005fe8:	f7ff ffde 	bl	8005fa8 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d8f7      	bhi.n	8005fe8 <HAL_Delay+0x28>
  {
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000af4 	.word	0x20000af4

08006004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <__NVIC_SetPriorityGrouping+0x44>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006020:	4013      	ands	r3, r2
 8006022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800602c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006036:	4a04      	ldr	r2, [pc, #16]	; (8006048 <__NVIC_SetPriorityGrouping+0x44>)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	60d3      	str	r3, [r2, #12]
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	e000ed00 	.word	0xe000ed00

0800604c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006050:	4b04      	ldr	r3, [pc, #16]	; (8006064 <__NVIC_GetPriorityGrouping+0x18>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	0a1b      	lsrs	r3, r3, #8
 8006056:	f003 0307 	and.w	r3, r3, #7
}
 800605a:	4618      	mov	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	e000ed00 	.word	0xe000ed00

08006068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006076:	2b00      	cmp	r3, #0
 8006078:	db0b      	blt.n	8006092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	f003 021f 	and.w	r2, r3, #31
 8006080:	4907      	ldr	r1, [pc, #28]	; (80060a0 <__NVIC_EnableIRQ+0x38>)
 8006082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	2001      	movs	r0, #1
 800608a:	fa00 f202 	lsl.w	r2, r0, r2
 800608e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	e000e100 	.word	0xe000e100

080060a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	6039      	str	r1, [r7, #0]
 80060ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	db0a      	blt.n	80060ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	490c      	ldr	r1, [pc, #48]	; (80060f0 <__NVIC_SetPriority+0x4c>)
 80060be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c2:	0112      	lsls	r2, r2, #4
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	440b      	add	r3, r1
 80060c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060cc:	e00a      	b.n	80060e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	4908      	ldr	r1, [pc, #32]	; (80060f4 <__NVIC_SetPriority+0x50>)
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	3b04      	subs	r3, #4
 80060dc:	0112      	lsls	r2, r2, #4
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	440b      	add	r3, r1
 80060e2:	761a      	strb	r2, [r3, #24]
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	e000e100 	.word	0xe000e100
 80060f4:	e000ed00 	.word	0xe000ed00

080060f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b089      	sub	sp, #36	; 0x24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f1c3 0307 	rsb	r3, r3, #7
 8006112:	2b04      	cmp	r3, #4
 8006114:	bf28      	it	cs
 8006116:	2304      	movcs	r3, #4
 8006118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	3304      	adds	r3, #4
 800611e:	2b06      	cmp	r3, #6
 8006120:	d902      	bls.n	8006128 <NVIC_EncodePriority+0x30>
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3b03      	subs	r3, #3
 8006126:	e000      	b.n	800612a <NVIC_EncodePriority+0x32>
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43da      	mvns	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	401a      	ands	r2, r3
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006140:	f04f 31ff 	mov.w	r1, #4294967295
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	fa01 f303 	lsl.w	r3, r1, r3
 800614a:	43d9      	mvns	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006150:	4313      	orrs	r3, r2
         );
}
 8006152:	4618      	mov	r0, r3
 8006154:	3724      	adds	r7, #36	; 0x24
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3b01      	subs	r3, #1
 800616c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006170:	d301      	bcc.n	8006176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006172:	2301      	movs	r3, #1
 8006174:	e00f      	b.n	8006196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006176:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <SysTick_Config+0x40>)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3b01      	subs	r3, #1
 800617c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800617e:	210f      	movs	r1, #15
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	f7ff ff8e 	bl	80060a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <SysTick_Config+0x40>)
 800618a:	2200      	movs	r2, #0
 800618c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800618e:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <SysTick_Config+0x40>)
 8006190:	2207      	movs	r2, #7
 8006192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	e000e010 	.word	0xe000e010

080061a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ff29 	bl	8006004 <__NVIC_SetPriorityGrouping>
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	4603      	mov	r3, r0
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061cc:	f7ff ff3e 	bl	800604c <__NVIC_GetPriorityGrouping>
 80061d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	6978      	ldr	r0, [r7, #20]
 80061d8:	f7ff ff8e 	bl	80060f8 <NVIC_EncodePriority>
 80061dc:	4602      	mov	r2, r0
 80061de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061e2:	4611      	mov	r1, r2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff ff5d 	bl	80060a4 <__NVIC_SetPriority>
}
 80061ea:	bf00      	nop
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	4603      	mov	r3, r0
 80061fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff ff31 	bl	8006068 <__NVIC_EnableIRQ>
}
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff ffa2 	bl	8006160 <SysTick_Config>
 800621c:	4603      	mov	r3, r0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e00e      	b.n	8006256 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	795b      	ldrb	r3, [r3, #5]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d105      	bne.n	800624e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fb fb51 	bl	80018f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d004      	beq.n	800627c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2280      	movs	r2, #128	; 0x80
 8006276:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e00c      	b.n	8006296 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2205      	movs	r2, #5
 8006280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0201 	bic.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b089      	sub	sp, #36	; 0x24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ba:	2300      	movs	r3, #0
 80062bc:	61fb      	str	r3, [r7, #28]
 80062be:	e159      	b.n	8006574 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062c0:	2201      	movs	r2, #1
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4013      	ands	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	429a      	cmp	r2, r3
 80062da:	f040 8148 	bne.w	800656e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d00b      	beq.n	80062fe <HAL_GPIO_Init+0x5a>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d007      	beq.n	80062fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062f2:	2b11      	cmp	r3, #17
 80062f4:	d003      	beq.n	80062fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b12      	cmp	r3, #18
 80062fc:	d130      	bne.n	8006360 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	2203      	movs	r2, #3
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	43db      	mvns	r3, r3
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	4013      	ands	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006334:	2201      	movs	r2, #1
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	43db      	mvns	r3, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4013      	ands	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f003 0201 	and.w	r2, r3, #1
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	2203      	movs	r2, #3
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	4313      	orrs	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d003      	beq.n	80063a0 <HAL_GPIO_Init+0xfc>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b12      	cmp	r3, #18
 800639e:	d123      	bne.n	80063e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	08da      	lsrs	r2, r3, #3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3208      	adds	r2, #8
 80063a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	220f      	movs	r2, #15
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	43db      	mvns	r3, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4013      	ands	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	08da      	lsrs	r2, r3, #3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3208      	adds	r2, #8
 80063e2:	69b9      	ldr	r1, [r7, #24]
 80063e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	2203      	movs	r2, #3
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	43db      	mvns	r3, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4013      	ands	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f003 0203 	and.w	r2, r3, #3
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4313      	orrs	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80a2 	beq.w	800656e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	4b56      	ldr	r3, [pc, #344]	; (8006588 <HAL_GPIO_Init+0x2e4>)
 8006430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006432:	4a55      	ldr	r2, [pc, #340]	; (8006588 <HAL_GPIO_Init+0x2e4>)
 8006434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006438:	6453      	str	r3, [r2, #68]	; 0x44
 800643a:	4b53      	ldr	r3, [pc, #332]	; (8006588 <HAL_GPIO_Init+0x2e4>)
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006446:	4a51      	ldr	r2, [pc, #324]	; (800658c <HAL_GPIO_Init+0x2e8>)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	089b      	lsrs	r3, r3, #2
 800644c:	3302      	adds	r3, #2
 800644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	220f      	movs	r2, #15
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43db      	mvns	r3, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4013      	ands	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a48      	ldr	r2, [pc, #288]	; (8006590 <HAL_GPIO_Init+0x2ec>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d019      	beq.n	80064a6 <HAL_GPIO_Init+0x202>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a47      	ldr	r2, [pc, #284]	; (8006594 <HAL_GPIO_Init+0x2f0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_GPIO_Init+0x1fe>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a46      	ldr	r2, [pc, #280]	; (8006598 <HAL_GPIO_Init+0x2f4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00d      	beq.n	800649e <HAL_GPIO_Init+0x1fa>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a45      	ldr	r2, [pc, #276]	; (800659c <HAL_GPIO_Init+0x2f8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d007      	beq.n	800649a <HAL_GPIO_Init+0x1f6>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a44      	ldr	r2, [pc, #272]	; (80065a0 <HAL_GPIO_Init+0x2fc>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <HAL_GPIO_Init+0x1f2>
 8006492:	2304      	movs	r3, #4
 8006494:	e008      	b.n	80064a8 <HAL_GPIO_Init+0x204>
 8006496:	2307      	movs	r3, #7
 8006498:	e006      	b.n	80064a8 <HAL_GPIO_Init+0x204>
 800649a:	2303      	movs	r3, #3
 800649c:	e004      	b.n	80064a8 <HAL_GPIO_Init+0x204>
 800649e:	2302      	movs	r3, #2
 80064a0:	e002      	b.n	80064a8 <HAL_GPIO_Init+0x204>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <HAL_GPIO_Init+0x204>
 80064a6:	2300      	movs	r3, #0
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	f002 0203 	and.w	r2, r2, #3
 80064ae:	0092      	lsls	r2, r2, #2
 80064b0:	4093      	lsls	r3, r2
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064b8:	4934      	ldr	r1, [pc, #208]	; (800658c <HAL_GPIO_Init+0x2e8>)
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	089b      	lsrs	r3, r3, #2
 80064be:	3302      	adds	r3, #2
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064c6:	4b37      	ldr	r3, [pc, #220]	; (80065a4 <HAL_GPIO_Init+0x300>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	43db      	mvns	r3, r3
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	4013      	ands	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064ea:	4a2e      	ldr	r2, [pc, #184]	; (80065a4 <HAL_GPIO_Init+0x300>)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80064f0:	4b2c      	ldr	r3, [pc, #176]	; (80065a4 <HAL_GPIO_Init+0x300>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	43db      	mvns	r3, r3
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	4013      	ands	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006514:	4a23      	ldr	r2, [pc, #140]	; (80065a4 <HAL_GPIO_Init+0x300>)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800651a:	4b22      	ldr	r3, [pc, #136]	; (80065a4 <HAL_GPIO_Init+0x300>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	43db      	mvns	r3, r3
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4013      	ands	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800653e:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <HAL_GPIO_Init+0x300>)
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006544:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <HAL_GPIO_Init+0x300>)
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	43db      	mvns	r3, r3
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4013      	ands	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006568:	4a0e      	ldr	r2, [pc, #56]	; (80065a4 <HAL_GPIO_Init+0x300>)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	3301      	adds	r3, #1
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2b0f      	cmp	r3, #15
 8006578:	f67f aea2 	bls.w	80062c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800657c:	bf00      	nop
 800657e:	3724      	adds	r7, #36	; 0x24
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	40023800 	.word	0x40023800
 800658c:	40013800 	.word	0x40013800
 8006590:	40020000 	.word	0x40020000
 8006594:	40020400 	.word	0x40020400
 8006598:	40020800 	.word	0x40020800
 800659c:	40020c00 	.word	0x40020c00
 80065a0:	40021000 	.word	0x40021000
 80065a4:	40013c00 	.word	0x40013c00

080065a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e0bb      	b.n	800673c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065c4:	2201      	movs	r2, #1
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4013      	ands	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	429a      	cmp	r2, r3
 80065dc:	f040 80ab 	bne.w	8006736 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80065e0:	4a5b      	ldr	r2, [pc, #364]	; (8006750 <HAL_GPIO_DeInit+0x1a8>)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	089b      	lsrs	r3, r3, #2
 80065e6:	3302      	adds	r3, #2
 80065e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	220f      	movs	r2, #15
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4013      	ands	r3, r2
 8006600:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a53      	ldr	r2, [pc, #332]	; (8006754 <HAL_GPIO_DeInit+0x1ac>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d019      	beq.n	800663e <HAL_GPIO_DeInit+0x96>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a52      	ldr	r2, [pc, #328]	; (8006758 <HAL_GPIO_DeInit+0x1b0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d013      	beq.n	800663a <HAL_GPIO_DeInit+0x92>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a51      	ldr	r2, [pc, #324]	; (800675c <HAL_GPIO_DeInit+0x1b4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00d      	beq.n	8006636 <HAL_GPIO_DeInit+0x8e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a50      	ldr	r2, [pc, #320]	; (8006760 <HAL_GPIO_DeInit+0x1b8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d007      	beq.n	8006632 <HAL_GPIO_DeInit+0x8a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a4f      	ldr	r2, [pc, #316]	; (8006764 <HAL_GPIO_DeInit+0x1bc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d101      	bne.n	800662e <HAL_GPIO_DeInit+0x86>
 800662a:	2304      	movs	r3, #4
 800662c:	e008      	b.n	8006640 <HAL_GPIO_DeInit+0x98>
 800662e:	2307      	movs	r3, #7
 8006630:	e006      	b.n	8006640 <HAL_GPIO_DeInit+0x98>
 8006632:	2303      	movs	r3, #3
 8006634:	e004      	b.n	8006640 <HAL_GPIO_DeInit+0x98>
 8006636:	2302      	movs	r3, #2
 8006638:	e002      	b.n	8006640 <HAL_GPIO_DeInit+0x98>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <HAL_GPIO_DeInit+0x98>
 800663e:	2300      	movs	r3, #0
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	f002 0203 	and.w	r2, r2, #3
 8006646:	0092      	lsls	r2, r2, #2
 8006648:	4093      	lsls	r3, r2
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	429a      	cmp	r2, r3
 800664e:	d132      	bne.n	80066b6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006650:	4b45      	ldr	r3, [pc, #276]	; (8006768 <HAL_GPIO_DeInit+0x1c0>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	43db      	mvns	r3, r3
 8006658:	4943      	ldr	r1, [pc, #268]	; (8006768 <HAL_GPIO_DeInit+0x1c0>)
 800665a:	4013      	ands	r3, r2
 800665c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800665e:	4b42      	ldr	r3, [pc, #264]	; (8006768 <HAL_GPIO_DeInit+0x1c0>)
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	43db      	mvns	r3, r3
 8006666:	4940      	ldr	r1, [pc, #256]	; (8006768 <HAL_GPIO_DeInit+0x1c0>)
 8006668:	4013      	ands	r3, r2
 800666a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800666c:	4b3e      	ldr	r3, [pc, #248]	; (8006768 <HAL_GPIO_DeInit+0x1c0>)
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	43db      	mvns	r3, r3
 8006674:	493c      	ldr	r1, [pc, #240]	; (8006768 <HAL_GPIO_DeInit+0x1c0>)
 8006676:	4013      	ands	r3, r2
 8006678:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800667a:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <HAL_GPIO_DeInit+0x1c0>)
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	43db      	mvns	r3, r3
 8006682:	4939      	ldr	r1, [pc, #228]	; (8006768 <HAL_GPIO_DeInit+0x1c0>)
 8006684:	4013      	ands	r3, r2
 8006686:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	220f      	movs	r2, #15
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006698:	4a2d      	ldr	r2, [pc, #180]	; (8006750 <HAL_GPIO_DeInit+0x1a8>)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	089b      	lsrs	r3, r3, #2
 800669e:	3302      	adds	r3, #2
 80066a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	43da      	mvns	r2, r3
 80066a8:	4829      	ldr	r0, [pc, #164]	; (8006750 <HAL_GPIO_DeInit+0x1a8>)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	089b      	lsrs	r3, r3, #2
 80066ae:	400a      	ands	r2, r1
 80066b0:	3302      	adds	r3, #2
 80066b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	2103      	movs	r1, #3
 80066c0:	fa01 f303 	lsl.w	r3, r1, r3
 80066c4:	43db      	mvns	r3, r3
 80066c6:	401a      	ands	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	08da      	lsrs	r2, r3, #3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3208      	adds	r2, #8
 80066d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	220f      	movs	r2, #15
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	43db      	mvns	r3, r3
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	08d2      	lsrs	r2, r2, #3
 80066ec:	4019      	ands	r1, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3208      	adds	r2, #8
 80066f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	2103      	movs	r1, #3
 8006700:	fa01 f303 	lsl.w	r3, r1, r3
 8006704:	43db      	mvns	r3, r3
 8006706:	401a      	ands	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	2101      	movs	r1, #1
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	fa01 f303 	lsl.w	r3, r1, r3
 8006718:	43db      	mvns	r3, r3
 800671a:	401a      	ands	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	2103      	movs	r1, #3
 800672a:	fa01 f303 	lsl.w	r3, r1, r3
 800672e:	43db      	mvns	r3, r3
 8006730:	401a      	ands	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	3301      	adds	r3, #1
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b0f      	cmp	r3, #15
 8006740:	f67f af40 	bls.w	80065c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40013800 	.word	0x40013800
 8006754:	40020000 	.word	0x40020000
 8006758:	40020400 	.word	0x40020400
 800675c:	40020800 	.word	0x40020800
 8006760:	40020c00 	.word	0x40020c00
 8006764:	40021000 	.word	0x40021000
 8006768:	40013c00 	.word	0x40013c00

0800676c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	807b      	strh	r3, [r7, #2]
 8006778:	4613      	mov	r3, r2
 800677a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800677c:	787b      	ldrb	r3, [r7, #1]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006782:	887a      	ldrh	r2, [r7, #2]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006788:	e003      	b.n	8006792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800678a:	887b      	ldrh	r3, [r7, #2]
 800678c:	041a      	lsls	r2, r3, #16
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	619a      	str	r2, [r3, #24]
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695a      	ldr	r2, [r3, #20]
 80067ae:	887b      	ldrh	r3, [r7, #2]
 80067b0:	401a      	ands	r2, r3
 80067b2:	887b      	ldrh	r3, [r7, #2]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d104      	bne.n	80067c2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067b8:	887b      	ldrh	r3, [r7, #2]
 80067ba:	041a      	lsls	r2, r3, #16
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80067c0:	e002      	b.n	80067c8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80067c2:	887a      	ldrh	r2, [r7, #2]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	619a      	str	r2, [r3, #24]
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d006      	beq.n	80067f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ea:	4a05      	ldr	r2, [pc, #20]	; (8006800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fb fc6e 	bl	80020d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40013c00 	.word	0x40013c00

08006804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e11f      	b.n	8006a56 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f951 	bl	8006ad2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2224      	movs	r2, #36	; 0x24
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0201 	bic.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006868:	f001 fc18 	bl	800809c <HAL_RCC_GetPCLK1Freq>
 800686c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4a7b      	ldr	r2, [pc, #492]	; (8006a60 <HAL_I2C_Init+0x25c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d807      	bhi.n	8006888 <HAL_I2C_Init+0x84>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4a7a      	ldr	r2, [pc, #488]	; (8006a64 <HAL_I2C_Init+0x260>)
 800687c:	4293      	cmp	r3, r2
 800687e:	bf94      	ite	ls
 8006880:	2301      	movls	r3, #1
 8006882:	2300      	movhi	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e006      	b.n	8006896 <HAL_I2C_Init+0x92>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a77      	ldr	r2, [pc, #476]	; (8006a68 <HAL_I2C_Init+0x264>)
 800688c:	4293      	cmp	r3, r2
 800688e:	bf94      	ite	ls
 8006890:	2301      	movls	r3, #1
 8006892:	2300      	movhi	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e0db      	b.n	8006a56 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4a72      	ldr	r2, [pc, #456]	; (8006a6c <HAL_I2C_Init+0x268>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	0c9b      	lsrs	r3, r3, #18
 80068a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4a64      	ldr	r2, [pc, #400]	; (8006a60 <HAL_I2C_Init+0x25c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d802      	bhi.n	80068d8 <HAL_I2C_Init+0xd4>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	3301      	adds	r3, #1
 80068d6:	e009      	b.n	80068ec <HAL_I2C_Init+0xe8>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	4a63      	ldr	r2, [pc, #396]	; (8006a70 <HAL_I2C_Init+0x26c>)
 80068e4:	fba2 2303 	umull	r2, r3, r2, r3
 80068e8:	099b      	lsrs	r3, r3, #6
 80068ea:	3301      	adds	r3, #1
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	4956      	ldr	r1, [pc, #344]	; (8006a60 <HAL_I2C_Init+0x25c>)
 8006908:	428b      	cmp	r3, r1
 800690a:	d80d      	bhi.n	8006928 <HAL_I2C_Init+0x124>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	1e59      	subs	r1, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	fbb1 f3f3 	udiv	r3, r1, r3
 800691a:	3301      	adds	r3, #1
 800691c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006920:	2b04      	cmp	r3, #4
 8006922:	bf38      	it	cc
 8006924:	2304      	movcc	r3, #4
 8006926:	e04f      	b.n	80069c8 <HAL_I2C_Init+0x1c4>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d111      	bne.n	8006954 <HAL_I2C_Init+0x150>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	1e58      	subs	r0, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6859      	ldr	r1, [r3, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	440b      	add	r3, r1
 800693e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006942:	3301      	adds	r3, #1
 8006944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006948:	2b00      	cmp	r3, #0
 800694a:	bf0c      	ite	eq
 800694c:	2301      	moveq	r3, #1
 800694e:	2300      	movne	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	e012      	b.n	800697a <HAL_I2C_Init+0x176>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	1e58      	subs	r0, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6859      	ldr	r1, [r3, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	0099      	lsls	r1, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	fbb0 f3f3 	udiv	r3, r0, r3
 800696a:	3301      	adds	r3, #1
 800696c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006970:	2b00      	cmp	r3, #0
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_I2C_Init+0x17e>
 800697e:	2301      	movs	r3, #1
 8006980:	e022      	b.n	80069c8 <HAL_I2C_Init+0x1c4>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10e      	bne.n	80069a8 <HAL_I2C_Init+0x1a4>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	1e58      	subs	r0, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6859      	ldr	r1, [r3, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	440b      	add	r3, r1
 8006998:	fbb0 f3f3 	udiv	r3, r0, r3
 800699c:	3301      	adds	r3, #1
 800699e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a6:	e00f      	b.n	80069c8 <HAL_I2C_Init+0x1c4>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	1e58      	subs	r0, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6859      	ldr	r1, [r3, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	0099      	lsls	r1, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80069be:	3301      	adds	r3, #1
 80069c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	6809      	ldr	r1, [r1, #0]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6911      	ldr	r1, [r2, #16]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68d2      	ldr	r2, [r2, #12]
 8006a02:	4311      	orrs	r1, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	000186a0 	.word	0x000186a0
 8006a64:	001e847f 	.word	0x001e847f
 8006a68:	003d08ff 	.word	0x003d08ff
 8006a6c:	431bde83 	.word	0x431bde83
 8006a70:	10624dd3 	.word	0x10624dd3

08006a74 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e021      	b.n	8006aca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2224      	movs	r2, #36	; 0x24
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0201 	bic.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f821 	bl	8006ae6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	4608      	mov	r0, r1
 8006b06:	4611      	mov	r1, r2
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	817b      	strh	r3, [r7, #10]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	813b      	strh	r3, [r7, #8]
 8006b12:	4613      	mov	r3, r2
 8006b14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b16:	f7ff fa47 	bl	8005fa8 <HAL_GetTick>
 8006b1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	f040 80d9 	bne.w	8006cdc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	2319      	movs	r3, #25
 8006b30:	2201      	movs	r2, #1
 8006b32:	496d      	ldr	r1, [pc, #436]	; (8006ce8 <HAL_I2C_Mem_Write+0x1ec>)
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fc99 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
 8006b42:	e0cc      	b.n	8006cde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <HAL_I2C_Mem_Write+0x56>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e0c5      	b.n	8006cde <HAL_I2C_Mem_Write+0x1e2>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d007      	beq.n	8006b78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2221      	movs	r2, #33	; 0x21
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2240      	movs	r2, #64	; 0x40
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a3a      	ldr	r2, [r7, #32]
 8006ba2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4a4d      	ldr	r2, [pc, #308]	; (8006cec <HAL_I2C_Mem_Write+0x1f0>)
 8006bb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bba:	88f8      	ldrh	r0, [r7, #6]
 8006bbc:	893a      	ldrh	r2, [r7, #8]
 8006bbe:	8979      	ldrh	r1, [r7, #10]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	9301      	str	r3, [sp, #4]
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	4603      	mov	r3, r0
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fad0 	bl	8007170 <I2C_RequestMemoryWrite>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d052      	beq.n	8006c7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e081      	b.n	8006cde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fd1a 	bl	8007618 <I2C_WaitOnTXEFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00d      	beq.n	8006c06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d107      	bne.n	8006c02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e06b      	b.n	8006cde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	781a      	ldrb	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d11b      	bne.n	8006c7c <HAL_I2C_Mem_Write+0x180>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d017      	beq.n	8006c7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	781a      	ldrb	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1aa      	bne.n	8006bda <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fd06 	bl	800769a <I2C_WaitOnBTFFlagUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00d      	beq.n	8006cb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d107      	bne.n	8006cac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006caa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e016      	b.n	8006cde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e000      	b.n	8006cde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006cdc:	2302      	movs	r3, #2
  }
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	00100002 	.word	0x00100002
 8006cec:	ffff0000 	.word	0xffff0000

08006cf0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08c      	sub	sp, #48	; 0x30
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4603      	mov	r3, r0
 8006d00:	817b      	strh	r3, [r7, #10]
 8006d02:	460b      	mov	r3, r1
 8006d04:	813b      	strh	r3, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d0a:	f7ff f94d 	bl	8005fa8 <HAL_GetTick>
 8006d0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	f040 8208 	bne.w	800712e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	2319      	movs	r3, #25
 8006d24:	2201      	movs	r2, #1
 8006d26:	497b      	ldr	r1, [pc, #492]	; (8006f14 <HAL_I2C_Mem_Read+0x224>)
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fb9f 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
 8006d36:	e1fb      	b.n	8007130 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_I2C_Mem_Read+0x56>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e1f4      	b.n	8007130 <HAL_I2C_Mem_Read+0x440>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d007      	beq.n	8006d6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2222      	movs	r2, #34	; 0x22
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2240      	movs	r2, #64	; 0x40
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4a5b      	ldr	r2, [pc, #364]	; (8006f18 <HAL_I2C_Mem_Read+0x228>)
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dae:	88f8      	ldrh	r0, [r7, #6]
 8006db0:	893a      	ldrh	r2, [r7, #8]
 8006db2:	8979      	ldrh	r1, [r7, #10]
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 fa6c 	bl	800729c <I2C_RequestMemoryRead>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e1b0      	b.n	8007130 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d113      	bne.n	8006dfe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	623b      	str	r3, [r7, #32]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	623b      	str	r3, [r7, #32]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	623b      	str	r3, [r7, #32]
 8006dea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e184      	b.n	8007108 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d11b      	bne.n	8006e3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e16:	2300      	movs	r3, #0
 8006e18:	61fb      	str	r3, [r7, #28]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e164      	b.n	8007108 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d11b      	bne.n	8006e7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e66:	2300      	movs	r3, #0
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	e144      	b.n	8007108 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e94:	e138      	b.n	8007108 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	f200 80f1 	bhi.w	8007082 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d123      	bne.n	8006ef0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 fc35 	bl	800771c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e139      	b.n	8007130 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eee:	e10b      	b.n	8007108 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d14e      	bne.n	8006f96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	2200      	movs	r2, #0
 8006f00:	4906      	ldr	r1, [pc, #24]	; (8006f1c <HAL_I2C_Mem_Read+0x22c>)
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 fab2 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d008      	beq.n	8006f20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e10e      	b.n	8007130 <HAL_I2C_Mem_Read+0x440>
 8006f12:	bf00      	nop
 8006f14:	00100002 	.word	0x00100002
 8006f18:	ffff0000 	.word	0xffff0000
 8006f1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f94:	e0b8      	b.n	8007108 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4966      	ldr	r1, [pc, #408]	; (8007138 <HAL_I2C_Mem_Read+0x448>)
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 fa63 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0bf      	b.n	8007130 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691a      	ldr	r2, [r3, #16]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	494f      	ldr	r1, [pc, #316]	; (8007138 <HAL_I2C_Mem_Read+0x448>)
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fa35 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e091      	b.n	8007130 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800701a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007080:	e042      	b.n	8007108 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007084:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 fb48 	bl	800771c <I2C_WaitOnRXNEFlagUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e04c      	b.n	8007130 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d118      	bne.n	8007108 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710c:	2b00      	cmp	r3, #0
 800710e:	f47f aec2 	bne.w	8006e96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2220      	movs	r2, #32
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	e000      	b.n	8007130 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800712e:	2302      	movs	r3, #2
  }
}
 8007130:	4618      	mov	r0, r3
 8007132:	3728      	adds	r7, #40	; 0x28
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	00010004 	.word	0x00010004

0800713c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714a:	b2db      	uxtb	r3, r3
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	4608      	mov	r0, r1
 800717a:	4611      	mov	r1, r2
 800717c:	461a      	mov	r2, r3
 800717e:	4603      	mov	r3, r0
 8007180:	817b      	strh	r3, [r7, #10]
 8007182:	460b      	mov	r3, r1
 8007184:	813b      	strh	r3, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007198:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 f960 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c0:	d103      	bne.n	80071ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e05f      	b.n	800728e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071ce:	897b      	ldrh	r3, [r7, #10]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	6a3a      	ldr	r2, [r7, #32]
 80071e2:	492d      	ldr	r1, [pc, #180]	; (8007298 <I2C_RequestMemoryWrite+0x128>)
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f998 	bl	800751a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e04c      	b.n	800728e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f4:	2300      	movs	r3, #0
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800720a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720c:	6a39      	ldr	r1, [r7, #32]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 fa02 	bl	8007618 <I2C_WaitOnTXEFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00d      	beq.n	8007236 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	2b04      	cmp	r3, #4
 8007220:	d107      	bne.n	8007232 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007230:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e02b      	b.n	800728e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d105      	bne.n	8007248 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800723c:	893b      	ldrh	r3, [r7, #8]
 800723e:	b2da      	uxtb	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	611a      	str	r2, [r3, #16]
 8007246:	e021      	b.n	800728c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007248:	893b      	ldrh	r3, [r7, #8]
 800724a:	0a1b      	lsrs	r3, r3, #8
 800724c:	b29b      	uxth	r3, r3
 800724e:	b2da      	uxtb	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007258:	6a39      	ldr	r1, [r7, #32]
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f9dc 	bl	8007618 <I2C_WaitOnTXEFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00d      	beq.n	8007282 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	2b04      	cmp	r3, #4
 800726c:	d107      	bne.n	800727e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800727c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e005      	b.n	800728e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007282:	893b      	ldrh	r3, [r7, #8]
 8007284:	b2da      	uxtb	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	00010002 	.word	0x00010002

0800729c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	817b      	strh	r3, [r7, #10]
 80072ae:	460b      	mov	r3, r1
 80072b0:	813b      	strh	r3, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	2200      	movs	r2, #0
 80072de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f8c2 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00d      	beq.n	800730a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fc:	d103      	bne.n	8007306 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007304:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e0aa      	b.n	8007460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800730a:	897b      	ldrh	r3, [r7, #10]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007318:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	4952      	ldr	r1, [pc, #328]	; (8007468 <I2C_RequestMemoryRead+0x1cc>)
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f8fa 	bl	800751a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e097      	b.n	8007460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007348:	6a39      	ldr	r1, [r7, #32]
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 f964 	bl	8007618 <I2C_WaitOnTXEFlagUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00d      	beq.n	8007372 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	2b04      	cmp	r3, #4
 800735c:	d107      	bne.n	800736e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800736c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e076      	b.n	8007460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d105      	bne.n	8007384 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007378:	893b      	ldrh	r3, [r7, #8]
 800737a:	b2da      	uxtb	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	611a      	str	r2, [r3, #16]
 8007382:	e021      	b.n	80073c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007384:	893b      	ldrh	r3, [r7, #8]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	b29b      	uxth	r3, r3
 800738a:	b2da      	uxtb	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007394:	6a39      	ldr	r1, [r7, #32]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 f93e 	bl	8007618 <I2C_WaitOnTXEFlagUntilTimeout>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00d      	beq.n	80073be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d107      	bne.n	80073ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e050      	b.n	8007460 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073be:	893b      	ldrh	r3, [r7, #8]
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ca:	6a39      	ldr	r1, [r7, #32]
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f923 	bl	8007618 <I2C_WaitOnTXEFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00d      	beq.n	80073f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d107      	bne.n	80073f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e035      	b.n	8007460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007402:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	2200      	movs	r2, #0
 800740c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f82b 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00d      	beq.n	8007438 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800742a:	d103      	bne.n	8007434 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e013      	b.n	8007460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007438:	897b      	ldrh	r3, [r7, #10]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	f043 0301 	orr.w	r3, r3, #1
 8007440:	b2da      	uxtb	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	6a3a      	ldr	r2, [r7, #32]
 800744c:	4906      	ldr	r1, [pc, #24]	; (8007468 <I2C_RequestMemoryRead+0x1cc>)
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f863 	bl	800751a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	00010002 	.word	0x00010002

0800746c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800747c:	e025      	b.n	80074ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d021      	beq.n	80074ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007486:	f7fe fd8f 	bl	8005fa8 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d302      	bcc.n	800749c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d116      	bne.n	80074ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f043 0220 	orr.w	r2, r3, #32
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e023      	b.n	8007512 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10d      	bne.n	80074f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	43da      	mvns	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bf0c      	ite	eq
 80074e6:	2301      	moveq	r3, #1
 80074e8:	2300      	movne	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	e00c      	b.n	800750a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	43da      	mvns	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4013      	ands	r3, r2
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bf0c      	ite	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	2300      	movne	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	429a      	cmp	r2, r3
 800750e:	d0b6      	beq.n	800747e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007528:	e051      	b.n	80075ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007538:	d123      	bne.n	8007582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007548:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007552:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f043 0204 	orr.w	r2, r3, #4
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e046      	b.n	8007610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d021      	beq.n	80075ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800758a:	f7fe fd0d 	bl	8005fa8 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d302      	bcc.n	80075a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d116      	bne.n	80075ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	f043 0220 	orr.w	r2, r3, #32
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e020      	b.n	8007610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	0c1b      	lsrs	r3, r3, #16
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10c      	bne.n	80075f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	43da      	mvns	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4013      	ands	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf14      	ite	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	2300      	moveq	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	e00b      	b.n	800760a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	43da      	mvns	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	4013      	ands	r3, r2
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	bf14      	ite	ne
 8007604:	2301      	movne	r3, #1
 8007606:	2300      	moveq	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d18d      	bne.n	800752a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007624:	e02d      	b.n	8007682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f8ce 	bl	80077c8 <I2C_IsAcknowledgeFailed>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e02d      	b.n	8007692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d021      	beq.n	8007682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800763e:	f7fe fcb3 	bl	8005fa8 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	429a      	cmp	r2, r3
 800764c:	d302      	bcc.n	8007654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d116      	bne.n	8007682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	f043 0220 	orr.w	r2, r3, #32
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e007      	b.n	8007692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768c:	2b80      	cmp	r3, #128	; 0x80
 800768e:	d1ca      	bne.n	8007626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076a6:	e02d      	b.n	8007704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f88d 	bl	80077c8 <I2C_IsAcknowledgeFailed>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e02d      	b.n	8007714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076be:	d021      	beq.n	8007704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c0:	f7fe fc72 	bl	8005fa8 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d302      	bcc.n	80076d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d116      	bne.n	8007704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2220      	movs	r2, #32
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	f043 0220 	orr.w	r2, r3, #32
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e007      	b.n	8007714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	f003 0304 	and.w	r3, r3, #4
 800770e:	2b04      	cmp	r3, #4
 8007710:	d1ca      	bne.n	80076a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007728:	e042      	b.n	80077b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b10      	cmp	r3, #16
 8007736:	d119      	bne.n	800776c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f06f 0210 	mvn.w	r2, #16
 8007740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e029      	b.n	80077c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776c:	f7fe fc1c 	bl	8005fa8 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	429a      	cmp	r2, r3
 800777a:	d302      	bcc.n	8007782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d116      	bne.n	80077b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	f043 0220 	orr.w	r2, r3, #32
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e007      	b.n	80077c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d1b5      	bne.n	800772a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077de:	d11b      	bne.n	8007818 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	f043 0204 	orr.w	r2, r3, #4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
	...

08007828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e25b      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d075      	beq.n	8007932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007846:	4ba3      	ldr	r3, [pc, #652]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
 800784e:	2b04      	cmp	r3, #4
 8007850:	d00c      	beq.n	800786c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007852:	4ba0      	ldr	r3, [pc, #640]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800785a:	2b08      	cmp	r3, #8
 800785c:	d112      	bne.n	8007884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800785e:	4b9d      	ldr	r3, [pc, #628]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800786a:	d10b      	bne.n	8007884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786c:	4b99      	ldr	r3, [pc, #612]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d05b      	beq.n	8007930 <HAL_RCC_OscConfig+0x108>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d157      	bne.n	8007930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e236      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800788c:	d106      	bne.n	800789c <HAL_RCC_OscConfig+0x74>
 800788e:	4b91      	ldr	r3, [pc, #580]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a90      	ldr	r2, [pc, #576]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	e01d      	b.n	80078d8 <HAL_RCC_OscConfig+0xb0>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078a4:	d10c      	bne.n	80078c0 <HAL_RCC_OscConfig+0x98>
 80078a6:	4b8b      	ldr	r3, [pc, #556]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a8a      	ldr	r2, [pc, #552]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	4b88      	ldr	r3, [pc, #544]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a87      	ldr	r2, [pc, #540]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e00b      	b.n	80078d8 <HAL_RCC_OscConfig+0xb0>
 80078c0:	4b84      	ldr	r3, [pc, #528]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a83      	ldr	r2, [pc, #524]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	4b81      	ldr	r3, [pc, #516]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a80      	ldr	r2, [pc, #512]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d013      	beq.n	8007908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e0:	f7fe fb62 	bl	8005fa8 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078e8:	f7fe fb5e 	bl	8005fa8 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b64      	cmp	r3, #100	; 0x64
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e1fb      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fa:	4b76      	ldr	r3, [pc, #472]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0f0      	beq.n	80078e8 <HAL_RCC_OscConfig+0xc0>
 8007906:	e014      	b.n	8007932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007908:	f7fe fb4e 	bl	8005fa8 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007910:	f7fe fb4a 	bl	8005fa8 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b64      	cmp	r3, #100	; 0x64
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e1e7      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007922:	4b6c      	ldr	r3, [pc, #432]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0xe8>
 800792e:	e000      	b.n	8007932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d063      	beq.n	8007a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800793e:	4b65      	ldr	r3, [pc, #404]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 030c 	and.w	r3, r3, #12
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800794a:	4b62      	ldr	r3, [pc, #392]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007952:	2b08      	cmp	r3, #8
 8007954:	d11c      	bne.n	8007990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007956:	4b5f      	ldr	r3, [pc, #380]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d116      	bne.n	8007990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007962:	4b5c      	ldr	r3, [pc, #368]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <HAL_RCC_OscConfig+0x152>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d001      	beq.n	800797a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e1bb      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797a:	4b56      	ldr	r3, [pc, #344]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4952      	ldr	r1, [pc, #328]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 800798a:	4313      	orrs	r3, r2
 800798c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800798e:	e03a      	b.n	8007a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d020      	beq.n	80079da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007998:	4b4f      	ldr	r3, [pc, #316]	; (8007ad8 <HAL_RCC_OscConfig+0x2b0>)
 800799a:	2201      	movs	r2, #1
 800799c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799e:	f7fe fb03 	bl	8005fa8 <HAL_GetTick>
 80079a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079a6:	f7fe faff 	bl	8005fa8 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e19c      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b8:	4b46      	ldr	r3, [pc, #280]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0f0      	beq.n	80079a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079c4:	4b43      	ldr	r3, [pc, #268]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	4940      	ldr	r1, [pc, #256]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	600b      	str	r3, [r1, #0]
 80079d8:	e015      	b.n	8007a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079da:	4b3f      	ldr	r3, [pc, #252]	; (8007ad8 <HAL_RCC_OscConfig+0x2b0>)
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e0:	f7fe fae2 	bl	8005fa8 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079e8:	f7fe fade 	bl	8005fa8 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e17b      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079fa:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f0      	bne.n	80079e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0308 	and.w	r3, r3, #8
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d030      	beq.n	8007a74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d016      	beq.n	8007a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a1a:	4b30      	ldr	r3, [pc, #192]	; (8007adc <HAL_RCC_OscConfig+0x2b4>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a20:	f7fe fac2 	bl	8005fa8 <HAL_GetTick>
 8007a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a26:	e008      	b.n	8007a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a28:	f7fe fabe 	bl	8005fa8 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e15b      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a3a:	4b26      	ldr	r3, [pc, #152]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f0      	beq.n	8007a28 <HAL_RCC_OscConfig+0x200>
 8007a46:	e015      	b.n	8007a74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a48:	4b24      	ldr	r3, [pc, #144]	; (8007adc <HAL_RCC_OscConfig+0x2b4>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a4e:	f7fe faab 	bl	8005fa8 <HAL_GetTick>
 8007a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a54:	e008      	b.n	8007a68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a56:	f7fe faa7 	bl	8005fa8 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e144      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a68:	4b1a      	ldr	r3, [pc, #104]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f0      	bne.n	8007a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a0 	beq.w	8007bc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a82:	2300      	movs	r3, #0
 8007a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10f      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a92:	2300      	movs	r3, #0
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	4a0e      	ldr	r2, [pc, #56]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8007aa2:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aaa:	60bb      	str	r3, [r7, #8]
 8007aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ab2:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <HAL_RCC_OscConfig+0x2b8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d121      	bne.n	8007b02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007abe:	4b08      	ldr	r3, [pc, #32]	; (8007ae0 <HAL_RCC_OscConfig+0x2b8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a07      	ldr	r2, [pc, #28]	; (8007ae0 <HAL_RCC_OscConfig+0x2b8>)
 8007ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007aca:	f7fe fa6d 	bl	8005fa8 <HAL_GetTick>
 8007ace:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad0:	e011      	b.n	8007af6 <HAL_RCC_OscConfig+0x2ce>
 8007ad2:	bf00      	nop
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	42470000 	.word	0x42470000
 8007adc:	42470e80 	.word	0x42470e80
 8007ae0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ae4:	f7fe fa60 	bl	8005fa8 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e0fd      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007af6:	4b81      	ldr	r3, [pc, #516]	; (8007cfc <HAL_RCC_OscConfig+0x4d4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f0      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d106      	bne.n	8007b18 <HAL_RCC_OscConfig+0x2f0>
 8007b0a:	4b7d      	ldr	r3, [pc, #500]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0e:	4a7c      	ldr	r2, [pc, #496]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b10:	f043 0301 	orr.w	r3, r3, #1
 8007b14:	6713      	str	r3, [r2, #112]	; 0x70
 8007b16:	e01c      	b.n	8007b52 <HAL_RCC_OscConfig+0x32a>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	2b05      	cmp	r3, #5
 8007b1e:	d10c      	bne.n	8007b3a <HAL_RCC_OscConfig+0x312>
 8007b20:	4b77      	ldr	r3, [pc, #476]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b24:	4a76      	ldr	r2, [pc, #472]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b26:	f043 0304 	orr.w	r3, r3, #4
 8007b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b2c:	4b74      	ldr	r3, [pc, #464]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b30:	4a73      	ldr	r2, [pc, #460]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	6713      	str	r3, [r2, #112]	; 0x70
 8007b38:	e00b      	b.n	8007b52 <HAL_RCC_OscConfig+0x32a>
 8007b3a:	4b71      	ldr	r3, [pc, #452]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	4a70      	ldr	r2, [pc, #448]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	6713      	str	r3, [r2, #112]	; 0x70
 8007b46:	4b6e      	ldr	r3, [pc, #440]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	4a6d      	ldr	r2, [pc, #436]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b4c:	f023 0304 	bic.w	r3, r3, #4
 8007b50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d015      	beq.n	8007b86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b5a:	f7fe fa25 	bl	8005fa8 <HAL_GetTick>
 8007b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b60:	e00a      	b.n	8007b78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b62:	f7fe fa21 	bl	8005fa8 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e0bc      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b78:	4b61      	ldr	r3, [pc, #388]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0ee      	beq.n	8007b62 <HAL_RCC_OscConfig+0x33a>
 8007b84:	e014      	b.n	8007bb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b86:	f7fe fa0f 	bl	8005fa8 <HAL_GetTick>
 8007b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b8c:	e00a      	b.n	8007ba4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b8e:	f7fe fa0b 	bl	8005fa8 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e0a6      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ba4:	4b56      	ldr	r3, [pc, #344]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1ee      	bne.n	8007b8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d105      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bb6:	4b52      	ldr	r3, [pc, #328]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	4a51      	ldr	r2, [pc, #324]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8092 	beq.w	8007cf0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bcc:	4b4c      	ldr	r3, [pc, #304]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 030c 	and.w	r3, r3, #12
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d05c      	beq.n	8007c92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d141      	bne.n	8007c64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be0:	4b48      	ldr	r3, [pc, #288]	; (8007d04 <HAL_RCC_OscConfig+0x4dc>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be6:	f7fe f9df 	bl	8005fa8 <HAL_GetTick>
 8007bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bec:	e008      	b.n	8007c00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bee:	f7fe f9db 	bl	8005fa8 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d901      	bls.n	8007c00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e078      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c00:	4b3f      	ldr	r3, [pc, #252]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1f0      	bne.n	8007bee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69da      	ldr	r2, [r3, #28]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	019b      	lsls	r3, r3, #6
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	3b01      	subs	r3, #1
 8007c26:	041b      	lsls	r3, r3, #16
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	061b      	lsls	r3, r3, #24
 8007c30:	4933      	ldr	r1, [pc, #204]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c36:	4b33      	ldr	r3, [pc, #204]	; (8007d04 <HAL_RCC_OscConfig+0x4dc>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3c:	f7fe f9b4 	bl	8005fa8 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c44:	f7fe f9b0 	bl	8005fa8 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e04d      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c56:	4b2a      	ldr	r3, [pc, #168]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0f0      	beq.n	8007c44 <HAL_RCC_OscConfig+0x41c>
 8007c62:	e045      	b.n	8007cf0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c64:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <HAL_RCC_OscConfig+0x4dc>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c6a:	f7fe f99d 	bl	8005fa8 <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c72:	f7fe f999 	bl	8005fa8 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e036      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c84:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f0      	bne.n	8007c72 <HAL_RCC_OscConfig+0x44a>
 8007c90:	e02e      	b.n	8007cf0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e029      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <HAL_RCC_OscConfig+0x4d8>)
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d11c      	bne.n	8007cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d115      	bne.n	8007cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d10d      	bne.n	8007cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d106      	bne.n	8007cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d001      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40007000 	.word	0x40007000
 8007d00:	40023800 	.word	0x40023800
 8007d04:	42470060 	.word	0x42470060

08007d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e0cc      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d1c:	4b68      	ldr	r3, [pc, #416]	; (8007ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d90c      	bls.n	8007d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d2a:	4b65      	ldr	r3, [pc, #404]	; (8007ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d32:	4b63      	ldr	r3, [pc, #396]	; (8007ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d001      	beq.n	8007d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0b8      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d020      	beq.n	8007d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d5c:	4b59      	ldr	r3, [pc, #356]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	4a58      	ldr	r2, [pc, #352]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d74:	4b53      	ldr	r3, [pc, #332]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	4a52      	ldr	r2, [pc, #328]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d80:	4b50      	ldr	r3, [pc, #320]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	494d      	ldr	r1, [pc, #308]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d044      	beq.n	8007e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d107      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007da6:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d119      	bne.n	8007de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e07f      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d003      	beq.n	8007dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d107      	bne.n	8007dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dc6:	4b3f      	ldr	r3, [pc, #252]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e06f      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dd6:	4b3b      	ldr	r3, [pc, #236]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e067      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007de6:	4b37      	ldr	r3, [pc, #220]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f023 0203 	bic.w	r2, r3, #3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	4934      	ldr	r1, [pc, #208]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007df8:	f7fe f8d6 	bl	8005fa8 <HAL_GetTick>
 8007dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dfe:	e00a      	b.n	8007e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e00:	f7fe f8d2 	bl	8005fa8 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e04f      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e16:	4b2b      	ldr	r3, [pc, #172]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f003 020c 	and.w	r2, r3, #12
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d1eb      	bne.n	8007e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e28:	4b25      	ldr	r3, [pc, #148]	; (8007ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 030f 	and.w	r3, r3, #15
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d20c      	bcs.n	8007e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e36:	4b22      	ldr	r3, [pc, #136]	; (8007ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	b2d2      	uxtb	r2, r2
 8007e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e3e:	4b20      	ldr	r3, [pc, #128]	; (8007ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d001      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e032      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d008      	beq.n	8007e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e5c:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4916      	ldr	r1, [pc, #88]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0308 	and.w	r3, r3, #8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	490e      	ldr	r1, [pc, #56]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e8e:	f000 f821 	bl	8007ed4 <HAL_RCC_GetSysClockFreq>
 8007e92:	4601      	mov	r1, r0
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	091b      	lsrs	r3, r3, #4
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	4a0a      	ldr	r2, [pc, #40]	; (8007ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8007ea0:	5cd3      	ldrb	r3, [r2, r3]
 8007ea2:	fa21 f303 	lsr.w	r3, r1, r3
 8007ea6:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <HAL_RCC_ClockConfig+0x1c4>)
 8007ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe f836 	bl	8005f20 <HAL_InitTick>

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40023c00 	.word	0x40023c00
 8007ec4:	40023800 	.word	0x40023800
 8007ec8:	0800d188 	.word	0x0800d188
 8007ecc:	20000a18 	.word	0x20000a18
 8007ed0:	20000af0 	.word	0x20000af0

08007ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eea:	4b63      	ldr	r3, [pc, #396]	; (8008078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f003 030c 	and.w	r3, r3, #12
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d007      	beq.n	8007f06 <HAL_RCC_GetSysClockFreq+0x32>
 8007ef6:	2b08      	cmp	r3, #8
 8007ef8:	d008      	beq.n	8007f0c <HAL_RCC_GetSysClockFreq+0x38>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f040 80b4 	bne.w	8008068 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f00:	4b5e      	ldr	r3, [pc, #376]	; (800807c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007f02:	60bb      	str	r3, [r7, #8]
       break;
 8007f04:	e0b3      	b.n	800806e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f06:	4b5e      	ldr	r3, [pc, #376]	; (8008080 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007f08:	60bb      	str	r3, [r7, #8]
      break;
 8007f0a:	e0b0      	b.n	800806e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f0c:	4b5a      	ldr	r3, [pc, #360]	; (8008078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f16:	4b58      	ldr	r3, [pc, #352]	; (8008078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d04a      	beq.n	8007fb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f22:	4b55      	ldr	r3, [pc, #340]	; (8008078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	099b      	lsrs	r3, r3, #6
 8007f28:	f04f 0400 	mov.w	r4, #0
 8007f2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f30:	f04f 0200 	mov.w	r2, #0
 8007f34:	ea03 0501 	and.w	r5, r3, r1
 8007f38:	ea04 0602 	and.w	r6, r4, r2
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	4632      	mov	r2, r6
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	f04f 0400 	mov.w	r4, #0
 8007f48:	0154      	lsls	r4, r2, #5
 8007f4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f4e:	014b      	lsls	r3, r1, #5
 8007f50:	4619      	mov	r1, r3
 8007f52:	4622      	mov	r2, r4
 8007f54:	1b49      	subs	r1, r1, r5
 8007f56:	eb62 0206 	sbc.w	r2, r2, r6
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	f04f 0400 	mov.w	r4, #0
 8007f62:	0194      	lsls	r4, r2, #6
 8007f64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f68:	018b      	lsls	r3, r1, #6
 8007f6a:	1a5b      	subs	r3, r3, r1
 8007f6c:	eb64 0402 	sbc.w	r4, r4, r2
 8007f70:	f04f 0100 	mov.w	r1, #0
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	00e2      	lsls	r2, r4, #3
 8007f7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f7e:	00d9      	lsls	r1, r3, #3
 8007f80:	460b      	mov	r3, r1
 8007f82:	4614      	mov	r4, r2
 8007f84:	195b      	adds	r3, r3, r5
 8007f86:	eb44 0406 	adc.w	r4, r4, r6
 8007f8a:	f04f 0100 	mov.w	r1, #0
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	0262      	lsls	r2, r4, #9
 8007f94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007f98:	0259      	lsls	r1, r3, #9
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f04f 0400 	mov.w	r4, #0
 8007fa8:	461a      	mov	r2, r3
 8007faa:	4623      	mov	r3, r4
 8007fac:	f7f8 fe4c 	bl	8000c48 <__aeabi_uldivmod>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	e049      	b.n	800804c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fb8:	4b2f      	ldr	r3, [pc, #188]	; (8008078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	099b      	lsrs	r3, r3, #6
 8007fbe:	f04f 0400 	mov.w	r4, #0
 8007fc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fc6:	f04f 0200 	mov.w	r2, #0
 8007fca:	ea03 0501 	and.w	r5, r3, r1
 8007fce:	ea04 0602 	and.w	r6, r4, r2
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	f04f 0400 	mov.w	r4, #0
 8007fde:	0154      	lsls	r4, r2, #5
 8007fe0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007fe4:	014b      	lsls	r3, r1, #5
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4622      	mov	r2, r4
 8007fea:	1b49      	subs	r1, r1, r5
 8007fec:	eb62 0206 	sbc.w	r2, r2, r6
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	f04f 0400 	mov.w	r4, #0
 8007ff8:	0194      	lsls	r4, r2, #6
 8007ffa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007ffe:	018b      	lsls	r3, r1, #6
 8008000:	1a5b      	subs	r3, r3, r1
 8008002:	eb64 0402 	sbc.w	r4, r4, r2
 8008006:	f04f 0100 	mov.w	r1, #0
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	00e2      	lsls	r2, r4, #3
 8008010:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008014:	00d9      	lsls	r1, r3, #3
 8008016:	460b      	mov	r3, r1
 8008018:	4614      	mov	r4, r2
 800801a:	195b      	adds	r3, r3, r5
 800801c:	eb44 0406 	adc.w	r4, r4, r6
 8008020:	f04f 0100 	mov.w	r1, #0
 8008024:	f04f 0200 	mov.w	r2, #0
 8008028:	02a2      	lsls	r2, r4, #10
 800802a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800802e:	0299      	lsls	r1, r3, #10
 8008030:	460b      	mov	r3, r1
 8008032:	4614      	mov	r4, r2
 8008034:	4618      	mov	r0, r3
 8008036:	4621      	mov	r1, r4
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f04f 0400 	mov.w	r4, #0
 800803e:	461a      	mov	r2, r3
 8008040:	4623      	mov	r3, r4
 8008042:	f7f8 fe01 	bl	8000c48 <__aeabi_uldivmod>
 8008046:	4603      	mov	r3, r0
 8008048:	460c      	mov	r4, r1
 800804a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	0c1b      	lsrs	r3, r3, #16
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	3301      	adds	r3, #1
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	fbb2 f3f3 	udiv	r3, r2, r3
 8008064:	60bb      	str	r3, [r7, #8]
      break;
 8008066:	e002      	b.n	800806e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008068:	4b04      	ldr	r3, [pc, #16]	; (800807c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800806a:	60bb      	str	r3, [r7, #8]
      break;
 800806c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800806e:	68bb      	ldr	r3, [r7, #8]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008078:	40023800 	.word	0x40023800
 800807c:	00f42400 	.word	0x00f42400
 8008080:	007a1200 	.word	0x007a1200

08008084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008088:	4b03      	ldr	r3, [pc, #12]	; (8008098 <HAL_RCC_GetHCLKFreq+0x14>)
 800808a:	681b      	ldr	r3, [r3, #0]
}
 800808c:	4618      	mov	r0, r3
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000a18 	.word	0x20000a18

0800809c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080a0:	f7ff fff0 	bl	8008084 <HAL_RCC_GetHCLKFreq>
 80080a4:	4601      	mov	r1, r0
 80080a6:	4b05      	ldr	r3, [pc, #20]	; (80080bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	0a9b      	lsrs	r3, r3, #10
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	4a03      	ldr	r2, [pc, #12]	; (80080c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080b2:	5cd3      	ldrb	r3, [r2, r3]
 80080b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40023800 	.word	0x40023800
 80080c0:	0800d198 	.word	0x0800d198

080080c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80080c8:	f7ff ffdc 	bl	8008084 <HAL_RCC_GetHCLKFreq>
 80080cc:	4601      	mov	r1, r0
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	0b5b      	lsrs	r3, r3, #13
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	4a03      	ldr	r2, [pc, #12]	; (80080e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080da:	5cd3      	ldrb	r3, [r2, r3]
 80080dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40023800 	.word	0x40023800
 80080e8:	0800d198 	.word	0x0800d198

080080ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e01d      	b.n	800813a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7fa fb00 	bl	8002718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3304      	adds	r3, #4
 8008128:	4619      	mov	r1, r3
 800812a:	4610      	mov	r0, r2
 800812c:	f000 f95e 	bl	80083ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0201 	orr.w	r2, r2, #1
 8008158:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b06      	cmp	r3, #6
 800816a:	d007      	beq.n	800817c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b02      	cmp	r3, #2
 800819e:	d122      	bne.n	80081e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d11b      	bne.n	80081e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f06f 0202 	mvn.w	r2, #2
 80081b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f8ee 	bl	80083ae <HAL_TIM_IC_CaptureCallback>
 80081d2:	e005      	b.n	80081e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f8e0 	bl	800839a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f8f1 	bl	80083c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	d122      	bne.n	800823a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d11b      	bne.n	800823a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f06f 0204 	mvn.w	r2, #4
 800820a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f8c4 	bl	80083ae <HAL_TIM_IC_CaptureCallback>
 8008226:	e005      	b.n	8008234 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f8b6 	bl	800839a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8c7 	bl	80083c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b08      	cmp	r3, #8
 8008246:	d122      	bne.n	800828e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b08      	cmp	r3, #8
 8008254:	d11b      	bne.n	800828e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f06f 0208 	mvn.w	r2, #8
 800825e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2204      	movs	r2, #4
 8008264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	f003 0303 	and.w	r3, r3, #3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f89a 	bl	80083ae <HAL_TIM_IC_CaptureCallback>
 800827a:	e005      	b.n	8008288 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f88c 	bl	800839a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f89d 	bl	80083c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b10      	cmp	r3, #16
 800829a:	d122      	bne.n	80082e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f003 0310 	and.w	r3, r3, #16
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	d11b      	bne.n	80082e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f06f 0210 	mvn.w	r2, #16
 80082b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2208      	movs	r2, #8
 80082b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f870 	bl	80083ae <HAL_TIM_IC_CaptureCallback>
 80082ce:	e005      	b.n	80082dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f862 	bl	800839a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f873 	bl	80083c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d10e      	bne.n	800830e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d107      	bne.n	800830e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f06f 0201 	mvn.w	r2, #1
 8008306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7f9 ff33 	bl	8002174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008318:	2b80      	cmp	r3, #128	; 0x80
 800831a:	d10e      	bne.n	800833a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008326:	2b80      	cmp	r3, #128	; 0x80
 8008328:	d107      	bne.n	800833a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f8e3 	bl	8008500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008344:	2b40      	cmp	r3, #64	; 0x40
 8008346:	d10e      	bne.n	8008366 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b40      	cmp	r3, #64	; 0x40
 8008354:	d107      	bne.n	8008366 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800835e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f838 	bl	80083d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b20      	cmp	r3, #32
 8008372:	d10e      	bne.n	8008392 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b20      	cmp	r3, #32
 8008380:	d107      	bne.n	8008392 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f06f 0220 	mvn.w	r2, #32
 800838a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f8ad 	bl	80084ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a34      	ldr	r2, [pc, #208]	; (80084d0 <TIM_Base_SetConfig+0xe4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00f      	beq.n	8008424 <TIM_Base_SetConfig+0x38>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840a:	d00b      	beq.n	8008424 <TIM_Base_SetConfig+0x38>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a31      	ldr	r2, [pc, #196]	; (80084d4 <TIM_Base_SetConfig+0xe8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_Base_SetConfig+0x38>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a30      	ldr	r2, [pc, #192]	; (80084d8 <TIM_Base_SetConfig+0xec>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_Base_SetConfig+0x38>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a2f      	ldr	r2, [pc, #188]	; (80084dc <TIM_Base_SetConfig+0xf0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d108      	bne.n	8008436 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a25      	ldr	r2, [pc, #148]	; (80084d0 <TIM_Base_SetConfig+0xe4>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d01b      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008444:	d017      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a22      	ldr	r2, [pc, #136]	; (80084d4 <TIM_Base_SetConfig+0xe8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d013      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a21      	ldr	r2, [pc, #132]	; (80084d8 <TIM_Base_SetConfig+0xec>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d00f      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a20      	ldr	r2, [pc, #128]	; (80084dc <TIM_Base_SetConfig+0xf0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00b      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a1f      	ldr	r2, [pc, #124]	; (80084e0 <TIM_Base_SetConfig+0xf4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d007      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a1e      	ldr	r2, [pc, #120]	; (80084e4 <TIM_Base_SetConfig+0xf8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d003      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a1d      	ldr	r2, [pc, #116]	; (80084e8 <TIM_Base_SetConfig+0xfc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d108      	bne.n	8008488 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800847c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a08      	ldr	r2, [pc, #32]	; (80084d0 <TIM_Base_SetConfig+0xe4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d103      	bne.n	80084bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	691a      	ldr	r2, [r3, #16]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	615a      	str	r2, [r3, #20]
}
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	40010000 	.word	0x40010000
 80084d4:	40000400 	.word	0x40000400
 80084d8:	40000800 	.word	0x40000800
 80084dc:	40000c00 	.word	0x40000c00
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40014400 	.word	0x40014400
 80084e8:	40014800 	.word	0x40014800

080084ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e03f      	b.n	80085a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7fa f93e 	bl	80027bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2224      	movs	r2, #36	; 0x24
 8008544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fbf1 	bl	8008d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800856c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	695a      	ldr	r2, [r3, #20]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800857c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800858c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b088      	sub	sp, #32
 80085b2:	af02      	add	r7, sp, #8
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b20      	cmp	r3, #32
 80085cc:	f040 8083 	bne.w	80086d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <HAL_UART_Transmit+0x2e>
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e07b      	b.n	80086d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d101      	bne.n	80085ee <HAL_UART_Transmit+0x40>
 80085ea:	2302      	movs	r3, #2
 80085ec:	e074      	b.n	80086d8 <HAL_UART_Transmit+0x12a>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2221      	movs	r2, #33	; 0x21
 8008600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008604:	f7fd fcd0 	bl	8005fa8 <HAL_GetTick>
 8008608:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	88fa      	ldrh	r2, [r7, #6]
 800860e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	88fa      	ldrh	r2, [r7, #6]
 8008614:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800861e:	e042      	b.n	80086a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008624:	b29b      	uxth	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	b29a      	uxth	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008636:	d122      	bne.n	800867e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2200      	movs	r2, #0
 8008640:	2180      	movs	r1, #128	; 0x80
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 fa10 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e042      	b.n	80086d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008664:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	3302      	adds	r3, #2
 8008672:	60bb      	str	r3, [r7, #8]
 8008674:	e017      	b.n	80086a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	3301      	adds	r3, #1
 800867a:	60bb      	str	r3, [r7, #8]
 800867c:	e013      	b.n	80086a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2200      	movs	r2, #0
 8008686:	2180      	movs	r1, #128	; 0x80
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 f9ed 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e01f      	b.n	80086d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	60ba      	str	r2, [r7, #8]
 800869e:	781a      	ldrb	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1b7      	bne.n	8008620 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2200      	movs	r2, #0
 80086b8:	2140      	movs	r1, #64	; 0x40
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f9d4 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e006      	b.n	80086d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e000      	b.n	80086d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80086d6:	2302      	movs	r3, #2
  }
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af02      	add	r7, sp, #8
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	4613      	mov	r3, r2
 80086ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	f040 8090 	bne.w	8008822 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <HAL_UART_Receive+0x2e>
 8008708:	88fb      	ldrh	r3, [r7, #6]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e088      	b.n	8008824 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_UART_Receive+0x40>
 800871c:	2302      	movs	r3, #2
 800871e:	e081      	b.n	8008824 <HAL_UART_Receive+0x144>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2222      	movs	r2, #34	; 0x22
 8008732:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008736:	f7fd fc37 	bl	8005fa8 <HAL_GetTick>
 800873a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	88fa      	ldrh	r2, [r7, #6]
 8008740:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	88fa      	ldrh	r2, [r7, #6]
 8008746:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008750:	e05c      	b.n	800880c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008756:	b29b      	uxth	r3, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	b29a      	uxth	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008768:	d12b      	bne.n	80087c2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2200      	movs	r2, #0
 8008772:	2120      	movs	r1, #32
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f977 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e04f      	b.n	8008824 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10c      	bne.n	80087aa <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	b29b      	uxth	r3, r3
 8008798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879c:	b29a      	uxth	r2, r3
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	3302      	adds	r3, #2
 80087a6:	60bb      	str	r3, [r7, #8]
 80087a8:	e030      	b.n	800880c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	3301      	adds	r3, #1
 80087be:	60bb      	str	r3, [r7, #8]
 80087c0:	e024      	b.n	800880c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2200      	movs	r2, #0
 80087ca:	2120      	movs	r1, #32
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 f94b 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e023      	b.n	8008824 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d108      	bne.n	80087f6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6859      	ldr	r1, [r3, #4]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	60ba      	str	r2, [r7, #8]
 80087f0:	b2ca      	uxtb	r2, r1
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	e00a      	b.n	800880c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	1c59      	adds	r1, r3, #1
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008808:	b2d2      	uxtb	r2, r2
 800880a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008810:	b29b      	uxth	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d19d      	bne.n	8008752 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2220      	movs	r2, #32
 800881a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	e000      	b.n	8008824 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008822:	2302      	movs	r3, #2
  }
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800884c:	2300      	movs	r3, #0
 800884e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10d      	bne.n	800887e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <HAL_UART_IRQHandler+0x52>
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f9e0 	bl	8008c3c <UART_Receive_IT>
      return;
 800887c:	e0d1      	b.n	8008a22 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 80b0 	beq.w	80089e6 <HAL_UART_IRQHandler+0x1ba>
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d105      	bne.n	800889c <HAL_UART_IRQHandler+0x70>
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 80a5 	beq.w	80089e6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <HAL_UART_IRQHandler+0x90>
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b4:	f043 0201 	orr.w	r2, r3, #1
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	f003 0304 	and.w	r3, r3, #4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <HAL_UART_IRQHandler+0xb0>
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d4:	f043 0202 	orr.w	r2, r3, #2
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <HAL_UART_IRQHandler+0xd0>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f4:	f043 0204 	orr.w	r2, r3, #4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00f      	beq.n	8008926 <HAL_UART_IRQHandler+0xfa>
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b00      	cmp	r3, #0
 800890e:	d104      	bne.n	800891a <HAL_UART_IRQHandler+0xee>
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891e:	f043 0208 	orr.w	r2, r3, #8
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d078      	beq.n	8008a20 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <HAL_UART_IRQHandler+0x11c>
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	f003 0320 	and.w	r3, r3, #32
 800893e:	2b00      	cmp	r3, #0
 8008940:	d002      	beq.n	8008948 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f97a 	bl	8008c3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008952:	2b40      	cmp	r3, #64	; 0x40
 8008954:	bf0c      	ite	eq
 8008956:	2301      	moveq	r3, #1
 8008958:	2300      	movne	r3, #0
 800895a:	b2db      	uxtb	r3, r3
 800895c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d102      	bne.n	8008970 <HAL_UART_IRQHandler+0x144>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d031      	beq.n	80089d4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f8c3 	bl	8008afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008980:	2b40      	cmp	r3, #64	; 0x40
 8008982:	d123      	bne.n	80089cc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695a      	ldr	r2, [r3, #20]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008992:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008998:	2b00      	cmp	r3, #0
 800899a:	d013      	beq.n	80089c4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a0:	4a21      	ldr	r2, [pc, #132]	; (8008a28 <HAL_UART_IRQHandler+0x1fc>)
 80089a2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fd fc58 	bl	800625e <HAL_DMA_Abort_IT>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d016      	beq.n	80089e2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089be:	4610      	mov	r0, r2
 80089c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c2:	e00e      	b.n	80089e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f845 	bl	8008a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ca:	e00a      	b.n	80089e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f841 	bl	8008a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d2:	e006      	b.n	80089e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f83d 	bl	8008a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80089e0:	e01e      	b.n	8008a20 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e2:	bf00      	nop
    return;
 80089e4:	e01c      	b.n	8008a20 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d008      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1d6>
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f8b0 	bl	8008b60 <UART_Transmit_IT>
    return;
 8008a00:	e00f      	b.n	8008a22 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00a      	beq.n	8008a22 <HAL_UART_IRQHandler+0x1f6>
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d005      	beq.n	8008a22 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f8f8 	bl	8008c0c <UART_EndTransmit_IT>
    return;
 8008a1c:	bf00      	nop
 8008a1e:	e000      	b.n	8008a22 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008a20:	bf00      	nop
  }
}
 8008a22:	3720      	adds	r7, #32
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	08008b39 	.word	0x08008b39

08008a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	4613      	mov	r3, r2
 8008a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a78:	e02c      	b.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d028      	beq.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d007      	beq.n	8008a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a88:	f7fd fa8e 	bl	8005fa8 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d21d      	bcs.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008aa6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	695a      	ldr	r2, [r3, #20]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0201 	bic.w	r2, r2, #1
 8008ab6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e00f      	b.n	8008af4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4013      	ands	r3, r2
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2301      	moveq	r3, #1
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	461a      	mov	r2, r3
 8008aec:	79fb      	ldrb	r3, [r7, #7]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d0c3      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0201 	bic.w	r2, r2, #1
 8008b22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff ff7e 	bl	8008a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b58:	bf00      	nop
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b21      	cmp	r3, #33	; 0x21
 8008b72:	d144      	bne.n	8008bfe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b7c:	d11a      	bne.n	8008bb4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b92:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d105      	bne.n	8008ba8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	1c9a      	adds	r2, r3, #2
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	621a      	str	r2, [r3, #32]
 8008ba6:	e00e      	b.n	8008bc6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	621a      	str	r2, [r3, #32]
 8008bb2:	e008      	b.n	8008bc6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	1c59      	adds	r1, r3, #1
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6211      	str	r1, [r2, #32]
 8008bbe:	781a      	ldrb	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10f      	bne.n	8008bfa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008be8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e000      	b.n	8008c00 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008bfe:	2302      	movs	r3, #2
  }
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff fefd 	bl	8008a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b22      	cmp	r3, #34	; 0x22
 8008c4e:	d171      	bne.n	8008d34 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c58:	d123      	bne.n	8008ca2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10e      	bne.n	8008c86 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7e:	1c9a      	adds	r2, r3, #2
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	629a      	str	r2, [r3, #40]	; 0x28
 8008c84:	e029      	b.n	8008cda <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8008ca0:	e01b      	b.n	8008cda <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6858      	ldr	r0, [r3, #4]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	1c59      	adds	r1, r3, #1
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6291      	str	r1, [r2, #40]	; 0x28
 8008cba:	b2c2      	uxtb	r2, r0
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e00c      	b.n	8008cda <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	1c58      	adds	r0, r3, #1
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	6288      	str	r0, [r1, #40]	; 0x28
 8008cd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d120      	bne.n	8008d30 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 0220 	bic.w	r2, r2, #32
 8008cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	695a      	ldr	r2, [r3, #20]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0201 	bic.w	r2, r2, #1
 8008d1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff fe8a 	bl	8008a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e002      	b.n	8008d36 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	e000      	b.n	8008d36 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008d34:	2302      	movs	r3, #2
  }
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	b085      	sub	sp, #20
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008d82:	f023 030c 	bic.w	r3, r3, #12
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	6812      	ldr	r2, [r2, #0]
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dae:	f040 818b 	bne.w	80090c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4ac1      	ldr	r2, [pc, #772]	; (80090bc <UART_SetConfig+0x37c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d005      	beq.n	8008dc8 <UART_SetConfig+0x88>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4abf      	ldr	r2, [pc, #764]	; (80090c0 <UART_SetConfig+0x380>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	f040 80bd 	bne.w	8008f42 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008dc8:	f7ff f97c 	bl	80080c4 <HAL_RCC_GetPCLK2Freq>
 8008dcc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	461d      	mov	r5, r3
 8008dd2:	f04f 0600 	mov.w	r6, #0
 8008dd6:	46a8      	mov	r8, r5
 8008dd8:	46b1      	mov	r9, r6
 8008dda:	eb18 0308 	adds.w	r3, r8, r8
 8008dde:	eb49 0409 	adc.w	r4, r9, r9
 8008de2:	4698      	mov	r8, r3
 8008de4:	46a1      	mov	r9, r4
 8008de6:	eb18 0805 	adds.w	r8, r8, r5
 8008dea:	eb49 0906 	adc.w	r9, r9, r6
 8008dee:	f04f 0100 	mov.w	r1, #0
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008dfa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008dfe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008e02:	4688      	mov	r8, r1
 8008e04:	4691      	mov	r9, r2
 8008e06:	eb18 0005 	adds.w	r0, r8, r5
 8008e0a:	eb49 0106 	adc.w	r1, r9, r6
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	461d      	mov	r5, r3
 8008e14:	f04f 0600 	mov.w	r6, #0
 8008e18:	196b      	adds	r3, r5, r5
 8008e1a:	eb46 0406 	adc.w	r4, r6, r6
 8008e1e:	461a      	mov	r2, r3
 8008e20:	4623      	mov	r3, r4
 8008e22:	f7f7 ff11 	bl	8000c48 <__aeabi_uldivmod>
 8008e26:	4603      	mov	r3, r0
 8008e28:	460c      	mov	r4, r1
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4ba5      	ldr	r3, [pc, #660]	; (80090c4 <UART_SetConfig+0x384>)
 8008e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e32:	095b      	lsrs	r3, r3, #5
 8008e34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	461d      	mov	r5, r3
 8008e3c:	f04f 0600 	mov.w	r6, #0
 8008e40:	46a9      	mov	r9, r5
 8008e42:	46b2      	mov	sl, r6
 8008e44:	eb19 0309 	adds.w	r3, r9, r9
 8008e48:	eb4a 040a 	adc.w	r4, sl, sl
 8008e4c:	4699      	mov	r9, r3
 8008e4e:	46a2      	mov	sl, r4
 8008e50:	eb19 0905 	adds.w	r9, r9, r5
 8008e54:	eb4a 0a06 	adc.w	sl, sl, r6
 8008e58:	f04f 0100 	mov.w	r1, #0
 8008e5c:	f04f 0200 	mov.w	r2, #0
 8008e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e6c:	4689      	mov	r9, r1
 8008e6e:	4692      	mov	sl, r2
 8008e70:	eb19 0005 	adds.w	r0, r9, r5
 8008e74:	eb4a 0106 	adc.w	r1, sl, r6
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	461d      	mov	r5, r3
 8008e7e:	f04f 0600 	mov.w	r6, #0
 8008e82:	196b      	adds	r3, r5, r5
 8008e84:	eb46 0406 	adc.w	r4, r6, r6
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4623      	mov	r3, r4
 8008e8c:	f7f7 fedc 	bl	8000c48 <__aeabi_uldivmod>
 8008e90:	4603      	mov	r3, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	461a      	mov	r2, r3
 8008e96:	4b8b      	ldr	r3, [pc, #556]	; (80090c4 <UART_SetConfig+0x384>)
 8008e98:	fba3 1302 	umull	r1, r3, r3, r2
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	2164      	movs	r1, #100	; 0x64
 8008ea0:	fb01 f303 	mul.w	r3, r1, r3
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	3332      	adds	r3, #50	; 0x32
 8008eaa:	4a86      	ldr	r2, [pc, #536]	; (80090c4 <UART_SetConfig+0x384>)
 8008eac:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008eb8:	4498      	add	r8, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	f04f 0600 	mov.w	r6, #0
 8008ec2:	46a9      	mov	r9, r5
 8008ec4:	46b2      	mov	sl, r6
 8008ec6:	eb19 0309 	adds.w	r3, r9, r9
 8008eca:	eb4a 040a 	adc.w	r4, sl, sl
 8008ece:	4699      	mov	r9, r3
 8008ed0:	46a2      	mov	sl, r4
 8008ed2:	eb19 0905 	adds.w	r9, r9, r5
 8008ed6:	eb4a 0a06 	adc.w	sl, sl, r6
 8008eda:	f04f 0100 	mov.w	r1, #0
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ee6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008eea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008eee:	4689      	mov	r9, r1
 8008ef0:	4692      	mov	sl, r2
 8008ef2:	eb19 0005 	adds.w	r0, r9, r5
 8008ef6:	eb4a 0106 	adc.w	r1, sl, r6
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	461d      	mov	r5, r3
 8008f00:	f04f 0600 	mov.w	r6, #0
 8008f04:	196b      	adds	r3, r5, r5
 8008f06:	eb46 0406 	adc.w	r4, r6, r6
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4623      	mov	r3, r4
 8008f0e:	f7f7 fe9b 	bl	8000c48 <__aeabi_uldivmod>
 8008f12:	4603      	mov	r3, r0
 8008f14:	460c      	mov	r4, r1
 8008f16:	461a      	mov	r2, r3
 8008f18:	4b6a      	ldr	r3, [pc, #424]	; (80090c4 <UART_SetConfig+0x384>)
 8008f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f1e:	095b      	lsrs	r3, r3, #5
 8008f20:	2164      	movs	r1, #100	; 0x64
 8008f22:	fb01 f303 	mul.w	r3, r1, r3
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	3332      	adds	r3, #50	; 0x32
 8008f2c:	4a65      	ldr	r2, [pc, #404]	; (80090c4 <UART_SetConfig+0x384>)
 8008f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	f003 0207 	and.w	r2, r3, #7
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4442      	add	r2, r8
 8008f3e:	609a      	str	r2, [r3, #8]
 8008f40:	e26f      	b.n	8009422 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f42:	f7ff f8ab 	bl	800809c <HAL_RCC_GetPCLK1Freq>
 8008f46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	461d      	mov	r5, r3
 8008f4c:	f04f 0600 	mov.w	r6, #0
 8008f50:	46a8      	mov	r8, r5
 8008f52:	46b1      	mov	r9, r6
 8008f54:	eb18 0308 	adds.w	r3, r8, r8
 8008f58:	eb49 0409 	adc.w	r4, r9, r9
 8008f5c:	4698      	mov	r8, r3
 8008f5e:	46a1      	mov	r9, r4
 8008f60:	eb18 0805 	adds.w	r8, r8, r5
 8008f64:	eb49 0906 	adc.w	r9, r9, r6
 8008f68:	f04f 0100 	mov.w	r1, #0
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f7c:	4688      	mov	r8, r1
 8008f7e:	4691      	mov	r9, r2
 8008f80:	eb18 0005 	adds.w	r0, r8, r5
 8008f84:	eb49 0106 	adc.w	r1, r9, r6
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	461d      	mov	r5, r3
 8008f8e:	f04f 0600 	mov.w	r6, #0
 8008f92:	196b      	adds	r3, r5, r5
 8008f94:	eb46 0406 	adc.w	r4, r6, r6
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4623      	mov	r3, r4
 8008f9c:	f7f7 fe54 	bl	8000c48 <__aeabi_uldivmod>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4b47      	ldr	r3, [pc, #284]	; (80090c4 <UART_SetConfig+0x384>)
 8008fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8008fac:	095b      	lsrs	r3, r3, #5
 8008fae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	461d      	mov	r5, r3
 8008fb6:	f04f 0600 	mov.w	r6, #0
 8008fba:	46a9      	mov	r9, r5
 8008fbc:	46b2      	mov	sl, r6
 8008fbe:	eb19 0309 	adds.w	r3, r9, r9
 8008fc2:	eb4a 040a 	adc.w	r4, sl, sl
 8008fc6:	4699      	mov	r9, r3
 8008fc8:	46a2      	mov	sl, r4
 8008fca:	eb19 0905 	adds.w	r9, r9, r5
 8008fce:	eb4a 0a06 	adc.w	sl, sl, r6
 8008fd2:	f04f 0100 	mov.w	r1, #0
 8008fd6:	f04f 0200 	mov.w	r2, #0
 8008fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fe6:	4689      	mov	r9, r1
 8008fe8:	4692      	mov	sl, r2
 8008fea:	eb19 0005 	adds.w	r0, r9, r5
 8008fee:	eb4a 0106 	adc.w	r1, sl, r6
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	461d      	mov	r5, r3
 8008ff8:	f04f 0600 	mov.w	r6, #0
 8008ffc:	196b      	adds	r3, r5, r5
 8008ffe:	eb46 0406 	adc.w	r4, r6, r6
 8009002:	461a      	mov	r2, r3
 8009004:	4623      	mov	r3, r4
 8009006:	f7f7 fe1f 	bl	8000c48 <__aeabi_uldivmod>
 800900a:	4603      	mov	r3, r0
 800900c:	460c      	mov	r4, r1
 800900e:	461a      	mov	r2, r3
 8009010:	4b2c      	ldr	r3, [pc, #176]	; (80090c4 <UART_SetConfig+0x384>)
 8009012:	fba3 1302 	umull	r1, r3, r3, r2
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	2164      	movs	r1, #100	; 0x64
 800901a:	fb01 f303 	mul.w	r3, r1, r3
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	3332      	adds	r3, #50	; 0x32
 8009024:	4a27      	ldr	r2, [pc, #156]	; (80090c4 <UART_SetConfig+0x384>)
 8009026:	fba2 2303 	umull	r2, r3, r2, r3
 800902a:	095b      	lsrs	r3, r3, #5
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009032:	4498      	add	r8, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	461d      	mov	r5, r3
 8009038:	f04f 0600 	mov.w	r6, #0
 800903c:	46a9      	mov	r9, r5
 800903e:	46b2      	mov	sl, r6
 8009040:	eb19 0309 	adds.w	r3, r9, r9
 8009044:	eb4a 040a 	adc.w	r4, sl, sl
 8009048:	4699      	mov	r9, r3
 800904a:	46a2      	mov	sl, r4
 800904c:	eb19 0905 	adds.w	r9, r9, r5
 8009050:	eb4a 0a06 	adc.w	sl, sl, r6
 8009054:	f04f 0100 	mov.w	r1, #0
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009060:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009064:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009068:	4689      	mov	r9, r1
 800906a:	4692      	mov	sl, r2
 800906c:	eb19 0005 	adds.w	r0, r9, r5
 8009070:	eb4a 0106 	adc.w	r1, sl, r6
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	461d      	mov	r5, r3
 800907a:	f04f 0600 	mov.w	r6, #0
 800907e:	196b      	adds	r3, r5, r5
 8009080:	eb46 0406 	adc.w	r4, r6, r6
 8009084:	461a      	mov	r2, r3
 8009086:	4623      	mov	r3, r4
 8009088:	f7f7 fdde 	bl	8000c48 <__aeabi_uldivmod>
 800908c:	4603      	mov	r3, r0
 800908e:	460c      	mov	r4, r1
 8009090:	461a      	mov	r2, r3
 8009092:	4b0c      	ldr	r3, [pc, #48]	; (80090c4 <UART_SetConfig+0x384>)
 8009094:	fba3 1302 	umull	r1, r3, r3, r2
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	2164      	movs	r1, #100	; 0x64
 800909c:	fb01 f303 	mul.w	r3, r1, r3
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	3332      	adds	r3, #50	; 0x32
 80090a6:	4a07      	ldr	r2, [pc, #28]	; (80090c4 <UART_SetConfig+0x384>)
 80090a8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ac:	095b      	lsrs	r3, r3, #5
 80090ae:	f003 0207 	and.w	r2, r3, #7
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4442      	add	r2, r8
 80090b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80090ba:	e1b2      	b.n	8009422 <UART_SetConfig+0x6e2>
 80090bc:	40011000 	.word	0x40011000
 80090c0:	40011400 	.word	0x40011400
 80090c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4ad7      	ldr	r2, [pc, #860]	; (800942c <UART_SetConfig+0x6ec>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d005      	beq.n	80090de <UART_SetConfig+0x39e>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4ad6      	ldr	r2, [pc, #856]	; (8009430 <UART_SetConfig+0x6f0>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	f040 80d1 	bne.w	8009280 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80090de:	f7fe fff1 	bl	80080c4 <HAL_RCC_GetPCLK2Freq>
 80090e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	469a      	mov	sl, r3
 80090e8:	f04f 0b00 	mov.w	fp, #0
 80090ec:	46d0      	mov	r8, sl
 80090ee:	46d9      	mov	r9, fp
 80090f0:	eb18 0308 	adds.w	r3, r8, r8
 80090f4:	eb49 0409 	adc.w	r4, r9, r9
 80090f8:	4698      	mov	r8, r3
 80090fa:	46a1      	mov	r9, r4
 80090fc:	eb18 080a 	adds.w	r8, r8, sl
 8009100:	eb49 090b 	adc.w	r9, r9, fp
 8009104:	f04f 0100 	mov.w	r1, #0
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009110:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009114:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009118:	4688      	mov	r8, r1
 800911a:	4691      	mov	r9, r2
 800911c:	eb1a 0508 	adds.w	r5, sl, r8
 8009120:	eb4b 0609 	adc.w	r6, fp, r9
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	4619      	mov	r1, r3
 800912a:	f04f 0200 	mov.w	r2, #0
 800912e:	f04f 0300 	mov.w	r3, #0
 8009132:	f04f 0400 	mov.w	r4, #0
 8009136:	0094      	lsls	r4, r2, #2
 8009138:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800913c:	008b      	lsls	r3, r1, #2
 800913e:	461a      	mov	r2, r3
 8009140:	4623      	mov	r3, r4
 8009142:	4628      	mov	r0, r5
 8009144:	4631      	mov	r1, r6
 8009146:	f7f7 fd7f 	bl	8000c48 <__aeabi_uldivmod>
 800914a:	4603      	mov	r3, r0
 800914c:	460c      	mov	r4, r1
 800914e:	461a      	mov	r2, r3
 8009150:	4bb8      	ldr	r3, [pc, #736]	; (8009434 <UART_SetConfig+0x6f4>)
 8009152:	fba3 2302 	umull	r2, r3, r3, r2
 8009156:	095b      	lsrs	r3, r3, #5
 8009158:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	469b      	mov	fp, r3
 8009160:	f04f 0c00 	mov.w	ip, #0
 8009164:	46d9      	mov	r9, fp
 8009166:	46e2      	mov	sl, ip
 8009168:	eb19 0309 	adds.w	r3, r9, r9
 800916c:	eb4a 040a 	adc.w	r4, sl, sl
 8009170:	4699      	mov	r9, r3
 8009172:	46a2      	mov	sl, r4
 8009174:	eb19 090b 	adds.w	r9, r9, fp
 8009178:	eb4a 0a0c 	adc.w	sl, sl, ip
 800917c:	f04f 0100 	mov.w	r1, #0
 8009180:	f04f 0200 	mov.w	r2, #0
 8009184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800918c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009190:	4689      	mov	r9, r1
 8009192:	4692      	mov	sl, r2
 8009194:	eb1b 0509 	adds.w	r5, fp, r9
 8009198:	eb4c 060a 	adc.w	r6, ip, sl
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f04f 0200 	mov.w	r2, #0
 80091a6:	f04f 0300 	mov.w	r3, #0
 80091aa:	f04f 0400 	mov.w	r4, #0
 80091ae:	0094      	lsls	r4, r2, #2
 80091b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091b4:	008b      	lsls	r3, r1, #2
 80091b6:	461a      	mov	r2, r3
 80091b8:	4623      	mov	r3, r4
 80091ba:	4628      	mov	r0, r5
 80091bc:	4631      	mov	r1, r6
 80091be:	f7f7 fd43 	bl	8000c48 <__aeabi_uldivmod>
 80091c2:	4603      	mov	r3, r0
 80091c4:	460c      	mov	r4, r1
 80091c6:	461a      	mov	r2, r3
 80091c8:	4b9a      	ldr	r3, [pc, #616]	; (8009434 <UART_SetConfig+0x6f4>)
 80091ca:	fba3 1302 	umull	r1, r3, r3, r2
 80091ce:	095b      	lsrs	r3, r3, #5
 80091d0:	2164      	movs	r1, #100	; 0x64
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	3332      	adds	r3, #50	; 0x32
 80091dc:	4a95      	ldr	r2, [pc, #596]	; (8009434 <UART_SetConfig+0x6f4>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091e8:	4498      	add	r8, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	469b      	mov	fp, r3
 80091ee:	f04f 0c00 	mov.w	ip, #0
 80091f2:	46d9      	mov	r9, fp
 80091f4:	46e2      	mov	sl, ip
 80091f6:	eb19 0309 	adds.w	r3, r9, r9
 80091fa:	eb4a 040a 	adc.w	r4, sl, sl
 80091fe:	4699      	mov	r9, r3
 8009200:	46a2      	mov	sl, r4
 8009202:	eb19 090b 	adds.w	r9, r9, fp
 8009206:	eb4a 0a0c 	adc.w	sl, sl, ip
 800920a:	f04f 0100 	mov.w	r1, #0
 800920e:	f04f 0200 	mov.w	r2, #0
 8009212:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009216:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800921a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800921e:	4689      	mov	r9, r1
 8009220:	4692      	mov	sl, r2
 8009222:	eb1b 0509 	adds.w	r5, fp, r9
 8009226:	eb4c 060a 	adc.w	r6, ip, sl
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	4619      	mov	r1, r3
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	f04f 0300 	mov.w	r3, #0
 8009238:	f04f 0400 	mov.w	r4, #0
 800923c:	0094      	lsls	r4, r2, #2
 800923e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009242:	008b      	lsls	r3, r1, #2
 8009244:	461a      	mov	r2, r3
 8009246:	4623      	mov	r3, r4
 8009248:	4628      	mov	r0, r5
 800924a:	4631      	mov	r1, r6
 800924c:	f7f7 fcfc 	bl	8000c48 <__aeabi_uldivmod>
 8009250:	4603      	mov	r3, r0
 8009252:	460c      	mov	r4, r1
 8009254:	461a      	mov	r2, r3
 8009256:	4b77      	ldr	r3, [pc, #476]	; (8009434 <UART_SetConfig+0x6f4>)
 8009258:	fba3 1302 	umull	r1, r3, r3, r2
 800925c:	095b      	lsrs	r3, r3, #5
 800925e:	2164      	movs	r1, #100	; 0x64
 8009260:	fb01 f303 	mul.w	r3, r1, r3
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	3332      	adds	r3, #50	; 0x32
 800926a:	4a72      	ldr	r2, [pc, #456]	; (8009434 <UART_SetConfig+0x6f4>)
 800926c:	fba2 2303 	umull	r2, r3, r2, r3
 8009270:	095b      	lsrs	r3, r3, #5
 8009272:	f003 020f 	and.w	r2, r3, #15
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4442      	add	r2, r8
 800927c:	609a      	str	r2, [r3, #8]
 800927e:	e0d0      	b.n	8009422 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009280:	f7fe ff0c 	bl	800809c <HAL_RCC_GetPCLK1Freq>
 8009284:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	469a      	mov	sl, r3
 800928a:	f04f 0b00 	mov.w	fp, #0
 800928e:	46d0      	mov	r8, sl
 8009290:	46d9      	mov	r9, fp
 8009292:	eb18 0308 	adds.w	r3, r8, r8
 8009296:	eb49 0409 	adc.w	r4, r9, r9
 800929a:	4698      	mov	r8, r3
 800929c:	46a1      	mov	r9, r4
 800929e:	eb18 080a 	adds.w	r8, r8, sl
 80092a2:	eb49 090b 	adc.w	r9, r9, fp
 80092a6:	f04f 0100 	mov.w	r1, #0
 80092aa:	f04f 0200 	mov.w	r2, #0
 80092ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092ba:	4688      	mov	r8, r1
 80092bc:	4691      	mov	r9, r2
 80092be:	eb1a 0508 	adds.w	r5, sl, r8
 80092c2:	eb4b 0609 	adc.w	r6, fp, r9
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	4619      	mov	r1, r3
 80092cc:	f04f 0200 	mov.w	r2, #0
 80092d0:	f04f 0300 	mov.w	r3, #0
 80092d4:	f04f 0400 	mov.w	r4, #0
 80092d8:	0094      	lsls	r4, r2, #2
 80092da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092de:	008b      	lsls	r3, r1, #2
 80092e0:	461a      	mov	r2, r3
 80092e2:	4623      	mov	r3, r4
 80092e4:	4628      	mov	r0, r5
 80092e6:	4631      	mov	r1, r6
 80092e8:	f7f7 fcae 	bl	8000c48 <__aeabi_uldivmod>
 80092ec:	4603      	mov	r3, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	461a      	mov	r2, r3
 80092f2:	4b50      	ldr	r3, [pc, #320]	; (8009434 <UART_SetConfig+0x6f4>)
 80092f4:	fba3 2302 	umull	r2, r3, r3, r2
 80092f8:	095b      	lsrs	r3, r3, #5
 80092fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	469b      	mov	fp, r3
 8009302:	f04f 0c00 	mov.w	ip, #0
 8009306:	46d9      	mov	r9, fp
 8009308:	46e2      	mov	sl, ip
 800930a:	eb19 0309 	adds.w	r3, r9, r9
 800930e:	eb4a 040a 	adc.w	r4, sl, sl
 8009312:	4699      	mov	r9, r3
 8009314:	46a2      	mov	sl, r4
 8009316:	eb19 090b 	adds.w	r9, r9, fp
 800931a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800931e:	f04f 0100 	mov.w	r1, #0
 8009322:	f04f 0200 	mov.w	r2, #0
 8009326:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800932a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800932e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009332:	4689      	mov	r9, r1
 8009334:	4692      	mov	sl, r2
 8009336:	eb1b 0509 	adds.w	r5, fp, r9
 800933a:	eb4c 060a 	adc.w	r6, ip, sl
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	4619      	mov	r1, r3
 8009344:	f04f 0200 	mov.w	r2, #0
 8009348:	f04f 0300 	mov.w	r3, #0
 800934c:	f04f 0400 	mov.w	r4, #0
 8009350:	0094      	lsls	r4, r2, #2
 8009352:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009356:	008b      	lsls	r3, r1, #2
 8009358:	461a      	mov	r2, r3
 800935a:	4623      	mov	r3, r4
 800935c:	4628      	mov	r0, r5
 800935e:	4631      	mov	r1, r6
 8009360:	f7f7 fc72 	bl	8000c48 <__aeabi_uldivmod>
 8009364:	4603      	mov	r3, r0
 8009366:	460c      	mov	r4, r1
 8009368:	461a      	mov	r2, r3
 800936a:	4b32      	ldr	r3, [pc, #200]	; (8009434 <UART_SetConfig+0x6f4>)
 800936c:	fba3 1302 	umull	r1, r3, r3, r2
 8009370:	095b      	lsrs	r3, r3, #5
 8009372:	2164      	movs	r1, #100	; 0x64
 8009374:	fb01 f303 	mul.w	r3, r1, r3
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	3332      	adds	r3, #50	; 0x32
 800937e:	4a2d      	ldr	r2, [pc, #180]	; (8009434 <UART_SetConfig+0x6f4>)
 8009380:	fba2 2303 	umull	r2, r3, r2, r3
 8009384:	095b      	lsrs	r3, r3, #5
 8009386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800938a:	4498      	add	r8, r3
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	469b      	mov	fp, r3
 8009390:	f04f 0c00 	mov.w	ip, #0
 8009394:	46d9      	mov	r9, fp
 8009396:	46e2      	mov	sl, ip
 8009398:	eb19 0309 	adds.w	r3, r9, r9
 800939c:	eb4a 040a 	adc.w	r4, sl, sl
 80093a0:	4699      	mov	r9, r3
 80093a2:	46a2      	mov	sl, r4
 80093a4:	eb19 090b 	adds.w	r9, r9, fp
 80093a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80093ac:	f04f 0100 	mov.w	r1, #0
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093c0:	4689      	mov	r9, r1
 80093c2:	4692      	mov	sl, r2
 80093c4:	eb1b 0509 	adds.w	r5, fp, r9
 80093c8:	eb4c 060a 	adc.w	r6, ip, sl
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	4619      	mov	r1, r3
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	f04f 0300 	mov.w	r3, #0
 80093da:	f04f 0400 	mov.w	r4, #0
 80093de:	0094      	lsls	r4, r2, #2
 80093e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093e4:	008b      	lsls	r3, r1, #2
 80093e6:	461a      	mov	r2, r3
 80093e8:	4623      	mov	r3, r4
 80093ea:	4628      	mov	r0, r5
 80093ec:	4631      	mov	r1, r6
 80093ee:	f7f7 fc2b 	bl	8000c48 <__aeabi_uldivmod>
 80093f2:	4603      	mov	r3, r0
 80093f4:	460c      	mov	r4, r1
 80093f6:	461a      	mov	r2, r3
 80093f8:	4b0e      	ldr	r3, [pc, #56]	; (8009434 <UART_SetConfig+0x6f4>)
 80093fa:	fba3 1302 	umull	r1, r3, r3, r2
 80093fe:	095b      	lsrs	r3, r3, #5
 8009400:	2164      	movs	r1, #100	; 0x64
 8009402:	fb01 f303 	mul.w	r3, r1, r3
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	011b      	lsls	r3, r3, #4
 800940a:	3332      	adds	r3, #50	; 0x32
 800940c:	4a09      	ldr	r2, [pc, #36]	; (8009434 <UART_SetConfig+0x6f4>)
 800940e:	fba2 2303 	umull	r2, r3, r2, r3
 8009412:	095b      	lsrs	r3, r3, #5
 8009414:	f003 020f 	and.w	r2, r3, #15
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4442      	add	r2, r8
 800941e:	609a      	str	r2, [r3, #8]
}
 8009420:	e7ff      	b.n	8009422 <UART_SetConfig+0x6e2>
 8009422:	bf00      	nop
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	40011000 	.word	0x40011000
 8009430:	40011400 	.word	0x40011400
 8009434:	51eb851f 	.word	0x51eb851f

08009438 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d009      	beq.n	800945c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8009448:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800944a:	461a      	mov	r2, r3
        err.type, err.code);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	4806      	ldr	r0, [pc, #24]	; (8009470 <ai_log_err+0x38>)
 8009456:	f001 ff4b 	bl	800b2f0 <iprintf>
 800945a:	e008      	b.n	800946e <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800945c:	793b      	ldrb	r3, [r7, #4]
 800945e:	4619      	mov	r1, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8009466:	461a      	mov	r2, r3
 8009468:	4802      	ldr	r0, [pc, #8]	; (8009474 <ai_log_err+0x3c>)
 800946a:	f001 ff41 	bl	800b2f0 <iprintf>

  do {} while (1);
 800946e:	e7fe      	b.n	800946e <ai_log_err+0x36>
 8009470:	0800cfb4 	.word	0x0800cfb4
 8009474:	0800cfe8 	.word	0x0800cfe8

08009478 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b090      	sub	sp, #64	; 0x40
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8009482:	2100      	movs	r1, #0
 8009484:	4837      	ldr	r0, [pc, #220]	; (8009564 <ai_boostrap+0xec>)
 8009486:	f000 f9d1 	bl	800982c <ai_network_create>
 800948a:	4603      	mov	r3, r0
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 800948e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009492:	2b00      	cmp	r3, #0
 8009494:	d006      	beq.n	80094a4 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 8009496:	4934      	ldr	r1, [pc, #208]	; (8009568 <ai_boostrap+0xf0>)
 8009498:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800949a:	f7ff ffcd 	bl	8009438 <ai_log_err>
    return -1;
 800949e:	f04f 33ff 	mov.w	r3, #4294967295
 80094a2:	e05b      	b.n	800955c <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 80094a4:	4b31      	ldr	r3, [pc, #196]	; (800956c <ai_boostrap+0xf4>)
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	2301      	movs	r3, #1
 80094aa:	823b      	strh	r3, [r7, #16]
 80094ac:	2301      	movs	r3, #1
 80094ae:	827b      	strh	r3, [r7, #18]
 80094b0:	2301      	movs	r3, #1
 80094b2:	82bb      	strh	r3, [r7, #20]
 80094b4:	4b2e      	ldr	r3, [pc, #184]	; (8009570 <ai_boostrap+0xf8>)
 80094b6:	61bb      	str	r3, [r7, #24]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	61fb      	str	r3, [r7, #28]
 80094bc:	2300      	movs	r3, #0
 80094be:	623b      	str	r3, [r7, #32]
 80094c0:	4b2c      	ldr	r3, [pc, #176]	; (8009574 <ai_boostrap+0xfc>)
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
 80094c4:	2301      	movs	r3, #1
 80094c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80094c8:	2301      	movs	r3, #1
 80094ca:	857b      	strh	r3, [r7, #42]	; 0x2a
 80094cc:	2301      	movs	r3, #1
 80094ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80094d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d4:	633b      	str	r3, [r7, #48]	; 0x30
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34
 80094da:	2300      	movs	r3, #0
 80094dc:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 80094de:	4b21      	ldr	r3, [pc, #132]	; (8009564 <ai_boostrap+0xec>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f107 020c 	add.w	r2, r7, #12
 80094e6:	4611      	mov	r1, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 f9c1 	bl	8009870 <ai_network_init>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f083 0301 	eor.w	r3, r3, #1
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00d      	beq.n	8009516 <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 80094fa:	4b1a      	ldr	r3, [pc, #104]	; (8009564 <ai_boostrap+0xec>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f988 	bl	8009814 <ai_network_get_error>
 8009504:	4603      	mov	r3, r0
 8009506:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 8009508:	491b      	ldr	r1, [pc, #108]	; (8009578 <ai_boostrap+0x100>)
 800950a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800950c:	f7ff ff94 	bl	8009438 <ai_log_err>
      return -1;
 8009510:	f04f 33ff 	mov.w	r3, #4294967295
 8009514:	e022      	b.n	800955c <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8009516:	4b13      	ldr	r3, [pc, #76]	; (8009564 <ai_boostrap+0xec>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4918      	ldr	r1, [pc, #96]	; (800957c <ai_boostrap+0x104>)
 800951c:	4618      	mov	r0, r3
 800951e:	f000 f91b 	bl	8009758 <ai_network_get_info>
 8009522:	4603      	mov	r3, r0
 8009524:	f083 0301 	eor.w	r3, r3, #1
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d015      	beq.n	800955a <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 800952e:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <ai_boostrap+0xec>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f96e 	bl	8009814 <ai_network_get_error>
 8009538:	4603      	mov	r3, r0
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 800953c:	4910      	ldr	r1, [pc, #64]	; (8009580 <ai_boostrap+0x108>)
 800953e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009540:	f7ff ff7a 	bl	8009438 <ai_log_err>
    ai_network_destroy(network);
 8009544:	4b07      	ldr	r3, [pc, #28]	; (8009564 <ai_boostrap+0xec>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f985 	bl	8009858 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 800954e:	4b05      	ldr	r3, [pc, #20]	; (8009564 <ai_boostrap+0xec>)
 8009550:	2200      	movs	r2, #0
 8009552:	601a      	str	r2, [r3, #0]
    return -3;
 8009554:	f06f 0302 	mvn.w	r3, #2
 8009558:	e000      	b.n	800955c <ai_boostrap+0xe4>
  }

  return 0;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3740      	adds	r7, #64	; 0x40
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20001108 	.word	0x20001108
 8009568:	0800d018 	.word	0x0800d018
 800956c:	40040440 	.word	0x40040440
 8009570:	0005b400 	.word	0x0005b400
 8009574:	00040440 	.word	0x00040440
 8009578:	0800d02c 	.word	0x0800d02c
 800957c:	2000110c 	.word	0x2000110c
 8009580:	0800d03c 	.word	0x0800d03c

08009584 <ai_run_v2>:
  return 0;
}

/* USER CODE BEGIN 2 */
int ai_run_v2(void *in_data, void *out_data)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
	ai_i32 nbatch;
	ai_error err;

	/* Parameters checking */
	if (!in_data || !out_data || !network)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <ai_run_v2+0x1e>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <ai_run_v2+0x1e>
 800959a:	4b17      	ldr	r3, [pc, #92]	; (80095f8 <ai_run_v2+0x74>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <ai_run_v2+0x24>
		return -1;
 80095a2:	f04f 33ff 	mov.w	r3, #4294967295
 80095a6:	e022      	b.n	80095ee <ai_run_v2+0x6a>

	ai_buffer *ai_input = network_info.inputs;
 80095a8:	4b14      	ldr	r3, [pc, #80]	; (80095fc <ai_run_v2+0x78>)
 80095aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ac:	617b      	str	r3, [r7, #20]
	ai_buffer *ai_output = network_info.outputs;
 80095ae:	4b13      	ldr	r3, [pc, #76]	; (80095fc <ai_run_v2+0x78>)
 80095b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b2:	613b      	str	r3, [r7, #16]

	/* Initialize input/output buffer handlers */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	611a      	str	r2, [r3, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	611a      	str	r2, [r3, #16]

	/* 2 - Perform the inference */
	nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80095c0:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <ai_run_v2+0x74>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	6979      	ldr	r1, [r7, #20]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 f990 	bl	80098ee <ai_network_run>
 80095ce:	60f8      	str	r0, [r7, #12]
	if (nbatch != 1) {
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d00a      	beq.n	80095ec <ai_run_v2+0x68>
		err = ai_network_get_error(network);
 80095d6:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <ai_run_v2+0x74>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f91a 	bl	8009814 <ai_network_get_error>
 80095e0:	4603      	mov	r3, r0
 80095e2:	60bb      	str	r3, [r7, #8]
		// ...
		return err.code;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80095ea:	e000      	b.n	80095ee <ai_run_v2+0x6a>
	}


  return 0;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	20001108 	.word	0x20001108
 80095fc:	2000110c 	.word	0x2000110c

08009600 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8009604:	4805      	ldr	r0, [pc, #20]	; (800961c <MX_X_CUBE_AI_Init+0x1c>)
 8009606:	f001 fee7 	bl	800b3d8 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 800960a:	f000 f981 	bl	8009910 <ai_network_data_weights_get>
 800960e:	4603      	mov	r3, r0
 8009610:	4903      	ldr	r1, [pc, #12]	; (8009620 <MX_X_CUBE_AI_Init+0x20>)
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff ff30 	bl	8009478 <ai_boostrap>
    /* USER CODE END 5 */
}
 8009618:	bf00      	nop
 800961a:	bd80      	pop	{r7, pc}
 800961c:	0800d064 	.word	0x0800d064
 8009620:	20001180 	.word	0x20001180

08009624 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	3303      	adds	r3, #3
 8009634:	f023 0303 	bic.w	r3, r3, #3
 8009638:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800963a:	4b14      	ldr	r3, [pc, #80]	; (800968c <network_configure_activations+0x68>)
 800963c:	2200      	movs	r2, #0
 800963e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8009640:	4b12      	ldr	r3, [pc, #72]	; (800968c <network_configure_activations+0x68>)
 8009642:	2200      	movs	r2, #0
 8009644:	60da      	str	r2, [r3, #12]
    input_layer_output_array.data = AI_PTR(activations + 0);
 8009646:	4a12      	ldr	r2, [pc, #72]	; (8009690 <network_configure_activations+0x6c>)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6093      	str	r3, [r2, #8]
    input_layer_output_array.data_start = AI_PTR(activations + 0);
 800964c:	4a10      	ldr	r2, [pc, #64]	; (8009690 <network_configure_activations+0x6c>)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	60d3      	str	r3, [r2, #12]
    input_layer_nl_output_array.data = AI_PTR(activations + 0);
 8009652:	4a10      	ldr	r2, [pc, #64]	; (8009694 <network_configure_activations+0x70>)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6093      	str	r3, [r2, #8]
    input_layer_nl_output_array.data_start = AI_PTR(activations + 0);
 8009658:	4a0e      	ldr	r2, [pc, #56]	; (8009694 <network_configure_activations+0x70>)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	60d3      	str	r3, [r2, #12]
    hidden1_output_array.data = AI_PTR(activations + 512);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009664:	4a0c      	ldr	r2, [pc, #48]	; (8009698 <network_configure_activations+0x74>)
 8009666:	6093      	str	r3, [r2, #8]
    hidden1_output_array.data_start = AI_PTR(activations + 512);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800966e:	4a0a      	ldr	r2, [pc, #40]	; (8009698 <network_configure_activations+0x74>)
 8009670:	60d3      	str	r3, [r2, #12]
    hidden1_nl_output_array.data = AI_PTR(NULL);
 8009672:	4b0a      	ldr	r3, [pc, #40]	; (800969c <network_configure_activations+0x78>)
 8009674:	2200      	movs	r2, #0
 8009676:	609a      	str	r2, [r3, #8]
    hidden1_nl_output_array.data_start = AI_PTR(NULL);
 8009678:	4b08      	ldr	r3, [pc, #32]	; (800969c <network_configure_activations+0x78>)
 800967a:	2200      	movs	r2, #0
 800967c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800967e:	2301      	movs	r3, #1
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20000b5c 	.word	0x20000b5c
 8009690:	20000b6c 	.word	0x20000b6c
 8009694:	20000b7c 	.word	0x20000b7c
 8009698:	20000b8c 	.word	0x20000b8c
 800969c:	20000b9c 	.word	0x20000b9c

080096a0 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    input_layer_weights_array.format |= AI_FMT_FLAG_CONST;
 80096b0:	4b25      	ldr	r3, [pc, #148]	; (8009748 <network_configure_weights+0xa8>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096b8:	4a23      	ldr	r2, [pc, #140]	; (8009748 <network_configure_weights+0xa8>)
 80096ba:	6013      	str	r3, [r2, #0]
    input_layer_weights_array.data = AI_PTR(weights + 0);
 80096bc:	4a22      	ldr	r2, [pc, #136]	; (8009748 <network_configure_weights+0xa8>)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6093      	str	r3, [r2, #8]
    input_layer_weights_array.data_start = AI_PTR(weights + 0);
 80096c2:	4a21      	ldr	r2, [pc, #132]	; (8009748 <network_configure_weights+0xa8>)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	60d3      	str	r3, [r2, #12]
    input_layer_bias_array.format |= AI_FMT_FLAG_CONST;
 80096c8:	4b20      	ldr	r3, [pc, #128]	; (800974c <network_configure_weights+0xac>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096d0:	4a1e      	ldr	r2, [pc, #120]	; (800974c <network_configure_weights+0xac>)
 80096d2:	6013      	str	r3, [r2, #0]
    input_layer_bias_array.data = AI_PTR(weights + 307200);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80096da:	4a1c      	ldr	r2, [pc, #112]	; (800974c <network_configure_weights+0xac>)
 80096dc:	6093      	str	r3, [r2, #8]
    input_layer_bias_array.data_start = AI_PTR(weights + 307200);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80096e4:	4a19      	ldr	r2, [pc, #100]	; (800974c <network_configure_weights+0xac>)
 80096e6:	60d3      	str	r3, [r2, #12]
    hidden1_weights_array.format |= AI_FMT_FLAG_CONST;
 80096e8:	4b19      	ldr	r3, [pc, #100]	; (8009750 <network_configure_weights+0xb0>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096f0:	4a17      	ldr	r2, [pc, #92]	; (8009750 <network_configure_weights+0xb0>)
 80096f2:	6013      	str	r3, [r2, #0]
    hidden1_weights_array.data = AI_PTR(weights + 307712);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 80096fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80096fe:	4a14      	ldr	r2, [pc, #80]	; (8009750 <network_configure_weights+0xb0>)
 8009700:	6093      	str	r3, [r2, #8]
    hidden1_weights_array.data_start = AI_PTR(weights + 307712);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f503 2396 	add.w	r3, r3, #307200	; 0x4b000
 8009708:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800970c:	4a10      	ldr	r2, [pc, #64]	; (8009750 <network_configure_weights+0xb0>)
 800970e:	60d3      	str	r3, [r2, #12]
    hidden1_bias_array.format |= AI_FMT_FLAG_CONST;
 8009710:	4b10      	ldr	r3, [pc, #64]	; (8009754 <network_configure_weights+0xb4>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009718:	4a0e      	ldr	r2, [pc, #56]	; (8009754 <network_configure_weights+0xb4>)
 800971a:	6013      	str	r3, [r2, #0]
    hidden1_bias_array.data = AI_PTR(weights + 373248);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 8009722:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009726:	4a0b      	ldr	r2, [pc, #44]	; (8009754 <network_configure_weights+0xb4>)
 8009728:	6093      	str	r3, [r2, #8]
    hidden1_bias_array.data_start = AI_PTR(weights + 373248);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
 8009730:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009734:	4a07      	ldr	r2, [pc, #28]	; (8009754 <network_configure_weights+0xb4>)
 8009736:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8009738:	2301      	movs	r3, #1
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20000bac 	.word	0x20000bac
 800974c:	20000bbc 	.word	0x20000bbc
 8009750:	20000bcc 	.word	0x20000bcc
 8009754:	20000bdc 	.word	0x20000bdc

08009758 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b0a0      	sub	sp, #128	; 0x80
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f9f8 	bl	8009b58 <ai_platform_context_acquire>
 8009768:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d041      	beq.n	80097f4 <ai_network_get_info+0x9c>
 8009770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009772:	2b00      	cmp	r3, #0
 8009774:	d03e      	beq.n	80097f4 <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 8009776:	f107 0308 	add.w	r3, r7, #8
 800977a:	2274      	movs	r2, #116	; 0x74
 800977c:	2100      	movs	r1, #0
 800977e:	4618      	mov	r0, r3
 8009780:	f001 fcf7 	bl	800b172 <memset>
 8009784:	4b1e      	ldr	r3, [pc, #120]	; (8009800 <ai_network_get_info+0xa8>)
 8009786:	60bb      	str	r3, [r7, #8]
 8009788:	4b1e      	ldr	r3, [pc, #120]	; (8009804 <ai_network_get_info+0xac>)
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	4b1e      	ldr	r3, [pc, #120]	; (8009808 <ai_network_get_info+0xb0>)
 800978e:	613b      	str	r3, [r7, #16]
 8009790:	4b1e      	ldr	r3, [pc, #120]	; (800980c <ai_network_get_info+0xb4>)
 8009792:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8009794:	f000 f934 	bl	8009a00 <ai_platform_runtime_get_revision>
 8009798:	4603      	mov	r3, r0
    ai_network_report r = {
 800979a:	61bb      	str	r3, [r7, #24]
 800979c:	f000 f952 	bl	8009a44 <ai_platform_runtime_get_version>
 80097a0:	4603      	mov	r3, r0
 80097a2:	61fb      	str	r3, [r7, #28]
 80097a4:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <ai_network_get_info+0xb8>)
 80097a6:	623b      	str	r3, [r7, #32]
 80097a8:	2306      	movs	r3, #6
 80097aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80097ae:	f000 f96b 	bl	8009a88 <ai_platform_api_get_version>
 80097b2:	4603      	mov	r3, r0
 80097b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097b6:	f000 f99b 	bl	8009af0 <ai_platform_interface_api_get_version>
 80097ba:	4603      	mov	r3, r0
 80097bc:	633b      	str	r3, [r7, #48]	; 0x30
 80097be:	f44f 33b7 	mov.w	r3, #93696	; 0x16e00
 80097c2:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80097c4:	f107 0308 	add.w	r3, r7, #8
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa20 	bl	8009c10 <ai_platform_api_get_network_report>
 80097d0:	4603      	mov	r3, r0
 80097d2:	f083 0301 	eor.w	r3, r3, #1
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <ai_network_get_info+0x88>
 80097dc:	2300      	movs	r3, #0
 80097de:	e00a      	b.n	80097f6 <ai_network_get_info+0x9e>

    *report = r;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	2274      	movs	r2, #116	; 0x74
 80097ea:	4619      	mov	r1, r3
 80097ec:	f001 fcb6 	bl	800b15c <memcpy>
    return true;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e000      	b.n	80097f6 <ai_network_get_info+0x9e>
  }

  return false;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3780      	adds	r7, #128	; 0x80
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	0800d120 	.word	0x0800d120
 8009804:	0800d128 	.word	0x0800d128
 8009808:	0800d14c 	.word	0x0800d14c
 800980c:	0800d168 	.word	0x0800d168
 8009810:	0800d180 	.word	0x0800d180

08009814 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f9c5 	bl	8009bac <ai_platform_network_get_error>
 8009822:	4603      	mov	r3, r0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af02      	add	r7, sp, #8
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8009836:	2300      	movs	r3, #0
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	2304      	movs	r3, #4
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	2301      	movs	r3, #1
 8009840:	4a04      	ldr	r2, [pc, #16]	; (8009854 <ai_network_create+0x28>)
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fad9 	bl	8009dfc <ai_platform_network_create>
 800984a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20000af8 	.word	0x20000af8

08009858 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fb3d 	bl	8009ee0 <ai_platform_network_destroy>
 8009866:	4603      	mov	r3, r0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fb61 	bl	8009f44 <ai_platform_network_init>
 8009882:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <ai_network_init+0x1e>
 800988a:	2300      	movs	r3, #0
 800988c:	e02b      	b.n	80098e6 <ai_network_init+0x76>

  ai_bool ok = true;
 800988e:	2301      	movs	r3, #1
 8009890:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	4619      	mov	r1, r3
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7ff ff02 	bl	80096a0 <network_configure_weights>
 800989c:	4603      	mov	r3, r0
 800989e:	461a      	mov	r2, r3
 80098a0:	7afb      	ldrb	r3, [r7, #11]
 80098a2:	4013      	ands	r3, r2
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	bf14      	ite	ne
 80098a8:	2301      	movne	r3, #1
 80098aa:	2300      	moveq	r3, #0
 80098ac:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	3318      	adds	r3, #24
 80098b2:	4619      	mov	r1, r3
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f7ff feb5 	bl	8009624 <network_configure_activations>
 80098ba:	4603      	mov	r3, r0
 80098bc:	461a      	mov	r2, r3
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	4013      	ands	r3, r2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	bf14      	ite	ne
 80098c6:	2301      	movne	r3, #1
 80098c8:	2300      	moveq	r3, #0
 80098ca:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fbab 	bl	800a028 <ai_platform_network_post_init>
 80098d2:	4603      	mov	r3, r0
 80098d4:	461a      	mov	r2, r3
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	4013      	ands	r3, r2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bf14      	ite	ne
 80098de:	2301      	movne	r3, #1
 80098e0:	2300      	moveq	r3, #0
 80098e2:	72fb      	strb	r3, [r7, #11]

  return ok;
 80098e4:	7afb      	ldrb	r3, [r7, #11]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	68b9      	ldr	r1, [r7, #8]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 fbde 	bl	800a0c0 <ai_platform_network_process>
 8009904:	4603      	mov	r3, r0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
    0xf4, 0xba, 0x3a, 0x4f, 0xc7, 0xbb, 0x58, 0x8e, 0xf5, 0xbb,
    0xbf, 0x12, 0x1f, 0xbb, 0x97, 0x05, 0x93, 0x3a, 0x01, 0xa3,
    0x49, 0xbc, 0x5e, 0x1b, 0x96, 0xbb, 0xcf, 0x6e, 0xfe, 0xbb,
    0x71, 0x3e, 0xe9, 0x3b, 0x35, 0x2e, 0xab, 0x39, 0x85, 0xff,
    0xdc, 0xbb, 0xc8, 0xc8, 0x7c, 0xbc, 0x1a, 0xbe, 0xf6, 0xbb  };
  return AI_HANDLE_PTR(s_network_weights);
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <ai_network_data_weights_get+0x10>)
}
 8009916:	4618      	mov	r0, r3
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	0800d1c0 	.word	0x0800d1c0

08009924 <_ai_platform_get_io_buffers_info>:
 8009924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009928:	2400      	movs	r4, #0
 800992a:	b083      	sub	sp, #12
 800992c:	4606      	mov	r6, r0
 800992e:	4688      	mov	r8, r1
 8009930:	46a3      	mov	fp, r4
 8009932:	f04f 0a18 	mov.w	sl, #24
 8009936:	f04f 0901 	mov.w	r9, #1
 800993a:	b2a0      	uxth	r0, r4
 800993c:	b936      	cbnz	r6, 800994c <_ai_platform_get_io_buffers_info+0x28>
 800993e:	2800      	cmp	r0, #0
 8009940:	d03b      	beq.n	80099ba <_ai_platform_get_io_buffers_info+0x96>
 8009942:	68b3      	ldr	r3, [r6, #8]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f8c8 3000 	str.w	r3, [r8]
 800994a:	e036      	b.n	80099ba <_ai_platform_get_io_buffers_info+0x96>
 800994c:	8833      	ldrh	r3, [r6, #0]
 800994e:	429c      	cmp	r4, r3
 8009950:	d2f5      	bcs.n	800993e <_ai_platform_get_io_buffers_info+0x1a>
 8009952:	6873      	ldr	r3, [r6, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0f2      	beq.n	800993e <_ai_platform_get_io_buffers_info+0x1a>
 8009958:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800995c:	2d00      	cmp	r5, #0
 800995e:	d0ee      	beq.n	800993e <_ai_platform_get_io_buffers_info+0x1a>
 8009960:	68b3      	ldr	r3, [r6, #8]
 8009962:	69aa      	ldr	r2, [r5, #24]
 8009964:	6859      	ldr	r1, [r3, #4]
 8009966:	6810      	ldr	r0, [r2, #0]
 8009968:	689f      	ldr	r7, [r3, #8]
 800996a:	9101      	str	r1, [sp, #4]
 800996c:	f001 fb46 	bl	800affc <ai_array_to_buffer_fmt>
 8009970:	9901      	ldr	r1, [sp, #4]
 8009972:	fb0a f304 	mul.w	r3, sl, r4
 8009976:	18ca      	adds	r2, r1, r3
 8009978:	50c8      	str	r0, [r1, r3]
 800997a:	f8a2 9004 	strh.w	r9, [r2, #4]
 800997e:	68eb      	ldr	r3, [r5, #12]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	80d3      	strh	r3, [r2, #6]
 8009984:	68eb      	ldr	r3, [r5, #12]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	8113      	strh	r3, [r2, #8]
 800998a:	68eb      	ldr	r3, [r5, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	60d3      	str	r3, [r2, #12]
 8009990:	69ab      	ldr	r3, [r5, #24]
 8009992:	00e1      	lsls	r1, r4, #3
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	6113      	str	r3, [r2, #16]
 8009998:	1878      	adds	r0, r7, r1
 800999a:	b150      	cbz	r0, 80099b2 <_ai_platform_get_io_buffers_info+0x8e>
 800999c:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	6043      	str	r3, [r0, #4]
 80099a4:	b11b      	cbz	r3, 80099ae <_ai_platform_get_io_buffers_info+0x8a>
 80099a6:	885b      	ldrh	r3, [r3, #2]
 80099a8:	3300      	adds	r3, #0
 80099aa:	bf18      	it	ne
 80099ac:	2301      	movne	r3, #1
 80099ae:	507b      	str	r3, [r7, r1]
 80099b0:	b903      	cbnz	r3, 80099b4 <_ai_platform_get_io_buffers_info+0x90>
 80099b2:	2000      	movs	r0, #0
 80099b4:	6150      	str	r0, [r2, #20]
 80099b6:	3401      	adds	r4, #1
 80099b8:	e7bf      	b.n	800993a <_ai_platform_get_io_buffers_info+0x16>
 80099ba:	b003      	add	sp, #12
 80099bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099c0 <_platform_network_state_setup.isra.1>:
 80099c0:	b430      	push	{r4, r5}
 80099c2:	68dd      	ldr	r5, [r3, #12]
 80099c4:	695c      	ldr	r4, [r3, #20]
 80099c6:	68ed      	ldr	r5, [r5, #12]
 80099c8:	68e4      	ldr	r4, [r4, #12]
 80099ca:	fb04 f405 	mul.w	r4, r4, r5
 80099ce:	6084      	str	r4, [r0, #8]
 80099d0:	8809      	ldrh	r1, [r1, #0]
 80099d2:	fb04 f401 	mul.w	r4, r4, r1
 80099d6:	60c4      	str	r4, [r0, #12]
 80099d8:	6811      	ldr	r1, [r2, #0]
 80099da:	6041      	str	r1, [r0, #4]
 80099dc:	6812      	ldr	r2, [r2, #0]
 80099de:	4414      	add	r4, r2
 80099e0:	6004      	str	r4, [r0, #0]
 80099e2:	699a      	ldr	r2, [r3, #24]
 80099e4:	6814      	ldr	r4, [r2, #0]
 80099e6:	00a4      	lsls	r4, r4, #2
 80099e8:	d407      	bmi.n	80099fa <_platform_network_state_setup.isra.1+0x3a>
 80099ea:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80099ee:	1b64      	subs	r4, r4, r5
 80099f0:	4421      	add	r1, r4
 80099f2:	6091      	str	r1, [r2, #8]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	6842      	ldr	r2, [r0, #4]
 80099f8:	60da      	str	r2, [r3, #12]
 80099fa:	bc30      	pop	{r4, r5}
 80099fc:	4770      	bx	lr
	...

08009a00 <ai_platform_runtime_get_revision>:
 8009a00:	490a      	ldr	r1, [pc, #40]	; (8009a2c <ai_platform_runtime_get_revision+0x2c>)
 8009a02:	4a0b      	ldr	r2, [pc, #44]	; (8009a30 <ai_platform_runtime_get_revision+0x30>)
 8009a04:	680b      	ldr	r3, [r1, #0]
 8009a06:	2001      	movs	r0, #1
 8009a08:	f023 0301 	bic.w	r3, r3, #1
 8009a0c:	600b      	str	r3, [r1, #0]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	6010      	str	r0, [r2, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	2a00      	cmp	r2, #0
 8009a16:	d1fc      	bne.n	8009a12 <ai_platform_runtime_get_revision+0x12>
 8009a18:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <ai_platform_runtime_get_revision+0x34>)
 8009a1a:	4a07      	ldr	r2, [pc, #28]	; (8009a38 <ai_platform_runtime_get_revision+0x38>)
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <ai_platform_runtime_get_revision+0x3c>)
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d000      	beq.n	8009a28 <ai_platform_runtime_get_revision+0x28>
 8009a26:	e7fe      	b.n	8009a26 <ai_platform_runtime_get_revision+0x26>
 8009a28:	4805      	ldr	r0, [pc, #20]	; (8009a40 <ai_platform_runtime_get_revision+0x40>)
 8009a2a:	4770      	bx	lr
 8009a2c:	e0002000 	.word	0xe0002000
 8009a30:	40023008 	.word	0x40023008
 8009a34:	40023000 	.word	0x40023000
 8009a38:	f407a5c2 	.word	0xf407a5c2
 8009a3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009a40:	080685c0 	.word	0x080685c0

08009a44 <ai_platform_runtime_get_version>:
 8009a44:	490b      	ldr	r1, [pc, #44]	; (8009a74 <ai_platform_runtime_get_version+0x30>)
 8009a46:	4a0c      	ldr	r2, [pc, #48]	; (8009a78 <ai_platform_runtime_get_version+0x34>)
 8009a48:	680b      	ldr	r3, [r1, #0]
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	f023 0301 	bic.w	r3, r3, #1
 8009a50:	600b      	str	r3, [r1, #0]
 8009a52:	b082      	sub	sp, #8
 8009a54:	4613      	mov	r3, r2
 8009a56:	6010      	str	r0, [r2, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	2a00      	cmp	r2, #0
 8009a5c:	d1fc      	bne.n	8009a58 <ai_platform_runtime_get_version+0x14>
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <ai_platform_runtime_get_version+0x38>)
 8009a60:	4a07      	ldr	r2, [pc, #28]	; (8009a80 <ai_platform_runtime_get_version+0x3c>)
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <ai_platform_runtime_get_version+0x40>)
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d000      	beq.n	8009a6e <ai_platform_runtime_get_version+0x2a>
 8009a6c:	e7fe      	b.n	8009a6c <ai_platform_runtime_get_version+0x28>
 8009a6e:	2006      	movs	r0, #6
 8009a70:	b002      	add	sp, #8
 8009a72:	4770      	bx	lr
 8009a74:	e0002000 	.word	0xe0002000
 8009a78:	40023008 	.word	0x40023008
 8009a7c:	40023000 	.word	0x40023000
 8009a80:	f407a5c2 	.word	0xf407a5c2
 8009a84:	b5e8b5cd 	.word	0xb5e8b5cd

08009a88 <ai_platform_api_get_version>:
 8009a88:	4913      	ldr	r1, [pc, #76]	; (8009ad8 <ai_platform_api_get_version+0x50>)
 8009a8a:	4a14      	ldr	r2, [pc, #80]	; (8009adc <ai_platform_api_get_version+0x54>)
 8009a8c:	680b      	ldr	r3, [r1, #0]
 8009a8e:	2001      	movs	r0, #1
 8009a90:	f023 0301 	bic.w	r3, r3, #1
 8009a94:	600b      	str	r3, [r1, #0]
 8009a96:	b082      	sub	sp, #8
 8009a98:	4613      	mov	r3, r2
 8009a9a:	6010      	str	r0, [r2, #0]
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d1fc      	bne.n	8009a9c <ai_platform_api_get_version+0x14>
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <ai_platform_api_get_version+0x58>)
 8009aa4:	4a0f      	ldr	r2, [pc, #60]	; (8009ae4 <ai_platform_api_get_version+0x5c>)
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <ai_platform_api_get_version+0x60>)
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d000      	beq.n	8009ab2 <ai_platform_api_get_version+0x2a>
 8009ab0:	e7fe      	b.n	8009ab0 <ai_platform_api_get_version+0x28>
 8009ab2:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <ai_platform_api_get_version+0x64>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	f362 0007 	bfi	r0, r2, #0, #8
 8009abc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009ac0:	f362 200f 	bfi	r0, r2, #8, #8
 8009ac4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009ac8:	f362 4017 	bfi	r0, r2, #16, #8
 8009acc:	0e1b      	lsrs	r3, r3, #24
 8009ace:	f363 601f 	bfi	r0, r3, #24, #8
 8009ad2:	b002      	add	sp, #8
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	e0002000 	.word	0xe0002000
 8009adc:	40023008 	.word	0x40023008
 8009ae0:	40023000 	.word	0x40023000
 8009ae4:	f407a5c2 	.word	0xf407a5c2
 8009ae8:	b5e8b5cd 	.word	0xb5e8b5cd
 8009aec:	080685c4 	.word	0x080685c4

08009af0 <ai_platform_interface_api_get_version>:
 8009af0:	4913      	ldr	r1, [pc, #76]	; (8009b40 <ai_platform_interface_api_get_version+0x50>)
 8009af2:	4a14      	ldr	r2, [pc, #80]	; (8009b44 <ai_platform_interface_api_get_version+0x54>)
 8009af4:	680b      	ldr	r3, [r1, #0]
 8009af6:	2001      	movs	r0, #1
 8009af8:	f023 0301 	bic.w	r3, r3, #1
 8009afc:	600b      	str	r3, [r1, #0]
 8009afe:	b082      	sub	sp, #8
 8009b00:	4613      	mov	r3, r2
 8009b02:	6010      	str	r0, [r2, #0]
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d1fc      	bne.n	8009b04 <ai_platform_interface_api_get_version+0x14>
 8009b0a:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <ai_platform_interface_api_get_version+0x58>)
 8009b0c:	4a0f      	ldr	r2, [pc, #60]	; (8009b4c <ai_platform_interface_api_get_version+0x5c>)
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4b0f      	ldr	r3, [pc, #60]	; (8009b50 <ai_platform_interface_api_get_version+0x60>)
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d000      	beq.n	8009b1a <ai_platform_interface_api_get_version+0x2a>
 8009b18:	e7fe      	b.n	8009b18 <ai_platform_interface_api_get_version+0x28>
 8009b1a:	4b0e      	ldr	r3, [pc, #56]	; (8009b54 <ai_platform_interface_api_get_version+0x64>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	f362 0007 	bfi	r0, r2, #0, #8
 8009b24:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009b28:	f362 200f 	bfi	r0, r2, #8, #8
 8009b2c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009b30:	f362 4017 	bfi	r0, r2, #16, #8
 8009b34:	0e1b      	lsrs	r3, r3, #24
 8009b36:	f363 601f 	bfi	r0, r3, #24, #8
 8009b3a:	b002      	add	sp, #8
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	e0002000 	.word	0xe0002000
 8009b44:	40023008 	.word	0x40023008
 8009b48:	40023000 	.word	0x40023000
 8009b4c:	f407a5c2 	.word	0xf407a5c2
 8009b50:	b5e8b5cd 	.word	0xb5e8b5cd
 8009b54:	080685c8 	.word	0x080685c8

08009b58 <ai_platform_context_acquire>:
 8009b58:	b410      	push	{r4}
 8009b5a:	b120      	cbz	r0, 8009b66 <ai_platform_context_acquire+0xe>
 8009b5c:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <ai_platform_context_acquire+0x3c>)
 8009b5e:	6802      	ldr	r2, [r0, #0]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	bf18      	it	ne
 8009b64:	2000      	movne	r0, #0
 8009b66:	490c      	ldr	r1, [pc, #48]	; (8009b98 <ai_platform_context_acquire+0x40>)
 8009b68:	4a0c      	ldr	r2, [pc, #48]	; (8009b9c <ai_platform_context_acquire+0x44>)
 8009b6a:	680b      	ldr	r3, [r1, #0]
 8009b6c:	2401      	movs	r4, #1
 8009b6e:	f023 0301 	bic.w	r3, r3, #1
 8009b72:	600b      	str	r3, [r1, #0]
 8009b74:	4613      	mov	r3, r2
 8009b76:	6014      	str	r4, [r2, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	d1fc      	bne.n	8009b78 <ai_platform_context_acquire+0x20>
 8009b7e:	4b08      	ldr	r3, [pc, #32]	; (8009ba0 <ai_platform_context_acquire+0x48>)
 8009b80:	4a08      	ldr	r2, [pc, #32]	; (8009ba4 <ai_platform_context_acquire+0x4c>)
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4b08      	ldr	r3, [pc, #32]	; (8009ba8 <ai_platform_context_acquire+0x50>)
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d000      	beq.n	8009b8e <ai_platform_context_acquire+0x36>
 8009b8c:	e7fe      	b.n	8009b8c <ai_platform_context_acquire+0x34>
 8009b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	a1c00100 	.word	0xa1c00100
 8009b98:	e0002000 	.word	0xe0002000
 8009b9c:	40023008 	.word	0x40023008
 8009ba0:	40023000 	.word	0x40023000
 8009ba4:	f407a5c2 	.word	0xf407a5c2
 8009ba8:	b5e8b5cd 	.word	0xb5e8b5cd

08009bac <ai_platform_network_get_error>:
 8009bac:	b410      	push	{r4}
 8009bae:	b120      	cbz	r0, 8009bba <ai_platform_network_get_error+0xe>
 8009bb0:	4b11      	ldr	r3, [pc, #68]	; (8009bf8 <ai_platform_network_get_error+0x4c>)
 8009bb2:	6802      	ldr	r2, [r0, #0]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	bf18      	it	ne
 8009bb8:	2000      	movne	r0, #0
 8009bba:	4910      	ldr	r1, [pc, #64]	; (8009bfc <ai_platform_network_get_error+0x50>)
 8009bbc:	4a10      	ldr	r2, [pc, #64]	; (8009c00 <ai_platform_network_get_error+0x54>)
 8009bbe:	680b      	ldr	r3, [r1, #0]
 8009bc0:	2401      	movs	r4, #1
 8009bc2:	f023 0301 	bic.w	r3, r3, #1
 8009bc6:	600b      	str	r3, [r1, #0]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	6014      	str	r4, [r2, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	2a00      	cmp	r2, #0
 8009bd0:	d1fc      	bne.n	8009bcc <ai_platform_network_get_error+0x20>
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	; (8009c04 <ai_platform_network_get_error+0x58>)
 8009bd4:	4a0c      	ldr	r2, [pc, #48]	; (8009c08 <ai_platform_network_get_error+0x5c>)
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <ai_platform_network_get_error+0x60>)
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d000      	beq.n	8009be2 <ai_platform_network_get_error+0x36>
 8009be0:	e7fe      	b.n	8009be0 <ai_platform_network_get_error+0x34>
 8009be2:	b120      	cbz	r0, 8009bee <ai_platform_network_get_error+0x42>
 8009be4:	3010      	adds	r0, #16
 8009be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bea:	f000 bc75 	b.w	800a4d8 <core_get_error>
 8009bee:	f241 0010 	movw	r0, #4112	; 0x1010
 8009bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	a1c00100 	.word	0xa1c00100
 8009bfc:	e0002000 	.word	0xe0002000
 8009c00:	40023008 	.word	0x40023008
 8009c04:	40023000 	.word	0x40023000
 8009c08:	f407a5c2 	.word	0xf407a5c2
 8009c0c:	b5e8b5cd 	.word	0xb5e8b5cd

08009c10 <ai_platform_api_get_network_report>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	460c      	mov	r4, r1
 8009c14:	4605      	mov	r5, r0
 8009c16:	b120      	cbz	r0, 8009c22 <ai_platform_api_get_network_report+0x12>
 8009c18:	4b71      	ldr	r3, [pc, #452]	; (8009de0 <ai_platform_api_get_network_report+0x1d0>)
 8009c1a:	6802      	ldr	r2, [r0, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	bf18      	it	ne
 8009c20:	2500      	movne	r5, #0
 8009c22:	4970      	ldr	r1, [pc, #448]	; (8009de4 <ai_platform_api_get_network_report+0x1d4>)
 8009c24:	4a70      	ldr	r2, [pc, #448]	; (8009de8 <ai_platform_api_get_network_report+0x1d8>)
 8009c26:	680b      	ldr	r3, [r1, #0]
 8009c28:	2001      	movs	r0, #1
 8009c2a:	f023 0301 	bic.w	r3, r3, #1
 8009c2e:	600b      	str	r3, [r1, #0]
 8009c30:	4611      	mov	r1, r2
 8009c32:	6010      	str	r0, [r2, #0]
 8009c34:	680b      	ldr	r3, [r1, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1fc      	bne.n	8009c34 <ai_platform_api_get_network_report+0x24>
 8009c3a:	4a6c      	ldr	r2, [pc, #432]	; (8009dec <ai_platform_api_get_network_report+0x1dc>)
 8009c3c:	496c      	ldr	r1, [pc, #432]	; (8009df0 <ai_platform_api_get_network_report+0x1e0>)
 8009c3e:	6011      	str	r1, [r2, #0]
 8009c40:	6811      	ldr	r1, [r2, #0]
 8009c42:	4a6c      	ldr	r2, [pc, #432]	; (8009df4 <ai_platform_api_get_network_report+0x1e4>)
 8009c44:	4291      	cmp	r1, r2
 8009c46:	d000      	beq.n	8009c4a <ai_platform_api_get_network_report+0x3a>
 8009c48:	e7fe      	b.n	8009c48 <ai_platform_api_get_network_report+0x38>
 8009c4a:	2d00      	cmp	r5, #0
 8009c4c:	d062      	beq.n	8009d14 <ai_platform_api_get_network_report+0x104>
 8009c4e:	2c00      	cmp	r4, #0
 8009c50:	d062      	beq.n	8009d18 <ai_platform_api_get_network_report+0x108>
 8009c52:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009c54:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	d056      	beq.n	8009d08 <ai_platform_api_get_network_report+0xf8>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009c5e:	6913      	ldr	r3, [r2, #16]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d00c      	beq.n	8009c7e <ai_platform_api_get_network_report+0x6e>
 8009c64:	b15b      	cbz	r3, 8009c7e <ai_platform_api_get_network_report+0x6e>
 8009c66:	2202      	movs	r2, #2
 8009c68:	e003      	b.n	8009c72 <ai_platform_api_get_network_report+0x62>
 8009c6a:	1c50      	adds	r0, r2, #1
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	b121      	cbz	r1, 8009c7a <ai_platform_api_get_network_report+0x6a>
 8009c70:	4602      	mov	r2, r0
 8009c72:	66e2      	str	r2, [r4, #108]	; 0x6c
 8009c74:	6919      	ldr	r1, [r3, #16]
 8009c76:	4299      	cmp	r1, r3
 8009c78:	d1f7      	bne.n	8009c6a <ai_platform_api_get_network_report+0x5a>
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d044      	beq.n	8009d08 <ai_platform_api_get_network_report+0xf8>
 8009c7e:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8009c82:	b100      	cbz	r0, 8009c86 <ai_platform_api_get_network_report+0x76>
 8009c84:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8009c86:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8009c8a:	f7ff fe4b 	bl	8009924 <_ai_platform_get_io_buffers_info>
 8009c8e:	4606      	mov	r6, r0
 8009c90:	8620      	strh	r0, [r4, #48]	; 0x30
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d05f      	beq.n	8009d56 <ai_platform_api_get_network_report+0x146>
 8009c96:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	bf8a      	itet	hi
 8009c9e:	6ce8      	ldrhi	r0, [r5, #76]	; 0x4c
 8009ca0:	2000      	movls	r0, #0
 8009ca2:	300c      	addhi	r0, #12
 8009ca4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8009ca8:	f7ff fe3c 	bl	8009924 <_ai_platform_get_io_buffers_info>
 8009cac:	4606      	mov	r6, r0
 8009cae:	8660      	strh	r0, [r4, #50]	; 0x32
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d048      	beq.n	8009d46 <ai_platform_api_get_network_report+0x136>
 8009cb4:	686b      	ldr	r3, [r5, #4]
 8009cb6:	6723      	str	r3, [r4, #112]	; 0x70
 8009cb8:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8009cbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009cbe:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8009cc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009cc4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009cc8:	e886 0003 	stmia.w	r6, {r0, r1}
 8009ccc:	f105 0718 	add.w	r7, r5, #24
 8009cd0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009cd2:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8009cd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009cd8:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009cdc:	e886 0003 	stmia.w	r6, {r0, r1}
 8009ce0:	4a40      	ldr	r2, [pc, #256]	; (8009de4 <ai_platform_api_get_network_report+0x1d4>)
 8009ce2:	4941      	ldr	r1, [pc, #260]	; (8009de8 <ai_platform_api_get_network_report+0x1d8>)
 8009ce4:	6813      	ldr	r3, [r2, #0]
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f023 0301 	bic.w	r3, r3, #1
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	460a      	mov	r2, r1
 8009cf0:	6008      	str	r0, [r1, #0]
 8009cf2:	6813      	ldr	r3, [r2, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1fc      	bne.n	8009cf2 <ai_platform_api_get_network_report+0xe2>
 8009cf8:	4b3c      	ldr	r3, [pc, #240]	; (8009dec <ai_platform_api_get_network_report+0x1dc>)
 8009cfa:	493d      	ldr	r1, [pc, #244]	; (8009df0 <ai_platform_api_get_network_report+0x1e0>)
 8009cfc:	6019      	str	r1, [r3, #0]
 8009cfe:	6819      	ldr	r1, [r3, #0]
 8009d00:	4b3c      	ldr	r3, [pc, #240]	; (8009df4 <ai_platform_api_get_network_report+0x1e4>)
 8009d02:	4299      	cmp	r1, r3
 8009d04:	d00a      	beq.n	8009d1c <ai_platform_api_get_network_report+0x10c>
 8009d06:	e7fe      	b.n	8009d06 <ai_platform_api_get_network_report+0xf6>
 8009d08:	f105 0010 	add.w	r0, r5, #16
 8009d0c:	2218      	movs	r2, #24
 8009d0e:	2111      	movs	r1, #17
 8009d10:	f000 fbe8 	bl	800a4e4 <core_set_error>
 8009d14:	2000      	movs	r0, #0
 8009d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d18:	4620      	mov	r0, r4
 8009d1a:	e7fc      	b.n	8009d16 <ai_platform_api_get_network_report+0x106>
 8009d1c:	4b36      	ldr	r3, [pc, #216]	; (8009df8 <ai_platform_api_get_network_report+0x1e8>)
 8009d1e:	4831      	ldr	r0, [pc, #196]	; (8009de4 <ai_platform_api_get_network_report+0x1d4>)
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	6803      	ldr	r3, [r0, #0]
 8009d24:	4930      	ldr	r1, [pc, #192]	; (8009de8 <ai_platform_api_get_network_report+0x1d8>)
 8009d26:	f023 0301 	bic.w	r3, r3, #1
 8009d2a:	6003      	str	r3, [r0, #0]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	680b      	ldr	r3, [r1, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1fc      	bne.n	8009d30 <ai_platform_api_get_network_report+0x120>
 8009d36:	4b2d      	ldr	r3, [pc, #180]	; (8009dec <ai_platform_api_get_network_report+0x1dc>)
 8009d38:	4a2d      	ldr	r2, [pc, #180]	; (8009df0 <ai_platform_api_get_network_report+0x1e0>)
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	4b2d      	ldr	r3, [pc, #180]	; (8009df4 <ai_platform_api_get_network_report+0x1e4>)
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d010      	beq.n	8009d66 <ai_platform_api_get_network_report+0x156>
 8009d44:	e7fe      	b.n	8009d44 <ai_platform_api_get_network_report+0x134>
 8009d46:	f105 0010 	add.w	r0, r5, #16
 8009d4a:	2218      	movs	r2, #24
 8009d4c:	2113      	movs	r1, #19
 8009d4e:	f000 fbc9 	bl	800a4e4 <core_set_error>
 8009d52:	4630      	mov	r0, r6
 8009d54:	e7df      	b.n	8009d16 <ai_platform_api_get_network_report+0x106>
 8009d56:	f105 0010 	add.w	r0, r5, #16
 8009d5a:	2218      	movs	r2, #24
 8009d5c:	2112      	movs	r1, #18
 8009d5e:	f000 fbc1 	bl	800a4e4 <core_set_error>
 8009d62:	4630      	mov	r0, r6
 8009d64:	e7d7      	b.n	8009d16 <ai_platform_api_get_network_report+0x106>
 8009d66:	2306      	movs	r3, #6
 8009d68:	481e      	ldr	r0, [pc, #120]	; (8009de4 <ai_platform_api_get_network_report+0x1d4>)
 8009d6a:	6163      	str	r3, [r4, #20]
 8009d6c:	6803      	ldr	r3, [r0, #0]
 8009d6e:	4a1e      	ldr	r2, [pc, #120]	; (8009de8 <ai_platform_api_get_network_report+0x1d8>)
 8009d70:	f023 0301 	bic.w	r3, r3, #1
 8009d74:	6003      	str	r3, [r0, #0]
 8009d76:	2301      	movs	r3, #1
 8009d78:	600b      	str	r3, [r1, #0]
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1fc      	bne.n	8009d7a <ai_platform_api_get_network_report+0x16a>
 8009d80:	4b1a      	ldr	r3, [pc, #104]	; (8009dec <ai_platform_api_get_network_report+0x1dc>)
 8009d82:	491b      	ldr	r1, [pc, #108]	; (8009df0 <ai_platform_api_get_network_report+0x1e0>)
 8009d84:	6019      	str	r1, [r3, #0]
 8009d86:	6819      	ldr	r1, [r3, #0]
 8009d88:	4b1a      	ldr	r3, [pc, #104]	; (8009df4 <ai_platform_api_get_network_report+0x1e4>)
 8009d8a:	4299      	cmp	r1, r3
 8009d8c:	d000      	beq.n	8009d90 <ai_platform_api_get_network_report+0x180>
 8009d8e:	e7fe      	b.n	8009d8e <ai_platform_api_get_network_report+0x17e>
 8009d90:	f240 1301 	movw	r3, #257	; 0x101
 8009d94:	4913      	ldr	r1, [pc, #76]	; (8009de4 <ai_platform_api_get_network_report+0x1d4>)
 8009d96:	6263      	str	r3, [r4, #36]	; 0x24
 8009d98:	680b      	ldr	r3, [r1, #0]
 8009d9a:	4813      	ldr	r0, [pc, #76]	; (8009de8 <ai_platform_api_get_network_report+0x1d8>)
 8009d9c:	f023 0301 	bic.w	r3, r3, #1
 8009da0:	600b      	str	r3, [r1, #0]
 8009da2:	2301      	movs	r3, #1
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	6802      	ldr	r2, [r0, #0]
 8009da8:	2a00      	cmp	r2, #0
 8009daa:	d1fc      	bne.n	8009da6 <ai_platform_api_get_network_report+0x196>
 8009dac:	4b0f      	ldr	r3, [pc, #60]	; (8009dec <ai_platform_api_get_network_report+0x1dc>)
 8009dae:	4910      	ldr	r1, [pc, #64]	; (8009df0 <ai_platform_api_get_network_report+0x1e0>)
 8009db0:	6019      	str	r1, [r3, #0]
 8009db2:	6819      	ldr	r1, [r3, #0]
 8009db4:	4b0f      	ldr	r3, [pc, #60]	; (8009df4 <ai_platform_api_get_network_report+0x1e4>)
 8009db6:	4299      	cmp	r1, r3
 8009db8:	d000      	beq.n	8009dbc <ai_platform_api_get_network_report+0x1ac>
 8009dba:	e7fe      	b.n	8009dba <ai_platform_api_get_network_report+0x1aa>
 8009dbc:	f240 4301 	movw	r3, #1025	; 0x401
 8009dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dc2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009dc4:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8009dc8:	0e19      	lsrs	r1, r3, #24
 8009dca:	0c1a      	lsrs	r2, r3, #16
 8009dcc:	0a1b      	lsrs	r3, r3, #8
 8009dce:	f884 1020 	strb.w	r1, [r4, #32]
 8009dd2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8009dd6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8009dda:	2001      	movs	r0, #1
 8009ddc:	e79b      	b.n	8009d16 <ai_platform_api_get_network_report+0x106>
 8009dde:	bf00      	nop
 8009de0:	a1c00100 	.word	0xa1c00100
 8009de4:	e0002000 	.word	0xe0002000
 8009de8:	40023008 	.word	0x40023008
 8009dec:	40023000 	.word	0x40023000
 8009df0:	f407a5c2 	.word	0xf407a5c2
 8009df4:	b5e8b5cd 	.word	0xb5e8b5cd
 8009df8:	080685c0 	.word	0x080685c0

08009dfc <ai_platform_network_create>:
 8009dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e00:	4f30      	ldr	r7, [pc, #192]	; (8009ec4 <ai_platform_network_create+0xc8>)
 8009e02:	4e31      	ldr	r6, [pc, #196]	; (8009ec8 <ai_platform_network_create+0xcc>)
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	b083      	sub	sp, #12
 8009e08:	f021 0101 	bic.w	r1, r1, #1
 8009e0c:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8009e10:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8009e14:	6039      	str	r1, [r7, #0]
 8009e16:	2101      	movs	r1, #1
 8009e18:	6031      	str	r1, [r6, #0]
 8009e1a:	6831      	ldr	r1, [r6, #0]
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	d1fc      	bne.n	8009e1a <ai_platform_network_create+0x1e>
 8009e20:	492a      	ldr	r1, [pc, #168]	; (8009ecc <ai_platform_network_create+0xd0>)
 8009e22:	4d2b      	ldr	r5, [pc, #172]	; (8009ed0 <ai_platform_network_create+0xd4>)
 8009e24:	600d      	str	r5, [r1, #0]
 8009e26:	680d      	ldr	r5, [r1, #0]
 8009e28:	492a      	ldr	r1, [pc, #168]	; (8009ed4 <ai_platform_network_create+0xd8>)
 8009e2a:	428d      	cmp	r5, r1
 8009e2c:	d000      	beq.n	8009e30 <ai_platform_network_create+0x34>
 8009e2e:	e7fe      	b.n	8009e2e <ai_platform_network_create+0x32>
 8009e30:	b1e0      	cbz	r0, 8009e6c <ai_platform_network_create+0x70>
 8009e32:	4680      	mov	r8, r0
 8009e34:	461d      	mov	r5, r3
 8009e36:	4b28      	ldr	r3, [pc, #160]	; (8009ed8 <ai_platform_network_create+0xdc>)
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	f8c8 2000 	str.w	r2, [r8]
 8009e3e:	4617      	mov	r7, r2
 8009e40:	f000 fb48 	bl	800a4d4 <core_init>
 8009e44:	b1b8      	cbz	r0, 8009e76 <ai_platform_network_create+0x7a>
 8009e46:	4a1f      	ldr	r2, [pc, #124]	; (8009ec4 <ai_platform_network_create+0xc8>)
 8009e48:	491f      	ldr	r1, [pc, #124]	; (8009ec8 <ai_platform_network_create+0xcc>)
 8009e4a:	6813      	ldr	r3, [r2, #0]
 8009e4c:	f023 0301 	bic.w	r3, r3, #1
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	2301      	movs	r3, #1
 8009e54:	6033      	str	r3, [r6, #0]
 8009e56:	680e      	ldr	r6, [r1, #0]
 8009e58:	2e00      	cmp	r6, #0
 8009e5a:	d1fc      	bne.n	8009e56 <ai_platform_network_create+0x5a>
 8009e5c:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <ai_platform_network_create+0xd0>)
 8009e5e:	4a1c      	ldr	r2, [pc, #112]	; (8009ed0 <ai_platform_network_create+0xd4>)
 8009e60:	601a      	str	r2, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	4b1b      	ldr	r3, [pc, #108]	; (8009ed4 <ai_platform_network_create+0xd8>)
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d016      	beq.n	8009e98 <ai_platform_network_create+0x9c>
 8009e6a:	e7fe      	b.n	8009e6a <ai_platform_network_create+0x6e>
 8009e6c:	f241 0010 	movw	r0, #4112	; 0x1010
 8009e70:	b003      	add	sp, #12
 8009e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e76:	062d      	lsls	r5, r5, #24
 8009e78:	0424      	lsls	r4, r4, #16
 8009e7a:	2130      	movs	r1, #48	; 0x30
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f8c8 3000 	str.w	r3, [r8]
 8009e82:	2210      	movs	r2, #16
 8009e84:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 8009e88:	2000      	movs	r0, #0
 8009e8a:	432b      	orrs	r3, r5
 8009e8c:	f361 0007 	bfi	r0, r1, #0, #8
 8009e90:	663b      	str	r3, [r7, #96]	; 0x60
 8009e92:	f362 201f 	bfi	r0, r2, #8, #24
 8009e96:	e7eb      	b.n	8009e70 <ai_platform_network_create+0x74>
 8009e98:	062d      	lsls	r5, r5, #24
 8009e9a:	0424      	lsls	r4, r4, #16
 8009e9c:	ea45 0304 	orr.w	r3, r5, r4
 8009ea0:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8009ea4:	d001      	beq.n	8009eaa <ai_platform_network_create+0xae>
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	e7e8      	b.n	8009e7c <ai_platform_network_create+0x80>
 8009eaa:	a802      	add	r0, sp, #8
 8009eac:	4b0b      	ldr	r3, [pc, #44]	; (8009edc <ai_platform_network_create+0xe0>)
 8009eae:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009eb2:	f000 ffe7 	bl	800ae84 <ai_check_custom_types>
 8009eb6:	b110      	cbz	r0, 8009ebe <ai_platform_network_create+0xc2>
 8009eb8:	4632      	mov	r2, r6
 8009eba:	4631      	mov	r1, r6
 8009ebc:	e7e2      	b.n	8009e84 <ai_platform_network_create+0x88>
 8009ebe:	2102      	movs	r1, #2
 8009ec0:	e7dc      	b.n	8009e7c <ai_platform_network_create+0x80>
 8009ec2:	bf00      	nop
 8009ec4:	e0002000 	.word	0xe0002000
 8009ec8:	40023008 	.word	0x40023008
 8009ecc:	40023000 	.word	0x40023000
 8009ed0:	f407a5c2 	.word	0xf407a5c2
 8009ed4:	b5e8b5cd 	.word	0xb5e8b5cd
 8009ed8:	a1c00100 	.word	0xa1c00100
 8009edc:	84048403 	.word	0x84048403

08009ee0 <ai_platform_network_destroy>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	b1d8      	cbz	r0, 8009f1c <ai_platform_network_destroy+0x3c>
 8009ee4:	4a11      	ldr	r2, [pc, #68]	; (8009f2c <ai_platform_network_destroy+0x4c>)
 8009ee6:	6803      	ldr	r3, [r0, #0]
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	bf0c      	ite	eq
 8009eec:	4603      	moveq	r3, r0
 8009eee:	2300      	movne	r3, #0
 8009ef0:	4c0f      	ldr	r4, [pc, #60]	; (8009f30 <ai_platform_network_destroy+0x50>)
 8009ef2:	4910      	ldr	r1, [pc, #64]	; (8009f34 <ai_platform_network_destroy+0x54>)
 8009ef4:	6822      	ldr	r2, [r4, #0]
 8009ef6:	2501      	movs	r5, #1
 8009ef8:	f022 0201 	bic.w	r2, r2, #1
 8009efc:	6022      	str	r2, [r4, #0]
 8009efe:	460a      	mov	r2, r1
 8009f00:	600d      	str	r5, [r1, #0]
 8009f02:	6814      	ldr	r4, [r2, #0]
 8009f04:	2c00      	cmp	r4, #0
 8009f06:	d1fc      	bne.n	8009f02 <ai_platform_network_destroy+0x22>
 8009f08:	4a0b      	ldr	r2, [pc, #44]	; (8009f38 <ai_platform_network_destroy+0x58>)
 8009f0a:	490c      	ldr	r1, [pc, #48]	; (8009f3c <ai_platform_network_destroy+0x5c>)
 8009f0c:	6011      	str	r1, [r2, #0]
 8009f0e:	6811      	ldr	r1, [r2, #0]
 8009f10:	4a0b      	ldr	r2, [pc, #44]	; (8009f40 <ai_platform_network_destroy+0x60>)
 8009f12:	4291      	cmp	r1, r2
 8009f14:	d000      	beq.n	8009f18 <ai_platform_network_destroy+0x38>
 8009f16:	e7fe      	b.n	8009f16 <ai_platform_network_destroy+0x36>
 8009f18:	b913      	cbnz	r3, 8009f20 <ai_platform_network_destroy+0x40>
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	e7e7      	b.n	8009ef0 <ai_platform_network_destroy+0x10>
 8009f20:	4618      	mov	r0, r3
 8009f22:	f001 f853 	bl	800afcc <ai_layers_destroy_all>
 8009f26:	4620      	mov	r0, r4
 8009f28:	bd38      	pop	{r3, r4, r5, pc}
 8009f2a:	bf00      	nop
 8009f2c:	a1c00100 	.word	0xa1c00100
 8009f30:	e0002000 	.word	0xe0002000
 8009f34:	40023008 	.word	0x40023008
 8009f38:	40023000 	.word	0x40023000
 8009f3c:	f407a5c2 	.word	0xf407a5c2
 8009f40:	b5e8b5cd 	.word	0xb5e8b5cd

08009f44 <ai_platform_network_init>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	460c      	mov	r4, r1
 8009f48:	4605      	mov	r5, r0
 8009f4a:	b120      	cbz	r0, 8009f56 <ai_platform_network_init+0x12>
 8009f4c:	4b30      	ldr	r3, [pc, #192]	; (800a010 <ai_platform_network_init+0xcc>)
 8009f4e:	6802      	ldr	r2, [r0, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	bf18      	it	ne
 8009f54:	2500      	movne	r5, #0
 8009f56:	492f      	ldr	r1, [pc, #188]	; (800a014 <ai_platform_network_init+0xd0>)
 8009f58:	4a2f      	ldr	r2, [pc, #188]	; (800a018 <ai_platform_network_init+0xd4>)
 8009f5a:	680b      	ldr	r3, [r1, #0]
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	f023 0301 	bic.w	r3, r3, #1
 8009f62:	600b      	str	r3, [r1, #0]
 8009f64:	4613      	mov	r3, r2
 8009f66:	6010      	str	r0, [r2, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	d1fc      	bne.n	8009f68 <ai_platform_network_init+0x24>
 8009f6e:	4b2b      	ldr	r3, [pc, #172]	; (800a01c <ai_platform_network_init+0xd8>)
 8009f70:	4a2b      	ldr	r2, [pc, #172]	; (800a020 <ai_platform_network_init+0xdc>)
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	4b2b      	ldr	r3, [pc, #172]	; (800a024 <ai_platform_network_init+0xe0>)
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d000      	beq.n	8009f7e <ai_platform_network_init+0x3a>
 8009f7c:	e7fe      	b.n	8009f7c <ai_platform_network_init+0x38>
 8009f7e:	b1dd      	cbz	r5, 8009fb8 <ai_platform_network_init+0x74>
 8009f80:	b1e4      	cbz	r4, 8009fbc <ai_platform_network_init+0x78>
 8009f82:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8009f84:	6926      	ldr	r6, [r4, #16]
 8009f86:	b30f      	cbz	r7, 8009fcc <ai_platform_network_init+0x88>
 8009f88:	b38e      	cbz	r6, 8009fee <ai_platform_network_init+0xaa>
 8009f8a:	4627      	mov	r7, r4
 8009f8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009f8e:	f105 0618 	add.w	r6, r5, #24
 8009f92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009f94:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009f98:	e886 0003 	stmia.w	r6, {r0, r1}
 8009f9c:	3418      	adds	r4, #24
 8009f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fa0:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8009fa4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009fa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009faa:	2303      	movs	r3, #3
 8009fac:	e886 0003 	stmia.w	r6, {r0, r1}
 8009fb0:	60eb      	str	r3, [r5, #12]
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 ff90 	bl	800aed8 <ai_layers_init_all>
 8009fb8:	4628      	mov	r0, r5
 8009fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fbc:	f105 0010 	add.w	r0, r5, #16
 8009fc0:	2211      	movs	r2, #17
 8009fc2:	2110      	movs	r1, #16
 8009fc4:	4625      	mov	r5, r4
 8009fc6:	f000 fa8d 	bl	800a4e4 <core_set_error>
 8009fca:	e7f5      	b.n	8009fb8 <ai_platform_network_init+0x74>
 8009fcc:	8c21      	ldrh	r1, [r4, #32]
 8009fce:	8be2      	ldrh	r2, [r4, #30]
 8009fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fd2:	fb02 f201 	mul.w	r2, r2, r1
 8009fd6:	fb03 f302 	mul.w	r3, r3, r2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d0d4      	beq.n	8009f88 <ai_platform_network_init+0x44>
 8009fde:	f105 0010 	add.w	r0, r5, #16
 8009fe2:	2213      	movs	r2, #19
 8009fe4:	2110      	movs	r1, #16
 8009fe6:	463d      	mov	r5, r7
 8009fe8:	f000 fa7c 	bl	800a4e4 <core_set_error>
 8009fec:	e7e4      	b.n	8009fb8 <ai_platform_network_init+0x74>
 8009fee:	8921      	ldrh	r1, [r4, #8]
 8009ff0:	88e2      	ldrh	r2, [r4, #6]
 8009ff2:	68e3      	ldr	r3, [r4, #12]
 8009ff4:	fb02 f201 	mul.w	r2, r2, r1
 8009ff8:	fb03 f302 	mul.w	r3, r3, r2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d0c4      	beq.n	8009f8a <ai_platform_network_init+0x46>
 800a000:	f105 0010 	add.w	r0, r5, #16
 800a004:	2212      	movs	r2, #18
 800a006:	2110      	movs	r1, #16
 800a008:	4635      	mov	r5, r6
 800a00a:	f000 fa6b 	bl	800a4e4 <core_set_error>
 800a00e:	e7d3      	b.n	8009fb8 <ai_platform_network_init+0x74>
 800a010:	a1c00100 	.word	0xa1c00100
 800a014:	e0002000 	.word	0xe0002000
 800a018:	40023008 	.word	0x40023008
 800a01c:	40023000 	.word	0x40023000
 800a020:	f407a5c2 	.word	0xf407a5c2
 800a024:	b5e8b5cd 	.word	0xb5e8b5cd

0800a028 <ai_platform_network_post_init>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4604      	mov	r4, r0
 800a02c:	b120      	cbz	r0, 800a038 <ai_platform_network_post_init+0x10>
 800a02e:	4b1e      	ldr	r3, [pc, #120]	; (800a0a8 <ai_platform_network_post_init+0x80>)
 800a030:	6802      	ldr	r2, [r0, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	bf18      	it	ne
 800a036:	2400      	movne	r4, #0
 800a038:	491c      	ldr	r1, [pc, #112]	; (800a0ac <ai_platform_network_post_init+0x84>)
 800a03a:	4a1d      	ldr	r2, [pc, #116]	; (800a0b0 <ai_platform_network_post_init+0x88>)
 800a03c:	680b      	ldr	r3, [r1, #0]
 800a03e:	2001      	movs	r0, #1
 800a040:	f023 0301 	bic.w	r3, r3, #1
 800a044:	600b      	str	r3, [r1, #0]
 800a046:	4613      	mov	r3, r2
 800a048:	6010      	str	r0, [r2, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	d1fc      	bne.n	800a04a <ai_platform_network_post_init+0x22>
 800a050:	4b18      	ldr	r3, [pc, #96]	; (800a0b4 <ai_platform_network_post_init+0x8c>)
 800a052:	4a19      	ldr	r2, [pc, #100]	; (800a0b8 <ai_platform_network_post_init+0x90>)
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	4b18      	ldr	r3, [pc, #96]	; (800a0bc <ai_platform_network_post_init+0x94>)
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d000      	beq.n	800a060 <ai_platform_network_post_init+0x38>
 800a05e:	e7fe      	b.n	800a05e <ai_platform_network_post_init+0x36>
 800a060:	b1bc      	cbz	r4, 800a092 <ai_platform_network_post_init+0x6a>
 800a062:	68e3      	ldr	r3, [r4, #12]
 800a064:	f013 0502 	ands.w	r5, r3, #2
 800a068:	d015      	beq.n	800a096 <ai_platform_network_post_init+0x6e>
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 ff48 	bl	800af00 <ai_layers_post_init_all>
 800a070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a072:	b163      	cbz	r3, 800a08e <ai_platform_network_post_init+0x66>
 800a074:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800a076:	b91d      	cbnz	r5, 800a080 <ai_platform_network_post_init+0x58>
 800a078:	e009      	b.n	800a08e <ai_platform_network_post_init+0x66>
 800a07a:	461d      	mov	r5, r3
 800a07c:	b13b      	cbz	r3, 800a08e <ai_platform_network_post_init+0x66>
 800a07e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a080:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a082:	4629      	mov	r1, r5
 800a084:	2000      	movs	r0, #0
 800a086:	4798      	blx	r3
 800a088:	692b      	ldr	r3, [r5, #16]
 800a08a:	42ab      	cmp	r3, r5
 800a08c:	d1f5      	bne.n	800a07a <ai_platform_network_post_init+0x52>
 800a08e:	2001      	movs	r0, #1
 800a090:	bd38      	pop	{r3, r4, r5, pc}
 800a092:	4620      	mov	r0, r4
 800a094:	bd38      	pop	{r3, r4, r5, pc}
 800a096:	f104 0010 	add.w	r0, r4, #16
 800a09a:	2210      	movs	r2, #16
 800a09c:	2111      	movs	r1, #17
 800a09e:	f000 fa21 	bl	800a4e4 <core_set_error>
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	bd38      	pop	{r3, r4, r5, pc}
 800a0a6:	bf00      	nop
 800a0a8:	a1c00100 	.word	0xa1c00100
 800a0ac:	e0002000 	.word	0xe0002000
 800a0b0:	40023008 	.word	0x40023008
 800a0b4:	40023000 	.word	0x40023000
 800a0b8:	f407a5c2 	.word	0xf407a5c2
 800a0bc:	b5e8b5cd 	.word	0xb5e8b5cd

0800a0c0 <ai_platform_network_process>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	9201      	str	r2, [sp, #4]
 800a0ca:	b120      	cbz	r0, 800a0d6 <ai_platform_network_process+0x16>
 800a0cc:	4ba5      	ldr	r3, [pc, #660]	; (800a364 <ai_platform_network_process+0x2a4>)
 800a0ce:	6802      	ldr	r2, [r0, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	bf18      	it	ne
 800a0d4:	2400      	movne	r4, #0
 800a0d6:	48a4      	ldr	r0, [pc, #656]	; (800a368 <ai_platform_network_process+0x2a8>)
 800a0d8:	4ba4      	ldr	r3, [pc, #656]	; (800a36c <ai_platform_network_process+0x2ac>)
 800a0da:	6802      	ldr	r2, [r0, #0]
 800a0dc:	f022 0201 	bic.w	r2, r2, #1
 800a0e0:	6002      	str	r2, [r0, #0]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	2a00      	cmp	r2, #0
 800a0ea:	d1fc      	bne.n	800a0e6 <ai_platform_network_process+0x26>
 800a0ec:	4ba0      	ldr	r3, [pc, #640]	; (800a370 <ai_platform_network_process+0x2b0>)
 800a0ee:	4aa1      	ldr	r2, [pc, #644]	; (800a374 <ai_platform_network_process+0x2b4>)
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	4ba0      	ldr	r3, [pc, #640]	; (800a378 <ai_platform_network_process+0x2b8>)
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d000      	beq.n	800a0fc <ai_platform_network_process+0x3c>
 800a0fa:	e7fe      	b.n	800a0fa <ai_platform_network_process+0x3a>
 800a0fc:	2c00      	cmp	r4, #0
 800a0fe:	d066      	beq.n	800a1ce <ai_platform_network_process+0x10e>
 800a100:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 800a104:	b107      	cbz	r7, 800a108 <ai_platform_network_process+0x48>
 800a106:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800a108:	68e3      	ldr	r3, [r4, #12]
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	2600      	movs	r6, #0
 800a110:	2b03      	cmp	r3, #3
 800a112:	6166      	str	r6, [r4, #20]
 800a114:	f040 80fe 	bne.w	800a314 <ai_platform_network_process+0x254>
 800a118:	2900      	cmp	r1, #0
 800a11a:	d07f      	beq.n	800a21c <ai_platform_network_process+0x15c>
 800a11c:	2f00      	cmp	r7, #0
 800a11e:	d07d      	beq.n	800a21c <ai_platform_network_process+0x15c>
 800a120:	883b      	ldrh	r3, [r7, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d07a      	beq.n	800a21c <ai_platform_network_process+0x15c>
 800a126:	460d      	mov	r5, r1
 800a128:	46a0      	mov	r8, r4
 800a12a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800a12e:	429e      	cmp	r6, r3
 800a130:	d27d      	bcs.n	800a22e <ai_platform_network_process+0x16e>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d07a      	beq.n	800a22e <ai_platform_network_process+0x16e>
 800a138:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a13c:	2c00      	cmp	r4, #0
 800a13e:	d076      	beq.n	800a22e <ai_platform_network_process+0x16e>
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 800a148:	d067      	beq.n	800a21a <ai_platform_network_process+0x15a>
 800a14a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800a14e:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800a152:	69a0      	ldr	r0, [r4, #24]
 800a154:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800a158:	6841      	ldr	r1, [r0, #4]
 800a15a:	fb0b f30e 	mul.w	r3, fp, lr
 800a15e:	fb0c f303 	mul.w	r3, ip, r3
 800a162:	4299      	cmp	r1, r3
 800a164:	d350      	bcc.n	800a208 <ai_platform_network_process+0x148>
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	455a      	cmp	r2, fp
 800a16c:	d14c      	bne.n	800a208 <ai_platform_network_process+0x148>
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	4572      	cmp	r2, lr
 800a172:	d149      	bne.n	800a208 <ai_platform_network_process+0x148>
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	459c      	cmp	ip, r3
 800a178:	d146      	bne.n	800a208 <ai_platform_network_process+0x148>
 800a17a:	6800      	ldr	r0, [r0, #0]
 800a17c:	f000 ff8a 	bl	800b094 <ai_array_get_byte_size>
 800a180:	68e2      	ldr	r2, [r4, #12]
 800a182:	6963      	ldr	r3, [r4, #20]
 800a184:	68d2      	ldr	r2, [r2, #12]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	fb03 f302 	mul.w	r3, r3, r2
 800a18c:	4298      	cmp	r0, r3
 800a18e:	d33b      	bcc.n	800a208 <ai_platform_network_process+0x148>
 800a190:	69a3      	ldr	r3, [r4, #24]
 800a192:	6818      	ldr	r0, [r3, #0]
 800a194:	f000 ff32 	bl	800affc <ai_array_to_buffer_fmt>
 800a198:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800a19c:	4043      	eors	r3, r0
 800a19e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a1a2:	d128      	bne.n	800a1f6 <ai_platform_network_process+0x136>
 800a1a4:	68eb      	ldr	r3, [r5, #12]
 800a1a6:	b1f3      	cbz	r3, 800a1e6 <ai_platform_network_process+0x126>
 800a1a8:	f8b5 b000 	ldrh.w	fp, [r5]
 800a1ac:	f1bb 0f00 	cmp.w	fp, #0
 800a1b0:	d012      	beq.n	800a1d8 <ai_platform_network_process+0x118>
 800a1b2:	4623      	mov	r3, r4
 800a1b4:	f105 020c 	add.w	r2, r5, #12
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	f7ff fc00 	bl	80099c0 <_platform_network_state_setup.isra.1>
 800a1c0:	45d9      	cmp	r9, fp
 800a1c2:	883b      	ldrh	r3, [r7, #0]
 800a1c4:	bf38      	it	cc
 800a1c6:	46d9      	movcc	r9, fp
 800a1c8:	3601      	adds	r6, #1
 800a1ca:	3518      	adds	r5, #24
 800a1cc:	e7af      	b.n	800a12e <ai_platform_network_process+0x6e>
 800a1ce:	46a3      	mov	fp, r4
 800a1d0:	4658      	mov	r0, fp
 800a1d2:	b003      	add	sp, #12
 800a1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d8:	f108 0010 	add.w	r0, r8, #16
 800a1dc:	2221      	movs	r2, #33	; 0x21
 800a1de:	2112      	movs	r1, #18
 800a1e0:	f000 f980 	bl	800a4e4 <core_set_error>
 800a1e4:	e7f4      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a1e6:	f108 0010 	add.w	r0, r8, #16
 800a1ea:	2217      	movs	r2, #23
 800a1ec:	2112      	movs	r1, #18
 800a1ee:	469b      	mov	fp, r3
 800a1f0:	f000 f978 	bl	800a4e4 <core_set_error>
 800a1f4:	e7ec      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a1f6:	f108 0010 	add.w	r0, r8, #16
 800a1fa:	2219      	movs	r2, #25
 800a1fc:	2112      	movs	r1, #18
 800a1fe:	f000 f971 	bl	800a4e4 <core_set_error>
 800a202:	f04f 0b00 	mov.w	fp, #0
 800a206:	e7e3      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a208:	f108 0010 	add.w	r0, r8, #16
 800a20c:	2218      	movs	r2, #24
 800a20e:	2112      	movs	r1, #18
 800a210:	f000 f968 	bl	800a4e4 <core_set_error>
 800a214:	f04f 0b00 	mov.w	fp, #0
 800a218:	e7da      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a21a:	4644      	mov	r4, r8
 800a21c:	f104 0010 	add.w	r0, r4, #16
 800a220:	2217      	movs	r2, #23
 800a222:	2112      	movs	r1, #18
 800a224:	f000 f95e 	bl	800a4e4 <core_set_error>
 800a228:	f04f 0b00 	mov.w	fp, #0
 800a22c:	e7d0      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a22e:	9a01      	ldr	r2, [sp, #4]
 800a230:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 800a234:	4644      	mov	r4, r8
 800a236:	2a00      	cmp	r2, #0
 800a238:	f000 80a2 	beq.w	800a380 <ai_platform_network_process+0x2c0>
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	f240 8140 	bls.w	800a4c2 <ai_platform_network_process+0x402>
 800a242:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 800a246:	f118 0f0c 	cmn.w	r8, #12
 800a24a:	f000 813a 	beq.w	800a4c2 <ai_platform_network_process+0x402>
 800a24e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f000 8135 	beq.w	800a4c2 <ai_platform_network_process+0x402>
 800a258:	9d01      	ldr	r5, [sp, #4]
 800a25a:	2700      	movs	r7, #0
 800a25c:	3504      	adds	r5, #4
 800a25e:	429f      	cmp	r7, r3
 800a260:	f080 808c 	bcs.w	800a37c <ai_platform_network_process+0x2bc>
 800a264:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 8087 	beq.w	800a37c <ai_platform_network_process+0x2bc>
 800a26e:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800a272:	2e00      	cmp	r6, #0
 800a274:	f000 8082 	beq.w	800a37c <ai_platform_network_process+0x2bc>
 800a278:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800a282:	d067      	beq.n	800a354 <ai_platform_network_process+0x294>
 800a284:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800a288:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800a28c:	69b0      	ldr	r0, [r6, #24]
 800a28e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800a292:	6841      	ldr	r1, [r0, #4]
 800a294:	fb0b f30e 	mul.w	r3, fp, lr
 800a298:	fb0c f303 	mul.w	r3, ip, r3
 800a29c:	4299      	cmp	r1, r3
 800a29e:	f0c0 8110 	bcc.w	800a4c2 <ai_platform_network_process+0x402>
 800a2a2:	68f3      	ldr	r3, [r6, #12]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	455a      	cmp	r2, fp
 800a2a8:	f040 810b 	bne.w	800a4c2 <ai_platform_network_process+0x402>
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	4572      	cmp	r2, lr
 800a2b0:	f040 8107 	bne.w	800a4c2 <ai_platform_network_process+0x402>
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	459c      	cmp	ip, r3
 800a2b8:	f040 8103 	bne.w	800a4c2 <ai_platform_network_process+0x402>
 800a2bc:	6800      	ldr	r0, [r0, #0]
 800a2be:	f000 fee9 	bl	800b094 <ai_array_get_byte_size>
 800a2c2:	68f2      	ldr	r2, [r6, #12]
 800a2c4:	6973      	ldr	r3, [r6, #20]
 800a2c6:	68d2      	ldr	r2, [r2, #12]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	fb03 f302 	mul.w	r3, r3, r2
 800a2ce:	4298      	cmp	r0, r3
 800a2d0:	f0c0 80f7 	bcc.w	800a4c2 <ai_platform_network_process+0x402>
 800a2d4:	69b3      	ldr	r3, [r6, #24]
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	f000 fe90 	bl	800affc <ai_array_to_buffer_fmt>
 800a2dc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800a2e0:	4043      	eors	r3, r0
 800a2e2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a2e6:	d12c      	bne.n	800a342 <ai_platform_network_process+0x282>
 800a2e8:	68eb      	ldr	r3, [r5, #12]
 800a2ea:	b313      	cbz	r3, 800a332 <ai_platform_network_process+0x272>
 800a2ec:	f8b5 b000 	ldrh.w	fp, [r5]
 800a2f0:	f1bb 0f00 	cmp.w	fp, #0
 800a2f4:	d016      	beq.n	800a324 <ai_platform_network_process+0x264>
 800a2f6:	4633      	mov	r3, r6
 800a2f8:	f105 020c 	add.w	r2, r5, #12
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	4650      	mov	r0, sl
 800a300:	f7ff fb5e 	bl	80099c0 <_platform_network_state_setup.isra.1>
 800a304:	45d9      	cmp	r9, fp
 800a306:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a30a:	bf38      	it	cc
 800a30c:	46d9      	movcc	r9, fp
 800a30e:	3701      	adds	r7, #1
 800a310:	3518      	adds	r5, #24
 800a312:	e7a4      	b.n	800a25e <ai_platform_network_process+0x19e>
 800a314:	f104 0010 	add.w	r0, r4, #16
 800a318:	2230      	movs	r2, #48	; 0x30
 800a31a:	2111      	movs	r1, #17
 800a31c:	f000 f8e2 	bl	800a4e4 <core_set_error>
 800a320:	46b3      	mov	fp, r6
 800a322:	e755      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a324:	f104 0010 	add.w	r0, r4, #16
 800a328:	2221      	movs	r2, #33	; 0x21
 800a32a:	2113      	movs	r1, #19
 800a32c:	f000 f8da 	bl	800a4e4 <core_set_error>
 800a330:	e74e      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a332:	f104 0010 	add.w	r0, r4, #16
 800a336:	2217      	movs	r2, #23
 800a338:	2113      	movs	r1, #19
 800a33a:	469b      	mov	fp, r3
 800a33c:	f000 f8d2 	bl	800a4e4 <core_set_error>
 800a340:	e746      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a342:	f104 0010 	add.w	r0, r4, #16
 800a346:	2219      	movs	r2, #25
 800a348:	2113      	movs	r1, #19
 800a34a:	f000 f8cb 	bl	800a4e4 <core_set_error>
 800a34e:	f04f 0b00 	mov.w	fp, #0
 800a352:	e73d      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a354:	f104 0010 	add.w	r0, r4, #16
 800a358:	2217      	movs	r2, #23
 800a35a:	2113      	movs	r1, #19
 800a35c:	f000 f8c2 	bl	800a4e4 <core_set_error>
 800a360:	46d3      	mov	fp, sl
 800a362:	e735      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a364:	a1c00100 	.word	0xa1c00100
 800a368:	e0002000 	.word	0xe0002000
 800a36c:	40023008 	.word	0x40023008
 800a370:	40023000 	.word	0x40023000
 800a374:	f407a5c2 	.word	0xf407a5c2
 800a378:	b5e8b5cd 	.word	0xb5e8b5cd
 800a37c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a380:	f8a4 9014 	strh.w	r9, [r4, #20]
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8099 	beq.w	800a4bc <ai_platform_network_process+0x3fc>
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a38e:	f240 8093 	bls.w	800a4b8 <ai_platform_network_process+0x3f8>
 800a392:	f105 070c 	add.w	r7, r5, #12
 800a396:	8ae0      	ldrh	r0, [r4, #22]
 800a398:	8aa3      	ldrh	r3, [r4, #20]
 800a39a:	4283      	cmp	r3, r0
 800a39c:	d977      	bls.n	800a48e <ai_platform_network_process+0x3ce>
 800a39e:	46a3      	mov	fp, r4
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	d032      	beq.n	800a40a <ai_platform_network_process+0x34a>
 800a3a4:	882b      	ldrh	r3, [r5, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d02f      	beq.n	800a40a <ai_platform_network_process+0x34a>
 800a3aa:	686b      	ldr	r3, [r5, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d02c      	beq.n	800a40a <ai_platform_network_process+0x34a>
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f04f 0800 	mov.w	r8, #0
 800a3b6:	b343      	cbz	r3, 800a40a <ai_platform_network_process+0x34a>
 800a3b8:	68a9      	ldr	r1, [r5, #8]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	f8d1 a000 	ldr.w	sl, [r1]
 800a3c0:	6814      	ldr	r4, [r2, #0]
 800a3c2:	6890      	ldr	r0, [r2, #8]
 800a3c4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a3c8:	eb0a 0609 	add.w	r6, sl, r9
 800a3cc:	00a4      	lsls	r4, r4, #2
 800a3ce:	6871      	ldr	r1, [r6, #4]
 800a3d0:	d45f      	bmi.n	800a492 <ai_platform_network_process+0x3d2>
 800a3d2:	68d4      	ldr	r4, [r2, #12]
 800a3d4:	1b00      	subs	r0, r0, r4
 800a3d6:	4401      	add	r1, r0
 800a3d8:	6091      	str	r1, [r2, #8]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	6872      	ldr	r2, [r6, #4]
 800a3de:	60da      	str	r2, [r3, #12]
 800a3e0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800a3e4:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a3e8:	440b      	add	r3, r1
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	bf24      	itt	cs
 800a3ee:	68f3      	ldrcs	r3, [r6, #12]
 800a3f0:	1ad3      	subcs	r3, r2, r3
 800a3f2:	6073      	str	r3, [r6, #4]
 800a3f4:	882b      	ldrh	r3, [r5, #0]
 800a3f6:	f108 0801 	add.w	r8, r8, #1
 800a3fa:	4598      	cmp	r8, r3
 800a3fc:	d205      	bcs.n	800a40a <ai_platform_network_process+0x34a>
 800a3fe:	686b      	ldr	r3, [r5, #4]
 800a400:	b11b      	cbz	r3, 800a40a <ai_platform_network_process+0x34a>
 800a402:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1d6      	bne.n	800a3b8 <ai_platform_network_process+0x2f8>
 800a40a:	4658      	mov	r0, fp
 800a40c:	f000 fd90 	bl	800af30 <ai_layers_forward_all>
 800a410:	2f00      	cmp	r7, #0
 800a412:	d032      	beq.n	800a47a <ai_platform_network_process+0x3ba>
 800a414:	883b      	ldrh	r3, [r7, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d02f      	beq.n	800a47a <ai_platform_network_process+0x3ba>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	b36b      	cbz	r3, 800a47a <ai_platform_network_process+0x3ba>
 800a41e:	6818      	ldr	r0, [r3, #0]
 800a420:	b358      	cbz	r0, 800a47a <ai_platform_network_process+0x3ba>
 800a422:	f04f 0800 	mov.w	r8, #0
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6981      	ldr	r1, [r0, #24]
 800a42a:	f8d3 a000 	ldr.w	sl, [r3]
 800a42e:	680c      	ldr	r4, [r1, #0]
 800a430:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a434:	eb0a 0609 	add.w	r6, sl, r9
 800a438:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800a43c:	00a4      	lsls	r4, r4, #2
 800a43e:	eb0c 0302 	add.w	r3, ip, r2
 800a442:	d42a      	bmi.n	800a49a <ai_platform_network_process+0x3da>
 800a444:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a448:	4293      	cmp	r3, r2
 800a44a:	bf24      	itt	cs
 800a44c:	68f3      	ldrcs	r3, [r6, #12]
 800a44e:	1ad3      	subcs	r3, r2, r3
 800a450:	6073      	str	r3, [r6, #4]
 800a452:	6981      	ldr	r1, [r0, #24]
 800a454:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800a458:	1b12      	subs	r2, r2, r4
 800a45a:	4413      	add	r3, r2
 800a45c:	608b      	str	r3, [r1, #8]
 800a45e:	6983      	ldr	r3, [r0, #24]
 800a460:	6872      	ldr	r2, [r6, #4]
 800a462:	60da      	str	r2, [r3, #12]
 800a464:	883b      	ldrh	r3, [r7, #0]
 800a466:	f108 0801 	add.w	r8, r8, #1
 800a46a:	4598      	cmp	r8, r3
 800a46c:	d205      	bcs.n	800a47a <ai_platform_network_process+0x3ba>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	b11b      	cbz	r3, 800a47a <ai_platform_network_process+0x3ba>
 800a472:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a476:	2800      	cmp	r0, #0
 800a478:	d1d5      	bne.n	800a426 <ai_platform_network_process+0x366>
 800a47a:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800a47e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800a482:	3001      	adds	r0, #1
 800a484:	b280      	uxth	r0, r0
 800a486:	4283      	cmp	r3, r0
 800a488:	f8ab 0016 	strh.w	r0, [fp, #22]
 800a48c:	d888      	bhi.n	800a3a0 <ai_platform_network_process+0x2e0>
 800a48e:	4683      	mov	fp, r0
 800a490:	e69e      	b.n	800a1d0 <ai_platform_network_process+0x110>
 800a492:	68b2      	ldr	r2, [r6, #8]
 800a494:	f000 fe62 	bl	800b15c <memcpy>
 800a498:	e7a2      	b.n	800a3e0 <ai_platform_network_process+0x320>
 800a49a:	6889      	ldr	r1, [r1, #8]
 800a49c:	4660      	mov	r0, ip
 800a49e:	f000 fe5d 	bl	800b15c <memcpy>
 800a4a2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800a4a6:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a4aa:	440b      	add	r3, r1
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	bf24      	itt	cs
 800a4b0:	68f3      	ldrcs	r3, [r6, #12]
 800a4b2:	1ad3      	subcs	r3, r2, r3
 800a4b4:	6073      	str	r3, [r6, #4]
 800a4b6:	e7d5      	b.n	800a464 <ai_platform_network_process+0x3a4>
 800a4b8:	2700      	movs	r7, #0
 800a4ba:	e76c      	b.n	800a396 <ai_platform_network_process+0x2d6>
 800a4bc:	461d      	mov	r5, r3
 800a4be:	461f      	mov	r7, r3
 800a4c0:	e769      	b.n	800a396 <ai_platform_network_process+0x2d6>
 800a4c2:	f104 0010 	add.w	r0, r4, #16
 800a4c6:	2218      	movs	r2, #24
 800a4c8:	2113      	movs	r1, #19
 800a4ca:	f000 f80b 	bl	800a4e4 <core_set_error>
 800a4ce:	f04f 0b00 	mov.w	fp, #0
 800a4d2:	e67d      	b.n	800a1d0 <ai_platform_network_process+0x110>

0800a4d4 <core_init>:
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	4770      	bx	lr

0800a4d8 <core_get_error>:
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2200      	movs	r2, #0
 800a4dc:	6800      	ldr	r0, [r0, #0]
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop

0800a4e4 <core_set_error>:
 800a4e4:	7803      	ldrb	r3, [r0, #0]
 800a4e6:	b933      	cbnz	r3, 800a4f6 <core_set_error+0x12>
 800a4e8:	7001      	strb	r1, [r0, #0]
 800a4ea:	6803      	ldr	r3, [r0, #0]
 800a4ec:	f362 231f 	bfi	r3, r2, #8, #24
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	4770      	bx	lr
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop

0800a4fc <ai_dict8_dot_array_f32>:
 800a4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a500:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a504:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800a508:	f000 80c0 	beq.w	800a68c <ai_dict8_dot_array_f32+0x190>
 800a50c:	f101 0408 	add.w	r4, r1, #8
 800a510:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800a514:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800a694 <ai_dict8_dot_array_f32+0x198>
 800a518:	eb04 0e09 	add.w	lr, r4, r9
 800a51c:	f103 0520 	add.w	r5, r3, #32
 800a520:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800a524:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800a528:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800a52c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800a530:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800a534:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800a538:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800a53c:	ed55 3a04 	vldr	s7, [r5, #-16]
 800a540:	ed55 4a03 	vldr	s9, [r5, #-12]
 800a544:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a548:	ed55 6a01 	vldr	s13, [r5, #-4]
 800a54c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a550:	edd6 7a00 	vldr	s15, [r6]
 800a554:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800a558:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a55c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800a560:	ed9a 3a00 	vldr	s6, [sl]
 800a564:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800a568:	eee3 7a05 	vfma.f32	s15, s6, s10
 800a56c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a570:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a574:	ed97 3a00 	vldr	s6, [r7]
 800a578:	ed96 5a00 	vldr	s10, [r6]
 800a57c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800a580:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800a584:	eee3 7a04 	vfma.f32	s15, s6, s8
 800a588:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a58c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a590:	ed9a 3a00 	vldr	s6, [sl]
 800a594:	ed96 4a00 	vldr	s8, [r6]
 800a598:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800a59c:	eee5 7a06 	vfma.f32	s15, s10, s12
 800a5a0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a5a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5a8:	ed97 5a00 	vldr	s10, [r7]
 800a5ac:	ed96 6a00 	vldr	s12, [r6]
 800a5b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a5b4:	3408      	adds	r4, #8
 800a5b6:	45a6      	cmp	lr, r4
 800a5b8:	f105 0520 	add.w	r5, r5, #32
 800a5bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a5c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a5c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a5c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5cc:	d1a8      	bne.n	800a520 <ai_dict8_dot_array_f32+0x24>
 800a5ce:	4449      	add	r1, r9
 800a5d0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800a5d4:	f01c 0c07 	ands.w	ip, ip, #7
 800a5d8:	d050      	beq.n	800a67c <ai_dict8_dot_array_f32+0x180>
 800a5da:	780c      	ldrb	r4, [r1, #0]
 800a5dc:	edd3 6a00 	vldr	s13, [r3]
 800a5e0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a5e4:	edd4 7a00 	vldr	s15, [r4]
 800a5e8:	f1bc 0f01 	cmp.w	ip, #1
 800a5ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a5f0:	d044      	beq.n	800a67c <ai_dict8_dot_array_f32+0x180>
 800a5f2:	784c      	ldrb	r4, [r1, #1]
 800a5f4:	edd3 6a01 	vldr	s13, [r3, #4]
 800a5f8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a5fc:	edd4 7a00 	vldr	s15, [r4]
 800a600:	f1bc 0f02 	cmp.w	ip, #2
 800a604:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a608:	d038      	beq.n	800a67c <ai_dict8_dot_array_f32+0x180>
 800a60a:	788c      	ldrb	r4, [r1, #2]
 800a60c:	edd3 6a02 	vldr	s13, [r3, #8]
 800a610:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a614:	edd4 7a00 	vldr	s15, [r4]
 800a618:	f1bc 0f03 	cmp.w	ip, #3
 800a61c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a620:	d02c      	beq.n	800a67c <ai_dict8_dot_array_f32+0x180>
 800a622:	78cc      	ldrb	r4, [r1, #3]
 800a624:	edd3 6a03 	vldr	s13, [r3, #12]
 800a628:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a62c:	edd4 7a00 	vldr	s15, [r4]
 800a630:	f1bc 0f04 	cmp.w	ip, #4
 800a634:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a638:	d020      	beq.n	800a67c <ai_dict8_dot_array_f32+0x180>
 800a63a:	790c      	ldrb	r4, [r1, #4]
 800a63c:	edd3 6a04 	vldr	s13, [r3, #16]
 800a640:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a644:	edd4 7a00 	vldr	s15, [r4]
 800a648:	f1bc 0f05 	cmp.w	ip, #5
 800a64c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a650:	d014      	beq.n	800a67c <ai_dict8_dot_array_f32+0x180>
 800a652:	794c      	ldrb	r4, [r1, #5]
 800a654:	edd3 6a05 	vldr	s13, [r3, #20]
 800a658:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a65c:	edd4 7a00 	vldr	s15, [r4]
 800a660:	f1bc 0f06 	cmp.w	ip, #6
 800a664:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a668:	d008      	beq.n	800a67c <ai_dict8_dot_array_f32+0x180>
 800a66a:	7989      	ldrb	r1, [r1, #6]
 800a66c:	edd3 7a06 	vldr	s15, [r3, #24]
 800a670:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a674:	edd2 6a00 	vldr	s13, [r2]
 800a678:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a67c:	edd0 7a00 	vldr	s15, [r0]
 800a680:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a684:	ed80 7a00 	vstr	s14, [r0]
 800a688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800a694 <ai_dict8_dot_array_f32+0x198>
 800a690:	e7a0      	b.n	800a5d4 <ai_dict8_dot_array_f32+0xd8>
 800a692:	bf00      	nop
 800a694:	00000000 	.word	0x00000000

0800a698 <ai_dict4_dot_array_f32>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a69e:	f027 0c01 	bic.w	ip, r7, #1
 800a6a2:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800a6a6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a6aa:	f000 80ae 	beq.w	800a80a <ai_dict4_dot_array_f32+0x172>
 800a6ae:	1d0d      	adds	r5, r1, #4
 800a6b0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800a6b4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800a810 <ai_dict4_dot_array_f32+0x178>
 800a6b8:	eb05 0e09 	add.w	lr, r5, r9
 800a6bc:	f103 0420 	add.w	r4, r3, #32
 800a6c0:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800a6c4:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800a6c8:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800a6cc:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800a6d0:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800a6d4:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800a6d8:	ed14 5a04 	vldr	s10, [r4, #-16]
 800a6dc:	ed54 5a03 	vldr	s11, [r4, #-12]
 800a6e0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800a6e4:	ed54 6a01 	vldr	s13, [r4, #-4]
 800a6e8:	f006 0a0f 	and.w	sl, r6, #15
 800a6ec:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a6f0:	edda 7a00 	vldr	s15, [sl]
 800a6f4:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800a6f8:	0936      	lsrs	r6, r6, #4
 800a6fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a6fe:	ee67 7a83 	vmul.f32	s15, s15, s6
 800a702:	ed96 3a00 	vldr	s6, [r6]
 800a706:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800a70a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a70e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a712:	f00b 0b0f 	and.w	fp, fp, #15
 800a716:	edd6 3a00 	vldr	s7, [r6]
 800a71a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800a71e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a722:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800a726:	3504      	adds	r5, #4
 800a728:	ed9b 4a00 	vldr	s8, [fp]
 800a72c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800a730:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a734:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800a738:	f00a 0a0f 	and.w	sl, sl, #15
 800a73c:	eddb 4a00 	vldr	s9, [fp]
 800a740:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a744:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a748:	45ae      	cmp	lr, r5
 800a74a:	ed9a 5a00 	vldr	s10, [sl]
 800a74e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800a752:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a756:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a75a:	f006 060f 	and.w	r6, r6, #15
 800a75e:	edda 5a00 	vldr	s11, [sl]
 800a762:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a766:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a76a:	f104 0420 	add.w	r4, r4, #32
 800a76e:	ed96 6a00 	vldr	s12, [r6]
 800a772:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a77a:	d1a1      	bne.n	800a6c0 <ai_dict4_dot_array_f32+0x28>
 800a77c:	4449      	add	r1, r9
 800a77e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800a782:	459c      	cmp	ip, r3
 800a784:	d92d      	bls.n	800a7e2 <ai_dict4_dot_array_f32+0x14a>
 800a786:	f10c 0c07 	add.w	ip, ip, #7
 800a78a:	f103 0508 	add.w	r5, r3, #8
 800a78e:	ebac 0c05 	sub.w	ip, ip, r5
 800a792:	f02c 0407 	bic.w	r4, ip, #7
 800a796:	f103 0810 	add.w	r8, r3, #16
 800a79a:	44a0      	add	r8, r4
 800a79c:	f101 3eff 	add.w	lr, r1, #4294967295
 800a7a0:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800a7a4:	ed15 6a01 	vldr	s12, [r5, #-4]
 800a7a8:	ed55 6a02 	vldr	s13, [r5, #-8]
 800a7ac:	f004 060f 	and.w	r6, r4, #15
 800a7b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a7b4:	0924      	lsrs	r4, r4, #4
 800a7b6:	edd6 7a00 	vldr	s15, [r6]
 800a7ba:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a7be:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a7c2:	ed94 6a00 	vldr	s12, [r4]
 800a7c6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a7ca:	3508      	adds	r5, #8
 800a7cc:	45a8      	cmp	r8, r5
 800a7ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a7d2:	d1e5      	bne.n	800a7a0 <ai_dict4_dot_array_f32+0x108>
 800a7d4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a7d8:	f10c 0c01 	add.w	ip, ip, #1
 800a7dc:	4461      	add	r1, ip
 800a7de:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800a7e2:	07fc      	lsls	r4, r7, #31
 800a7e4:	d509      	bpl.n	800a7fa <ai_dict4_dot_array_f32+0x162>
 800a7e6:	7809      	ldrb	r1, [r1, #0]
 800a7e8:	edd3 7a00 	vldr	s15, [r3]
 800a7ec:	090b      	lsrs	r3, r1, #4
 800a7ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a7f2:	edd2 6a00 	vldr	s13, [r2]
 800a7f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a7fa:	edd0 7a00 	vldr	s15, [r0]
 800a7fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a802:	ed80 7a00 	vstr	s14, [r0]
 800a806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800a810 <ai_dict4_dot_array_f32+0x178>
 800a80e:	e7b8      	b.n	800a782 <ai_dict4_dot_array_f32+0xea>
 800a810:	00000000 	.word	0x00000000

0800a814 <forward_dense>:
 800a814:	6982      	ldr	r2, [r0, #24]
 800a816:	8813      	ldrh	r3, [r2, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 81ca 	beq.w	800abb2 <forward_dense+0x39e>
 800a81e:	6852      	ldr	r2, [r2, #4]
 800a820:	6850      	ldr	r0, [r2, #4]
 800a822:	b100      	cbz	r0, 800a826 <forward_dense+0x12>
 800a824:	6800      	ldr	r0, [r0, #0]
 800a826:	2b01      	cmp	r3, #1
 800a828:	f240 81c0 	bls.w	800abac <forward_dense+0x398>
 800a82c:	6911      	ldr	r1, [r2, #16]
 800a82e:	b101      	cbz	r1, 800a832 <forward_dense+0x1e>
 800a830:	6809      	ldr	r1, [r1, #0]
 800a832:	2b02      	cmp	r3, #2
 800a834:	f000 81bf 	beq.w	800abb6 <forward_dense+0x3a2>
 800a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	ed2d 8b10 	vpush	{d8-d15}
 800a840:	69d3      	ldr	r3, [r2, #28]
 800a842:	b091      	sub	sp, #68	; 0x44
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 820b 	beq.w	800ac60 <forward_dense+0x44c>
 800a84a:	681c      	ldr	r4, [r3, #0]
 800a84c:	9408      	str	r4, [sp, #32]
 800a84e:	f112 0418 	adds.w	r4, r2, #24
 800a852:	f000 81df 	beq.w	800ac14 <forward_dense+0x400>
 800a856:	8b12      	ldrh	r2, [r2, #24]
 800a858:	2a01      	cmp	r2, #1
 800a85a:	f240 81fe 	bls.w	800ac5a <forward_dense+0x446>
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f000 81da 	beq.w	800ac18 <forward_dense+0x404>
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	9306      	str	r3, [sp, #24]
 800a868:	9b08      	ldr	r3, [sp, #32]
 800a86a:	68cc      	ldr	r4, [r1, #12]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	68c5      	ldr	r5, [r0, #12]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800a876:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a87a:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 800a87e:	f3c2 5541 	ubfx	r5, r2, #21, #2
 800a882:	fa4c f505 	asr.w	r5, ip, r5
 800a886:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800a88a:	950b      	str	r5, [sp, #44]	; 0x2c
 800a88c:	2a04      	cmp	r2, #4
 800a88e:	fb07 f506 	mul.w	r5, r7, r6
 800a892:	6864      	ldr	r4, [r4, #4]
 800a894:	9507      	str	r5, [sp, #28]
 800a896:	f000 81dd 	beq.w	800ac54 <forward_dense+0x440>
 800a89a:	2a08      	cmp	r2, #8
 800a89c:	f000 81da 	beq.w	800ac54 <forward_dense+0x440>
 800a8a0:	f04f 0a00 	mov.w	sl, #0
 800a8a4:	698a      	ldr	r2, [r1, #24]
 800a8a6:	6981      	ldr	r1, [r0, #24]
 800a8a8:	6890      	ldr	r0, [r2, #8]
 800a8aa:	9a08      	ldr	r2, [sp, #32]
 800a8ac:	9004      	str	r0, [sp, #16]
 800a8ae:	6952      	ldr	r2, [r2, #20]
 800a8b0:	688f      	ldr	r7, [r1, #8]
 800a8b2:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800a8b6:	00a2      	lsls	r2, r4, #2
 800a8b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ba:	1886      	adds	r6, r0, r2
 800a8bc:	9a07      	ldr	r2, [sp, #28]
 800a8be:	2a00      	cmp	r2, #0
 800a8c0:	f000 81c3 	beq.w	800ac4a <forward_dense+0x436>
 800a8c4:	f1a8 0210 	sub.w	r2, r8, #16
 800a8c8:	0912      	lsrs	r2, r2, #4
 800a8ca:	3201      	adds	r2, #1
 800a8cc:	0192      	lsls	r2, r2, #6
 800a8ce:	920c      	str	r2, [sp, #48]	; 0x30
 800a8d0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800a8d4:	920a      	str	r2, [sp, #40]	; 0x28
 800a8d6:	689d      	ldr	r5, [r3, #8]
 800a8d8:	9b06      	ldr	r3, [sp, #24]
 800a8da:	eddf aad0 	vldr	s21, [pc, #832]	; 800ac1c <forward_dense+0x408>
 800a8de:	2200      	movs	r2, #0
 800a8e0:	9205      	str	r2, [sp, #20]
 800a8e2:	f008 020f 	and.w	r2, r8, #15
 800a8e6:	920d      	str	r2, [sp, #52]	; 0x34
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d043      	beq.n	800a974 <forward_dense+0x160>
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	689c      	ldr	r4, [r3, #8]
 800a8f0:	9b04      	ldr	r3, [sp, #16]
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	d042      	beq.n	800a97e <forward_dense+0x16a>
 800a8f8:	42b3      	cmp	r3, r6
 800a8fa:	d22a      	bcs.n	800a952 <forward_dense+0x13e>
 800a8fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8fe:	469b      	mov	fp, r3
 800a900:	ab0f      	add	r3, sp, #60	; 0x3c
 800a902:	9303      	str	r3, [sp, #12]
 800a904:	2a04      	cmp	r2, #4
 800a906:	4633      	mov	r3, r6
 800a908:	4646      	mov	r6, r8
 800a90a:	4698      	mov	r8, r3
 800a90c:	f000 8156 	beq.w	800abbc <forward_dense+0x3a8>
 800a910:	2c00      	cmp	r4, #0
 800a912:	f000 8185 	beq.w	800ac20 <forward_dense+0x40c>
 800a916:	f8d4 c000 	ldr.w	ip, [r4]
 800a91a:	9803      	ldr	r0, [sp, #12]
 800a91c:	9600      	str	r6, [sp, #0]
 800a91e:	463b      	mov	r3, r7
 800a920:	4629      	mov	r1, r5
 800a922:	4652      	mov	r2, sl
 800a924:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a928:	f7ff fde8 	bl	800a4fc <ai_dict8_dot_array_f32>
 800a92c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a92e:	f84b 3b04 	str.w	r3, [fp], #4
 800a932:	45c3      	cmp	fp, r8
 800a934:	f104 0404 	add.w	r4, r4, #4
 800a938:	444d      	add	r5, r9
 800a93a:	d3e9      	bcc.n	800a910 <forward_dense+0xfc>
 800a93c:	4643      	mov	r3, r8
 800a93e:	46b0      	mov	r8, r6
 800a940:	461e      	mov	r6, r3
 800a942:	9a04      	ldr	r2, [sp, #16]
 800a944:	43d3      	mvns	r3, r2
 800a946:	4433      	add	r3, r6
 800a948:	f023 0303 	bic.w	r3, r3, #3
 800a94c:	3304      	adds	r3, #4
 800a94e:	18d3      	adds	r3, r2, r3
 800a950:	9304      	str	r3, [sp, #16]
 800a952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a954:	9b05      	ldr	r3, [sp, #20]
 800a956:	4417      	add	r7, r2
 800a958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a95a:	4416      	add	r6, r2
 800a95c:	9a07      	ldr	r2, [sp, #28]
 800a95e:	3301      	adds	r3, #1
 800a960:	4293      	cmp	r3, r2
 800a962:	9305      	str	r3, [sp, #20]
 800a964:	f000 8171 	beq.w	800ac4a <forward_dense+0x436>
 800a968:	9b08      	ldr	r3, [sp, #32]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	689d      	ldr	r5, [r3, #8]
 800a96e:	9b06      	ldr	r3, [sp, #24]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1bb      	bne.n	800a8ec <forward_dense+0xd8>
 800a974:	461c      	mov	r4, r3
 800a976:	9b04      	ldr	r3, [sp, #16]
 800a978:	f1ba 0f00 	cmp.w	sl, #0
 800a97c:	d1bc      	bne.n	800a8f8 <forward_dense+0xe4>
 800a97e:	42b3      	cmp	r3, r6
 800a980:	d2e7      	bcs.n	800a952 <forward_dense+0x13e>
 800a982:	4618      	mov	r0, r3
 800a984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a986:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800a98a:	eb07 0c03 	add.w	ip, r7, r3
 800a98e:	469e      	mov	lr, r3
 800a990:	2c00      	cmp	r4, #0
 800a992:	f000 80ff 	beq.w	800ab94 <forward_dense+0x380>
 800a996:	f1b8 0f0f 	cmp.w	r8, #15
 800a99a:	edd4 fa00 	vldr	s31, [r4]
 800a99e:	eddf 6a9f 	vldr	s13, [pc, #636]	; 800ac1c <forward_dense+0x408>
 800a9a2:	f104 0404 	add.w	r4, r4, #4
 800a9a6:	f240 80fd 	bls.w	800aba4 <forward_dense+0x390>
 800a9aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a9ae:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800a9b2:	4641      	mov	r1, r8
 800a9b4:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800a9b8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800a9bc:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800a9c0:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800a9c4:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800a9c8:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800a9cc:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800a9d0:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800a9d4:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800a9d8:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800a9dc:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800a9e0:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800a9e4:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800a9e8:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800a9ec:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800a9f0:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800a9f4:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800a9f8:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800a9fc:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800aa00:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800aa04:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800aa08:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800aa0c:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800aa10:	ed13 4a04 	vldr	s8, [r3, #-16]
 800aa14:	ed52 4a04 	vldr	s9, [r2, #-16]
 800aa18:	ed12 5a03 	vldr	s10, [r2, #-12]
 800aa1c:	ed53 5a03 	vldr	s11, [r3, #-12]
 800aa20:	ed12 6a02 	vldr	s12, [r2, #-8]
 800aa24:	ed13 7a02 	vldr	s14, [r3, #-8]
 800aa28:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800aa2c:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800aa30:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800aa34:	3910      	subs	r1, #16
 800aa36:	290f      	cmp	r1, #15
 800aa38:	ed53 ea01 	vldr	s29, [r3, #-4]
 800aa3c:	ed12 ea01 	vldr	s28, [r2, #-4]
 800aa40:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800aa44:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800aa48:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800aa4c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800aa50:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800aa54:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800aa58:	eee9 7a89 	vfma.f32	s15, s19, s18
 800aa5c:	eee8 7a88 	vfma.f32	s15, s17, s16
 800aa60:	eee0 7a20 	vfma.f32	s15, s0, s1
 800aa64:	eee1 7a21 	vfma.f32	s15, s2, s3
 800aa68:	eee2 7a22 	vfma.f32	s15, s4, s5
 800aa6c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800aa70:	eee4 7a24 	vfma.f32	s15, s8, s9
 800aa74:	eee5 7a25 	vfma.f32	s15, s10, s11
 800aa78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa7c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800aa80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aa84:	d896      	bhi.n	800a9b4 <forward_dense+0x1a0>
 800aa86:	eb05 010e 	add.w	r1, r5, lr
 800aa8a:	465b      	mov	r3, fp
 800aa8c:	4662      	mov	r2, ip
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d075      	beq.n	800ab7e <forward_dense+0x36a>
 800aa92:	ed91 7a00 	vldr	s14, [r1]
 800aa96:	edd2 7a00 	vldr	s15, [r2]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aaa0:	d06d      	beq.n	800ab7e <forward_dense+0x36a>
 800aaa2:	ed91 7a01 	vldr	s14, [r1, #4]
 800aaa6:	edd2 7a01 	vldr	s15, [r2, #4]
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aab0:	d065      	beq.n	800ab7e <forward_dense+0x36a>
 800aab2:	ed91 7a02 	vldr	s14, [r1, #8]
 800aab6:	edd2 7a02 	vldr	s15, [r2, #8]
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aac0:	d05d      	beq.n	800ab7e <forward_dense+0x36a>
 800aac2:	ed91 7a03 	vldr	s14, [r1, #12]
 800aac6:	edd2 7a03 	vldr	s15, [r2, #12]
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aad0:	d055      	beq.n	800ab7e <forward_dense+0x36a>
 800aad2:	ed91 7a04 	vldr	s14, [r1, #16]
 800aad6:	edd2 7a04 	vldr	s15, [r2, #16]
 800aada:	2b05      	cmp	r3, #5
 800aadc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aae0:	d04d      	beq.n	800ab7e <forward_dense+0x36a>
 800aae2:	ed91 7a05 	vldr	s14, [r1, #20]
 800aae6:	edd2 7a05 	vldr	s15, [r2, #20]
 800aaea:	2b06      	cmp	r3, #6
 800aaec:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aaf0:	d045      	beq.n	800ab7e <forward_dense+0x36a>
 800aaf2:	ed91 7a06 	vldr	s14, [r1, #24]
 800aaf6:	edd2 7a06 	vldr	s15, [r2, #24]
 800aafa:	2b07      	cmp	r3, #7
 800aafc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab00:	d03d      	beq.n	800ab7e <forward_dense+0x36a>
 800ab02:	ed91 7a07 	vldr	s14, [r1, #28]
 800ab06:	edd2 7a07 	vldr	s15, [r2, #28]
 800ab0a:	2b08      	cmp	r3, #8
 800ab0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab10:	d035      	beq.n	800ab7e <forward_dense+0x36a>
 800ab12:	ed91 7a08 	vldr	s14, [r1, #32]
 800ab16:	edd2 7a08 	vldr	s15, [r2, #32]
 800ab1a:	2b09      	cmp	r3, #9
 800ab1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab20:	d02d      	beq.n	800ab7e <forward_dense+0x36a>
 800ab22:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800ab26:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800ab2a:	2b0a      	cmp	r3, #10
 800ab2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab30:	d025      	beq.n	800ab7e <forward_dense+0x36a>
 800ab32:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800ab36:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800ab3a:	2b0b      	cmp	r3, #11
 800ab3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab40:	d01d      	beq.n	800ab7e <forward_dense+0x36a>
 800ab42:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800ab46:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800ab4a:	2b0c      	cmp	r3, #12
 800ab4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab50:	d015      	beq.n	800ab7e <forward_dense+0x36a>
 800ab52:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800ab56:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800ab5a:	2b0d      	cmp	r3, #13
 800ab5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab60:	d00d      	beq.n	800ab7e <forward_dense+0x36a>
 800ab62:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800ab66:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800ab6a:	2b0e      	cmp	r3, #14
 800ab6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab70:	d005      	beq.n	800ab7e <forward_dense+0x36a>
 800ab72:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800ab76:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800ab7a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab7e:	444d      	add	r5, r9
 800ab80:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800ab84:	ece0 6a01 	vstmia	r0!, {s13}
 800ab88:	42b0      	cmp	r0, r6
 800ab8a:	f4bf aeda 	bcs.w	800a942 <forward_dense+0x12e>
 800ab8e:	2c00      	cmp	r4, #0
 800ab90:	f47f af01 	bne.w	800a996 <forward_dense+0x182>
 800ab94:	f1b8 0f0f 	cmp.w	r8, #15
 800ab98:	eef0 fa6a 	vmov.f32	s31, s21
 800ab9c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800ac1c <forward_dense+0x408>
 800aba0:	f63f af03 	bhi.w	800a9aa <forward_dense+0x196>
 800aba4:	4643      	mov	r3, r8
 800aba6:	4629      	mov	r1, r5
 800aba8:	463a      	mov	r2, r7
 800abaa:	e770      	b.n	800aa8e <forward_dense+0x27a>
 800abac:	2300      	movs	r3, #0
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	deff      	udf	#255	; 0xff
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	deff      	udf	#255	; 0xff
 800abb6:	2300      	movs	r3, #0
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	deff      	udf	#255	; 0xff
 800abbc:	b1ac      	cbz	r4, 800abea <forward_dense+0x3d6>
 800abbe:	f8d4 c000 	ldr.w	ip, [r4]
 800abc2:	9803      	ldr	r0, [sp, #12]
 800abc4:	9600      	str	r6, [sp, #0]
 800abc6:	463b      	mov	r3, r7
 800abc8:	4629      	mov	r1, r5
 800abca:	4652      	mov	r2, sl
 800abcc:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800abd0:	f7ff fd62 	bl	800a698 <ai_dict4_dot_array_f32>
 800abd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abd6:	f84b 3b04 	str.w	r3, [fp], #4
 800abda:	45c3      	cmp	fp, r8
 800abdc:	f104 0404 	add.w	r4, r4, #4
 800abe0:	444d      	add	r5, r9
 800abe2:	f4bf aeab 	bcs.w	800a93c <forward_dense+0x128>
 800abe6:	2c00      	cmp	r4, #0
 800abe8:	d1e9      	bne.n	800abbe <forward_dense+0x3aa>
 800abea:	4634      	mov	r4, r6
 800abec:	4646      	mov	r6, r8
 800abee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800abf2:	9400      	str	r4, [sp, #0]
 800abf4:	463b      	mov	r3, r7
 800abf6:	4629      	mov	r1, r5
 800abf8:	4652      	mov	r2, sl
 800abfa:	4640      	mov	r0, r8
 800abfc:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800ac00:	f7ff fd4a 	bl	800a698 <ai_dict4_dot_array_f32>
 800ac04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac06:	f84b 3b04 	str.w	r3, [fp], #4
 800ac0a:	45b3      	cmp	fp, r6
 800ac0c:	444d      	add	r5, r9
 800ac0e:	d3f0      	bcc.n	800abf2 <forward_dense+0x3de>
 800ac10:	46a0      	mov	r8, r4
 800ac12:	e696      	b.n	800a942 <forward_dense+0x12e>
 800ac14:	9406      	str	r4, [sp, #24]
 800ac16:	e627      	b.n	800a868 <forward_dense+0x54>
 800ac18:	9306      	str	r3, [sp, #24]
 800ac1a:	e625      	b.n	800a868 <forward_dense+0x54>
 800ac1c:	00000000 	.word	0x00000000
 800ac20:	4634      	mov	r4, r6
 800ac22:	4646      	mov	r6, r8
 800ac24:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ac28:	9400      	str	r4, [sp, #0]
 800ac2a:	463b      	mov	r3, r7
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4652      	mov	r2, sl
 800ac30:	4640      	mov	r0, r8
 800ac32:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800ac36:	f7ff fc61 	bl	800a4fc <ai_dict8_dot_array_f32>
 800ac3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac3c:	f84b 3b04 	str.w	r3, [fp], #4
 800ac40:	45b3      	cmp	fp, r6
 800ac42:	444d      	add	r5, r9
 800ac44:	d3f0      	bcc.n	800ac28 <forward_dense+0x414>
 800ac46:	46a0      	mov	r8, r4
 800ac48:	e67b      	b.n	800a942 <forward_dense+0x12e>
 800ac4a:	b011      	add	sp, #68	; 0x44
 800ac4c:	ecbd 8b10 	vpop	{d8-d15}
 800ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac54:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800ac58:	e624      	b.n	800a8a4 <forward_dense+0x90>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9306      	str	r3, [sp, #24]
 800ac5e:	e603      	b.n	800a868 <forward_dense+0x54>
 800ac60:	9308      	str	r3, [sp, #32]
 800ac62:	e5f4      	b.n	800a84e <forward_dense+0x3a>

0800ac64 <nl_func_relu_generic_array_f32>:
 800ac64:	b430      	push	{r4, r5}
 800ac66:	6989      	ldr	r1, [r1, #24]
 800ac68:	6980      	ldr	r0, [r0, #24]
 800ac6a:	edd3 6a02 	vldr	s13, [r3, #8]
 800ac6e:	688c      	ldr	r4, [r1, #8]
 800ac70:	6880      	ldr	r0, [r0, #8]
 800ac72:	ed93 7a00 	vldr	s14, [r3]
 800ac76:	ed93 6a01 	vldr	s12, [r3, #4]
 800ac7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ac7e:	3a01      	subs	r2, #1
 800ac80:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ac84:	0092      	lsls	r2, r2, #2
 800ac86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8a:	4410      	add	r0, r2
 800ac8c:	4422      	add	r2, r4
 800ac8e:	d421      	bmi.n	800acd4 <nl_func_relu_generic_array_f32+0x70>
 800ac90:	4294      	cmp	r4, r2
 800ac92:	d83d      	bhi.n	800ad10 <nl_func_relu_generic_array_f32+0xac>
 800ac94:	1d13      	adds	r3, r2, #4
 800ac96:	1d02      	adds	r2, r0, #4
 800ac98:	e010      	b.n	800acbc <nl_func_relu_generic_array_f32+0x58>
 800ac9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800aca6:	d501      	bpl.n	800acac <nl_func_relu_generic_array_f32+0x48>
 800aca8:	ee65 7a86 	vmul.f32	s15, s11, s12
 800acac:	ed62 7a01 	vstmdb	r2!, {s15}
 800acb0:	6888      	ldr	r0, [r1, #8]
 800acb2:	f1a3 0408 	sub.w	r4, r3, #8
 800acb6:	4284      	cmp	r4, r0
 800acb8:	462b      	mov	r3, r5
 800acba:	d329      	bcc.n	800ad10 <nl_func_relu_generic_array_f32+0xac>
 800acbc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800acc0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800acc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc8:	f1a3 0504 	sub.w	r5, r3, #4
 800accc:	d4e5      	bmi.n	800ac9a <nl_func_relu_generic_array_f32+0x36>
 800acce:	eef0 7a66 	vmov.f32	s15, s13
 800acd2:	e7eb      	b.n	800acac <nl_func_relu_generic_array_f32+0x48>
 800acd4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800acd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acdc:	d01a      	beq.n	800ad14 <nl_func_relu_generic_array_f32+0xb0>
 800acde:	4294      	cmp	r4, r2
 800ace0:	d816      	bhi.n	800ad10 <nl_func_relu_generic_array_f32+0xac>
 800ace2:	1d13      	adds	r3, r2, #4
 800ace4:	1d02      	adds	r2, r0, #4
 800ace6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800acea:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800acee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acf2:	f1a3 0408 	sub.w	r4, r3, #8
 800acf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfa:	f1a3 0004 	sub.w	r0, r3, #4
 800acfe:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ad02:	4623      	mov	r3, r4
 800ad04:	d51e      	bpl.n	800ad44 <nl_func_relu_generic_array_f32+0xe0>
 800ad06:	ed62 6a01 	vstmdb	r2!, {s13}
 800ad0a:	688b      	ldr	r3, [r1, #8]
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	d91e      	bls.n	800ad4e <nl_func_relu_generic_array_f32+0xea>
 800ad10:	bc30      	pop	{r4, r5}
 800ad12:	4770      	bx	lr
 800ad14:	4294      	cmp	r4, r2
 800ad16:	d8fb      	bhi.n	800ad10 <nl_func_relu_generic_array_f32+0xac>
 800ad18:	1d13      	adds	r3, r2, #4
 800ad1a:	2500      	movs	r5, #0
 800ad1c:	1d02      	adds	r2, r0, #4
 800ad1e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ad22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad26:	f1a3 0408 	sub.w	r4, r3, #8
 800ad2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2e:	f1a3 0004 	sub.w	r0, r3, #4
 800ad32:	4623      	mov	r3, r4
 800ad34:	db0d      	blt.n	800ad52 <nl_func_relu_generic_array_f32+0xee>
 800ad36:	ed62 7a01 	vstmdb	r2!, {s15}
 800ad3a:	688b      	ldr	r3, [r1, #8]
 800ad3c:	42a3      	cmp	r3, r4
 800ad3e:	d8e7      	bhi.n	800ad10 <nl_func_relu_generic_array_f32+0xac>
 800ad40:	4603      	mov	r3, r0
 800ad42:	e7ec      	b.n	800ad1e <nl_func_relu_generic_array_f32+0xba>
 800ad44:	ed62 7a01 	vstmdb	r2!, {s15}
 800ad48:	688c      	ldr	r4, [r1, #8]
 800ad4a:	429c      	cmp	r4, r3
 800ad4c:	d8e0      	bhi.n	800ad10 <nl_func_relu_generic_array_f32+0xac>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	e7c9      	b.n	800ace6 <nl_func_relu_generic_array_f32+0x82>
 800ad52:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ad56:	688c      	ldr	r4, [r1, #8]
 800ad58:	429c      	cmp	r4, r3
 800ad5a:	d8d9      	bhi.n	800ad10 <nl_func_relu_generic_array_f32+0xac>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	e7de      	b.n	800ad1e <nl_func_relu_generic_array_f32+0xba>

0800ad60 <forward_relu>:
 800ad60:	6982      	ldr	r2, [r0, #24]
 800ad62:	8813      	ldrh	r3, [r2, #0]
 800ad64:	b333      	cbz	r3, 800adb4 <forward_relu+0x54>
 800ad66:	6852      	ldr	r2, [r2, #4]
 800ad68:	6851      	ldr	r1, [r2, #4]
 800ad6a:	b101      	cbz	r1, 800ad6e <forward_relu+0xe>
 800ad6c:	6809      	ldr	r1, [r1, #0]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d91d      	bls.n	800adae <forward_relu+0x4e>
 800ad72:	b4f0      	push	{r4, r5, r6, r7}
 800ad74:	6917      	ldr	r7, [r2, #16]
 800ad76:	b107      	cbz	r7, 800ad7a <forward_relu+0x1a>
 800ad78:	683f      	ldr	r7, [r7, #0]
 800ad7a:	688c      	ldr	r4, [r1, #8]
 800ad7c:	69c3      	ldr	r3, [r0, #28]
 800ad7e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d044      	beq.n	800ae10 <forward_relu+0xb0>
 800ad86:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800ad8a:	2d01      	cmp	r5, #1
 800ad8c:	d014      	beq.n	800adb8 <forward_relu+0x58>
 800ad8e:	2c00      	cmp	r4, #0
 800ad90:	d074      	beq.n	800ae7c <forward_relu+0x11c>
 800ad92:	68ce      	ldr	r6, [r1, #12]
 800ad94:	2201      	movs	r2, #1
 800ad96:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800ad9a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad9e:	42a6      	cmp	r6, r4
 800ada0:	fb05 f202 	mul.w	r2, r5, r2
 800ada4:	d1f9      	bne.n	800ad9a <forward_relu+0x3a>
 800ada6:	4638      	mov	r0, r7
 800ada8:	bcf0      	pop	{r4, r5, r6, r7}
 800adaa:	f7ff bf5b 	b.w	800ac64 <nl_func_relu_generic_array_f32>
 800adae:	2300      	movs	r3, #0
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	deff      	udf	#255	; 0xff
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	deff      	udf	#255	; 0xff
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	6988      	ldr	r0, [r1, #24]
 800adbc:	6896      	ldr	r6, [r2, #8]
 800adbe:	ed93 7a00 	vldr	s14, [r3]
 800adc2:	6882      	ldr	r2, [r0, #8]
 800adc4:	b184      	cbz	r4, 800ade8 <forward_relu+0x88>
 800adc6:	68cf      	ldr	r7, [r1, #12]
 800adc8:	462b      	mov	r3, r5
 800adca:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800adce:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800add2:	42a7      	cmp	r7, r4
 800add4:	fb01 f303 	mul.w	r3, r1, r3
 800add8:	d1f9      	bne.n	800adce <forward_relu+0x6e>
 800adda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800adde:	3b01      	subs	r3, #1
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	18d2      	adds	r2, r2, r3
 800ade4:	441e      	add	r6, r3
 800ade6:	d23f      	bcs.n	800ae68 <forward_relu+0x108>
 800ade8:	1d13      	adds	r3, r2, #4
 800adea:	2500      	movs	r5, #0
 800adec:	1d32      	adds	r2, r6, #4
 800adee:	ed53 7a01 	vldr	s15, [r3, #-4]
 800adf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfa:	f1a3 0104 	sub.w	r1, r3, #4
 800adfe:	d835      	bhi.n	800ae6c <forward_relu+0x10c>
 800ae00:	ed62 7a01 	vstmdb	r2!, {s15}
 800ae04:	6884      	ldr	r4, [r0, #8]
 800ae06:	3b08      	subs	r3, #8
 800ae08:	429c      	cmp	r4, r3
 800ae0a:	d82d      	bhi.n	800ae68 <forward_relu+0x108>
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	e7ee      	b.n	800adee <forward_relu+0x8e>
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	698d      	ldr	r5, [r1, #24]
 800ae14:	6898      	ldr	r0, [r3, #8]
 800ae16:	68ab      	ldr	r3, [r5, #8]
 800ae18:	b184      	cbz	r4, 800ae3c <forward_relu+0xdc>
 800ae1a:	68ce      	ldr	r6, [r1, #12]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800ae22:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800ae26:	42a6      	cmp	r6, r4
 800ae28:	fb01 f202 	mul.w	r2, r1, r2
 800ae2c:	d1f9      	bne.n	800ae22 <forward_relu+0xc2>
 800ae2e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ae32:	3a01      	subs	r2, #1
 800ae34:	0092      	lsls	r2, r2, #2
 800ae36:	189b      	adds	r3, r3, r2
 800ae38:	4410      	add	r0, r2
 800ae3a:	d215      	bcs.n	800ae68 <forward_relu+0x108>
 800ae3c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ae80 <forward_relu+0x120>
 800ae40:	3304      	adds	r3, #4
 800ae42:	1d01      	adds	r1, r0, #4
 800ae44:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ae48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae50:	bfb8      	it	lt
 800ae52:	eef0 7a47 	vmovlt.f32	s15, s14
 800ae56:	ed61 7a01 	vstmdb	r1!, {s15}
 800ae5a:	68a8      	ldr	r0, [r5, #8]
 800ae5c:	f1a3 0208 	sub.w	r2, r3, #8
 800ae60:	4290      	cmp	r0, r2
 800ae62:	f1a3 0304 	sub.w	r3, r3, #4
 800ae66:	d9ed      	bls.n	800ae44 <forward_relu+0xe4>
 800ae68:	bcf0      	pop	{r4, r5, r6, r7}
 800ae6a:	4770      	bx	lr
 800ae6c:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ae70:	6884      	ldr	r4, [r0, #8]
 800ae72:	3b08      	subs	r3, #8
 800ae74:	429c      	cmp	r4, r3
 800ae76:	d8f7      	bhi.n	800ae68 <forward_relu+0x108>
 800ae78:	460b      	mov	r3, r1
 800ae7a:	e7b8      	b.n	800adee <forward_relu+0x8e>
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	e792      	b.n	800ada6 <forward_relu+0x46>
 800ae80:	00000000 	.word	0x00000000

0800ae84 <ai_check_custom_types>:
 800ae84:	4b13      	ldr	r3, [pc, #76]	; (800aed4 <ai_check_custom_types+0x50>)
 800ae86:	b082      	sub	sp, #8
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	9301      	str	r3, [sp, #4]
 800ae8c:	b118      	cbz	r0, 800ae96 <ai_check_custom_types+0x12>
 800ae8e:	7803      	ldrb	r3, [r0, #0]
 800ae90:	2b03      	cmp	r3, #3
 800ae92:	d002      	beq.n	800ae9a <ai_check_custom_types+0x16>
 800ae94:	2000      	movs	r0, #0
 800ae96:	b002      	add	sp, #8
 800ae98:	4770      	bx	lr
 800ae9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d004      	beq.n	800aeac <ai_check_custom_types+0x28>
 800aea2:	2001      	movs	r0, #1
 800aea4:	f080 0001 	eor.w	r0, r0, #1
 800aea8:	b002      	add	sp, #8
 800aeaa:	4770      	bx	lr
 800aeac:	7842      	ldrb	r2, [r0, #1]
 800aeae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	f100 0001 	add.w	r0, r0, #1
 800aeb8:	d1f3      	bne.n	800aea2 <ai_check_custom_types+0x1e>
 800aeba:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800aebe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d1ed      	bne.n	800aea2 <ai_check_custom_types+0x1e>
 800aec6:	7842      	ldrb	r2, [r0, #1]
 800aec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d1e8      	bne.n	800aea2 <ai_check_custom_types+0x1e>
 800aed0:	2000      	movs	r0, #0
 800aed2:	e7e7      	b.n	800aea4 <ai_check_custom_types+0x20>
 800aed4:	0800d184 	.word	0x0800d184

0800aed8 <ai_layers_init_all>:
 800aed8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800aeda:	b17a      	cbz	r2, 800aefc <ai_layers_init_all+0x24>
 800aedc:	6913      	ldr	r3, [r2, #16]
 800aede:	60d0      	str	r0, [r2, #12]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	f04f 0201 	mov.w	r2, #1
 800aee6:	d009      	beq.n	800aefc <ai_layers_init_all+0x24>
 800aee8:	b143      	cbz	r3, 800aefc <ai_layers_init_all+0x24>
 800aeea:	6919      	ldr	r1, [r3, #16]
 800aeec:	60d8      	str	r0, [r3, #12]
 800aeee:	4299      	cmp	r1, r3
 800aef0:	f102 0201 	add.w	r2, r2, #1
 800aef4:	d002      	beq.n	800aefc <ai_layers_init_all+0x24>
 800aef6:	460b      	mov	r3, r1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1f6      	bne.n	800aeea <ai_layers_init_all+0x12>
 800aefc:	4610      	mov	r0, r2
 800aefe:	4770      	bx	lr

0800af00 <ai_layers_post_init_all>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800af04:	b18c      	cbz	r4, 800af2a <ai_layers_post_init_all+0x2a>
 800af06:	2500      	movs	r5, #0
 800af08:	6863      	ldr	r3, [r4, #4]
 800af0a:	f013 0f01 	tst.w	r3, #1
 800af0e:	4620      	mov	r0, r4
 800af10:	d003      	beq.n	800af1a <ai_layers_post_init_all+0x1a>
 800af12:	6a23      	ldr	r3, [r4, #32]
 800af14:	b10b      	cbz	r3, 800af1a <ai_layers_post_init_all+0x1a>
 800af16:	4798      	blx	r3
 800af18:	3501      	adds	r5, #1
 800af1a:	6923      	ldr	r3, [r4, #16]
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	d002      	beq.n	800af26 <ai_layers_post_init_all+0x26>
 800af20:	461c      	mov	r4, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1f0      	bne.n	800af08 <ai_layers_post_init_all+0x8>
 800af26:	4628      	mov	r0, r5
 800af28:	bd38      	pop	{r3, r4, r5, pc}
 800af2a:	4625      	mov	r5, r4
 800af2c:	e7fb      	b.n	800af26 <ai_layers_post_init_all+0x26>
 800af2e:	bf00      	nop

0800af30 <ai_layers_forward_all>:
 800af30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af34:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800af36:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800af38:	4604      	mov	r4, r0
 800af3a:	2f00      	cmp	r7, #0
 800af3c:	d02c      	beq.n	800af98 <ai_layers_forward_all+0x68>
 800af3e:	2d00      	cmp	r5, #0
 800af40:	d03f      	beq.n	800afc2 <ai_layers_forward_all+0x92>
 800af42:	6545      	str	r5, [r0, #84]	; 0x54
 800af44:	4629      	mov	r1, r5
 800af46:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800af48:	2001      	movs	r0, #1
 800af4a:	47b8      	blx	r7
 800af4c:	2600      	movs	r6, #0
 800af4e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800af50:	46b0      	mov	r8, r6
 800af52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800af54:	2002      	movs	r0, #2
 800af56:	47b8      	blx	r7
 800af58:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800af5a:	696b      	ldr	r3, [r5, #20]
 800af5c:	4628      	mov	r0, r5
 800af5e:	4798      	blx	r3
 800af60:	692b      	ldr	r3, [r5, #16]
 800af62:	429d      	cmp	r5, r3
 800af64:	f04f 0003 	mov.w	r0, #3
 800af68:	4619      	mov	r1, r3
 800af6a:	d009      	beq.n	800af80 <ai_layers_forward_all+0x50>
 800af6c:	6563      	str	r3, [r4, #84]	; 0x54
 800af6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800af70:	47b8      	blx	r7
 800af72:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800af74:	3601      	adds	r6, #1
 800af76:	2900      	cmp	r1, #0
 800af78:	d1eb      	bne.n	800af52 <ai_layers_forward_all+0x22>
 800af7a:	4630      	mov	r0, r6
 800af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af80:	2100      	movs	r1, #0
 800af82:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 800af86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800af88:	47b8      	blx	r7
 800af8a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800af8c:	3601      	adds	r6, #1
 800af8e:	2900      	cmp	r1, #0
 800af90:	d1df      	bne.n	800af52 <ai_layers_forward_all+0x22>
 800af92:	4630      	mov	r0, r6
 800af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af98:	b19d      	cbz	r5, 800afc2 <ai_layers_forward_all+0x92>
 800af9a:	6545      	str	r5, [r0, #84]	; 0x54
 800af9c:	463e      	mov	r6, r7
 800af9e:	696b      	ldr	r3, [r5, #20]
 800afa0:	4628      	mov	r0, r5
 800afa2:	4798      	blx	r3
 800afa4:	692b      	ldr	r3, [r5, #16]
 800afa6:	42ab      	cmp	r3, r5
 800afa8:	f106 0601 	add.w	r6, r6, #1
 800afac:	d004      	beq.n	800afb8 <ai_layers_forward_all+0x88>
 800afae:	6563      	str	r3, [r4, #84]	; 0x54
 800afb0:	461d      	mov	r5, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1f3      	bne.n	800af9e <ai_layers_forward_all+0x6e>
 800afb6:	e7e0      	b.n	800af7a <ai_layers_forward_all+0x4a>
 800afb8:	2300      	movs	r3, #0
 800afba:	6563      	str	r3, [r4, #84]	; 0x54
 800afbc:	4630      	mov	r0, r6
 800afbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc2:	462e      	mov	r6, r5
 800afc4:	4630      	mov	r0, r6
 800afc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afca:	bf00      	nop

0800afcc <ai_layers_destroy_all>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800afd0:	b18c      	cbz	r4, 800aff6 <ai_layers_destroy_all+0x2a>
 800afd2:	2500      	movs	r5, #0
 800afd4:	6863      	ldr	r3, [r4, #4]
 800afd6:	f013 0f04 	tst.w	r3, #4
 800afda:	4620      	mov	r0, r4
 800afdc:	d003      	beq.n	800afe6 <ai_layers_destroy_all+0x1a>
 800afde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800afe0:	b10b      	cbz	r3, 800afe6 <ai_layers_destroy_all+0x1a>
 800afe2:	4798      	blx	r3
 800afe4:	3501      	adds	r5, #1
 800afe6:	6923      	ldr	r3, [r4, #16]
 800afe8:	42a3      	cmp	r3, r4
 800afea:	d002      	beq.n	800aff2 <ai_layers_destroy_all+0x26>
 800afec:	461c      	mov	r4, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f0      	bne.n	800afd4 <ai_layers_destroy_all+0x8>
 800aff2:	4628      	mov	r0, r5
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	4625      	mov	r5, r4
 800aff8:	e7fb      	b.n	800aff2 <ai_layers_destroy_all+0x26>
 800affa:	bf00      	nop

0800affc <ai_array_to_buffer_fmt>:
 800affc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b000:	2b02      	cmp	r3, #2
 800b002:	d02e      	beq.n	800b062 <ai_array_to_buffer_fmt+0x66>
 800b004:	4a1b      	ldr	r2, [pc, #108]	; (800b074 <ai_array_to_buffer_fmt+0x78>)
 800b006:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d00e      	beq.n	800b02c <ai_array_to_buffer_fmt+0x30>
 800b00e:	dd11      	ble.n	800b034 <ai_array_to_buffer_fmt+0x38>
 800b010:	4a19      	ldr	r2, [pc, #100]	; (800b078 <ai_array_to_buffer_fmt+0x7c>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d00a      	beq.n	800b02c <ai_array_to_buffer_fmt+0x30>
 800b016:	dd18      	ble.n	800b04a <ai_array_to_buffer_fmt+0x4e>
 800b018:	4a18      	ldr	r2, [pc, #96]	; (800b07c <ai_array_to_buffer_fmt+0x80>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d006      	beq.n	800b02c <ai_array_to_buffer_fmt+0x30>
 800b01e:	4a18      	ldr	r2, [pc, #96]	; (800b080 <ai_array_to_buffer_fmt+0x84>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d003      	beq.n	800b02c <ai_array_to_buffer_fmt+0x30>
 800b024:	4a17      	ldr	r2, [pc, #92]	; (800b084 <ai_array_to_buffer_fmt+0x88>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d000      	beq.n	800b02c <ai_array_to_buffer_fmt+0x30>
 800b02a:	2340      	movs	r3, #64	; 0x40
 800b02c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b030:	4318      	orrs	r0, r3
 800b032:	4770      	bx	lr
 800b034:	4a14      	ldr	r2, [pc, #80]	; (800b088 <ai_array_to_buffer_fmt+0x8c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d0f8      	beq.n	800b02c <ai_array_to_buffer_fmt+0x30>
 800b03a:	dd06      	ble.n	800b04a <ai_array_to_buffer_fmt+0x4e>
 800b03c:	4a13      	ldr	r2, [pc, #76]	; (800b08c <ai_array_to_buffer_fmt+0x90>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d0f4      	beq.n	800b02c <ai_array_to_buffer_fmt+0x30>
 800b042:	320f      	adds	r2, #15
 800b044:	4293      	cmp	r3, r2
 800b046:	d0f1      	beq.n	800b02c <ai_array_to_buffer_fmt+0x30>
 800b048:	e7ef      	b.n	800b02a <ai_array_to_buffer_fmt+0x2e>
 800b04a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800b04e:	4293      	cmp	r3, r2
 800b050:	d0ec      	beq.n	800b02c <ai_array_to_buffer_fmt+0x30>
 800b052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b056:	4293      	cmp	r3, r2
 800b058:	d1e7      	bne.n	800b02a <ai_array_to_buffer_fmt+0x2e>
 800b05a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b05e:	4318      	orrs	r0, r3
 800b060:	4770      	bx	lr
 800b062:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <ai_array_to_buffer_fmt+0x94>)
 800b064:	4003      	ands	r3, r0
 800b066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b06a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b06e:	4318      	orrs	r0, r3
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	00060440 	.word	0x00060440
 800b078:	00840447 	.word	0x00840447
 800b07c:	0084084f 	.word	0x0084084f
 800b080:	01821040 	.word	0x01821040
 800b084:	00840840 	.word	0x00840840
 800b088:	00040447 	.word	0x00040447
 800b08c:	00040840 	.word	0x00040840
 800b090:	00803fff 	.word	0x00803fff

0800b094 <ai_array_get_byte_size>:
 800b094:	b1c1      	cbz	r1, 800b0c8 <ai_array_get_byte_size+0x34>
 800b096:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800b09a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b09e:	4413      	add	r3, r2
 800b0a0:	fb01 f103 	mul.w	r1, r1, r3
 800b0a4:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800b0a8:	3107      	adds	r1, #7
 800b0aa:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800b0ae:	f021 0107 	bic.w	r1, r1, #7
 800b0b2:	2804      	cmp	r0, #4
 800b0b4:	fa21 f102 	lsr.w	r1, r1, r2
 800b0b8:	d008      	beq.n	800b0cc <ai_array_get_byte_size+0x38>
 800b0ba:	2808      	cmp	r0, #8
 800b0bc:	d101      	bne.n	800b0c2 <ai_array_get_byte_size+0x2e>
 800b0be:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b0c2:	3107      	adds	r1, #7
 800b0c4:	08c8      	lsrs	r0, r1, #3
 800b0c6:	4770      	bx	lr
 800b0c8:	4608      	mov	r0, r1
 800b0ca:	4770      	bx	lr
 800b0cc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800b0d0:	3107      	adds	r1, #7
 800b0d2:	08c8      	lsrs	r0, r1, #3
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop

0800b0d8 <calloc>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	; (800b0e4 <calloc+0xc>)
 800b0da:	460a      	mov	r2, r1
 800b0dc:	4601      	mov	r1, r0
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	f000 b84f 	b.w	800b182 <_calloc_r>
 800b0e4:	20000fa8 	.word	0x20000fa8

0800b0e8 <__errno>:
 800b0e8:	4b01      	ldr	r3, [pc, #4]	; (800b0f0 <__errno+0x8>)
 800b0ea:	6818      	ldr	r0, [r3, #0]
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	20000fa8 	.word	0x20000fa8

0800b0f4 <__libc_init_array>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	4e0d      	ldr	r6, [pc, #52]	; (800b12c <__libc_init_array+0x38>)
 800b0f8:	4c0d      	ldr	r4, [pc, #52]	; (800b130 <__libc_init_array+0x3c>)
 800b0fa:	1ba4      	subs	r4, r4, r6
 800b0fc:	10a4      	asrs	r4, r4, #2
 800b0fe:	2500      	movs	r5, #0
 800b100:	42a5      	cmp	r5, r4
 800b102:	d109      	bne.n	800b118 <__libc_init_array+0x24>
 800b104:	4e0b      	ldr	r6, [pc, #44]	; (800b134 <__libc_init_array+0x40>)
 800b106:	4c0c      	ldr	r4, [pc, #48]	; (800b138 <__libc_init_array+0x44>)
 800b108:	f001 fdae 	bl	800cc68 <_init>
 800b10c:	1ba4      	subs	r4, r4, r6
 800b10e:	10a4      	asrs	r4, r4, #2
 800b110:	2500      	movs	r5, #0
 800b112:	42a5      	cmp	r5, r4
 800b114:	d105      	bne.n	800b122 <__libc_init_array+0x2e>
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b11c:	4798      	blx	r3
 800b11e:	3501      	adds	r5, #1
 800b120:	e7ee      	b.n	800b100 <__libc_init_array+0xc>
 800b122:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b126:	4798      	blx	r3
 800b128:	3501      	adds	r5, #1
 800b12a:	e7f2      	b.n	800b112 <__libc_init_array+0x1e>
 800b12c:	080686a8 	.word	0x080686a8
 800b130:	080686a8 	.word	0x080686a8
 800b134:	080686a8 	.word	0x080686a8
 800b138:	080686ac 	.word	0x080686ac

0800b13c <malloc>:
 800b13c:	4b02      	ldr	r3, [pc, #8]	; (800b148 <malloc+0xc>)
 800b13e:	4601      	mov	r1, r0
 800b140:	6818      	ldr	r0, [r3, #0]
 800b142:	f000 b87b 	b.w	800b23c <_malloc_r>
 800b146:	bf00      	nop
 800b148:	20000fa8 	.word	0x20000fa8

0800b14c <free>:
 800b14c:	4b02      	ldr	r3, [pc, #8]	; (800b158 <free+0xc>)
 800b14e:	4601      	mov	r1, r0
 800b150:	6818      	ldr	r0, [r3, #0]
 800b152:	f000 b825 	b.w	800b1a0 <_free_r>
 800b156:	bf00      	nop
 800b158:	20000fa8 	.word	0x20000fa8

0800b15c <memcpy>:
 800b15c:	b510      	push	{r4, lr}
 800b15e:	1e43      	subs	r3, r0, #1
 800b160:	440a      	add	r2, r1
 800b162:	4291      	cmp	r1, r2
 800b164:	d100      	bne.n	800b168 <memcpy+0xc>
 800b166:	bd10      	pop	{r4, pc}
 800b168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b16c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b170:	e7f7      	b.n	800b162 <memcpy+0x6>

0800b172 <memset>:
 800b172:	4402      	add	r2, r0
 800b174:	4603      	mov	r3, r0
 800b176:	4293      	cmp	r3, r2
 800b178:	d100      	bne.n	800b17c <memset+0xa>
 800b17a:	4770      	bx	lr
 800b17c:	f803 1b01 	strb.w	r1, [r3], #1
 800b180:	e7f9      	b.n	800b176 <memset+0x4>

0800b182 <_calloc_r>:
 800b182:	b538      	push	{r3, r4, r5, lr}
 800b184:	fb02 f401 	mul.w	r4, r2, r1
 800b188:	4621      	mov	r1, r4
 800b18a:	f000 f857 	bl	800b23c <_malloc_r>
 800b18e:	4605      	mov	r5, r0
 800b190:	b118      	cbz	r0, 800b19a <_calloc_r+0x18>
 800b192:	4622      	mov	r2, r4
 800b194:	2100      	movs	r1, #0
 800b196:	f7ff ffec 	bl	800b172 <memset>
 800b19a:	4628      	mov	r0, r5
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b1a0 <_free_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	2900      	cmp	r1, #0
 800b1a6:	d045      	beq.n	800b234 <_free_r+0x94>
 800b1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1ac:	1f0c      	subs	r4, r1, #4
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	bfb8      	it	lt
 800b1b2:	18e4      	addlt	r4, r4, r3
 800b1b4:	f000 fbe6 	bl	800b984 <__malloc_lock>
 800b1b8:	4a1f      	ldr	r2, [pc, #124]	; (800b238 <_free_r+0x98>)
 800b1ba:	6813      	ldr	r3, [r2, #0]
 800b1bc:	4610      	mov	r0, r2
 800b1be:	b933      	cbnz	r3, 800b1ce <_free_r+0x2e>
 800b1c0:	6063      	str	r3, [r4, #4]
 800b1c2:	6014      	str	r4, [r2, #0]
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ca:	f000 bbdc 	b.w	800b986 <__malloc_unlock>
 800b1ce:	42a3      	cmp	r3, r4
 800b1d0:	d90c      	bls.n	800b1ec <_free_r+0x4c>
 800b1d2:	6821      	ldr	r1, [r4, #0]
 800b1d4:	1862      	adds	r2, r4, r1
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	bf04      	itt	eq
 800b1da:	681a      	ldreq	r2, [r3, #0]
 800b1dc:	685b      	ldreq	r3, [r3, #4]
 800b1de:	6063      	str	r3, [r4, #4]
 800b1e0:	bf04      	itt	eq
 800b1e2:	1852      	addeq	r2, r2, r1
 800b1e4:	6022      	streq	r2, [r4, #0]
 800b1e6:	6004      	str	r4, [r0, #0]
 800b1e8:	e7ec      	b.n	800b1c4 <_free_r+0x24>
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	b10a      	cbz	r2, 800b1f4 <_free_r+0x54>
 800b1f0:	42a2      	cmp	r2, r4
 800b1f2:	d9fa      	bls.n	800b1ea <_free_r+0x4a>
 800b1f4:	6819      	ldr	r1, [r3, #0]
 800b1f6:	1858      	adds	r0, r3, r1
 800b1f8:	42a0      	cmp	r0, r4
 800b1fa:	d10b      	bne.n	800b214 <_free_r+0x74>
 800b1fc:	6820      	ldr	r0, [r4, #0]
 800b1fe:	4401      	add	r1, r0
 800b200:	1858      	adds	r0, r3, r1
 800b202:	4282      	cmp	r2, r0
 800b204:	6019      	str	r1, [r3, #0]
 800b206:	d1dd      	bne.n	800b1c4 <_free_r+0x24>
 800b208:	6810      	ldr	r0, [r2, #0]
 800b20a:	6852      	ldr	r2, [r2, #4]
 800b20c:	605a      	str	r2, [r3, #4]
 800b20e:	4401      	add	r1, r0
 800b210:	6019      	str	r1, [r3, #0]
 800b212:	e7d7      	b.n	800b1c4 <_free_r+0x24>
 800b214:	d902      	bls.n	800b21c <_free_r+0x7c>
 800b216:	230c      	movs	r3, #12
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	e7d3      	b.n	800b1c4 <_free_r+0x24>
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	1821      	adds	r1, r4, r0
 800b220:	428a      	cmp	r2, r1
 800b222:	bf04      	itt	eq
 800b224:	6811      	ldreq	r1, [r2, #0]
 800b226:	6852      	ldreq	r2, [r2, #4]
 800b228:	6062      	str	r2, [r4, #4]
 800b22a:	bf04      	itt	eq
 800b22c:	1809      	addeq	r1, r1, r0
 800b22e:	6021      	streq	r1, [r4, #0]
 800b230:	605c      	str	r4, [r3, #4]
 800b232:	e7c7      	b.n	800b1c4 <_free_r+0x24>
 800b234:	bd38      	pop	{r3, r4, r5, pc}
 800b236:	bf00      	nop
 800b238:	200015f8 	.word	0x200015f8

0800b23c <_malloc_r>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	1ccd      	adds	r5, r1, #3
 800b240:	f025 0503 	bic.w	r5, r5, #3
 800b244:	3508      	adds	r5, #8
 800b246:	2d0c      	cmp	r5, #12
 800b248:	bf38      	it	cc
 800b24a:	250c      	movcc	r5, #12
 800b24c:	2d00      	cmp	r5, #0
 800b24e:	4606      	mov	r6, r0
 800b250:	db01      	blt.n	800b256 <_malloc_r+0x1a>
 800b252:	42a9      	cmp	r1, r5
 800b254:	d903      	bls.n	800b25e <_malloc_r+0x22>
 800b256:	230c      	movs	r3, #12
 800b258:	6033      	str	r3, [r6, #0]
 800b25a:	2000      	movs	r0, #0
 800b25c:	bd70      	pop	{r4, r5, r6, pc}
 800b25e:	f000 fb91 	bl	800b984 <__malloc_lock>
 800b262:	4a21      	ldr	r2, [pc, #132]	; (800b2e8 <_malloc_r+0xac>)
 800b264:	6814      	ldr	r4, [r2, #0]
 800b266:	4621      	mov	r1, r4
 800b268:	b991      	cbnz	r1, 800b290 <_malloc_r+0x54>
 800b26a:	4c20      	ldr	r4, [pc, #128]	; (800b2ec <_malloc_r+0xb0>)
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	b91b      	cbnz	r3, 800b278 <_malloc_r+0x3c>
 800b270:	4630      	mov	r0, r6
 800b272:	f000 f8b9 	bl	800b3e8 <_sbrk_r>
 800b276:	6020      	str	r0, [r4, #0]
 800b278:	4629      	mov	r1, r5
 800b27a:	4630      	mov	r0, r6
 800b27c:	f000 f8b4 	bl	800b3e8 <_sbrk_r>
 800b280:	1c43      	adds	r3, r0, #1
 800b282:	d124      	bne.n	800b2ce <_malloc_r+0x92>
 800b284:	230c      	movs	r3, #12
 800b286:	6033      	str	r3, [r6, #0]
 800b288:	4630      	mov	r0, r6
 800b28a:	f000 fb7c 	bl	800b986 <__malloc_unlock>
 800b28e:	e7e4      	b.n	800b25a <_malloc_r+0x1e>
 800b290:	680b      	ldr	r3, [r1, #0]
 800b292:	1b5b      	subs	r3, r3, r5
 800b294:	d418      	bmi.n	800b2c8 <_malloc_r+0x8c>
 800b296:	2b0b      	cmp	r3, #11
 800b298:	d90f      	bls.n	800b2ba <_malloc_r+0x7e>
 800b29a:	600b      	str	r3, [r1, #0]
 800b29c:	50cd      	str	r5, [r1, r3]
 800b29e:	18cc      	adds	r4, r1, r3
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f000 fb70 	bl	800b986 <__malloc_unlock>
 800b2a6:	f104 000b 	add.w	r0, r4, #11
 800b2aa:	1d23      	adds	r3, r4, #4
 800b2ac:	f020 0007 	bic.w	r0, r0, #7
 800b2b0:	1ac3      	subs	r3, r0, r3
 800b2b2:	d0d3      	beq.n	800b25c <_malloc_r+0x20>
 800b2b4:	425a      	negs	r2, r3
 800b2b6:	50e2      	str	r2, [r4, r3]
 800b2b8:	e7d0      	b.n	800b25c <_malloc_r+0x20>
 800b2ba:	428c      	cmp	r4, r1
 800b2bc:	684b      	ldr	r3, [r1, #4]
 800b2be:	bf16      	itet	ne
 800b2c0:	6063      	strne	r3, [r4, #4]
 800b2c2:	6013      	streq	r3, [r2, #0]
 800b2c4:	460c      	movne	r4, r1
 800b2c6:	e7eb      	b.n	800b2a0 <_malloc_r+0x64>
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	6849      	ldr	r1, [r1, #4]
 800b2cc:	e7cc      	b.n	800b268 <_malloc_r+0x2c>
 800b2ce:	1cc4      	adds	r4, r0, #3
 800b2d0:	f024 0403 	bic.w	r4, r4, #3
 800b2d4:	42a0      	cmp	r0, r4
 800b2d6:	d005      	beq.n	800b2e4 <_malloc_r+0xa8>
 800b2d8:	1a21      	subs	r1, r4, r0
 800b2da:	4630      	mov	r0, r6
 800b2dc:	f000 f884 	bl	800b3e8 <_sbrk_r>
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	d0cf      	beq.n	800b284 <_malloc_r+0x48>
 800b2e4:	6025      	str	r5, [r4, #0]
 800b2e6:	e7db      	b.n	800b2a0 <_malloc_r+0x64>
 800b2e8:	200015f8 	.word	0x200015f8
 800b2ec:	200015fc 	.word	0x200015fc

0800b2f0 <iprintf>:
 800b2f0:	b40f      	push	{r0, r1, r2, r3}
 800b2f2:	4b0a      	ldr	r3, [pc, #40]	; (800b31c <iprintf+0x2c>)
 800b2f4:	b513      	push	{r0, r1, r4, lr}
 800b2f6:	681c      	ldr	r4, [r3, #0]
 800b2f8:	b124      	cbz	r4, 800b304 <iprintf+0x14>
 800b2fa:	69a3      	ldr	r3, [r4, #24]
 800b2fc:	b913      	cbnz	r3, 800b304 <iprintf+0x14>
 800b2fe:	4620      	mov	r0, r4
 800b300:	f000 fa52 	bl	800b7a8 <__sinit>
 800b304:	ab05      	add	r3, sp, #20
 800b306:	9a04      	ldr	r2, [sp, #16]
 800b308:	68a1      	ldr	r1, [r4, #8]
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 fcdd 	bl	800bccc <_vfiprintf_r>
 800b312:	b002      	add	sp, #8
 800b314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b318:	b004      	add	sp, #16
 800b31a:	4770      	bx	lr
 800b31c:	20000fa8 	.word	0x20000fa8

0800b320 <_puts_r>:
 800b320:	b570      	push	{r4, r5, r6, lr}
 800b322:	460e      	mov	r6, r1
 800b324:	4605      	mov	r5, r0
 800b326:	b118      	cbz	r0, 800b330 <_puts_r+0x10>
 800b328:	6983      	ldr	r3, [r0, #24]
 800b32a:	b90b      	cbnz	r3, 800b330 <_puts_r+0x10>
 800b32c:	f000 fa3c 	bl	800b7a8 <__sinit>
 800b330:	69ab      	ldr	r3, [r5, #24]
 800b332:	68ac      	ldr	r4, [r5, #8]
 800b334:	b913      	cbnz	r3, 800b33c <_puts_r+0x1c>
 800b336:	4628      	mov	r0, r5
 800b338:	f000 fa36 	bl	800b7a8 <__sinit>
 800b33c:	4b23      	ldr	r3, [pc, #140]	; (800b3cc <_puts_r+0xac>)
 800b33e:	429c      	cmp	r4, r3
 800b340:	d117      	bne.n	800b372 <_puts_r+0x52>
 800b342:	686c      	ldr	r4, [r5, #4]
 800b344:	89a3      	ldrh	r3, [r4, #12]
 800b346:	071b      	lsls	r3, r3, #28
 800b348:	d51d      	bpl.n	800b386 <_puts_r+0x66>
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	b1db      	cbz	r3, 800b386 <_puts_r+0x66>
 800b34e:	3e01      	subs	r6, #1
 800b350:	68a3      	ldr	r3, [r4, #8]
 800b352:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b356:	3b01      	subs	r3, #1
 800b358:	60a3      	str	r3, [r4, #8]
 800b35a:	b9e9      	cbnz	r1, 800b398 <_puts_r+0x78>
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	da2e      	bge.n	800b3be <_puts_r+0x9e>
 800b360:	4622      	mov	r2, r4
 800b362:	210a      	movs	r1, #10
 800b364:	4628      	mov	r0, r5
 800b366:	f000 f86f 	bl	800b448 <__swbuf_r>
 800b36a:	3001      	adds	r0, #1
 800b36c:	d011      	beq.n	800b392 <_puts_r+0x72>
 800b36e:	200a      	movs	r0, #10
 800b370:	e011      	b.n	800b396 <_puts_r+0x76>
 800b372:	4b17      	ldr	r3, [pc, #92]	; (800b3d0 <_puts_r+0xb0>)
 800b374:	429c      	cmp	r4, r3
 800b376:	d101      	bne.n	800b37c <_puts_r+0x5c>
 800b378:	68ac      	ldr	r4, [r5, #8]
 800b37a:	e7e3      	b.n	800b344 <_puts_r+0x24>
 800b37c:	4b15      	ldr	r3, [pc, #84]	; (800b3d4 <_puts_r+0xb4>)
 800b37e:	429c      	cmp	r4, r3
 800b380:	bf08      	it	eq
 800b382:	68ec      	ldreq	r4, [r5, #12]
 800b384:	e7de      	b.n	800b344 <_puts_r+0x24>
 800b386:	4621      	mov	r1, r4
 800b388:	4628      	mov	r0, r5
 800b38a:	f000 f8af 	bl	800b4ec <__swsetup_r>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d0dd      	beq.n	800b34e <_puts_r+0x2e>
 800b392:	f04f 30ff 	mov.w	r0, #4294967295
 800b396:	bd70      	pop	{r4, r5, r6, pc}
 800b398:	2b00      	cmp	r3, #0
 800b39a:	da04      	bge.n	800b3a6 <_puts_r+0x86>
 800b39c:	69a2      	ldr	r2, [r4, #24]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	dc06      	bgt.n	800b3b0 <_puts_r+0x90>
 800b3a2:	290a      	cmp	r1, #10
 800b3a4:	d004      	beq.n	800b3b0 <_puts_r+0x90>
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	1c5a      	adds	r2, r3, #1
 800b3aa:	6022      	str	r2, [r4, #0]
 800b3ac:	7019      	strb	r1, [r3, #0]
 800b3ae:	e7cf      	b.n	800b350 <_puts_r+0x30>
 800b3b0:	4622      	mov	r2, r4
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f000 f848 	bl	800b448 <__swbuf_r>
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d1c9      	bne.n	800b350 <_puts_r+0x30>
 800b3bc:	e7e9      	b.n	800b392 <_puts_r+0x72>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	200a      	movs	r0, #10
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	6022      	str	r2, [r4, #0]
 800b3c6:	7018      	strb	r0, [r3, #0]
 800b3c8:	e7e5      	b.n	800b396 <_puts_r+0x76>
 800b3ca:	bf00      	nop
 800b3cc:	080685f0 	.word	0x080685f0
 800b3d0:	08068610 	.word	0x08068610
 800b3d4:	080685d0 	.word	0x080685d0

0800b3d8 <puts>:
 800b3d8:	4b02      	ldr	r3, [pc, #8]	; (800b3e4 <puts+0xc>)
 800b3da:	4601      	mov	r1, r0
 800b3dc:	6818      	ldr	r0, [r3, #0]
 800b3de:	f7ff bf9f 	b.w	800b320 <_puts_r>
 800b3e2:	bf00      	nop
 800b3e4:	20000fa8 	.word	0x20000fa8

0800b3e8 <_sbrk_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4c06      	ldr	r4, [pc, #24]	; (800b404 <_sbrk_r+0x1c>)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	f7f7 f920 	bl	8002638 <_sbrk>
 800b3f8:	1c43      	adds	r3, r0, #1
 800b3fa:	d102      	bne.n	800b402 <_sbrk_r+0x1a>
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	b103      	cbz	r3, 800b402 <_sbrk_r+0x1a>
 800b400:	602b      	str	r3, [r5, #0]
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	200027bc 	.word	0x200027bc

0800b408 <siprintf>:
 800b408:	b40e      	push	{r1, r2, r3}
 800b40a:	b500      	push	{lr}
 800b40c:	b09c      	sub	sp, #112	; 0x70
 800b40e:	ab1d      	add	r3, sp, #116	; 0x74
 800b410:	9002      	str	r0, [sp, #8]
 800b412:	9006      	str	r0, [sp, #24]
 800b414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b418:	4809      	ldr	r0, [pc, #36]	; (800b440 <siprintf+0x38>)
 800b41a:	9107      	str	r1, [sp, #28]
 800b41c:	9104      	str	r1, [sp, #16]
 800b41e:	4909      	ldr	r1, [pc, #36]	; (800b444 <siprintf+0x3c>)
 800b420:	f853 2b04 	ldr.w	r2, [r3], #4
 800b424:	9105      	str	r1, [sp, #20]
 800b426:	6800      	ldr	r0, [r0, #0]
 800b428:	9301      	str	r3, [sp, #4]
 800b42a:	a902      	add	r1, sp, #8
 800b42c:	f000 fb2c 	bl	800ba88 <_svfiprintf_r>
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	2200      	movs	r2, #0
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	b01c      	add	sp, #112	; 0x70
 800b438:	f85d eb04 	ldr.w	lr, [sp], #4
 800b43c:	b003      	add	sp, #12
 800b43e:	4770      	bx	lr
 800b440:	20000fa8 	.word	0x20000fa8
 800b444:	ffff0208 	.word	0xffff0208

0800b448 <__swbuf_r>:
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	460e      	mov	r6, r1
 800b44c:	4614      	mov	r4, r2
 800b44e:	4605      	mov	r5, r0
 800b450:	b118      	cbz	r0, 800b45a <__swbuf_r+0x12>
 800b452:	6983      	ldr	r3, [r0, #24]
 800b454:	b90b      	cbnz	r3, 800b45a <__swbuf_r+0x12>
 800b456:	f000 f9a7 	bl	800b7a8 <__sinit>
 800b45a:	4b21      	ldr	r3, [pc, #132]	; (800b4e0 <__swbuf_r+0x98>)
 800b45c:	429c      	cmp	r4, r3
 800b45e:	d12a      	bne.n	800b4b6 <__swbuf_r+0x6e>
 800b460:	686c      	ldr	r4, [r5, #4]
 800b462:	69a3      	ldr	r3, [r4, #24]
 800b464:	60a3      	str	r3, [r4, #8]
 800b466:	89a3      	ldrh	r3, [r4, #12]
 800b468:	071a      	lsls	r2, r3, #28
 800b46a:	d52e      	bpl.n	800b4ca <__swbuf_r+0x82>
 800b46c:	6923      	ldr	r3, [r4, #16]
 800b46e:	b363      	cbz	r3, 800b4ca <__swbuf_r+0x82>
 800b470:	6923      	ldr	r3, [r4, #16]
 800b472:	6820      	ldr	r0, [r4, #0]
 800b474:	1ac0      	subs	r0, r0, r3
 800b476:	6963      	ldr	r3, [r4, #20]
 800b478:	b2f6      	uxtb	r6, r6
 800b47a:	4283      	cmp	r3, r0
 800b47c:	4637      	mov	r7, r6
 800b47e:	dc04      	bgt.n	800b48a <__swbuf_r+0x42>
 800b480:	4621      	mov	r1, r4
 800b482:	4628      	mov	r0, r5
 800b484:	f000 f926 	bl	800b6d4 <_fflush_r>
 800b488:	bb28      	cbnz	r0, 800b4d6 <__swbuf_r+0x8e>
 800b48a:	68a3      	ldr	r3, [r4, #8]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	60a3      	str	r3, [r4, #8]
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	1c5a      	adds	r2, r3, #1
 800b494:	6022      	str	r2, [r4, #0]
 800b496:	701e      	strb	r6, [r3, #0]
 800b498:	6963      	ldr	r3, [r4, #20]
 800b49a:	3001      	adds	r0, #1
 800b49c:	4283      	cmp	r3, r0
 800b49e:	d004      	beq.n	800b4aa <__swbuf_r+0x62>
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	07db      	lsls	r3, r3, #31
 800b4a4:	d519      	bpl.n	800b4da <__swbuf_r+0x92>
 800b4a6:	2e0a      	cmp	r6, #10
 800b4a8:	d117      	bne.n	800b4da <__swbuf_r+0x92>
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	f000 f911 	bl	800b6d4 <_fflush_r>
 800b4b2:	b190      	cbz	r0, 800b4da <__swbuf_r+0x92>
 800b4b4:	e00f      	b.n	800b4d6 <__swbuf_r+0x8e>
 800b4b6:	4b0b      	ldr	r3, [pc, #44]	; (800b4e4 <__swbuf_r+0x9c>)
 800b4b8:	429c      	cmp	r4, r3
 800b4ba:	d101      	bne.n	800b4c0 <__swbuf_r+0x78>
 800b4bc:	68ac      	ldr	r4, [r5, #8]
 800b4be:	e7d0      	b.n	800b462 <__swbuf_r+0x1a>
 800b4c0:	4b09      	ldr	r3, [pc, #36]	; (800b4e8 <__swbuf_r+0xa0>)
 800b4c2:	429c      	cmp	r4, r3
 800b4c4:	bf08      	it	eq
 800b4c6:	68ec      	ldreq	r4, [r5, #12]
 800b4c8:	e7cb      	b.n	800b462 <__swbuf_r+0x1a>
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f000 f80d 	bl	800b4ec <__swsetup_r>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d0cc      	beq.n	800b470 <__swbuf_r+0x28>
 800b4d6:	f04f 37ff 	mov.w	r7, #4294967295
 800b4da:	4638      	mov	r0, r7
 800b4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	080685f0 	.word	0x080685f0
 800b4e4:	08068610 	.word	0x08068610
 800b4e8:	080685d0 	.word	0x080685d0

0800b4ec <__swsetup_r>:
 800b4ec:	4b32      	ldr	r3, [pc, #200]	; (800b5b8 <__swsetup_r+0xcc>)
 800b4ee:	b570      	push	{r4, r5, r6, lr}
 800b4f0:	681d      	ldr	r5, [r3, #0]
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	b125      	cbz	r5, 800b502 <__swsetup_r+0x16>
 800b4f8:	69ab      	ldr	r3, [r5, #24]
 800b4fa:	b913      	cbnz	r3, 800b502 <__swsetup_r+0x16>
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f000 f953 	bl	800b7a8 <__sinit>
 800b502:	4b2e      	ldr	r3, [pc, #184]	; (800b5bc <__swsetup_r+0xd0>)
 800b504:	429c      	cmp	r4, r3
 800b506:	d10f      	bne.n	800b528 <__swsetup_r+0x3c>
 800b508:	686c      	ldr	r4, [r5, #4]
 800b50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50e:	b29a      	uxth	r2, r3
 800b510:	0715      	lsls	r5, r2, #28
 800b512:	d42c      	bmi.n	800b56e <__swsetup_r+0x82>
 800b514:	06d0      	lsls	r0, r2, #27
 800b516:	d411      	bmi.n	800b53c <__swsetup_r+0x50>
 800b518:	2209      	movs	r2, #9
 800b51a:	6032      	str	r2, [r6, #0]
 800b51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b520:	81a3      	strh	r3, [r4, #12]
 800b522:	f04f 30ff 	mov.w	r0, #4294967295
 800b526:	e03e      	b.n	800b5a6 <__swsetup_r+0xba>
 800b528:	4b25      	ldr	r3, [pc, #148]	; (800b5c0 <__swsetup_r+0xd4>)
 800b52a:	429c      	cmp	r4, r3
 800b52c:	d101      	bne.n	800b532 <__swsetup_r+0x46>
 800b52e:	68ac      	ldr	r4, [r5, #8]
 800b530:	e7eb      	b.n	800b50a <__swsetup_r+0x1e>
 800b532:	4b24      	ldr	r3, [pc, #144]	; (800b5c4 <__swsetup_r+0xd8>)
 800b534:	429c      	cmp	r4, r3
 800b536:	bf08      	it	eq
 800b538:	68ec      	ldreq	r4, [r5, #12]
 800b53a:	e7e6      	b.n	800b50a <__swsetup_r+0x1e>
 800b53c:	0751      	lsls	r1, r2, #29
 800b53e:	d512      	bpl.n	800b566 <__swsetup_r+0x7a>
 800b540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b542:	b141      	cbz	r1, 800b556 <__swsetup_r+0x6a>
 800b544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b548:	4299      	cmp	r1, r3
 800b54a:	d002      	beq.n	800b552 <__swsetup_r+0x66>
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7ff fe27 	bl	800b1a0 <_free_r>
 800b552:	2300      	movs	r3, #0
 800b554:	6363      	str	r3, [r4, #52]	; 0x34
 800b556:	89a3      	ldrh	r3, [r4, #12]
 800b558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	2300      	movs	r3, #0
 800b560:	6063      	str	r3, [r4, #4]
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f043 0308 	orr.w	r3, r3, #8
 800b56c:	81a3      	strh	r3, [r4, #12]
 800b56e:	6923      	ldr	r3, [r4, #16]
 800b570:	b94b      	cbnz	r3, 800b586 <__swsetup_r+0x9a>
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b57c:	d003      	beq.n	800b586 <__swsetup_r+0x9a>
 800b57e:	4621      	mov	r1, r4
 800b580:	4630      	mov	r0, r6
 800b582:	f000 f9bf 	bl	800b904 <__smakebuf_r>
 800b586:	89a2      	ldrh	r2, [r4, #12]
 800b588:	f012 0301 	ands.w	r3, r2, #1
 800b58c:	d00c      	beq.n	800b5a8 <__swsetup_r+0xbc>
 800b58e:	2300      	movs	r3, #0
 800b590:	60a3      	str	r3, [r4, #8]
 800b592:	6963      	ldr	r3, [r4, #20]
 800b594:	425b      	negs	r3, r3
 800b596:	61a3      	str	r3, [r4, #24]
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	b953      	cbnz	r3, 800b5b2 <__swsetup_r+0xc6>
 800b59c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b5a4:	d1ba      	bne.n	800b51c <__swsetup_r+0x30>
 800b5a6:	bd70      	pop	{r4, r5, r6, pc}
 800b5a8:	0792      	lsls	r2, r2, #30
 800b5aa:	bf58      	it	pl
 800b5ac:	6963      	ldrpl	r3, [r4, #20]
 800b5ae:	60a3      	str	r3, [r4, #8]
 800b5b0:	e7f2      	b.n	800b598 <__swsetup_r+0xac>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e7f7      	b.n	800b5a6 <__swsetup_r+0xba>
 800b5b6:	bf00      	nop
 800b5b8:	20000fa8 	.word	0x20000fa8
 800b5bc:	080685f0 	.word	0x080685f0
 800b5c0:	08068610 	.word	0x08068610
 800b5c4:	080685d0 	.word	0x080685d0

0800b5c8 <__sflush_r>:
 800b5c8:	898a      	ldrh	r2, [r1, #12]
 800b5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	0710      	lsls	r0, r2, #28
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	d458      	bmi.n	800b688 <__sflush_r+0xc0>
 800b5d6:	684b      	ldr	r3, [r1, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dc05      	bgt.n	800b5e8 <__sflush_r+0x20>
 800b5dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dc02      	bgt.n	800b5e8 <__sflush_r+0x20>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	d0f9      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5f4:	682f      	ldr	r7, [r5, #0]
 800b5f6:	6a21      	ldr	r1, [r4, #32]
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	d032      	beq.n	800b662 <__sflush_r+0x9a>
 800b5fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5fe:	89a3      	ldrh	r3, [r4, #12]
 800b600:	075a      	lsls	r2, r3, #29
 800b602:	d505      	bpl.n	800b610 <__sflush_r+0x48>
 800b604:	6863      	ldr	r3, [r4, #4]
 800b606:	1ac0      	subs	r0, r0, r3
 800b608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b60a:	b10b      	cbz	r3, 800b610 <__sflush_r+0x48>
 800b60c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b60e:	1ac0      	subs	r0, r0, r3
 800b610:	2300      	movs	r3, #0
 800b612:	4602      	mov	r2, r0
 800b614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b616:	6a21      	ldr	r1, [r4, #32]
 800b618:	4628      	mov	r0, r5
 800b61a:	47b0      	blx	r6
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	d106      	bne.n	800b630 <__sflush_r+0x68>
 800b622:	6829      	ldr	r1, [r5, #0]
 800b624:	291d      	cmp	r1, #29
 800b626:	d848      	bhi.n	800b6ba <__sflush_r+0xf2>
 800b628:	4a29      	ldr	r2, [pc, #164]	; (800b6d0 <__sflush_r+0x108>)
 800b62a:	40ca      	lsrs	r2, r1
 800b62c:	07d6      	lsls	r6, r2, #31
 800b62e:	d544      	bpl.n	800b6ba <__sflush_r+0xf2>
 800b630:	2200      	movs	r2, #0
 800b632:	6062      	str	r2, [r4, #4]
 800b634:	04d9      	lsls	r1, r3, #19
 800b636:	6922      	ldr	r2, [r4, #16]
 800b638:	6022      	str	r2, [r4, #0]
 800b63a:	d504      	bpl.n	800b646 <__sflush_r+0x7e>
 800b63c:	1c42      	adds	r2, r0, #1
 800b63e:	d101      	bne.n	800b644 <__sflush_r+0x7c>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	b903      	cbnz	r3, 800b646 <__sflush_r+0x7e>
 800b644:	6560      	str	r0, [r4, #84]	; 0x54
 800b646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b648:	602f      	str	r7, [r5, #0]
 800b64a:	2900      	cmp	r1, #0
 800b64c:	d0c9      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b64e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b652:	4299      	cmp	r1, r3
 800b654:	d002      	beq.n	800b65c <__sflush_r+0x94>
 800b656:	4628      	mov	r0, r5
 800b658:	f7ff fda2 	bl	800b1a0 <_free_r>
 800b65c:	2000      	movs	r0, #0
 800b65e:	6360      	str	r0, [r4, #52]	; 0x34
 800b660:	e7c0      	b.n	800b5e4 <__sflush_r+0x1c>
 800b662:	2301      	movs	r3, #1
 800b664:	4628      	mov	r0, r5
 800b666:	47b0      	blx	r6
 800b668:	1c41      	adds	r1, r0, #1
 800b66a:	d1c8      	bne.n	800b5fe <__sflush_r+0x36>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0c5      	beq.n	800b5fe <__sflush_r+0x36>
 800b672:	2b1d      	cmp	r3, #29
 800b674:	d001      	beq.n	800b67a <__sflush_r+0xb2>
 800b676:	2b16      	cmp	r3, #22
 800b678:	d101      	bne.n	800b67e <__sflush_r+0xb6>
 800b67a:	602f      	str	r7, [r5, #0]
 800b67c:	e7b1      	b.n	800b5e2 <__sflush_r+0x1a>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b684:	81a3      	strh	r3, [r4, #12]
 800b686:	e7ad      	b.n	800b5e4 <__sflush_r+0x1c>
 800b688:	690f      	ldr	r7, [r1, #16]
 800b68a:	2f00      	cmp	r7, #0
 800b68c:	d0a9      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b68e:	0793      	lsls	r3, r2, #30
 800b690:	680e      	ldr	r6, [r1, #0]
 800b692:	bf08      	it	eq
 800b694:	694b      	ldreq	r3, [r1, #20]
 800b696:	600f      	str	r7, [r1, #0]
 800b698:	bf18      	it	ne
 800b69a:	2300      	movne	r3, #0
 800b69c:	eba6 0807 	sub.w	r8, r6, r7
 800b6a0:	608b      	str	r3, [r1, #8]
 800b6a2:	f1b8 0f00 	cmp.w	r8, #0
 800b6a6:	dd9c      	ble.n	800b5e2 <__sflush_r+0x1a>
 800b6a8:	4643      	mov	r3, r8
 800b6aa:	463a      	mov	r2, r7
 800b6ac:	6a21      	ldr	r1, [r4, #32]
 800b6ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	47b0      	blx	r6
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	dc06      	bgt.n	800b6c6 <__sflush_r+0xfe>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c4:	e78e      	b.n	800b5e4 <__sflush_r+0x1c>
 800b6c6:	4407      	add	r7, r0
 800b6c8:	eba8 0800 	sub.w	r8, r8, r0
 800b6cc:	e7e9      	b.n	800b6a2 <__sflush_r+0xda>
 800b6ce:	bf00      	nop
 800b6d0:	20400001 	.word	0x20400001

0800b6d4 <_fflush_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	690b      	ldr	r3, [r1, #16]
 800b6d8:	4605      	mov	r5, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	b1db      	cbz	r3, 800b716 <_fflush_r+0x42>
 800b6de:	b118      	cbz	r0, 800b6e8 <_fflush_r+0x14>
 800b6e0:	6983      	ldr	r3, [r0, #24]
 800b6e2:	b90b      	cbnz	r3, 800b6e8 <_fflush_r+0x14>
 800b6e4:	f000 f860 	bl	800b7a8 <__sinit>
 800b6e8:	4b0c      	ldr	r3, [pc, #48]	; (800b71c <_fflush_r+0x48>)
 800b6ea:	429c      	cmp	r4, r3
 800b6ec:	d109      	bne.n	800b702 <_fflush_r+0x2e>
 800b6ee:	686c      	ldr	r4, [r5, #4]
 800b6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6f4:	b17b      	cbz	r3, 800b716 <_fflush_r+0x42>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6fe:	f7ff bf63 	b.w	800b5c8 <__sflush_r>
 800b702:	4b07      	ldr	r3, [pc, #28]	; (800b720 <_fflush_r+0x4c>)
 800b704:	429c      	cmp	r4, r3
 800b706:	d101      	bne.n	800b70c <_fflush_r+0x38>
 800b708:	68ac      	ldr	r4, [r5, #8]
 800b70a:	e7f1      	b.n	800b6f0 <_fflush_r+0x1c>
 800b70c:	4b05      	ldr	r3, [pc, #20]	; (800b724 <_fflush_r+0x50>)
 800b70e:	429c      	cmp	r4, r3
 800b710:	bf08      	it	eq
 800b712:	68ec      	ldreq	r4, [r5, #12]
 800b714:	e7ec      	b.n	800b6f0 <_fflush_r+0x1c>
 800b716:	2000      	movs	r0, #0
 800b718:	bd38      	pop	{r3, r4, r5, pc}
 800b71a:	bf00      	nop
 800b71c:	080685f0 	.word	0x080685f0
 800b720:	08068610 	.word	0x08068610
 800b724:	080685d0 	.word	0x080685d0

0800b728 <std>:
 800b728:	2300      	movs	r3, #0
 800b72a:	b510      	push	{r4, lr}
 800b72c:	4604      	mov	r4, r0
 800b72e:	e9c0 3300 	strd	r3, r3, [r0]
 800b732:	6083      	str	r3, [r0, #8]
 800b734:	8181      	strh	r1, [r0, #12]
 800b736:	6643      	str	r3, [r0, #100]	; 0x64
 800b738:	81c2      	strh	r2, [r0, #14]
 800b73a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b73e:	6183      	str	r3, [r0, #24]
 800b740:	4619      	mov	r1, r3
 800b742:	2208      	movs	r2, #8
 800b744:	305c      	adds	r0, #92	; 0x5c
 800b746:	f7ff fd14 	bl	800b172 <memset>
 800b74a:	4b05      	ldr	r3, [pc, #20]	; (800b760 <std+0x38>)
 800b74c:	6263      	str	r3, [r4, #36]	; 0x24
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <std+0x3c>)
 800b750:	62a3      	str	r3, [r4, #40]	; 0x28
 800b752:	4b05      	ldr	r3, [pc, #20]	; (800b768 <std+0x40>)
 800b754:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b756:	4b05      	ldr	r3, [pc, #20]	; (800b76c <std+0x44>)
 800b758:	6224      	str	r4, [r4, #32]
 800b75a:	6323      	str	r3, [r4, #48]	; 0x30
 800b75c:	bd10      	pop	{r4, pc}
 800b75e:	bf00      	nop
 800b760:	0800c209 	.word	0x0800c209
 800b764:	0800c22b 	.word	0x0800c22b
 800b768:	0800c263 	.word	0x0800c263
 800b76c:	0800c287 	.word	0x0800c287

0800b770 <_cleanup_r>:
 800b770:	4901      	ldr	r1, [pc, #4]	; (800b778 <_cleanup_r+0x8>)
 800b772:	f000 b885 	b.w	800b880 <_fwalk_reent>
 800b776:	bf00      	nop
 800b778:	0800b6d5 	.word	0x0800b6d5

0800b77c <__sfmoreglue>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	1e4a      	subs	r2, r1, #1
 800b780:	2568      	movs	r5, #104	; 0x68
 800b782:	4355      	muls	r5, r2
 800b784:	460e      	mov	r6, r1
 800b786:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b78a:	f7ff fd57 	bl	800b23c <_malloc_r>
 800b78e:	4604      	mov	r4, r0
 800b790:	b140      	cbz	r0, 800b7a4 <__sfmoreglue+0x28>
 800b792:	2100      	movs	r1, #0
 800b794:	e9c0 1600 	strd	r1, r6, [r0]
 800b798:	300c      	adds	r0, #12
 800b79a:	60a0      	str	r0, [r4, #8]
 800b79c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7a0:	f7ff fce7 	bl	800b172 <memset>
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}

0800b7a8 <__sinit>:
 800b7a8:	6983      	ldr	r3, [r0, #24]
 800b7aa:	b510      	push	{r4, lr}
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	bb33      	cbnz	r3, 800b7fe <__sinit+0x56>
 800b7b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b7b4:	6503      	str	r3, [r0, #80]	; 0x50
 800b7b6:	4b12      	ldr	r3, [pc, #72]	; (800b800 <__sinit+0x58>)
 800b7b8:	4a12      	ldr	r2, [pc, #72]	; (800b804 <__sinit+0x5c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6282      	str	r2, [r0, #40]	; 0x28
 800b7be:	4298      	cmp	r0, r3
 800b7c0:	bf04      	itt	eq
 800b7c2:	2301      	moveq	r3, #1
 800b7c4:	6183      	streq	r3, [r0, #24]
 800b7c6:	f000 f81f 	bl	800b808 <__sfp>
 800b7ca:	6060      	str	r0, [r4, #4]
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 f81b 	bl	800b808 <__sfp>
 800b7d2:	60a0      	str	r0, [r4, #8]
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f000 f817 	bl	800b808 <__sfp>
 800b7da:	2200      	movs	r2, #0
 800b7dc:	60e0      	str	r0, [r4, #12]
 800b7de:	2104      	movs	r1, #4
 800b7e0:	6860      	ldr	r0, [r4, #4]
 800b7e2:	f7ff ffa1 	bl	800b728 <std>
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	2109      	movs	r1, #9
 800b7ea:	68a0      	ldr	r0, [r4, #8]
 800b7ec:	f7ff ff9c 	bl	800b728 <std>
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	2112      	movs	r1, #18
 800b7f4:	68e0      	ldr	r0, [r4, #12]
 800b7f6:	f7ff ff97 	bl	800b728 <std>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	61a3      	str	r3, [r4, #24]
 800b7fe:	bd10      	pop	{r4, pc}
 800b800:	080685cc 	.word	0x080685cc
 800b804:	0800b771 	.word	0x0800b771

0800b808 <__sfp>:
 800b808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80a:	4b1b      	ldr	r3, [pc, #108]	; (800b878 <__sfp+0x70>)
 800b80c:	681e      	ldr	r6, [r3, #0]
 800b80e:	69b3      	ldr	r3, [r6, #24]
 800b810:	4607      	mov	r7, r0
 800b812:	b913      	cbnz	r3, 800b81a <__sfp+0x12>
 800b814:	4630      	mov	r0, r6
 800b816:	f7ff ffc7 	bl	800b7a8 <__sinit>
 800b81a:	3648      	adds	r6, #72	; 0x48
 800b81c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b820:	3b01      	subs	r3, #1
 800b822:	d503      	bpl.n	800b82c <__sfp+0x24>
 800b824:	6833      	ldr	r3, [r6, #0]
 800b826:	b133      	cbz	r3, 800b836 <__sfp+0x2e>
 800b828:	6836      	ldr	r6, [r6, #0]
 800b82a:	e7f7      	b.n	800b81c <__sfp+0x14>
 800b82c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b830:	b16d      	cbz	r5, 800b84e <__sfp+0x46>
 800b832:	3468      	adds	r4, #104	; 0x68
 800b834:	e7f4      	b.n	800b820 <__sfp+0x18>
 800b836:	2104      	movs	r1, #4
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff ff9f 	bl	800b77c <__sfmoreglue>
 800b83e:	6030      	str	r0, [r6, #0]
 800b840:	2800      	cmp	r0, #0
 800b842:	d1f1      	bne.n	800b828 <__sfp+0x20>
 800b844:	230c      	movs	r3, #12
 800b846:	603b      	str	r3, [r7, #0]
 800b848:	4604      	mov	r4, r0
 800b84a:	4620      	mov	r0, r4
 800b84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b84e:	4b0b      	ldr	r3, [pc, #44]	; (800b87c <__sfp+0x74>)
 800b850:	6665      	str	r5, [r4, #100]	; 0x64
 800b852:	e9c4 5500 	strd	r5, r5, [r4]
 800b856:	60a5      	str	r5, [r4, #8]
 800b858:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b85c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b860:	2208      	movs	r2, #8
 800b862:	4629      	mov	r1, r5
 800b864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b868:	f7ff fc83 	bl	800b172 <memset>
 800b86c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b874:	e7e9      	b.n	800b84a <__sfp+0x42>
 800b876:	bf00      	nop
 800b878:	080685cc 	.word	0x080685cc
 800b87c:	ffff0001 	.word	0xffff0001

0800b880 <_fwalk_reent>:
 800b880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b884:	4680      	mov	r8, r0
 800b886:	4689      	mov	r9, r1
 800b888:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b88c:	2600      	movs	r6, #0
 800b88e:	b914      	cbnz	r4, 800b896 <_fwalk_reent+0x16>
 800b890:	4630      	mov	r0, r6
 800b892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b896:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b89a:	3f01      	subs	r7, #1
 800b89c:	d501      	bpl.n	800b8a2 <_fwalk_reent+0x22>
 800b89e:	6824      	ldr	r4, [r4, #0]
 800b8a0:	e7f5      	b.n	800b88e <_fwalk_reent+0xe>
 800b8a2:	89ab      	ldrh	r3, [r5, #12]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d907      	bls.n	800b8b8 <_fwalk_reent+0x38>
 800b8a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	d003      	beq.n	800b8b8 <_fwalk_reent+0x38>
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	47c8      	blx	r9
 800b8b6:	4306      	orrs	r6, r0
 800b8b8:	3568      	adds	r5, #104	; 0x68
 800b8ba:	e7ee      	b.n	800b89a <_fwalk_reent+0x1a>

0800b8bc <__swhatbuf_r>:
 800b8bc:	b570      	push	{r4, r5, r6, lr}
 800b8be:	460e      	mov	r6, r1
 800b8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	b096      	sub	sp, #88	; 0x58
 800b8c8:	4614      	mov	r4, r2
 800b8ca:	461d      	mov	r5, r3
 800b8cc:	da07      	bge.n	800b8de <__swhatbuf_r+0x22>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	602b      	str	r3, [r5, #0]
 800b8d2:	89b3      	ldrh	r3, [r6, #12]
 800b8d4:	061a      	lsls	r2, r3, #24
 800b8d6:	d410      	bmi.n	800b8fa <__swhatbuf_r+0x3e>
 800b8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8dc:	e00e      	b.n	800b8fc <__swhatbuf_r+0x40>
 800b8de:	466a      	mov	r2, sp
 800b8e0:	f000 fcf8 	bl	800c2d4 <_fstat_r>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	dbf2      	blt.n	800b8ce <__swhatbuf_r+0x12>
 800b8e8:	9a01      	ldr	r2, [sp, #4]
 800b8ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8f2:	425a      	negs	r2, r3
 800b8f4:	415a      	adcs	r2, r3
 800b8f6:	602a      	str	r2, [r5, #0]
 800b8f8:	e7ee      	b.n	800b8d8 <__swhatbuf_r+0x1c>
 800b8fa:	2340      	movs	r3, #64	; 0x40
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	6023      	str	r3, [r4, #0]
 800b900:	b016      	add	sp, #88	; 0x58
 800b902:	bd70      	pop	{r4, r5, r6, pc}

0800b904 <__smakebuf_r>:
 800b904:	898b      	ldrh	r3, [r1, #12]
 800b906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b908:	079d      	lsls	r5, r3, #30
 800b90a:	4606      	mov	r6, r0
 800b90c:	460c      	mov	r4, r1
 800b90e:	d507      	bpl.n	800b920 <__smakebuf_r+0x1c>
 800b910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	6123      	str	r3, [r4, #16]
 800b918:	2301      	movs	r3, #1
 800b91a:	6163      	str	r3, [r4, #20]
 800b91c:	b002      	add	sp, #8
 800b91e:	bd70      	pop	{r4, r5, r6, pc}
 800b920:	ab01      	add	r3, sp, #4
 800b922:	466a      	mov	r2, sp
 800b924:	f7ff ffca 	bl	800b8bc <__swhatbuf_r>
 800b928:	9900      	ldr	r1, [sp, #0]
 800b92a:	4605      	mov	r5, r0
 800b92c:	4630      	mov	r0, r6
 800b92e:	f7ff fc85 	bl	800b23c <_malloc_r>
 800b932:	b948      	cbnz	r0, 800b948 <__smakebuf_r+0x44>
 800b934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b938:	059a      	lsls	r2, r3, #22
 800b93a:	d4ef      	bmi.n	800b91c <__smakebuf_r+0x18>
 800b93c:	f023 0303 	bic.w	r3, r3, #3
 800b940:	f043 0302 	orr.w	r3, r3, #2
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	e7e3      	b.n	800b910 <__smakebuf_r+0xc>
 800b948:	4b0d      	ldr	r3, [pc, #52]	; (800b980 <__smakebuf_r+0x7c>)
 800b94a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	6020      	str	r0, [r4, #0]
 800b950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b954:	81a3      	strh	r3, [r4, #12]
 800b956:	9b00      	ldr	r3, [sp, #0]
 800b958:	6163      	str	r3, [r4, #20]
 800b95a:	9b01      	ldr	r3, [sp, #4]
 800b95c:	6120      	str	r0, [r4, #16]
 800b95e:	b15b      	cbz	r3, 800b978 <__smakebuf_r+0x74>
 800b960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b964:	4630      	mov	r0, r6
 800b966:	f000 fcc7 	bl	800c2f8 <_isatty_r>
 800b96a:	b128      	cbz	r0, 800b978 <__smakebuf_r+0x74>
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	f023 0303 	bic.w	r3, r3, #3
 800b972:	f043 0301 	orr.w	r3, r3, #1
 800b976:	81a3      	strh	r3, [r4, #12]
 800b978:	89a3      	ldrh	r3, [r4, #12]
 800b97a:	431d      	orrs	r5, r3
 800b97c:	81a5      	strh	r5, [r4, #12]
 800b97e:	e7cd      	b.n	800b91c <__smakebuf_r+0x18>
 800b980:	0800b771 	.word	0x0800b771

0800b984 <__malloc_lock>:
 800b984:	4770      	bx	lr

0800b986 <__malloc_unlock>:
 800b986:	4770      	bx	lr

0800b988 <_realloc_r>:
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	4607      	mov	r7, r0
 800b98c:	4614      	mov	r4, r2
 800b98e:	460e      	mov	r6, r1
 800b990:	b921      	cbnz	r1, 800b99c <_realloc_r+0x14>
 800b992:	4611      	mov	r1, r2
 800b994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b998:	f7ff bc50 	b.w	800b23c <_malloc_r>
 800b99c:	b922      	cbnz	r2, 800b9a8 <_realloc_r+0x20>
 800b99e:	f7ff fbff 	bl	800b1a0 <_free_r>
 800b9a2:	4625      	mov	r5, r4
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9a8:	f000 fce1 	bl	800c36e <_malloc_usable_size_r>
 800b9ac:	42a0      	cmp	r0, r4
 800b9ae:	d20f      	bcs.n	800b9d0 <_realloc_r+0x48>
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	f7ff fc42 	bl	800b23c <_malloc_r>
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d0f2      	beq.n	800b9a4 <_realloc_r+0x1c>
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4622      	mov	r2, r4
 800b9c2:	f7ff fbcb 	bl	800b15c <memcpy>
 800b9c6:	4631      	mov	r1, r6
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f7ff fbe9 	bl	800b1a0 <_free_r>
 800b9ce:	e7e9      	b.n	800b9a4 <_realloc_r+0x1c>
 800b9d0:	4635      	mov	r5, r6
 800b9d2:	e7e7      	b.n	800b9a4 <_realloc_r+0x1c>

0800b9d4 <__ssputs_r>:
 800b9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d8:	688e      	ldr	r6, [r1, #8]
 800b9da:	429e      	cmp	r6, r3
 800b9dc:	4682      	mov	sl, r0
 800b9de:	460c      	mov	r4, r1
 800b9e0:	4690      	mov	r8, r2
 800b9e2:	4699      	mov	r9, r3
 800b9e4:	d837      	bhi.n	800ba56 <__ssputs_r+0x82>
 800b9e6:	898a      	ldrh	r2, [r1, #12]
 800b9e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9ec:	d031      	beq.n	800ba52 <__ssputs_r+0x7e>
 800b9ee:	6825      	ldr	r5, [r4, #0]
 800b9f0:	6909      	ldr	r1, [r1, #16]
 800b9f2:	1a6f      	subs	r7, r5, r1
 800b9f4:	6965      	ldr	r5, [r4, #20]
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9fc:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba00:	f109 0301 	add.w	r3, r9, #1
 800ba04:	443b      	add	r3, r7
 800ba06:	429d      	cmp	r5, r3
 800ba08:	bf38      	it	cc
 800ba0a:	461d      	movcc	r5, r3
 800ba0c:	0553      	lsls	r3, r2, #21
 800ba0e:	d530      	bpl.n	800ba72 <__ssputs_r+0x9e>
 800ba10:	4629      	mov	r1, r5
 800ba12:	f7ff fc13 	bl	800b23c <_malloc_r>
 800ba16:	4606      	mov	r6, r0
 800ba18:	b950      	cbnz	r0, 800ba30 <__ssputs_r+0x5c>
 800ba1a:	230c      	movs	r3, #12
 800ba1c:	f8ca 3000 	str.w	r3, [sl]
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba26:	81a3      	strh	r3, [r4, #12]
 800ba28:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba30:	463a      	mov	r2, r7
 800ba32:	6921      	ldr	r1, [r4, #16]
 800ba34:	f7ff fb92 	bl	800b15c <memcpy>
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba42:	81a3      	strh	r3, [r4, #12]
 800ba44:	6126      	str	r6, [r4, #16]
 800ba46:	6165      	str	r5, [r4, #20]
 800ba48:	443e      	add	r6, r7
 800ba4a:	1bed      	subs	r5, r5, r7
 800ba4c:	6026      	str	r6, [r4, #0]
 800ba4e:	60a5      	str	r5, [r4, #8]
 800ba50:	464e      	mov	r6, r9
 800ba52:	454e      	cmp	r6, r9
 800ba54:	d900      	bls.n	800ba58 <__ssputs_r+0x84>
 800ba56:	464e      	mov	r6, r9
 800ba58:	4632      	mov	r2, r6
 800ba5a:	4641      	mov	r1, r8
 800ba5c:	6820      	ldr	r0, [r4, #0]
 800ba5e:	f000 fc6d 	bl	800c33c <memmove>
 800ba62:	68a3      	ldr	r3, [r4, #8]
 800ba64:	1b9b      	subs	r3, r3, r6
 800ba66:	60a3      	str	r3, [r4, #8]
 800ba68:	6823      	ldr	r3, [r4, #0]
 800ba6a:	441e      	add	r6, r3
 800ba6c:	6026      	str	r6, [r4, #0]
 800ba6e:	2000      	movs	r0, #0
 800ba70:	e7dc      	b.n	800ba2c <__ssputs_r+0x58>
 800ba72:	462a      	mov	r2, r5
 800ba74:	f7ff ff88 	bl	800b988 <_realloc_r>
 800ba78:	4606      	mov	r6, r0
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d1e2      	bne.n	800ba44 <__ssputs_r+0x70>
 800ba7e:	6921      	ldr	r1, [r4, #16]
 800ba80:	4650      	mov	r0, sl
 800ba82:	f7ff fb8d 	bl	800b1a0 <_free_r>
 800ba86:	e7c8      	b.n	800ba1a <__ssputs_r+0x46>

0800ba88 <_svfiprintf_r>:
 800ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	461d      	mov	r5, r3
 800ba8e:	898b      	ldrh	r3, [r1, #12]
 800ba90:	061f      	lsls	r7, r3, #24
 800ba92:	b09d      	sub	sp, #116	; 0x74
 800ba94:	4680      	mov	r8, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	4616      	mov	r6, r2
 800ba9a:	d50f      	bpl.n	800babc <_svfiprintf_r+0x34>
 800ba9c:	690b      	ldr	r3, [r1, #16]
 800ba9e:	b96b      	cbnz	r3, 800babc <_svfiprintf_r+0x34>
 800baa0:	2140      	movs	r1, #64	; 0x40
 800baa2:	f7ff fbcb 	bl	800b23c <_malloc_r>
 800baa6:	6020      	str	r0, [r4, #0]
 800baa8:	6120      	str	r0, [r4, #16]
 800baaa:	b928      	cbnz	r0, 800bab8 <_svfiprintf_r+0x30>
 800baac:	230c      	movs	r3, #12
 800baae:	f8c8 3000 	str.w	r3, [r8]
 800bab2:	f04f 30ff 	mov.w	r0, #4294967295
 800bab6:	e0c8      	b.n	800bc4a <_svfiprintf_r+0x1c2>
 800bab8:	2340      	movs	r3, #64	; 0x40
 800baba:	6163      	str	r3, [r4, #20]
 800babc:	2300      	movs	r3, #0
 800babe:	9309      	str	r3, [sp, #36]	; 0x24
 800bac0:	2320      	movs	r3, #32
 800bac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bac6:	2330      	movs	r3, #48	; 0x30
 800bac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bacc:	9503      	str	r5, [sp, #12]
 800bace:	f04f 0b01 	mov.w	fp, #1
 800bad2:	4637      	mov	r7, r6
 800bad4:	463d      	mov	r5, r7
 800bad6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bada:	b10b      	cbz	r3, 800bae0 <_svfiprintf_r+0x58>
 800badc:	2b25      	cmp	r3, #37	; 0x25
 800bade:	d13e      	bne.n	800bb5e <_svfiprintf_r+0xd6>
 800bae0:	ebb7 0a06 	subs.w	sl, r7, r6
 800bae4:	d00b      	beq.n	800bafe <_svfiprintf_r+0x76>
 800bae6:	4653      	mov	r3, sl
 800bae8:	4632      	mov	r2, r6
 800baea:	4621      	mov	r1, r4
 800baec:	4640      	mov	r0, r8
 800baee:	f7ff ff71 	bl	800b9d4 <__ssputs_r>
 800baf2:	3001      	adds	r0, #1
 800baf4:	f000 80a4 	beq.w	800bc40 <_svfiprintf_r+0x1b8>
 800baf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafa:	4453      	add	r3, sl
 800bafc:	9309      	str	r3, [sp, #36]	; 0x24
 800bafe:	783b      	ldrb	r3, [r7, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 809d 	beq.w	800bc40 <_svfiprintf_r+0x1b8>
 800bb06:	2300      	movs	r3, #0
 800bb08:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb10:	9304      	str	r3, [sp, #16]
 800bb12:	9307      	str	r3, [sp, #28]
 800bb14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb18:	931a      	str	r3, [sp, #104]	; 0x68
 800bb1a:	462f      	mov	r7, r5
 800bb1c:	2205      	movs	r2, #5
 800bb1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb22:	4850      	ldr	r0, [pc, #320]	; (800bc64 <_svfiprintf_r+0x1dc>)
 800bb24:	f7f4 fb5c 	bl	80001e0 <memchr>
 800bb28:	9b04      	ldr	r3, [sp, #16]
 800bb2a:	b9d0      	cbnz	r0, 800bb62 <_svfiprintf_r+0xda>
 800bb2c:	06d9      	lsls	r1, r3, #27
 800bb2e:	bf44      	itt	mi
 800bb30:	2220      	movmi	r2, #32
 800bb32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb36:	071a      	lsls	r2, r3, #28
 800bb38:	bf44      	itt	mi
 800bb3a:	222b      	movmi	r2, #43	; 0x2b
 800bb3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb40:	782a      	ldrb	r2, [r5, #0]
 800bb42:	2a2a      	cmp	r2, #42	; 0x2a
 800bb44:	d015      	beq.n	800bb72 <_svfiprintf_r+0xea>
 800bb46:	9a07      	ldr	r2, [sp, #28]
 800bb48:	462f      	mov	r7, r5
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	250a      	movs	r5, #10
 800bb4e:	4639      	mov	r1, r7
 800bb50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb54:	3b30      	subs	r3, #48	; 0x30
 800bb56:	2b09      	cmp	r3, #9
 800bb58:	d94d      	bls.n	800bbf6 <_svfiprintf_r+0x16e>
 800bb5a:	b1b8      	cbz	r0, 800bb8c <_svfiprintf_r+0x104>
 800bb5c:	e00f      	b.n	800bb7e <_svfiprintf_r+0xf6>
 800bb5e:	462f      	mov	r7, r5
 800bb60:	e7b8      	b.n	800bad4 <_svfiprintf_r+0x4c>
 800bb62:	4a40      	ldr	r2, [pc, #256]	; (800bc64 <_svfiprintf_r+0x1dc>)
 800bb64:	1a80      	subs	r0, r0, r2
 800bb66:	fa0b f000 	lsl.w	r0, fp, r0
 800bb6a:	4318      	orrs	r0, r3
 800bb6c:	9004      	str	r0, [sp, #16]
 800bb6e:	463d      	mov	r5, r7
 800bb70:	e7d3      	b.n	800bb1a <_svfiprintf_r+0x92>
 800bb72:	9a03      	ldr	r2, [sp, #12]
 800bb74:	1d11      	adds	r1, r2, #4
 800bb76:	6812      	ldr	r2, [r2, #0]
 800bb78:	9103      	str	r1, [sp, #12]
 800bb7a:	2a00      	cmp	r2, #0
 800bb7c:	db01      	blt.n	800bb82 <_svfiprintf_r+0xfa>
 800bb7e:	9207      	str	r2, [sp, #28]
 800bb80:	e004      	b.n	800bb8c <_svfiprintf_r+0x104>
 800bb82:	4252      	negs	r2, r2
 800bb84:	f043 0302 	orr.w	r3, r3, #2
 800bb88:	9207      	str	r2, [sp, #28]
 800bb8a:	9304      	str	r3, [sp, #16]
 800bb8c:	783b      	ldrb	r3, [r7, #0]
 800bb8e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb90:	d10c      	bne.n	800bbac <_svfiprintf_r+0x124>
 800bb92:	787b      	ldrb	r3, [r7, #1]
 800bb94:	2b2a      	cmp	r3, #42	; 0x2a
 800bb96:	d133      	bne.n	800bc00 <_svfiprintf_r+0x178>
 800bb98:	9b03      	ldr	r3, [sp, #12]
 800bb9a:	1d1a      	adds	r2, r3, #4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	9203      	str	r2, [sp, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	bfb8      	it	lt
 800bba4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bba8:	3702      	adds	r7, #2
 800bbaa:	9305      	str	r3, [sp, #20]
 800bbac:	4d2e      	ldr	r5, [pc, #184]	; (800bc68 <_svfiprintf_r+0x1e0>)
 800bbae:	7839      	ldrb	r1, [r7, #0]
 800bbb0:	2203      	movs	r2, #3
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f7f4 fb14 	bl	80001e0 <memchr>
 800bbb8:	b138      	cbz	r0, 800bbca <_svfiprintf_r+0x142>
 800bbba:	2340      	movs	r3, #64	; 0x40
 800bbbc:	1b40      	subs	r0, r0, r5
 800bbbe:	fa03 f000 	lsl.w	r0, r3, r0
 800bbc2:	9b04      	ldr	r3, [sp, #16]
 800bbc4:	4303      	orrs	r3, r0
 800bbc6:	3701      	adds	r7, #1
 800bbc8:	9304      	str	r3, [sp, #16]
 800bbca:	7839      	ldrb	r1, [r7, #0]
 800bbcc:	4827      	ldr	r0, [pc, #156]	; (800bc6c <_svfiprintf_r+0x1e4>)
 800bbce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbd2:	2206      	movs	r2, #6
 800bbd4:	1c7e      	adds	r6, r7, #1
 800bbd6:	f7f4 fb03 	bl	80001e0 <memchr>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d038      	beq.n	800bc50 <_svfiprintf_r+0x1c8>
 800bbde:	4b24      	ldr	r3, [pc, #144]	; (800bc70 <_svfiprintf_r+0x1e8>)
 800bbe0:	bb13      	cbnz	r3, 800bc28 <_svfiprintf_r+0x1a0>
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	3307      	adds	r3, #7
 800bbe6:	f023 0307 	bic.w	r3, r3, #7
 800bbea:	3308      	adds	r3, #8
 800bbec:	9303      	str	r3, [sp, #12]
 800bbee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf0:	444b      	add	r3, r9
 800bbf2:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf4:	e76d      	b.n	800bad2 <_svfiprintf_r+0x4a>
 800bbf6:	fb05 3202 	mla	r2, r5, r2, r3
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	e7a6      	b.n	800bb4e <_svfiprintf_r+0xc6>
 800bc00:	2300      	movs	r3, #0
 800bc02:	3701      	adds	r7, #1
 800bc04:	9305      	str	r3, [sp, #20]
 800bc06:	4619      	mov	r1, r3
 800bc08:	250a      	movs	r5, #10
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc10:	3a30      	subs	r2, #48	; 0x30
 800bc12:	2a09      	cmp	r2, #9
 800bc14:	d903      	bls.n	800bc1e <_svfiprintf_r+0x196>
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d0c8      	beq.n	800bbac <_svfiprintf_r+0x124>
 800bc1a:	9105      	str	r1, [sp, #20]
 800bc1c:	e7c6      	b.n	800bbac <_svfiprintf_r+0x124>
 800bc1e:	fb05 2101 	mla	r1, r5, r1, r2
 800bc22:	2301      	movs	r3, #1
 800bc24:	4607      	mov	r7, r0
 800bc26:	e7f0      	b.n	800bc0a <_svfiprintf_r+0x182>
 800bc28:	ab03      	add	r3, sp, #12
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	4b11      	ldr	r3, [pc, #68]	; (800bc74 <_svfiprintf_r+0x1ec>)
 800bc30:	a904      	add	r1, sp, #16
 800bc32:	4640      	mov	r0, r8
 800bc34:	f3af 8000 	nop.w
 800bc38:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc3c:	4681      	mov	r9, r0
 800bc3e:	d1d6      	bne.n	800bbee <_svfiprintf_r+0x166>
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	065b      	lsls	r3, r3, #25
 800bc44:	f53f af35 	bmi.w	800bab2 <_svfiprintf_r+0x2a>
 800bc48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc4a:	b01d      	add	sp, #116	; 0x74
 800bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc50:	ab03      	add	r3, sp, #12
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	4622      	mov	r2, r4
 800bc56:	4b07      	ldr	r3, [pc, #28]	; (800bc74 <_svfiprintf_r+0x1ec>)
 800bc58:	a904      	add	r1, sp, #16
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	f000 f9c2 	bl	800bfe4 <_printf_i>
 800bc60:	e7ea      	b.n	800bc38 <_svfiprintf_r+0x1b0>
 800bc62:	bf00      	nop
 800bc64:	08068630 	.word	0x08068630
 800bc68:	08068636 	.word	0x08068636
 800bc6c:	0806863a 	.word	0x0806863a
 800bc70:	00000000 	.word	0x00000000
 800bc74:	0800b9d5 	.word	0x0800b9d5

0800bc78 <__sfputc_r>:
 800bc78:	6893      	ldr	r3, [r2, #8]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	b410      	push	{r4}
 800bc80:	6093      	str	r3, [r2, #8]
 800bc82:	da08      	bge.n	800bc96 <__sfputc_r+0x1e>
 800bc84:	6994      	ldr	r4, [r2, #24]
 800bc86:	42a3      	cmp	r3, r4
 800bc88:	db01      	blt.n	800bc8e <__sfputc_r+0x16>
 800bc8a:	290a      	cmp	r1, #10
 800bc8c:	d103      	bne.n	800bc96 <__sfputc_r+0x1e>
 800bc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc92:	f7ff bbd9 	b.w	800b448 <__swbuf_r>
 800bc96:	6813      	ldr	r3, [r2, #0]
 800bc98:	1c58      	adds	r0, r3, #1
 800bc9a:	6010      	str	r0, [r2, #0]
 800bc9c:	7019      	strb	r1, [r3, #0]
 800bc9e:	4608      	mov	r0, r1
 800bca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <__sfputs_r>:
 800bca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca8:	4606      	mov	r6, r0
 800bcaa:	460f      	mov	r7, r1
 800bcac:	4614      	mov	r4, r2
 800bcae:	18d5      	adds	r5, r2, r3
 800bcb0:	42ac      	cmp	r4, r5
 800bcb2:	d101      	bne.n	800bcb8 <__sfputs_r+0x12>
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e007      	b.n	800bcc8 <__sfputs_r+0x22>
 800bcb8:	463a      	mov	r2, r7
 800bcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f7ff ffda 	bl	800bc78 <__sfputc_r>
 800bcc4:	1c43      	adds	r3, r0, #1
 800bcc6:	d1f3      	bne.n	800bcb0 <__sfputs_r+0xa>
 800bcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bccc <_vfiprintf_r>:
 800bccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	b09d      	sub	sp, #116	; 0x74
 800bcd4:	4617      	mov	r7, r2
 800bcd6:	461d      	mov	r5, r3
 800bcd8:	4606      	mov	r6, r0
 800bcda:	b118      	cbz	r0, 800bce4 <_vfiprintf_r+0x18>
 800bcdc:	6983      	ldr	r3, [r0, #24]
 800bcde:	b90b      	cbnz	r3, 800bce4 <_vfiprintf_r+0x18>
 800bce0:	f7ff fd62 	bl	800b7a8 <__sinit>
 800bce4:	4b7c      	ldr	r3, [pc, #496]	; (800bed8 <_vfiprintf_r+0x20c>)
 800bce6:	429c      	cmp	r4, r3
 800bce8:	d158      	bne.n	800bd9c <_vfiprintf_r+0xd0>
 800bcea:	6874      	ldr	r4, [r6, #4]
 800bcec:	89a3      	ldrh	r3, [r4, #12]
 800bcee:	0718      	lsls	r0, r3, #28
 800bcf0:	d55e      	bpl.n	800bdb0 <_vfiprintf_r+0xe4>
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d05b      	beq.n	800bdb0 <_vfiprintf_r+0xe4>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	2320      	movs	r3, #32
 800bcfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd02:	2330      	movs	r3, #48	; 0x30
 800bd04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd08:	9503      	str	r5, [sp, #12]
 800bd0a:	f04f 0b01 	mov.w	fp, #1
 800bd0e:	46b8      	mov	r8, r7
 800bd10:	4645      	mov	r5, r8
 800bd12:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd16:	b10b      	cbz	r3, 800bd1c <_vfiprintf_r+0x50>
 800bd18:	2b25      	cmp	r3, #37	; 0x25
 800bd1a:	d154      	bne.n	800bdc6 <_vfiprintf_r+0xfa>
 800bd1c:	ebb8 0a07 	subs.w	sl, r8, r7
 800bd20:	d00b      	beq.n	800bd3a <_vfiprintf_r+0x6e>
 800bd22:	4653      	mov	r3, sl
 800bd24:	463a      	mov	r2, r7
 800bd26:	4621      	mov	r1, r4
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f7ff ffbc 	bl	800bca6 <__sfputs_r>
 800bd2e:	3001      	adds	r0, #1
 800bd30:	f000 80c2 	beq.w	800beb8 <_vfiprintf_r+0x1ec>
 800bd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd36:	4453      	add	r3, sl
 800bd38:	9309      	str	r3, [sp, #36]	; 0x24
 800bd3a:	f898 3000 	ldrb.w	r3, [r8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 80ba 	beq.w	800beb8 <_vfiprintf_r+0x1ec>
 800bd44:	2300      	movs	r3, #0
 800bd46:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	9307      	str	r3, [sp, #28]
 800bd52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd56:	931a      	str	r3, [sp, #104]	; 0x68
 800bd58:	46a8      	mov	r8, r5
 800bd5a:	2205      	movs	r2, #5
 800bd5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bd60:	485e      	ldr	r0, [pc, #376]	; (800bedc <_vfiprintf_r+0x210>)
 800bd62:	f7f4 fa3d 	bl	80001e0 <memchr>
 800bd66:	9b04      	ldr	r3, [sp, #16]
 800bd68:	bb78      	cbnz	r0, 800bdca <_vfiprintf_r+0xfe>
 800bd6a:	06d9      	lsls	r1, r3, #27
 800bd6c:	bf44      	itt	mi
 800bd6e:	2220      	movmi	r2, #32
 800bd70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd74:	071a      	lsls	r2, r3, #28
 800bd76:	bf44      	itt	mi
 800bd78:	222b      	movmi	r2, #43	; 0x2b
 800bd7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd7e:	782a      	ldrb	r2, [r5, #0]
 800bd80:	2a2a      	cmp	r2, #42	; 0x2a
 800bd82:	d02a      	beq.n	800bdda <_vfiprintf_r+0x10e>
 800bd84:	9a07      	ldr	r2, [sp, #28]
 800bd86:	46a8      	mov	r8, r5
 800bd88:	2000      	movs	r0, #0
 800bd8a:	250a      	movs	r5, #10
 800bd8c:	4641      	mov	r1, r8
 800bd8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd92:	3b30      	subs	r3, #48	; 0x30
 800bd94:	2b09      	cmp	r3, #9
 800bd96:	d969      	bls.n	800be6c <_vfiprintf_r+0x1a0>
 800bd98:	b360      	cbz	r0, 800bdf4 <_vfiprintf_r+0x128>
 800bd9a:	e024      	b.n	800bde6 <_vfiprintf_r+0x11a>
 800bd9c:	4b50      	ldr	r3, [pc, #320]	; (800bee0 <_vfiprintf_r+0x214>)
 800bd9e:	429c      	cmp	r4, r3
 800bda0:	d101      	bne.n	800bda6 <_vfiprintf_r+0xda>
 800bda2:	68b4      	ldr	r4, [r6, #8]
 800bda4:	e7a2      	b.n	800bcec <_vfiprintf_r+0x20>
 800bda6:	4b4f      	ldr	r3, [pc, #316]	; (800bee4 <_vfiprintf_r+0x218>)
 800bda8:	429c      	cmp	r4, r3
 800bdaa:	bf08      	it	eq
 800bdac:	68f4      	ldreq	r4, [r6, #12]
 800bdae:	e79d      	b.n	800bcec <_vfiprintf_r+0x20>
 800bdb0:	4621      	mov	r1, r4
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f7ff fb9a 	bl	800b4ec <__swsetup_r>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d09d      	beq.n	800bcf8 <_vfiprintf_r+0x2c>
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc0:	b01d      	add	sp, #116	; 0x74
 800bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc6:	46a8      	mov	r8, r5
 800bdc8:	e7a2      	b.n	800bd10 <_vfiprintf_r+0x44>
 800bdca:	4a44      	ldr	r2, [pc, #272]	; (800bedc <_vfiprintf_r+0x210>)
 800bdcc:	1a80      	subs	r0, r0, r2
 800bdce:	fa0b f000 	lsl.w	r0, fp, r0
 800bdd2:	4318      	orrs	r0, r3
 800bdd4:	9004      	str	r0, [sp, #16]
 800bdd6:	4645      	mov	r5, r8
 800bdd8:	e7be      	b.n	800bd58 <_vfiprintf_r+0x8c>
 800bdda:	9a03      	ldr	r2, [sp, #12]
 800bddc:	1d11      	adds	r1, r2, #4
 800bdde:	6812      	ldr	r2, [r2, #0]
 800bde0:	9103      	str	r1, [sp, #12]
 800bde2:	2a00      	cmp	r2, #0
 800bde4:	db01      	blt.n	800bdea <_vfiprintf_r+0x11e>
 800bde6:	9207      	str	r2, [sp, #28]
 800bde8:	e004      	b.n	800bdf4 <_vfiprintf_r+0x128>
 800bdea:	4252      	negs	r2, r2
 800bdec:	f043 0302 	orr.w	r3, r3, #2
 800bdf0:	9207      	str	r2, [sp, #28]
 800bdf2:	9304      	str	r3, [sp, #16]
 800bdf4:	f898 3000 	ldrb.w	r3, [r8]
 800bdf8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdfa:	d10e      	bne.n	800be1a <_vfiprintf_r+0x14e>
 800bdfc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800be00:	2b2a      	cmp	r3, #42	; 0x2a
 800be02:	d138      	bne.n	800be76 <_vfiprintf_r+0x1aa>
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	1d1a      	adds	r2, r3, #4
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	9203      	str	r2, [sp, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	bfb8      	it	lt
 800be10:	f04f 33ff 	movlt.w	r3, #4294967295
 800be14:	f108 0802 	add.w	r8, r8, #2
 800be18:	9305      	str	r3, [sp, #20]
 800be1a:	4d33      	ldr	r5, [pc, #204]	; (800bee8 <_vfiprintf_r+0x21c>)
 800be1c:	f898 1000 	ldrb.w	r1, [r8]
 800be20:	2203      	movs	r2, #3
 800be22:	4628      	mov	r0, r5
 800be24:	f7f4 f9dc 	bl	80001e0 <memchr>
 800be28:	b140      	cbz	r0, 800be3c <_vfiprintf_r+0x170>
 800be2a:	2340      	movs	r3, #64	; 0x40
 800be2c:	1b40      	subs	r0, r0, r5
 800be2e:	fa03 f000 	lsl.w	r0, r3, r0
 800be32:	9b04      	ldr	r3, [sp, #16]
 800be34:	4303      	orrs	r3, r0
 800be36:	f108 0801 	add.w	r8, r8, #1
 800be3a:	9304      	str	r3, [sp, #16]
 800be3c:	f898 1000 	ldrb.w	r1, [r8]
 800be40:	482a      	ldr	r0, [pc, #168]	; (800beec <_vfiprintf_r+0x220>)
 800be42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be46:	2206      	movs	r2, #6
 800be48:	f108 0701 	add.w	r7, r8, #1
 800be4c:	f7f4 f9c8 	bl	80001e0 <memchr>
 800be50:	2800      	cmp	r0, #0
 800be52:	d037      	beq.n	800bec4 <_vfiprintf_r+0x1f8>
 800be54:	4b26      	ldr	r3, [pc, #152]	; (800bef0 <_vfiprintf_r+0x224>)
 800be56:	bb1b      	cbnz	r3, 800bea0 <_vfiprintf_r+0x1d4>
 800be58:	9b03      	ldr	r3, [sp, #12]
 800be5a:	3307      	adds	r3, #7
 800be5c:	f023 0307 	bic.w	r3, r3, #7
 800be60:	3308      	adds	r3, #8
 800be62:	9303      	str	r3, [sp, #12]
 800be64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be66:	444b      	add	r3, r9
 800be68:	9309      	str	r3, [sp, #36]	; 0x24
 800be6a:	e750      	b.n	800bd0e <_vfiprintf_r+0x42>
 800be6c:	fb05 3202 	mla	r2, r5, r2, r3
 800be70:	2001      	movs	r0, #1
 800be72:	4688      	mov	r8, r1
 800be74:	e78a      	b.n	800bd8c <_vfiprintf_r+0xc0>
 800be76:	2300      	movs	r3, #0
 800be78:	f108 0801 	add.w	r8, r8, #1
 800be7c:	9305      	str	r3, [sp, #20]
 800be7e:	4619      	mov	r1, r3
 800be80:	250a      	movs	r5, #10
 800be82:	4640      	mov	r0, r8
 800be84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be88:	3a30      	subs	r2, #48	; 0x30
 800be8a:	2a09      	cmp	r2, #9
 800be8c:	d903      	bls.n	800be96 <_vfiprintf_r+0x1ca>
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0c3      	beq.n	800be1a <_vfiprintf_r+0x14e>
 800be92:	9105      	str	r1, [sp, #20]
 800be94:	e7c1      	b.n	800be1a <_vfiprintf_r+0x14e>
 800be96:	fb05 2101 	mla	r1, r5, r1, r2
 800be9a:	2301      	movs	r3, #1
 800be9c:	4680      	mov	r8, r0
 800be9e:	e7f0      	b.n	800be82 <_vfiprintf_r+0x1b6>
 800bea0:	ab03      	add	r3, sp, #12
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	4622      	mov	r2, r4
 800bea6:	4b13      	ldr	r3, [pc, #76]	; (800bef4 <_vfiprintf_r+0x228>)
 800bea8:	a904      	add	r1, sp, #16
 800beaa:	4630      	mov	r0, r6
 800beac:	f3af 8000 	nop.w
 800beb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800beb4:	4681      	mov	r9, r0
 800beb6:	d1d5      	bne.n	800be64 <_vfiprintf_r+0x198>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	065b      	lsls	r3, r3, #25
 800bebc:	f53f af7e 	bmi.w	800bdbc <_vfiprintf_r+0xf0>
 800bec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bec2:	e77d      	b.n	800bdc0 <_vfiprintf_r+0xf4>
 800bec4:	ab03      	add	r3, sp, #12
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	4622      	mov	r2, r4
 800beca:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <_vfiprintf_r+0x228>)
 800becc:	a904      	add	r1, sp, #16
 800bece:	4630      	mov	r0, r6
 800bed0:	f000 f888 	bl	800bfe4 <_printf_i>
 800bed4:	e7ec      	b.n	800beb0 <_vfiprintf_r+0x1e4>
 800bed6:	bf00      	nop
 800bed8:	080685f0 	.word	0x080685f0
 800bedc:	08068630 	.word	0x08068630
 800bee0:	08068610 	.word	0x08068610
 800bee4:	080685d0 	.word	0x080685d0
 800bee8:	08068636 	.word	0x08068636
 800beec:	0806863a 	.word	0x0806863a
 800bef0:	00000000 	.word	0x00000000
 800bef4:	0800bca7 	.word	0x0800bca7

0800bef8 <_printf_common>:
 800bef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800befc:	4691      	mov	r9, r2
 800befe:	461f      	mov	r7, r3
 800bf00:	688a      	ldr	r2, [r1, #8]
 800bf02:	690b      	ldr	r3, [r1, #16]
 800bf04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	bfb8      	it	lt
 800bf0c:	4613      	movlt	r3, r2
 800bf0e:	f8c9 3000 	str.w	r3, [r9]
 800bf12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf16:	4606      	mov	r6, r0
 800bf18:	460c      	mov	r4, r1
 800bf1a:	b112      	cbz	r2, 800bf22 <_printf_common+0x2a>
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	f8c9 3000 	str.w	r3, [r9]
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	0699      	lsls	r1, r3, #26
 800bf26:	bf42      	ittt	mi
 800bf28:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bf2c:	3302      	addmi	r3, #2
 800bf2e:	f8c9 3000 	strmi.w	r3, [r9]
 800bf32:	6825      	ldr	r5, [r4, #0]
 800bf34:	f015 0506 	ands.w	r5, r5, #6
 800bf38:	d107      	bne.n	800bf4a <_printf_common+0x52>
 800bf3a:	f104 0a19 	add.w	sl, r4, #25
 800bf3e:	68e3      	ldr	r3, [r4, #12]
 800bf40:	f8d9 2000 	ldr.w	r2, [r9]
 800bf44:	1a9b      	subs	r3, r3, r2
 800bf46:	42ab      	cmp	r3, r5
 800bf48:	dc28      	bgt.n	800bf9c <_printf_common+0xa4>
 800bf4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf4e:	6822      	ldr	r2, [r4, #0]
 800bf50:	3300      	adds	r3, #0
 800bf52:	bf18      	it	ne
 800bf54:	2301      	movne	r3, #1
 800bf56:	0692      	lsls	r2, r2, #26
 800bf58:	d42d      	bmi.n	800bfb6 <_printf_common+0xbe>
 800bf5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf5e:	4639      	mov	r1, r7
 800bf60:	4630      	mov	r0, r6
 800bf62:	47c0      	blx	r8
 800bf64:	3001      	adds	r0, #1
 800bf66:	d020      	beq.n	800bfaa <_printf_common+0xb2>
 800bf68:	6823      	ldr	r3, [r4, #0]
 800bf6a:	68e5      	ldr	r5, [r4, #12]
 800bf6c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf70:	f003 0306 	and.w	r3, r3, #6
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	bf08      	it	eq
 800bf78:	1aad      	subeq	r5, r5, r2
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	6922      	ldr	r2, [r4, #16]
 800bf7e:	bf0c      	ite	eq
 800bf80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf84:	2500      	movne	r5, #0
 800bf86:	4293      	cmp	r3, r2
 800bf88:	bfc4      	itt	gt
 800bf8a:	1a9b      	subgt	r3, r3, r2
 800bf8c:	18ed      	addgt	r5, r5, r3
 800bf8e:	f04f 0900 	mov.w	r9, #0
 800bf92:	341a      	adds	r4, #26
 800bf94:	454d      	cmp	r5, r9
 800bf96:	d11a      	bne.n	800bfce <_printf_common+0xd6>
 800bf98:	2000      	movs	r0, #0
 800bf9a:	e008      	b.n	800bfae <_printf_common+0xb6>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	4652      	mov	r2, sl
 800bfa0:	4639      	mov	r1, r7
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	47c0      	blx	r8
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	d103      	bne.n	800bfb2 <_printf_common+0xba>
 800bfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb2:	3501      	adds	r5, #1
 800bfb4:	e7c3      	b.n	800bf3e <_printf_common+0x46>
 800bfb6:	18e1      	adds	r1, r4, r3
 800bfb8:	1c5a      	adds	r2, r3, #1
 800bfba:	2030      	movs	r0, #48	; 0x30
 800bfbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfc0:	4422      	add	r2, r4
 800bfc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfca:	3302      	adds	r3, #2
 800bfcc:	e7c5      	b.n	800bf5a <_printf_common+0x62>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4622      	mov	r2, r4
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	47c0      	blx	r8
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d0e6      	beq.n	800bfaa <_printf_common+0xb2>
 800bfdc:	f109 0901 	add.w	r9, r9, #1
 800bfe0:	e7d8      	b.n	800bf94 <_printf_common+0x9c>
	...

0800bfe4 <_printf_i>:
 800bfe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfe8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bfec:	460c      	mov	r4, r1
 800bfee:	7e09      	ldrb	r1, [r1, #24]
 800bff0:	b085      	sub	sp, #20
 800bff2:	296e      	cmp	r1, #110	; 0x6e
 800bff4:	4617      	mov	r7, r2
 800bff6:	4606      	mov	r6, r0
 800bff8:	4698      	mov	r8, r3
 800bffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bffc:	f000 80b3 	beq.w	800c166 <_printf_i+0x182>
 800c000:	d822      	bhi.n	800c048 <_printf_i+0x64>
 800c002:	2963      	cmp	r1, #99	; 0x63
 800c004:	d036      	beq.n	800c074 <_printf_i+0x90>
 800c006:	d80a      	bhi.n	800c01e <_printf_i+0x3a>
 800c008:	2900      	cmp	r1, #0
 800c00a:	f000 80b9 	beq.w	800c180 <_printf_i+0x19c>
 800c00e:	2958      	cmp	r1, #88	; 0x58
 800c010:	f000 8083 	beq.w	800c11a <_printf_i+0x136>
 800c014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c018:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c01c:	e032      	b.n	800c084 <_printf_i+0xa0>
 800c01e:	2964      	cmp	r1, #100	; 0x64
 800c020:	d001      	beq.n	800c026 <_printf_i+0x42>
 800c022:	2969      	cmp	r1, #105	; 0x69
 800c024:	d1f6      	bne.n	800c014 <_printf_i+0x30>
 800c026:	6820      	ldr	r0, [r4, #0]
 800c028:	6813      	ldr	r3, [r2, #0]
 800c02a:	0605      	lsls	r5, r0, #24
 800c02c:	f103 0104 	add.w	r1, r3, #4
 800c030:	d52a      	bpl.n	800c088 <_printf_i+0xa4>
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6011      	str	r1, [r2, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	da03      	bge.n	800c042 <_printf_i+0x5e>
 800c03a:	222d      	movs	r2, #45	; 0x2d
 800c03c:	425b      	negs	r3, r3
 800c03e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c042:	486f      	ldr	r0, [pc, #444]	; (800c200 <_printf_i+0x21c>)
 800c044:	220a      	movs	r2, #10
 800c046:	e039      	b.n	800c0bc <_printf_i+0xd8>
 800c048:	2973      	cmp	r1, #115	; 0x73
 800c04a:	f000 809d 	beq.w	800c188 <_printf_i+0x1a4>
 800c04e:	d808      	bhi.n	800c062 <_printf_i+0x7e>
 800c050:	296f      	cmp	r1, #111	; 0x6f
 800c052:	d020      	beq.n	800c096 <_printf_i+0xb2>
 800c054:	2970      	cmp	r1, #112	; 0x70
 800c056:	d1dd      	bne.n	800c014 <_printf_i+0x30>
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	f043 0320 	orr.w	r3, r3, #32
 800c05e:	6023      	str	r3, [r4, #0]
 800c060:	e003      	b.n	800c06a <_printf_i+0x86>
 800c062:	2975      	cmp	r1, #117	; 0x75
 800c064:	d017      	beq.n	800c096 <_printf_i+0xb2>
 800c066:	2978      	cmp	r1, #120	; 0x78
 800c068:	d1d4      	bne.n	800c014 <_printf_i+0x30>
 800c06a:	2378      	movs	r3, #120	; 0x78
 800c06c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c070:	4864      	ldr	r0, [pc, #400]	; (800c204 <_printf_i+0x220>)
 800c072:	e055      	b.n	800c120 <_printf_i+0x13c>
 800c074:	6813      	ldr	r3, [r2, #0]
 800c076:	1d19      	adds	r1, r3, #4
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6011      	str	r1, [r2, #0]
 800c07c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c084:	2301      	movs	r3, #1
 800c086:	e08c      	b.n	800c1a2 <_printf_i+0x1be>
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	6011      	str	r1, [r2, #0]
 800c08c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c090:	bf18      	it	ne
 800c092:	b21b      	sxthne	r3, r3
 800c094:	e7cf      	b.n	800c036 <_printf_i+0x52>
 800c096:	6813      	ldr	r3, [r2, #0]
 800c098:	6825      	ldr	r5, [r4, #0]
 800c09a:	1d18      	adds	r0, r3, #4
 800c09c:	6010      	str	r0, [r2, #0]
 800c09e:	0628      	lsls	r0, r5, #24
 800c0a0:	d501      	bpl.n	800c0a6 <_printf_i+0xc2>
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	e002      	b.n	800c0ac <_printf_i+0xc8>
 800c0a6:	0668      	lsls	r0, r5, #25
 800c0a8:	d5fb      	bpl.n	800c0a2 <_printf_i+0xbe>
 800c0aa:	881b      	ldrh	r3, [r3, #0]
 800c0ac:	4854      	ldr	r0, [pc, #336]	; (800c200 <_printf_i+0x21c>)
 800c0ae:	296f      	cmp	r1, #111	; 0x6f
 800c0b0:	bf14      	ite	ne
 800c0b2:	220a      	movne	r2, #10
 800c0b4:	2208      	moveq	r2, #8
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0bc:	6865      	ldr	r5, [r4, #4]
 800c0be:	60a5      	str	r5, [r4, #8]
 800c0c0:	2d00      	cmp	r5, #0
 800c0c2:	f2c0 8095 	blt.w	800c1f0 <_printf_i+0x20c>
 800c0c6:	6821      	ldr	r1, [r4, #0]
 800c0c8:	f021 0104 	bic.w	r1, r1, #4
 800c0cc:	6021      	str	r1, [r4, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d13d      	bne.n	800c14e <_printf_i+0x16a>
 800c0d2:	2d00      	cmp	r5, #0
 800c0d4:	f040 808e 	bne.w	800c1f4 <_printf_i+0x210>
 800c0d8:	4665      	mov	r5, ip
 800c0da:	2a08      	cmp	r2, #8
 800c0dc:	d10b      	bne.n	800c0f6 <_printf_i+0x112>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	07db      	lsls	r3, r3, #31
 800c0e2:	d508      	bpl.n	800c0f6 <_printf_i+0x112>
 800c0e4:	6923      	ldr	r3, [r4, #16]
 800c0e6:	6862      	ldr	r2, [r4, #4]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	bfde      	ittt	le
 800c0ec:	2330      	movle	r3, #48	; 0x30
 800c0ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0f6:	ebac 0305 	sub.w	r3, ip, r5
 800c0fa:	6123      	str	r3, [r4, #16]
 800c0fc:	f8cd 8000 	str.w	r8, [sp]
 800c100:	463b      	mov	r3, r7
 800c102:	aa03      	add	r2, sp, #12
 800c104:	4621      	mov	r1, r4
 800c106:	4630      	mov	r0, r6
 800c108:	f7ff fef6 	bl	800bef8 <_printf_common>
 800c10c:	3001      	adds	r0, #1
 800c10e:	d14d      	bne.n	800c1ac <_printf_i+0x1c8>
 800c110:	f04f 30ff 	mov.w	r0, #4294967295
 800c114:	b005      	add	sp, #20
 800c116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c11a:	4839      	ldr	r0, [pc, #228]	; (800c200 <_printf_i+0x21c>)
 800c11c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c120:	6813      	ldr	r3, [r2, #0]
 800c122:	6821      	ldr	r1, [r4, #0]
 800c124:	1d1d      	adds	r5, r3, #4
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6015      	str	r5, [r2, #0]
 800c12a:	060a      	lsls	r2, r1, #24
 800c12c:	d50b      	bpl.n	800c146 <_printf_i+0x162>
 800c12e:	07ca      	lsls	r2, r1, #31
 800c130:	bf44      	itt	mi
 800c132:	f041 0120 	orrmi.w	r1, r1, #32
 800c136:	6021      	strmi	r1, [r4, #0]
 800c138:	b91b      	cbnz	r3, 800c142 <_printf_i+0x15e>
 800c13a:	6822      	ldr	r2, [r4, #0]
 800c13c:	f022 0220 	bic.w	r2, r2, #32
 800c140:	6022      	str	r2, [r4, #0]
 800c142:	2210      	movs	r2, #16
 800c144:	e7b7      	b.n	800c0b6 <_printf_i+0xd2>
 800c146:	064d      	lsls	r5, r1, #25
 800c148:	bf48      	it	mi
 800c14a:	b29b      	uxthmi	r3, r3
 800c14c:	e7ef      	b.n	800c12e <_printf_i+0x14a>
 800c14e:	4665      	mov	r5, ip
 800c150:	fbb3 f1f2 	udiv	r1, r3, r2
 800c154:	fb02 3311 	mls	r3, r2, r1, r3
 800c158:	5cc3      	ldrb	r3, [r0, r3]
 800c15a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c15e:	460b      	mov	r3, r1
 800c160:	2900      	cmp	r1, #0
 800c162:	d1f5      	bne.n	800c150 <_printf_i+0x16c>
 800c164:	e7b9      	b.n	800c0da <_printf_i+0xf6>
 800c166:	6813      	ldr	r3, [r2, #0]
 800c168:	6825      	ldr	r5, [r4, #0]
 800c16a:	6961      	ldr	r1, [r4, #20]
 800c16c:	1d18      	adds	r0, r3, #4
 800c16e:	6010      	str	r0, [r2, #0]
 800c170:	0628      	lsls	r0, r5, #24
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	d501      	bpl.n	800c17a <_printf_i+0x196>
 800c176:	6019      	str	r1, [r3, #0]
 800c178:	e002      	b.n	800c180 <_printf_i+0x19c>
 800c17a:	066a      	lsls	r2, r5, #25
 800c17c:	d5fb      	bpl.n	800c176 <_printf_i+0x192>
 800c17e:	8019      	strh	r1, [r3, #0]
 800c180:	2300      	movs	r3, #0
 800c182:	6123      	str	r3, [r4, #16]
 800c184:	4665      	mov	r5, ip
 800c186:	e7b9      	b.n	800c0fc <_printf_i+0x118>
 800c188:	6813      	ldr	r3, [r2, #0]
 800c18a:	1d19      	adds	r1, r3, #4
 800c18c:	6011      	str	r1, [r2, #0]
 800c18e:	681d      	ldr	r5, [r3, #0]
 800c190:	6862      	ldr	r2, [r4, #4]
 800c192:	2100      	movs	r1, #0
 800c194:	4628      	mov	r0, r5
 800c196:	f7f4 f823 	bl	80001e0 <memchr>
 800c19a:	b108      	cbz	r0, 800c1a0 <_printf_i+0x1bc>
 800c19c:	1b40      	subs	r0, r0, r5
 800c19e:	6060      	str	r0, [r4, #4]
 800c1a0:	6863      	ldr	r3, [r4, #4]
 800c1a2:	6123      	str	r3, [r4, #16]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1aa:	e7a7      	b.n	800c0fc <_printf_i+0x118>
 800c1ac:	6923      	ldr	r3, [r4, #16]
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	47c0      	blx	r8
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d0aa      	beq.n	800c110 <_printf_i+0x12c>
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	079b      	lsls	r3, r3, #30
 800c1be:	d413      	bmi.n	800c1e8 <_printf_i+0x204>
 800c1c0:	68e0      	ldr	r0, [r4, #12]
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	4298      	cmp	r0, r3
 800c1c6:	bfb8      	it	lt
 800c1c8:	4618      	movlt	r0, r3
 800c1ca:	e7a3      	b.n	800c114 <_printf_i+0x130>
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	464a      	mov	r2, r9
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	47c0      	blx	r8
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	d09a      	beq.n	800c110 <_printf_i+0x12c>
 800c1da:	3501      	adds	r5, #1
 800c1dc:	68e3      	ldr	r3, [r4, #12]
 800c1de:	9a03      	ldr	r2, [sp, #12]
 800c1e0:	1a9b      	subs	r3, r3, r2
 800c1e2:	42ab      	cmp	r3, r5
 800c1e4:	dcf2      	bgt.n	800c1cc <_printf_i+0x1e8>
 800c1e6:	e7eb      	b.n	800c1c0 <_printf_i+0x1dc>
 800c1e8:	2500      	movs	r5, #0
 800c1ea:	f104 0919 	add.w	r9, r4, #25
 800c1ee:	e7f5      	b.n	800c1dc <_printf_i+0x1f8>
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1ac      	bne.n	800c14e <_printf_i+0x16a>
 800c1f4:	7803      	ldrb	r3, [r0, #0]
 800c1f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1fe:	e76c      	b.n	800c0da <_printf_i+0xf6>
 800c200:	08068641 	.word	0x08068641
 800c204:	08068652 	.word	0x08068652

0800c208 <__sread>:
 800c208:	b510      	push	{r4, lr}
 800c20a:	460c      	mov	r4, r1
 800c20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c210:	f000 f8b6 	bl	800c380 <_read_r>
 800c214:	2800      	cmp	r0, #0
 800c216:	bfab      	itete	ge
 800c218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c21a:	89a3      	ldrhlt	r3, [r4, #12]
 800c21c:	181b      	addge	r3, r3, r0
 800c21e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c222:	bfac      	ite	ge
 800c224:	6563      	strge	r3, [r4, #84]	; 0x54
 800c226:	81a3      	strhlt	r3, [r4, #12]
 800c228:	bd10      	pop	{r4, pc}

0800c22a <__swrite>:
 800c22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22e:	461f      	mov	r7, r3
 800c230:	898b      	ldrh	r3, [r1, #12]
 800c232:	05db      	lsls	r3, r3, #23
 800c234:	4605      	mov	r5, r0
 800c236:	460c      	mov	r4, r1
 800c238:	4616      	mov	r6, r2
 800c23a:	d505      	bpl.n	800c248 <__swrite+0x1e>
 800c23c:	2302      	movs	r3, #2
 800c23e:	2200      	movs	r2, #0
 800c240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c244:	f000 f868 	bl	800c318 <_lseek_r>
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c24e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c252:	81a3      	strh	r3, [r4, #12]
 800c254:	4632      	mov	r2, r6
 800c256:	463b      	mov	r3, r7
 800c258:	4628      	mov	r0, r5
 800c25a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c25e:	f000 b817 	b.w	800c290 <_write_r>

0800c262 <__sseek>:
 800c262:	b510      	push	{r4, lr}
 800c264:	460c      	mov	r4, r1
 800c266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c26a:	f000 f855 	bl	800c318 <_lseek_r>
 800c26e:	1c43      	adds	r3, r0, #1
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	bf15      	itete	ne
 800c274:	6560      	strne	r0, [r4, #84]	; 0x54
 800c276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c27a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c27e:	81a3      	strheq	r3, [r4, #12]
 800c280:	bf18      	it	ne
 800c282:	81a3      	strhne	r3, [r4, #12]
 800c284:	bd10      	pop	{r4, pc}

0800c286 <__sclose>:
 800c286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c28a:	f000 b813 	b.w	800c2b4 <_close_r>
	...

0800c290 <_write_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4c07      	ldr	r4, [pc, #28]	; (800c2b0 <_write_r+0x20>)
 800c294:	4605      	mov	r5, r0
 800c296:	4608      	mov	r0, r1
 800c298:	4611      	mov	r1, r2
 800c29a:	2200      	movs	r2, #0
 800c29c:	6022      	str	r2, [r4, #0]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	f000 fcda 	bl	800cc58 <_write>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	d102      	bne.n	800c2ae <_write_r+0x1e>
 800c2a8:	6823      	ldr	r3, [r4, #0]
 800c2aa:	b103      	cbz	r3, 800c2ae <_write_r+0x1e>
 800c2ac:	602b      	str	r3, [r5, #0]
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}
 800c2b0:	200027bc 	.word	0x200027bc

0800c2b4 <_close_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4c06      	ldr	r4, [pc, #24]	; (800c2d0 <_close_r+0x1c>)
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	f000 fca2 	bl	800cc08 <_close>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	d102      	bne.n	800c2ce <_close_r+0x1a>
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	b103      	cbz	r3, 800c2ce <_close_r+0x1a>
 800c2cc:	602b      	str	r3, [r5, #0]
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	200027bc 	.word	0x200027bc

0800c2d4 <_fstat_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4c07      	ldr	r4, [pc, #28]	; (800c2f4 <_fstat_r+0x20>)
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4605      	mov	r5, r0
 800c2dc:	4608      	mov	r0, r1
 800c2de:	4611      	mov	r1, r2
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	f000 fc99 	bl	800cc18 <_fstat>
 800c2e6:	1c43      	adds	r3, r0, #1
 800c2e8:	d102      	bne.n	800c2f0 <_fstat_r+0x1c>
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	b103      	cbz	r3, 800c2f0 <_fstat_r+0x1c>
 800c2ee:	602b      	str	r3, [r5, #0]
 800c2f0:	bd38      	pop	{r3, r4, r5, pc}
 800c2f2:	bf00      	nop
 800c2f4:	200027bc 	.word	0x200027bc

0800c2f8 <_isatty_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	4c06      	ldr	r4, [pc, #24]	; (800c314 <_isatty_r+0x1c>)
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4605      	mov	r5, r0
 800c300:	4608      	mov	r0, r1
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	f000 fc90 	bl	800cc28 <_isatty>
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	d102      	bne.n	800c312 <_isatty_r+0x1a>
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	b103      	cbz	r3, 800c312 <_isatty_r+0x1a>
 800c310:	602b      	str	r3, [r5, #0]
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	200027bc 	.word	0x200027bc

0800c318 <_lseek_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	4c07      	ldr	r4, [pc, #28]	; (800c338 <_lseek_r+0x20>)
 800c31c:	4605      	mov	r5, r0
 800c31e:	4608      	mov	r0, r1
 800c320:	4611      	mov	r1, r2
 800c322:	2200      	movs	r2, #0
 800c324:	6022      	str	r2, [r4, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	f000 fc86 	bl	800cc38 <_lseek>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d102      	bne.n	800c336 <_lseek_r+0x1e>
 800c330:	6823      	ldr	r3, [r4, #0]
 800c332:	b103      	cbz	r3, 800c336 <_lseek_r+0x1e>
 800c334:	602b      	str	r3, [r5, #0]
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	200027bc 	.word	0x200027bc

0800c33c <memmove>:
 800c33c:	4288      	cmp	r0, r1
 800c33e:	b510      	push	{r4, lr}
 800c340:	eb01 0302 	add.w	r3, r1, r2
 800c344:	d807      	bhi.n	800c356 <memmove+0x1a>
 800c346:	1e42      	subs	r2, r0, #1
 800c348:	4299      	cmp	r1, r3
 800c34a:	d00a      	beq.n	800c362 <memmove+0x26>
 800c34c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c350:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c354:	e7f8      	b.n	800c348 <memmove+0xc>
 800c356:	4283      	cmp	r3, r0
 800c358:	d9f5      	bls.n	800c346 <memmove+0xa>
 800c35a:	1881      	adds	r1, r0, r2
 800c35c:	1ad2      	subs	r2, r2, r3
 800c35e:	42d3      	cmn	r3, r2
 800c360:	d100      	bne.n	800c364 <memmove+0x28>
 800c362:	bd10      	pop	{r4, pc}
 800c364:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c368:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c36c:	e7f7      	b.n	800c35e <memmove+0x22>

0800c36e <_malloc_usable_size_r>:
 800c36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c372:	1f18      	subs	r0, r3, #4
 800c374:	2b00      	cmp	r3, #0
 800c376:	bfbc      	itt	lt
 800c378:	580b      	ldrlt	r3, [r1, r0]
 800c37a:	18c0      	addlt	r0, r0, r3
 800c37c:	4770      	bx	lr
	...

0800c380 <_read_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4c07      	ldr	r4, [pc, #28]	; (800c3a0 <_read_r+0x20>)
 800c384:	4605      	mov	r5, r0
 800c386:	4608      	mov	r0, r1
 800c388:	4611      	mov	r1, r2
 800c38a:	2200      	movs	r2, #0
 800c38c:	6022      	str	r2, [r4, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	f000 fc5a 	bl	800cc48 <_read>
 800c394:	1c43      	adds	r3, r0, #1
 800c396:	d102      	bne.n	800c39e <_read_r+0x1e>
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	b103      	cbz	r3, 800c39e <_read_r+0x1e>
 800c39c:	602b      	str	r3, [r5, #0]
 800c39e:	bd38      	pop	{r3, r4, r5, pc}
 800c3a0:	200027bc 	.word	0x200027bc
 800c3a4:	00000000 	.word	0x00000000

0800c3a8 <exp>:
 800c3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3aa:	ed2d 8b02 	vpush	{d8}
 800c3ae:	4e38      	ldr	r6, [pc, #224]	; (800c490 <exp+0xe8>)
 800c3b0:	b08b      	sub	sp, #44	; 0x2c
 800c3b2:	ec55 4b10 	vmov	r4, r5, d0
 800c3b6:	f000 f8f3 	bl	800c5a0 <__ieee754_exp>
 800c3ba:	f996 3000 	ldrsb.w	r3, [r6]
 800c3be:	eeb0 8a40 	vmov.f32	s16, s0
 800c3c2:	eef0 8a60 	vmov.f32	s17, s1
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	d02c      	beq.n	800c424 <exp+0x7c>
 800c3ca:	ec45 4b10 	vmov	d0, r4, r5
 800c3ce:	f000 fc09 	bl	800cbe4 <finite>
 800c3d2:	b338      	cbz	r0, 800c424 <exp+0x7c>
 800c3d4:	a32a      	add	r3, pc, #168	; (adr r3, 800c480 <exp+0xd8>)
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	4629      	mov	r1, r5
 800c3de:	f7f4 fb9b 	bl	8000b18 <__aeabi_dcmpgt>
 800c3e2:	4607      	mov	r7, r0
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d030      	beq.n	800c44a <exp+0xa2>
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	4b29      	ldr	r3, [pc, #164]	; (800c494 <exp+0xec>)
 800c3ee:	9301      	str	r3, [sp, #4]
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9308      	str	r3, [sp, #32]
 800c3f4:	f996 3000 	ldrsb.w	r3, [r6]
 800c3f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c3fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c400:	b9c3      	cbnz	r3, 800c434 <exp+0x8c>
 800c402:	4b25      	ldr	r3, [pc, #148]	; (800c498 <exp+0xf0>)
 800c404:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c408:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c40c:	4668      	mov	r0, sp
 800c40e:	f000 fbf1 	bl	800cbf4 <matherr>
 800c412:	b1a8      	cbz	r0, 800c440 <exp+0x98>
 800c414:	9b08      	ldr	r3, [sp, #32]
 800c416:	b11b      	cbz	r3, 800c420 <exp+0x78>
 800c418:	f7fe fe66 	bl	800b0e8 <__errno>
 800c41c:	9b08      	ldr	r3, [sp, #32]
 800c41e:	6003      	str	r3, [r0, #0]
 800c420:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c424:	eeb0 0a48 	vmov.f32	s0, s16
 800c428:	eef0 0a68 	vmov.f32	s1, s17
 800c42c:	b00b      	add	sp, #44	; 0x2c
 800c42e:	ecbd 8b02 	vpop	{d8}
 800c432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c434:	4919      	ldr	r1, [pc, #100]	; (800c49c <exp+0xf4>)
 800c436:	2000      	movs	r0, #0
 800c438:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d1e5      	bne.n	800c40c <exp+0x64>
 800c440:	f7fe fe52 	bl	800b0e8 <__errno>
 800c444:	2322      	movs	r3, #34	; 0x22
 800c446:	6003      	str	r3, [r0, #0]
 800c448:	e7e4      	b.n	800c414 <exp+0x6c>
 800c44a:	a30f      	add	r3, pc, #60	; (adr r3, 800c488 <exp+0xe0>)
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	4620      	mov	r0, r4
 800c452:	4629      	mov	r1, r5
 800c454:	f7f4 fb42 	bl	8000adc <__aeabi_dcmplt>
 800c458:	2800      	cmp	r0, #0
 800c45a:	d0e3      	beq.n	800c424 <exp+0x7c>
 800c45c:	2304      	movs	r3, #4
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	4b0c      	ldr	r3, [pc, #48]	; (800c494 <exp+0xec>)
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	2300      	movs	r3, #0
 800c468:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c46c:	9708      	str	r7, [sp, #32]
 800c46e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c472:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c476:	f996 3000 	ldrsb.w	r3, [r6]
 800c47a:	e7df      	b.n	800c43c <exp+0x94>
 800c47c:	f3af 8000 	nop.w
 800c480:	fefa39ef 	.word	0xfefa39ef
 800c484:	40862e42 	.word	0x40862e42
 800c488:	d52d3051 	.word	0xd52d3051
 800c48c:	c0874910 	.word	0xc0874910
 800c490:	2000100c 	.word	0x2000100c
 800c494:	08068663 	.word	0x08068663
 800c498:	47efffff 	.word	0x47efffff
 800c49c:	7ff00000 	.word	0x7ff00000

0800c4a0 <log>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	ed2d 8b02 	vpush	{d8}
 800c4a6:	b08a      	sub	sp, #40	; 0x28
 800c4a8:	ec55 4b10 	vmov	r4, r5, d0
 800c4ac:	f000 f9e8 	bl	800c880 <__ieee754_log>
 800c4b0:	4b36      	ldr	r3, [pc, #216]	; (800c58c <log+0xec>)
 800c4b2:	eeb0 8a40 	vmov.f32	s16, s0
 800c4b6:	eef0 8a60 	vmov.f32	s17, s1
 800c4ba:	f993 6000 	ldrsb.w	r6, [r3]
 800c4be:	1c73      	adds	r3, r6, #1
 800c4c0:	d05b      	beq.n	800c57a <log+0xda>
 800c4c2:	4622      	mov	r2, r4
 800c4c4:	462b      	mov	r3, r5
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7f4 fb2f 	bl	8000b2c <__aeabi_dcmpun>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d153      	bne.n	800c57a <log+0xda>
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	4629      	mov	r1, r5
 800c4da:	f7f4 fb1d 	bl	8000b18 <__aeabi_dcmpgt>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d14b      	bne.n	800c57a <log+0xda>
 800c4e2:	4b2b      	ldr	r3, [pc, #172]	; (800c590 <log+0xf0>)
 800c4e4:	9301      	str	r3, [sp, #4]
 800c4e6:	9008      	str	r0, [sp, #32]
 800c4e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c4ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c4f0:	b9a6      	cbnz	r6, 800c51c <log+0x7c>
 800c4f2:	4b28      	ldr	r3, [pc, #160]	; (800c594 <log+0xf4>)
 800c4f4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c4f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	2200      	movs	r2, #0
 800c500:	2300      	movs	r3, #0
 800c502:	4629      	mov	r1, r5
 800c504:	f7f4 fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c508:	bb40      	cbnz	r0, 800c55c <log+0xbc>
 800c50a:	2301      	movs	r3, #1
 800c50c:	2e02      	cmp	r6, #2
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	d119      	bne.n	800c546 <log+0xa6>
 800c512:	f7fe fde9 	bl	800b0e8 <__errno>
 800c516:	2321      	movs	r3, #33	; 0x21
 800c518:	6003      	str	r3, [r0, #0]
 800c51a:	e019      	b.n	800c550 <log+0xb0>
 800c51c:	4b1e      	ldr	r3, [pc, #120]	; (800c598 <log+0xf8>)
 800c51e:	2200      	movs	r2, #0
 800c520:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c524:	4620      	mov	r0, r4
 800c526:	2200      	movs	r2, #0
 800c528:	2300      	movs	r3, #0
 800c52a:	4629      	mov	r1, r5
 800c52c:	f7f4 facc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c530:	2800      	cmp	r0, #0
 800c532:	d0ea      	beq.n	800c50a <log+0x6a>
 800c534:	2302      	movs	r3, #2
 800c536:	429e      	cmp	r6, r3
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	d111      	bne.n	800c560 <log+0xc0>
 800c53c:	f7fe fdd4 	bl	800b0e8 <__errno>
 800c540:	2322      	movs	r3, #34	; 0x22
 800c542:	6003      	str	r3, [r0, #0]
 800c544:	e011      	b.n	800c56a <log+0xca>
 800c546:	4668      	mov	r0, sp
 800c548:	f000 fb54 	bl	800cbf4 <matherr>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d0e0      	beq.n	800c512 <log+0x72>
 800c550:	4812      	ldr	r0, [pc, #72]	; (800c59c <log+0xfc>)
 800c552:	f000 fb51 	bl	800cbf8 <nan>
 800c556:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c55a:	e006      	b.n	800c56a <log+0xca>
 800c55c:	2302      	movs	r3, #2
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	4668      	mov	r0, sp
 800c562:	f000 fb47 	bl	800cbf4 <matherr>
 800c566:	2800      	cmp	r0, #0
 800c568:	d0e8      	beq.n	800c53c <log+0x9c>
 800c56a:	9b08      	ldr	r3, [sp, #32]
 800c56c:	b11b      	cbz	r3, 800c576 <log+0xd6>
 800c56e:	f7fe fdbb 	bl	800b0e8 <__errno>
 800c572:	9b08      	ldr	r3, [sp, #32]
 800c574:	6003      	str	r3, [r0, #0]
 800c576:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c57a:	eeb0 0a48 	vmov.f32	s0, s16
 800c57e:	eef0 0a68 	vmov.f32	s1, s17
 800c582:	b00a      	add	sp, #40	; 0x28
 800c584:	ecbd 8b02 	vpop	{d8}
 800c588:	bd70      	pop	{r4, r5, r6, pc}
 800c58a:	bf00      	nop
 800c58c:	2000100c 	.word	0x2000100c
 800c590:	08068667 	.word	0x08068667
 800c594:	c7efffff 	.word	0xc7efffff
 800c598:	fff00000 	.word	0xfff00000
 800c59c:	08068635 	.word	0x08068635

0800c5a0 <__ieee754_exp>:
 800c5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a4:	ec55 4b10 	vmov	r4, r5, d0
 800c5a8:	4aab      	ldr	r2, [pc, #684]	; (800c858 <__ieee754_exp+0x2b8>)
 800c5aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c5ae:	4296      	cmp	r6, r2
 800c5b0:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 800c5b4:	d932      	bls.n	800c61c <__ieee754_exp+0x7c>
 800c5b6:	4aa9      	ldr	r2, [pc, #676]	; (800c85c <__ieee754_exp+0x2bc>)
 800c5b8:	4296      	cmp	r6, r2
 800c5ba:	d913      	bls.n	800c5e4 <__ieee754_exp+0x44>
 800c5bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c5c0:	4323      	orrs	r3, r4
 800c5c2:	ee10 2a10 	vmov	r2, s0
 800c5c6:	d007      	beq.n	800c5d8 <__ieee754_exp+0x38>
 800c5c8:	462b      	mov	r3, r5
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f7f3 fe5d 	bl	800028c <__adddf3>
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	460d      	mov	r5, r1
 800c5d6:	e000      	b.n	800c5da <__ieee754_exp+0x3a>
 800c5d8:	b9ef      	cbnz	r7, 800c616 <__ieee754_exp+0x76>
 800c5da:	ec45 4b10 	vmov	d0, r4, r5
 800c5de:	b004      	add	sp, #16
 800c5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e4:	a386      	add	r3, pc, #536	; (adr r3, 800c800 <__ieee754_exp+0x260>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	ee10 0a10 	vmov	r0, s0
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	f7f4 fa92 	bl	8000b18 <__aeabi_dcmpgt>
 800c5f4:	b138      	cbz	r0, 800c606 <__ieee754_exp+0x66>
 800c5f6:	a384      	add	r3, pc, #528	; (adr r3, 800c808 <__ieee754_exp+0x268>)
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	4619      	mov	r1, r3
 800c600:	f7f3 fffa 	bl	80005f8 <__aeabi_dmul>
 800c604:	e7e5      	b.n	800c5d2 <__ieee754_exp+0x32>
 800c606:	a382      	add	r3, pc, #520	; (adr r3, 800c810 <__ieee754_exp+0x270>)
 800c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60c:	4620      	mov	r0, r4
 800c60e:	4629      	mov	r1, r5
 800c610:	f7f4 fa64 	bl	8000adc <__aeabi_dcmplt>
 800c614:	b130      	cbz	r0, 800c624 <__ieee754_exp+0x84>
 800c616:	2400      	movs	r4, #0
 800c618:	2500      	movs	r5, #0
 800c61a:	e7de      	b.n	800c5da <__ieee754_exp+0x3a>
 800c61c:	4b90      	ldr	r3, [pc, #576]	; (800c860 <__ieee754_exp+0x2c0>)
 800c61e:	429e      	cmp	r6, r3
 800c620:	f240 80a6 	bls.w	800c770 <__ieee754_exp+0x1d0>
 800c624:	4b8f      	ldr	r3, [pc, #572]	; (800c864 <__ieee754_exp+0x2c4>)
 800c626:	429e      	cmp	r6, r3
 800c628:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800c62c:	d875      	bhi.n	800c71a <__ieee754_exp+0x17a>
 800c62e:	4b8e      	ldr	r3, [pc, #568]	; (800c868 <__ieee754_exp+0x2c8>)
 800c630:	4e8e      	ldr	r6, [pc, #568]	; (800c86c <__ieee754_exp+0x2cc>)
 800c632:	4443      	add	r3, r8
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	4620      	mov	r0, r4
 800c63a:	4629      	mov	r1, r5
 800c63c:	f7f3 fe24 	bl	8000288 <__aeabi_dsub>
 800c640:	4446      	add	r6, r8
 800c642:	e9cd 0100 	strd	r0, r1, [sp]
 800c646:	e9d6 8900 	ldrd	r8, r9, [r6]
 800c64a:	f1c7 0a01 	rsb	sl, r7, #1
 800c64e:	ebaa 0a07 	sub.w	sl, sl, r7
 800c652:	4642      	mov	r2, r8
 800c654:	464b      	mov	r3, r9
 800c656:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c65a:	f7f3 fe15 	bl	8000288 <__aeabi_dsub>
 800c65e:	4604      	mov	r4, r0
 800c660:	460d      	mov	r5, r1
 800c662:	4622      	mov	r2, r4
 800c664:	462b      	mov	r3, r5
 800c666:	4620      	mov	r0, r4
 800c668:	4629      	mov	r1, r5
 800c66a:	f7f3 ffc5 	bl	80005f8 <__aeabi_dmul>
 800c66e:	a36a      	add	r3, pc, #424	; (adr r3, 800c818 <__ieee754_exp+0x278>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	4606      	mov	r6, r0
 800c676:	460f      	mov	r7, r1
 800c678:	f7f3 ffbe 	bl	80005f8 <__aeabi_dmul>
 800c67c:	a368      	add	r3, pc, #416	; (adr r3, 800c820 <__ieee754_exp+0x280>)
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f7f3 fe01 	bl	8000288 <__aeabi_dsub>
 800c686:	4632      	mov	r2, r6
 800c688:	463b      	mov	r3, r7
 800c68a:	f7f3 ffb5 	bl	80005f8 <__aeabi_dmul>
 800c68e:	a366      	add	r3, pc, #408	; (adr r3, 800c828 <__ieee754_exp+0x288>)
 800c690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c694:	f7f3 fdfa 	bl	800028c <__adddf3>
 800c698:	4632      	mov	r2, r6
 800c69a:	463b      	mov	r3, r7
 800c69c:	f7f3 ffac 	bl	80005f8 <__aeabi_dmul>
 800c6a0:	a363      	add	r3, pc, #396	; (adr r3, 800c830 <__ieee754_exp+0x290>)
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f7f3 fdef 	bl	8000288 <__aeabi_dsub>
 800c6aa:	4632      	mov	r2, r6
 800c6ac:	463b      	mov	r3, r7
 800c6ae:	f7f3 ffa3 	bl	80005f8 <__aeabi_dmul>
 800c6b2:	a361      	add	r3, pc, #388	; (adr r3, 800c838 <__ieee754_exp+0x298>)
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	f7f3 fde8 	bl	800028c <__adddf3>
 800c6bc:	4632      	mov	r2, r6
 800c6be:	463b      	mov	r3, r7
 800c6c0:	f7f3 ff9a 	bl	80005f8 <__aeabi_dmul>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	f7f3 fddc 	bl	8000288 <__aeabi_dsub>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4606      	mov	r6, r0
 800c6d6:	460f      	mov	r7, r1
 800c6d8:	4620      	mov	r0, r4
 800c6da:	4629      	mov	r1, r5
 800c6dc:	f7f3 ff8c 	bl	80005f8 <__aeabi_dmul>
 800c6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6e4:	f1ba 0f00 	cmp.w	sl, #0
 800c6e8:	d15c      	bne.n	800c7a4 <__ieee754_exp+0x204>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	f7f3 fdc8 	bl	8000288 <__aeabi_dsub>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c700:	f7f4 f8a4 	bl	800084c <__aeabi_ddiv>
 800c704:	4622      	mov	r2, r4
 800c706:	462b      	mov	r3, r5
 800c708:	f7f3 fdbe 	bl	8000288 <__aeabi_dsub>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	2000      	movs	r0, #0
 800c712:	4957      	ldr	r1, [pc, #348]	; (800c870 <__ieee754_exp+0x2d0>)
 800c714:	f7f3 fdb8 	bl	8000288 <__aeabi_dsub>
 800c718:	e75b      	b.n	800c5d2 <__ieee754_exp+0x32>
 800c71a:	4e56      	ldr	r6, [pc, #344]	; (800c874 <__ieee754_exp+0x2d4>)
 800c71c:	a348      	add	r3, pc, #288	; (adr r3, 800c840 <__ieee754_exp+0x2a0>)
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	4446      	add	r6, r8
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	f7f3 ff66 	bl	80005f8 <__aeabi_dmul>
 800c72c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c730:	f7f3 fdac 	bl	800028c <__adddf3>
 800c734:	f7f4 fa10 	bl	8000b58 <__aeabi_d2iz>
 800c738:	4682      	mov	sl, r0
 800c73a:	f7f3 fef3 	bl	8000524 <__aeabi_i2d>
 800c73e:	a342      	add	r3, pc, #264	; (adr r3, 800c848 <__ieee754_exp+0x2a8>)
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	4606      	mov	r6, r0
 800c746:	460f      	mov	r7, r1
 800c748:	f7f3 ff56 	bl	80005f8 <__aeabi_dmul>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4620      	mov	r0, r4
 800c752:	4629      	mov	r1, r5
 800c754:	f7f3 fd98 	bl	8000288 <__aeabi_dsub>
 800c758:	a33d      	add	r3, pc, #244	; (adr r3, 800c850 <__ieee754_exp+0x2b0>)
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	e9cd 0100 	strd	r0, r1, [sp]
 800c762:	4630      	mov	r0, r6
 800c764:	4639      	mov	r1, r7
 800c766:	f7f3 ff47 	bl	80005f8 <__aeabi_dmul>
 800c76a:	4680      	mov	r8, r0
 800c76c:	4689      	mov	r9, r1
 800c76e:	e770      	b.n	800c652 <__ieee754_exp+0xb2>
 800c770:	4b41      	ldr	r3, [pc, #260]	; (800c878 <__ieee754_exp+0x2d8>)
 800c772:	429e      	cmp	r6, r3
 800c774:	d811      	bhi.n	800c79a <__ieee754_exp+0x1fa>
 800c776:	a324      	add	r3, pc, #144	; (adr r3, 800c808 <__ieee754_exp+0x268>)
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	ee10 0a10 	vmov	r0, s0
 800c780:	4629      	mov	r1, r5
 800c782:	f7f3 fd83 	bl	800028c <__adddf3>
 800c786:	2200      	movs	r2, #0
 800c788:	4b39      	ldr	r3, [pc, #228]	; (800c870 <__ieee754_exp+0x2d0>)
 800c78a:	f7f4 f9c5 	bl	8000b18 <__aeabi_dcmpgt>
 800c78e:	b138      	cbz	r0, 800c7a0 <__ieee754_exp+0x200>
 800c790:	2200      	movs	r2, #0
 800c792:	4b37      	ldr	r3, [pc, #220]	; (800c870 <__ieee754_exp+0x2d0>)
 800c794:	4620      	mov	r0, r4
 800c796:	4629      	mov	r1, r5
 800c798:	e719      	b.n	800c5ce <__ieee754_exp+0x2e>
 800c79a:	f04f 0a00 	mov.w	sl, #0
 800c79e:	e760      	b.n	800c662 <__ieee754_exp+0xc2>
 800c7a0:	4682      	mov	sl, r0
 800c7a2:	e75e      	b.n	800c662 <__ieee754_exp+0xc2>
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	463b      	mov	r3, r7
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c7ae:	f7f3 fd6b 	bl	8000288 <__aeabi_dsub>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ba:	f7f4 f847 	bl	800084c <__aeabi_ddiv>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	4649      	mov	r1, r9
 800c7c6:	f7f3 fd5f 	bl	8000288 <__aeabi_dsub>
 800c7ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7ce:	f7f3 fd5b 	bl	8000288 <__aeabi_dsub>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	4925      	ldr	r1, [pc, #148]	; (800c870 <__ieee754_exp+0x2d0>)
 800c7da:	f7f3 fd55 	bl	8000288 <__aeabi_dsub>
 800c7de:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800c7e2:	4592      	cmp	sl, r2
 800c7e4:	db02      	blt.n	800c7ec <__ieee754_exp+0x24c>
 800c7e6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c7ea:	e6f2      	b.n	800c5d2 <__ieee754_exp+0x32>
 800c7ec:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800c7f0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800c7fa:	e701      	b.n	800c600 <__ieee754_exp+0x60>
 800c7fc:	f3af 8000 	nop.w
 800c800:	fefa39ef 	.word	0xfefa39ef
 800c804:	40862e42 	.word	0x40862e42
 800c808:	8800759c 	.word	0x8800759c
 800c80c:	7e37e43c 	.word	0x7e37e43c
 800c810:	d52d3051 	.word	0xd52d3051
 800c814:	c0874910 	.word	0xc0874910
 800c818:	72bea4d0 	.word	0x72bea4d0
 800c81c:	3e663769 	.word	0x3e663769
 800c820:	c5d26bf1 	.word	0xc5d26bf1
 800c824:	3ebbbd41 	.word	0x3ebbbd41
 800c828:	af25de2c 	.word	0xaf25de2c
 800c82c:	3f11566a 	.word	0x3f11566a
 800c830:	16bebd93 	.word	0x16bebd93
 800c834:	3f66c16c 	.word	0x3f66c16c
 800c838:	5555553e 	.word	0x5555553e
 800c83c:	3fc55555 	.word	0x3fc55555
 800c840:	652b82fe 	.word	0x652b82fe
 800c844:	3ff71547 	.word	0x3ff71547
 800c848:	fee00000 	.word	0xfee00000
 800c84c:	3fe62e42 	.word	0x3fe62e42
 800c850:	35793c76 	.word	0x35793c76
 800c854:	3dea39ef 	.word	0x3dea39ef
 800c858:	40862e41 	.word	0x40862e41
 800c85c:	7fefffff 	.word	0x7fefffff
 800c860:	3fd62e42 	.word	0x3fd62e42
 800c864:	3ff0a2b1 	.word	0x3ff0a2b1
 800c868:	08068680 	.word	0x08068680
 800c86c:	08068690 	.word	0x08068690
 800c870:	3ff00000 	.word	0x3ff00000
 800c874:	08068670 	.word	0x08068670
 800c878:	3e2fffff 	.word	0x3e2fffff
 800c87c:	00000000 	.word	0x00000000

0800c880 <__ieee754_log>:
 800c880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	ec51 0b10 	vmov	r0, r1, d0
 800c888:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c88c:	b087      	sub	sp, #28
 800c88e:	460d      	mov	r5, r1
 800c890:	da27      	bge.n	800c8e2 <__ieee754_log+0x62>
 800c892:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c896:	4303      	orrs	r3, r0
 800c898:	ee10 2a10 	vmov	r2, s0
 800c89c:	d10a      	bne.n	800c8b4 <__ieee754_log+0x34>
 800c89e:	49cc      	ldr	r1, [pc, #816]	; (800cbd0 <__ieee754_log+0x350>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	f7f3 ffd1 	bl	800084c <__aeabi_ddiv>
 800c8aa:	ec41 0b10 	vmov	d0, r0, r1
 800c8ae:	b007      	add	sp, #28
 800c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	da05      	bge.n	800c8c4 <__ieee754_log+0x44>
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	f7f3 fce5 	bl	8000288 <__aeabi_dsub>
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e7f0      	b.n	800c8a6 <__ieee754_log+0x26>
 800c8c4:	4bc3      	ldr	r3, [pc, #780]	; (800cbd4 <__ieee754_log+0x354>)
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f7f3 fe96 	bl	80005f8 <__aeabi_dmul>
 800c8cc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c8d0:	460d      	mov	r5, r1
 800c8d2:	4ac1      	ldr	r2, [pc, #772]	; (800cbd8 <__ieee754_log+0x358>)
 800c8d4:	4295      	cmp	r5, r2
 800c8d6:	dd06      	ble.n	800c8e6 <__ieee754_log+0x66>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	f7f3 fcd6 	bl	800028c <__adddf3>
 800c8e0:	e7e3      	b.n	800c8aa <__ieee754_log+0x2a>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	e7f5      	b.n	800c8d2 <__ieee754_log+0x52>
 800c8e6:	152c      	asrs	r4, r5, #20
 800c8e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c8ec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c8f0:	441c      	add	r4, r3
 800c8f2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c8f6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c8fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8fe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c902:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c906:	ea42 0105 	orr.w	r1, r2, r5
 800c90a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c90e:	2200      	movs	r2, #0
 800c910:	4bb2      	ldr	r3, [pc, #712]	; (800cbdc <__ieee754_log+0x35c>)
 800c912:	f7f3 fcb9 	bl	8000288 <__aeabi_dsub>
 800c916:	1cab      	adds	r3, r5, #2
 800c918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	4682      	mov	sl, r0
 800c920:	468b      	mov	fp, r1
 800c922:	f04f 0200 	mov.w	r2, #0
 800c926:	dc53      	bgt.n	800c9d0 <__ieee754_log+0x150>
 800c928:	2300      	movs	r3, #0
 800c92a:	f7f4 f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c92e:	b1d0      	cbz	r0, 800c966 <__ieee754_log+0xe6>
 800c930:	2c00      	cmp	r4, #0
 800c932:	f000 8120 	beq.w	800cb76 <__ieee754_log+0x2f6>
 800c936:	4620      	mov	r0, r4
 800c938:	f7f3 fdf4 	bl	8000524 <__aeabi_i2d>
 800c93c:	a390      	add	r3, pc, #576	; (adr r3, 800cb80 <__ieee754_log+0x300>)
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	4606      	mov	r6, r0
 800c944:	460f      	mov	r7, r1
 800c946:	f7f3 fe57 	bl	80005f8 <__aeabi_dmul>
 800c94a:	a38f      	add	r3, pc, #572	; (adr r3, 800cb88 <__ieee754_log+0x308>)
 800c94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c950:	4604      	mov	r4, r0
 800c952:	460d      	mov	r5, r1
 800c954:	4630      	mov	r0, r6
 800c956:	4639      	mov	r1, r7
 800c958:	f7f3 fe4e 	bl	80005f8 <__aeabi_dmul>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	4620      	mov	r0, r4
 800c962:	4629      	mov	r1, r5
 800c964:	e7ba      	b.n	800c8dc <__ieee754_log+0x5c>
 800c966:	a38a      	add	r3, pc, #552	; (adr r3, 800cb90 <__ieee754_log+0x310>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	4650      	mov	r0, sl
 800c96e:	4659      	mov	r1, fp
 800c970:	f7f3 fe42 	bl	80005f8 <__aeabi_dmul>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	2000      	movs	r0, #0
 800c97a:	4999      	ldr	r1, [pc, #612]	; (800cbe0 <__ieee754_log+0x360>)
 800c97c:	f7f3 fc84 	bl	8000288 <__aeabi_dsub>
 800c980:	4652      	mov	r2, sl
 800c982:	4606      	mov	r6, r0
 800c984:	460f      	mov	r7, r1
 800c986:	465b      	mov	r3, fp
 800c988:	4650      	mov	r0, sl
 800c98a:	4659      	mov	r1, fp
 800c98c:	f7f3 fe34 	bl	80005f8 <__aeabi_dmul>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4630      	mov	r0, r6
 800c996:	4639      	mov	r1, r7
 800c998:	f7f3 fe2e 	bl	80005f8 <__aeabi_dmul>
 800c99c:	4606      	mov	r6, r0
 800c99e:	460f      	mov	r7, r1
 800c9a0:	b914      	cbnz	r4, 800c9a8 <__ieee754_log+0x128>
 800c9a2:	4632      	mov	r2, r6
 800c9a4:	463b      	mov	r3, r7
 800c9a6:	e0a0      	b.n	800caea <__ieee754_log+0x26a>
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f7f3 fdbb 	bl	8000524 <__aeabi_i2d>
 800c9ae:	a374      	add	r3, pc, #464	; (adr r3, 800cb80 <__ieee754_log+0x300>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	4680      	mov	r8, r0
 800c9b6:	4689      	mov	r9, r1
 800c9b8:	f7f3 fe1e 	bl	80005f8 <__aeabi_dmul>
 800c9bc:	a372      	add	r3, pc, #456	; (adr r3, 800cb88 <__ieee754_log+0x308>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	460d      	mov	r5, r1
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	4649      	mov	r1, r9
 800c9ca:	f7f3 fe15 	bl	80005f8 <__aeabi_dmul>
 800c9ce:	e0a5      	b.n	800cb1c <__ieee754_log+0x29c>
 800c9d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9d4:	f7f3 fc5a 	bl	800028c <__adddf3>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4650      	mov	r0, sl
 800c9de:	4659      	mov	r1, fp
 800c9e0:	f7f3 ff34 	bl	800084c <__aeabi_ddiv>
 800c9e4:	e9cd 0100 	strd	r0, r1, [sp]
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f7f3 fd9b 	bl	8000524 <__aeabi_i2d>
 800c9ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9f6:	4610      	mov	r0, r2
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	f7f3 fdfd 	bl	80005f8 <__aeabi_dmul>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca06:	f7f3 fdf7 	bl	80005f8 <__aeabi_dmul>
 800ca0a:	a363      	add	r3, pc, #396	; (adr r3, 800cb98 <__ieee754_log+0x318>)
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	4680      	mov	r8, r0
 800ca12:	4689      	mov	r9, r1
 800ca14:	f7f3 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ca18:	a361      	add	r3, pc, #388	; (adr r3, 800cba0 <__ieee754_log+0x320>)
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	f7f3 fc35 	bl	800028c <__adddf3>
 800ca22:	4642      	mov	r2, r8
 800ca24:	464b      	mov	r3, r9
 800ca26:	f7f3 fde7 	bl	80005f8 <__aeabi_dmul>
 800ca2a:	a35f      	add	r3, pc, #380	; (adr r3, 800cba8 <__ieee754_log+0x328>)
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	f7f3 fc2c 	bl	800028c <__adddf3>
 800ca34:	4642      	mov	r2, r8
 800ca36:	464b      	mov	r3, r9
 800ca38:	f7f3 fdde 	bl	80005f8 <__aeabi_dmul>
 800ca3c:	a35c      	add	r3, pc, #368	; (adr r3, 800cbb0 <__ieee754_log+0x330>)
 800ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca42:	f7f3 fc23 	bl	800028c <__adddf3>
 800ca46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca4a:	f7f3 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ca4e:	a35a      	add	r3, pc, #360	; (adr r3, 800cbb8 <__ieee754_log+0x338>)
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca58:	4640      	mov	r0, r8
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	f7f3 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ca60:	a357      	add	r3, pc, #348	; (adr r3, 800cbc0 <__ieee754_log+0x340>)
 800ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca66:	f7f3 fc11 	bl	800028c <__adddf3>
 800ca6a:	4642      	mov	r2, r8
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	f7f3 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ca72:	a355      	add	r3, pc, #340	; (adr r3, 800cbc8 <__ieee754_log+0x348>)
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	f7f3 fc08 	bl	800028c <__adddf3>
 800ca7c:	4642      	mov	r2, r8
 800ca7e:	464b      	mov	r3, r9
 800ca80:	f7f3 fdba 	bl	80005f8 <__aeabi_dmul>
 800ca84:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800ca88:	4602      	mov	r2, r0
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ca90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca94:	f7f3 fbfa 	bl	800028c <__adddf3>
 800ca98:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800ca9c:	3551      	adds	r5, #81	; 0x51
 800ca9e:	4335      	orrs	r5, r6
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	4680      	mov	r8, r0
 800caa4:	4689      	mov	r9, r1
 800caa6:	dd48      	ble.n	800cb3a <__ieee754_log+0x2ba>
 800caa8:	2200      	movs	r2, #0
 800caaa:	4b4d      	ldr	r3, [pc, #308]	; (800cbe0 <__ieee754_log+0x360>)
 800caac:	4650      	mov	r0, sl
 800caae:	4659      	mov	r1, fp
 800cab0:	f7f3 fda2 	bl	80005f8 <__aeabi_dmul>
 800cab4:	4652      	mov	r2, sl
 800cab6:	465b      	mov	r3, fp
 800cab8:	f7f3 fd9e 	bl	80005f8 <__aeabi_dmul>
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	4606      	mov	r6, r0
 800cac2:	460f      	mov	r7, r1
 800cac4:	4640      	mov	r0, r8
 800cac6:	4649      	mov	r1, r9
 800cac8:	f7f3 fbe0 	bl	800028c <__adddf3>
 800cacc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cad0:	f7f3 fd92 	bl	80005f8 <__aeabi_dmul>
 800cad4:	4680      	mov	r8, r0
 800cad6:	4689      	mov	r9, r1
 800cad8:	b964      	cbnz	r4, 800caf4 <__ieee754_log+0x274>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	4630      	mov	r0, r6
 800cae0:	4639      	mov	r1, r7
 800cae2:	f7f3 fbd1 	bl	8000288 <__aeabi_dsub>
 800cae6:	4602      	mov	r2, r0
 800cae8:	460b      	mov	r3, r1
 800caea:	4650      	mov	r0, sl
 800caec:	4659      	mov	r1, fp
 800caee:	f7f3 fbcb 	bl	8000288 <__aeabi_dsub>
 800caf2:	e6da      	b.n	800c8aa <__ieee754_log+0x2a>
 800caf4:	a322      	add	r3, pc, #136	; (adr r3, 800cb80 <__ieee754_log+0x300>)
 800caf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cafe:	f7f3 fd7b 	bl	80005f8 <__aeabi_dmul>
 800cb02:	a321      	add	r3, pc, #132	; (adr r3, 800cb88 <__ieee754_log+0x308>)
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	4604      	mov	r4, r0
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb10:	f7f3 fd72 	bl	80005f8 <__aeabi_dmul>
 800cb14:	4642      	mov	r2, r8
 800cb16:	464b      	mov	r3, r9
 800cb18:	f7f3 fbb8 	bl	800028c <__adddf3>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4630      	mov	r0, r6
 800cb22:	4639      	mov	r1, r7
 800cb24:	f7f3 fbb0 	bl	8000288 <__aeabi_dsub>
 800cb28:	4652      	mov	r2, sl
 800cb2a:	465b      	mov	r3, fp
 800cb2c:	f7f3 fbac 	bl	8000288 <__aeabi_dsub>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	4620      	mov	r0, r4
 800cb36:	4629      	mov	r1, r5
 800cb38:	e7d9      	b.n	800caee <__ieee754_log+0x26e>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4650      	mov	r0, sl
 800cb40:	4659      	mov	r1, fp
 800cb42:	f7f3 fba1 	bl	8000288 <__aeabi_dsub>
 800cb46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb4a:	f7f3 fd55 	bl	80005f8 <__aeabi_dmul>
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460f      	mov	r7, r1
 800cb52:	2c00      	cmp	r4, #0
 800cb54:	f43f af25 	beq.w	800c9a2 <__ieee754_log+0x122>
 800cb58:	a309      	add	r3, pc, #36	; (adr r3, 800cb80 <__ieee754_log+0x300>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb62:	f7f3 fd49 	bl	80005f8 <__aeabi_dmul>
 800cb66:	a308      	add	r3, pc, #32	; (adr r3, 800cb88 <__ieee754_log+0x308>)
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	460d      	mov	r5, r1
 800cb70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb74:	e729      	b.n	800c9ca <__ieee754_log+0x14a>
 800cb76:	2000      	movs	r0, #0
 800cb78:	2100      	movs	r1, #0
 800cb7a:	e696      	b.n	800c8aa <__ieee754_log+0x2a>
 800cb7c:	f3af 8000 	nop.w
 800cb80:	fee00000 	.word	0xfee00000
 800cb84:	3fe62e42 	.word	0x3fe62e42
 800cb88:	35793c76 	.word	0x35793c76
 800cb8c:	3dea39ef 	.word	0x3dea39ef
 800cb90:	55555555 	.word	0x55555555
 800cb94:	3fd55555 	.word	0x3fd55555
 800cb98:	df3e5244 	.word	0xdf3e5244
 800cb9c:	3fc2f112 	.word	0x3fc2f112
 800cba0:	96cb03de 	.word	0x96cb03de
 800cba4:	3fc74664 	.word	0x3fc74664
 800cba8:	94229359 	.word	0x94229359
 800cbac:	3fd24924 	.word	0x3fd24924
 800cbb0:	55555593 	.word	0x55555593
 800cbb4:	3fe55555 	.word	0x3fe55555
 800cbb8:	d078c69f 	.word	0xd078c69f
 800cbbc:	3fc39a09 	.word	0x3fc39a09
 800cbc0:	1d8e78af 	.word	0x1d8e78af
 800cbc4:	3fcc71c5 	.word	0x3fcc71c5
 800cbc8:	9997fa04 	.word	0x9997fa04
 800cbcc:	3fd99999 	.word	0x3fd99999
 800cbd0:	c3500000 	.word	0xc3500000
 800cbd4:	43500000 	.word	0x43500000
 800cbd8:	7fefffff 	.word	0x7fefffff
 800cbdc:	3ff00000 	.word	0x3ff00000
 800cbe0:	3fe00000 	.word	0x3fe00000

0800cbe4 <finite>:
 800cbe4:	ee10 3a90 	vmov	r3, s1
 800cbe8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800cbec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cbf0:	0fc0      	lsrs	r0, r0, #31
 800cbf2:	4770      	bx	lr

0800cbf4 <matherr>:
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	4770      	bx	lr

0800cbf8 <nan>:
 800cbf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc00 <nan+0x8>
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	00000000 	.word	0x00000000
 800cc04:	7ff80000 	.word	0x7ff80000

0800cc08 <_close>:
 800cc08:	4b02      	ldr	r3, [pc, #8]	; (800cc14 <_close+0xc>)
 800cc0a:	2258      	movs	r2, #88	; 0x58
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc12:	4770      	bx	lr
 800cc14:	200027bc 	.word	0x200027bc

0800cc18 <_fstat>:
 800cc18:	4b02      	ldr	r3, [pc, #8]	; (800cc24 <_fstat+0xc>)
 800cc1a:	2258      	movs	r2, #88	; 0x58
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc22:	4770      	bx	lr
 800cc24:	200027bc 	.word	0x200027bc

0800cc28 <_isatty>:
 800cc28:	4b02      	ldr	r3, [pc, #8]	; (800cc34 <_isatty+0xc>)
 800cc2a:	2258      	movs	r2, #88	; 0x58
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	2000      	movs	r0, #0
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	200027bc 	.word	0x200027bc

0800cc38 <_lseek>:
 800cc38:	4b02      	ldr	r3, [pc, #8]	; (800cc44 <_lseek+0xc>)
 800cc3a:	2258      	movs	r2, #88	; 0x58
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc42:	4770      	bx	lr
 800cc44:	200027bc 	.word	0x200027bc

0800cc48 <_read>:
 800cc48:	4b02      	ldr	r3, [pc, #8]	; (800cc54 <_read+0xc>)
 800cc4a:	2258      	movs	r2, #88	; 0x58
 800cc4c:	601a      	str	r2, [r3, #0]
 800cc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc52:	4770      	bx	lr
 800cc54:	200027bc 	.word	0x200027bc

0800cc58 <_write>:
 800cc58:	4b02      	ldr	r3, [pc, #8]	; (800cc64 <_write+0xc>)
 800cc5a:	2258      	movs	r2, #88	; 0x58
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc62:	4770      	bx	lr
 800cc64:	200027bc 	.word	0x200027bc

0800cc68 <_init>:
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	bf00      	nop
 800cc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6e:	bc08      	pop	{r3}
 800cc70:	469e      	mov	lr, r3
 800cc72:	4770      	bx	lr

0800cc74 <_fini>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	bf00      	nop
 800cc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc7a:	bc08      	pop	{r3}
 800cc7c:	469e      	mov	lr, r3
 800cc7e:	4770      	bx	lr
