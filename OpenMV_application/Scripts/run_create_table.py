import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os





#--------------------------------------------------------------------------
#    _______  ______  _        _    _   _    _  _____ ___ ___  _   _ 
#   | ____\ \/ /  _ \| |      / \  | \ | |  / \|_   _|_ _/ _ \| \ | |
#   |  _|  \  /| |_) | |     / _ \ |  \| | / _ \ | |  | | | | |  \| |
#   | |___ /  \|  __/| |___ / ___ \| |\  |/ ___ \| |  | | |_| | |\  |
#   |_____/_/\_\_|   |_____/_/   \_\_| \_/_/   \_\_| |___\___/|_| \_|

"""
This python script is used for generating, showing and saving the table that contains some information related to the OL training done on the camera.
The script simply reads all txt files generated by the OpenMV camera and parses all the useful info stored inside it. 
After that the code in sequence generates and saves:


"""


###################################
#    __  __    _    ___ _   _ 
#   |  \/  |  / \  |_ _| \ | |
#   | |\/| | / _ \  | ||  \| |
#   | |  | |/ ___ \ | || |\  |
#   |_|  |_/_/   \_\___|_| \_|




# Define path where to save the bar plots/tables/confusion matrices
ROOT__PATH = os.path.dirname(os.path.abspath(__file__))
SAVE_PLOTS__PATH = ROOT__PATH + '\\Results\\Results_backup\\'



class MethodInfo(object):
    def __init__(self, name):

        # Related to the layer
        
        self.label     = ['0','1','2','3','4','5','6','7','8','9']             # the original model knows only the vowels
        self.labels = []
        self.accuracy = 0
        self.conf_matr = np.zeros((10,10))
        self.times = []
        self.OL_time = 0
        self.info = []

        
        self.title = name       # title that will be displayed on plots



save_name = ["1_OL", "2_OL V2", "3_LWF", "4_CWR", "5_OL batch", "6_OLV2_batch", "7_LWF_batch"]



OL_data = MethodInfo('')
OLV2_data = MethodInfo('')
LWF_data = MethodInfo('')
CWR_data = MethodInfo('')
OLb_data = MethodInfo('')
OLV2b_data = MethodInfo('')
LWFb_data = MethodInfo('')


# -------- READ DATA FROM TXT FILE GENERATED BY OPENMV CAMERA
for k in range(0,7):

    if(k==0):
        strategy = OL_data
    elif(k==1):
        strategy = OLV2_data
    elif(k==2):
        strategy = LWF_data
    elif(k==3):
        strategy = CWR_data
    elif(k==4):
        strategy = OLb_data
    elif(k==5):
        strategy = OLV2b_data
    elif(k==6):
        strategy = LWFb_data

    with open(SAVE_PLOTS__PATH + save_name[k] + '.txt') as f:

        j,i = 0,0
        info_flag = 0
        label_flag = 0
        times_flag = 0
        for line in f:  # cycle over lines 

            if(info_flag==0):
                data = line.split(',')  # split one line in each single number
                for number in data:
                    strategy.info.append(float(number))
                info_flag = 1

            elif(label_flag==0 and info_flag==1):
                data = line.split(',')  # split one line in each single number
                for number in data:
                    strategy.labels.append(number)
                label_flag = 1

            elif(times_flag==0 and label_flag==1):
                data = line.split(',')  # split one line in each single number
                for number in data:
                    strategy.times.append(float(number))
                times_flag = 1

            else:   
                data = line.split(',')  # split one line in each single number
                for number in data:
                    strategy.conf_matr[j,i] = float(number)   # save the number
                    i+=1

                j+=1
                i=0

        # compute overall accuracy of the method
        accuracy_tot = 0
        accuracy_correct = 0
        for m in range(0,10):
            accuracy_tot += sum(strategy.conf_matr[m,:])
            accuracy_correct += strategy.conf_matr[m,m]
        strategy.accuracy = accuracy_correct/accuracy_tot
# --------



# -------- CREATE TABLE 
table_values = np.zeros([7,2])
table_values[0,0] = round(OL_data.accuracy*100,2)
table_values[0,1] = round(OL_data.times[1],2)

table_values[1,0] = round(OLV2_data.accuracy*100,2)
table_values[1,1] = round(OLV2_data.times[1],2)

table_values[2,0] = round(LWF_data.accuracy*100,2)
table_values[2,1] = round(LWF_data.times[1],2)

table_values[3,0] = round(CWR_data.accuracy*100,2)
table_values[3,1] = round(CWR_data.times[1],2)

table_values[4,0] = round(OLb_data.accuracy*100,2)
table_values[4,1] = round(OLb_data.times[1],2)

table_values[5,0] = round(OLV2b_data.accuracy*100,2)
table_values[5,1] = round(OLV2b_data.times[1],2)

table_values[6,0] = round(LWFb_data.accuracy*100,2)
table_values[6,1] = round(LWFb_data.times[1],2)


fig3, ax = plt.subplots(figsize =(10, 3)) 
ax.set_axis_off() 

table = ax.table( 
    cellText = table_values,  
    rowLabels = save_name,  
    colLabels = ['Overall accuracy', 'inference time'], 
    rowColours =["cornflowerblue"] * 200,  
    colColours =["cornflowerblue"] * 200, 
    cellLoc ='center',  
    loc ='upper left')         

table.scale(1,2) 
table.set_fontsize(10)
ax.set_title('OpenMV training results - Method used ', fontweight ="bold") 
#plt.savefig(SAVE_PLOTS__PATH + save_name[method_used] +'table.png')
plt.show()

# --------

