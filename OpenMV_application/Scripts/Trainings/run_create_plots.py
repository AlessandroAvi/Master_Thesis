import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os





#--------------------------------------------------------------------------
#    _______  ______  _        _    _   _    _  _____ ___ ___  _   _ 
#   | ____\ \/ /  _ \| |      / \  | \ | |  / \|_   _|_ _/ _ \| \ | |
#   |  _|  \  /| |_) | |     / _ \ |  \| | / _ \ | |  | | | | |  \| |
#   | |___ /  \|  __/| |___ / ___ \| |\  |/ ___ \| |  | | |_| | |\  |
#   |_____/_/\_\_|   |_____/_/   \_\_| \_/_/   \_\_| |___\___/|_| \_|

"""
This python script is used for generating, showing and saving the plots in which the performances of different training are stored.
The script simply reads a txt file and parses from that all the useful info storing them in the correct lists/matrices. 
After that the code in seques generates and saves:
 - bar plot showing the accuracy of the model
 - confusion matrix about the last x iterations of the training performed ion teh camera (x because the number of iterations in the test varies)
 - table in which all the useful informations regarding the accuracy, precision and F1 score for each label are stored.
"""


###################################
#    __  __    _    ___ _   _ 
#   |  \/  |  / \  |_ _| \ | |
#   | |\/| | / _ \  | ||  \| |
#   | |  | |/ ___ \ | || |\  |
#   |_|  |_/_/   \_\___|_| \_|




# Define path where to save the bar plots/tables/confusion matrices
ROOT__PATH = os.path.dirname(os.path.abspath(__file__))
SAVE_PLOTS__PATH = ROOT__PATH + '\\OpenMV_results\\'


confusion_matrix = np.zeros((10,10))
method_used = 0
methods = ["INFERENCE", "OL", "OLV2", "LWF", "CWR", "OL mini batches", "OLV2 mini batches", "LWF mini batches"]
save_name = ["INFERENCE_", "1_OL_", "2_OLV2_", "3_LWF_", "4_CWR_", "5_OL_batches_", "6_OLV2_batches_", "7_LWF_batches_"]
openmv_labels = []
openmv_times = []
real_labels = ['0','1','2','3','4','5','6','7','8','9']
size = len(real_labels)

# -------- READ DATA FROM TXT FILE GENERATED BY OPENMV CAMERA
with open(SAVE_PLOTS__PATH + 'training_results.txt') as f:

    j,i = 0,0
    info_flag = 0
    info = []
    label_flag = 0
    times_flag = 0
    for line in f:  # cycle over lines 

        if(info_flag==0):
            data = line.split(',')  # split one line in each single number
            for number in data:
                info.append(float(number))
            info_flag = 1

        elif(label_flag==0 and info_flag==1):
            data = line.split(',')  # split one line in each single number
            for number in data:
                openmv_labels.append(number)
            label_flag = 1

        elif(times_flag==0 and label_flag==1):
            data = line.split(',')  # split one line in each single number
            for number in data:
                openmv_times.append(float(number))
            times_flag = 1

        else:   
            data = line.split(',')  # split one line in each single number
            for number in data:
                confusion_matrix[j,i] = float(number)   # save the number
                i+=1

            j+=1
            i=0
method_used = int(info[0])
# --------


# -------- CREATE BAR PLOT
blue2 = 'cornflowerblue'
colors = [blue2]*size
bar_values = np.zeros(size)

for i in range(0, size):
    bar_values[i] = round(round(confusion_matrix[i,i]/sum(confusion_matrix[i,:]),4)*100,2)

fig1 = plt.subplots(figsize =(12, 8))
bar_plot = plt.bar(real_labels, bar_values, color=colors, edgecolor='grey')

# Add text to each bar showing the percent
for p in bar_plot:
    height = p.get_height()
    xy_pos = (p.get_x() + p.get_width() / 2, height)
    xy_txt = (0, -20) 

    # Avoid the text to be outside the image if bar is too low
    if(height>10):
        plt.annotate(str(height), xy=xy_pos, xytext=xy_txt, textcoords="offset points", ha='center', va='bottom', fontsize=12)
    else:
        plt.annotate(str(height), xy=xy_pos, xytext=(0, 3), textcoords="offset points", ha='center', va='bottom', fontsize=12)


# Plot
plt.ylim([0, 100])
plt.ylabel('Accuracy %', fontsize = 15)
plt.xlabel('Classes', fontsize = 15)
plt.xticks([r for r in range(size)], real_labels, fontweight ='bold', fontsize = 12)
plt.title('Accuracy test - Method used: ' + methods[method_used]  , fontweight ='bold', fontsize = 15)
plt.savefig(SAVE_PLOTS__PATH + save_name[method_used] +'barPlot.png')
plt.show(block=False)
plt.close()
# --------


# -------- CREATE CONFUSION MATRIX
fig2 = plt.figure(figsize =(8,8))
plt.clf()
ax = fig2.add_subplot(111)
ax.set_aspect(1)
res = ax.imshow(confusion_matrix, cmap=plt.cm.Blues, interpolation='nearest')
width, height = confusion_matrix.shape


# Loop over data dimensions and create text annotations.
for x in range(width):
    for y in range(height):
        ax.annotate(str(int(confusion_matrix[x,y])), xy=(y, x), ha="center", va="center", size='large')

cb = fig2.colorbar(res)
plt.xticks(range(width), real_labels[:width])
plt.yticks(range(height), real_labels[:height])
plt.title('OpenMV training confusion matrix - Method used ' + methods[method_used], fontweight ="bold") 
plt.savefig(SAVE_PLOTS__PATH + save_name[method_used] +'confusionMatrix.png')
plt.show(block=False)
plt.close()
# --------


# -------- CREATE TABLE 
table_values = np.zeros([3,confusion_matrix.shape[1]])

for i in range(0, table_values.shape[1]):
    if(sum(confusion_matrix[i,:]) != 0):
        table_values[0,i] = round(confusion_matrix[i,i]/sum(confusion_matrix[i,:]),2)       # RECALL/SENSITIVITY

    if(sum(confusion_matrix[:,i]) != 0):
        table_values[1,i] = round(confusion_matrix[i,i]/sum(confusion_matrix[:,i]),2)       # PRECISION 

    if((table_values[1,i]+table_values[2,i])!=0):
        table_values[2,i] = round((2*table_values[0,i]*table_values[1,i])/(table_values[0,i]+table_values[1,i]),2)  # F1 SCORE

fig3, ax = plt.subplots(figsize =(10, 3)) 
ax.set_axis_off() 

table = ax.table( 
    cellText = table_values,  
    rowLabels = ['Accuracy', 'Precision', 'F1 score'],  
    colLabels = real_labels, 
    rowColours =["cornflowerblue"] * 200,  
    colColours =["cornflowerblue"] * 200, 
    cellLoc ='center',  
    loc ='upper left')         

table.scale(1,2) 
table.set_fontsize(10)
ax.set_title('OpenMV training results - Method used ' + methods[method_used], fontweight ="bold") 
plt.savefig(SAVE_PLOTS__PATH + save_name[method_used] +'table.png')
plt.show(block=False)
plt.close()
# --------




# -------- CREATE INFORMATION BLOCK
fig, ax = plt.subplots(figsize =(8, 3)) 
     
fig.text(0.2, 0.8, 'TRAINING INFORMATIONS:', fontsize = 15)

fig.text(0.2, 0.7,'Method:')
fig.text(0.7, 0.7,f'{methods[method_used]}')

fig.text(0.2, 0.65,'Number of training samples:')
fig.text(0.7, 0.65,f'{info[1]}')

fig.text(0.2, 0.6,'Number of testing samples:')
fig.text(0.7, 0.6,f'{info[2]}')

fig.text(0.2, 0.55,'Learning rate:')
fig.text(0.7, 0.55,f'{info[3]}')

fig.text(0.2, 0.50,'Batch size:')
fig.text(0.7, 0.50,f'{info[4]}')

fig.text(0.2, 0.45,'Average frozen model inference time:')
fig.text(0.7, 0.45,f'{openmv_times[0]} ms')

fig.text(0.2, 0.40,'Average OL model inference + training time:')
fig.text(0.7, 0.40,f'{openmv_times[1]} ms')

fig.text(0.2, 0.35,'Average total time:')
fig.text(0.7, 0.35,f'{openmv_times[2]} ms')
   
ax.set(xlim =(0, 10), ylim =(0, 10))
plt.savefig(SAVE_PLOTS__PATH + save_name[method_used] +'esempio.png')
plt.show(block=False)
plt.close()
# --------




# -------- CREATE FINAL PLOT
fig = plt.figure(figsize=(20,15))

Image1 = mpimg.imread(SAVE_PLOTS__PATH + save_name[method_used]  + 'barPlot.png')
Image2 = mpimg.imread(SAVE_PLOTS__PATH + save_name[method_used]  + 'confusionMatrix.png')
Image3 = mpimg.imread(SAVE_PLOTS__PATH + save_name[method_used]  + 'table.png')
Image4 = mpimg.imread(SAVE_PLOTS__PATH + save_name[method_used]  + 'esempio.png')

# Adds a subplot at the 1st position
fig.add_subplot(2, 2, 1)
plt.imshow(Image1)
plt.axis('off')

# Adds a subplot at     the 2nd position
fig.add_subplot(2, 2, 2)
plt.imshow(Image2)
plt.axis('off')

# Adds a subplot at the 3rd position
fig.add_subplot(2, 2, 3)
plt.imshow(Image3)
plt.axis('off')

# Adds a subplot at the 4th position
fig.add_subplot(2, 2, 4)
plt.imshow(Image4)
plt.axis('off')

plt.tight_layout()

plt.savefig(SAVE_PLOTS__PATH + save_name[method_used]  + 'recap.png', bbox_inches='tight', 
            edgecolor=fig.get_edgecolor(), facecolor=fig.get_facecolor(), dpi=200 )

plt.show()

os.remove(SAVE_PLOTS__PATH + save_name[method_used] +'esempio.png')
# --------


